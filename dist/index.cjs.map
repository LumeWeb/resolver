{"version":3,"sources":["../src/index.ts","../src/resolver.ts","../src/lib/util.ts","../src/subResolverBase.ts","../src/resolvers/handshake.ts","../src/resolvers/icann.ts","../src/resolvers/eip137.ts","../src/data/pocketNetworks.ts","../src/resolvers/eip137/rpcProvider.ts","../src/resolvers/eip137/resolver.ts","../src/resolvers/solana.ts","../src/resolvers/solana/connection.ts","../src/resolvers/algorand/client.ts","../src/resolvers/algorand/indexer.ts","../src/resolvers/algorand.ts","../src/resolvers/avax.ts","../src/resolvers/evmos.ts"],"sourcesContent":["import Resolver from \"./resolver.js\";\nexport * from \"./resolver.js\";\nimport Handshake from \"./resolvers/handshake.js\";\nimport Icann from \"./resolvers/icann.js\";\nimport Eip137 from \"./resolvers/eip137.js\";\nimport Solana from \"./resolvers/solana.js\";\nimport Algorand from \"./resolvers/algorand.js\";\nimport Avax from \"./resolvers/avax.js\";\nimport Evmos from \"./resolvers/evmos.js\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n\nconst resolvers = {\n  Icann,\n  Eip137,\n  Solana,\n  Algorand,\n  Avax,\n  Evmos,\n  Handshake,\n  createDefaultResolver: (network?: RpcNetwork) => {\n    const defaultResolver = new Resolver(network);\n    defaultResolver.registerResolver(new Icann(defaultResolver));\n    defaultResolver.registerResolver(new Eip137(defaultResolver));\n    defaultResolver.registerResolver(new Solana(defaultResolver));\n    defaultResolver.registerResolver(new Algorand(defaultResolver));\n    defaultResolver.registerResolver(new Avax(defaultResolver));\n    defaultResolver.registerResolver(new Evmos(defaultResolver));\n    defaultResolver.registerResolver(new Handshake(defaultResolver));\n\n    return defaultResolver;\n  },\n};\n\nexport * from \"./lib/util.js\";\nexport default resolvers;\nexport { Resolver };\n","import SubResolverBase from \"./subResolverBase.js\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n\nexport default class Resolver {\n  private _resolvers: SubResolverBase[] = [];\n  private _rpcNetwork: RpcNetwork;\n\n  constructor(network: RpcNetwork = new RpcNetwork()) {\n    this._rpcNetwork = network;\n  }\n\n  get resolvers(): SubResolverBase[] {\n    return this._resolvers;\n  }\n\n  get rpcNetwork(): RpcNetwork {\n    return this._rpcNetwork;\n  }\n\n  public async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    for (const resolver of this._resolvers) {\n      const result = await resolver.resolve(input, params, force);\n      if (result) {\n        return result;\n      }\n    }\n\n    return false;\n  }\n\n  public registerResolver(resolver: SubResolverBase): void {\n    this._resolvers.push(resolver);\n  }\n}\n","import Resolver from \"../resolver.js\";\nimport {\n  addContextToErr,\n  defaultPortalList,\n  Err,\n  validSkylink,\n} from \"libskynet\";\nimport {\n  bufToB64,\n  bufToHex,\n  hexToBuf,\n  verifyRegistryReadResponse,\n} from \"libskynet/dist\";\n\nexport function isIp(ip: string) {\n  return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n    ip\n  );\n}\n\nexport function isDomain(domain: string) {\n  return /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/.test(\n    domain\n  );\n}\n\nexport const startsWithSkylinkRegExp = /^(sia:\\/\\/)?([a-zA-Z0-9_-]{46})/;\nexport const registryEntryRegExp =\n  /^skyns:\\/\\/(?<publickey>[a-zA-Z0-9%]+)\\/(?<datakey>[a-zA-Z0-9%]+)$/;\n\nexport function normalizeDomain(domain: string): string {\n  return domain.replace(/^\\.+|\\.+$/g, \"\").replace(/^\\/+|\\/+$/g, \"\");\n}\n\nexport async function normalizeSkylink(\n  skylink: string,\n  resolver: Resolver\n): Promise<string | boolean> {\n  skylink = skylink.toString();\n  // @ts-ignore\n  let matches = skylink.match(startsWithSkylinkRegExp);\n  // @ts-ignore\n  if (matches) {\n    if (validSkylink(matches[2])) {\n      return decodeURIComponent(matches[2]);\n    }\n  }\n\n  // @ts-ignore\n  matches = skylink.match(registryEntryRegExp);\n\n  // @ts-ignore\n  if (matches) {\n    // @ts-ignore\n    const pubKey = decodeURIComponent(matches.groups.publickey).replace(\n      \"ed25519:\",\n      \"\"\n    );\n\n    bufToB64(\n      await getRegistryEntry(\n        hexToBuf(pubKey)[0],\n        // @ts-ignore\n        hexToBuf(matches.groups.datakey)[0]\n      )\n    );\n  }\n\n  return false;\n}\n\nexport function getTld(domain: string): string {\n  if (domain.includes(\".\")) {\n    domain = domain.split(\".\")[domain.split(\".\").length - 1];\n  }\n\n  return domain;\n}\n\nexport function getSld(domain: string): string {\n  if (domain.includes(\".\")) {\n    domain = domain\n      .split(\".\")\n      .slice(0, domain.split(\".\").length - 1)\n      .join(\".\");\n  }\n\n  return domain;\n}\n\nasync function getRegistryEntry(\n  pubkey: Uint8Array,\n  datakey: Uint8Array\n): Promise<Uint8Array> {\n  let libskynetnode: any;\n  if (typeof process !== \"undefined\" && process.release.name === \"node\") {\n    libskynetnode = await import(\"libskynetnode\");\n  } else {\n    if (window?.document) {\n      // @ts-ignore\n      return (await import(\"libkernel\"))\n        .registryRead(pubkey, datakey)\n        .then((result: [registryReadResult, Err]) => result[0].entryData);\n    } else {\n      // @ts-ignore\n      return (await import(\"libkmodule\"))\n        .registryRead(pubkey, datakey)\n        .then((result: [registryReadResult, Err]) => result[0].entryData);\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const pubkeyHex = bufToHex(pubkey);\n    const datakeyHex = bufToHex(datakey);\n    const endpoint =\n      \"/skynet/registry?publickey=ed25519%3A\" +\n      pubkeyHex +\n      \"&datakey=\" +\n      datakeyHex;\n    const verifyFunc = (response: Response): Promise<Err> =>\n      verifyRegistryReadResponse(response, pubkey, datakey);\n    libskynetnode\n      .progressiveFetch(endpoint, {}, defaultPortalList, verifyFunc)\n      .then((result: any) => {\n        // Check for a success.\n        if (result.success === true) {\n          result.response\n            .json()\n            .then((j: any) => {\n              resolve(j.data);\n            })\n            .catch((err: any) => {\n              reject(\n                addContextToErr(\n                  err,\n                  \"unable to parse response despite passing verification\"\n                )\n              );\n            });\n          return;\n        }\n\n        // Check for 404.\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < result.responsesFailed.length; i++) {\n          if (result.responsesFailed[i].status === 404) {\n            resolve(new Uint8Array(0));\n            return;\n          }\n        }\n        reject(\"unable to read registry entry\\n\" + JSON.stringify(result));\n      });\n  });\n}\n// tslint:disable-next-line:class-name\ninterface readRegistryEntryResult {\n  exists: boolean;\n  data: Uint8Array;\n  revision: bigint;\n}\n// tslint:disable-next-line:class-name\ninterface registryReadResult {\n  exists: boolean;\n  entryData?: Uint8Array;\n  revision?: bigint;\n}\n","import ISubResolver from \"./ISubResolver.js\";\nimport Resolver from \"./resolver.js\";\nimport { getTld } from \"./lib/util.js\";\n\n// @ts-ignore\nexport default abstract class SubResolverBase implements ISubResolver {\n  protected resolver: Resolver;\n\n  constructor(resolver: Resolver) {\n    this.resolver = resolver;\n  }\n\n  abstract resolve(\n    input: string,\n    params: { [key: string]: any },\n    force: boolean\n  ): Promise<string | boolean>;\n\n  getSupportedTlds(): string[] {\n    return [];\n  }\n\n  isTldSupported(domain: string): boolean {\n    return this.getSupportedTlds().includes(getTld(domain));\n  }\n}\n","import {\n  getTld,\n  isDomain,\n  isIp,\n  normalizeDomain,\n  normalizeSkylink,\n} from \"../lib/util.js\";\n\n// @ts-ignore\nimport SubResolverBase from \"../subResolverBase.js\";\n// @ts-ignore\nimport tldEnum from \"@lumeweb/tld-enum\";\nimport Resolver from \"../resolver.js\";\n\nimport * as ethers from \"ethers\";\n\nexport default class Handshake extends SubResolverBase {\n  private tldBlacklist: string[] = [];\n  constructor(resolver: Resolver) {\n    super(resolver);\n\n    for (const subresolver of resolver.resolvers) {\n      this.tldBlacklist = [\n        ...this.tldBlacklist,\n        ...subresolver.getSupportedTlds(),\n      ];\n    }\n  }\n\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    const tld = getTld(input);\n\n    if (this.tldBlacklist.includes(tld)) {\n      return false;\n    }\n\n    if (isIp(input)) {\n      return false;\n    }\n\n    if (\"subquery\" in params) {\n      return false;\n    }\n\n    const records = await this.query(tld, force);\n    if (!records) {\n      return false;\n    }\n    let result: string | boolean = false;\n\n    for (const record of (records as { [key: string]: any }[]).reverse()) {\n      switch (record.type) {\n        case \"NS\": {\n          result = await this.processNs(input, record, records, force);\n          break;\n        }\n        case \"GLUE4\": {\n          result = await this.processGlue(input, record, force);\n          break;\n        }\n        case \"TXT\": {\n          result = await this.processTxt(record);\n          break;\n        }\n        case \"SYNTH6\": {\n          if (\"ipv6\" in params && params.ipv6) {\n            result = record.address;\n          }\n          break;\n        }\n        case \"SYNTH4\": {\n          result = record.address;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  // @ts-ignore\n  private async processNs(domain: string, record, records, force: boolean) {\n    // @ts-ignore\n    const glue = records.slice().find(\n      (item: object) =>\n        // @ts-ignore\n        [\"GLUE4\", \"GLUE6\"].includes(item.type) && item.ns === record.ns\n    );\n\n    if (glue) {\n      return this.processGlue(domain, record, force);\n    }\n\n    const foundDomain = normalizeDomain(record.ns);\n    let isIcann = false;\n\n    let isEvmAddress = false;\n\n    if (\n      foundDomain.split(\".\").length >= 2 &&\n      ethers.utils.isAddress(foundDomain.split(\".\")[0])\n    ) {\n      isEvmAddress = true;\n    }\n\n    if (\n      (isDomain(foundDomain) || /[a-zA-Z0-9\\-]+/.test(foundDomain)) &&\n      !isEvmAddress\n    ) {\n      if (foundDomain.includes(\".\")) {\n        const tld = foundDomain.split(\".\")[foundDomain.split(\".\").length - 1];\n\n        isIcann = tldEnum.list.includes(tld);\n      }\n\n      if (!isIcann) {\n        const hnsNs = await this.resolver.resolve(foundDomain, { force });\n\n        if (hnsNs) {\n          return this.resolver.resolve(domain, {\n            subquery: true,\n            nameserver: hnsNs,\n            force,\n          });\n        }\n      }\n\n      return this.resolver.resolve(\n        domain,\n        {\n          subquery: true,\n          nameserver: foundDomain,\n        },\n        force\n      );\n    }\n\n    const result = await this.resolver.resolve(record.ns, { domain }, force);\n\n    return result || record.ns;\n  }\n\n  private async processGlue(domain: string, record: any, force: boolean) {\n    if (isDomain(record.ns) && isIp(record.address)) {\n      return this.resolver.resolve(\n        domain,\n        {\n          subquery: true,\n          nameserver: record.address,\n        },\n        force\n      );\n    }\n\n    return false;\n  }\n\n  private async query(tld: string, force: boolean): Promise<object | boolean> {\n    const query = this.resolver.rpcNetwork.query(\n      \"getnameresource\",\n      \"hns\",\n      [tld],\n      force\n    );\n    const resp = await query.result;\n\n    // @ts-ignore\n    return resp?.records || [];\n  }\n\n  private async processTxt(record: any): Promise<string | boolean> {\n    const content = record.txt.slice().pop();\n\n    const skylink = await normalizeSkylink(content, this.resolver);\n\n    if (skylink) {\n      return skylink;\n    }\n\n    return content;\n  }\n}\n","import { isDomain } from \"../lib/util.js\";\n\n// @ts-ignore\nimport SubResolverBase from \"../subResolverBase.js\";\n\nexport default class Icann extends SubResolverBase {\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force = false\n  ): Promise<string | boolean> {\n    if (!params || !(\"subquery\" in params) || !params.subquery) {\n      return false;\n    }\n\n    if (!isDomain(input) && !(\"nameserver\" in params || !params.nameserver)) {\n      return false;\n    }\n\n    const data = {\n      domain: input,\n      nameserver: params.nameserver ?? undefined,\n    };\n\n    const query = this.resolver.rpcNetwork.query(\n      \"dnslookup\",\n      \"icann\",\n      data,\n      force\n    );\n\n    return query.result;\n  }\n}\n","// @ts-ignore\nimport { ethers } from \"ethers\";\nimport { normalizeSkylink } from \"../lib/util.js\";\n// @ts-ignore\nimport tldEnum from \"@lumeweb/tld-enum\";\nimport Resolver, { maybeGetContentHash } from \"./eip137/resolver.js\";\n\nfunction isResponseEmpty(data: any) {\n  if (!data) {\n    return true;\n  }\n\n  if (ethers.utils.isHexString(data)) {\n    const normalizedData = ethers.utils.stripZeros(data).toString();\n    if (!normalizedData) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default class Eip137 extends Resolver {\n  getSupportedTlds(): string[] {\n    return [\"eth\"];\n  }\n\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    let resolve = await super.resolve(input, params, force);\n    if (!resolve) {\n      const hip5Data = input.split(\".\");\n      // @ts-ignore\n      if (2 <= hip5Data.length && \"domain\" in params) {\n        if (ethers.utils.isAddress(hip5Data[0])) {\n          // @ts-ignore\n          resolve = this.resolveHip5(params.domain, hip5Data, force);\n        }\n      }\n    }\n\n    return resolve;\n  }\n\n  private async resolveHip5(\n    domain: string,\n    params: { [key: string]: any } = {},\n    data: string[],\n    force: boolean = false\n  ): Promise<string | boolean> {\n    params.chain = data[1].replace(\"_\", \"\");\n\n    const ens = this.getEns(this.getConnection(params, force));\n\n    try {\n      const name = await ens.name(domain);\n      const content = maybeGetContentHash(name.getContent());\n      let result: string | boolean = false;\n\n      if (content) {\n        result = content;\n      }\n\n      const skylink = await normalizeSkylink(result as string, this.resolver);\n\n      if (skylink) {\n        return skylink;\n      }\n\n      /*\n                                Future DNS support\n                               */\n      /*if (isResponseEmpty(result)) {\n                                result = await name.getText(\"A\");\n                              }\n\n                              if (isResponseEmpty(result)) {\n                                result = await name.getText(\"CNAME\");\n                              }\n\n                              if (isResponseEmpty(result)) {\n                                result = await name.getText(\"NS\");\n                                if (result) {\n                                  result = normalizeDomain(result as string);\n                                  let isIcann = false;\n                                  if (isDomain(result) || /[a-zA-Z0-9\\-]+/.test(result)) {\n                                    if (result.includes(\".\")) {\n                                      const tld = result.split(\".\")[result.split(\".\").length - 1];\n                                      isIcann = tldEnum.list.includes(tld);\n                                    }\n\n                                    if (!isIcann) {\n                                      const evmNs = await this.resolver.resolve(result, { force });\n\n                                      if (result) {\n                                        return this.resolver.resolve(domain, {\n                                          subquery: true,\n                                          nameserver: evmNs,\n                                          force,\n                                        });\n                                      }\n                                    }\n\n                                    result = await this.resolver.resolve(\n                                      domain,\n                                      {\n                                        subquery: true,\n                                        nameserver: result,\n                                      },\n                                      force\n                                    );\n                                  }\n                                }\n                              }*/\n\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  protected getChain(params: { [key: string]: any }): string {\n    if (params.chain) {\n      return params.chain;\n    }\n\n    return \"eth\";\n  }\n}\n","const pocketNetworks: { [name: string]: string } = {\n  \"algorand-mainnet\": \"29\",\n  \"algorand-archival\": \"000D\",\n  \"algorand-testnet\": \"45\",\n  \"algorand-testnet-archival\": \"0A45\",\n  \"arweave-mainnet\": \"30\",\n  \"avax-mainnet\": \"3\",\n  \"avax-archival\": \"00A3\",\n  \"avax-fuji\": \"000E\",\n  \"bsc-mainnet\": \"4\",\n  \"bsc-archival\": \"10\",\n  \"bsc-testnet\": \"11\",\n  \"bsc-testnet-archival\": \"12\",\n  \"btc-mainnet\": \"2\",\n  \"eth-mainnet\": \"21\",\n  \"eth-archival\": \"22\",\n  \"eth-archival-trace\": \"28\",\n  \"eth-goerli\": \"26\",\n  \"poa-kovan\": \"24\",\n  \"eth-rinkeby\": \"25\",\n  \"eth-ropsten\": \"23\",\n  \"evmos-mainnet\": \"46\",\n  \"fuse-mainnet\": \"5\",\n  \"fuse-archival\": \"000A\",\n  \"gnosischain-mainnet\": \"27\",\n  \"gnosischain-archival\": \"000C\",\n  \"harmony-0\": \"40\",\n  \"harmony-0-archival\": \"0A40\",\n  \"harmony-1\": \"41\",\n  \"harmony-1-archival\": \"0A41\",\n  \"harmony-2\": \"42\",\n  \"harmony-2-archival\": \"0A42\",\n  \"harmony-3\": \"43\",\n  \"harmony-3-archival\": \"0A43\",\n  \"iotex-mainnet\": \"44\",\n  \"oec-mainnet\": \"47\",\n  mainnet: \"1\",\n  \"poly-mainnet\": \"9\",\n  \"poly-archival\": \"000B\",\n  \"poly-mumbai\": \"000F\",\n  \"poly-mumbai-archival\": \"00AF\",\n  \"sol-mainnet\": \"6\",\n  \"sol-testnet\": \"31\",\n};\nexport default pocketNetworks;\n","import * as ethers from \"ethers\";\nimport * as ethersNetwork from \"@ethersproject/networks\";\nimport * as ethersTransactions from \"@ethersproject/transactions\";\nimport * as ethersProperties from \"@ethersproject/properties\";\nimport * as ethersBytes from \"@ethersproject/bytes\";\nimport * as ethersLogger from \"@ethersproject/logger\";\nimport * as ethersAbstractProvider from \"@ethersproject/abstract-provider\";\nimport * as ethersAbstractSigner from \"@ethersproject/abstract-signer\";\nimport * as ethersStrings from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n\nconst { defineReadOnly, resolveProperties, shallowCopy } = ethersProperties;\nconst { Logger } = ethersLogger;\nconst { toUtf8Bytes } = ethersStrings;\nconst { hexlify } = ethersBytes;\n\nconst allowedTransactionKeys: { [key: string]: boolean } = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n};\n\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction checkError(method: string, error: any, params: any): any {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (\n    method === \"call\" &&\n    error.code === ethersLogger.Logger.errors.SERVER_ERROR\n  ) {\n    const e = error.error;\n    if (e && e.message.match(\"reverted\") && ethersBytes.isHexString(e.data)) {\n      return e.data;\n    }\n\n    ethers.ethers.logger.throwError(\n      \"missing revert data in call exception\",\n      ethersLogger.Logger.errors.CALL_EXCEPTION,\n      {\n        error,\n        data: \"0x\",\n      }\n    );\n  }\n\n  let message = error.message;\n  if (\n    error.code === ethersLogger.Logger.errors.SERVER_ERROR &&\n    error.error &&\n    typeof error.error.message === \"string\"\n  ) {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n\n  const transaction = params.transaction || params.signedTransaction;\n\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    ethers.ethers.logger.throwError(\n      \"insufficient funds for intrinsic transaction cost\",\n      ethersLogger.Logger.errors.INSUFFICIENT_FUNDS,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"nonce too low\"\n  if (message.match(/nonce too low/)) {\n    ethers.logger.throwError(\n      \"nonce has already been used\",\n      ethersLogger.Logger.errors.NONCE_EXPIRED,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced/)) {\n    ethers.logger.throwError(\n      \"replacement fee too low\",\n      ethersLogger.Logger.errors.REPLACEMENT_UNDERPRICED,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/)) {\n    ethers.logger.throwError(\n      \"legacy pre-eip-155 transactions not supported\",\n      ethersLogger.Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  if (\n    errorGas.indexOf(method) >= 0 &&\n    message.match(\n      /gas required exceeds allowance|always failing transaction|execution reverted/\n    )\n  ) {\n    ethers.logger.throwError(\n      \"cannot estimate gas; transaction may fail or may require manual gas limit\",\n      ethersLogger.Logger.errors.UNPREDICTABLE_GAS_LIMIT,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  throw error;\n}\n\nexport default class RpcProvider extends ethers.providers.BaseProvider {\n  private _dnsChain: string;\n  private _rpcNetwork: RpcNetwork;\n  private _force: boolean;\n\n  constructor(\n    dnsChain: string,\n    dnsNetwork: RpcNetwork,\n    force: boolean = false\n  ) {\n    const networkOrReady:\n      | ethersNetwork.Networkish\n      | Promise<ethersNetwork.Network> = { name: \"dummy\", chainId: 0 };\n    super(networkOrReady);\n    this._dnsChain = dnsChain;\n    this._rpcNetwork = dnsNetwork;\n    this._force = force;\n  }\n\n  async detectNetwork(): Promise<ethersNetwork.Network> {\n    return { name: \"dummy\", chainId: 0 };\n  }\n\n  async send(method: string, params: any[]): Promise<any> {\n    const query = this._rpcNetwork.query(\n      method,\n      this._dnsChain,\n      params,\n      this._force\n    );\n    let resp = await query.result;\n\n    try {\n      hexlify(resp);\n    } catch (e) {\n      resp = \"0x\" + \"0\".repeat(65);\n    }\n\n    return resp;\n  }\n\n  prepareRequest(method: string, params: any): [string, any[]] | null {\n    switch (method) {\n      case \"call\": {\n        const hexlifyTransaction = ethers.utils.getStatic<\n          (\n            t: ethers.providers.TransactionRequest,\n            a?: { [key: string]: boolean }\n          ) => { [key: string]: string }\n        >(this.constructor, \"hexlifyTransaction\");\n        return [\n          \"eth_call\",\n          [\n            hexlifyTransaction(params.transaction, { from: true }),\n            params.blockTag,\n          ],\n        ];\n      }\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  async perform(method: string, params: any): Promise<any> {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (method === \"call\") {\n      const tx = params.transaction;\n      if (tx && tx.type != null && ethers.BigNumber.from(tx.type).isZero()) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          // Network doesn't know about EIP-1559 (and hence type)\n          params = ethersProperties.shallowCopy(params);\n          params.transaction = ethersProperties.shallowCopy(tx);\n          delete params.transaction.type;\n        }\n      }\n    }\n\n    const args = this.prepareRequest(method, params);\n\n    try {\n      // @ts-ignore\n      return await this.send(args[0], args[1]);\n    } catch (error) {\n      return checkError(method, error, params);\n    }\n  }\n\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(\n    transaction: ethers.providers.TransactionRequest,\n    allowExtra?: { [key: string]: boolean }\n  ): { [key: string]: string | ethersTransactions.AccessList } {\n    // Check only allowed properties are given\n    const allowed = ethersProperties.shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    const result: { [key: string]: string | ethersTransactions.AccessList } =\n      {};\n\n    // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n    [\n      \"gasLimit\",\n      \"gasPrice\",\n      \"type\",\n      \"maxFeePerGas\",\n      \"maxPriorityFeePerGas\",\n      \"nonce\",\n      \"value\",\n    ].forEach((key) => {\n      if ((transaction as any)[key] == null) {\n        return;\n      }\n      const value = ethersBytes.hexValue((transaction as any)[key]);\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n\n    [\"from\", \"to\", \"data\"].forEach((key) => {\n      if ((transaction as any)[key] == null) {\n        return;\n      }\n      result[key] = ethersBytes.hexlify((transaction as any)[key]);\n    });\n\n    if ((transaction as any).accessList) {\n      result.accessList = ethersTransactions.accessListify(\n        (transaction as any).accessList\n      );\n    }\n\n    return result;\n  }\n\n  // @ts-ignore\n  getSigner(addressOrIndex?: string | number): RpcSigner {\n    // @ts-ignore\n    return new RpcSigner({}, this, addressOrIndex);\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass RpcSigner extends ethersAbstractSigner.Signer {\n  // @ts-ignore\n  readonly provider: RpcProvider;\n  // @ts-ignore\n  private _index: number;\n  // @ts-ignore\n  private _address: string;\n\n  // @ts-ignore\n  constructor(provider: RpcProvider, addressOrIndex?: string | number) {\n    super();\n    // @ts-ignore\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(\n        this,\n        // @ts-ignore\n        \"_address\",\n        // @ts-ignore\n        this.provider.formatter.address(addressOrIndex)\n      );\n      // @ts-ignore\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      // @ts-ignore\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      // @ts-ignore\n      defineReadOnly(this, \"_address\", null);\n    }\n  }\n\n  connect(provider: RpcProvider): RpcSigner {\n    return ethers.logger.throwError(\n      \"cannot alter JSON-RPC Signer connection\",\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"connect\",\n      }\n    );\n  }\n\n  getAddress(): Promise<string> {\n    // @ts-ignore\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n      if (accounts.length <= this._index) {\n        ethers.logger.throwError(\n          \"unknown account #\" + this._index,\n          Logger.errors.UNSUPPORTED_OPERATION,\n          {\n            operation: \"getAddress\",\n          }\n        );\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<string> {\n    transaction = shallowCopy(transaction);\n\n    const fromAddress = this.getAddress().then((address) => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      // @ts-ignore\n      transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n        if (to == null) {\n          return null;\n        }\n        const address = await this.provider.resolveName(to);\n        if (address == null) {\n          ethers.logger.throwArgumentError(\n            \"provided ENS name resolves to null\",\n            \"tx.to\",\n            to\n          );\n        }\n        return address;\n      });\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress,\n    }).then(({ tx, sender }) => {\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          ethers.logger.throwArgumentError(\n            \"from address mismatch\",\n            \"transaction\",\n            transaction\n          );\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = (this.provider.constructor as any).hexlifyTransaction(tx, {\n        from: true,\n      });\n\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(\n        (hash) => {\n          return hash;\n        },\n        (error) => {\n          return checkError(\"sendTransaction\", error, hexTx);\n        }\n      );\n    });\n  }\n\n  signTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<string> {\n    return ethers.logger.throwError(\n      \"signing transactions is unsupported\",\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"signTransaction\",\n      }\n    );\n  }\n\n  async sendTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<ethersAbstractProvider.TransactionResponse> {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider._getInternalBlockNumber(\n      100 + 2 * this.provider.pollingInterval\n    );\n\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(transaction);\n\n    try {\n      // Unfortunately, JSON-RPC only provides and opaque transaction hash\n      // for a response, and we need the actual transaction, so we poll\n      // for it; it should show up very quickly\n      // @ts-ignore\n      return await poll(\n        async () => {\n          const tx = await this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        },\n        { oncePoll: this.provider }\n      );\n    } catch (error) {\n      (error as any).transactionHash = hash;\n      throw error;\n    }\n  }\n\n  async signMessage(message: ethers.Bytes | string): Promise<string> {\n    const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n    const address = await this.getAddress();\n\n    return this.provider.send(\"personal_sign\", [\n      hexlify(data),\n      address.toLowerCase(),\n    ]);\n  }\n\n  async _legacySignMessage(message: ethers.Bytes | string): Promise<string> {\n    const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n    const address = await this.getAddress();\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    return this.provider.send(\"eth_sign\", [\n      address.toLowerCase(),\n      hexlify(data),\n    ]);\n  }\n\n  async _signTypedData(\n    domain: ethersAbstractSigner.TypedDataDomain,\n    types: Record<string, ethersAbstractSigner.TypedDataField[]>,\n    value: Record<string, any>\n  ): Promise<string> {\n    // Populate any ENS names (in-place)\n    const populated = await _TypedDataEncoder.resolveNames(\n      domain,\n      types,\n      value,\n      // @ts-ignore\n      (name: string) => {\n        return this.provider.resolveName(name);\n      }\n    );\n\n    const address = await this.getAddress();\n\n    return this.provider.send(\"eth_signTypedData_v4\", [\n      address.toLowerCase(),\n      JSON.stringify(\n        _TypedDataEncoder.getPayload(populated.domain, types, populated.value)\n      ),\n    ]);\n  }\n\n  async unlock(password: string): Promise<boolean> {\n    const provider = this.provider;\n\n    const address = await this.getAddress();\n\n    return provider.send(\"personal_unlockAccount\", [\n      address.toLowerCase(),\n      password,\n      null,\n    ]);\n  }\n}\n","import SubResolverBase from \"../../subResolverBase.js\";\nimport pocketNetworks from \"../../data/pocketNetworks.js\";\nimport RpcProvider from \"./rpcProvider.js\";\nimport { normalizeSkylink } from \"../../lib/util.js\";\n// @ts-ignore\nimport ENSRoot, { getEnsAddress } from \"@lumeweb/ensjs\";\n\nconst ENS = ENSRoot.default;\n\nconst networkMap: { [key: string]: string } = {\n  eth: \"eth-mainnet\",\n};\n\nexport default abstract class Resolver extends SubResolverBase {\n  protected abstract getChain(params: { [p: string]: any }): string;\n\n  protected getConnection(\n    params: { [key: string]: any } = {},\n    force: boolean\n  ): RpcProvider {\n    let chain = this.getChain(params);\n\n    if (chain in networkMap) {\n      chain = networkMap[chain];\n    }\n    if (chain in pocketNetworks) {\n      chain = pocketNetworks[chain];\n    }\n\n    return new RpcProvider(chain, this.resolver.rpcNetwork, force);\n  }\n\n  protected getEns(provider: RpcProvider): any {\n    return new ENS({ provider, ensAddress: getEnsAddress(1) });\n  }\n\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    if (this.isTldSupported(input)) {\n      return this.resolve137(input, params, force);\n    }\n\n    return false;\n  }\n\n  private async resolve137(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    const ens = params.ens ?? this.getEns(this.getConnection(params, force));\n\n    try {\n      const name = await ens.name(input);\n      const content = maybeGetContentHash(await name.getContent());\n      let result: string | boolean = false;\n\n      if (content) {\n        result = content;\n      }\n\n      const skylink = await normalizeSkylink(result as string, this.resolver);\n\n      if (skylink) {\n        return skylink;\n      }\n\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nexport function maybeGetContentHash(contentResult: any): string | boolean {\n  let content = false;\n\n  if (\n    typeof contentResult === \"object\" &&\n    \"contenthash\" === contentResult.contentType\n  ) {\n    content = contentResult.value;\n  }\n\n  return content;\n}\n","import SubResolverBase from \"../subResolverBase.js\";\nimport {\n  getHashedName,\n  getNameAccountKey,\n  NameRegistryState,\n} from \"@bonfida/spl-name-service\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Connection from \"./solana/connection.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { getSld, normalizeSkylink } from \"../lib/util.js\";\n\nconst SOL_TLD_AUTHORITY = new PublicKey(\n  \"58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx\"\n);\n\nexport default class Solana extends SubResolverBase {\n  async resolve(\n    input: string,\n    params: { [p: string]: any },\n    force: boolean\n  ): Promise<string | boolean> {\n    if (!this.isTldSupported(input)) {\n      return false;\n    }\n\n    const hashedName = await getHashedName(getSld(input));\n\n    const domainKey = await getNameAccountKey(\n      hashedName,\n      undefined,\n      SOL_TLD_AUTHORITY\n    );\n\n    const connection = new Connection(this.resolver.rpcNetwork, force);\n\n    const nameAccount = await connection.getAccountInfo(domainKey, \"processed\");\n    if (!nameAccount) {\n      return false;\n    }\n\n    const res: NameRegistryState = deserializeUnchecked(\n      NameRegistryState.schema,\n      NameRegistryState,\n      nameAccount.data\n    );\n\n    res.data = nameAccount.data?.slice(NameRegistryState.HEADER_LEN);\n\n    let content = res.data.toString(\"ascii\").replace(/\\0/g, \"\");\n\n    let skylink = await normalizeSkylink(content, this.resolver);\n\n    if (skylink) {\n      return skylink;\n    }\n\n    if (content.includes(\"=\")) {\n      content = content.split(\"=\")[0];\n    }\n\n    skylink = await normalizeSkylink(content, this.resolver);\n\n    if (skylink) {\n      return skylink;\n    }\n\n    return content;\n  }\n\n  getSupportedTlds(): string[] {\n    return [\"sol\"];\n  }\n}\n","import { Connection as SolanaConnection } from \"@solana/web3.js\";\nimport pocketNetworks from \"../../data/pocketNetworks.js\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n\nexport default class Connection extends SolanaConnection {\n  private _network: RpcNetwork;\n  // @ts-ignore\n  private _force: boolean;\n\n  constructor(network: RpcNetwork, force = false) {\n    super(\"http://0.0.0.0\");\n    this._force = force;\n    // @ts-ignore\n    this._network = network;\n    // @ts-ignore\n    this._rpcWebSocket.removeAllListeners();\n    // @ts-ignore\n    this._rpcRequest = this.__rpcRequest;\n  }\n\n  async __rpcRequest(methodName: string, args: any[]) {\n    const req = this._network.query(\n      methodName,\n      pocketNetworks[\"sol-mainnet\"],\n      args,\n      this._force\n    );\n\n    return req.result;\n  }\n}\n","import algosdk from \"algosdk\";\nimport pocketNetworks from \"../../data/pocketNetworks.js\";\n// @ts-ignore\nimport { Query } from \"algosdk/dist/cjs/src/client/baseHTTPClient.js\";\n// @ts-ignore\nimport * as HTTPClientImport from \"algosdk/dist/cjs/src/client/client.js\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n\nconst { default: HTTPClient } = HTTPClientImport.default;\n\ninterface HTTPClientResponse {\n  body: Uint8Array | any;\n  text?: string;\n  headers: Record<string, string>;\n  status: number;\n  ok: boolean;\n}\n\nexport function getAcceptFormat(\n  query?: Query<\"msgpack\" | \"json\">\n): \"application/msgpack\" | \"application/json\" {\n  if (\n    query !== undefined &&\n    Object.prototype.hasOwnProperty.call(query, \"format\")\n  ) {\n    switch (query.format) {\n      case \"msgpack\":\n        return \"application/msgpack\";\n      case \"json\":\n      default:\n        return \"application/json\";\n    }\n  } else {\n    return \"application/json\";\n  }\n}\n\nfunction tolowerCaseKeys(o: any) {\n  /* eslint-disable no-param-reassign,no-return-assign,no-sequences */\n  // @ts-ignore\n  // tslint:disable-next-line:ban-comma-operator\n  return Object.keys(o).reduce((c, k) => ((c[k.toLowerCase()] = o[k]), c), {});\n  /* eslint-enable no-param-reassign,no-return-assign,no-sequences */\n}\n\nexport default class Client extends algosdk.Algodv2 {\n  private _force: boolean;\n  private _network: RpcNetwork;\n  // @ts-ignore\n  private c: Client;\n\n  constructor(network: RpcNetwork, force = false) {\n    super(\"http://0.0.0.0\");\n    this._network = network;\n    this._force = force;\n    this.c = this;\n  }\n\n  private async post(\n    relativePath: string,\n    data: any,\n    requestHeaders?: Record<string, string>\n  ): Promise<HTTPClientResponse> {\n    const format = getAcceptFormat();\n    const fullHeaders = {\n      \"content-type\": \"application/json\",\n      ...tolowerCaseKeys(requestHeaders),\n    };\n    const req = this._network.query(\n      \"algorand_rest_request\",\n      pocketNetworks[\"algorand-mainnet\"],\n      {\n        method: \"POST\",\n        endpoint: relativePath,\n        data: HTTPClient.serializeData(data, requestHeaders),\n        fullHeaders,\n      },\n      this._force\n    );\n\n    const res = await req.result;\n    const { body } = res;\n    const text = undefined;\n\n    // @ts-ignore\n    return {\n      ...res,\n      body,\n      text,\n      ok: Math.trunc(res.status / 100) === 2,\n    };\n  }\n}\n","import algosdk from \"algosdk\";\n// @ts-ignore\nimport { Query } from \"algosdk/dist/cjs/src/client/baseHTTPClient.js\";\n// @ts-ignore\nimport * as utils from \"algosdk/dist/cjs/src/utils/utils.js\";\nimport { getAcceptFormat } from \"./client.js\";\nimport { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\n// @ts-ignore\n// import * as HTTPClientImport from \"algosdk/dist/cjs/src/client/client.js\";\n// const { default: HTTPClient } = HTTPClientImport.default;\n\ninterface HTTPClientResponse {\n  body: Uint8Array | any;\n  text?: string;\n  headers: Record<string, string>;\n  status: number;\n  ok: boolean;\n}\n\nfunction removeFalsyOrEmpty(obj: any) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      // eslint-disable-next-line no-param-reassign\n      if (!obj[key] || obj[key].length === 0) delete obj[key];\n    }\n  }\n  return obj;\n}\n\n// @ts-ignore\nexport default class Indexer extends algosdk.Indexer {\n  private _force: boolean;\n  private _network: RpcNetwork;\n  // @ts-ignore\n  private c: Client;\n\n  constructor(network: RpcNetwork, force = false) {\n    super(\"http://0.0.0.0\");\n    this._network = network;\n    this._force = force;\n    this.c = this;\n  }\n\n  private async get(\n    relativePath: string,\n    query?: Query<any>,\n    requestHeaders?: Record<string, string>,\n    jsonOptions?: utils.JSONOptions\n  ): Promise<HTTPClientResponse> {\n    const format = getAcceptFormat(query);\n    const fullHeaders = { ...requestHeaders, accept: format };\n    const req = this._network.query(\n      \"algorand_rest_indexer_request\",\n      \"algorand-mainnet-indexer\",\n      {\n        method: \"GET\",\n        endpoint: relativePath,\n        query: removeFalsyOrEmpty(query),\n        fullHeaders,\n      },\n      this._force\n    );\n\n    const res = await req.result;\n    const { body } = res;\n    const text = undefined;\n\n    // @ts-ignore\n    return {\n      ...res,\n      body,\n      text,\n      ok: Math.trunc(res.status / 100) === 2,\n    };\n  }\n}\n","import SubResolverBase from \"../subResolverBase.js\";\nimport Client from \"./algorand/client.js\";\nimport Indexer from \"./algorand/indexer.js\";\nimport ANS from \"@algonameservice/sdk\";\nimport { normalizeSkylink } from \"../lib/util.js\";\n\nexport default class Algorand extends SubResolverBase {\n  getSupportedTlds(): string[] {\n    return [\"algo\"];\n  }\n\n  async resolve(\n    input: string,\n    params: { [p: string]: any },\n    force: boolean\n  ): Promise<string | boolean> {\n    if (!this.isTldSupported(input)) {\n      return false;\n    }\n\n    const client = new Client(this.resolver.rpcNetwork, force);\n    const indexer = new Indexer(this.resolver.rpcNetwork, force);\n\n    // @ts-ignore\n    const resolver = new ANS(client, indexer);\n    const domain = resolver.name(input);\n\n    let record: string | boolean | Error;\n\n    try {\n      record = await domain.getContent();\n    } catch (e: any) {\n      record = false;\n    }\n\n    const skylink = await normalizeSkylink(record as string, this.resolver);\n\n    if (skylink) {\n      return skylink;\n    }\n\n    if (!record) {\n      try {\n        record = await domain.getText(\"ipaddress\");\n      } catch (e: any) {\n        record = false;\n      }\n    }\n\n    return record as string;\n  }\n}\n","import SubResolverBase from \"../subResolverBase.js\";\n// @ts-ignore\nimport AVVY from \"@avvy/client\";\nimport RpcProvider from \"./eip137/rpcProvider.js\";\nimport pocketNetworks from \"../data/pocketNetworks.js\";\nimport { normalizeSkylink } from \"../lib/util.js\";\n\nexport default class Avax extends SubResolverBase {\n  getSupportedTlds(): string[] {\n    return [\"avax\"];\n  }\n\n  async resolve(\n    input: string,\n    params: { [p: string]: any },\n    force: boolean\n  ): Promise<string | boolean> {\n    if (!this.isTldSupported(input)) {\n      return false;\n    }\n\n    const connection: RpcProvider = new RpcProvider(\n      pocketNetworks[\"avax-mainnet\"],\n      this.resolver.rpcNetwork,\n      force\n    );\n\n    const domain = new AVVY(connection).name(input);\n    const content = await domain.resolve(AVVY.RECORDS.CONTENT);\n    const skylink = await normalizeSkylink(content, this.resolver);\n\n    if (skylink) {\n      return skylink;\n    }\n\n    if (content) {\n      return content;\n    }\n\n    let record = await domain.resolve(AVVY.RECORDS.DNS_CNAME);\n\n    if (!record) {\n      record = await domain.resolve(AVVY.RECORDS.DNS_A);\n    }\n\n    return record;\n  }\n}\n","import Resolver from \"./eip137/resolver.js\";\nimport pocketNetworks from \"../data/pocketNetworks.js\";\n\n// @ts-ignore\nimport ENSRoot from \"@lumeweb/ensjs\";\nimport RpcProvider from \"./eip137/rpcProvider.js\";\n\nconst ENS = ENSRoot.default;\n\nexport default class Evmos extends Resolver {\n  protected getEns(provider: RpcProvider): any {\n    return new ENS({\n      provider,\n      ensAddress: \"0xae9Da235A2276CAa3f6484ad8F0EFbF4e0d45246\",\n    });\n  }\n\n  getSupportedTlds(): string[] {\n    return [\"evmos\"];\n  }\n\n  protected getChain(params: { [p: string]: any }): string {\n    return pocketNetworks[\"evmos-mainnet\"];\n  }\n}\n"],"mappings":"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","names":[]}