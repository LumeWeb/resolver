{"version":3,"sources":["../src/index.ts","../src/resolverRegistry.ts"],"sourcesContent":["export * from \"./resolverRegistry.js\";\n","import { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\nimport {\n  DNSResult,\n  ResolverModule,\n  ResolverOptions,\n  DNS_RECORD_TYPE,\n} from \"@lumeweb/libresolver\";\n\nexport class ResolverRegistry {\n  private _resolvers: Set<ResolverModule> = new Set();\n  private _rpcNetwork: RpcNetwork;\n\n  constructor(network: RpcNetwork = new RpcNetwork()) {\n    this._rpcNetwork = network;\n  }\n\n  get resolvers(): Set<ResolverModule> {\n    return this._resolvers;\n  }\n\n  get rpcNetwork(): RpcNetwork {\n    return this._rpcNetwork;\n  }\n\n  public async resolve(\n    domain: string,\n    options: ResolverOptions = { type: DNS_RECORD_TYPE.CONTENT },\n    bypassCache: boolean = false\n  ): Promise<DNSResult> {\n    for (const resolver of this._resolvers) {\n      const result = await resolver.resolve(domain, options, bypassCache);\n      if (!result.error && result.records.length) {\n        return result;\n      }\n    }\n\n    return { records: [] };\n  }\n\n  public register(resolver: ResolverModule): void {\n    this._resolvers.add(resolver);\n  }\n\n  public clear(): void {\n    this._resolvers.clear();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,4BAA2B;AAC3B,yBAKO;AAEA,IAAM,mBAAN,MAAuB;AAAA,EACpB,aAAkC,oBAAI,IAAI;AAAA,EAC1C;AAAA,EAER,YAAY,UAAsB,IAAI,iCAAW,GAAG;AAClD,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,IAAI,YAAiC;AACnC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,aAAyB;AAC3B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAa,QACX,QACA,UAA2B,EAAE,MAAM,mCAAgB,QAAQ,GAC3D,cAAuB,OACH;AACpB,eAAW,YAAY,KAAK,YAAY;AACtC,YAAM,SAAS,MAAM,SAAS,QAAQ,QAAQ,SAAS,WAAW;AAClE,UAAI,CAAC,OAAO,SAAS,OAAO,QAAQ,QAAQ;AAC1C,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO,EAAE,SAAS,CAAC,EAAE;AAAA,EACvB;AAAA,EAEO,SAAS,UAAgC;AAC9C,SAAK,WAAW,IAAI,QAAQ;AAAA,EAC9B;AAAA,EAEO,QAAc;AACnB,SAAK,WAAW,MAAM;AAAA,EACxB;AACF;","names":[]}