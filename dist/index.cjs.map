{"version":3,"sources":["../src/index.ts","../src/resolverRegistry.ts"],"sourcesContent":["export * from \"./resolverRegistry.js\";\n","import { RpcNetwork } from \"@lumeweb/dht-rpc-client\";\nimport {\n  DNSResult,\n  ResolverModule,\n  ResolverOptions,\n  DNS_RECORD_TYPE,\n} from \"@lumeweb/resolver-common\";\n\nexport default class ResolverRegistry {\n  private _resolvers: ResolverModule[] = [];\n  private _rpcNetwork: RpcNetwork;\n\n  constructor(network: RpcNetwork = new RpcNetwork()) {\n    this._rpcNetwork = network;\n  }\n\n  get resolvers(): ResolverModule[] {\n    return this._resolvers;\n  }\n\n  get rpcNetwork(): RpcNetwork {\n    return this._rpcNetwork;\n  }\n\n  public async resolve(\n    domain: string,\n    options: ResolverOptions = { type: DNS_RECORD_TYPE.DEFAULT },\n    bypassCache: boolean = false\n  ): Promise<DNSResult> {\n    for (const resolver of this._resolvers) {\n      const result = await resolver.resolve(domain, options, bypassCache);\n      if (!result.error && result.records.length) {\n        return result;\n      }\n    }\n\n    return { records: [] };\n  }\n\n  public register(resolver: ResolverModule): void {\n    this._resolvers.push(resolver);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;;;ACAA,4BAA2B;AAC3B,6BAKO;","names":[]}