{"version":3,"sources":["../src/index.ts","../src/DnsQuery.ts","../src/DnsNetwork.ts","../src/Resolver.ts","../src/lib/util.ts","../src/resolvers/handshake.ts","../src/SubResolverBase.ts","../src/resolvers/icann.ts","../src/resolvers/eip137.ts","../src/resolvers/eip137/GunProvider.ts"],"sourcesContent":["import Resolver from \"./Resolver.js\";\nexport * from \"./Resolver.js\";\nimport Handshake from \"./resolvers/handshake.js\";\nimport Icann from \"./resolvers/icann.js\";\nimport Eip137 from \"./resolvers/eip137.js\";\n\nconst resolver = new Resolver();\nresolver.registerResolver(new Icann(resolver));\nresolver.registerResolver(new Eip137(resolver));\nresolver.registerResolver(new Handshake(resolver));\n\nexport default resolver;\nexport * from \"./lib/util.js\";\n","import DnsNetwork from \"./DnsNetwork.js\";\nimport crypto from \"crypto\";\nimport { Portal } from \"./Resolver\";\nimport { clearTimeout, setTimeout, setInterval } from \"timers\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { IGunSubscription, subscribe } from \"gun-util\";\n\nexport type DnsResponse = {\n  updated: number;\n  requests: number;\n  data: object | string;\n};\n\nexport type DnsRequest = {\n  query: string;\n  chain: string;\n  data: object | any[] | string;\n  force?: boolean;\n};\n\nexport default class DnsQuery {\n  private _network: DnsNetwork;\n  private _query: DnsRequest;\n  private _requestId?: string;\n  private _responses: { [peer: string]: DnsResponse | null } = {};\n  private _handlers: { [peer: string]: IGunSubscription } = {};\n  private _cachedHandler: { [peer: string]: boolean } = {};\n  private _timeoutTimer?: any;\n  private _timeout: boolean = false;\n  private _promise?: Promise<any>;\n  private _promiseResolve?: (data: any) => void;\n  private _cachedResponses: { [peer: string]: DnsResponse | null } = {};\n  private _cacheChecked = false;\n  private _cachedTimers: { [peer: string]: NodeJS.Timer } = {};\n\n  constructor(network: DnsNetwork, query: DnsRequest) {\n    this._network = network;\n    this._query = query;\n    this.init();\n  }\n\n  get promise(): Promise<any> {\n    return this._promise as Promise<any>;\n  }\n\n  private async init() {\n    const hash = crypto\n      .createHash(\"sha256\")\n      .update(JSON.stringify(this._query.data))\n      .digest(\"hex\");\n\n    if (this._query.force) {\n      this._query.force = true;\n    }\n\n    this._requestId =\n      this._requestId ?? `${this._query.query};${this._query.chain};${hash}`;\n    this._promise =\n      this._promise ??\n      new Promise<any>((resolve) => {\n        this._promiseResolve = resolve;\n      });\n\n    if (this._query.force) {\n      this._cacheChecked = true;\n    }\n\n    this.addPeer = this.addPeer.bind(this);\n    this._network.on(\"newActivePeer\", this.addPeer);\n\n    await this._network.waitForPeers();\n    Object.keys(this._network.activePeers).forEach(this.addPeer);\n    this._timeoutTimer =\n      this._timeoutTimer ??\n      setTimeout(this.handeTimeout.bind(this), this._network.queryTimeout);\n  }\n\n  private _getResponseHandler(pubkey: string) {\n    return (value: DnsResponse) => {\n      this._responses[pubkey] = this.hasResponseExpired(value) ? null : value;\n\n      this.pruneDeadPeers();\n      this.checkResponses();\n    };\n  }\n\n  private pruneDeadPeers() {\n    for (const peer in this._responses) {\n      if (!(peer in this._network.activePeers)) {\n        delete this._responses[peer];\n      }\n    }\n  }\n\n  private checkResponses(cached: boolean = false): boolean {\n    const responses: { [response: string]: number } = {};\n\n    const responseStore = cached ? this._cachedResponses : this._responses;\n\n    if (\n      Object.keys(responseStore).length !==\n      Object.keys(this._network.activePeers).length\n    ) {\n      return false;\n    }\n\n    const responseStoreKeys = Object.keys(responseStore);\n\n    // tslint:disable-next-line:forin\n    for (const peer in responseStore) {\n      const responseIndex = responseStoreKeys.indexOf(peer);\n\n      responses[responseIndex] = responses[responseIndex] ?? 0;\n      responses[responseIndex]++;\n    }\n    for (const responseIndex in responses) {\n      if (responses[responseIndex] >= this._network.majorityThreshold) {\n        const response =\n          responseStore[responseStoreKeys[parseInt(responseIndex, 10)]];\n\n        if (null === response) {\n          if (!cached) {\n            this.retry();\n          }\n          return false;\n        }\n\n        let data;\n\n        try {\n          data = JSON.parse(response?.data as string);\n        } catch (e) {\n          data = response?.data;\n        }\n\n        this.resolve(data);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private handeTimeout() {\n    this.resolve(false, true);\n  }\n\n  private resolve(data: any, timeout: boolean = false): void {\n    this.cleanHandlers();\n\n    clearTimeout(this._timeoutTimer);\n    this._timeout = timeout;\n    // @ts-ignore\n    this._promiseResolve(data);\n  }\n\n  private cleanHandlers() {\n    Object.keys(this._handlers).forEach(\n      // @ts-ignore\n      // tslint:disable-next-line:ban-types\n      (pubkey: string) => {\n        this._handlers[pubkey].off();\n        delete this._handlers[pubkey];\n      }\n    );\n    Object.values(this._cachedTimers).forEach((timer) => clearInterval(timer));\n    this._cachedTimers = {};\n    this._network.off(\"newActivePeer\", this.addPeer as (pubkey: string) => any);\n    this._cachedHandler = {};\n  }\n\n  private getCachedRecordHandler(pubkey: string) {\n    return (response?: DnsResponse) => {\n      if (pubkey in this._cachedResponses) {\n        return;\n      }\n      if (response) {\n        if (!this.hasResponseExpired(response)) {\n          this._cachedResponses[pubkey] = response;\n        }\n      } else {\n        this._cachedResponses[pubkey] = null;\n      }\n\n      const success = this.checkResponses(true);\n\n      if (\n        Object.keys(this._cachedResponses).length ===\n          Object.keys(this._network.activePeers).length &&\n        !success &&\n        !this._timeout\n      ) {\n        this._cacheChecked = true;\n        this.fetch();\n      }\n    };\n  }\n\n  private fetch() {\n    Object.keys(this._network.activePeers).forEach(this.addPeer);\n\n    const query = this._query;\n    query.data = JSON.stringify(query.data);\n\n    this.sendRequest(query);\n  }\n\n  private hasResponseExpired(response: DnsResponse): boolean {\n    return Date.now() - response.updated > this._network.maxTtl * 1000;\n  }\n\n  private retry() {\n    this._cachedResponses = {};\n    this._responses = {};\n    this._cacheChecked = false;\n    this.cleanHandlers();\n\n    this.init();\n  }\n\n  private sendRequest(query: DnsRequest, id = uuidv4(), count = 0) {\n    if (this._timeout) {\n      return;\n    }\n\n    if (count > 3) {\n      id = uuidv4();\n      count = 0;\n    } else {\n      count++;\n    }\n\n    const timer = setTimeout(() => {\n      this.sendRequest(query, id, count);\n    }, 100);\n\n    this._network.network\n      .get(\"requests\")\n      .get(id)\n      .put(query, (ack: object) => {\n        clearTimeout(timer);\n        // @ts-ignore\n        if (ack.err) {\n          this.sendRequest(query, id, count);\n        }\n      });\n\n    this._network.network.get(\"requests\").get(id, (data: object) => {\n      clearTimeout(timer);\n      // @ts-ignore\n      if (!data.put) {\n        this.sendRequest(query, id, count);\n      }\n    });\n  }\n\n  private async addPeer(pubkey: string) {\n    await this._network.authed;\n\n    if (\n      !this._cacheChecked &&\n      !(pubkey in this._cachedHandler) &&\n      !this._query.force\n    ) {\n      this._cachedHandler[pubkey] = true;\n      this._cachedTimers[pubkey] = setInterval(() => {\n        if (pubkey in this._cachedResponses) {\n          clearInterval(this._cachedTimers[pubkey]);\n          delete this._cachedTimers[pubkey];\n          return;\n        }\n        this._network.network\n          .user(pubkey)\n          .get(\"responses\")\n          .get(this._requestId)\n          .once(this.getCachedRecordHandler(pubkey), { wait: 100 });\n      }, 100);\n      return;\n    }\n\n    if (!(pubkey in this._handlers)) {\n      const ref = this._network.network\n        .user(pubkey)\n        .get(\"responses\")\n        .get(this._requestId);\n      this._handlers[pubkey] = subscribe(ref, this._getResponseHandler(pubkey));\n    }\n  }\n}\n","import Resolver, { Portal } from \"./Resolver.js\";\nimport DnsQuery from \"./DnsQuery.js\";\n// @ts-ignore\nimport Gun from \"@lumeweb/gun\";\nimport { EventEmitter } from \"events\";\nimport { clearTimeout, setTimeout, setInterval } from \"timers\";\nexport default class DnsNetwork extends EventEmitter {\n  // @ts-ignore\n  private _network: Gun;\n  private _resolver: Resolver;\n  private _peers: string[] = [];\n  private _user: object = {};\n  private _peerTimeout = 5000;\n  private _queryTimeout = 30000;\n  private _majorityThreshold = 0.75;\n  private _maxTtl = 12 * 60 * 60;\n  private _activePeers: { [pubkey: string]: number } = {};\n  private _authed: Promise<any>;\n\n  constructor(resolver: Resolver) {\n    super();\n    this._resolver = resolver;\n    this._network = new Gun({\n      localStorage: false,\n      store: Gun.Rmem(),\n      axe: false,\n    });\n    this._authed = this.auth();\n  }\n\n  get authed() {\n    return this._authed;\n  }\n\n  get maxTtl(): number {\n    return this._maxTtl;\n  }\n\n  set maxTtl(value: number) {\n    this._maxTtl = value;\n  }\n\n  get queryTimeout(): number {\n    return this._queryTimeout;\n  }\n\n  set queryTimeout(value: number) {\n    this._queryTimeout = value;\n  }\n\n  get majorityThreshold(): number {\n    return this._majorityThreshold;\n  }\n\n  get network() {\n    return this._network;\n  }\n\n  get resolver(): Resolver {\n    return this._resolver;\n  }\n\n  get peers(): string[] {\n    return this._peers;\n  }\n\n  get user(): object {\n    return this._user;\n  }\n\n  get peerTimeout(): number {\n    return this._peerTimeout;\n  }\n\n  set peerTimeout(value: number) {\n    this._peerTimeout = value;\n  }\n\n  get activePeers(): { [pubkey: string]: number } {\n    return this._activePeers;\n  }\n\n  async auth() {\n    const keyPair = await Gun.SEA.pair();\n    await this.promiseRetry((resolve: () => void) => {\n      this._network.user().create(keyPair, resolve);\n    });\n    await this.promiseRetry((resolve: () => void) => {\n      this._network.user().auth(keyPair, resolve);\n    });\n\n    this._user = this._network.user();\n  }\n\n  public addTrustedPeer(peer: string) {\n    this._peers.push(peer);\n    this._peers = [...new Set(this._peers)];\n\n    this.network.opt({ peers: [`https://${peer}/dns`] });\n    this._trackPeerHealth(peer);\n  }\n\n  public query(\n    query: string,\n    chain: string,\n    data: object | any[] = {},\n    force: boolean = false\n  ): DnsQuery {\n    return new DnsQuery(this, { query, chain, data, force });\n  }\n\n  private _trackPeerHealth(peerDomain: string) {\n    const peer: Portal = this._resolver.getPortal(peerDomain) as Portal;\n    this._network\n      .user(peer.pubkey)\n      .get(\"ping\")\n      .on(this.getPeerPingHandler(peer.pubkey as string));\n  }\n\n  private getPeerPingHandler(pubkey: string): (value: number) => void {\n    return (value: number) => {\n      if (!(pubkey in this._activePeers)) {\n        this.emit(\"newActivePeer\", pubkey);\n      }\n      this._activePeers[pubkey] = value;\n      this.pruneDeadPeers();\n    };\n  }\n\n  private pruneDeadPeers(): void {\n    for (const peer in this._activePeers) {\n      if (Date.now() - this._activePeers[peer] > this._peerTimeout) {\n        delete this._activePeers[peer];\n      }\n    }\n  }\n\n  public async waitForPeers(count = 1): Promise<void> {\n    const hasPeers = () => Object.values(this._activePeers).length >= count;\n\n    if (hasPeers()) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve) => {\n      const timer = setInterval(() => {\n        if (hasPeers()) {\n          clearInterval(timer);\n          resolve();\n        }\n      }, 10);\n    });\n  }\n\n  // tslint:disable-next-line:ban-types\n  private promiseRetry(callback: Function) {\n    let timer: NodeJS.Timeout;\n\n    return new Promise<void>((resolve) => {\n      timer = setTimeout(() => {\n        resolve(this.promiseRetry(callback));\n      }, 100);\n\n      callback(() => {\n        // tslint:disable-next-line:no-unused-expression\n        timer && clearTimeout(timer);\n        resolve();\n      });\n    });\n  }\n}\n","import SubResolverBase from \"./SubResolverBase.js\";\nimport DnsNetwork from \"./DnsNetwork.js\";\n\nexport type PortalList = {\n  [domain: string]: Portal;\n};\n\nexport type Portal = {\n  pubkey?: string;\n  supports: string[];\n  host: string;\n};\n\nexport default class Resolver {\n  private _resolvers: SubResolverBase[] = [];\n  private _portals: PortalList = {};\n  private _dnsNetwork: any;\n\n  constructor() {\n    this._dnsNetwork = new DnsNetwork(this);\n  }\n\n  get dnsNetwork(): DnsNetwork {\n    return this._dnsNetwork;\n  }\n\n  public async resolve(\n    input: string,\n    params: { [key: string]: any },\n    force: boolean = false\n  ): Promise<string | boolean> {\n    for (const resolver of this._resolvers) {\n      const result = await resolver.resolve(input, params, force);\n      if (result) {\n        return result;\n      }\n    }\n\n    return false;\n  }\n\n  public registerResolver(resolver: SubResolverBase): void {\n    this._resolvers.push(resolver);\n  }\n\n  public registerPortal(\n    host: string,\n    supports: string[],\n    pubkey?: string\n  ): void {\n    this._portals[host] = { pubkey, supports, host };\n\n    if (supports.includes(\"dns\") && pubkey && pubkey.length > 0) {\n      this._dnsNetwork.addTrustedPeer(host);\n    }\n  }\n\n  public getPortal(hostname: string): Portal | boolean {\n    if (hostname in this._portals) {\n      return this._portals[hostname];\n    }\n    return false;\n  }\n\n  public getPortals(\n    supports: string[] | string = [],\n    mode: \"and\" | \"or\" = \"and\"\n  ): PortalList {\n    const portals: PortalList = {};\n\n    if (!Array.isArray(supports)) {\n      supports = [supports];\n    }\n\n    // tslint:disable-next-line:forin\n    for (const service of supports) {\n      // tslint:disable-next-line:forin\n      for (const portalDomain in this._portals) {\n        const portal = this._portals[portalDomain];\n        if (this._portals[portalDomain].supports.includes(service)) {\n          portals[portalDomain] = portal;\n        } else {\n          if (mode === \"and\") {\n            delete portals[portalDomain];\n          }\n        }\n      }\n    }\n\n    return portals;\n  }\n\n  public getRandomPortal(\n    supports: string[] | string = [],\n    mode: \"and\" | \"or\" = \"and\"\n  ): Portal | boolean {\n    const portals = this.getPortals(supports, mode);\n\n    const portalDomains = Object.keys(portals);\n\n    if (!portalDomains.length) {\n      return false;\n    }\n\n    const randPortalDomainIndex = Math.floor(\n      Math.random() * (1 + portalDomains.length - 1)\n    );\n\n    return portals[portalDomains[randPortalDomainIndex]];\n  }\n}\n","export function isIp(ip: string) {\n  return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n    ip\n  );\n}\n\nexport function isDomain(domain: string) {\n  return /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/.test(\n    domain\n  );\n}\n\nexport const startsWithSkylinkRegExp = /^(sia:\\/\\/)?([a-zA-Z0-9_-]{46})/;\nexport const registryEntryRegExp =\n  /^skyns:\\/\\/(?<publickey>[a-zA-Z0-9%]+)\\/(?<datakey>[a-zA-Z0-9%]+)$/;\n\nexport function normalizeDomain(domain: string): string {\n  return domain.replace(/^\\.+|\\.+$/g, \"\").replace(/^\\/+|\\/+$/g, \"\");\n}\n","import {\n  isDomain,\n  isIp,\n  normalizeDomain,\n  registryEntryRegExp,\n  startsWithSkylinkRegExp,\n} from \"../lib/util.js\";\n\n// @ts-ignore\nimport { SkynetClient } from \"@lumeweb/skynet-js\";\nimport SubResolverBase from \"../SubResolverBase.js\";\n// @ts-ignore\nimport tldEnum from \"@lumeweb/tld-enum\";\nimport DnsQuery from \"../DnsQuery.js\";\n\nexport default class Handshake extends SubResolverBase {\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    let tld = input;\n\n    if (isIp(input)) {\n      return false;\n    }\n\n    if (input.endsWith(\".eth\")) {\n      return false;\n    }\n\n    if (\"subquery\" in params) {\n      return false;\n    }\n\n    if (input.includes(\".\")) {\n      tld = input.split(\".\")[input.split(\".\").length - 1];\n    }\n\n    const records = await this.query(tld, force);\n    if (!records) {\n      return false;\n    }\n    let result: string | boolean = false;\n\n    for (const record of (records as { [key: string]: any }[]).reverse()) {\n      switch (record.type) {\n        case \"NS\": {\n          result = await this.processNs(input, record, records, force);\n          break;\n        }\n        case \"TXT\": {\n          result = await this.processTxt(record);\n          break;\n        }\n        case \"SYNTH6\": {\n          if (\"ipv6\" in params && params.ipv6) {\n            result = record.address;\n          }\n          break;\n        }\n        case \"SYNTH4\": {\n          result = record.address;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  // @ts-ignore\n  private async processNs(domain, record, records, force) {\n    // @ts-ignore\n    const glue = records.slice().find(\n      (item: object) =>\n        // @ts-ignore\n        [\"GLUE4\", \"GLUE6\"].includes(item.type) && item.ns === record.ns\n    );\n\n    if (glue) {\n      return this.resolver.resolve(\n        domain,\n        {\n          subquery: true,\n          nameserver: glue.address,\n        },\n        force\n      );\n    }\n\n    const foundDomain = normalizeDomain(record.ns);\n    let isIcann = false;\n    if (isDomain(foundDomain) || /[a-zA-Z0-9\\-]+/.test(foundDomain)) {\n      if (foundDomain.includes(\".\")) {\n        const tld = foundDomain.split(\".\")[foundDomain.split(\".\").length - 1];\n\n        isIcann = tldEnum.list.includes(tld);\n      }\n\n      if (!isIcann) {\n        const hnsNs = await this.resolver.resolve(foundDomain, { force });\n\n        if (hnsNs) {\n          return this.resolver.resolve(domain, {\n            subquery: true,\n            nameserver: hnsNs,\n            force,\n          });\n        }\n      }\n\n      return this.resolver.resolve(\n        domain,\n        {\n          subquery: true,\n          nameserver: foundDomain,\n        },\n        force\n      );\n    }\n\n    const result = await this.resolver.resolve(record.ns, { domain }, force);\n\n    return result || record.ns;\n  }\n\n  private async query(\n    tld: string,\n    force: boolean = false\n  ): Promise<object | boolean> {\n    const query: DnsQuery = this.resolver.dnsNetwork.query(\n      \"getnameresource\",\n      \"hns\",\n      [tld]\n    );\n    const resp = await query.promise;\n\n    // @ts-ignore\n    return resp?.records || [];\n  }\n\n  private async processTxt(record: object): Promise<string | boolean> {\n    // @ts-ignore\n    let matches = record.txt.slice().pop().match(startsWithSkylinkRegExp);\n    // @ts-ignore\n    if (matches) {\n      return decodeURIComponent(matches[2]);\n    }\n\n    // @ts-ignore\n    matches = record.txt.slice().pop().match(registryEntryRegExp);\n\n    // @ts-ignore\n    if (matches) {\n      const portal = this.resolver.getRandomPortal(\"registry\");\n      if (!portal) {\n        return false;\n      }\n\n      const client = new SkynetClient(`https://${portal}`);\n\n      const pubKey = decodeURIComponent(matches.groups.publickey).replace(\n        \"ed25519:\",\n        \"\"\n      );\n\n      const entry = await client.registry.getEntry(\n        pubKey,\n        matches.groups.datakey,\n        // @ts-ignore\n        { hashedDataKeyHex: true }\n      );\n\n      return Buffer.from(entry.entry?.data as Uint8Array).toString();\n    }\n\n    return false;\n  }\n}\n","import ISubResolver from \"./ISubResolver.js\";\nimport Resolver from \"./Resolver.js\";\n\n// @ts-ignore\nexport default abstract class SubResolverBase implements ISubResolver {\n  protected resolver: Resolver;\n\n  constructor(resolver: Resolver) {\n    this.resolver = resolver;\n  }\n\n  abstract resolve(\n    input: string,\n    params: { [key: string]: any },\n    force: boolean\n  ): Promise<string | boolean>;\n}\n","import { isDomain } from \"../lib/util.js\";\n\n// @ts-ignore\nimport { NodeClient } from \"@lumeweb/hs-client\";\nimport SubResolverBase from \"../SubResolverBase.js\";\n\nexport default class Icann extends SubResolverBase {\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force = false\n  ): Promise<string | boolean> {\n    if (!params || !(\"subquery\" in params) || !params.subquery) {\n      return false;\n    }\n\n    if (!isDomain(input) && !(\"nameserver\" in params || !params.nameserver)) {\n      return false;\n    }\n\n    const data = {\n      domain: input,\n      nameserver: params.nameserver ?? undefined,\n    };\n\n    const query = this.resolver.dnsNetwork.query(\n      \"dnslookup\",\n      \"icann\",\n      data,\n      force\n    );\n\n    return query.promise;\n  }\n}\n","// @ts-ignore\nimport ENSRoot, { getEnsAddress } from \"@lumeweb/ensjs\";\nimport { ethers } from \"ethers\";\nimport SubResolverBase from \"../SubResolverBase.js\";\nimport GunProvider from \"./eip137/GunProvider.js\";\n\nconst ENS = ENSRoot.default;\n\nexport default class Eip137 extends SubResolverBase {\n  async resolve(\n    input: string,\n    params: { [key: string]: any } = {},\n    force: boolean = false\n  ): Promise<string | boolean> {\n    if (input.endsWith(\".eth\")) {\n      return this.resolveEns(input, force);\n    }\n\n    const hip5Data = input.split(\".\");\n    // @ts-ignore\n    if (2 <= hip5Data.length && \"domain\" in params) {\n      if (ethers.utils.isAddress(hip5Data[0])) {\n        // @ts-ignore\n        return this.resolveHip5(params.domain, hip5Data, force);\n      }\n    }\n\n    return false;\n  }\n\n  private async resolveEns(\n    input: string,\n    force: boolean = false\n  ): Promise<string | boolean> {\n    const data = [getEnsAddress(\"1\"), \"eth-mainnet\"];\n\n    return this.resolveHip5(input, data, force);\n  }\n\n  private async resolveHip5(\n    domain: string,\n    data: string[],\n    force: boolean = false\n  ): Promise<string | boolean> {\n    const chain = data[1].replace(\"_\", \"\");\n\n    const connection: GunProvider = new GunProvider(\n      chain,\n      this.resolver.dnsNetwork,\n      force\n    );\n\n    // @ts-ignore\n    const ens = new ENS({ provider: connection, ensAddress: data[0] });\n\n    try {\n      const name = await ens.name(domain);\n      const contentResult = await name.getContent();\n      const url = await name.getText(\"url\");\n      let content;\n\n      if (typeof contentResult === \"string\" && 0 === Number(contentResult)) {\n        content = false;\n      }\n\n      if (\n        typeof contentResult === \"object\" &&\n        \"contenthash\" === contentResult.contentType\n      ) {\n        content = contentResult.value;\n      }\n\n      return content || url || false;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n","import * as ethers from \"ethers\";\nimport * as ethersNetwork from \"@ethersproject/networks\";\nimport * as ethersTransactions from \"@ethersproject/transactions\";\nimport * as ethersProperties from \"@ethersproject/properties\";\nimport * as ethersBytes from \"@ethersproject/bytes\";\nimport * as ethersLogger from \"@ethersproject/logger\";\nimport * as ethersAbstractProvider from \"@ethersproject/abstract-provider\";\nimport * as ethersAbstractSigner from \"@ethersproject/abstract-signer\";\nimport * as ethersStrings from \"@ethersproject/strings\";\nimport DnsNetwork from \"../../DnsNetwork.js\";\nimport { poll } from \"@ethersproject/web\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\n\nconst { defineReadOnly, resolveProperties, shallowCopy } = ethersProperties;\nconst { Logger } = ethersLogger;\nconst { toUtf8Bytes } = ethersStrings;\nconst { hexlify } = ethersBytes;\n\nfunction getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n\nconst allowedTransactionKeys: { [key: string]: boolean } = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n};\n\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction checkError(method: string, error: any, params: any): any {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (\n    method === \"call\" &&\n    error.code === ethersLogger.Logger.errors.SERVER_ERROR\n  ) {\n    const e = error.error;\n    if (e && e.message.match(\"reverted\") && ethersBytes.isHexString(e.data)) {\n      return e.data;\n    }\n\n    ethers.ethers.logger.throwError(\n      \"missing revert data in call exception\",\n      ethersLogger.Logger.errors.CALL_EXCEPTION,\n      {\n        error,\n        data: \"0x\",\n      }\n    );\n  }\n\n  let message = error.message;\n  if (\n    error.code === ethersLogger.Logger.errors.SERVER_ERROR &&\n    error.error &&\n    typeof error.error.message === \"string\"\n  ) {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n\n  const transaction = params.transaction || params.signedTransaction;\n\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    ethers.ethers.logger.throwError(\n      \"insufficient funds for intrinsic transaction cost\",\n      ethersLogger.Logger.errors.INSUFFICIENT_FUNDS,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"nonce too low\"\n  if (message.match(/nonce too low/)) {\n    ethers.logger.throwError(\n      \"nonce has already been used\",\n      ethersLogger.Logger.errors.NONCE_EXPIRED,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced/)) {\n    ethers.logger.throwError(\n      \"replacement fee too low\",\n      ethersLogger.Logger.errors.REPLACEMENT_UNDERPRICED,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/)) {\n    ethers.logger.throwError(\n      \"legacy pre-eip-155 transactions not supported\",\n      ethersLogger.Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  if (\n    errorGas.indexOf(method) >= 0 &&\n    message.match(\n      /gas required exceeds allowance|always failing transaction|execution reverted/\n    )\n  ) {\n    ethers.logger.throwError(\n      \"cannot estimate gas; transaction may fail or may require manual gas limit\",\n      ethersLogger.Logger.errors.UNPREDICTABLE_GAS_LIMIT,\n      {\n        error,\n        method,\n        transaction,\n      }\n    );\n  }\n\n  throw error;\n}\n\nexport default class GunProvider extends ethers.providers.BaseProvider {\n  private _dnsChain: string;\n  private _dnsNetwork: DnsNetwork;\n  private _force: boolean;\n\n  constructor(\n    dnsChain: string,\n    dnsNetwork: DnsNetwork,\n    force: boolean = false\n  ) {\n    const networkOrReady:\n      | ethersNetwork.Networkish\n      | Promise<ethersNetwork.Network> = { name: \"dummy\", chainId: 0 };\n    super(networkOrReady);\n    this._dnsChain = dnsChain;\n    this._dnsNetwork = dnsNetwork;\n    this._force = force;\n  }\n\n  async detectNetwork(): Promise<ethersNetwork.Network> {\n    return { name: \"dummy\", chainId: 0 };\n  }\n\n  async send(method: string, params: any[]): Promise<any> {\n    const query = this._dnsNetwork.query(\n      method,\n      this._dnsChain,\n      params,\n      this._force\n    );\n    return query.promise;\n  }\n\n  prepareRequest(method: string, params: any): [string, any[]] | null {\n    switch (method) {\n      case \"call\": {\n        const hexlifyTransaction = ethers.utils.getStatic<\n          (\n            t: ethers.providers.TransactionRequest,\n            a?: { [key: string]: boolean }\n          ) => { [key: string]: string }\n        >(this.constructor, \"hexlifyTransaction\");\n        return [\n          \"eth_call\",\n          [\n            hexlifyTransaction(params.transaction, { from: true }),\n            params.blockTag,\n          ],\n        ];\n      }\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  async perform(method: string, params: any): Promise<any> {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (method === \"call\") {\n      const tx = params.transaction;\n      if (tx && tx.type != null && ethers.BigNumber.from(tx.type).isZero()) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          // Network doesn't know about EIP-1559 (and hence type)\n          params = ethersProperties.shallowCopy(params);\n          params.transaction = ethersProperties.shallowCopy(tx);\n          delete params.transaction.type;\n        }\n      }\n    }\n\n    const args = this.prepareRequest(method, params);\n\n    try {\n      // @ts-ignore\n      return await this.send(args[0], args[1]);\n    } catch (error) {\n      return checkError(method, error, params);\n    }\n  }\n\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(\n    transaction: ethers.providers.TransactionRequest,\n    allowExtra?: { [key: string]: boolean }\n  ): { [key: string]: string | ethersTransactions.AccessList } {\n    // Check only allowed properties are given\n    const allowed = ethersProperties.shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    const result: { [key: string]: string | ethersTransactions.AccessList } =\n      {};\n\n    // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n    [\n      \"gasLimit\",\n      \"gasPrice\",\n      \"type\",\n      \"maxFeePerGas\",\n      \"maxPriorityFeePerGas\",\n      \"nonce\",\n      \"value\",\n    ].forEach((key) => {\n      if ((transaction as any)[key] == null) {\n        return;\n      }\n      const value = ethersBytes.hexValue((transaction as any)[key]);\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n\n    [\"from\", \"to\", \"data\"].forEach((key) => {\n      if ((transaction as any)[key] == null) {\n        return;\n      }\n      result[key] = ethersBytes.hexlify((transaction as any)[key]);\n    });\n\n    if ((transaction as any).accessList) {\n      result.accessList = ethersTransactions.accessListify(\n        (transaction as any).accessList\n      );\n    }\n\n    return result;\n  }\n\n  // @ts-ignore\n  getSigner(addressOrIndex?: string | number): GunSigner {\n    // @ts-ignore\n    return new GunSigner({}, this, addressOrIndex);\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass GunSigner extends ethersAbstractSigner.Signer {\n  // @ts-ignore\n  readonly provider: GunProvider;\n  // @ts-ignore\n  private _index: number;\n  // @ts-ignore\n  private _address: string;\n  // @ts-ignore\n  constructor(provider: GunProvider, addressOrIndex?: string | number) {\n    super();\n    // @ts-ignore\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(\n        this,\n        // @ts-ignore\n        \"_address\",\n        // @ts-ignore\n        this.provider.formatter.address(addressOrIndex)\n      );\n      // @ts-ignore\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      // @ts-ignore\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      // @ts-ignore\n      defineReadOnly(this, \"_address\", null);\n    }\n  }\n\n  connect(provider: GunProvider): GunSigner {\n    return ethers.logger.throwError(\n      \"cannot alter JSON-RPC Signer connection\",\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"connect\",\n      }\n    );\n  }\n  getAddress(): Promise<string> {\n    // @ts-ignore\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n      if (accounts.length <= this._index) {\n        ethers.logger.throwError(\n          \"unknown account #\" + this._index,\n          Logger.errors.UNSUPPORTED_OPERATION,\n          {\n            operation: \"getAddress\",\n          }\n        );\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<string> {\n    transaction = shallowCopy(transaction);\n\n    const fromAddress = this.getAddress().then((address) => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      // @ts-ignore\n      transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n        if (to == null) {\n          return null;\n        }\n        const address = await this.provider.resolveName(to);\n        if (address == null) {\n          ethers.logger.throwArgumentError(\n            \"provided ENS name resolves to null\",\n            \"tx.to\",\n            to\n          );\n        }\n        return address;\n      });\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress,\n    }).then(({ tx, sender }) => {\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          ethers.logger.throwArgumentError(\n            \"from address mismatch\",\n            \"transaction\",\n            transaction\n          );\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = (this.provider.constructor as any).hexlifyTransaction(tx, {\n        from: true,\n      });\n\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(\n        (hash) => {\n          return hash;\n        },\n        (error) => {\n          return checkError(\"sendTransaction\", error, hexTx);\n        }\n      );\n    });\n  }\n\n  signTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<string> {\n    return ethers.logger.throwError(\n      \"signing transactions is unsupported\",\n      Logger.errors.UNSUPPORTED_OPERATION,\n      {\n        operation: \"signTransaction\",\n      }\n    );\n  }\n\n  async sendTransaction(\n    transaction: ethersProperties.Deferrable<ethersAbstractProvider.TransactionRequest>\n  ): Promise<ethersAbstractProvider.TransactionResponse> {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider._getInternalBlockNumber(\n      100 + 2 * this.provider.pollingInterval\n    );\n\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(transaction);\n\n    try {\n      // Unfortunately, JSON-RPC only provides and opaque transaction hash\n      // for a response, and we need the actual transaction, so we poll\n      // for it; it should show up very quickly\n      // @ts-ignore\n      return await poll(\n        async () => {\n          const tx = await this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        },\n        { oncePoll: this.provider }\n      );\n    } catch (error) {\n      (error as any).transactionHash = hash;\n      throw error;\n    }\n  }\n\n  async signMessage(message: ethers.Bytes | string): Promise<string> {\n    const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n    const address = await this.getAddress();\n\n    return this.provider.send(\"personal_sign\", [\n      hexlify(data),\n      address.toLowerCase(),\n    ]);\n  }\n\n  async _legacySignMessage(message: ethers.Bytes | string): Promise<string> {\n    const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n    const address = await this.getAddress();\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    return this.provider.send(\"eth_sign\", [\n      address.toLowerCase(),\n      hexlify(data),\n    ]);\n  }\n\n  async _signTypedData(\n    domain: ethersAbstractSigner.TypedDataDomain,\n    types: Record<string, ethersAbstractSigner.TypedDataField[]>,\n    value: Record<string, any>\n  ): Promise<string> {\n    // Populate any ENS names (in-place)\n    const populated = await _TypedDataEncoder.resolveNames(\n      domain,\n      types,\n      value,\n      // @ts-ignore\n      (name: string) => {\n        return this.provider.resolveName(name);\n      }\n    );\n\n    const address = await this.getAddress();\n\n    return this.provider.send(\"eth_signTypedData_v4\", [\n      address.toLowerCase(),\n      JSON.stringify(\n        _TypedDataEncoder.getPayload(populated.domain, types, populated.value)\n      ),\n    ]);\n  }\n\n  async unlock(password: string): Promise<boolean> {\n    const provider = this.provider;\n\n    const address = await this.getAddress();\n\n    return provider.send(\"personal_unlockAccount\", [\n      address.toLowerCase(),\n      password,\n      null,\n    ]);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,oBAAmB;AAEnB,oBAAsD;AACtD,kBAA6B;AAC7B,sBAA4C;AAe5C,qBAA8B;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAqD,CAAC;AAAA,EACtD,YAAkD,CAAC;AAAA,EACnD,iBAA8C,CAAC;AAAA,EAC/C;AAAA,EACA,WAAoB;AAAA,EACpB;AAAA,EACA;AAAA,EACA,mBAA2D,CAAC;AAAA,EAC5D,gBAAgB;AAAA,EAChB,gBAAkD,CAAC;AAAA,EAE3D,YAAY,SAAqB,OAAmB;AAClD,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,KAAK;AAAA,EACZ;AAAA,MAEI,UAAwB;AAC1B,WAAO,KAAK;AAAA,EACd;AAAA,QAEc,OAAO;AA7CvB;AA8CI,UAAM,OAAO,sBACV,WAAW,QAAQ,EACnB,OAAO,KAAK,UAAU,KAAK,OAAO,IAAI,CAAC,EACvC,OAAO,KAAK;AAEf,QAAI,KAAK,OAAO,OAAO;AACrB,WAAK,OAAO,QAAQ;AAAA,IACtB;AAEA,SAAK,aACH,WAAK,eAAL,YAAmB,GAAG,KAAK,OAAO,SAAS,KAAK,OAAO,SAAS;AAClE,SAAK,WACH,WAAK,aAAL,YACA,IAAI,QAAa,CAAC,YAAY;AAC5B,WAAK,kBAAkB;AAAA,IACzB,CAAC;AAEH,QAAI,KAAK,OAAO,OAAO;AACrB,WAAK,gBAAgB;AAAA,IACvB;AAEA,SAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;AACrC,SAAK,SAAS,GAAG,iBAAiB,KAAK,OAAO;AAE9C,UAAM,KAAK,SAAS,aAAa;AACjC,WAAO,KAAK,KAAK,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAC3D,SAAK,gBACH,WAAK,kBAAL,YACA,8BAAW,KAAK,aAAa,KAAK,IAAI,GAAG,KAAK,SAAS,YAAY;AAAA,EACvE;AAAA,EAEQ,oBAAoB,QAAgB;AAC1C,WAAO,CAAC,UAAuB;AAC7B,WAAK,WAAW,UAAU,KAAK,mBAAmB,KAAK,IAAI,OAAO;AAElE,WAAK,eAAe;AACpB,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA,EAEQ,iBAAiB;AACvB,eAAW,QAAQ,KAAK,YAAY;AAClC,UAAI,CAAE,SAAQ,KAAK,SAAS,cAAc;AACxC,eAAO,KAAK,WAAW;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,eAAe,SAAkB,OAAgB;AA9F3D;AA+FI,UAAM,YAA4C,CAAC;AAEnD,UAAM,gBAAgB,SAAS,KAAK,mBAAmB,KAAK;AAE5D,QACE,OAAO,KAAK,aAAa,EAAE,WAC3B,OAAO,KAAK,KAAK,SAAS,WAAW,EAAE,QACvC;AACA,aAAO;AAAA,IACT;AAEA,UAAM,oBAAoB,OAAO,KAAK,aAAa;AAGnD,eAAW,QAAQ,eAAe;AAChC,YAAM,gBAAgB,kBAAkB,QAAQ,IAAI;AAEpD,gBAAU,iBAAiB,gBAAU,mBAAV,YAA4B;AACvD,gBAAU;AAAA,IACZ;AACA,eAAW,iBAAiB,WAAW;AACrC,UAAI,UAAU,kBAAkB,KAAK,SAAS,mBAAmB;AAC/D,cAAM,WACJ,cAAc,kBAAkB,SAAS,eAAe,EAAE;AAE5D,YAAI,AAAS,aAAT,MAAmB;AACrB,cAAI,CAAC,QAAQ;AACX,iBAAK,MAAM;AAAA,UACb;AACA,iBAAO;AAAA,QACT;AAEA,YAAI;AAEJ,YAAI;AACF,iBAAO,KAAK,MAAM,qCAAU,IAAc;AAAA,QAC5C,SAAS,GAAP;AACA,iBAAO,qCAAU;AAAA,QACnB;AAEA,aAAK,QAAQ,IAAI;AACjB,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEQ,eAAe;AACrB,SAAK,QAAQ,OAAO,IAAI;AAAA,EAC1B;AAAA,EAEQ,QAAQ,MAAW,UAAmB,OAAa;AACzD,SAAK,cAAc;AAEnB,oCAAa,KAAK,aAAa;AAC/B,SAAK,WAAW;AAEhB,SAAK,gBAAgB,IAAI;AAAA,EAC3B;AAAA,EAEQ,gBAAgB;AACtB,WAAO,KAAK,KAAK,SAAS,EAAE,QAG1B,CAAC,WAAmB;AAClB,WAAK,UAAU,QAAQ,IAAI;AAC3B,aAAO,KAAK,UAAU;AAAA,IACxB,CACF;AACA,WAAO,OAAO,KAAK,aAAa,EAAE,QAAQ,CAAC,UAAU,cAAc,KAAK,CAAC;AACzE,SAAK,gBAAgB,CAAC;AACtB,SAAK,SAAS,IAAI,iBAAiB,KAAK,OAAkC;AAC1E,SAAK,iBAAiB,CAAC;AAAA,EACzB;AAAA,EAEQ,uBAAuB,QAAgB;AAC7C,WAAO,CAAC,aAA2B;AACjC,UAAI,UAAU,KAAK,kBAAkB;AACnC;AAAA,MACF;AACA,UAAI,UAAU;AACZ,YAAI,CAAC,KAAK,mBAAmB,QAAQ,GAAG;AACtC,eAAK,iBAAiB,UAAU;AAAA,QAClC;AAAA,MACF,OAAO;AACL,aAAK,iBAAiB,UAAU;AAAA,MAClC;AAEA,YAAM,UAAU,KAAK,eAAe,IAAI;AAExC,UACE,OAAO,KAAK,KAAK,gBAAgB,EAAE,WACjC,OAAO,KAAK,KAAK,SAAS,WAAW,EAAE,UACzC,CAAC,WACD,CAAC,KAAK,UACN;AACA,aAAK,gBAAgB;AACrB,aAAK,MAAM;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,QAAQ;AACd,WAAO,KAAK,KAAK,SAAS,WAAW,EAAE,QAAQ,KAAK,OAAO;AAE3D,UAAM,QAAQ,KAAK;AACnB,UAAM,OAAO,KAAK,UAAU,MAAM,IAAI;AAEtC,SAAK,YAAY,KAAK;AAAA,EACxB;AAAA,EAEQ,mBAAmB,UAAgC;AACzD,WAAO,KAAK,IAAI,IAAI,SAAS,UAAU,KAAK,SAAS,SAAS;AAAA,EAChE;AAAA,EAEQ,QAAQ;AACd,SAAK,mBAAmB,CAAC;AACzB,SAAK,aAAa,CAAC;AACnB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AAEnB,SAAK,KAAK;AAAA,EACZ;AAAA,EAEQ,YAAY,OAAmB,KAAK,oBAAO,GAAG,QAAQ,GAAG;AAC/D,QAAI,KAAK,UAAU;AACjB;AAAA,IACF;AAEA,QAAI,QAAQ,GAAG;AACb,WAAK,oBAAO;AACZ,cAAQ;AAAA,IACV,OAAO;AACL;AAAA,IACF;AAEA,UAAM,QAAQ,8BAAW,MAAM;AAC7B,WAAK,YAAY,OAAO,IAAI,KAAK;AAAA,IACnC,GAAG,GAAG;AAEN,SAAK,SAAS,QACX,IAAI,UAAU,EACd,IAAI,EAAE,EACN,IAAI,OAAO,CAAC,QAAgB;AAC3B,sCAAa,KAAK;AAElB,UAAI,IAAI,KAAK;AACX,aAAK,YAAY,OAAO,IAAI,KAAK;AAAA,MACnC;AAAA,IACF,CAAC;AAEH,SAAK,SAAS,QAAQ,IAAI,UAAU,EAAE,IAAI,IAAI,CAAC,SAAiB;AAC9D,sCAAa,KAAK;AAElB,UAAI,CAAC,KAAK,KAAK;AACb,aAAK,YAAY,OAAO,IAAI,KAAK;AAAA,MACnC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,QAEc,QAAQ,QAAgB;AACpC,UAAM,KAAK,SAAS;AAEpB,QACE,CAAC,KAAK,iBACN,CAAE,WAAU,KAAK,mBACjB,CAAC,KAAK,OAAO,OACb;AACA,WAAK,eAAe,UAAU;AAC9B,WAAK,cAAc,UAAU,+BAAY,MAAM;AAC7C,YAAI,UAAU,KAAK,kBAAkB;AACnC,wBAAc,KAAK,cAAc,OAAO;AACxC,iBAAO,KAAK,cAAc;AAC1B;AAAA,QACF;AACA,aAAK,SAAS,QACX,KAAK,MAAM,EACX,IAAI,WAAW,EACf,IAAI,KAAK,UAAU,EACnB,KAAK,KAAK,uBAAuB,MAAM,GAAG,EAAE,MAAM,IAAI,CAAC;AAAA,MAC5D,GAAG,GAAG;AACN;AAAA,IACF;AAEA,QAAI,CAAE,WAAU,KAAK,YAAY;AAC/B,YAAM,MAAM,KAAK,SAAS,QACvB,KAAK,MAAM,EACX,IAAI,WAAW,EACf,IAAI,KAAK,UAAU;AACtB,WAAK,UAAU,UAAU,+BAAU,KAAK,KAAK,oBAAoB,MAAM,CAAC;AAAA,IAC1E;AAAA,EACF;AACF;;;AC7RA,iBAAgB;AAChB,oBAA6B;AAC7B,qBAAsD;AACtD,+BAAwC,2BAAa;AAAA,EAE3C;AAAA,EACA;AAAA,EACA,SAAmB,CAAC;AAAA,EACpB,QAAgB,CAAC;AAAA,EACjB,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,UAAU,KAAK,KAAK;AAAA,EACpB,eAA6C,CAAC;AAAA,EAC9C;AAAA,EAER,YAAY,WAAoB;AAC9B,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,WAAW,IAAI,mBAAI;AAAA,MACtB,cAAc;AAAA,MACd,OAAO,mBAAI,KAAK;AAAA,MAChB,KAAK;AAAA,IACP,CAAC;AACD,SAAK,UAAU,KAAK,KAAK;AAAA,EAC3B;AAAA,MAEI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,SAAiB;AACnB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,OAAO,OAAe;AACxB,SAAK,UAAU;AAAA,EACjB;AAAA,MAEI,eAAuB;AACzB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,aAAa,OAAe;AAC9B,SAAK,gBAAgB;AAAA,EACvB;AAAA,MAEI,oBAA4B;AAC9B,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,WAAqB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,QAAkB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,OAAe;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,cAAsB;AACxB,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,YAAY,OAAe;AAC7B,SAAK,eAAe;AAAA,EACtB;AAAA,MAEI,cAA4C;AAC9C,WAAO,KAAK;AAAA,EACd;AAAA,QAEM,OAAO;AACX,UAAM,UAAU,MAAM,mBAAI,IAAI,KAAK;AACnC,UAAM,KAAK,aAAa,CAAC,YAAwB;AAC/C,WAAK,SAAS,KAAK,EAAE,OAAO,SAAS,OAAO;AAAA,IAC9C,CAAC;AACD,UAAM,KAAK,aAAa,CAAC,YAAwB;AAC/C,WAAK,SAAS,KAAK,EAAE,KAAK,SAAS,OAAO;AAAA,IAC5C,CAAC;AAED,SAAK,QAAQ,KAAK,SAAS,KAAK;AAAA,EAClC;AAAA,EAEO,eAAe,MAAc;AAClC,SAAK,OAAO,KAAK,IAAI;AACrB,SAAK,SAAS,CAAC,GAAG,IAAI,IAAI,KAAK,MAAM,CAAC;AAEtC,SAAK,QAAQ,IAAI,EAAE,OAAO,CAAC,WAAW,UAAU,EAAE,CAAC;AACnD,SAAK,iBAAiB,IAAI;AAAA,EAC5B;AAAA,EAEO,MACL,OACA,OACA,OAAuB,CAAC,GACxB,QAAiB,OACP;AACV,WAAO,IAAI,SAAS,MAAM,EAAE,OAAO,OAAO,MAAM,MAAM,CAAC;AAAA,EACzD;AAAA,EAEQ,iBAAiB,YAAoB;AAC3C,UAAM,OAAe,KAAK,UAAU,UAAU,UAAU;AACxD,SAAK,SACF,KAAK,KAAK,MAAM,EAChB,IAAI,MAAM,EACV,GAAG,KAAK,mBAAmB,KAAK,MAAgB,CAAC;AAAA,EACtD;AAAA,EAEQ,mBAAmB,QAAyC;AAClE,WAAO,CAAC,UAAkB;AACxB,UAAI,CAAE,WAAU,KAAK,eAAe;AAClC,aAAK,KAAK,iBAAiB,MAAM;AAAA,MACnC;AACA,WAAK,aAAa,UAAU;AAC5B,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA,EAEQ,iBAAuB;AAC7B,eAAW,QAAQ,KAAK,cAAc;AACpC,UAAI,KAAK,IAAI,IAAI,KAAK,aAAa,QAAQ,KAAK,cAAc;AAC5D,eAAO,KAAK,aAAa;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAAA,QAEa,aAAa,QAAQ,GAAkB;AAClD,UAAM,WAAW,MAAM,OAAO,OAAO,KAAK,YAAY,EAAE,UAAU;AAElE,QAAI,SAAS,GAAG;AACd,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAEA,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,YAAM,QAAQ,gCAAY,MAAM;AAC9B,YAAI,SAAS,GAAG;AACd,wBAAc,KAAK;AACnB,kBAAQ;AAAA,QACV;AAAA,MACF,GAAG,EAAE;AAAA,IACP,CAAC;AAAA,EACH;AAAA,EAGQ,aAAa,UAAoB;AACvC,QAAI;AAEJ,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,cAAQ,+BAAW,MAAM;AACvB,gBAAQ,KAAK,aAAa,QAAQ,CAAC;AAAA,MACrC,GAAG,GAAG;AAEN,eAAS,MAAM;AAEb,iBAAS,iCAAa,KAAK;AAC3B,gBAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;;;AC7JA,qBAA8B;AAAA,EACpB,aAAgC,CAAC;AAAA,EACjC,WAAuB,CAAC;AAAA,EACxB;AAAA,EAER,cAAc;AACZ,SAAK,cAAc,IAAI,WAAW,IAAI;AAAA,EACxC;AAAA,MAEI,aAAyB;AAC3B,WAAO,KAAK;AAAA,EACd;AAAA,QAEa,QACX,OACA,QACA,QAAiB,OACU;AAC3B,eAAW,aAAY,KAAK,YAAY;AACtC,YAAM,SAAS,MAAM,UAAS,QAAQ,OAAO,QAAQ,KAAK;AAC1D,UAAI,QAAQ;AACV,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEO,iBAAiB,WAAiC;AACvD,SAAK,WAAW,KAAK,SAAQ;AAAA,EAC/B;AAAA,EAEO,eACL,MACA,UACA,QACM;AACN,SAAK,SAAS,QAAQ,EAAE,QAAQ,UAAU,KAAK;AAE/C,QAAI,SAAS,SAAS,KAAK,KAAK,UAAU,OAAO,SAAS,GAAG;AAC3D,WAAK,YAAY,eAAe,IAAI;AAAA,IACtC;AAAA,EACF;AAAA,EAEO,UAAU,UAAoC;AACnD,QAAI,YAAY,KAAK,UAAU;AAC7B,aAAO,KAAK,SAAS;AAAA,IACvB;AACA,WAAO;AAAA,EACT;AAAA,EAEO,WACL,WAA8B,CAAC,GAC/B,OAAqB,OACT;AACZ,UAAM,UAAsB,CAAC;AAE7B,QAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC5B,iBAAW,CAAC,QAAQ;AAAA,IACtB;AAGA,eAAW,WAAW,UAAU;AAE9B,iBAAW,gBAAgB,KAAK,UAAU;AACxC,cAAM,SAAS,KAAK,SAAS;AAC7B,YAAI,KAAK,SAAS,cAAc,SAAS,SAAS,OAAO,GAAG;AAC1D,kBAAQ,gBAAgB;AAAA,QAC1B,OAAO;AACL,cAAI,SAAS,OAAO;AAClB,mBAAO,QAAQ;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEO,gBACL,WAA8B,CAAC,GAC/B,OAAqB,OACH;AAClB,UAAM,UAAU,KAAK,WAAW,UAAU,IAAI;AAE9C,UAAM,gBAAgB,OAAO,KAAK,OAAO;AAEzC,QAAI,CAAC,cAAc,QAAQ;AACzB,aAAO;AAAA,IACT;AAEA,UAAM,wBAAwB,KAAK,MACjC,KAAK,OAAO,IAAK,KAAI,cAAc,SAAS,EAC9C;AAEA,WAAO,QAAQ,cAAc;AAAA,EAC/B;AACF;;;AC9GO,cAAc,IAAY;AAC/B,SAAO,8FAA8F,KACnG,EACF;AACF;AAEO,kBAAkB,QAAgB;AACvC,SAAO,6EAA6E,KAClF,MACF;AACF;AAEO,IAAM,0BAA0B;AAChC,IAAM,sBACX;AAEK,yBAAyB,QAAwB;AACtD,SAAO,OAAO,QAAQ,cAAc,EAAE,EAAE,QAAQ,cAAc,EAAE;AAClE;;;ACTA,uBAA6B;;;ACL7B,4BAAsE;AAAA,EAC1D;AAAA,EAEV,YAAY,WAAoB;AAC9B,SAAK,WAAW;AAAA,EAClB;AAOF;;;ADJA,sBAAoB;AAGpB,8BAAuC,gBAAgB;AAAA,QAC/C,QACJ,OACA,SAAiC,CAAC,GAClC,QAAiB,OACU;AAC3B,QAAI,MAAM;AAEV,QAAI,KAAK,KAAK,GAAG;AACf,aAAO;AAAA,IACT;AAEA,QAAI,MAAM,SAAS,MAAM,GAAG;AAC1B,aAAO;AAAA,IACT;AAEA,QAAI,cAAc,QAAQ;AACxB,aAAO;AAAA,IACT;AAEA,QAAI,MAAM,SAAS,GAAG,GAAG;AACvB,YAAM,MAAM,MAAM,GAAG,EAAE,MAAM,MAAM,GAAG,EAAE,SAAS;AAAA,IACnD;AAEA,UAAM,UAAU,MAAM,KAAK,MAAM,KAAK,KAAK;AAC3C,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,QAAI,SAA2B;AAE/B,eAAW,UAAW,QAAqC,QAAQ,GAAG;AACpE,cAAQ,OAAO;AAAA,aACR,MAAM;AACT,mBAAS,MAAM,KAAK,UAAU,OAAO,QAAQ,SAAS,KAAK;AAC3D;AAAA,QACF;AAAA,aACK,OAAO;AACV,mBAAS,MAAM,KAAK,WAAW,MAAM;AACrC;AAAA,QACF;AAAA,aACK,UAAU;AACb,cAAI,UAAU,UAAU,OAAO,MAAM;AACnC,qBAAS,OAAO;AAAA,UAClB;AACA;AAAA,QACF;AAAA,aACK,UAAU;AACb,mBAAS,OAAO;AAChB;AAAA,QACF;AAAA,iBACS;AACP;AAAA,QACF;AAAA;AAGF,UAAI,QAAQ;AACV;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,QAGc,UAAU,QAAQ,QAAQ,SAAS,OAAO;AAEtD,UAAM,OAAO,QAAQ,MAAM,EAAE,KAC3B,CAAC,SAEC,CAAC,SAAS,OAAO,EAAE,SAAS,KAAK,IAAI,KAAK,KAAK,OAAO,OAAO,EACjE;AAEA,QAAI,MAAM;AACR,aAAO,KAAK,SAAS,QACnB,QACA;AAAA,QACE,UAAU;AAAA,QACV,YAAY,KAAK;AAAA,MACnB,GACA,KACF;AAAA,IACF;AAEA,UAAM,cAAc,gBAAgB,OAAO,EAAE;AAC7C,QAAI,UAAU;AACd,QAAI,SAAS,WAAW,KAAK,iBAAiB,KAAK,WAAW,GAAG;AAC/D,UAAI,YAAY,SAAS,GAAG,GAAG;AAC7B,cAAM,MAAM,YAAY,MAAM,GAAG,EAAE,YAAY,MAAM,GAAG,EAAE,SAAS;AAEnE,kBAAU,wBAAQ,KAAK,SAAS,GAAG;AAAA,MACrC;AAEA,UAAI,CAAC,SAAS;AACZ,cAAM,QAAQ,MAAM,KAAK,SAAS,QAAQ,aAAa,EAAE,MAAM,CAAC;AAEhE,YAAI,OAAO;AACT,iBAAO,KAAK,SAAS,QAAQ,QAAQ;AAAA,YACnC,UAAU;AAAA,YACV,YAAY;AAAA,YACZ;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAEA,aAAO,KAAK,SAAS,QACnB,QACA;AAAA,QACE,UAAU;AAAA,QACV,YAAY;AAAA,MACd,GACA,KACF;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,KAAK,SAAS,QAAQ,OAAO,IAAI,EAAE,OAAO,GAAG,KAAK;AAEvE,WAAO,UAAU,OAAO;AAAA,EAC1B;AAAA,QAEc,MACZ,KACA,QAAiB,OACU;AAC3B,UAAM,QAAkB,KAAK,SAAS,WAAW,MAC/C,mBACA,OACA,CAAC,GAAG,CACN;AACA,UAAM,OAAO,MAAM,MAAM;AAGzB,WAAO,8BAAM,YAAW,CAAC;AAAA,EAC3B;AAAA,QAEc,WAAW,QAA2C;AArJtE;AAuJI,QAAI,UAAU,OAAO,IAAI,MAAM,EAAE,IAAI,EAAE,MAAM,uBAAuB;AAEpE,QAAI,SAAS;AACX,aAAO,mBAAmB,QAAQ,EAAE;AAAA,IACtC;AAGA,cAAU,OAAO,IAAI,MAAM,EAAE,IAAI,EAAE,MAAM,mBAAmB;AAG5D,QAAI,SAAS;AACX,YAAM,SAAS,KAAK,SAAS,gBAAgB,UAAU;AACvD,UAAI,CAAC,QAAQ;AACX,eAAO;AAAA,MACT;AAEA,YAAM,SAAS,IAAI,8BAAa,WAAW,QAAQ;AAEnD,YAAM,SAAS,mBAAmB,QAAQ,OAAO,SAAS,EAAE,QAC1D,YACA,EACF;AAEA,YAAM,QAAQ,MAAM,OAAO,SAAS,SAClC,QACA,QAAQ,OAAO,SAEf,EAAE,kBAAkB,KAAK,CAC3B;AAEA,aAAO,OAAO,KAAK,YAAM,UAAN,mBAAa,IAAkB,EAAE,SAAS;AAAA,IAC/D;AAEA,WAAO;AAAA,EACT;AACF;;;AEpLA,0BAAmC,gBAAgB;AAAA,QAC3C,QACJ,OACA,SAAiC,CAAC,GAClC,QAAQ,OACmB;AAX/B;AAYI,QAAI,CAAC,UAAU,CAAE,eAAc,WAAW,CAAC,OAAO,UAAU;AAC1D,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,SAAS,KAAK,KAAK,CAAE,iBAAgB,UAAU,CAAC,OAAO,aAAa;AACvE,aAAO;AAAA,IACT;AAEA,UAAM,OAAO;AAAA,MACX,QAAQ;AAAA,MACR,YAAY,aAAO,eAAP,YAAqB;AAAA,IACnC;AAEA,UAAM,QAAQ,KAAK,SAAS,WAAW,MACrC,aACA,SACA,MACA,KACF;AAEA,WAAO,MAAM;AAAA,EACf;AACF;;;ACjCA,mBAAuC;AACvC,oBAAuB;;;ACFvB,aAAwB;AAExB,yBAAoC;AACpC,uBAAkC;AAClC,kBAA6B;AAC7B,mBAA8B;AAE9B,2BAAsC;AACtC,oBAA+B;AAE/B,iBAAqB;AACrB,kBAAkC;AAElC,IAAM,EAAE,gBAAgB,mBAAmB,8BAAgB;AAC3D,IAAM,EAAE,oBAAW;AACnB,IAAM,EAAE,gBAAgB;AACxB,IAAM,EAAE,sBAAY;AASpB,IAAM,yBAAqD;AAAA,EACzD,SAAS;AAAA,EACT,MAAM;AAAA,EACN,UAAU;AAAA,EACV,UAAU;AAAA,EACV,OAAO;AAAA,EACP,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,sBAAsB;AACxB;AAEA,IAAM,WAAW,CAAC,QAAQ,aAAa;AAEvC,oBAAoB,QAAgB,OAAY,QAAkB;AAGhE,MACE,WAAW,UACX,MAAM,SAAS,AAAa,oBAAO,OAAO,cAC1C;AACA,UAAM,IAAI,MAAM;AAChB,QAAI,KAAK,EAAE,QAAQ,MAAM,UAAU,KAAK,AAAY,wBAAY,EAAE,IAAI,GAAG;AACvE,aAAO,EAAE;AAAA,IACX;AAEA,IAAO,cAAO,OAAO,WACnB,yCACA,AAAa,oBAAO,OAAO,gBAC3B;AAAA,MACE;AAAA,MACA,MAAM;AAAA,IACR,CACF;AAAA,EACF;AAEA,MAAI,UAAU,MAAM;AACpB,MACE,MAAM,SAAS,AAAa,oBAAO,OAAO,gBAC1C,MAAM,SACN,OAAO,MAAM,MAAM,YAAY,UAC/B;AACA,cAAU,MAAM,MAAM;AAAA,EACxB,WAAW,OAAO,MAAM,SAAS,UAAU;AACzC,cAAU,MAAM;AAAA,EAClB,WAAW,OAAO,MAAM,iBAAiB,UAAU;AACjD,cAAU,MAAM;AAAA,EAClB;AACA,YAAW,YAAW,IAAI,YAAY;AAEtC,QAAM,cAAc,OAAO,eAAe,OAAO;AAGjD,MAAI,QAAQ,MAAM,+CAA+C,GAAG;AAClE,IAAO,cAAO,OAAO,WACnB,qDACA,AAAa,oBAAO,OAAO,oBAC3B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CACF;AAAA,EACF;AAGA,MAAI,QAAQ,MAAM,eAAe,GAAG;AAClC,IAAO,cAAO,WACZ,+BACA,AAAa,oBAAO,OAAO,eAC3B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CACF;AAAA,EACF;AAGA,MAAI,QAAQ,MAAM,qCAAqC,GAAG;AACxD,IAAO,cAAO,WACZ,2BACA,AAAa,oBAAO,OAAO,yBAC3B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CACF;AAAA,EACF;AAGA,MAAI,QAAQ,MAAM,uBAAuB,GAAG;AAC1C,IAAO,cAAO,WACZ,iDACA,AAAa,oBAAO,OAAO,uBAC3B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CACF;AAAA,EACF;AAEA,MACE,SAAS,QAAQ,MAAM,KAAK,KAC5B,QAAQ,MACN,8EACF,GACA;AACA,IAAO,cAAO,WACZ,6EACA,AAAa,oBAAO,OAAO,yBAC3B;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CACF;AAAA,EACF;AAEA,QAAM;AACR;AAEA,gCAAyC,AAAO,iBAAU,aAAa;AAAA,EAC7D;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,UACA,YACA,QAAiB,OACjB;AACA,UAAM,iBAE+B,EAAE,MAAM,SAAS,SAAS,EAAE;AACjE,UAAM,cAAc;AACpB,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,SAAS;AAAA,EAChB;AAAA,QAEM,gBAAgD;AACpD,WAAO,EAAE,MAAM,SAAS,SAAS,EAAE;AAAA,EACrC;AAAA,QAEM,KAAK,QAAgB,QAA6B;AACtD,UAAM,QAAQ,KAAK,YAAY,MAC7B,QACA,KAAK,WACL,QACA,KAAK,MACP;AACA,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,eAAe,QAAgB,QAAqC;AAClE,YAAQ;AAAA,WACD,QAAQ;AACX,cAAM,qBAAqB,AAAO,aAAM,UAKtC,KAAK,aAAa,oBAAoB;AACxC,eAAO;AAAA,UACL;AAAA,UACA;AAAA,YACE,mBAAmB,OAAO,aAAa,EAAE,MAAM,KAAK,CAAC;AAAA,YACrD,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA;AAGE;AAAA;AAGJ,WAAO;AAAA,EACT;AAAA,QAEM,QAAQ,QAAgB,QAA2B;AAGvD,QAAI,WAAW,QAAQ;AACrB,YAAM,KAAK,OAAO;AAClB,UAAI,MAAM,GAAG,QAAQ,QAAQ,AAAO,iBAAU,KAAK,GAAG,IAAI,EAAE,OAAO,GAAG;AAEpE,YAAI,GAAG,gBAAgB,QAAQ,GAAG,wBAAwB,MAAM;AAE9D,mBAAS,AAAiB,6BAAY,MAAM;AAC5C,iBAAO,cAAc,AAAiB,6BAAY,EAAE;AACpD,iBAAO,OAAO,YAAY;AAAA,QAC5B;AAAA,MACF;AAAA,IACF;AAEA,UAAM,OAAO,KAAK,eAAe,QAAQ,MAAM;AAE/C,QAAI;AAEF,aAAO,MAAM,KAAK,KAAK,KAAK,IAAI,KAAK,EAAE;AAAA,IACzC,SAAS,OAAP;AACA,aAAO,WAAW,QAAQ,OAAO,MAAM;AAAA,IACzC;AAAA,EACF;AAAA,SAWO,mBACL,aACA,YAC2D;AAE3D,UAAM,UAAU,AAAiB,6BAAY,sBAAsB;AACnE,QAAI,YAAY;AACd,iBAAW,OAAO,YAAY;AAC5B,YAAI,WAAW,MAAM;AACnB,kBAAQ,OAAO;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,SACJ,CAAC;AAGH;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,QAAQ,CAAC,QAAQ;AACjB,UAAK,YAAoB,QAAQ,MAAM;AACrC;AAAA,MACF;AACA,YAAM,QAAQ,AAAY,qBAAU,YAAoB,IAAI;AAC5D,UAAI,QAAQ,YAAY;AACtB,cAAM;AAAA,MACR;AACA,aAAO,OAAO;AAAA,IAChB,CAAC;AAED,KAAC,QAAQ,MAAM,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACtC,UAAK,YAAoB,QAAQ,MAAM;AACrC;AAAA,MACF;AACA,aAAO,OAAO,AAAY,oBAAS,YAAoB,IAAI;AAAA,IAC7D,CAAC;AAED,QAAK,YAAoB,YAAY;AACnC,aAAO,aAAa,AAAmB,iCACpC,YAAoB,UACvB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAGA,UAAU,gBAA6C;AAErD,WAAO,IAAI,UAAU,CAAC,GAAG,MAAM,cAAc;AAAA,EAC/C;AACF;AAGA,8BAA6C,4BAAO;AAAA,EAEzC;AAAA,EAED;AAAA,EAEA;AAAA,EAER,YAAY,UAAuB,gBAAkC;AACnE,UAAM;AAEN,mBAAe,MAAM,YAAY,QAAQ;AAEzC,QAAI,kBAAkB,MAAM;AAC1B,uBAAiB;AAAA,IACnB;AAEA,QAAI,OAAO,mBAAmB,UAAU;AACtC,qBACE,MAEA,YAEA,KAAK,SAAS,UAAU,QAAQ,cAAc,CAChD;AAEA,qBAAe,MAAM,UAAU,IAAI;AAAA,IACrC,WAAW,OAAO,mBAAmB,UAAU;AAE7C,qBAAe,MAAM,UAAU,cAAc;AAE7C,qBAAe,MAAM,YAAY,IAAI;AAAA,IACvC;AAAA,EACF;AAAA,EAEA,QAAQ,UAAkC;AACxC,WAAO,AAAO,cAAO,WACnB,2CACA,QAAO,OAAO,uBACd;AAAA,MACE,WAAW;AAAA,IACb,CACF;AAAA,EACF;AAAA,EACA,aAA8B;AAE5B,QAAI,KAAK,UAAU;AACjB,aAAO,QAAQ,QAAQ,KAAK,QAAQ;AAAA,IACtC;AAEA,WAAO,KAAK,SAAS,KAAK,gBAAgB,CAAC,CAAC,EAAE,KAAK,CAAC,aAAa;AAC/D,UAAI,SAAS,UAAU,KAAK,QAAQ;AAClC,QAAO,cAAO,WACZ,sBAAsB,KAAK,QAC3B,QAAO,OAAO,uBACd;AAAA,UACE,WAAW;AAAA,QACb,CACF;AAAA,MACF;AACA,aAAO,KAAK,SAAS,UAAU,QAAQ,SAAS,KAAK,OAAO;AAAA,IAC9D,CAAC;AAAA,EACH;AAAA,EAEA,yBACE,aACiB;AACjB,kBAAc,aAAY,WAAW;AAErC,UAAM,cAAc,KAAK,WAAW,EAAE,KAAK,CAAC,YAAY;AACtD,UAAI,SAAS;AACX,kBAAU,QAAQ,YAAY;AAAA,MAChC;AACA,aAAO;AAAA,IACT,CAAC;AAKD,QAAI,YAAY,YAAY,MAAM;AAChC,YAAM,WAAW,aAAY,WAAW;AACxC,eAAS,OAAO;AAChB,kBAAY,WAAW,KAAK,SAAS,YAAY,QAAQ;AAAA,IAC3D;AAEA,QAAI,YAAY,MAAM,MAAM;AAE1B,kBAAY,KAAK,QAAQ,QAAQ,YAAY,EAAE,EAAE,KAAK,OAAO,OAAO;AAClE,YAAI,MAAM,MAAM;AACd,iBAAO;AAAA,QACT;AACA,cAAM,UAAU,MAAM,KAAK,SAAS,YAAY,EAAE;AAClD,YAAI,WAAW,MAAM;AACnB,UAAO,cAAO,mBACZ,sCACA,SACA,EACF;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,WAAO,kBAAkB;AAAA,MACvB,IAAI,kBAAkB,WAAW;AAAA,MACjC,QAAQ;AAAA,IACV,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,aAAa;AAC1B,UAAI,GAAG,QAAQ,MAAM;AACnB,YAAI,GAAG,KAAK,YAAY,MAAM,QAAQ;AACpC,UAAO,cAAO,mBACZ,yBACA,eACA,WACF;AAAA,QACF;AAAA,MACF,OAAO;AACL,WAAG,OAAO;AAAA,MACZ;AAEA,YAAM,QAAS,KAAK,SAAS,YAAoB,mBAAmB,IAAI;AAAA,QACtE,MAAM;AAAA,MACR,CAAC;AAED,aAAO,KAAK,SAAS,KAAK,uBAAuB,CAAC,KAAK,CAAC,EAAE,KACxD,CAAC,SAAS;AACR,eAAO;AAAA,MACT,GACA,CAAC,UAAU;AACT,eAAO,WAAW,mBAAmB,OAAO,KAAK;AAAA,MACnD,CACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,gBACE,aACiB;AACjB,WAAO,AAAO,cAAO,WACnB,uCACA,QAAO,OAAO,uBACd;AAAA,MACE,WAAW;AAAA,IACb,CACF;AAAA,EACF;AAAA,QAEM,gBACJ,aACqD;AAErD,UAAM,cAAc,MAAM,KAAK,SAAS,wBACtC,MAAM,IAAI,KAAK,SAAS,eAC1B;AAGA,UAAM,OAAO,MAAM,KAAK,yBAAyB,WAAW;AAE5D,QAAI;AAKF,aAAO,MAAM,qBACX,YAAY;AACV,cAAM,KAAK,MAAM,KAAK,SAAS,eAAe,IAAI;AAClD,YAAI,OAAO,MAAM;AACf,iBAAO;AAAA,QACT;AACA,eAAO,KAAK,SAAS,iBAAiB,IAAI,MAAM,WAAW;AAAA,MAC7D,GACA,EAAE,UAAU,KAAK,SAAS,CAC5B;AAAA,IACF,SAAS,OAAP;AACA,MAAC,MAAc,kBAAkB;AACjC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,QAEM,YAAY,SAAiD;AACjE,UAAM,OAAO,OAAO,YAAY,WAAW,YAAY,OAAO,IAAI;AAClE,UAAM,UAAU,MAAM,KAAK,WAAW;AAEtC,WAAO,KAAK,SAAS,KAAK,iBAAiB;AAAA,MACzC,SAAQ,IAAI;AAAA,MACZ,QAAQ,YAAY;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,QAEM,mBAAmB,SAAiD;AACxE,UAAM,OAAO,OAAO,YAAY,WAAW,YAAY,OAAO,IAAI;AAClE,UAAM,UAAU,MAAM,KAAK,WAAW;AAGtC,WAAO,KAAK,SAAS,KAAK,YAAY;AAAA,MACpC,QAAQ,YAAY;AAAA,MACpB,SAAQ,IAAI;AAAA,IACd,CAAC;AAAA,EACH;AAAA,QAEM,eACJ,QACA,OACA,OACiB;AAEjB,UAAM,YAAY,MAAM,8BAAkB,aACxC,QACA,OACA,OAEA,CAAC,SAAiB;AAChB,aAAO,KAAK,SAAS,YAAY,IAAI;AAAA,IACvC,CACF;AAEA,UAAM,UAAU,MAAM,KAAK,WAAW;AAEtC,WAAO,KAAK,SAAS,KAAK,wBAAwB;AAAA,MAChD,QAAQ,YAAY;AAAA,MACpB,KAAK,UACH,8BAAkB,WAAW,UAAU,QAAQ,OAAO,UAAU,KAAK,CACvE;AAAA,IACF,CAAC;AAAA,EACH;AAAA,QAEM,OAAO,UAAoC;AAC/C,UAAM,WAAW,KAAK;AAEtB,UAAM,UAAU,MAAM,KAAK,WAAW;AAEtC,WAAO,SAAS,KAAK,0BAA0B;AAAA,MAC7C,QAAQ,YAAY;AAAA,MACpB;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ADvhBA,IAAM,MAAM,qBAAQ;AAEpB,2BAAoC,gBAAgB;AAAA,QAC5C,QACJ,OACA,SAAiC,CAAC,GAClC,QAAiB,OACU;AAC3B,QAAI,MAAM,SAAS,MAAM,GAAG;AAC1B,aAAO,KAAK,WAAW,OAAO,KAAK;AAAA,IACrC;AAEA,UAAM,WAAW,MAAM,MAAM,GAAG;AAEhC,QAAI,KAAK,SAAS,UAAU,YAAY,QAAQ;AAC9C,UAAI,qBAAO,MAAM,UAAU,SAAS,EAAE,GAAG;AAEvC,eAAO,KAAK,YAAY,OAAO,QAAQ,UAAU,KAAK;AAAA,MACxD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,QAEc,WACZ,OACA,QAAiB,OACU;AAC3B,UAAM,OAAO,CAAC,gCAAc,GAAG,GAAG,aAAa;AAE/C,WAAO,KAAK,YAAY,OAAO,MAAM,KAAK;AAAA,EAC5C;AAAA,QAEc,YACZ,QACA,MACA,QAAiB,OACU;AAC3B,UAAM,QAAQ,KAAK,GAAG,QAAQ,KAAK,EAAE;AAErC,UAAM,aAA0B,IAAI,YAClC,OACA,KAAK,SAAS,YACd,KACF;AAGA,UAAM,MAAM,IAAI,IAAI,EAAE,UAAU,YAAY,YAAY,KAAK,GAAG,CAAC;AAEjE,QAAI;AACF,YAAM,OAAO,MAAM,IAAI,KAAK,MAAM;AAClC,YAAM,gBAAgB,MAAM,KAAK,WAAW;AAC5C,YAAM,MAAM,MAAM,KAAK,QAAQ,KAAK;AACpC,UAAI;AAEJ,UAAI,OAAO,kBAAkB,YAAY,AAAM,OAAO,aAAa,MAA1B,GAA6B;AACpE,kBAAU;AAAA,MACZ;AAEA,UACE,OAAO,kBAAkB,YACzB,AAAkB,cAAc,gBAAhC,eACA;AACA,kBAAU,cAAc;AAAA,MAC1B;AAEA,aAAO,WAAW,OAAO;AAAA,IAC3B,SAAS,GAAP;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ARvEA,IAAM,WAAW,IAAI,SAAS;AAC9B,SAAS,iBAAiB,IAAI,MAAM,QAAQ,CAAC;AAC7C,SAAS,iBAAiB,IAAI,OAAO,QAAQ,CAAC;AAC9C,SAAS,iBAAiB,IAAI,UAAU,QAAQ,CAAC;AAEjD,IAAO,cAAQ;","names":[]}