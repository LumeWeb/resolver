{"version":3,"sources":["../src/index.ts","../src/Resolver.ts","../src/lib/util.ts","../src/resolvers/handshake/HnsClient.ts","../src/resolvers/handshake/RPCError.ts","../src/resolvers/handshake.ts","../src/SubResolverBase.ts","../src/resolvers/icann.ts","../src/resolvers/eip137.ts"],"sourcesContent":["import Resolver from \"./Resolver.js\";\nimport Handshake from \"./resolvers/handshake.js\";\nimport Icann from \"./resolvers/icann.js\";\nimport Eip137 from \"./resolvers/eip137.js\";\n\nconst resolver = new Resolver();\nresolver.registerResolver(new Icann(resolver));\nresolver.registerResolver(new Eip137(resolver));\nresolver.registerResolver(new Handshake(resolver));\n\nexport { Resolver };\nexport default resolver;\nexport * from \"./lib/util.js\";\n","import SubResolverBase from \"./SubResolverBase.js\";\n\nexport default class Resolver {\n  private _resolvers: SubResolverBase[] = [];\n  private _portals: string[] = [];\n\n  public async resolve(\n    input: string,\n    params: object = []\n  ): Promise<string | boolean> {\n    for (const resolver of this._resolvers) {\n      const result = await resolver.resolve(input, params);\n      if (result) {\n        return result;\n      }\n    }\n\n    return false;\n  }\n\n  public registerResolver(resolver: SubResolverBase): void {\n    this._resolvers.push(resolver);\n  }\n\n  public registerPortal(hostname: string): void {\n    this._portals.push(hostname);\n  }\n\n  set portals(value: string[]) {\n    this._portals = value;\n  }\n\n  public getPortal() {\n    return this._portals[\n      Math.floor(Math.random() * (1 + this._portals.length - 1))\n    ];\n  }\n}\n","export function isIp(ip: string) {\n  return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n    ip\n  );\n}\n\nexport function isDomain(domain: string) {\n  return /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/.test(\n    domain\n  );\n}\n\nexport const startsWithSkylinkRegExp = /^(sia:\\/\\/)?([a-zA-Z0-9_-]{46})/;\nexport const registryEntryRegExp =\n  /^skyns:\\/\\/(?<publickey>[a-zA-Z0-9%]+)\\/(?<datakey>[a-zA-Z0-9%]+)$/;\n\nexport function normalizeDomain(domain: string): string {\n  return domain.replace(/^\\.+|\\.+$/g, \"\").replace(/^\\/+|\\/+$/g, \"\");\n}\n","import { posix as Path } from \"path\";\n// @ts-ignore\nimport brq from \"brq\";\nimport assert from \"assert\";\n\nimport { NodeClient } from \"@lumeweb/hs-client\";\nimport RPCError from \"./RPCError.js\";\n\nexport default class HnsClient extends NodeClient {\n  constructor(options: object) {\n    super(options);\n  }\n\n  async execute(name: string, params: any): Promise<object> {\n    // async execute(endpoint: string, method: string, params: any) {\n    // @ts-ignore\n    assert(typeof name === \"string\");\n\n    this.sequence += 1;\n\n    // @ts-ignore\n    const chain = this.headers[\"x-chain\"] ?? \"hns\";\n\n    const res = await brq({\n      method: \"POST\",\n      ssl: true,\n      strictSSL: this.strictSSL,\n      host: this.host,\n      port: this.port,\n      path: Path.join(this.path, \"/rpc\"),\n      username: this.username,\n      password: this.password,\n      headers: this.headers,\n      timeout: this.timeout,\n      limit: this.limit,\n      pool: true,\n      query: {\n        chain,\n      },\n      json: {\n        jsonrpc: \"2.0\",\n        method: name,\n        params,\n        id: this.sequence,\n      },\n    });\n\n    if (res.statusCode === 401) {\n      throw new RPCError(\"Unauthorized (bad API key).\", -1);\n    }\n\n    if (res.type !== \"json\") {\n      throw new Error(\"Bad response (wrong content-type).\");\n    }\n\n    const json = res.json();\n\n    if (!json) {\n      throw new Error(\"No body for JSON-RPC response.\");\n    }\n\n    if (json.error) {\n      const { message, code } = json.error;\n      throw new RPCError(message, code);\n    }\n\n    if (res.statusCode !== 200) {\n      throw new Error(`Status code: ${res.statusCode}.`);\n    }\n\n    return json;\n  }\n}\n","export default class RPCError extends Error {\n  constructor(msg: string, code: number) {\n    super();\n\n    // @ts-ignore\n    this.type = \"RPCError\";\n    this.message = String(msg);\n    // @ts-ignore\n    // tslint:disable-next-line:no-bitwise\n    this.code = code >> 0;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, RPCError);\n    }\n  }\n}\n","import {\n  isDomain,\n  isIp,\n  normalizeDomain,\n  registryEntryRegExp,\n  startsWithSkylinkRegExp,\n} from \"../lib/util.js\";\n\n// @ts-ignore\nimport { NodeClient } from \"hs-client\";\nimport HnsClient from \"./handshake/HnsClient.js\";\nimport { SkynetClient } from \"@lumeweb/skynet-js\";\nimport SubResolverBase from \"../SubResolverBase.js\";\n\nexport default class Handshake extends SubResolverBase {\n  async resolve(input: string, params: object = {}): Promise<string | boolean> {\n    let tld = input;\n\n    if (isIp(input)) {\n      return false;\n    }\n\n    if (input.endsWith(\".eth\")) {\n      return false;\n    }\n\n    if (input.includes(\".\")) {\n      tld = input.split(\".\")[input.split(\".\").length - 1];\n    }\n\n    const records = await this.query(tld);\n    if (!records) {\n      return false;\n    }\n    let result: string | boolean = false;\n\n    for (const record of (records as object[]).reverse()) {\n      // @ts-ignore\n      switch (record.type) {\n        case \"NS\": {\n          result = await this.processNs(input, record, records);\n          break;\n        }\n        case \"TXT\": {\n          result = await this.processTxt(record);\n          break;\n        }\n        case \"SYNTH6\": {\n          // @ts-ignore\n          if (\"ipv6\" in params && params.ipv6) {\n            // @ts-ignore\n            result = record.address;\n          }\n          break;\n        }\n        case \"SYNTH4\": {\n          // @ts-ignore\n          result = record.address;\n          break;\n        }\n        // @ts-ignore\n        default: {\n          // @ts-ignore\n          break;\n        }\n      }\n\n      if (result) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  // @ts-ignore\n  private async processNs(domain, record, records) {\n    // @ts-ignore\n    const glue = records.slice().find(\n      (item: object) =>\n        // @ts-ignore\n        [\"GLUE4\", \"GLUE6\"].includes(item.type) && item.ns === record.ns\n    );\n\n    if (glue) {\n      return this.resolver.resolve(glue.address, { subquery: true, domain });\n    }\n\n    const foundDomain = normalizeDomain(record.ns);\n\n    if (isDomain(foundDomain) || /[a-zA-Z0-9\\-]+/.test(foundDomain)) {\n      const hnsNs = await this.resolver.resolve(foundDomain);\n\n      if (hnsNs) {\n        return this.resolver.resolve(hnsNs as string, {\n          subquery: true,\n          domain,\n        });\n      }\n\n      return this.resolver.resolve(foundDomain, { subquery: true });\n    }\n\n    const result = await this.resolver.resolve(record.ns, { domain });\n\n    return result || record.ns;\n  }\n\n  private async query(tld: string): Promise<object | boolean> {\n    const portal = this.resolver.getPortal();\n    const clientOptions = {\n      ssl: true,\n      network: \"main\",\n      host: portal,\n      port: 443,\n      headers: {\n        \"x-chain\": \"hns\",\n      },\n    };\n\n    const client = new HnsClient(clientOptions);\n    let resp;\n    try {\n      // noinspection TypeScriptValidateJSTypes,JSVoidFunctionReturnValueUsed\n      resp = await client.execute(\"getnameresource\", [tld]);\n    } catch (e) {\n      return false;\n    }\n\n    // @ts-ignore\n    return resp?.result?.records || [];\n  }\n\n  private async processTxt(record: object): Promise<string | boolean> {\n    // @ts-ignore\n    let matches = record.txt.slice().pop().match(startsWithSkylinkRegExp);\n    // @ts-ignore\n    if (matches) {\n      return decodeURIComponent(matches[2]);\n    }\n\n    // @ts-ignore\n    matches = record.txt.slice().pop().match(registryEntryRegExp);\n\n    // @ts-ignore\n    if (matches) {\n      const client = new SkynetClient(`https://${this.resolver.getPortal()}`);\n\n      const pubKey = decodeURIComponent(matches.groups.publickey).replace(\n        \"ed25519:\",\n        \"\"\n      );\n\n      const entry = await client.registry.getEntry(\n        pubKey,\n        matches.groups.datakey,\n        // @ts-ignore\n        { hashedDataKeyHex: true }\n      );\n\n      return Buffer.from(entry.entry?.data as Uint8Array).toString();\n    }\n\n    return false;\n  }\n}\n","import ISubResolver from \"./ISubResolver.js\";\nimport Resolver from \"./Resolver.js\";\n\n// @ts-ignore\nexport default abstract class SubResolverBase implements ISubResolver {\n  protected resolver: Resolver;\n\n  constructor(resolver: Resolver) {\n    this.resolver = resolver;\n  }\n\n  abstract resolve(input: string, params: object): Promise<string | boolean>;\n}\n","import { isDomain } from \"../lib/util.js\";\nimport resolver from \"../index.js\";\n\n// @ts-ignore\nimport { NodeClient } from \"@lumeweb/hs-client\";\nimport SubResolverBase from \"../SubResolverBase.js\";\nimport HnsClient from \"./handshake/HnsClient.js\";\n\nexport default class Icann extends SubResolverBase {\n  async resolve(input: string, params: object = {}): Promise<string | boolean> {\n    // @ts-ignore\n    if (!params || !(\"subquery\" in params) || !params.subquery) {\n      return false;\n    }\n\n    if (!isDomain(input)) {\n      return false;\n    }\n\n    const portal = resolver.getPortal();\n    const clientOptions = {\n      ssl: true,\n      host: portal,\n      port: 443,\n      path: \"/pocketdns\",\n      headers: {\n        \"x-chain\": \"icann\",\n      },\n    };\n    const client = new HnsClient(clientOptions);\n    let resp: object | boolean = false;\n    try {\n      const rpcParams = {};\n\n      // @ts-ignore\n      rpcParams.domain = params.domain || input;\n      // @ts-ignore\n      rpcParams.nameserver = !params.domain ? null : input;\n\n      // noinspection TypeScriptValidateJSTypes,JSVoidFunctionReturnValueUsed\n      resp = await client.execute(\"dnslookup\", rpcParams);\n    } catch (e) {\n      return false;\n    }\n\n    // @ts-ignore\n    return resp.result.pop();\n  }\n}\n","// @ts-ignore\nimport ENSRoot, { getEnsAddress } from \"@lumeweb/ensjs\";\nimport { ethers, providers } from \"ethers\";\nimport URL from \"url\";\n// @ts-ignore\nimport contentHasher from \"content-hash\";\n// @ts-ignore\nimport { profiles as contentHashProfiles } from \"content-hash/src/profiles.js\";\n// @ts-ignore\nimport { encodeContenthash } from \"@lumeweb/ensjs/dist/utils/contents.js\";\nimport SubResolverBase from \"../SubResolverBase.js\";\n\nconst ENS = ENSRoot.default;\n\nexport default class Eip137 extends SubResolverBase {\n  async resolve(input: string, params: object = {}): Promise<string | boolean> {\n    if (input.endsWith(\".eth\")) {\n      return this.resolveEns(input);\n    }\n\n    const hip5Data = input.split(\".\");\n    // @ts-ignore\n    if (2 <= hip5Data.length && \"domain\" in params) {\n      if (ethers.utils.isAddress(hip5Data[0])) {\n        // @ts-ignore\n        return this.resolveHip5(params.domain, hip5Data);\n      }\n    }\n\n    return false;\n  }\n\n  private async resolveEns(input: string): Promise<string | boolean> {\n    const data = [getEnsAddress(\"1\"), \"eth-mainnet\"];\n\n    return this.resolveHip5(input, data);\n  }\n\n  private async resolveHip5(\n    domain: string,\n    data: string[]\n  ): Promise<string | boolean> {\n    const connection: providers.StaticJsonRpcProvider = this.getConnection(\n      data[1].replace(\"_\", \"\")\n    );\n\n    // @ts-ignore\n    const ens = new ENS({ provider: connection, ensAddress: data[0] });\n\n    try {\n      const name = await ens.name(domain);\n      const contentResult = await name.getContent();\n      const url = await name.getText(\"url\");\n      let content;\n\n      if (typeof contentResult === \"string\" && 0 === Number(contentResult)) {\n        content = false;\n      }\n\n      if (\n        typeof contentResult === \"object\" &&\n        \"contenthash\" === contentResult.contentType\n      ) {\n        content = contentResult.value;\n      }\n\n      return content || url || false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private getConnection(chain: string): providers.StaticJsonRpcProvider {\n    // @ts-ignore\n    const apiUrl = new URL.URL(\n      `https://${this.resolver.getPortal()}/pocketdns`\n    );\n    if (URL.URLSearchParams) {\n      const params = new URL.URLSearchParams();\n      params.set(\"chain\", chain);\n      apiUrl.search = params.toString();\n    } else {\n      apiUrl.search = `?chain=${chain}`;\n    }\n    return new ethers.providers.StaticJsonRpcProvider({\n      // @ts-ignore\n      url: apiUrl.toString(),\n    });\n  }\n}\n"],"mappings":"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","names":[]}