var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// node_modules/tsup/assets/cjs_shims.js
var init_cjs_shims = __esm({
  "node_modules/tsup/assets/cjs_shims.js"() {
  }
});

// node_modules/bsert/lib/assert.js
var require_assert = __commonJS({
  "node_modules/bsert/lib/assert.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var AssertionError = class extends Error {
      constructor(options) {
        if (typeof options === "string")
          options = { message: options };
        if (options === null || typeof options !== "object")
          options = {};
        let message = null;
        let operator = "fail";
        let generatedMessage = Boolean(options.generatedMessage);
        if (options.message != null)
          message = toString(options.message);
        if (typeof options.operator === "string")
          operator = options.operator;
        if (message == null) {
          if (operator === "fail") {
            message = "Assertion failed.";
          } else {
            const a2 = stringify(options.actual);
            const b2 = stringify(options.expected);
            message = `${a2} ${operator} ${b2}`;
          }
          generatedMessage = true;
        }
        super(message);
        let start = this.constructor;
        if (typeof options.stackStartFunction === "function")
          start = options.stackStartFunction;
        else if (typeof options.stackStartFn === "function")
          start = options.stackStartFn;
        this.type = "AssertionError";
        this.name = "AssertionError [ERR_ASSERTION]";
        this.code = "ERR_ASSERTION";
        this.generatedMessage = generatedMessage;
        this.actual = options.actual;
        this.expected = options.expected;
        this.operator = operator;
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, start);
      }
    };
    function assert2(value, message) {
      if (!value) {
        let generatedMessage = false;
        if (arguments.length === 0) {
          message = "No value argument passed to `assert()`.";
          generatedMessage = true;
        } else if (message == null) {
          message = "Assertion failed.";
          generatedMessage = true;
        } else if (isError(message)) {
          throw message;
        }
        throw new AssertionError({
          message,
          actual: value,
          expected: true,
          operator: "==",
          generatedMessage,
          stackStartFn: assert2
        });
      }
    }
    function equal(actual, expected, message) {
      if (!Object.is(actual, expected)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual,
          expected,
          operator: "strictEqual",
          stackStartFn: equal
        });
      }
    }
    function notEqual(actual, expected, message) {
      if (Object.is(actual, expected)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual,
          expected,
          operator: "notStrictEqual",
          stackStartFn: notEqual
        });
      }
    }
    function fail(message) {
      let generatedMessage = false;
      if (isError(message))
        throw message;
      if (message == null) {
        message = "Assertion failed.";
        generatedMessage = true;
      }
      throw new AssertionError({
        message,
        actual: false,
        expected: true,
        operator: "fail",
        generatedMessage,
        stackStartFn: fail
      });
    }
    function throws(func, expected, message) {
      if (typeof expected === "string") {
        message = expected;
        expected = void 0;
      }
      let thrown = false;
      let err = null;
      enforce(typeof func === "function", "func", "function");
      try {
        func();
      } catch (e) {
        thrown = true;
        err = e;
      }
      if (!thrown) {
        let generatedMessage = false;
        if (message == null) {
          message = "Missing expected exception.";
          generatedMessage = true;
        }
        throw new AssertionError({
          message,
          actual: void 0,
          expected,
          operator: "throws",
          generatedMessage,
          stackStartFn: throws
        });
      }
      if (!testError(err, expected, message, throws))
        throw err;
    }
    function doesNotThrow(func, expected, message) {
      if (typeof expected === "string") {
        message = expected;
        expected = void 0;
      }
      let thrown = false;
      let err = null;
      enforce(typeof func === "function", "func", "function");
      try {
        func();
      } catch (e) {
        thrown = true;
        err = e;
      }
      if (!thrown)
        return;
      if (testError(err, expected, message, doesNotThrow)) {
        let generatedMessage = false;
        if (message == null) {
          message = "Got unwanted exception.";
          generatedMessage = true;
        }
        throw new AssertionError({
          message,
          actual: err,
          expected,
          operator: "doesNotThrow",
          generatedMessage,
          stackStartFn: doesNotThrow
        });
      }
      throw err;
    }
    async function rejects(func, expected, message) {
      if (typeof expected === "string") {
        message = expected;
        expected = void 0;
      }
      let thrown = false;
      let err = null;
      if (typeof func !== "function")
        enforce(isPromise(func), "func", "promise");
      try {
        if (isPromise(func))
          await func;
        else
          await func();
      } catch (e) {
        thrown = true;
        err = e;
      }
      if (!thrown) {
        let generatedMessage = false;
        if (message == null) {
          message = "Missing expected rejection.";
          generatedMessage = true;
        }
        throw new AssertionError({
          message,
          actual: void 0,
          expected,
          operator: "rejects",
          generatedMessage,
          stackStartFn: rejects
        });
      }
      if (!testError(err, expected, message, rejects))
        throw err;
    }
    async function doesNotReject(func, expected, message) {
      if (typeof expected === "string") {
        message = expected;
        expected = void 0;
      }
      let thrown = false;
      let err = null;
      if (typeof func !== "function")
        enforce(isPromise(func), "func", "promise");
      try {
        if (isPromise(func))
          await func;
        else
          await func();
      } catch (e) {
        thrown = true;
        err = e;
      }
      if (!thrown)
        return;
      if (testError(err, expected, message, doesNotReject)) {
        let generatedMessage = false;
        if (message == null) {
          message = "Got unwanted rejection.";
          generatedMessage = true;
        }
        throw new AssertionError({
          message,
          actual: void 0,
          expected,
          operator: "doesNotReject",
          generatedMessage,
          stackStartFn: doesNotReject
        });
      }
      throw err;
    }
    function ifError(err) {
      if (err != null) {
        let message = "ifError got unwanted exception: ";
        if (typeof err === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor)
            message += err.constructor.name;
          else
            message += err.message;
        } else {
          message += stringify(err);
        }
        throw new AssertionError({
          message,
          actual: err,
          expected: null,
          operator: "ifError",
          generatedMessage: true,
          stackStartFn: ifError
        });
      }
    }
    function deepEqual(actual, expected, message) {
      if (!isDeepEqual(actual, expected, false)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual,
          expected,
          operator: "deepStrictEqual",
          stackStartFn: deepEqual
        });
      }
    }
    function notDeepEqual(actual, expected, message) {
      if (isDeepEqual(actual, expected, true)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual,
          expected,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepEqual
        });
      }
    }
    function bufferEqual(actual, expected, enc, message) {
      if (!isEncoding(enc)) {
        message = enc;
        enc = null;
      }
      if (enc == null)
        enc = "hex";
      expected = bufferize(actual, expected, enc);
      enforce(isBuffer(actual), "actual", "buffer");
      enforce(isBuffer(expected), "expected", "buffer");
      if (actual !== expected && !actual.equals(expected)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual: actual.toString(enc),
          expected: expected.toString(enc),
          operator: "bufferEqual",
          stackStartFn: bufferEqual
        });
      }
    }
    function notBufferEqual(actual, expected, enc, message) {
      if (!isEncoding(enc)) {
        message = enc;
        enc = null;
      }
      if (enc == null)
        enc = "hex";
      expected = bufferize(actual, expected, enc);
      enforce(isBuffer(actual), "actual", "buffer");
      enforce(isBuffer(expected), "expected", "buffer");
      if (actual === expected || actual.equals(expected)) {
        if (isError(message))
          throw message;
        throw new AssertionError({
          message,
          actual: actual.toString(enc),
          expected: expected.toString(enc),
          operator: "notBufferEqual",
          stackStartFn: notBufferEqual
        });
      }
    }
    function enforce(value, name2, type) {
      if (!value) {
        let msg;
        if (name2 == null) {
          msg = "Invalid type for parameter.";
        } else {
          if (type == null)
            msg = `Invalid type for "${name2}".`;
          else
            msg = `"${name2}" must be a(n) ${type}.`;
        }
        const err = new TypeError(msg);
        if (Error.captureStackTrace)
          Error.captureStackTrace(err, enforce);
        throw err;
      }
    }
    function range(value, name2) {
      if (!value) {
        const msg = name2 != null ? `"${name2}" is out of range.` : "Parameter is out of range.";
        const err = new RangeError(msg);
        if (Error.captureStackTrace)
          Error.captureStackTrace(err, range);
        throw err;
      }
    }
    function stringify(value) {
      switch (typeof value) {
        case "undefined":
          return "undefined";
        case "object":
          if (value === null)
            return "null";
          return `[${objectName(value)}]`;
        case "boolean":
          return `${value}`;
        case "number":
          return `${value}`;
        case "string":
          if (value.length > 80)
            value = `${value.substring(0, 77)}...`;
          return JSON.stringify(value);
        case "symbol":
          return tryString(value);
        case "function":
          return `[${funcName(value)}]`;
        case "bigint":
          return `${value}n`;
        default:
          return `[${typeof value}]`;
      }
    }
    function toString(value) {
      if (typeof value === "string")
        return value;
      if (isError(value))
        return tryString(value);
      return stringify(value);
    }
    function tryString(value) {
      try {
        return String(value);
      } catch (e) {
        return "Object";
      }
    }
    function testError(err, expected, message, func) {
      if (expected == null)
        return true;
      if (isRegExp(expected))
        return expected.test(err);
      if (typeof expected !== "function") {
        if (func === doesNotThrow || func === doesNotReject)
          throw new TypeError('"expected" must not be an object.');
        if (typeof expected !== "object")
          throw new TypeError('"expected" must be an object.');
        let generatedMessage = false;
        if (message == null) {
          const name2 = func === rejects ? "rejection" : "exception";
          message = `Missing expected ${name2}.`;
          generatedMessage = true;
        }
        if (err == null || typeof err !== "object") {
          throw new AssertionError({
            actual: err,
            expected,
            message,
            operator: func.name,
            generatedMessage,
            stackStartFn: func
          });
        }
        const keys = Object.keys(expected);
        if (isError(expected))
          keys.push("name", "message");
        if (keys.length === 0)
          throw new TypeError('"expected" may not be an empty object.');
        for (const key of keys) {
          const expect = expected[key];
          const value = err[key];
          if (typeof value === "string" && isRegExp(expect) && expect.test(value)) {
            continue;
          }
          if (key in err && isDeepEqual(value, expect, false))
            continue;
          throw new AssertionError({
            actual: err,
            expected,
            message,
            operator: func.name,
            generatedMessage,
            stackStartFn: func
          });
        }
        return true;
      }
      if (expected.prototype !== void 0 && err instanceof expected)
        return true;
      if (Error.isPrototypeOf(expected))
        return false;
      return expected.call({}, err) === true;
    }
    function isDeepEqual(x2, y2, fail2) {
      try {
        return compare(x2, y2, null);
      } catch (e) {
        return fail2;
      }
    }
    function compare(a2, b2, cache) {
      if (Object.is(a2, b2))
        return true;
      if (!isObject(a2) || !isObject(b2))
        return false;
      if (objectString(a2) !== objectString(b2))
        return false;
      if (Object.getPrototypeOf(a2) !== Object.getPrototypeOf(b2))
        return false;
      if (isBuffer(a2) && isBuffer(b2))
        return a2.equals(b2);
      if (isDate(a2))
        return Object.is(a2.getTime(), b2.getTime());
      if (isRegExp(a2)) {
        return a2.source === b2.source && a2.global === b2.global && a2.multiline === b2.multiline && a2.lastIndex === b2.lastIndex && a2.ignoreCase === b2.ignoreCase;
      }
      if (isError(a2)) {
        if (a2.message !== b2.message)
          return false;
      }
      if (isArrayBuffer(a2)) {
        a2 = new Uint8Array(a2);
        b2 = new Uint8Array(b2);
      }
      if (isView(a2) && !isBuffer(a2)) {
        if (isBuffer(b2))
          return false;
        const x2 = new Uint8Array(a2.buffer);
        const y2 = new Uint8Array(b2.buffer);
        if (x2.length !== y2.length)
          return false;
        for (let i = 0; i < x2.length; i++) {
          if (x2[i] !== y2[i])
            return false;
        }
        return true;
      }
      if (isSet(a2)) {
        if (a2.size !== b2.size)
          return false;
        const keys = /* @__PURE__ */ new Set([...a2, ...b2]);
        return keys.size === a2.size;
      }
      if (!cache) {
        cache = {
          a: /* @__PURE__ */ new Map(),
          b: /* @__PURE__ */ new Map(),
          p: 0
        };
      } else {
        const aa = cache.a.get(a2);
        if (aa != null) {
          const bb = cache.b.get(b2);
          if (bb != null)
            return aa === bb;
        }
        cache.p += 1;
      }
      cache.a.set(a2, cache.p);
      cache.b.set(b2, cache.p);
      const ret = recurse(a2, b2, cache);
      cache.a.delete(a2);
      cache.b.delete(b2);
      return ret;
    }
    function recurse(a2, b2, cache) {
      if (isMap(a2)) {
        if (a2.size !== b2.size)
          return false;
        const keys2 = /* @__PURE__ */ new Set([...a2.keys(), ...b2.keys()]);
        if (keys2.size !== a2.size)
          return false;
        for (const key of keys2) {
          if (!compare(a2.get(key), b2.get(key), cache))
            return false;
        }
        return true;
      }
      if (isArray(a2)) {
        if (a2.length !== b2.length)
          return false;
        for (let i = 0; i < a2.length; i++) {
          if (!compare(a2[i], b2[i], cache))
            return false;
        }
        return true;
      }
      const ak = ownKeys(a2);
      const bk = ownKeys(b2);
      if (ak.length !== bk.length)
        return false;
      const keys = /* @__PURE__ */ new Set([...ak, ...bk]);
      if (keys.size !== ak.length)
        return false;
      for (const key of keys) {
        if (!compare(a2[key], b2[key], cache))
          return false;
      }
      return true;
    }
    function ownKeys(obj) {
      const keys = Object.keys(obj);
      if (!Object.getOwnPropertySymbols)
        return keys;
      if (!Object.getOwnPropertyDescriptor)
        return keys;
      const symbols = Object.getOwnPropertySymbols(obj);
      for (const symbol of symbols) {
        const desc = Object.getOwnPropertyDescriptor(obj, symbol);
        if (desc && desc.enumerable)
          keys.push(symbol);
      }
      return keys;
    }
    function objectString(obj) {
      if (obj === void 0)
        return "[object Undefined]";
      if (obj === null)
        return "[object Null]";
      try {
        return Object.prototype.toString.call(obj);
      } catch (e) {
        return "[object Object]";
      }
    }
    function objectType(obj) {
      return objectString(obj).slice(8, -1);
    }
    function objectName(obj) {
      const type = objectType(obj);
      if (obj == null)
        return type;
      if (type !== "Object" && type !== "Error")
        return type;
      let ctor, name2;
      try {
        ctor = obj.constructor;
      } catch (e) {
        ;
      }
      if (ctor == null)
        return type;
      try {
        name2 = ctor.name;
      } catch (e) {
        return type;
      }
      if (typeof name2 !== "string" || name2.length === 0)
        return type;
      return name2;
    }
    function funcName(func) {
      let name2;
      try {
        name2 = func.name;
      } catch (e) {
        ;
      }
      if (typeof name2 !== "string" || name2.length === 0)
        return "Function";
      return `Function: ${name2}`;
    }
    function isArray(obj) {
      return Array.isArray(obj);
    }
    function isArrayBuffer(obj) {
      return obj instanceof ArrayBuffer;
    }
    function isBuffer(obj) {
      return isObject(obj) && typeof obj.writeUInt32LE === "function" && typeof obj.equals === "function";
    }
    function isDate(obj) {
      return obj instanceof Date;
    }
    function isError(obj) {
      return obj instanceof Error;
    }
    function isMap(obj) {
      return obj instanceof Map;
    }
    function isObject(obj) {
      return obj && typeof obj === "object";
    }
    function isPromise(obj) {
      return obj instanceof Promise;
    }
    function isRegExp(obj) {
      return obj instanceof RegExp;
    }
    function isSet(obj) {
      return obj instanceof Set;
    }
    function isView(obj) {
      return ArrayBuffer.isView(obj);
    }
    function isEncoding(enc) {
      if (typeof enc !== "string")
        return false;
      switch (enc) {
        case "ascii":
        case "binary":
        case "base64":
        case "hex":
        case "latin1":
        case "ucs2":
        case "utf8":
        case "utf16le":
          return true;
      }
      return false;
    }
    function bufferize(actual, expected, enc) {
      if (typeof expected === "string") {
        if (!isBuffer(actual))
          return null;
        const { constructor } = actual;
        if (!constructor || typeof constructor.from !== "function")
          return null;
        if (!isEncoding(enc))
          return null;
        if (enc === "hex" && expected.length & 1)
          return null;
        const raw = constructor.from(expected, enc);
        if (enc === "hex" && raw.length !== expected.length >>> 1)
          return null;
        return raw;
      }
      return expected;
    }
    assert2.AssertionError = AssertionError;
    assert2.assert = assert2;
    assert2.strict = assert2;
    assert2.ok = assert2;
    assert2.equal = equal;
    assert2.notEqual = notEqual;
    assert2.strictEqual = equal;
    assert2.notStrictEqual = notEqual;
    assert2.fail = fail;
    assert2.throws = throws;
    assert2.doesNotThrow = doesNotThrow;
    assert2.rejects = rejects;
    assert2.doesNotReject = doesNotReject;
    assert2.ifError = ifError;
    assert2.deepEqual = deepEqual;
    assert2.notDeepEqual = notDeepEqual;
    assert2.deepStrictEqual = deepEqual;
    assert2.notDeepStrictEqual = notDeepEqual;
    assert2.bufferEqual = bufferEqual;
    assert2.notBufferEqual = notBufferEqual;
    assert2.enforce = enforce;
    assert2.range = range;
    module2.exports = assert2;
  }
});

// node_modules/brq/lib/mime.js
var require_mime = __commonJS({
  "node_modules/brq/lib/mime.js"(exports) {
    "use strict";
    init_cjs_shims();
    var assert2 = require_assert();
    var types = {
      "atom": ["application/atom+xml", true],
      "bin": ["application/octet-stream", false],
      "bmp": ["image/bmp", false],
      "cjs": ["application/javascript", true],
      "css": ["text/css", true],
      "dat": ["application/octet-stream", false],
      "form": ["application/x-www-form-urlencoded", true],
      "gif": ["image/gif", false],
      "gz": ["application/x-gzip", false],
      "htc": ["text/x-component", true],
      "html": ["text/html", true],
      "ico": ["image/x-icon", false],
      "jpg": ["image/jpeg", false],
      "jpeg": ["image/jpeg", false],
      "js": ["application/javascript", true],
      "json": ["application/json", true],
      "log": ["text/plain", true],
      "manifest": ["text/cache-manifest", false],
      "mathml": ["application/mathml+xml", true],
      "md": ["text/plain", true],
      "mjs": ["application/javascript", true],
      "mkv": ["video/x-matroska", false],
      "mml": ["application/mathml+xml", true],
      "mp3": ["audio/mpeg", false],
      "mp4": ["video/mp4", false],
      "mpeg": ["video/mpeg", false],
      "mpg": ["video/mpeg", false],
      "oga": ["audio/ogg", false],
      "ogg": ["application/ogg", false],
      "ogv": ["video/ogg", false],
      "otf": ["font/otf", false],
      "pdf": ["application/pdf", false],
      "png": ["image/png", false],
      "rdf": ["application/rdf+xml", true],
      "rss": ["application/rss+xml", true],
      "svg": ["image/svg+xml", false],
      "swf": ["application/x-shockwave-flash", false],
      "tar": ["application/x-tar", false],
      "torrent": ["application/x-bittorrent", false],
      "txt": ["text/plain", true],
      "ttf": ["font/ttf", false],
      "wav": ["audio/wav", false],
      "webm": ["video/webm", false],
      "woff": ["font/x-woff", false],
      "xhtml": ["application/xhtml+xml", true],
      "xbl": ["application/xml", true],
      "xml": ["application/xml", true],
      "xsl": ["application/xml", true],
      "xslt": ["application/xslt+xml", true],
      "zip": ["application/zip", false]
    };
    var extensions = {
      "application/atom+xml": "atom",
      "application/octet-stream": "bin",
      "image/bmp": "bmp",
      "text/css": "css",
      "application/x-www-form-urlencoded": "form",
      "image/gif": "gif",
      "application/x-gzip": "gz",
      "text/x-component": "htc",
      "text/html": "html",
      "text/xml": "xml",
      "image/x-icon": "ico",
      "image/jpeg": "jpeg",
      "text/javascript": "js",
      "application/javascript": "js",
      "text/x-json": "json",
      "application/json": "json",
      "text/json": "json",
      "text/plain": "txt",
      "text/cache-manifest": "manifest",
      "application/mathml+xml": "mml",
      "video/x-matroska": "mkv",
      "audio/x-matroska": "mkv",
      "audio/mpeg": "mp3",
      "audio/mpa": "mp3",
      "video/mp4": "mp4",
      "video/mpeg": "mpg",
      "audio/ogg": "oga",
      "application/ogg": "ogg",
      "video/ogg": "ogv",
      "font/otf": "otf",
      "application/pdf": "pdf",
      "application/x-pdf": "pdf",
      "image/png": "png",
      "application/rdf+xml": "rdf",
      "application/rss+xml": "rss",
      "image/svg+xml": "svg",
      "application/x-shockwave-flash": "swf",
      "application/x-tar": "tar",
      "application/x-bittorrent": "torrent",
      "font/ttf": "ttf",
      "audio/wav": "wav",
      "audio/wave": "wav",
      "video/webm": "webm",
      "audio/webm": "webm",
      "font/x-woff": "woff",
      "application/xhtml+xml": "xhtml",
      "application/xml": "xsl",
      "application/xslt+xml": "xslt",
      "application/zip": "zip"
    };
    exports.file = function file(path) {
      assert2(typeof path === "string");
      const name2 = path.split("/").pop();
      const parts = name2.split(".");
      if (parts.length < 2)
        return "bin";
      if (parts.length === 2 && parts[0] === "")
        return "txt";
      const ext = parts[parts.length - 1];
      if (types[ext])
        return ext;
      return "bin";
    };
    exports.textual = function textual(ext) {
      const value = types[ext];
      if (!value)
        return false;
      return value[1];
    };
    exports.type = function type(ext) {
      assert2(typeof ext === "string");
      if (ext.indexOf("/") !== -1)
        return ext;
      const value = types[ext];
      if (!value)
        return "application/octet-stream";
      let [name2, text] = value;
      if (text)
        name2 += "; charset=utf-8";
      return name2;
    };
    exports.ext = function ext(type) {
      if (type == null)
        return "bin";
      assert2(typeof type === "string");
      [type] = type.split(";");
      type = type.toLowerCase();
      type = type.trim();
      return extensions[type] || "bin";
    };
  }
});

// node_modules/brq/lib/request.js
var require_request = __commonJS({
  "node_modules/brq/lib/request.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var assert2 = require_assert();
    var { Stream } = require("stream");
    var mime = require_mime();
    var URL3 = null;
    var qs = null;
    var http = null;
    var https = null;
    var StringDecoder = null;
    var RequestOptions = class {
      constructor(options, buffer) {
        this.method = "GET";
        this.ssl = false;
        this.host = "localhost";
        this.port = 80;
        this.path = "/";
        this.query = "";
        this.strictSSL = true;
        this.pool = false;
        this.agent = "brq";
        this.lookup = null;
        this.type = null;
        this.expect = null;
        this.body = null;
        this.username = "";
        this.password = "";
        this.limit = 20 << 20;
        this.maxRedirects = 5;
        this.timeout = 5e3;
        this.buffer = buffer || false;
        this.headers = /* @__PURE__ */ Object.create(null);
        ensureRequires();
        if (options)
          this.fromOptions(options);
      }
      fromOptions(options) {
        if (typeof options === "string")
          options = { url: options };
        if (options.method != null) {
          assert2(typeof options.method === "string");
          this.method = options.method.toUpperCase();
        }
        if (options.uri != null)
          this.navigate(options.uri);
        if (options.url != null)
          this.navigate(options.url);
        if (options.ssl != null) {
          assert2(typeof options.ssl === "boolean");
          this.ssl = options.ssl;
          this.port = 443;
        }
        if (options.host != null) {
          assert2(typeof options.host === "string");
          this.host = options.host;
        }
        if (options.port != null) {
          assert2((options.port & 65535) === options.port);
          assert2(options.port !== 0);
          this.port = options.port;
        }
        if (options.path != null) {
          assert2(typeof options.path === "string");
          this.path = options.path;
        }
        if (options.query != null) {
          if (typeof options.query === "string") {
            this.query = options.query;
          } else {
            assert2(typeof options.query === "object");
            this.query = qs.stringify(options.query);
          }
        }
        if (options.username != null) {
          assert2(typeof options.username === "string");
          this.username = options.username;
        }
        if (options.password != null) {
          assert2(typeof options.password === "string");
          this.password = options.password;
        }
        if (options.strictSSL != null) {
          assert2(typeof options.strictSSL === "boolean");
          this.strictSSL = options.strictSSL;
        }
        if (options.pool != null) {
          assert2(typeof options.pool === "boolean");
          this.pool = options.pool;
        }
        if (options.agent != null) {
          assert2(typeof options.agent === "string");
          this.agent = options.agent;
        }
        if (options.json != null) {
          assert2(typeof options.json === "object");
          this.body = Buffer.from(JSON.stringify(options.json), "utf8");
          this.type = "json";
        }
        if (options.form != null) {
          assert2(typeof options.form === "object");
          this.body = Buffer.from(qs.stringify(options.form), "utf8");
          this.type = "form";
        }
        if (options.type != null) {
          assert2(typeof options.type === "string");
          this.type = options.type;
        }
        if (options.expect != null) {
          assert2(typeof options.expect === "string");
          this.expect = options.expect;
        }
        if (options.body != null) {
          if (typeof options.body === "string") {
            this.body = Buffer.from(options.body, "utf8");
          } else {
            assert2(Buffer.isBuffer(options.body));
            this.body = options.body;
          }
        }
        if (options.timeout != null) {
          assert2(typeof options.timeout === "number");
          this.timeout = options.timeout;
        }
        if (options.limit != null) {
          assert2(typeof options.limit === "number");
          this.limit = options.limit;
        }
        if (options.maxRedirects != null) {
          assert2(typeof options.maxRedirects === "number");
          this.maxRedirects = options.maxRedirects;
        }
        if (options.headers != null) {
          assert2(typeof options.headers === "object");
          this.headers = options.headers;
        }
        if (options.lookup != null) {
          assert2(typeof options.lookup === "function");
          this.lookup = options.lookup;
        }
        return this;
      }
      navigate(url) {
        assert2(typeof url === "string");
        if (url.indexOf("://") === -1)
          url = "http://" + url;
        const data = URL3.parse(url);
        if (data.protocol !== "http:" && data.protocol !== "https:") {
          throw new Error("Malformed URL.");
        }
        if (!data.hostname)
          throw new Error("Malformed URL.");
        this.ssl = data.protocol === "https:";
        this.host = data.hostname;
        this.port = this.ssl ? 443 : 80;
        if (data.port != null) {
          const port = parseInt(data.port, 10);
          assert2((port & 65535) === port);
          this.port = port;
        }
        this.path = data.pathname;
        this.query = data.query;
        if (data.auth) {
          const parts = data.auth.split(":");
          this.username = parts.shift();
          this.password = parts.join(":");
        }
        return this;
      }
      isExpected(type) {
        assert2(typeof type === "string");
        if (!this.expect)
          return true;
        return this.expect === type;
      }
      isOverflow(hdr) {
        if (hdr == null)
          return false;
        assert2(typeof hdr === "string");
        if (!this.buffer)
          return false;
        hdr = hdr.trim();
        if (!/^\d+$/.test(hdr))
          return false;
        hdr = hdr.replace(/^0+/g, "");
        if (hdr.length === 0)
          hdr = "0";
        if (hdr.length > 15)
          return false;
        const length = parseInt(hdr, 10);
        if (!Number.isSafeInteger(length))
          return true;
        return length > this.limit;
      }
      getBackend() {
        ensureRequires(this.ssl);
        return this.ssl ? https : http;
      }
      getHeaders() {
        const headers = /* @__PURE__ */ Object.create(null);
        headers["User-Agent"] = this.agent;
        if (this.type)
          headers["Content-Type"] = mime.type(this.type);
        if (this.body)
          headers["Content-Length"] = this.body.length.toString(10);
        if (this.username || this.password) {
          const auth = `${this.username}:${this.password}`;
          const data = Buffer.from(auth, "utf8");
          headers["Authorization"] = `Basic ${data.toString("base64")}`;
        }
        Object.assign(headers, this.headers);
        return headers;
      }
      redirect(location) {
        assert2(typeof location === "string");
        let url = "";
        if (this.ssl)
          url += "https://";
        else
          url += "http://";
        if (this.host.indexOf(":") !== -1)
          url += `[${this.host}]`;
        else
          url += this.host;
        url += ":" + this.port;
        url += this.path;
        if (this.query)
          url += "?" + this.query;
        this.navigate(URL3.resolve(url, location));
        return this;
      }
      toHTTP() {
        let query = "";
        if (this.query)
          query = "?" + this.query;
        return {
          method: this.method,
          host: this.host,
          port: this.port,
          path: this.path + query,
          headers: this.getHeaders(),
          agent: this.pool ? null : false,
          lookup: this.lookup || void 0,
          rejectUnauthorized: this.strictSSL
        };
      }
    };
    var Request = class extends Stream {
      constructor(options, buffer) {
        super();
        this.options = new RequestOptions(options, buffer);
        this.req = null;
        this.res = null;
        this.statusCode = 0;
        this.headers = /* @__PURE__ */ Object.create(null);
        this.type = "bin";
        this.redirects = 0;
        this.timeout = null;
        this.finished = false;
        this.onResponse = this.handleResponse.bind(this);
        this.onData = this.handleData.bind(this);
        this.onEnd = this.handleEnd.bind(this);
        this.total = 0;
        this.decoder = null;
        this.buf = [];
        this.str = "";
      }
      startTimeout() {
        if (!this.options.timeout)
          return;
        this.timeout = setTimeout(() => {
          this.finish(new Error("Request timed out."));
        }, this.options.timeout);
      }
      stopTimeout() {
        if (this.timeout != null) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
      }
      cleanup() {
        this.stopTimeout();
        if (this.req) {
          this.req.removeListener("response", this.onResponse);
          this.req.removeListener("error", this.onEnd);
          this.req.addListener("error", () => {
          });
        }
        if (this.res) {
          this.res.removeListener("data", this.onData);
          this.res.removeListener("error", this.onEnd);
          this.res.removeListener("end", this.onEnd);
          this.res.addListener("error", () => {
          });
        }
      }
      close() {
        if (this.req) {
          try {
            this.req.abort();
          } catch (e) {
            ;
          }
        }
        if (this.res) {
          try {
            this.res.destroy();
          } catch (e) {
            ;
          }
        }
        this.cleanup();
        this.req = null;
        this.res = null;
      }
      destroy() {
        this.close();
      }
      start() {
        const http2 = this.options.getBackend();
        const options = this.options.toHTTP();
        this.startTimeout();
        this.req = http2.request(options);
        this.res = null;
        if (this.options.body)
          this.req.write(this.options.body);
        this.req.on("response", this.onResponse);
        this.req.on("error", this.onEnd);
      }
      write(data) {
        return this.req.write(data);
      }
      end() {
        return this.req.end();
      }
      finish(err) {
        if (this.finished)
          return;
        this.finished = true;
        if (err) {
          this.destroy();
          this.emit("error", err);
          return;
        }
        this.cleanup();
        this.emit("end");
        this.emit("close");
      }
      handleResponse(res) {
        const { headers } = res;
        const location = headers["location"];
        if (location) {
          if (this.redirects >= this.options.maxRedirects) {
            this.finish(new Error("Too many redirects."));
            return;
          }
          this.redirects += 1;
          this.close();
          try {
            this.options.redirect(location);
          } catch (e) {
            this.finish(e);
            return;
          }
          this.start();
          this.end();
          return;
        }
        const type = mime.ext(headers["content-type"]);
        if (!this.options.isExpected(type)) {
          this.finish(new Error("Wrong content-type for response."));
          return;
        }
        const length = headers["content-length"];
        if (this.options.isOverflow(length)) {
          this.finish(new Error("Response exceeded limit."));
          return;
        }
        this.res = res;
        this.statusCode = res.statusCode;
        this.headers = headers;
        this.type = type;
        this.res.on("data", this.onData);
        this.res.on("error", this.onEnd);
        this.res.on("end", this.onEnd);
        this.emit("headers", headers);
        this.emit("type", type);
        this.emit("response", res);
        if (this.options.buffer) {
          if (mime.textual(this.type)) {
            this.decoder = new StringDecoder("utf8");
            this.str = "";
          } else {
            this.buf = [];
          }
        }
      }
      handleData(data) {
        this.total += data.length;
        this.emit("data", data);
        if (this.options.buffer) {
          if (this.options.limit) {
            if (this.total > this.options.limit) {
              this.finish(new Error("Response exceeded limit."));
              return;
            }
          }
          if (this.decoder) {
            this.str += this.decoder.write(data);
            return;
          }
          this.buf.push(data);
        }
      }
      handleEnd(err) {
        this.finish(err);
      }
      text() {
        if (this.decoder)
          return this.str;
        return this.buffer().toString("utf8");
      }
      buffer() {
        if (this.decoder)
          return Buffer.from(this.str, "utf8");
        return Buffer.concat(this.buf);
      }
      json() {
        const text = this.text().trim();
        if (text.length === 0)
          return /* @__PURE__ */ Object.create(null);
        const body = JSON.parse(text);
        if (!body || typeof body !== "object")
          throw new Error("JSON body is a non-object.");
        return body;
      }
      form() {
        return qs.parse(this.text());
      }
    };
    function request(options) {
      if (typeof options === "string")
        options = { url: options };
      return new Promise((resolve, reject) => {
        const req = new Request(options, true);
        req.on("error", (err) => reject(err));
        req.on("end", () => resolve(req));
        req.start();
        req.end();
      });
    }
    request.stream = function stream(options) {
      const req = new Request(options, false);
      req.start();
      return req;
    };
    function ensureRequires(ssl) {
      if (!URL3)
        URL3 = require("url");
      if (!qs)
        qs = require("querystring");
      if (!http)
        http = require("http");
      if (ssl && !https)
        https = require("https");
      if (!StringDecoder)
        StringDecoder = require("string_decoder").StringDecoder;
    }
    module2.exports = request;
  }
});

// node_modules/brq/lib/brq.js
var require_brq = __commonJS({
  "node_modules/brq/lib/brq.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = require_request();
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module2) {
    init_cjs_shims();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module2) {
    init_cjs_shims();
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    module2.exports = _arrayWithHoles, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module2) {
    init_cjs_shims();
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    module2.exports = _iterableToArrayLimit, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module2) {
    init_cjs_shims();
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    module2.exports = _arrayLikeToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module2) {
    init_cjs_shims();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return arrayLikeToArray(o2, minLen);
      var n = Object.prototype.toString.call(o2).slice(8, -1);
      if (n === "Object" && o2.constructor)
        n = o2.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o2);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return arrayLikeToArray(o2, minLen);
    }
    module2.exports = _unsupportedIterableToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module2) {
    init_cjs_shims();
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module2.exports = _nonIterableRest, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module2) {
    init_cjs_shims();
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    module2.exports = _slicedToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/regenerator-runtime/runtime.js
var require_runtime = __commonJS({
  "node_modules/regenerator-runtime/runtime.js"(exports, module2) {
    init_cjs_shims();
    var runtime = function(exports2) {
      "use strict";
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined2;
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define2(obj, key, value) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        define2({}, "");
      } catch (err) {
        define2 = function(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self2, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        generator._invoke = makeInvokeMethod(innerFn, self2, context);
        return generator;
      }
      exports2.wrap = wrap;
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define2(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        IteratorPrototype = NativeIteratorPrototype;
      }
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define2(Gp, "constructor", GeneratorFunctionPrototype);
      define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define2(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      exports2.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };
      exports2.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define2(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
      exports2.awrap = function(arg) {
        return { __await: arg };
      };
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value2) {
                invoke("next", value2, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
            return PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
        }
        var previousPromise;
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        this._invoke = enqueue;
      }
      defineIteratorMethods(AsyncIterator.prototype);
      define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      });
      exports2.AsyncIterator = AsyncIterator;
      exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0)
          PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      };
      function makeInvokeMethod(innerFn, self2, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
            return doneResult();
          }
          context.method = method;
          context.arg = arg;
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if (context.method === "next") {
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
            state = GenStateExecuting;
            var record = tryCatch(innerFn, self2, context);
            if (record.type === "normal") {
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;
              if (record.arg === ContinueSentinel) {
                continue;
              }
              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined2) {
          context.delegate = null;
          if (context.method === "throw") {
            if (delegate.iterator["return"]) {
              context.method = "return";
              context.arg = undefined2;
              maybeInvokeDelegate(delegate, context);
              if (context.method === "throw") {
                return ContinueSentinel;
              }
            }
            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }
          return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
        if (info.done) {
          context[delegate.resultName] = info.value;
          context.next = delegate.nextLoc;
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined2;
          }
        } else {
          return info;
        }
        context.delegate = null;
        return ContinueSentinel;
      }
      defineIteratorMethods(Gp);
      define2(Gp, toStringTagSymbol, "Generator");
      define2(Gp, iteratorSymbol, function() {
        return this;
      });
      define2(Gp, "toString", function() {
        return "[object Generator]";
      });
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
      exports2.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
        return function next() {
          while (keys.length) {
            var key2 = keys.pop();
            if (key2 in object) {
              next.value = key2;
              next.done = false;
              return next;
            }
          }
          next.done = true;
          return next;
        };
      };
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
          if (typeof iterable.next === "function") {
            return iterable;
          }
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next2.value = iterable[i];
                  next2.done = false;
                  return next2;
                }
              }
              next2.value = undefined2;
              next2.done = true;
              return next2;
            };
            return next.next = next;
          }
        }
        return { next: doneResult };
      }
      exports2.values = values;
      function doneResult() {
        return { value: undefined2, done: true };
      }
      Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          this.sent = this._sent = undefined2;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined2;
          this.tryEntries.forEach(resetTryEntry);
          if (!skipTempReset) {
            for (var name2 in this) {
              if (name2.charAt(0) === "t" && hasOwn.call(this, name2) && !isNaN(+name2.slice(1))) {
                this[name2] = undefined2;
              }
            }
          }
        },
        stop: function() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
          return this.rval;
        },
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
            if (caught) {
              context.method = "next";
              context.arg = undefined2;
            }
            return !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
            if (entry.tryLoc === "root") {
              return handle("end");
            }
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            finallyEntry = null;
          }
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
          return this.complete(record);
        },
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
          return ContinueSentinel;
        },
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          };
          if (this.method === "next") {
            this.arg = undefined2;
          }
          return ContinueSentinel;
        }
      };
      return exports2;
    }(typeof module2 === "object" ? module2.exports : {});
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module2) {
    init_cjs_shims();
    module2.exports = require_runtime();
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module2) {
    init_cjs_shims();
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    module2.exports = _classCallCheck, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports, module2) {
    init_cjs_shims();
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    module2.exports = _createClass, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module2) {
    init_cjs_shims();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module2.exports = _asyncToGenerator, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module2) {
    init_cjs_shims();
    (function(module3, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require("buffer").Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert2(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j2 = 0; i >= 0; i -= 3) {
            w2 = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j2 = 0; i < number.length; i += 3) {
            w2 = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w2 = parseHexByte(number, start, i) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w2 = parseHexByte(number, start, i) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c2 = str.charCodeAt(i) - 48;
          r *= mul;
          if (c2 >= 49) {
            r += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r += c2 - 17 + 10;
          } else {
            r += c2;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w2 = this.words[i];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r = c2.modn(groupBase).toString(base);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b2, i;
        var q2 = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q2.isZero(); i++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[reqLength - i - 1] = b2;
          }
        } else {
          for (i = 0; !q2.isZero(); i++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[i] = b2;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r = 0;
          if (t2 >= 4096) {
            r += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r += 2;
            t2 >>>= 2;
          }
          return r + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0)
          return 26;
        var t2 = w2;
        var r = 0;
        if ((t2 & 8191) === 0) {
          r += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi = this._countBits(w2);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b2 = this._zeroBits(this.words[i]);
          r += b2;
          if (b2 !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or2(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i = 0; i < b2.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b2.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i = 0; i < b2.length; i++) {
          this.words[i] = a2.words[i] ^ b2.words[i];
        }
        if (this !== a2) {
          for (; i < a2.length; i++) {
            this.words[i] = a2.words[i];
          }
        }
        this.length = a2.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i = 0; i < b2.length; i++) {
          r = (a2.words[i] | 0) + (b2.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a2.length; i++) {
          r = (a2.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i < a2.length; i++) {
            this.words[i] = a2.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i = 0; i < b2.length; i++) {
          r = (a2.words[i] | 0) - (b2.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a2.length; i++) {
          r = (a2.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a2.length && a2 !== this) {
          for (; i < a2.length; i++) {
            this.words[i] = a2.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r = a2 * b2;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i = k2 - j2 | 0;
            a2 = self2.words[i] | 0;
            b2 = num.words[j2] | 0;
            r = a2 * b2 + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w0;
        o2[1] = w1;
        o2[2] = w2;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w6;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w12;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i = k2 - j2;
            var a2 = self2.words[i] | 0;
            var b2 = num.words[j2] | 0;
            var r = a2 * b2;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x2, y2) {
        this.x = x2;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t2 = new Array(N2);
        var l2 = BN.prototype._countBits(N2) - 1;
        for (var i = 0; i < N2; i++) {
          t2[i] = this.revBin(i, l2, N2);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x2, l2, N2) {
        if (x2 === 0 || x2 === N2 - 1)
          return x2;
        var rb = 0;
        for (var i = 0; i < l2; i++) {
          rb |= (x2 & 1) << l2 - i - 1;
          x2 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i = 0; i < N2; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N2; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j2 = 0; j2 < s2; j2++) {
              var re = rtws[p2 + j2];
              var ie = itws[p2 + j2];
              var ro = rtws[p2 + j2 + s2];
              var io = itws[p2 + j2 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j2] = re + ro;
              itws[p2 + j2] = ie + io;
              rtws[p2 + j2 + s2] = re - ro;
              itws[p2 + j2 + s2] = ie - io;
              if (j2 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m2) {
        var N2 = Math.max(m2, n) | 1;
        var odd = N2 & 1;
        var i = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1)
          return;
        for (var i = 0; i < N2 / 2; i++) {
          var t2 = rws[i];
          rws[i] = rws[N2 - i - 1];
          rws[N2 - i - 1] = t2;
          t2 = iws[i];
          iws[i] = -iws[N2 - i - 1];
          iws[N2 - i - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i = 0; i < N2 / 2; i++) {
          var w2 = Math.round(ws[2 * i + 1] / N2) * 8192 + Math.round(ws[2 * i] / N2) + carry;
          ws[i] = w2 & 67108863;
          if (w2 < 67108864) {
            carry = 0;
          } else {
            carry = w2 / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N2; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i = 0; i < N2; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x2, y2, out) {
        var N2 = 2 * this.guessLen13b(x2.length, y2.length);
        var rbt = this.makeRBT(N2);
        var _2 = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x2.words, x2.length, rws, N2);
        this.convert13b(y2.words, y2.length, nrws, N2);
        this.transform(rws, _2, rwst, iwst, N2, rbt);
        this.transform(nrws, _2, nrwst, niwst, N2, rbt);
        for (var i = 0; i < N2; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _2, N2, rbt);
        this.conjugate(rmws, _2, N2);
        this.normalize13b(rmws, N2);
        out.negative = x2.negative ^ y2.negative;
        out.length = x2.length + y2.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w2 = (this.words[i] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w2.length; i++, res = res.sqr()) {
          if (w2[i] !== 0)
            break;
        }
        if (++i < w2.length) {
          for (var q2 = res.sqr(); i < w2.length; i++, q2 = q2.sqr()) {
            if (w2[i] === 0)
              continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s2 = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c2 = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c2 | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s2] = this.words[i];
          }
          for (i = 0; i < s2; i++) {
            this.words[i] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r = bits % 26;
        var s2 = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i = 0; i < s2; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h2); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s2 = (bit - r) / 26;
        var q2 = 1 << r;
        if (this.length <= s2)
          return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s2 = (bits - r) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w2;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w2 = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w2 -= right & 67108863;
          carry = (w2 >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w2 & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w2 = (this.words[i + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i + shift] = w2 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w2 = -(this.words[i] | 0) + carry;
          carry = w2 >> 26;
          this.words[i] = w2 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i = 0; i < q2.length; i++) {
            q2.words[i] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj, j2);
          while (a2.negative !== 0) {
            qj--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj;
          }
        }
        if (q2) {
          q2.strip();
        }
        a2.strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p2 * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w2 = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w2 / num | 0;
          carry = w2 % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B2 = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i = 0, im = 1; (x2.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x2.iushrn(i);
            while (i-- > 0) {
              if (A2.isOdd() || B2.isOdd()) {
                A2.iadd(yp);
                B2.isub(xp);
              }
              A2.iushrn(1);
              B2.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B2.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B2);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a2.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a2.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1)
            ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r = a2.cmp(b2);
          if (r < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r = bit % 26;
        var s2 = (bit - r) / 26;
        var q2 = 1 << r;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i = s2; carry !== 0 && i < this.length; i++) {
          var w2 = this.words[i] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i] = w2;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a2 = this.words[i] | 0;
          var b2 = num.words[i] | 0;
          if (a2 === b2)
            continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w2 = num.words[i] | 0;
          lo += w2 * 977;
          num.words[i] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert2(a2.negative === 0, "red works only with positives");
        assert2(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert2((a2.negative | b2.negative) === 0, "red works only with positives");
        assert2(a2.red && a2.red === b2.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime)
          return this.prime.ireduce(a2)._forceRed(this);
        return a2.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero())
          return a2.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert2(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i - 1));
          r = r.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j2 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module2) {
    init_cjs_shims();
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports, module2) {
    init_cjs_shims();
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports, module2) {
    init_cjs_shims();
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module2) {
    init_cjs_shims();
    module2.exports = require("stream");
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v2) {
          var entry = {
            data: v2,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v2) {
          var entry = {
            data: v2,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s2) {
          if (this.length === 0)
            return "";
          var p2 = this.head;
          var ret = "" + p2.data;
          while (p2 = p2.next) {
            ret += s2 + p2.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p2 = this.head;
          var i = 0;
          while (p2) {
            copyBuffer(p2.data, ret, i);
            i += p2.data.length;
            p2 = p2.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p2 = this.head;
          var c2 = 1;
          var ret = p2.data;
          n -= ret.length;
          while (p2 = p2.next) {
            var str = p2.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = str.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p2 = this.head;
          var c2 = 1;
          p2.data.copy(ret);
          n -= p2.data.length;
          while (p2 = p2.next) {
            var buf = p2.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c2;
                if (p2.next)
                  this.head = p2.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p2;
                p2.data = buf.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_2, options) {
          return inspect(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/hash-base/node_modules/readable-stream/errors.js
var require_errors = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/errors.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
      return 'The value "' + value + '" is invalid for option "' + name2 + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name2, " argument")) {
        msg = `The ${name2} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type = includes(name2, ".") ? "property" : "argument";
        msg = `The "${name2}" ${type} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
      return "The " + name2 + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name2) {
      return "Cannot call " + name2 + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var ERR_INVALID_OPT_VALUE = require_errors().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name2 = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name2, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/util-deprecate/node.js
var require_node = __commonJS({
  "node_modules/util-deprecate/node.js"(exports, module2) {
    init_cjs_shims();
    module2.exports = require("util").deprecate;
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node()
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er2) {
        onwrite(stream, er2);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_2) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er2 = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er2);
      process.nextTick(cb, er2);
    }
    function validChunk(stream, state, chunk, cb) {
      var er2;
      if (chunk === null) {
        er2 = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er2) {
        errorOrDestroy(stream, er2);
        process.nextTick(cb, er2);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er2, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er2);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er2);
      } else {
        cb(er2);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er2);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er2) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er2)
        onwriteError(stream, state, sync, er2, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l2 = state.bufferedRequestCount;
        var buffer = new Array(l2);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v2 = 0; v2 < keys.length; v2++) {
        method = keys[v2];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v2;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    init_cjs_shims();
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j2 = buf.length - 1;
      if (j2 < i)
        return 0;
      var nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j2 < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j2 < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j2]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p2) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p2 = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p2);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p2, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p2, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c2 = r.charCodeAt(r.length - 1);
          if (c2 >= 55296 && c2 <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var ERR_STREAM_PREMATURE_CLOSE = require_errors().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ERR_INVALID_ARG_TYPE = require_errors().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er2;
        if (!skipChunkCheck)
          er2 = chunkInvalid(state, chunk);
        if (er2) {
          errorOrDestroy(stream, er2);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er2;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er2;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p2 = this._readableState.buffer.head;
      var content = "";
      while (p2 !== null) {
        content += decoder.write(p2.data);
        p2 = p2.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er2) {
        debug("onerror", er2);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er2);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x2) {
      for (var i = 0, l2 = xs.length; i < l2; i++) {
        if (xs[i] === x2)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = Transform;
    var _require$codes = require_errors().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits()(Transform, Duplex);
    function afterTransform(er2, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er2);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er2, data) {
          done(_this, er2, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er2, data) {
      if (er2)
        return stream.emit("error", er2);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/hash-base/node_modules/readable-stream/readable.js
var require_readable = __commonJS({
  "node_modules/hash-base/node_modules/readable-stream/readable.js"(exports, module2) {
    init_cjs_shims();
    var Stream = require("stream");
    if (process.env.READABLE_STREAM === "disable" && Stream) {
      module2.exports = Stream.Readable;
      Object.assign(module2.exports, Stream);
      module2.exports.Stream = Stream;
    } else {
      exports = module2.exports = require_stream_readable();
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream();
      exports.pipeline = require_pipeline();
    }
  }
});

// node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/hash-base/index.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_readable().Transform;
    var inherits = require_inherits();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized)
        throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data))
        data = Buffer2.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; )
          block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length)
        block[this._blockOffset++] = data[offset++];
      for (var j2 = 0, carry = data.length * 8; carry > 0; ++j2) {
        this._length[j2] += carry;
        carry = this._length[j2] / 4294967296 | 0;
        if (carry > 0)
          this._length[j2] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0)
        digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i)
        this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module2.exports = HashBase;
  }
});

// node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/ripemd160/index.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var Buffer2 = require("buffer").Buffer;
    var inherits = require_inherits();
    var HashBase = require_hash_base();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr2 = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr2 = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j2 = 0; j2 < 16; ++j2)
        words[j2] = this._block.readInt32LE(j2 * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar2 = this._a | 0;
      var br2 = this._b | 0;
      var cr2 = this._c | 0;
      var dr2 = this._d | 0;
      var er2 = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr2;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr2 = fn5(ar2, br2, cr2, dr2, er2, words[zr[i]], hr2[0], sr2[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr2 = fn4(ar2, br2, cr2, dr2, er2, words[zr[i]], hr2[1], sr2[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr2 = fn3(ar2, br2, cr2, dr2, er2, words[zr[i]], hr2[2], sr2[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr2 = fn2(ar2, br2, cr2, dr2, er2, words[zr[i]], hr2[3], sr2[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr2 = fn1(ar2, br2, cr2, dr2, er2, words[zr[i]], hr2[4], sr2[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar2 = er2;
        er2 = dr2;
        dr2 = rotl(cr2, 10);
        cr2 = br2;
        br2 = tr2;
      }
      var t2 = this._b + cl + dr2 | 0;
      this._b = this._c + dl + er2 | 0;
      this._c = this._d + el + ar2 | 0;
      this._d = this._e + al + br2 | 0;
      this._e = this._a + bl + cr2 | 0;
      this._a = t2;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x2, n) {
      return x2 << n | x2 >>> 32 - n;
    }
    function fn1(a2, b2, c2, d2, e, m2, k2, s2) {
      return rotl(a2 + (b2 ^ c2 ^ d2) + m2 + k2 | 0, s2) + e | 0;
    }
    function fn2(a2, b2, c2, d2, e, m2, k2, s2) {
      return rotl(a2 + (b2 & c2 | ~b2 & d2) + m2 + k2 | 0, s2) + e | 0;
    }
    function fn3(a2, b2, c2, d2, e, m2, k2, s2) {
      return rotl(a2 + ((b2 | ~c2) ^ d2) + m2 + k2 | 0, s2) + e | 0;
    }
    function fn4(a2, b2, c2, d2, e, m2, k2, s2) {
      return rotl(a2 + (b2 & d2 | c2 & ~d2) + m2 + k2 | 0, s2) + e | 0;
    }
    function fn5(a2, b2, c2, d2, e, m2, k2, s2) {
      return rotl(a2 + (b2 ^ (c2 | ~d2)) + m2 + k2 | 0, s2) + e | 0;
    }
    module2.exports = RIPEMD160;
  }
});

// node_modules/@ensdomains/address-encoder/lib/index.module.js
var index_module_exports = {};
__export(index_module_exports, {
  formats: () => br,
  formatsByCoinType: () => Er,
  formatsByName: () => mr
});
function o(t2) {
  var r = t2 >> 25;
  return (33554431 & t2) << 5 ^ 996825010 & -(r >> 0 & 1) ^ 642813549 & -(r >> 1 & 1) ^ 513874426 & -(r >> 2 & 1) ^ 1027748829 & -(r >> 3 & 1) ^ 705979059 & -(r >> 4 & 1);
}
function f(t2) {
  for (var r = 1, e = 0; e < t2.length; ++e) {
    var n = t2.charCodeAt(e);
    if (n < 33 || n > 126)
      throw new Error("Invalid prefix (" + t2 + ")");
    r = o(r) ^ n >> 5;
  }
  for (r = o(r), e = 0; e < t2.length; ++e) {
    var i = t2.charCodeAt(e);
    r = o(r) ^ 31 & i;
  }
  return r;
}
function u(t2, r, e, n) {
  for (var i = 0, o2 = 0, f2 = (1 << e) - 1, u2 = [], a2 = 0; a2 < t2.length; ++a2)
    for (i = i << r | t2[a2], o2 += r; o2 >= e; )
      u2.push(i >> (o2 -= e) & f2);
  if (n)
    o2 > 0 && u2.push(i << e - o2 & f2);
  else {
    if (o2 >= r)
      throw new Error("Excess padding");
    if (i << e - o2 & f2)
      throw new Error("Non-zero padding");
  }
  return u2;
}
function l(t2, r, e) {
  return t2(e = { path: r, exports: {}, require: function(t3, r2) {
    return function() {
      throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
    }();
  } }, e.exports), e.exports;
}
function y(t2, r, e) {
  var n = t2[r] + t2[e], i = t2[r + 1] + t2[e + 1];
  n >= 4294967296 && i++, t2[r] = n, t2[r + 1] = i;
}
function v(t2, r, e, n) {
  var i = t2[r] + e;
  e < 0 && (i += 4294967296);
  var o2 = t2[r + 1] + n;
  i >= 4294967296 && o2++, t2[r] = i, t2[r + 1] = o2;
}
function w(t2, r) {
  return t2[r] ^ t2[r + 1] << 8 ^ t2[r + 2] << 16 ^ t2[r + 3] << 24;
}
function b(t2, r, e, n, i, o2) {
  var f2 = A[i], u2 = A[i + 1], a2 = A[o2], s2 = A[o2 + 1];
  y(B, t2, r), v(B, t2, f2, u2);
  var h2 = B[n] ^ B[t2], c2 = B[n + 1] ^ B[t2 + 1];
  B[n] = c2, B[n + 1] = h2, y(B, e, n), B[r] = (h2 = B[r] ^ B[e]) >>> 24 ^ (c2 = B[r + 1] ^ B[e + 1]) << 8, B[r + 1] = c2 >>> 24 ^ h2 << 8, y(B, t2, r), v(B, t2, a2, s2), B[n] = (h2 = B[n] ^ B[t2]) >>> 16 ^ (c2 = B[n + 1] ^ B[t2 + 1]) << 16, B[n + 1] = c2 >>> 16 ^ h2 << 16, y(B, e, n), B[r] = (c2 = B[r + 1] ^ B[e + 1]) >>> 31 ^ (h2 = B[r] ^ B[e]) << 1, B[r + 1] = h2 >>> 31 ^ c2 << 1;
}
function U(t2, r) {
  var e = 0;
  for (e = 0; e < 16; e++)
    B[e] = t2.h[e], B[e + 16] = m[e];
  for (B[24] = B[24] ^ t2.t, B[25] = B[25] ^ t2.t / 4294967296, r && (B[28] = ~B[28], B[29] = ~B[29]), e = 0; e < 32; e++)
    A[e] = w(t2.b, 4 * e);
  for (e = 0; e < 12; e++)
    b(0, 8, 16, 24, E[16 * e + 0], E[16 * e + 1]), b(2, 10, 18, 26, E[16 * e + 2], E[16 * e + 3]), b(4, 12, 20, 28, E[16 * e + 4], E[16 * e + 5]), b(6, 14, 22, 30, E[16 * e + 6], E[16 * e + 7]), b(0, 10, 20, 30, E[16 * e + 8], E[16 * e + 9]), b(2, 12, 22, 24, E[16 * e + 10], E[16 * e + 11]), b(4, 14, 16, 26, E[16 * e + 12], E[16 * e + 13]), b(6, 8, 18, 28, E[16 * e + 14], E[16 * e + 15]);
  for (e = 0; e < 16; e++)
    t2.h[e] = t2.h[e] ^ B[e] ^ B[e + 16];
}
function I(t2, r) {
  if (t2 === 0 || t2 > 64)
    throw new Error("Illegal output length, expected 0 < length <= 64");
  if (r && r.length > 64)
    throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
  for (var e = { b: new Uint8Array(128), h: new Uint32Array(16), t: 0, c: 0, outlen: t2 }, n = 0; n < 16; n++)
    e.h[n] = m[n];
  return e.h[0] ^= 16842752 ^ (r ? r.length : 0) << 8 ^ t2, r && (_(e, r), e.c = 128), e;
}
function _(t2, r) {
  for (var e = 0; e < r.length; e++)
    t2.c === 128 && (t2.t += t2.c, U(t2, false), t2.c = 0), t2.b[t2.c++] = r[e];
}
function S(t2) {
  for (t2.t += t2.c; t2.c < 128; )
    t2.b[t2.c++] = 0;
  U(t2, true);
  for (var r = new Uint8Array(t2.outlen), e = 0; e < t2.outlen; e++)
    r[e] = t2.h[e >> 2] >> 8 * (3 & e);
  return r;
}
function x(t2, r, e) {
  e = e || 64, t2 = d(t2);
  var n = I(e, r);
  return _(n, t2), S(n);
}
function O(t2, r) {
  return t2[r] ^ t2[r + 1] << 8 ^ t2[r + 2] << 16 ^ t2[r + 3] << 24;
}
function C(t2, r, e, n, i, o2) {
  P[t2] = P[t2] + P[r] + i, P[n] = M(P[n] ^ P[t2], 16), P[e] = P[e] + P[n], P[r] = M(P[r] ^ P[e], 12), P[t2] = P[t2] + P[r] + o2, P[n] = M(P[n] ^ P[t2], 8), P[e] = P[e] + P[n], P[r] = M(P[r] ^ P[e], 7);
}
function M(t2, r) {
  return t2 >>> r ^ t2 << 32 - r;
}
function R(t2, r) {
  var e = 0;
  for (e = 0; e < 8; e++)
    P[e] = t2.h[e], P[e + 8] = T[e];
  for (P[12] ^= t2.t, P[13] ^= t2.t / 4294967296, r && (P[14] = ~P[14]), e = 0; e < 16; e++)
    z[e] = O(t2.b, 4 * e);
  for (e = 0; e < 10; e++)
    C(0, 4, 8, 12, z[L[16 * e + 0]], z[L[16 * e + 1]]), C(1, 5, 9, 13, z[L[16 * e + 2]], z[L[16 * e + 3]]), C(2, 6, 10, 14, z[L[16 * e + 4]], z[L[16 * e + 5]]), C(3, 7, 11, 15, z[L[16 * e + 6]], z[L[16 * e + 7]]), C(0, 5, 10, 15, z[L[16 * e + 8]], z[L[16 * e + 9]]), C(1, 6, 11, 12, z[L[16 * e + 10]], z[L[16 * e + 11]]), C(2, 7, 8, 13, z[L[16 * e + 12]], z[L[16 * e + 13]]), C(3, 4, 9, 14, z[L[16 * e + 14]], z[L[16 * e + 15]]);
  for (e = 0; e < 8; e++)
    t2.h[e] ^= P[e] ^ P[e + 8];
}
function N(t2, r) {
  if (!(t2 > 0 && t2 <= 32))
    throw new Error("Incorrect output length, should be in [1, 32]");
  var e = r ? r.length : 0;
  if (r && !(e > 0 && e <= 32))
    throw new Error("Incorrect key length, should be in [1, 32]");
  var n = { h: new Uint32Array(T), b: new Uint32Array(64), c: 0, t: 0, outlen: t2 };
  return n.h[0] ^= 16842752 ^ e << 8 ^ t2, e > 0 && (q(n, r), n.c = 64), n;
}
function q(t2, r) {
  for (var e = 0; e < r.length; e++)
    t2.c === 64 && (t2.t += t2.c, R(t2, false), t2.c = 0), t2.b[t2.c++] = r[e];
}
function j(t2) {
  for (t2.t += t2.c; t2.c < 64; )
    t2.b[t2.c++] = 0;
  R(t2, true);
  for (var r = new Uint8Array(t2.outlen), e = 0; e < t2.outlen; e++)
    r[e] = t2.h[e >> 2] >> 8 * (3 & e) & 255;
  return r;
}
function D(t2, r, e) {
  e = e || 32, t2 = d(t2);
  var n = N(e, r);
  return q(n, t2), j(n);
}
function J(t2, r, e) {
  for (var n, i = [], o2 = r; o2 < e; o2 += 3)
    i.push(Z[(n = (t2[o2] << 16 & 16711680) + (t2[o2 + 1] << 8 & 65280) + (255 & t2[o2 + 2])) >> 18 & 63] + Z[n >> 12 & 63] + Z[n >> 6 & 63] + Z[63 & n]);
  return i.join("");
}
function It(t2, r) {
  return t2 << r | t2 >>> 32 - r;
}
function _t(t2, r, e, n, i, o2, f2, u2) {
  return It(t2 + (r ^ e ^ n) + o2 + f2 | 0, u2) + i | 0;
}
function St(t2, r, e, n, i, o2, f2, u2) {
  return It(t2 + (r & e | ~r & n) + o2 + f2 | 0, u2) + i | 0;
}
function xt(t2, r, e, n, i, o2, f2, u2) {
  return It(t2 + ((r | ~e) ^ n) + o2 + f2 | 0, u2) + i | 0;
}
function kt(t2, r, e, n, i, o2, f2, u2) {
  return It(t2 + (r & n | e & ~n) + o2 + f2 | 0, u2) + i | 0;
}
function Ot(t2, r, e, n, i, o2, f2, u2) {
  return It(t2 + (r ^ (e | ~n)) + o2 + f2 | 0, u2) + i | 0;
}
function Ct(t2, r) {
  return t2[r >>>= 0] | t2[r + 1] << 8 | t2[r + 2] << 16 | t2[r + 3] << 24;
}
function Mt(t2, r, e) {
  return t2[3 + (e >>>= 0)] = (r = +r) >>> 24, t2[e + 2] = r >>> 16, t2[e + 1] = r >>> 8, t2[e] = 255 & r, e + 4;
}
function Tt(t2, r, e) {
  return t2[e >>>= 0] = 255 & (r = +r), t2[e + 1] = r >>> 8, t2[e + 2] = r >>> 16, t2[e + 3] = r >>> 24, e + 4;
}
function Lt(t2) {
  return typeof Uint32Array != "undefined" ? new Uint32Array(t2) : t2;
}
function Pt(t2) {
  return typeof Uint8Array != "undefined" ? new Uint8Array(t2) : t2;
}
function zt(t2) {
  return typeof Uint8Array != "undefined" ? new Uint8Array(t2) : new Array(t2);
}
function Ht(t2) {
  var r = Dt.indexOf(t2);
  if (r === -1)
    throw new Error("Invalid character found: " + t2);
  return r;
}
function Vt(t2) {
  return F.blake2b(t2, null, 4);
}
function Yt(t2, r) {
  if (!r || !r.str)
    throw Error("Invalid address");
  var e = "", n = r.payload(), i = r.protocol();
  switch (i) {
    case 0:
      var o2 = function(t3) {
        return function(t4) {
          for (var r2, e2 = new Zt(0), n2 = 0; r2 = t4.read(1)[0], e2.ior(new Zt(127 & r2).shln(n2)), r2 >> 7 != 0; )
            n2 += 7;
          return e2;
        }(new Kt(t3)).toString();
      }(n);
      e = t2 + String(i) + o2;
      break;
    default:
      var f2 = Buffer.from([i]), u2 = Vt(Buffer.concat([f2, n])), a2 = Buffer.concat([n, Buffer.from(u2)]), s2 = jt.hex2a(a2.toString("hex")), h2 = jt.b32encode(s2).replace(/=/g, "").toLowerCase();
      e = String(t2) + String(i) + h2;
  }
  return e;
}
function Wt(t2, r) {
  var e = Buffer.from([t2]), n = Buffer.concat([e, r]);
  return new Xt(n);
}
function Jt(t2, r) {
  return function(e) {
    var n;
    switch (e.readUInt8(0)) {
      case 118:
        if (e.readUInt8(1) !== 169 || e.readUInt8(e.length - 2) !== 136 || e.readUInt8(e.length - 1) !== 172)
          throw Error("Unrecognised address format");
        return n = Buffer.concat([Buffer.from(t2), e.slice(3, 3 + e.readUInt8(2))]), jt.bs58Encode(n);
      case 169:
        if (e.readUInt8(e.length - 1) !== 135)
          throw Error("Unrecognised address format");
        return n = Buffer.concat([Buffer.from(r), e.slice(2, 2 + e.readUInt8(1))]), jt.bs58Encode(n);
      default:
        throw Error("Unrecognised address format");
    }
  };
}
function Gt(t2, r) {
  return function(e) {
    var n = jt.bs58Decode(e), i = function(t3) {
      return t3.every(function(t4, r2) {
        return r2 < n.length && t4 === n.readUInt8(r2);
      });
    };
    if (t2.some(i))
      return Buffer.concat([Buffer.from([118, 169, 20]), n.slice(t2[0].length), Buffer.from([136, 172])]);
    if (r.some(i))
      return Buffer.concat([Buffer.from([169, 20]), n.slice(r[0].length), Buffer.from([135])]);
    throw Error("Unrecognised address format");
  };
}
function $t(t2, r, e) {
  var n = function(t3) {
    return function(r2) {
      var e2 = r2.readUInt8(0);
      if (e2 >= 81 && e2 <= 96)
        e2 -= 80;
      else if (e2 !== 0)
        throw Error("Unrecognised address format");
      var n2 = [e2].concat(h(r2.slice(2, r2.readUInt8(1) + 2)));
      return s(t3, n2);
    };
  }(t2), i = Jt(r, e);
  return function(t3) {
    try {
      return i(t3);
    } catch (r2) {
      return n(t3);
    }
  };
}
function tr(t2, r, e) {
  var n = function(t3) {
    return function(r2) {
      var e2 = a(r2), n2 = e2.words;
      if (e2.prefix !== t3)
        throw Error("Unexpected human-readable part in bech32 encoded address");
      var i2 = c(n2.slice(1)), o2 = n2[0];
      return o2 > 0 && (o2 += 80), Buffer.concat([Buffer.from([o2, i2.length]), Buffer.from(i2)]);
    };
  }(t2), i = Gt(r, e);
  return function(r2) {
    return r2.toLowerCase().startsWith(t2 + "1") ? n(r2) : i(r2);
  };
}
function er(t2) {
  return function(r) {
    return jt.toChecksumAddress(r.toString("hex"), t2 || null);
  };
}
function nr(t2) {
  return function(r) {
    var e = jt.stripHexPrefix(r);
    if (!jt.isValidChecksumAddress(r, t2 || null) && e !== e.toLowerCase() && e !== e.toUpperCase())
      throw Error("Invalid address checksum");
    return Buffer.from(jt.stripHexPrefix(r), "hex");
  };
}
function or(t2) {
  return function(r) {
    return s(t2, h(r));
  };
}
function fr(t2) {
  return function(r) {
    var e = a(r), n = e.words;
    if (e.prefix !== t2)
      throw Error("Unrecognised address format");
    return Buffer.from(c(n));
  };
}
function ar(t2) {
  return new Buffer(jt.ss58Decode(t2));
}
function sr(t2) {
  var r = new (require_ripemd160())().update(t2).digest();
  return "STM" + ot.encode(Buffer.concat([t2, r.slice(0, 4)]));
}
function hr(t2) {
  var r = require_ripemd160();
  if (t2.slice(0, 3) !== "STM")
    throw Error("Unrecognised address format");
  t2 = t2.slice(3);
  var e = ot.decode(t2), n = e.slice(-4), i = e.slice(0, -4);
  if (!new r().update(i).digest().slice(0, 4).equals(n))
    throw Error("Invalid checksum");
  return Buffer.from(i);
}
function cr(r) {
  return (0, import_crypto.createHash)("SHA512-256").update(r).digest("hex").substr(-8);
}
var import_crypto, i, r, e, n, a, s, h, c, p, d, g, m, E, B, A, k, T, L, P, z, H, F, Z, K, X, V, Y, W, G, Q, $, tt, rt, et, nt, it, ot, ft, ut, at, st, ht, ct, lt, pt, dt, gt, yt, vt, wt, bt, mt, Et, Bt, At, Ut, Rt, Nt, qt, jt, Dt, Ft, Zt, Kt, Xt, Qt, rr, ir, ur, lr, pr, dr, gr, yr, vr, wr, br, mr, Er;
var init_index_module = __esm({
  "node_modules/@ensdomains/address-encoder/lib/index.module.js"() {
    init_cjs_shims();
    import_crypto = require("crypto");
    for (r = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", e = {}, n = 0; n < r.length; n++) {
      i = r.charAt(n);
      if (e[i] !== void 0)
        throw new TypeError(i + " is ambiguous");
      e[i] = n;
    }
    a = function(t2, r) {
      if (r = r || 90, t2.length < 8)
        throw new TypeError(t2 + " too short");
      if (t2.length > r)
        throw new TypeError("Exceeds length limit");
      var n = t2.toLowerCase(), i = t2.toUpperCase();
      if (t2 !== n && t2 !== i)
        throw new Error("Mixed-case string " + t2);
      var u2 = (t2 = n).lastIndexOf("1");
      if (u2 === -1)
        throw new Error("No separator character for " + t2);
      if (u2 === 0)
        throw new Error("Missing prefix for " + t2);
      var a2 = t2.slice(0, u2), s2 = t2.slice(u2 + 1);
      if (s2.length < 6)
        throw new Error("Data too short");
      for (var h2 = f(a2), c2 = [], l2 = 0; l2 < s2.length; ++l2) {
        var p2 = s2.charAt(l2), d2 = e[p2];
        if (d2 === void 0)
          throw new Error("Unknown character " + p2);
        h2 = o(h2) ^ d2, l2 + 6 >= s2.length || c2.push(d2);
      }
      if (h2 !== 1)
        throw new Error("Invalid checksum for " + t2);
      return { prefix: a2, words: c2 };
    };
    s = function(t2, e, n) {
      if (t2.length + 7 + e.length > (n = n || 90))
        throw new TypeError("Exceeds length limit");
      for (var i = f(t2 = t2.toLowerCase()), u2 = t2 + "1", a2 = 0; a2 < e.length; ++a2) {
        var s2 = e[a2];
        if (s2 >> 5 != 0)
          throw new Error("Non 5-bit word");
        i = o(i) ^ s2, u2 += r.charAt(s2);
      }
      for (a2 = 0; a2 < 6; ++a2)
        i = o(i);
      for (i ^= 1, a2 = 0; a2 < 6; ++a2)
        u2 += r.charAt(i >> 5 * (5 - a2) & 31);
      return u2;
    };
    h = function(t2) {
      return u(t2, 8, 5, true);
    };
    c = function(t2) {
      return u(t2, 5, 8, false);
    };
    p = l(function(t2) {
      var r = function(t3) {
        var e = 1e7, n = 9007199254740992, i = h2(n), o2 = Math.log(n);
        function f2(t4, r2) {
          return t4 === void 0 ? f2[0] : r2 !== void 0 ? +r2 == 10 ? K(t4) : q2(t4, r2) : K(t4);
        }
        function u2(t4, r2) {
          this.value = t4, this.sign = r2, this.isSmall = false;
        }
        function a2(t4) {
          this.value = t4, this.sign = t4 < 0, this.isSmall = true;
        }
        function s2(t4) {
          return -n < t4 && t4 < n;
        }
        function h2(t4) {
          return t4 < 1e7 ? [t4] : t4 < 1e14 ? [t4 % 1e7, Math.floor(t4 / 1e7)] : [t4 % 1e7, Math.floor(t4 / 1e7) % 1e7, Math.floor(t4 / 1e14)];
        }
        function c2(t4) {
          l2(t4);
          var r2 = t4.length;
          if (r2 < 4 && S2(t4, i) < 0)
            switch (r2) {
              case 0:
                return 0;
              case 1:
                return t4[0];
              case 2:
                return t4[0] + t4[1] * e;
              default:
                return t4[0] + (t4[1] + t4[2] * e) * e;
            }
          return t4;
        }
        function l2(t4) {
          for (var r2 = t4.length; t4[--r2] === 0; )
            ;
          t4.length = r2 + 1;
        }
        function p2(t4) {
          for (var r2 = new Array(t4), e2 = -1; ++e2 < t4; )
            r2[e2] = 0;
          return r2;
        }
        function d2(t4) {
          return t4 > 0 ? Math.floor(t4) : Math.ceil(t4);
        }
        function g2(t4, r2) {
          var n2, i2, o3 = t4.length, f3 = r2.length, u3 = new Array(o3), a3 = 0, s3 = e;
          for (i2 = 0; i2 < f3; i2++)
            u3[i2] = (n2 = t4[i2] + r2[i2] + a3) - (a3 = n2 >= s3 ? 1 : 0) * s3;
          for (; i2 < o3; )
            n2 = t4[i2] + a3, u3[i2++] = n2 - (a3 = n2 === s3 ? 1 : 0) * s3;
          return a3 > 0 && u3.push(a3), u3;
        }
        function y2(t4, r2) {
          return t4.length >= r2.length ? g2(t4, r2) : g2(r2, t4);
        }
        function v2(t4, r2) {
          var n2, i2, o3 = t4.length, f3 = new Array(o3), u3 = e;
          for (i2 = 0; i2 < o3; i2++)
            n2 = t4[i2] - u3 + r2, r2 = Math.floor(n2 / u3), f3[i2] = n2 - r2 * u3, r2 += 1;
          for (; r2 > 0; )
            f3[i2++] = r2 % u3, r2 = Math.floor(r2 / u3);
          return f3;
        }
        function w2(t4, r2) {
          var e2, n2, i2 = t4.length, o3 = r2.length, f3 = new Array(i2), u3 = 0;
          for (e2 = 0; e2 < o3; e2++)
            (n2 = t4[e2] - u3 - r2[e2]) < 0 ? (n2 += 1e7, u3 = 1) : u3 = 0, f3[e2] = n2;
          for (e2 = o3; e2 < i2; e2++) {
            if (!((n2 = t4[e2] - u3) < 0)) {
              f3[e2++] = n2;
              break;
            }
            f3[e2] = n2 += 1e7;
          }
          for (; e2 < i2; e2++)
            f3[e2] = t4[e2];
          return l2(f3), f3;
        }
        function b2(t4, r2, e2) {
          var n2, i2, o3 = t4.length, f3 = new Array(o3), s3 = -r2;
          for (n2 = 0; n2 < o3; n2++)
            i2 = t4[n2] + s3, s3 = Math.floor(i2 / 1e7), f3[n2] = (i2 %= 1e7) < 0 ? i2 + 1e7 : i2;
          return typeof (f3 = c2(f3)) == "number" ? (e2 && (f3 = -f3), new a2(f3)) : new u2(f3, e2);
        }
        function m2(t4, r2) {
          var e2, n2, i2, o3, f3 = t4.length, u3 = r2.length, a3 = p2(f3 + u3);
          for (i2 = 0; i2 < f3; ++i2) {
            o3 = t4[i2];
            for (var s3 = 0; s3 < u3; ++s3)
              e2 = o3 * r2[s3] + a3[i2 + s3], n2 = Math.floor(e2 / 1e7), a3[i2 + s3] = e2 - 1e7 * n2, a3[i2 + s3 + 1] += n2;
          }
          return l2(a3), a3;
        }
        function E2(t4, r2) {
          var n2, i2, o3 = t4.length, f3 = new Array(o3), u3 = e, a3 = 0;
          for (i2 = 0; i2 < o3; i2++)
            n2 = t4[i2] * r2 + a3, a3 = Math.floor(n2 / u3), f3[i2] = n2 - a3 * u3;
          for (; a3 > 0; )
            f3[i2++] = a3 % u3, a3 = Math.floor(a3 / u3);
          return f3;
        }
        function B2(t4, r2) {
          for (var e2 = []; r2-- > 0; )
            e2.push(0);
          return e2.concat(t4);
        }
        function A2(t4, r2, n2) {
          return new u2(t4 < e ? E2(r2, t4) : m2(r2, h2(t4)), n2);
        }
        function U2(t4) {
          var r2, e2, n2, i2, o3 = t4.length, f3 = p2(o3 + o3);
          for (n2 = 0; n2 < o3; n2++) {
            e2 = 0 - (i2 = t4[n2]) * i2;
            for (var u3 = n2; u3 < o3; u3++)
              r2 = i2 * t4[u3] * 2 + f3[n2 + u3] + e2, e2 = Math.floor(r2 / 1e7), f3[n2 + u3] = r2 - 1e7 * e2;
            f3[n2 + o3] = e2;
          }
          return l2(f3), f3;
        }
        function I2(t4, r2) {
          var e2, n2, i2, o3, f3 = t4.length, u3 = p2(f3);
          for (i2 = 0, e2 = f3 - 1; e2 >= 0; --e2)
            i2 = (o3 = 1e7 * i2 + t4[e2]) - (n2 = d2(o3 / r2)) * r2, u3[e2] = 0 | n2;
          return [u3, 0 | i2];
        }
        function _2(t4, r2) {
          var n2, i2, o3 = K(r2), s3 = t4.value, g3 = o3.value;
          if (g3 === 0)
            throw new Error("Cannot divide by zero");
          if (t4.isSmall)
            return o3.isSmall ? [new a2(d2(s3 / g3)), new a2(s3 % g3)] : [f2[0], t4];
          if (o3.isSmall) {
            if (g3 === 1)
              return [t4, f2[0]];
            if (g3 == -1)
              return [t4.negate(), f2[0]];
            var y3 = Math.abs(g3);
            if (y3 < e) {
              i2 = c2((n2 = I2(s3, y3))[0]);
              var v3 = n2[1];
              return t4.sign && (v3 = -v3), typeof i2 == "number" ? (t4.sign !== o3.sign && (i2 = -i2), [new a2(i2), new a2(v3)]) : [new u2(i2, t4.sign !== o3.sign), new a2(v3)];
            }
            g3 = h2(y3);
          }
          var b3 = S2(s3, g3);
          if (b3 === -1)
            return [f2[0], t4];
          if (b3 === 0)
            return [f2[t4.sign === o3.sign ? 1 : -1], f2[0]];
          n2 = s3.length + g3.length <= 200 ? function(t5, r3) {
            var n3, i3, o4, f3, u3, a3, s4, h3 = t5.length, l3 = r3.length, d3 = e, g4 = p2(r3.length), y4 = r3[l3 - 1], v4 = Math.ceil(d3 / (2 * y4)), w3 = E2(t5, v4), b4 = E2(r3, v4);
            for (w3.length <= h3 && w3.push(0), b4.push(0), y4 = b4[l3 - 1], i3 = h3 - l3; i3 >= 0; i3--) {
              for (n3 = d3 - 1, w3[i3 + l3] !== y4 && (n3 = Math.floor((w3[i3 + l3] * d3 + w3[i3 + l3 - 1]) / y4)), o4 = 0, f3 = 0, a3 = b4.length, u3 = 0; u3 < a3; u3++)
                o4 += n3 * b4[u3], s4 = Math.floor(o4 / d3), f3 += w3[i3 + u3] - (o4 - s4 * d3), o4 = s4, f3 < 0 ? (w3[i3 + u3] = f3 + d3, f3 = -1) : (w3[i3 + u3] = f3, f3 = 0);
              for (; f3 !== 0; ) {
                for (n3 -= 1, o4 = 0, u3 = 0; u3 < a3; u3++)
                  (o4 += w3[i3 + u3] - d3 + b4[u3]) < 0 ? (w3[i3 + u3] = o4 + d3, o4 = 0) : (w3[i3 + u3] = o4, o4 = 1);
                f3 += o4;
              }
              g4[i3] = n3;
            }
            return w3 = I2(w3, v4)[0], [c2(g4), c2(w3)];
          }(s3, g3) : function(t5, r3) {
            for (var e2, n3, i3, o4, f3 = t5.length, u3 = r3.length, a3 = [], s4 = []; f3; )
              if (s4.unshift(t5[--f3]), l2(s4), S2(s4, r3) < 0)
                a3.push(0);
              else {
                i3 = 1e7 * s4[(n3 = s4.length) - 1] + s4[n3 - 2], n3 > u3 && (i3 = 1e7 * (i3 + 1)), e2 = Math.ceil(i3 / (1e7 * r3[u3 - 1] + r3[u3 - 2]));
                do {
                  if (S2(o4 = E2(r3, e2), s4) <= 0)
                    break;
                  e2--;
                } while (e2);
                a3.push(e2), s4 = w2(s4, o4);
              }
            return a3.reverse(), [c2(a3), c2(s4)];
          }(s3, g3);
          var m3 = t4.sign !== o3.sign, B3 = n2[1], A3 = t4.sign;
          return typeof (i2 = n2[0]) == "number" ? (m3 && (i2 = -i2), i2 = new a2(i2)) : i2 = new u2(i2, m3), typeof B3 == "number" ? (A3 && (B3 = -B3), B3 = new a2(B3)) : B3 = new u2(B3, A3), [i2, B3];
        }
        function S2(t4, r2) {
          if (t4.length !== r2.length)
            return t4.length > r2.length ? 1 : -1;
          for (var e2 = t4.length - 1; e2 >= 0; e2--)
            if (t4[e2] !== r2[e2])
              return t4[e2] > r2[e2] ? 1 : -1;
          return 0;
        }
        function x2(t4) {
          var r2 = t4.abs();
          return !r2.isUnit() && (!!(r2.equals(2) || r2.equals(3) || r2.equals(5)) || !(r2.isEven() || r2.isDivisibleBy(3) || r2.isDivisibleBy(5)) && (!!r2.lesser(49) || void 0));
        }
        function k2(t4, e2) {
          for (var n2, i2, o3, u3 = t4.prev(), a3 = u3, s3 = 0; a3.isEven(); )
            a3 = a3.divide(2), s3++;
          t:
            for (i2 = 0; i2 < e2.length; i2++)
              if (!t4.lesser(e2[i2]) && !(o3 = r(e2[i2]).modPow(a3, t4)).equals(f2[1]) && !o3.equals(u3)) {
                for (n2 = s3 - 1; n2 != 0; n2--) {
                  if ((o3 = o3.square().mod(t4)).isUnit())
                    return false;
                  if (o3.equals(u3))
                    continue t;
                }
                return false;
              }
          return true;
        }
        u2.prototype = Object.create(f2.prototype), a2.prototype = Object.create(f2.prototype), u2.prototype.add = function(t4) {
          var r2 = K(t4);
          if (this.sign !== r2.sign)
            return this.subtract(r2.negate());
          var e2 = this.value, n2 = r2.value;
          return new u2(r2.isSmall ? v2(e2, Math.abs(n2)) : y2(e2, n2), this.sign);
        }, u2.prototype.plus = u2.prototype.add, a2.prototype.add = function(t4) {
          var r2 = K(t4), e2 = this.value;
          if (e2 < 0 !== r2.sign)
            return this.subtract(r2.negate());
          var n2 = r2.value;
          if (r2.isSmall) {
            if (s2(e2 + n2))
              return new a2(e2 + n2);
            n2 = h2(Math.abs(n2));
          }
          return new u2(v2(n2, Math.abs(e2)), e2 < 0);
        }, a2.prototype.plus = a2.prototype.add, u2.prototype.subtract = function(t4) {
          var r2 = K(t4);
          if (this.sign !== r2.sign)
            return this.add(r2.negate());
          var e2 = this.value, n2 = r2.value;
          return r2.isSmall ? b2(e2, Math.abs(n2), this.sign) : function(t5, r3, e3) {
            var n3;
            return S2(t5, r3) >= 0 ? n3 = w2(t5, r3) : (n3 = w2(r3, t5), e3 = !e3), typeof (n3 = c2(n3)) == "number" ? (e3 && (n3 = -n3), new a2(n3)) : new u2(n3, e3);
          }(e2, n2, this.sign);
        }, u2.prototype.minus = u2.prototype.subtract, a2.prototype.subtract = function(t4) {
          var r2 = K(t4), e2 = this.value;
          if (e2 < 0 !== r2.sign)
            return this.add(r2.negate());
          var n2 = r2.value;
          return r2.isSmall ? new a2(e2 - n2) : b2(n2, Math.abs(e2), e2 >= 0);
        }, a2.prototype.minus = a2.prototype.subtract, u2.prototype.negate = function() {
          return new u2(this.value, !this.sign);
        }, a2.prototype.negate = function() {
          var t4 = this.sign, r2 = new a2(-this.value);
          return r2.sign = !t4, r2;
        }, u2.prototype.abs = function() {
          return new u2(this.value, false);
        }, a2.prototype.abs = function() {
          return new a2(Math.abs(this.value));
        }, u2.prototype.multiply = function(t4) {
          var r2, n2, i2, o3 = K(t4), a3 = this.value, s3 = o3.value, c3 = this.sign !== o3.sign;
          if (o3.isSmall) {
            if (s3 === 0)
              return f2[0];
            if (s3 === 1)
              return this;
            if (s3 === -1)
              return this.negate();
            if ((r2 = Math.abs(s3)) < e)
              return new u2(E2(a3, r2), c3);
            s3 = h2(r2);
          }
          return -0.012 * (n2 = a3.length) - 0.012 * (i2 = s3.length) + 15e-6 * n2 * i2 > 0 ? new u2(function t5(r3, e2) {
            var n3 = Math.max(r3.length, e2.length);
            if (n3 <= 30)
              return m2(r3, e2);
            n3 = Math.ceil(n3 / 2);
            var i3 = r3.slice(n3), o4 = r3.slice(0, n3), f3 = e2.slice(n3), u3 = e2.slice(0, n3), a4 = t5(o4, u3), s4 = t5(i3, f3), h3 = t5(y2(o4, i3), y2(u3, f3)), c4 = y2(y2(a4, B2(w2(w2(h3, a4), s4), n3)), B2(s4, 2 * n3));
            return l2(c4), c4;
          }(a3, s3), c3) : new u2(m2(a3, s3), c3);
        }, u2.prototype.times = u2.prototype.multiply, a2.prototype._multiplyBySmall = function(t4) {
          return s2(t4.value * this.value) ? new a2(t4.value * this.value) : A2(Math.abs(t4.value), h2(Math.abs(this.value)), this.sign !== t4.sign);
        }, u2.prototype._multiplyBySmall = function(t4) {
          return t4.value === 0 ? f2[0] : t4.value === 1 ? this : t4.value === -1 ? this.negate() : A2(Math.abs(t4.value), this.value, this.sign !== t4.sign);
        }, a2.prototype.times = a2.prototype.multiply = function(t4) {
          return K(t4)._multiplyBySmall(this);
        }, u2.prototype.square = function() {
          return new u2(U2(this.value), false);
        }, a2.prototype.square = function() {
          var t4 = this.value * this.value;
          return s2(t4) ? new a2(t4) : new u2(U2(h2(Math.abs(this.value))), false);
        }, a2.prototype.divmod = u2.prototype.divmod = function(t4) {
          var r2 = _2(this, t4);
          return { quotient: r2[0], remainder: r2[1] };
        }, a2.prototype.over = a2.prototype.divide = u2.prototype.over = u2.prototype.divide = function(t4) {
          return _2(this, t4)[0];
        }, a2.prototype.remainder = a2.prototype.mod = u2.prototype.remainder = u2.prototype.mod = function(t4) {
          return _2(this, t4)[1];
        }, u2.prototype.pow = function(t4) {
          var r2, e2, n2, i2 = K(t4), o3 = this.value, u3 = i2.value;
          if (u3 === 0)
            return f2[1];
          if (o3 === 0)
            return f2[0];
          if (o3 === 1)
            return f2[1];
          if (o3 === -1)
            return i2.isEven() ? f2[1] : f2[-1];
          if (i2.sign)
            return f2[0];
          if (!i2.isSmall)
            throw new Error("The exponent " + i2.toString() + " is too large.");
          if (this.isSmall && s2(r2 = Math.pow(o3, u3)))
            return new a2(d2(r2));
          for (e2 = this, n2 = f2[1]; true & u3 && (n2 = n2.times(e2), --u3), u3 !== 0; )
            u3 /= 2, e2 = e2.square();
          return n2;
        }, a2.prototype.pow = u2.prototype.pow, a2.prototype.modPow = u2.prototype.modPow = function(t4, r2) {
          if (t4 = K(t4), (r2 = K(r2)).isZero())
            throw new Error("Cannot take modPow with modulus 0");
          for (var e2 = f2[1], n2 = this.mod(r2); t4.isPositive(); ) {
            if (n2.isZero())
              return f2[0];
            t4.isOdd() && (e2 = e2.multiply(n2).mod(r2)), t4 = t4.divide(2), n2 = n2.square().mod(r2);
          }
          return e2;
        }, u2.prototype.compareAbs = function(t4) {
          var r2 = K(t4);
          return r2.isSmall ? 1 : S2(this.value, r2.value);
        }, a2.prototype.compareAbs = function(t4) {
          var r2 = K(t4), e2 = Math.abs(this.value), n2 = r2.value;
          return r2.isSmall ? e2 === (n2 = Math.abs(n2)) ? 0 : e2 > n2 ? 1 : -1 : -1;
        }, u2.prototype.compareTo = u2.prototype.compare = function(t4) {
          if (t4 === Infinity)
            return -1;
          if (t4 === -Infinity)
            return 1;
          var r2 = K(t4);
          return this.sign !== r2.sign ? r2.sign ? 1 : -1 : r2.isSmall ? this.sign ? -1 : 1 : S2(this.value, r2.value) * (this.sign ? -1 : 1);
        }, a2.prototype.compareTo = a2.prototype.compare = function(t4) {
          if (t4 === Infinity)
            return -1;
          if (t4 === -Infinity)
            return 1;
          var r2 = K(t4), e2 = this.value, n2 = r2.value;
          return r2.isSmall ? e2 == n2 ? 0 : e2 > n2 ? 1 : -1 : e2 < 0 !== r2.sign ? e2 < 0 ? -1 : 1 : e2 < 0 ? 1 : -1;
        }, a2.prototype.eq = a2.prototype.equals = u2.prototype.eq = u2.prototype.equals = function(t4) {
          return this.compare(t4) === 0;
        }, a2.prototype.neq = a2.prototype.notEquals = u2.prototype.neq = u2.prototype.notEquals = function(t4) {
          return this.compare(t4) !== 0;
        }, a2.prototype.gt = a2.prototype.greater = u2.prototype.gt = u2.prototype.greater = function(t4) {
          return this.compare(t4) > 0;
        }, a2.prototype.lt = a2.prototype.lesser = u2.prototype.lt = u2.prototype.lesser = function(t4) {
          return this.compare(t4) < 0;
        }, a2.prototype.geq = a2.prototype.greaterOrEquals = u2.prototype.geq = u2.prototype.greaterOrEquals = function(t4) {
          return this.compare(t4) >= 0;
        }, a2.prototype.leq = a2.prototype.lesserOrEquals = u2.prototype.leq = u2.prototype.lesserOrEquals = function(t4) {
          return this.compare(t4) <= 0;
        }, u2.prototype.isEven = function() {
          return (1 & this.value[0]) == 0;
        }, a2.prototype.isEven = function() {
          return (1 & this.value) == 0;
        }, u2.prototype.isOdd = function() {
          return (1 & this.value[0]) == 1;
        }, a2.prototype.isOdd = function() {
          return (1 & this.value) == 1;
        }, u2.prototype.isPositive = function() {
          return !this.sign;
        }, a2.prototype.isPositive = function() {
          return this.value > 0;
        }, u2.prototype.isNegative = function() {
          return this.sign;
        }, a2.prototype.isNegative = function() {
          return this.value < 0;
        }, u2.prototype.isUnit = function() {
          return false;
        }, a2.prototype.isUnit = function() {
          return Math.abs(this.value) === 1;
        }, u2.prototype.isZero = function() {
          return false;
        }, a2.prototype.isZero = function() {
          return this.value === 0;
        }, a2.prototype.isDivisibleBy = u2.prototype.isDivisibleBy = function(t4) {
          var r2 = K(t4), e2 = r2.value;
          return e2 !== 0 && (e2 === 1 || (e2 === 2 ? this.isEven() : this.mod(r2).equals(f2[0])));
        }, a2.prototype.isPrime = u2.prototype.isPrime = function(t4) {
          var e2 = x2(this);
          if (e2 !== void 0)
            return e2;
          var n2 = this.abs(), i2 = n2.bitLength();
          if (i2 <= 64)
            return k2(n2, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);
          for (var o3 = Math.log(2) * i2, f3 = Math.ceil(t4 === true ? 2 * Math.pow(o3, 2) : o3), u3 = [], a3 = 0; a3 < f3; a3++)
            u3.push(r(a3 + 2));
          return k2(n2, u3);
        }, a2.prototype.isProbablePrime = u2.prototype.isProbablePrime = function(t4) {
          var e2 = x2(this);
          if (e2 !== void 0)
            return e2;
          for (var n2 = this.abs(), i2 = t4 === void 0 ? 5 : t4, o3 = [], f3 = 0; f3 < i2; f3++)
            o3.push(r.randBetween(2, n2.minus(2)));
          return k2(n2, o3);
        }, a2.prototype.modInv = u2.prototype.modInv = function(t4) {
          for (var e2, n2, i2, o3 = r.zero, f3 = r.one, u3 = K(t4), a3 = this.abs(); !a3.equals(r.zero); )
            e2 = u3.divide(a3), n2 = o3, i2 = u3, o3 = f3, u3 = a3, f3 = n2.subtract(e2.multiply(f3)), a3 = i2.subtract(e2.multiply(a3));
          if (!u3.equals(1))
            throw new Error(this.toString() + " and " + t4.toString() + " are not co-prime");
          return o3.compare(0) === -1 && (o3 = o3.add(t4)), this.isNegative() ? o3.negate() : o3;
        }, u2.prototype.next = function() {
          var t4 = this.value;
          return this.sign ? b2(t4, 1, this.sign) : new u2(v2(t4, 1), this.sign);
        }, a2.prototype.next = function() {
          var t4 = this.value;
          return t4 + 1 < n ? new a2(t4 + 1) : new u2(i, false);
        }, u2.prototype.prev = function() {
          var t4 = this.value;
          return this.sign ? new u2(v2(t4, 1), true) : b2(t4, 1, this.sign);
        }, a2.prototype.prev = function() {
          var t4 = this.value;
          return t4 - 1 > -n ? new a2(t4 - 1) : new u2(i, true);
        };
        for (var O2 = [1]; 2 * O2[O2.length - 1] <= e; )
          O2.push(2 * O2[O2.length - 1]);
        var C2 = O2.length, M2 = O2[C2 - 1];
        function T2(t4) {
          return (typeof t4 == "number" || typeof t4 == "string") && +Math.abs(t4) <= e || t4 instanceof u2 && t4.value.length <= 1;
        }
        function L2(t4, e2, n2) {
          e2 = K(e2);
          for (var i2 = t4.isNegative(), o3 = e2.isNegative(), f3 = i2 ? t4.not() : t4, u3 = o3 ? e2.not() : e2, a3 = 0, s3 = 0, h3 = null, c3 = null, l3 = []; !f3.isZero() || !u3.isZero(); )
            a3 = (h3 = _2(f3, M2))[1].toJSNumber(), i2 && (a3 = M2 - 1 - a3), s3 = (c3 = _2(u3, M2))[1].toJSNumber(), o3 && (s3 = M2 - 1 - s3), f3 = h3[0], u3 = c3[0], l3.push(n2(a3, s3));
          for (var p3 = n2(i2 ? 1 : 0, o3 ? 1 : 0) !== 0 ? r(-1) : r(0), d3 = l3.length - 1; d3 >= 0; d3 -= 1)
            p3 = p3.multiply(M2).add(r(l3[d3]));
          return p3;
        }
        function P2(t4) {
          var r2 = t4.value, n2 = typeof r2 == "number" ? r2 | 1 << 30 : r2[0] + r2[1] * e | 1073758208;
          return n2 & -n2;
        }
        function z2(t4, r2) {
          return t4 = K(t4), r2 = K(r2), t4.greater(r2) ? t4 : r2;
        }
        function R2(t4, r2) {
          return t4 = K(t4), r2 = K(r2), t4.lesser(r2) ? t4 : r2;
        }
        function N2(t4, r2) {
          if (t4 = K(t4).abs(), r2 = K(r2).abs(), t4.equals(r2))
            return t4;
          if (t4.isZero())
            return r2;
          if (r2.isZero())
            return t4;
          for (var e2, n2, i2 = f2[1]; t4.isEven() && r2.isEven(); )
            e2 = Math.min(P2(t4), P2(r2)), t4 = t4.divide(e2), r2 = r2.divide(e2), i2 = i2.multiply(e2);
          for (; t4.isEven(); )
            t4 = t4.divide(P2(t4));
          do {
            for (; r2.isEven(); )
              r2 = r2.divide(P2(r2));
            t4.greater(r2) && (n2 = r2, r2 = t4, t4 = n2), r2 = r2.subtract(t4);
          } while (!r2.isZero());
          return i2.isUnit() ? t4 : t4.multiply(i2);
        }
        a2.prototype.shiftLeft = u2.prototype.shiftLeft = function(t4) {
          if (!T2(t4))
            throw new Error(String(t4) + " is too large for shifting.");
          if ((t4 = +t4) < 0)
            return this.shiftRight(-t4);
          var r2 = this;
          if (r2.isZero())
            return r2;
          for (; t4 >= C2; )
            r2 = r2.multiply(M2), t4 -= C2 - 1;
          return r2.multiply(O2[t4]);
        }, a2.prototype.shiftRight = u2.prototype.shiftRight = function(t4) {
          var r2;
          if (!T2(t4))
            throw new Error(String(t4) + " is too large for shifting.");
          if ((t4 = +t4) < 0)
            return this.shiftLeft(-t4);
          for (var e2 = this; t4 >= C2; ) {
            if (e2.isZero() || e2.isNegative() && e2.isUnit())
              return e2;
            e2 = (r2 = _2(e2, M2))[1].isNegative() ? r2[0].prev() : r2[0], t4 -= C2 - 1;
          }
          return (r2 = _2(e2, O2[t4]))[1].isNegative() ? r2[0].prev() : r2[0];
        }, a2.prototype.not = u2.prototype.not = function() {
          return this.negate().prev();
        }, a2.prototype.and = u2.prototype.and = function(t4) {
          return L2(this, t4, function(t5, r2) {
            return t5 & r2;
          });
        }, a2.prototype.or = u2.prototype.or = function(t4) {
          return L2(this, t4, function(t5, r2) {
            return t5 | r2;
          });
        }, a2.prototype.xor = u2.prototype.xor = function(t4) {
          return L2(this, t4, function(t5, r2) {
            return t5 ^ r2;
          });
        }, a2.prototype.bitLength = u2.prototype.bitLength = function() {
          var t4 = this;
          return t4.compareTo(r(0)) < 0 && (t4 = t4.negate().subtract(r(1))), t4.compareTo(r(0)) === 0 ? r(0) : r(function t5(e2, n2) {
            if (n2.compareTo(e2) <= 0) {
              var i2 = t5(e2, n2.square(n2)), o3 = i2.p, f3 = i2.e, u3 = o3.multiply(n2);
              return u3.compareTo(e2) <= 0 ? { p: u3, e: 2 * f3 + 1 } : { p: o3, e: 2 * f3 };
            }
            return { p: r(1), e: 0 };
          }(t4, r(2)).e).add(r(1));
        };
        var q2 = function(t4, r2) {
          for (var e2 = t4.length, n2 = Math.abs(r2), i2 = 0; i2 < e2; i2++)
            if ((h3 = t4[i2].toLowerCase()) !== "-" && /[a-z0-9]/.test(h3)) {
              if (/[0-9]/.test(h3) && +h3 >= n2) {
                if (h3 === "1" && n2 === 1)
                  continue;
                throw new Error(h3 + " is not a valid digit in base " + r2 + ".");
              }
              if (h3.charCodeAt(0) - 87 >= n2)
                throw new Error(h3 + " is not a valid digit in base " + r2 + ".");
            }
          if (2 <= r2 && r2 <= 36 && e2 <= o2 / Math.log(r2)) {
            var f3 = parseInt(t4, r2);
            if (isNaN(f3))
              throw new Error(h3 + " is not a valid digit in base " + r2 + ".");
            return new a2(parseInt(t4, r2));
          }
          r2 = K(r2);
          var u3 = [], s3 = t4[0] === "-";
          for (i2 = s3 ? 1 : 0; i2 < t4.length; i2++) {
            var h3, c3 = (h3 = t4[i2].toLowerCase()).charCodeAt(0);
            if (48 <= c3 && c3 <= 57)
              u3.push(K(h3));
            else if (97 <= c3 && c3 <= 122)
              u3.push(K(h3.charCodeAt(0) - 87));
            else {
              if (h3 !== "<")
                throw new Error(h3 + " is not a valid character");
              var l3 = i2;
              do {
                i2++;
              } while (t4[i2] !== ">");
              u3.push(K(t4.slice(l3 + 1, i2)));
            }
          }
          return j2(u3, r2, s3);
        };
        function j2(t4, r2, e2) {
          var n2, i2 = f2[0], o3 = f2[1];
          for (n2 = t4.length - 1; n2 >= 0; n2--)
            i2 = i2.add(t4[n2].times(o3)), o3 = o3.times(r2);
          return e2 ? i2.negate() : i2;
        }
        function D2(t4) {
          return t4 <= 35 ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t4) : "<" + t4 + ">";
        }
        function H(t4, e2) {
          if ((e2 = r(e2)).isZero()) {
            if (t4.isZero())
              return { value: [0], isNegative: false };
            throw new Error("Cannot convert nonzero numbers to base 0.");
          }
          if (e2.equals(-1)) {
            if (t4.isZero())
              return { value: [0], isNegative: false };
            if (t4.isNegative())
              return { value: [].concat.apply([], Array.apply(null, Array(-t4)).map(Array.prototype.valueOf, [1, 0])), isNegative: false };
            var n2 = Array.apply(null, Array(+t4 - 1)).map(Array.prototype.valueOf, [0, 1]);
            return n2.unshift([1]), { value: [].concat.apply([], n2), isNegative: false };
          }
          var i2 = false;
          if (t4.isNegative() && e2.isPositive() && (i2 = true, t4 = t4.abs()), e2.equals(1))
            return t4.isZero() ? { value: [0], isNegative: false } : { value: Array.apply(null, Array(+t4)).map(Number.prototype.valueOf, 1), isNegative: i2 };
          for (var o3, f3 = [], u3 = t4; u3.isNegative() || u3.compareAbs(e2) >= 0; ) {
            o3 = u3.divmod(e2), u3 = o3.quotient;
            var a3 = o3.remainder;
            a3.isNegative() && (a3 = e2.minus(a3).abs(), u3 = u3.next()), f3.push(a3.toJSNumber());
          }
          return f3.push(u3.toJSNumber()), { value: f3.reverse(), isNegative: i2 };
        }
        function F(t4, r2) {
          var e2 = H(t4, r2);
          return (e2.isNegative ? "-" : "") + e2.value.map(D2).join("");
        }
        function Z(t4) {
          if (s2(+t4)) {
            var r2 = +t4;
            if (r2 === d2(r2))
              return new a2(r2);
            throw new Error("Invalid integer: " + t4);
          }
          var e2 = t4[0] === "-";
          e2 && (t4 = t4.slice(1));
          var n2 = t4.split(/e/i);
          if (n2.length > 2)
            throw new Error("Invalid integer: " + n2.join("e"));
          if (n2.length === 2) {
            var i2 = n2[1];
            if (i2[0] === "+" && (i2 = i2.slice(1)), (i2 = +i2) !== d2(i2) || !s2(i2))
              throw new Error("Invalid integer: " + i2 + " is not a valid exponent.");
            var o3 = n2[0], f3 = o3.indexOf(".");
            if (f3 >= 0 && (i2 -= o3.length - f3 - 1, o3 = o3.slice(0, f3) + o3.slice(f3 + 1)), i2 < 0)
              throw new Error("Cannot include negative exponent part for integers");
            t4 = o3 += new Array(i2 + 1).join("0");
          }
          if (!/^([0-9][0-9]*)$/.test(t4))
            throw new Error("Invalid integer: " + t4);
          for (var h3 = [], c3 = t4.length, p3 = c3 - 7; c3 > 0; )
            h3.push(+t4.slice(p3, c3)), (p3 -= 7) < 0 && (p3 = 0), c3 -= 7;
          return l2(h3), new u2(h3, e2);
        }
        function K(t4) {
          return typeof t4 == "number" ? function(t5) {
            if (s2(t5)) {
              if (t5 !== d2(t5))
                throw new Error(t5 + " is not an integer.");
              return new a2(t5);
            }
            return Z(t5.toString());
          }(t4) : typeof t4 == "string" ? Z(t4) : t4;
        }
        u2.prototype.toArray = function(t4) {
          return H(this, t4);
        }, a2.prototype.toArray = function(t4) {
          return H(this, t4);
        }, u2.prototype.toString = function(t4) {
          if (t4 === void 0 && (t4 = 10), t4 !== 10)
            return F(this, t4);
          for (var r2, e2 = this.value, n2 = e2.length, i2 = String(e2[--n2]); --n2 >= 0; )
            r2 = String(e2[n2]), i2 += "0000000".slice(r2.length) + r2;
          return (this.sign ? "-" : "") + i2;
        }, a2.prototype.toString = function(t4) {
          return t4 === void 0 && (t4 = 10), t4 != 10 ? F(this, t4) : String(this.value);
        }, u2.prototype.toJSON = a2.prototype.toJSON = function() {
          return this.toString();
        }, u2.prototype.toJSNumber = u2.prototype.valueOf = function() {
          return parseInt(this.toString(), 10);
        }, a2.prototype.toJSNumber = a2.prototype.valueOf = function() {
          return this.value;
        };
        for (var X = 0; X < 1e3; X++)
          f2[X] = new a2(X), X > 0 && (f2[-X] = new a2(-X));
        return f2.one = f2[1], f2.zero = f2[0], f2.minusOne = f2[-1], f2.max = z2, f2.min = R2, f2.gcd = N2, f2.lcm = function(t4, r2) {
          return t4 = K(t4).abs(), r2 = K(r2).abs(), t4.divide(N2(t4, r2)).multiply(r2);
        }, f2.isInstance = function(t4) {
          return t4 instanceof u2 || t4 instanceof a2;
        }, f2.randBetween = function(t4, r2) {
          var n2 = R2(t4 = K(t4), r2 = K(r2)), i2 = z2(t4, r2).subtract(n2).add(1);
          if (i2.isSmall)
            return n2.add(Math.floor(Math.random() * i2));
          for (var o3 = [], f3 = true, s3 = i2.value.length - 1; s3 >= 0; s3--) {
            var h3 = f3 ? i2.value[s3] : e, l3 = d2(Math.random() * h3);
            o3.unshift(l3), l3 < h3 && (f3 = false);
          }
          return o3 = c2(o3), n2.add(typeof o3 == "number" ? new a2(o3) : new u2(o3, false));
        }, f2.fromArray = function(t4, r2, e2) {
          return j2(t4.map(K), K(r2 || 10), e2);
        }, f2;
      }();
      t2.hasOwnProperty("exports") && (t2.exports = r);
    });
    d = function(t2) {
      var r;
      if (t2 instanceof Uint8Array)
        r = t2;
      else if (t2 instanceof Buffer)
        r = new Uint8Array(t2);
      else {
        if (typeof t2 != "string")
          throw new Error("Input must be an string, Buffer or Uint8Array");
        r = new Uint8Array(Buffer.from(t2, "utf8"));
      }
      return r;
    };
    g = function(t2) {
      return Array.prototype.map.call(t2, function(t3) {
        return (t3 < 16 ? "0" : "") + t3.toString(16);
      }).join("");
    };
    m = new Uint32Array([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
    E = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3].map(function(t2) {
      return 2 * t2;
    }));
    B = new Uint32Array(32);
    A = new Uint32Array(32);
    k = { blake2b: x, blake2bHex: function(t2, r, e) {
      var n = x(t2, r, e);
      return g(n);
    }, blake2bInit: I, blake2bUpdate: _, blake2bFinal: S };
    T = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
    L = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]);
    P = new Uint32Array(16);
    z = new Uint32Array(16);
    for (H = { blake2s: D, blake2sHex: function(t2, r, e) {
      var n = D(t2, r, e);
      return g(n);
    }, blake2sInit: N, blake2sUpdate: q, blake2sFinal: j }, F = { blake2b: k.blake2b, blake2bHex: k.blake2bHex, blake2bInit: k.blake2bInit, blake2bUpdate: k.blake2bUpdate, blake2bFinal: k.blake2bFinal, blake2s: H.blake2s, blake2sHex: H.blake2sHex, blake2sInit: H.blake2sInit, blake2sUpdate: H.blake2sUpdate, blake2sFinal: H.blake2sFinal }, Z = [], K = [], X = typeof Uint8Array != "undefined" ? Uint8Array : Array, V = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Y = 0, W = V.length; Y < W; ++Y)
      Z[Y] = V[Y], K[V.charCodeAt(Y)] = Y;
    K["-".charCodeAt(0)] = 62, K["_".charCodeAt(0)] = 63;
    G = function(t2) {
      var r, e, n = function(t3) {
        var r2 = t3.length;
        if (r2 % 4 > 0)
          throw new Error("Invalid string. Length must be a multiple of 4");
        var e2 = t3.indexOf("=");
        return e2 === -1 && (e2 = r2), [e2, e2 === r2 ? 0 : 4 - e2 % 4];
      }(t2), i = n[0], o2 = n[1], f2 = new X(function(t3, r2, e2) {
        return 3 * (r2 + e2) / 4 - e2;
      }(0, i, o2)), u2 = 0, a2 = o2 > 0 ? i - 4 : i;
      for (e = 0; e < a2; e += 4)
        r = K[t2.charCodeAt(e)] << 18 | K[t2.charCodeAt(e + 1)] << 12 | K[t2.charCodeAt(e + 2)] << 6 | K[t2.charCodeAt(e + 3)], f2[u2++] = r >> 16 & 255, f2[u2++] = r >> 8 & 255, f2[u2++] = 255 & r;
      return o2 === 2 && (r = K[t2.charCodeAt(e)] << 2 | K[t2.charCodeAt(e + 1)] >> 4, f2[u2++] = 255 & r), o2 === 1 && (r = K[t2.charCodeAt(e)] << 10 | K[t2.charCodeAt(e + 1)] << 4 | K[t2.charCodeAt(e + 2)] >> 2, f2[u2++] = r >> 8 & 255, f2[u2++] = 255 & r), f2;
    };
    Q = function(t2) {
      for (var r, e = t2.length, n = e % 3, i = [], o2 = 0, f2 = e - n; o2 < f2; o2 += 16383)
        i.push(J(t2, o2, o2 + 16383 > f2 ? f2 : o2 + 16383));
      return n === 1 ? i.push(Z[(r = t2[e - 1]) >> 2] + Z[r << 4 & 63] + "==") : n === 2 && i.push(Z[(r = (t2[e - 2] << 8) + t2[e - 1]) >> 10] + Z[r >> 4 & 63] + Z[r << 2 & 63] + "="), i.join("");
    };
    $ = function(t2, r, e, n, i) {
      var o2, f2, u2 = 8 * i - n - 1, a2 = (1 << u2) - 1, s2 = a2 >> 1, h2 = -7, c2 = e ? i - 1 : 0, l2 = e ? -1 : 1, p2 = t2[r + c2];
      for (c2 += l2, o2 = p2 & (1 << -h2) - 1, p2 >>= -h2, h2 += u2; h2 > 0; o2 = 256 * o2 + t2[r + c2], c2 += l2, h2 -= 8)
        ;
      for (f2 = o2 & (1 << -h2) - 1, o2 >>= -h2, h2 += n; h2 > 0; f2 = 256 * f2 + t2[r + c2], c2 += l2, h2 -= 8)
        ;
      if (o2 === 0)
        o2 = 1 - s2;
      else {
        if (o2 === a2)
          return f2 ? NaN : Infinity * (p2 ? -1 : 1);
        f2 += Math.pow(2, n), o2 -= s2;
      }
      return (p2 ? -1 : 1) * f2 * Math.pow(2, o2 - n);
    };
    tt = function(t2, r, e, n, i, o2) {
      var f2, u2, a2, s2 = 8 * o2 - i - 1, h2 = (1 << s2) - 1, c2 = h2 >> 1, l2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p2 = n ? 0 : o2 - 1, d2 = n ? 1 : -1, g2 = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;
      for (r = Math.abs(r), isNaN(r) || r === Infinity ? (u2 = isNaN(r) ? 1 : 0, f2 = h2) : (f2 = Math.floor(Math.log(r) / Math.LN2), r * (a2 = Math.pow(2, -f2)) < 1 && (f2--, a2 *= 2), (r += f2 + c2 >= 1 ? l2 / a2 : l2 * Math.pow(2, 1 - c2)) * a2 >= 2 && (f2++, a2 /= 2), f2 + c2 >= h2 ? (u2 = 0, f2 = h2) : f2 + c2 >= 1 ? (u2 = (r * a2 - 1) * Math.pow(2, i), f2 += c2) : (u2 = r * Math.pow(2, c2 - 1) * Math.pow(2, i), f2 = 0)); i >= 8; t2[e + p2] = 255 & u2, p2 += d2, u2 /= 256, i -= 8)
        ;
      for (f2 = f2 << i | u2, s2 += i; s2 > 0; t2[e + p2] = 255 & f2, p2 += d2, f2 /= 256, s2 -= 8)
        ;
      t2[e + p2 - d2] |= 128 * g2;
    };
    rt = l(function(t2, r) {
      var e = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
      function n(t3) {
        if (t3 > 2147483647)
          throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
        var r2 = new Uint8Array(t3);
        return Object.setPrototypeOf(r2, i.prototype), r2;
      }
      function i(t3, r2, e2) {
        if (typeof t3 == "number") {
          if (typeof r2 == "string")
            throw new TypeError('The "string" argument must be of type string. Received type number');
          return u2(t3);
        }
        return o2(t3, r2, e2);
      }
      function o2(t3, r2, e2) {
        if (typeof t3 == "string")
          return function(t4, r3) {
            if (typeof r3 == "string" && r3 !== "" || (r3 = "utf8"), !i.isEncoding(r3))
              throw new TypeError("Unknown encoding: " + r3);
            var e3 = 0 | c2(t4, r3), o4 = n(e3), f4 = o4.write(t4, r3);
            return f4 !== e3 && (o4 = o4.slice(0, f4)), o4;
          }(t3, r2);
        if (ArrayBuffer.isView(t3))
          return a2(t3);
        if (t3 == null)
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t3);
        if (R2(t3, ArrayBuffer) || t3 && R2(t3.buffer, ArrayBuffer))
          return s2(t3, r2, e2);
        if (typeof SharedArrayBuffer != "undefined" && (R2(t3, SharedArrayBuffer) || t3 && R2(t3.buffer, SharedArrayBuffer)))
          return s2(t3, r2, e2);
        if (typeof t3 == "number")
          throw new TypeError('The "value" argument must not be of type number. Received type number');
        var o3 = t3.valueOf && t3.valueOf();
        if (o3 != null && o3 !== t3)
          return i.from(o3, r2, e2);
        var f3 = function(t4) {
          if (i.isBuffer(t4)) {
            var r3 = 0 | h2(t4.length), e3 = n(r3);
            return e3.length === 0 || t4.copy(e3, 0, 0, r3), e3;
          }
          return t4.length !== void 0 ? typeof t4.length != "number" || N2(t4.length) ? n(0) : a2(t4) : t4.type === "Buffer" && Array.isArray(t4.data) ? a2(t4.data) : void 0;
        }(t3);
        if (f3)
          return f3;
        if (typeof Symbol != "undefined" && Symbol.toPrimitive != null && typeof t3[Symbol.toPrimitive] == "function")
          return i.from(t3[Symbol.toPrimitive]("string"), r2, e2);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t3);
      }
      function f2(t3) {
        if (typeof t3 != "number")
          throw new TypeError('"size" argument must be of type number');
        if (t3 < 0)
          throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
      }
      function u2(t3) {
        return f2(t3), n(t3 < 0 ? 0 : 0 | h2(t3));
      }
      function a2(t3) {
        for (var r2 = t3.length < 0 ? 0 : 0 | h2(t3.length), e2 = n(r2), i2 = 0; i2 < r2; i2 += 1)
          e2[i2] = 255 & t3[i2];
        return e2;
      }
      function s2(t3, r2, e2) {
        if (r2 < 0 || t3.byteLength < r2)
          throw new RangeError('"offset" is outside of buffer bounds');
        if (t3.byteLength < r2 + (e2 || 0))
          throw new RangeError('"length" is outside of buffer bounds');
        var n2;
        return n2 = r2 === void 0 && e2 === void 0 ? new Uint8Array(t3) : e2 === void 0 ? new Uint8Array(t3, r2) : new Uint8Array(t3, r2, e2), Object.setPrototypeOf(n2, i.prototype), n2;
      }
      function h2(t3) {
        if (t3 >= 2147483647)
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647 .toString(16) + " bytes");
        return 0 | t3;
      }
      function c2(t3, r2) {
        if (i.isBuffer(t3))
          return t3.length;
        if (ArrayBuffer.isView(t3) || R2(t3, ArrayBuffer))
          return t3.byteLength;
        if (typeof t3 != "string")
          throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t3);
        var e2 = t3.length, n2 = arguments.length > 2 && arguments[2] === true;
        if (!n2 && e2 === 0)
          return 0;
        for (var o3 = false; ; )
          switch (r2) {
            case "ascii":
            case "latin1":
            case "binary":
              return e2;
            case "utf8":
            case "utf-8":
              return L2(t3).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * e2;
            case "hex":
              return e2 >>> 1;
            case "base64":
              return P2(t3).length;
            default:
              if (o3)
                return n2 ? -1 : L2(t3).length;
              r2 = ("" + r2).toLowerCase(), o3 = true;
          }
      }
      function l2(t3, r2, e2) {
        var n2 = false;
        if ((r2 === void 0 || r2 < 0) && (r2 = 0), r2 > this.length)
          return "";
        if ((e2 === void 0 || e2 > this.length) && (e2 = this.length), e2 <= 0)
          return "";
        if ((e2 >>>= 0) <= (r2 >>>= 0))
          return "";
        for (t3 || (t3 = "utf8"); ; )
          switch (t3) {
            case "hex":
              return _2(this, r2, e2);
            case "utf8":
            case "utf-8":
              return A2(this, r2, e2);
            case "ascii":
              return U2(this, r2, e2);
            case "latin1":
            case "binary":
              return I2(this, r2, e2);
            case "base64":
              return B2(this, r2, e2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return S2(this, r2, e2);
            default:
              if (n2)
                throw new TypeError("Unknown encoding: " + t3);
              t3 = (t3 + "").toLowerCase(), n2 = true;
          }
      }
      function p2(t3, r2, e2) {
        var n2 = t3[r2];
        t3[r2] = t3[e2], t3[e2] = n2;
      }
      function d2(t3, r2, e2, n2, o3) {
        if (t3.length === 0)
          return -1;
        if (typeof e2 == "string" ? (n2 = e2, e2 = 0) : e2 > 2147483647 ? e2 = 2147483647 : e2 < -2147483648 && (e2 = -2147483648), N2(e2 = +e2) && (e2 = o3 ? 0 : t3.length - 1), e2 < 0 && (e2 = t3.length + e2), e2 >= t3.length) {
          if (o3)
            return -1;
          e2 = t3.length - 1;
        } else if (e2 < 0) {
          if (!o3)
            return -1;
          e2 = 0;
        }
        if (typeof r2 == "string" && (r2 = i.from(r2, n2)), i.isBuffer(r2))
          return r2.length === 0 ? -1 : g2(t3, r2, e2, n2, o3);
        if (typeof r2 == "number")
          return r2 &= 255, typeof Uint8Array.prototype.indexOf == "function" ? o3 ? Uint8Array.prototype.indexOf.call(t3, r2, e2) : Uint8Array.prototype.lastIndexOf.call(t3, r2, e2) : g2(t3, [r2], e2, n2, o3);
        throw new TypeError("val must be string, number or Buffer");
      }
      function g2(t3, r2, e2, n2, i2) {
        var o3, f3 = 1, u3 = t3.length, a3 = r2.length;
        if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
          if (t3.length < 2 || r2.length < 2)
            return -1;
          f3 = 2, u3 /= 2, a3 /= 2, e2 /= 2;
        }
        function s3(t4, r3) {
          return f3 === 1 ? t4[r3] : t4.readUInt16BE(r3 * f3);
        }
        if (i2) {
          var h3 = -1;
          for (o3 = e2; o3 < u3; o3++)
            if (s3(t3, o3) === s3(r2, h3 === -1 ? 0 : o3 - h3)) {
              if (h3 === -1 && (h3 = o3), o3 - h3 + 1 === a3)
                return h3 * f3;
            } else
              h3 !== -1 && (o3 -= o3 - h3), h3 = -1;
        } else
          for (e2 + a3 > u3 && (e2 = u3 - a3), o3 = e2; o3 >= 0; o3--) {
            for (var c3 = true, l3 = 0; l3 < a3; l3++)
              if (s3(t3, o3 + l3) !== s3(r2, l3)) {
                c3 = false;
                break;
              }
            if (c3)
              return o3;
          }
        return -1;
      }
      function y2(t3, r2, e2, n2) {
        e2 = Number(e2) || 0;
        var i2 = t3.length - e2;
        n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
        var o3 = r2.length;
        n2 > o3 / 2 && (n2 = o3 / 2);
        for (var f3 = 0; f3 < n2; ++f3) {
          var u3 = parseInt(r2.substr(2 * f3, 2), 16);
          if (N2(u3))
            return f3;
          t3[e2 + f3] = u3;
        }
        return f3;
      }
      function v2(t3, r2, e2, n2) {
        return z2(L2(r2, t3.length - e2), t3, e2, n2);
      }
      function w2(t3, r2, e2, n2) {
        return z2(function(t4) {
          for (var r3 = [], e3 = 0; e3 < t4.length; ++e3)
            r3.push(255 & t4.charCodeAt(e3));
          return r3;
        }(r2), t3, e2, n2);
      }
      function b2(t3, r2, e2, n2) {
        return w2(t3, r2, e2, n2);
      }
      function m2(t3, r2, e2, n2) {
        return z2(P2(r2), t3, e2, n2);
      }
      function E2(t3, r2, e2, n2) {
        return z2(function(t4, r3) {
          for (var e3, n3, i2 = [], o3 = 0; o3 < t4.length && !((r3 -= 2) < 0); ++o3)
            n3 = (e3 = t4.charCodeAt(o3)) >> 8, i2.push(e3 % 256), i2.push(n3);
          return i2;
        }(r2, t3.length - e2), t3, e2, n2);
      }
      function B2(t3, r2, e2) {
        return Q(r2 === 0 && e2 === t3.length ? t3 : t3.slice(r2, e2));
      }
      function A2(t3, r2, e2) {
        e2 = Math.min(t3.length, e2);
        for (var n2 = [], i2 = r2; i2 < e2; ) {
          var o3, f3, u3, a3, s3 = t3[i2], h3 = null, c3 = s3 > 239 ? 4 : s3 > 223 ? 3 : s3 > 191 ? 2 : 1;
          if (i2 + c3 <= e2)
            switch (c3) {
              case 1:
                s3 < 128 && (h3 = s3);
                break;
              case 2:
                (192 & (o3 = t3[i2 + 1])) == 128 && (a3 = (31 & s3) << 6 | 63 & o3) > 127 && (h3 = a3);
                break;
              case 3:
                f3 = t3[i2 + 2], (192 & (o3 = t3[i2 + 1])) == 128 && (192 & f3) == 128 && (a3 = (15 & s3) << 12 | (63 & o3) << 6 | 63 & f3) > 2047 && (a3 < 55296 || a3 > 57343) && (h3 = a3);
                break;
              case 4:
                f3 = t3[i2 + 2], u3 = t3[i2 + 3], (192 & (o3 = t3[i2 + 1])) == 128 && (192 & f3) == 128 && (192 & u3) == 128 && (a3 = (15 & s3) << 18 | (63 & o3) << 12 | (63 & f3) << 6 | 63 & u3) > 65535 && a3 < 1114112 && (h3 = a3);
            }
          h3 === null ? (h3 = 65533, c3 = 1) : h3 > 65535 && (n2.push((h3 -= 65536) >>> 10 & 1023 | 55296), h3 = 56320 | 1023 & h3), n2.push(h3), i2 += c3;
        }
        return function(t4) {
          var r3 = t4.length;
          if (r3 <= 4096)
            return String.fromCharCode.apply(String, t4);
          for (var e3 = "", n3 = 0; n3 < r3; )
            e3 += String.fromCharCode.apply(String, t4.slice(n3, n3 += 4096));
          return e3;
        }(n2);
      }
      function U2(t3, r2, e2) {
        var n2 = "";
        e2 = Math.min(t3.length, e2);
        for (var i2 = r2; i2 < e2; ++i2)
          n2 += String.fromCharCode(127 & t3[i2]);
        return n2;
      }
      function I2(t3, r2, e2) {
        var n2 = "";
        e2 = Math.min(t3.length, e2);
        for (var i2 = r2; i2 < e2; ++i2)
          n2 += String.fromCharCode(t3[i2]);
        return n2;
      }
      function _2(t3, r2, e2) {
        var n2 = t3.length;
        (!r2 || r2 < 0) && (r2 = 0), (!e2 || e2 < 0 || e2 > n2) && (e2 = n2);
        for (var i2 = "", o3 = r2; o3 < e2; ++o3)
          i2 += q2[t3[o3]];
        return i2;
      }
      function S2(t3, r2, e2) {
        for (var n2 = t3.slice(r2, e2), i2 = "", o3 = 0; o3 < n2.length; o3 += 2)
          i2 += String.fromCharCode(n2[o3] + 256 * n2[o3 + 1]);
        return i2;
      }
      function x2(t3, r2, e2) {
        if (t3 % 1 != 0 || t3 < 0)
          throw new RangeError("offset is not uint");
        if (t3 + r2 > e2)
          throw new RangeError("Trying to access beyond buffer length");
      }
      function k2(t3, r2, e2, n2, o3, f3) {
        if (!i.isBuffer(t3))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (r2 > o3 || r2 < f3)
          throw new RangeError('"value" argument is out of bounds');
        if (e2 + n2 > t3.length)
          throw new RangeError("Index out of range");
      }
      function O2(t3, r2, e2, n2, i2, o3) {
        if (e2 + n2 > t3.length)
          throw new RangeError("Index out of range");
        if (e2 < 0)
          throw new RangeError("Index out of range");
      }
      function C2(t3, r2, e2, n2, i2) {
        return r2 = +r2, e2 >>>= 0, i2 || O2(t3, 0, e2, 4), tt(t3, r2, e2, n2, 23, 4), e2 + 4;
      }
      function M2(t3, r2, e2, n2, i2) {
        return r2 = +r2, e2 >>>= 0, i2 || O2(t3, 0, e2, 8), tt(t3, r2, e2, n2, 52, 8), e2 + 8;
      }
      r.Buffer = i, r.SlowBuffer = function(t3) {
        return +t3 != t3 && (t3 = 0), i.alloc(+t3);
      }, r.INSPECT_MAX_BYTES = 50, r.kMaxLength = 2147483647, (i.TYPED_ARRAY_SUPPORT = function() {
        try {
          var t3 = new Uint8Array(1), r2 = { foo: function() {
            return 42;
          } };
          return Object.setPrototypeOf(r2, Uint8Array.prototype), Object.setPrototypeOf(t3, r2), t3.foo() === 42;
        } catch (t4) {
          return false;
        }
      }()) || typeof console == "undefined" || typeof console.error != "function" || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(i.prototype, "parent", { enumerable: true, get: function() {
        if (i.isBuffer(this))
          return this.buffer;
      } }), Object.defineProperty(i.prototype, "offset", { enumerable: true, get: function() {
        if (i.isBuffer(this))
          return this.byteOffset;
      } }), typeof Symbol != "undefined" && Symbol.species != null && i[Symbol.species] === i && Object.defineProperty(i, Symbol.species, { value: null, configurable: true, enumerable: false, writable: false }), i.poolSize = 8192, i.from = function(t3, r2, e2) {
        return o2(t3, r2, e2);
      }, Object.setPrototypeOf(i.prototype, Uint8Array.prototype), Object.setPrototypeOf(i, Uint8Array), i.alloc = function(t3, r2, e2) {
        return function(t4, r3, e3) {
          return f2(t4), t4 <= 0 ? n(t4) : r3 !== void 0 ? typeof e3 == "string" ? n(t4).fill(r3, e3) : n(t4).fill(r3) : n(t4);
        }(t3, r2, e2);
      }, i.allocUnsafe = function(t3) {
        return u2(t3);
      }, i.allocUnsafeSlow = function(t3) {
        return u2(t3);
      }, i.isBuffer = function(t3) {
        return t3 != null && t3._isBuffer === true && t3 !== i.prototype;
      }, i.compare = function(t3, r2) {
        if (R2(t3, Uint8Array) && (t3 = i.from(t3, t3.offset, t3.byteLength)), R2(r2, Uint8Array) && (r2 = i.from(r2, r2.offset, r2.byteLength)), !i.isBuffer(t3) || !i.isBuffer(r2))
          throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (t3 === r2)
          return 0;
        for (var e2 = t3.length, n2 = r2.length, o3 = 0, f3 = Math.min(e2, n2); o3 < f3; ++o3)
          if (t3[o3] !== r2[o3]) {
            e2 = t3[o3], n2 = r2[o3];
            break;
          }
        return e2 < n2 ? -1 : n2 < e2 ? 1 : 0;
      }, i.isEncoding = function(t3) {
        switch (String(t3).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      }, i.concat = function(t3, r2) {
        if (!Array.isArray(t3))
          throw new TypeError('"list" argument must be an Array of Buffers');
        if (t3.length === 0)
          return i.alloc(0);
        var e2;
        if (r2 === void 0)
          for (r2 = 0, e2 = 0; e2 < t3.length; ++e2)
            r2 += t3[e2].length;
        var n2 = i.allocUnsafe(r2), o3 = 0;
        for (e2 = 0; e2 < t3.length; ++e2) {
          var f3 = t3[e2];
          if (R2(f3, Uint8Array) && (f3 = i.from(f3)), !i.isBuffer(f3))
            throw new TypeError('"list" argument must be an Array of Buffers');
          f3.copy(n2, o3), o3 += f3.length;
        }
        return n2;
      }, i.byteLength = c2, i.prototype._isBuffer = true, i.prototype.swap16 = function() {
        var t3 = this.length;
        if (t3 % 2 != 0)
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var r2 = 0; r2 < t3; r2 += 2)
          p2(this, r2, r2 + 1);
        return this;
      }, i.prototype.swap32 = function() {
        var t3 = this.length;
        if (t3 % 4 != 0)
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var r2 = 0; r2 < t3; r2 += 4)
          p2(this, r2, r2 + 3), p2(this, r2 + 1, r2 + 2);
        return this;
      }, i.prototype.swap64 = function() {
        var t3 = this.length;
        if (t3 % 8 != 0)
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var r2 = 0; r2 < t3; r2 += 8)
          p2(this, r2, r2 + 7), p2(this, r2 + 1, r2 + 6), p2(this, r2 + 2, r2 + 5), p2(this, r2 + 3, r2 + 4);
        return this;
      }, i.prototype.toLocaleString = i.prototype.toString = function() {
        var t3 = this.length;
        return t3 === 0 ? "" : arguments.length === 0 ? A2(this, 0, t3) : l2.apply(this, arguments);
      }, i.prototype.equals = function(t3) {
        if (!i.isBuffer(t3))
          throw new TypeError("Argument must be a Buffer");
        return this === t3 || i.compare(this, t3) === 0;
      }, i.prototype.inspect = function() {
        var t3 = "", e2 = r.INSPECT_MAX_BYTES;
        return t3 = this.toString("hex", 0, e2).replace(/(.{2})/g, "$1 ").trim(), this.length > e2 && (t3 += " ... "), "<Buffer " + t3 + ">";
      }, e && (i.prototype[e] = i.prototype.inspect), i.prototype.compare = function(t3, r2, e2, n2, o3) {
        if (R2(t3, Uint8Array) && (t3 = i.from(t3, t3.offset, t3.byteLength)), !i.isBuffer(t3))
          throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t3);
        if (r2 === void 0 && (r2 = 0), e2 === void 0 && (e2 = t3 ? t3.length : 0), n2 === void 0 && (n2 = 0), o3 === void 0 && (o3 = this.length), r2 < 0 || e2 > t3.length || n2 < 0 || o3 > this.length)
          throw new RangeError("out of range index");
        if (n2 >= o3 && r2 >= e2)
          return 0;
        if (n2 >= o3)
          return -1;
        if (r2 >= e2)
          return 1;
        if (this === t3)
          return 0;
        for (var f3 = (o3 >>>= 0) - (n2 >>>= 0), u3 = (e2 >>>= 0) - (r2 >>>= 0), a3 = Math.min(f3, u3), s3 = this.slice(n2, o3), h3 = t3.slice(r2, e2), c3 = 0; c3 < a3; ++c3)
          if (s3[c3] !== h3[c3]) {
            f3 = s3[c3], u3 = h3[c3];
            break;
          }
        return f3 < u3 ? -1 : u3 < f3 ? 1 : 0;
      }, i.prototype.includes = function(t3, r2, e2) {
        return this.indexOf(t3, r2, e2) !== -1;
      }, i.prototype.indexOf = function(t3, r2, e2) {
        return d2(this, t3, r2, e2, true);
      }, i.prototype.lastIndexOf = function(t3, r2, e2) {
        return d2(this, t3, r2, e2, false);
      }, i.prototype.write = function(t3, r2, e2, n2) {
        if (r2 === void 0)
          n2 = "utf8", e2 = this.length, r2 = 0;
        else if (e2 === void 0 && typeof r2 == "string")
          n2 = r2, e2 = this.length, r2 = 0;
        else {
          if (!isFinite(r2))
            throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          r2 >>>= 0, isFinite(e2) ? (e2 >>>= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = e2, e2 = void 0);
        }
        var i2 = this.length - r2;
        if ((e2 === void 0 || e2 > i2) && (e2 = i2), t3.length > 0 && (e2 < 0 || r2 < 0) || r2 > this.length)
          throw new RangeError("Attempt to write outside buffer bounds");
        n2 || (n2 = "utf8");
        for (var o3 = false; ; )
          switch (n2) {
            case "hex":
              return y2(this, t3, r2, e2);
            case "utf8":
            case "utf-8":
              return v2(this, t3, r2, e2);
            case "ascii":
              return w2(this, t3, r2, e2);
            case "latin1":
            case "binary":
              return b2(this, t3, r2, e2);
            case "base64":
              return m2(this, t3, r2, e2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return E2(this, t3, r2, e2);
            default:
              if (o3)
                throw new TypeError("Unknown encoding: " + n2);
              n2 = ("" + n2).toLowerCase(), o3 = true;
          }
      }, i.prototype.toJSON = function() {
        return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
      }, i.prototype.slice = function(t3, r2) {
        var e2 = this.length;
        (t3 = ~~t3) < 0 ? (t3 += e2) < 0 && (t3 = 0) : t3 > e2 && (t3 = e2), (r2 = r2 === void 0 ? e2 : ~~r2) < 0 ? (r2 += e2) < 0 && (r2 = 0) : r2 > e2 && (r2 = e2), r2 < t3 && (r2 = t3);
        var n2 = this.subarray(t3, r2);
        return Object.setPrototypeOf(n2, i.prototype), n2;
      }, i.prototype.readUIntLE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
          n2 += this[t3 + o3] * i2;
        return n2;
      }, i.prototype.readUIntBE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3 + --r2], i2 = 1; r2 > 0 && (i2 *= 256); )
          n2 += this[t3 + --r2] * i2;
        return n2;
      }, i.prototype.readUInt8 = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 1, this.length), this[t3];
      }, i.prototype.readUInt16LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 2, this.length), this[t3] | this[t3 + 1] << 8;
      }, i.prototype.readUInt16BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 2, this.length), this[t3] << 8 | this[t3 + 1];
      }, i.prototype.readUInt32LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), (this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16) + 16777216 * this[t3 + 3];
      }, i.prototype.readUInt32BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), 16777216 * this[t3] + (this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3]);
      }, i.prototype.readIntLE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
          n2 += this[t3 + o3] * i2;
        return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * r2)), n2;
      }, i.prototype.readIntBE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = r2, i2 = 1, o3 = this[t3 + --n2]; n2 > 0 && (i2 *= 256); )
          o3 += this[t3 + --n2] * i2;
        return o3 >= (i2 *= 128) && (o3 -= Math.pow(2, 8 * r2)), o3;
      }, i.prototype.readInt8 = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 1, this.length), 128 & this[t3] ? -1 * (255 - this[t3] + 1) : this[t3];
      }, i.prototype.readInt16LE = function(t3, r2) {
        t3 >>>= 0, r2 || x2(t3, 2, this.length);
        var e2 = this[t3] | this[t3 + 1] << 8;
        return 32768 & e2 ? 4294901760 | e2 : e2;
      }, i.prototype.readInt16BE = function(t3, r2) {
        t3 >>>= 0, r2 || x2(t3, 2, this.length);
        var e2 = this[t3 + 1] | this[t3] << 8;
        return 32768 & e2 ? 4294901760 | e2 : e2;
      }, i.prototype.readInt32LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16 | this[t3 + 3] << 24;
      }, i.prototype.readInt32BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), this[t3] << 24 | this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3];
      }, i.prototype.readFloatLE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), $(this, t3, true, 23, 4);
      }, i.prototype.readFloatBE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), $(this, t3, false, 23, 4);
      }, i.prototype.readDoubleLE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 8, this.length), $(this, t3, true, 52, 8);
      }, i.prototype.readDoubleBE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 8, this.length), $(this, t3, false, 52, 8);
      }, i.prototype.writeUIntLE = function(t3, r2, e2, n2) {
        t3 = +t3, r2 >>>= 0, e2 >>>= 0, n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
        var i2 = 1, o3 = 0;
        for (this[r2] = 255 & t3; ++o3 < e2 && (i2 *= 256); )
          this[r2 + o3] = t3 / i2 & 255;
        return r2 + e2;
      }, i.prototype.writeUIntBE = function(t3, r2, e2, n2) {
        t3 = +t3, r2 >>>= 0, e2 >>>= 0, n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
        var i2 = e2 - 1, o3 = 1;
        for (this[r2 + i2] = 255 & t3; --i2 >= 0 && (o3 *= 256); )
          this[r2 + i2] = t3 / o3 & 255;
        return r2 + e2;
      }, i.prototype.writeUInt8 = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 1, 255, 0), this[r2] = 255 & t3, r2 + 1;
      }, i.prototype.writeUInt16LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 65535, 0), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, r2 + 2;
      }, i.prototype.writeUInt16BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 65535, 0), this[r2] = t3 >>> 8, this[r2 + 1] = 255 & t3, r2 + 2;
      }, i.prototype.writeUInt32LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 4294967295, 0), this[r2 + 3] = t3 >>> 24, this[r2 + 2] = t3 >>> 16, this[r2 + 1] = t3 >>> 8, this[r2] = 255 & t3, r2 + 4;
      }, i.prototype.writeUInt32BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 4294967295, 0), this[r2] = t3 >>> 24, this[r2 + 1] = t3 >>> 16, this[r2 + 2] = t3 >>> 8, this[r2 + 3] = 255 & t3, r2 + 4;
      }, i.prototype.writeIntLE = function(t3, r2, e2, n2) {
        if (t3 = +t3, r2 >>>= 0, !n2) {
          var i2 = Math.pow(2, 8 * e2 - 1);
          k2(this, t3, r2, e2, i2 - 1, -i2);
        }
        var o3 = 0, f3 = 1, u3 = 0;
        for (this[r2] = 255 & t3; ++o3 < e2 && (f3 *= 256); )
          t3 < 0 && u3 === 0 && this[r2 + o3 - 1] !== 0 && (u3 = 1), this[r2 + o3] = (t3 / f3 >> 0) - u3 & 255;
        return r2 + e2;
      }, i.prototype.writeIntBE = function(t3, r2, e2, n2) {
        if (t3 = +t3, r2 >>>= 0, !n2) {
          var i2 = Math.pow(2, 8 * e2 - 1);
          k2(this, t3, r2, e2, i2 - 1, -i2);
        }
        var o3 = e2 - 1, f3 = 1, u3 = 0;
        for (this[r2 + o3] = 255 & t3; --o3 >= 0 && (f3 *= 256); )
          t3 < 0 && u3 === 0 && this[r2 + o3 + 1] !== 0 && (u3 = 1), this[r2 + o3] = (t3 / f3 >> 0) - u3 & 255;
        return r2 + e2;
      }, i.prototype.writeInt8 = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 1, 127, -128), t3 < 0 && (t3 = 255 + t3 + 1), this[r2] = 255 & t3, r2 + 1;
      }, i.prototype.writeInt16LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 32767, -32768), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, r2 + 2;
      }, i.prototype.writeInt16BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 32767, -32768), this[r2] = t3 >>> 8, this[r2 + 1] = 255 & t3, r2 + 2;
      }, i.prototype.writeInt32LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 2147483647, -2147483648), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, this[r2 + 2] = t3 >>> 16, this[r2 + 3] = t3 >>> 24, r2 + 4;
      }, i.prototype.writeInt32BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 2147483647, -2147483648), t3 < 0 && (t3 = 4294967295 + t3 + 1), this[r2] = t3 >>> 24, this[r2 + 1] = t3 >>> 16, this[r2 + 2] = t3 >>> 8, this[r2 + 3] = 255 & t3, r2 + 4;
      }, i.prototype.writeFloatLE = function(t3, r2, e2) {
        return C2(this, t3, r2, true, e2);
      }, i.prototype.writeFloatBE = function(t3, r2, e2) {
        return C2(this, t3, r2, false, e2);
      }, i.prototype.writeDoubleLE = function(t3, r2, e2) {
        return M2(this, t3, r2, true, e2);
      }, i.prototype.writeDoubleBE = function(t3, r2, e2) {
        return M2(this, t3, r2, false, e2);
      }, i.prototype.copy = function(t3, r2, e2, n2) {
        if (!i.isBuffer(t3))
          throw new TypeError("argument should be a Buffer");
        if (e2 || (e2 = 0), n2 || n2 === 0 || (n2 = this.length), r2 >= t3.length && (r2 = t3.length), r2 || (r2 = 0), n2 > 0 && n2 < e2 && (n2 = e2), n2 === e2)
          return 0;
        if (t3.length === 0 || this.length === 0)
          return 0;
        if (r2 < 0)
          throw new RangeError("targetStart out of bounds");
        if (e2 < 0 || e2 >= this.length)
          throw new RangeError("Index out of range");
        if (n2 < 0)
          throw new RangeError("sourceEnd out of bounds");
        n2 > this.length && (n2 = this.length), t3.length - r2 < n2 - e2 && (n2 = t3.length - r2 + e2);
        var o3 = n2 - e2;
        if (this === t3 && typeof Uint8Array.prototype.copyWithin == "function")
          this.copyWithin(r2, e2, n2);
        else if (this === t3 && e2 < r2 && r2 < n2)
          for (var f3 = o3 - 1; f3 >= 0; --f3)
            t3[f3 + r2] = this[f3 + e2];
        else
          Uint8Array.prototype.set.call(t3, this.subarray(e2, n2), r2);
        return o3;
      }, i.prototype.fill = function(t3, r2, e2, n2) {
        if (typeof t3 == "string") {
          if (typeof r2 == "string" ? (n2 = r2, r2 = 0, e2 = this.length) : typeof e2 == "string" && (n2 = e2, e2 = this.length), n2 !== void 0 && typeof n2 != "string")
            throw new TypeError("encoding must be a string");
          if (typeof n2 == "string" && !i.isEncoding(n2))
            throw new TypeError("Unknown encoding: " + n2);
          if (t3.length === 1) {
            var o3 = t3.charCodeAt(0);
            (n2 === "utf8" && o3 < 128 || n2 === "latin1") && (t3 = o3);
          }
        } else
          typeof t3 == "number" ? t3 &= 255 : typeof t3 == "boolean" && (t3 = Number(t3));
        if (r2 < 0 || this.length < r2 || this.length < e2)
          throw new RangeError("Out of range index");
        if (e2 <= r2)
          return this;
        var f3;
        if (r2 >>>= 0, e2 = e2 === void 0 ? this.length : e2 >>> 0, t3 || (t3 = 0), typeof t3 == "number")
          for (f3 = r2; f3 < e2; ++f3)
            this[f3] = t3;
        else {
          var u3 = i.isBuffer(t3) ? t3 : i.from(t3, n2), a3 = u3.length;
          if (a3 === 0)
            throw new TypeError('The value "' + t3 + '" is invalid for argument "value"');
          for (f3 = 0; f3 < e2 - r2; ++f3)
            this[f3 + r2] = u3[f3 % a3];
        }
        return this;
      };
      var T2 = /[^+/0-9A-Za-z-_]/g;
      function L2(t3, r2) {
        var e2;
        r2 = r2 || Infinity;
        for (var n2 = t3.length, i2 = null, o3 = [], f3 = 0; f3 < n2; ++f3) {
          if ((e2 = t3.charCodeAt(f3)) > 55295 && e2 < 57344) {
            if (!i2) {
              if (e2 > 56319) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189);
                continue;
              }
              if (f3 + 1 === n2) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189);
                continue;
              }
              i2 = e2;
              continue;
            }
            if (e2 < 56320) {
              (r2 -= 3) > -1 && o3.push(239, 191, 189), i2 = e2;
              continue;
            }
            e2 = 65536 + (i2 - 55296 << 10 | e2 - 56320);
          } else
            i2 && (r2 -= 3) > -1 && o3.push(239, 191, 189);
          if (i2 = null, e2 < 128) {
            if ((r2 -= 1) < 0)
              break;
            o3.push(e2);
          } else if (e2 < 2048) {
            if ((r2 -= 2) < 0)
              break;
            o3.push(e2 >> 6 | 192, 63 & e2 | 128);
          } else if (e2 < 65536) {
            if ((r2 -= 3) < 0)
              break;
            o3.push(e2 >> 12 | 224, e2 >> 6 & 63 | 128, 63 & e2 | 128);
          } else {
            if (!(e2 < 1114112))
              throw new Error("Invalid code point");
            if ((r2 -= 4) < 0)
              break;
            o3.push(e2 >> 18 | 240, e2 >> 12 & 63 | 128, e2 >> 6 & 63 | 128, 63 & e2 | 128);
          }
        }
        return o3;
      }
      function P2(t3) {
        return G(function(t4) {
          if ((t4 = (t4 = t4.split("=")[0]).trim().replace(T2, "")).length < 2)
            return "";
          for (; t4.length % 4 != 0; )
            t4 += "=";
          return t4;
        }(t3));
      }
      function z2(t3, r2, e2, n2) {
        for (var i2 = 0; i2 < n2 && !(i2 + e2 >= r2.length || i2 >= t3.length); ++i2)
          r2[i2 + e2] = t3[i2];
        return i2;
      }
      function R2(t3, r2) {
        return t3 instanceof r2 || t3 != null && t3.constructor != null && t3.constructor.name != null && t3.constructor.name === r2.name;
      }
      function N2(t3) {
        return t3 != t3;
      }
      var q2 = function() {
        for (var t3 = new Array(256), r2 = 0; r2 < 16; ++r2)
          for (var e2 = 16 * r2, n2 = 0; n2 < 16; ++n2)
            t3[e2 + n2] = "0123456789abcdef"[r2] + "0123456789abcdef"[n2];
        return t3;
      }();
    });
    et = l(function(t2, r) {
      var e = rt.Buffer;
      function n(t3, r2) {
        for (var e2 in t3)
          r2[e2] = t3[e2];
      }
      function i(t3, r2, n2) {
        return e(t3, r2, n2);
      }
      e.from && e.alloc && e.allocUnsafe && e.allocUnsafeSlow ? t2.exports = rt : (n(rt, r), r.Buffer = i), i.prototype = Object.create(e.prototype), n(e, i), i.from = function(t3, r2, n2) {
        if (typeof t3 == "number")
          throw new TypeError("Argument must not be a number");
        return e(t3, r2, n2);
      }, i.alloc = function(t3, r2, n2) {
        if (typeof t3 != "number")
          throw new TypeError("Argument must be a number");
        var i2 = e(t3);
        return r2 !== void 0 ? typeof n2 == "string" ? i2.fill(r2, n2) : i2.fill(r2) : i2.fill(0), i2;
      }, i.allocUnsafe = function(t3) {
        if (typeof t3 != "number")
          throw new TypeError("Argument must be a number");
        return e(t3);
      }, i.allocUnsafeSlow = function(t3) {
        if (typeof t3 != "number")
          throw new TypeError("Argument must be a number");
        return rt.SlowBuffer(t3);
      };
    });
    nt = et.Buffer;
    it = function(t2) {
      if (t2.length >= 255)
        throw new TypeError("Alphabet too long");
      for (var r = new Uint8Array(256), e = 0; e < r.length; e++)
        r[e] = 255;
      for (var n = 0; n < t2.length; n++) {
        var i = t2.charAt(n), o2 = i.charCodeAt(0);
        if (r[o2] !== 255)
          throw new TypeError(i + " is ambiguous");
        r[o2] = n;
      }
      var f2 = t2.length, u2 = t2.charAt(0), a2 = Math.log(f2) / Math.log(256), s2 = Math.log(256) / Math.log(f2);
      function h2(t3) {
        if (typeof t3 != "string")
          throw new TypeError("Expected String");
        if (t3.length === 0)
          return nt.alloc(0);
        var e2 = 0;
        if (t3[e2] !== " ") {
          for (var n2 = 0, i2 = 0; t3[e2] === u2; )
            n2++, e2++;
          for (var o3 = (t3.length - e2) * a2 + 1 >>> 0, s3 = new Uint8Array(o3); t3[e2]; ) {
            var h3 = r[t3.charCodeAt(e2)];
            if (h3 === 255)
              return;
            for (var c2 = 0, l2 = o3 - 1; (h3 !== 0 || c2 < i2) && l2 !== -1; l2--, c2++)
              s3[l2] = (h3 += f2 * s3[l2] >>> 0) % 256 >>> 0, h3 = h3 / 256 >>> 0;
            if (h3 !== 0)
              throw new Error("Non-zero carry");
            i2 = c2, e2++;
          }
          if (t3[e2] !== " ") {
            for (var p2 = o3 - i2; p2 !== o3 && s3[p2] === 0; )
              p2++;
            var d2 = nt.allocUnsafe(n2 + (o3 - p2));
            d2.fill(0, 0, n2);
            for (var g2 = n2; p2 !== o3; )
              d2[g2++] = s3[p2++];
            return d2;
          }
        }
      }
      return { encode: function(r2) {
        if ((Array.isArray(r2) || r2 instanceof Uint8Array) && (r2 = nt.from(r2)), !nt.isBuffer(r2))
          throw new TypeError("Expected Buffer");
        if (r2.length === 0)
          return "";
        for (var e2 = 0, n2 = 0, i2 = 0, o3 = r2.length; i2 !== o3 && r2[i2] === 0; )
          i2++, e2++;
        for (var a3 = (o3 - i2) * s2 + 1 >>> 0, h3 = new Uint8Array(a3); i2 !== o3; ) {
          for (var c2 = r2[i2], l2 = 0, p2 = a3 - 1; (c2 !== 0 || l2 < n2) && p2 !== -1; p2--, l2++)
            h3[p2] = (c2 += 256 * h3[p2] >>> 0) % f2 >>> 0, c2 = c2 / f2 >>> 0;
          if (c2 !== 0)
            throw new Error("Non-zero carry");
          n2 = l2, i2++;
        }
        for (var d2 = a3 - n2; d2 !== a3 && h3[d2] === 0; )
          d2++;
        for (var g2 = u2.repeat(e2); d2 < a3; ++d2)
          g2 += t2.charAt(h3[d2]);
        return g2;
      }, decodeUnsafe: h2, decode: function(t3) {
        var r2 = h2(t3);
        if (r2)
          return r2;
        throw new Error("Non-base" + f2 + " character");
      } };
    };
    ot = it("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    ft = l(function(t2, r) {
      var e = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
      function n(t3) {
        if (t3 > 2147483647)
          throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
        var r2 = new Uint8Array(t3);
        return Object.setPrototypeOf(r2, i.prototype), r2;
      }
      function i(t3, r2, e2) {
        if (typeof t3 == "number") {
          if (typeof r2 == "string")
            throw new TypeError('The "string" argument must be of type string. Received type number');
          return u2(t3);
        }
        return o2(t3, r2, e2);
      }
      function o2(t3, r2, e2) {
        if (typeof t3 == "string")
          return function(t4, r3) {
            if (typeof r3 == "string" && r3 !== "" || (r3 = "utf8"), !i.isEncoding(r3))
              throw new TypeError("Unknown encoding: " + r3);
            var e3 = 0 | c2(t4, r3), o4 = n(e3), f4 = o4.write(t4, r3);
            return f4 !== e3 && (o4 = o4.slice(0, f4)), o4;
          }(t3, r2);
        if (ArrayBuffer.isView(t3))
          return a2(t3);
        if (t3 == null)
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t3);
        if (R2(t3, ArrayBuffer) || t3 && R2(t3.buffer, ArrayBuffer))
          return s2(t3, r2, e2);
        if (typeof SharedArrayBuffer != "undefined" && (R2(t3, SharedArrayBuffer) || t3 && R2(t3.buffer, SharedArrayBuffer)))
          return s2(t3, r2, e2);
        if (typeof t3 == "number")
          throw new TypeError('The "value" argument must not be of type number. Received type number');
        var o3 = t3.valueOf && t3.valueOf();
        if (o3 != null && o3 !== t3)
          return i.from(o3, r2, e2);
        var f3 = function(t4) {
          if (i.isBuffer(t4)) {
            var r3 = 0 | h2(t4.length), e3 = n(r3);
            return e3.length === 0 || t4.copy(e3, 0, 0, r3), e3;
          }
          return t4.length !== void 0 ? typeof t4.length != "number" || N2(t4.length) ? n(0) : a2(t4) : t4.type === "Buffer" && Array.isArray(t4.data) ? a2(t4.data) : void 0;
        }(t3);
        if (f3)
          return f3;
        if (typeof Symbol != "undefined" && Symbol.toPrimitive != null && typeof t3[Symbol.toPrimitive] == "function")
          return i.from(t3[Symbol.toPrimitive]("string"), r2, e2);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t3);
      }
      function f2(t3) {
        if (typeof t3 != "number")
          throw new TypeError('"size" argument must be of type number');
        if (t3 < 0)
          throw new RangeError('The value "' + t3 + '" is invalid for option "size"');
      }
      function u2(t3) {
        return f2(t3), n(t3 < 0 ? 0 : 0 | h2(t3));
      }
      function a2(t3) {
        for (var r2 = t3.length < 0 ? 0 : 0 | h2(t3.length), e2 = n(r2), i2 = 0; i2 < r2; i2 += 1)
          e2[i2] = 255 & t3[i2];
        return e2;
      }
      function s2(t3, r2, e2) {
        if (r2 < 0 || t3.byteLength < r2)
          throw new RangeError('"offset" is outside of buffer bounds');
        if (t3.byteLength < r2 + (e2 || 0))
          throw new RangeError('"length" is outside of buffer bounds');
        var n2;
        return n2 = r2 === void 0 && e2 === void 0 ? new Uint8Array(t3) : e2 === void 0 ? new Uint8Array(t3, r2) : new Uint8Array(t3, r2, e2), Object.setPrototypeOf(n2, i.prototype), n2;
      }
      function h2(t3) {
        if (t3 >= 2147483647)
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647 .toString(16) + " bytes");
        return 0 | t3;
      }
      function c2(t3, r2) {
        if (i.isBuffer(t3))
          return t3.length;
        if (ArrayBuffer.isView(t3) || R2(t3, ArrayBuffer))
          return t3.byteLength;
        if (typeof t3 != "string")
          throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t3);
        var e2 = t3.length, n2 = arguments.length > 2 && arguments[2] === true;
        if (!n2 && e2 === 0)
          return 0;
        for (var o3 = false; ; )
          switch (r2) {
            case "ascii":
            case "latin1":
            case "binary":
              return e2;
            case "utf8":
            case "utf-8":
              return L2(t3).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * e2;
            case "hex":
              return e2 >>> 1;
            case "base64":
              return P2(t3).length;
            default:
              if (o3)
                return n2 ? -1 : L2(t3).length;
              r2 = ("" + r2).toLowerCase(), o3 = true;
          }
      }
      function l2(t3, r2, e2) {
        var n2 = false;
        if ((r2 === void 0 || r2 < 0) && (r2 = 0), r2 > this.length)
          return "";
        if ((e2 === void 0 || e2 > this.length) && (e2 = this.length), e2 <= 0)
          return "";
        if ((e2 >>>= 0) <= (r2 >>>= 0))
          return "";
        for (t3 || (t3 = "utf8"); ; )
          switch (t3) {
            case "hex":
              return _2(this, r2, e2);
            case "utf8":
            case "utf-8":
              return A2(this, r2, e2);
            case "ascii":
              return U2(this, r2, e2);
            case "latin1":
            case "binary":
              return I2(this, r2, e2);
            case "base64":
              return B2(this, r2, e2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return S2(this, r2, e2);
            default:
              if (n2)
                throw new TypeError("Unknown encoding: " + t3);
              t3 = (t3 + "").toLowerCase(), n2 = true;
          }
      }
      function p2(t3, r2, e2) {
        var n2 = t3[r2];
        t3[r2] = t3[e2], t3[e2] = n2;
      }
      function d2(t3, r2, e2, n2, o3) {
        if (t3.length === 0)
          return -1;
        if (typeof e2 == "string" ? (n2 = e2, e2 = 0) : e2 > 2147483647 ? e2 = 2147483647 : e2 < -2147483648 && (e2 = -2147483648), N2(e2 = +e2) && (e2 = o3 ? 0 : t3.length - 1), e2 < 0 && (e2 = t3.length + e2), e2 >= t3.length) {
          if (o3)
            return -1;
          e2 = t3.length - 1;
        } else if (e2 < 0) {
          if (!o3)
            return -1;
          e2 = 0;
        }
        if (typeof r2 == "string" && (r2 = i.from(r2, n2)), i.isBuffer(r2))
          return r2.length === 0 ? -1 : g2(t3, r2, e2, n2, o3);
        if (typeof r2 == "number")
          return r2 &= 255, typeof Uint8Array.prototype.indexOf == "function" ? o3 ? Uint8Array.prototype.indexOf.call(t3, r2, e2) : Uint8Array.prototype.lastIndexOf.call(t3, r2, e2) : g2(t3, [r2], e2, n2, o3);
        throw new TypeError("val must be string, number or Buffer");
      }
      function g2(t3, r2, e2, n2, i2) {
        var o3, f3 = 1, u3 = t3.length, a3 = r2.length;
        if (n2 !== void 0 && ((n2 = String(n2).toLowerCase()) === "ucs2" || n2 === "ucs-2" || n2 === "utf16le" || n2 === "utf-16le")) {
          if (t3.length < 2 || r2.length < 2)
            return -1;
          f3 = 2, u3 /= 2, a3 /= 2, e2 /= 2;
        }
        function s3(t4, r3) {
          return f3 === 1 ? t4[r3] : t4.readUInt16BE(r3 * f3);
        }
        if (i2) {
          var h3 = -1;
          for (o3 = e2; o3 < u3; o3++)
            if (s3(t3, o3) === s3(r2, h3 === -1 ? 0 : o3 - h3)) {
              if (h3 === -1 && (h3 = o3), o3 - h3 + 1 === a3)
                return h3 * f3;
            } else
              h3 !== -1 && (o3 -= o3 - h3), h3 = -1;
        } else
          for (e2 + a3 > u3 && (e2 = u3 - a3), o3 = e2; o3 >= 0; o3--) {
            for (var c3 = true, l3 = 0; l3 < a3; l3++)
              if (s3(t3, o3 + l3) !== s3(r2, l3)) {
                c3 = false;
                break;
              }
            if (c3)
              return o3;
          }
        return -1;
      }
      function y2(t3, r2, e2, n2) {
        e2 = Number(e2) || 0;
        var i2 = t3.length - e2;
        n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
        var o3 = r2.length;
        n2 > o3 / 2 && (n2 = o3 / 2);
        for (var f3 = 0; f3 < n2; ++f3) {
          var u3 = parseInt(r2.substr(2 * f3, 2), 16);
          if (N2(u3))
            return f3;
          t3[e2 + f3] = u3;
        }
        return f3;
      }
      function v2(t3, r2, e2, n2) {
        return z2(L2(r2, t3.length - e2), t3, e2, n2);
      }
      function w2(t3, r2, e2, n2) {
        return z2(function(t4) {
          for (var r3 = [], e3 = 0; e3 < t4.length; ++e3)
            r3.push(255 & t4.charCodeAt(e3));
          return r3;
        }(r2), t3, e2, n2);
      }
      function b2(t3, r2, e2, n2) {
        return w2(t3, r2, e2, n2);
      }
      function m2(t3, r2, e2, n2) {
        return z2(P2(r2), t3, e2, n2);
      }
      function E2(t3, r2, e2, n2) {
        return z2(function(t4, r3) {
          for (var e3, n3, i2 = [], o3 = 0; o3 < t4.length && !((r3 -= 2) < 0); ++o3)
            n3 = (e3 = t4.charCodeAt(o3)) >> 8, i2.push(e3 % 256), i2.push(n3);
          return i2;
        }(r2, t3.length - e2), t3, e2, n2);
      }
      function B2(t3, r2, e2) {
        return Q(r2 === 0 && e2 === t3.length ? t3 : t3.slice(r2, e2));
      }
      function A2(t3, r2, e2) {
        e2 = Math.min(t3.length, e2);
        for (var n2 = [], i2 = r2; i2 < e2; ) {
          var o3, f3, u3, a3, s3 = t3[i2], h3 = null, c3 = s3 > 239 ? 4 : s3 > 223 ? 3 : s3 > 191 ? 2 : 1;
          if (i2 + c3 <= e2)
            switch (c3) {
              case 1:
                s3 < 128 && (h3 = s3);
                break;
              case 2:
                (192 & (o3 = t3[i2 + 1])) == 128 && (a3 = (31 & s3) << 6 | 63 & o3) > 127 && (h3 = a3);
                break;
              case 3:
                f3 = t3[i2 + 2], (192 & (o3 = t3[i2 + 1])) == 128 && (192 & f3) == 128 && (a3 = (15 & s3) << 12 | (63 & o3) << 6 | 63 & f3) > 2047 && (a3 < 55296 || a3 > 57343) && (h3 = a3);
                break;
              case 4:
                f3 = t3[i2 + 2], u3 = t3[i2 + 3], (192 & (o3 = t3[i2 + 1])) == 128 && (192 & f3) == 128 && (192 & u3) == 128 && (a3 = (15 & s3) << 18 | (63 & o3) << 12 | (63 & f3) << 6 | 63 & u3) > 65535 && a3 < 1114112 && (h3 = a3);
            }
          h3 === null ? (h3 = 65533, c3 = 1) : h3 > 65535 && (n2.push((h3 -= 65536) >>> 10 & 1023 | 55296), h3 = 56320 | 1023 & h3), n2.push(h3), i2 += c3;
        }
        return function(t4) {
          var r3 = t4.length;
          if (r3 <= 4096)
            return String.fromCharCode.apply(String, t4);
          for (var e3 = "", n3 = 0; n3 < r3; )
            e3 += String.fromCharCode.apply(String, t4.slice(n3, n3 += 4096));
          return e3;
        }(n2);
      }
      function U2(t3, r2, e2) {
        var n2 = "";
        e2 = Math.min(t3.length, e2);
        for (var i2 = r2; i2 < e2; ++i2)
          n2 += String.fromCharCode(127 & t3[i2]);
        return n2;
      }
      function I2(t3, r2, e2) {
        var n2 = "";
        e2 = Math.min(t3.length, e2);
        for (var i2 = r2; i2 < e2; ++i2)
          n2 += String.fromCharCode(t3[i2]);
        return n2;
      }
      function _2(t3, r2, e2) {
        var n2 = t3.length;
        (!r2 || r2 < 0) && (r2 = 0), (!e2 || e2 < 0 || e2 > n2) && (e2 = n2);
        for (var i2 = "", o3 = r2; o3 < e2; ++o3)
          i2 += q2[t3[o3]];
        return i2;
      }
      function S2(t3, r2, e2) {
        for (var n2 = t3.slice(r2, e2), i2 = "", o3 = 0; o3 < n2.length; o3 += 2)
          i2 += String.fromCharCode(n2[o3] + 256 * n2[o3 + 1]);
        return i2;
      }
      function x2(t3, r2, e2) {
        if (t3 % 1 != 0 || t3 < 0)
          throw new RangeError("offset is not uint");
        if (t3 + r2 > e2)
          throw new RangeError("Trying to access beyond buffer length");
      }
      function k2(t3, r2, e2, n2, o3, f3) {
        if (!i.isBuffer(t3))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (r2 > o3 || r2 < f3)
          throw new RangeError('"value" argument is out of bounds');
        if (e2 + n2 > t3.length)
          throw new RangeError("Index out of range");
      }
      function O2(t3, r2, e2, n2, i2, o3) {
        if (e2 + n2 > t3.length)
          throw new RangeError("Index out of range");
        if (e2 < 0)
          throw new RangeError("Index out of range");
      }
      function C2(t3, r2, e2, n2, i2) {
        return r2 = +r2, e2 >>>= 0, i2 || O2(t3, 0, e2, 4), tt(t3, r2, e2, n2, 23, 4), e2 + 4;
      }
      function M2(t3, r2, e2, n2, i2) {
        return r2 = +r2, e2 >>>= 0, i2 || O2(t3, 0, e2, 8), tt(t3, r2, e2, n2, 52, 8), e2 + 8;
      }
      r.Buffer = i, r.SlowBuffer = function(t3) {
        return +t3 != t3 && (t3 = 0), i.alloc(+t3);
      }, r.INSPECT_MAX_BYTES = 50, r.kMaxLength = 2147483647, (i.TYPED_ARRAY_SUPPORT = function() {
        try {
          var t3 = new Uint8Array(1), r2 = { foo: function() {
            return 42;
          } };
          return Object.setPrototypeOf(r2, Uint8Array.prototype), Object.setPrototypeOf(t3, r2), t3.foo() === 42;
        } catch (t4) {
          return false;
        }
      }()) || typeof console == "undefined" || typeof console.error != "function" || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(i.prototype, "parent", { enumerable: true, get: function() {
        if (i.isBuffer(this))
          return this.buffer;
      } }), Object.defineProperty(i.prototype, "offset", { enumerable: true, get: function() {
        if (i.isBuffer(this))
          return this.byteOffset;
      } }), i.poolSize = 8192, i.from = function(t3, r2, e2) {
        return o2(t3, r2, e2);
      }, Object.setPrototypeOf(i.prototype, Uint8Array.prototype), Object.setPrototypeOf(i, Uint8Array), i.alloc = function(t3, r2, e2) {
        return function(t4, r3, e3) {
          return f2(t4), t4 <= 0 ? n(t4) : r3 !== void 0 ? typeof e3 == "string" ? n(t4).fill(r3, e3) : n(t4).fill(r3) : n(t4);
        }(t3, r2, e2);
      }, i.allocUnsafe = function(t3) {
        return u2(t3);
      }, i.allocUnsafeSlow = function(t3) {
        return u2(t3);
      }, i.isBuffer = function(t3) {
        return t3 != null && t3._isBuffer === true && t3 !== i.prototype;
      }, i.compare = function(t3, r2) {
        if (R2(t3, Uint8Array) && (t3 = i.from(t3, t3.offset, t3.byteLength)), R2(r2, Uint8Array) && (r2 = i.from(r2, r2.offset, r2.byteLength)), !i.isBuffer(t3) || !i.isBuffer(r2))
          throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (t3 === r2)
          return 0;
        for (var e2 = t3.length, n2 = r2.length, o3 = 0, f3 = Math.min(e2, n2); o3 < f3; ++o3)
          if (t3[o3] !== r2[o3]) {
            e2 = t3[o3], n2 = r2[o3];
            break;
          }
        return e2 < n2 ? -1 : n2 < e2 ? 1 : 0;
      }, i.isEncoding = function(t3) {
        switch (String(t3).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      }, i.concat = function(t3, r2) {
        if (!Array.isArray(t3))
          throw new TypeError('"list" argument must be an Array of Buffers');
        if (t3.length === 0)
          return i.alloc(0);
        var e2;
        if (r2 === void 0)
          for (r2 = 0, e2 = 0; e2 < t3.length; ++e2)
            r2 += t3[e2].length;
        var n2 = i.allocUnsafe(r2), o3 = 0;
        for (e2 = 0; e2 < t3.length; ++e2) {
          var f3 = t3[e2];
          if (R2(f3, Uint8Array) && (f3 = i.from(f3)), !i.isBuffer(f3))
            throw new TypeError('"list" argument must be an Array of Buffers');
          f3.copy(n2, o3), o3 += f3.length;
        }
        return n2;
      }, i.byteLength = c2, i.prototype._isBuffer = true, i.prototype.swap16 = function() {
        var t3 = this.length;
        if (t3 % 2 != 0)
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (var r2 = 0; r2 < t3; r2 += 2)
          p2(this, r2, r2 + 1);
        return this;
      }, i.prototype.swap32 = function() {
        var t3 = this.length;
        if (t3 % 4 != 0)
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (var r2 = 0; r2 < t3; r2 += 4)
          p2(this, r2, r2 + 3), p2(this, r2 + 1, r2 + 2);
        return this;
      }, i.prototype.swap64 = function() {
        var t3 = this.length;
        if (t3 % 8 != 0)
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (var r2 = 0; r2 < t3; r2 += 8)
          p2(this, r2, r2 + 7), p2(this, r2 + 1, r2 + 6), p2(this, r2 + 2, r2 + 5), p2(this, r2 + 3, r2 + 4);
        return this;
      }, i.prototype.toLocaleString = i.prototype.toString = function() {
        var t3 = this.length;
        return t3 === 0 ? "" : arguments.length === 0 ? A2(this, 0, t3) : l2.apply(this, arguments);
      }, i.prototype.equals = function(t3) {
        if (!i.isBuffer(t3))
          throw new TypeError("Argument must be a Buffer");
        return this === t3 || i.compare(this, t3) === 0;
      }, i.prototype.inspect = function() {
        var t3 = "", e2 = r.INSPECT_MAX_BYTES;
        return t3 = this.toString("hex", 0, e2).replace(/(.{2})/g, "$1 ").trim(), this.length > e2 && (t3 += " ... "), "<Buffer " + t3 + ">";
      }, e && (i.prototype[e] = i.prototype.inspect), i.prototype.compare = function(t3, r2, e2, n2, o3) {
        if (R2(t3, Uint8Array) && (t3 = i.from(t3, t3.offset, t3.byteLength)), !i.isBuffer(t3))
          throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t3);
        if (r2 === void 0 && (r2 = 0), e2 === void 0 && (e2 = t3 ? t3.length : 0), n2 === void 0 && (n2 = 0), o3 === void 0 && (o3 = this.length), r2 < 0 || e2 > t3.length || n2 < 0 || o3 > this.length)
          throw new RangeError("out of range index");
        if (n2 >= o3 && r2 >= e2)
          return 0;
        if (n2 >= o3)
          return -1;
        if (r2 >= e2)
          return 1;
        if (this === t3)
          return 0;
        for (var f3 = (o3 >>>= 0) - (n2 >>>= 0), u3 = (e2 >>>= 0) - (r2 >>>= 0), a3 = Math.min(f3, u3), s3 = this.slice(n2, o3), h3 = t3.slice(r2, e2), c3 = 0; c3 < a3; ++c3)
          if (s3[c3] !== h3[c3]) {
            f3 = s3[c3], u3 = h3[c3];
            break;
          }
        return f3 < u3 ? -1 : u3 < f3 ? 1 : 0;
      }, i.prototype.includes = function(t3, r2, e2) {
        return this.indexOf(t3, r2, e2) !== -1;
      }, i.prototype.indexOf = function(t3, r2, e2) {
        return d2(this, t3, r2, e2, true);
      }, i.prototype.lastIndexOf = function(t3, r2, e2) {
        return d2(this, t3, r2, e2, false);
      }, i.prototype.write = function(t3, r2, e2, n2) {
        if (r2 === void 0)
          n2 = "utf8", e2 = this.length, r2 = 0;
        else if (e2 === void 0 && typeof r2 == "string")
          n2 = r2, e2 = this.length, r2 = 0;
        else {
          if (!isFinite(r2))
            throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          r2 >>>= 0, isFinite(e2) ? (e2 >>>= 0, n2 === void 0 && (n2 = "utf8")) : (n2 = e2, e2 = void 0);
        }
        var i2 = this.length - r2;
        if ((e2 === void 0 || e2 > i2) && (e2 = i2), t3.length > 0 && (e2 < 0 || r2 < 0) || r2 > this.length)
          throw new RangeError("Attempt to write outside buffer bounds");
        n2 || (n2 = "utf8");
        for (var o3 = false; ; )
          switch (n2) {
            case "hex":
              return y2(this, t3, r2, e2);
            case "utf8":
            case "utf-8":
              return v2(this, t3, r2, e2);
            case "ascii":
              return w2(this, t3, r2, e2);
            case "latin1":
            case "binary":
              return b2(this, t3, r2, e2);
            case "base64":
              return m2(this, t3, r2, e2);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return E2(this, t3, r2, e2);
            default:
              if (o3)
                throw new TypeError("Unknown encoding: " + n2);
              n2 = ("" + n2).toLowerCase(), o3 = true;
          }
      }, i.prototype.toJSON = function() {
        return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
      }, i.prototype.slice = function(t3, r2) {
        var e2 = this.length;
        (t3 = ~~t3) < 0 ? (t3 += e2) < 0 && (t3 = 0) : t3 > e2 && (t3 = e2), (r2 = r2 === void 0 ? e2 : ~~r2) < 0 ? (r2 += e2) < 0 && (r2 = 0) : r2 > e2 && (r2 = e2), r2 < t3 && (r2 = t3);
        var n2 = this.subarray(t3, r2);
        return Object.setPrototypeOf(n2, i.prototype), n2;
      }, i.prototype.readUIntLE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
          n2 += this[t3 + o3] * i2;
        return n2;
      }, i.prototype.readUIntBE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3 + --r2], i2 = 1; r2 > 0 && (i2 *= 256); )
          n2 += this[t3 + --r2] * i2;
        return n2;
      }, i.prototype.readUInt8 = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 1, this.length), this[t3];
      }, i.prototype.readUInt16LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 2, this.length), this[t3] | this[t3 + 1] << 8;
      }, i.prototype.readUInt16BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 2, this.length), this[t3] << 8 | this[t3 + 1];
      }, i.prototype.readUInt32LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), (this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16) + 16777216 * this[t3 + 3];
      }, i.prototype.readUInt32BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), 16777216 * this[t3] + (this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3]);
      }, i.prototype.readIntLE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
          n2 += this[t3 + o3] * i2;
        return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * r2)), n2;
      }, i.prototype.readIntBE = function(t3, r2, e2) {
        t3 >>>= 0, r2 >>>= 0, e2 || x2(t3, r2, this.length);
        for (var n2 = r2, i2 = 1, o3 = this[t3 + --n2]; n2 > 0 && (i2 *= 256); )
          o3 += this[t3 + --n2] * i2;
        return o3 >= (i2 *= 128) && (o3 -= Math.pow(2, 8 * r2)), o3;
      }, i.prototype.readInt8 = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 1, this.length), 128 & this[t3] ? -1 * (255 - this[t3] + 1) : this[t3];
      }, i.prototype.readInt16LE = function(t3, r2) {
        t3 >>>= 0, r2 || x2(t3, 2, this.length);
        var e2 = this[t3] | this[t3 + 1] << 8;
        return 32768 & e2 ? 4294901760 | e2 : e2;
      }, i.prototype.readInt16BE = function(t3, r2) {
        t3 >>>= 0, r2 || x2(t3, 2, this.length);
        var e2 = this[t3 + 1] | this[t3] << 8;
        return 32768 & e2 ? 4294901760 | e2 : e2;
      }, i.prototype.readInt32LE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), this[t3] | this[t3 + 1] << 8 | this[t3 + 2] << 16 | this[t3 + 3] << 24;
      }, i.prototype.readInt32BE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), this[t3] << 24 | this[t3 + 1] << 16 | this[t3 + 2] << 8 | this[t3 + 3];
      }, i.prototype.readFloatLE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), $(this, t3, true, 23, 4);
      }, i.prototype.readFloatBE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 4, this.length), $(this, t3, false, 23, 4);
      }, i.prototype.readDoubleLE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 8, this.length), $(this, t3, true, 52, 8);
      }, i.prototype.readDoubleBE = function(t3, r2) {
        return t3 >>>= 0, r2 || x2(t3, 8, this.length), $(this, t3, false, 52, 8);
      }, i.prototype.writeUIntLE = function(t3, r2, e2, n2) {
        t3 = +t3, r2 >>>= 0, e2 >>>= 0, n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
        var i2 = 1, o3 = 0;
        for (this[r2] = 255 & t3; ++o3 < e2 && (i2 *= 256); )
          this[r2 + o3] = t3 / i2 & 255;
        return r2 + e2;
      }, i.prototype.writeUIntBE = function(t3, r2, e2, n2) {
        t3 = +t3, r2 >>>= 0, e2 >>>= 0, n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
        var i2 = e2 - 1, o3 = 1;
        for (this[r2 + i2] = 255 & t3; --i2 >= 0 && (o3 *= 256); )
          this[r2 + i2] = t3 / o3 & 255;
        return r2 + e2;
      }, i.prototype.writeUInt8 = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 1, 255, 0), this[r2] = 255 & t3, r2 + 1;
      }, i.prototype.writeUInt16LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 65535, 0), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, r2 + 2;
      }, i.prototype.writeUInt16BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 65535, 0), this[r2] = t3 >>> 8, this[r2 + 1] = 255 & t3, r2 + 2;
      }, i.prototype.writeUInt32LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 4294967295, 0), this[r2 + 3] = t3 >>> 24, this[r2 + 2] = t3 >>> 16, this[r2 + 1] = t3 >>> 8, this[r2] = 255 & t3, r2 + 4;
      }, i.prototype.writeUInt32BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 4294967295, 0), this[r2] = t3 >>> 24, this[r2 + 1] = t3 >>> 16, this[r2 + 2] = t3 >>> 8, this[r2 + 3] = 255 & t3, r2 + 4;
      }, i.prototype.writeIntLE = function(t3, r2, e2, n2) {
        if (t3 = +t3, r2 >>>= 0, !n2) {
          var i2 = Math.pow(2, 8 * e2 - 1);
          k2(this, t3, r2, e2, i2 - 1, -i2);
        }
        var o3 = 0, f3 = 1, u3 = 0;
        for (this[r2] = 255 & t3; ++o3 < e2 && (f3 *= 256); )
          t3 < 0 && u3 === 0 && this[r2 + o3 - 1] !== 0 && (u3 = 1), this[r2 + o3] = (t3 / f3 >> 0) - u3 & 255;
        return r2 + e2;
      }, i.prototype.writeIntBE = function(t3, r2, e2, n2) {
        if (t3 = +t3, r2 >>>= 0, !n2) {
          var i2 = Math.pow(2, 8 * e2 - 1);
          k2(this, t3, r2, e2, i2 - 1, -i2);
        }
        var o3 = e2 - 1, f3 = 1, u3 = 0;
        for (this[r2 + o3] = 255 & t3; --o3 >= 0 && (f3 *= 256); )
          t3 < 0 && u3 === 0 && this[r2 + o3 + 1] !== 0 && (u3 = 1), this[r2 + o3] = (t3 / f3 >> 0) - u3 & 255;
        return r2 + e2;
      }, i.prototype.writeInt8 = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 1, 127, -128), t3 < 0 && (t3 = 255 + t3 + 1), this[r2] = 255 & t3, r2 + 1;
      }, i.prototype.writeInt16LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 32767, -32768), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, r2 + 2;
      }, i.prototype.writeInt16BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 2, 32767, -32768), this[r2] = t3 >>> 8, this[r2 + 1] = 255 & t3, r2 + 2;
      }, i.prototype.writeInt32LE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 2147483647, -2147483648), this[r2] = 255 & t3, this[r2 + 1] = t3 >>> 8, this[r2 + 2] = t3 >>> 16, this[r2 + 3] = t3 >>> 24, r2 + 4;
      }, i.prototype.writeInt32BE = function(t3, r2, e2) {
        return t3 = +t3, r2 >>>= 0, e2 || k2(this, t3, r2, 4, 2147483647, -2147483648), t3 < 0 && (t3 = 4294967295 + t3 + 1), this[r2] = t3 >>> 24, this[r2 + 1] = t3 >>> 16, this[r2 + 2] = t3 >>> 8, this[r2 + 3] = 255 & t3, r2 + 4;
      }, i.prototype.writeFloatLE = function(t3, r2, e2) {
        return C2(this, t3, r2, true, e2);
      }, i.prototype.writeFloatBE = function(t3, r2, e2) {
        return C2(this, t3, r2, false, e2);
      }, i.prototype.writeDoubleLE = function(t3, r2, e2) {
        return M2(this, t3, r2, true, e2);
      }, i.prototype.writeDoubleBE = function(t3, r2, e2) {
        return M2(this, t3, r2, false, e2);
      }, i.prototype.copy = function(t3, r2, e2, n2) {
        if (!i.isBuffer(t3))
          throw new TypeError("argument should be a Buffer");
        if (e2 || (e2 = 0), n2 || n2 === 0 || (n2 = this.length), r2 >= t3.length && (r2 = t3.length), r2 || (r2 = 0), n2 > 0 && n2 < e2 && (n2 = e2), n2 === e2)
          return 0;
        if (t3.length === 0 || this.length === 0)
          return 0;
        if (r2 < 0)
          throw new RangeError("targetStart out of bounds");
        if (e2 < 0 || e2 >= this.length)
          throw new RangeError("Index out of range");
        if (n2 < 0)
          throw new RangeError("sourceEnd out of bounds");
        n2 > this.length && (n2 = this.length), t3.length - r2 < n2 - e2 && (n2 = t3.length - r2 + e2);
        var o3 = n2 - e2;
        if (this === t3 && typeof Uint8Array.prototype.copyWithin == "function")
          this.copyWithin(r2, e2, n2);
        else if (this === t3 && e2 < r2 && r2 < n2)
          for (var f3 = o3 - 1; f3 >= 0; --f3)
            t3[f3 + r2] = this[f3 + e2];
        else
          Uint8Array.prototype.set.call(t3, this.subarray(e2, n2), r2);
        return o3;
      }, i.prototype.fill = function(t3, r2, e2, n2) {
        if (typeof t3 == "string") {
          if (typeof r2 == "string" ? (n2 = r2, r2 = 0, e2 = this.length) : typeof e2 == "string" && (n2 = e2, e2 = this.length), n2 !== void 0 && typeof n2 != "string")
            throw new TypeError("encoding must be a string");
          if (typeof n2 == "string" && !i.isEncoding(n2))
            throw new TypeError("Unknown encoding: " + n2);
          if (t3.length === 1) {
            var o3 = t3.charCodeAt(0);
            (n2 === "utf8" && o3 < 128 || n2 === "latin1") && (t3 = o3);
          }
        } else
          typeof t3 == "number" ? t3 &= 255 : typeof t3 == "boolean" && (t3 = Number(t3));
        if (r2 < 0 || this.length < r2 || this.length < e2)
          throw new RangeError("Out of range index");
        if (e2 <= r2)
          return this;
        var f3;
        if (r2 >>>= 0, e2 = e2 === void 0 ? this.length : e2 >>> 0, t3 || (t3 = 0), typeof t3 == "number")
          for (f3 = r2; f3 < e2; ++f3)
            this[f3] = t3;
        else {
          var u3 = i.isBuffer(t3) ? t3 : i.from(t3, n2), a3 = u3.length;
          if (a3 === 0)
            throw new TypeError('The value "' + t3 + '" is invalid for argument "value"');
          for (f3 = 0; f3 < e2 - r2; ++f3)
            this[f3 + r2] = u3[f3 % a3];
        }
        return this;
      };
      var T2 = /[^+/0-9A-Za-z-_]/g;
      function L2(t3, r2) {
        var e2;
        r2 = r2 || Infinity;
        for (var n2 = t3.length, i2 = null, o3 = [], f3 = 0; f3 < n2; ++f3) {
          if ((e2 = t3.charCodeAt(f3)) > 55295 && e2 < 57344) {
            if (!i2) {
              if (e2 > 56319) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189);
                continue;
              }
              if (f3 + 1 === n2) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189);
                continue;
              }
              i2 = e2;
              continue;
            }
            if (e2 < 56320) {
              (r2 -= 3) > -1 && o3.push(239, 191, 189), i2 = e2;
              continue;
            }
            e2 = 65536 + (i2 - 55296 << 10 | e2 - 56320);
          } else
            i2 && (r2 -= 3) > -1 && o3.push(239, 191, 189);
          if (i2 = null, e2 < 128) {
            if ((r2 -= 1) < 0)
              break;
            o3.push(e2);
          } else if (e2 < 2048) {
            if ((r2 -= 2) < 0)
              break;
            o3.push(e2 >> 6 | 192, 63 & e2 | 128);
          } else if (e2 < 65536) {
            if ((r2 -= 3) < 0)
              break;
            o3.push(e2 >> 12 | 224, e2 >> 6 & 63 | 128, 63 & e2 | 128);
          } else {
            if (!(e2 < 1114112))
              throw new Error("Invalid code point");
            if ((r2 -= 4) < 0)
              break;
            o3.push(e2 >> 18 | 240, e2 >> 12 & 63 | 128, e2 >> 6 & 63 | 128, 63 & e2 | 128);
          }
        }
        return o3;
      }
      function P2(t3) {
        return G(function(t4) {
          if ((t4 = (t4 = t4.split("=")[0]).trim().replace(T2, "")).length < 2)
            return "";
          for (; t4.length % 4 != 0; )
            t4 += "=";
          return t4;
        }(t3));
      }
      function z2(t3, r2, e2, n2) {
        for (var i2 = 0; i2 < n2 && !(i2 + e2 >= r2.length || i2 >= t3.length); ++i2)
          r2[i2 + e2] = t3[i2];
        return i2;
      }
      function R2(t3, r2) {
        return t3 instanceof r2 || t3 != null && t3.constructor != null && t3.constructor.name != null && t3.constructor.name === r2.name;
      }
      function N2(t3) {
        return t3 != t3;
      }
      var q2 = function() {
        for (var t3 = new Array(256), r2 = 0; r2 < 16; ++r2)
          for (var e2 = 16 * r2, n2 = 0; n2 < 16; ++n2)
            t3[e2 + n2] = "0123456789abcdef"[r2] + "0123456789abcdef"[n2];
        return t3;
      }();
    });
    ut = function(t2, r) {
      return function(e, n) {
        var i = 2 * n, o2 = 2 * r;
        e[i] = t2[o2], e[i + 1] = t2[o2 + 1];
      };
    };
    at = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e, n = (e = ut) && e.__esModule ? e : { default: e };
      r.default = function(t3) {
        for (var r2 = t3.A, e2 = t3.C, i = 0; i < 25; i += 5) {
          for (var o2 = 0; o2 < 5; o2++)
            (0, n.default)(r2, i + o2)(e2, o2);
          for (var f2 = 0; f2 < 5; f2++) {
            var u2 = 2 * (i + f2), a2 = (f2 + 1) % 5 * 2, s2 = (f2 + 2) % 5 * 2;
            r2[u2] ^= ~e2[a2] & e2[s2], r2[u2 + 1] ^= ~e2[a2 + 1] & e2[s2 + 1];
          }
        }
      };
    });
    st = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);
      r.default = e;
    });
    ht = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e, n = (e = st) && e.__esModule ? e : { default: e };
      r.default = function(t3) {
        var r2 = t3.A, e2 = 2 * t3.roundIndex;
        r2[0] ^= n.default[e2], r2[1] ^= n.default[e2 + 1];
      };
    });
    ct = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0, r.default = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];
    });
    lt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0, r.default = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];
    });
    pt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e = o2(ct), n = o2(lt), i = o2(ut);
      function o2(t3) {
        return t3 && t3.__esModule ? t3 : { default: t3 };
      }
      r.default = function(t3) {
        var r2 = t3.A, o3 = t3.C, f2 = t3.W;
        (0, i.default)(r2, 1)(f2, 0);
        for (var u2 = 0, a2 = 0, s2 = 0, h2 = 32, c2 = 0; c2 < 24; c2++) {
          var l2 = e.default[c2], p2 = n.default[c2];
          (0, i.default)(r2, l2)(o3, 0), f2[s2 = p2 < 32 ? 0 : 1] = (u2 = f2[0]) << p2 | (a2 = f2[1]) >>> (h2 = 32 - p2), f2[(s2 + 1) % 2] = a2 << p2 | u2 >>> h2, (0, i.default)(f2, 0)(r2, l2), (0, i.default)(o3, 0)(f2, 0);
        }
      };
    });
    dt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e, n = (e = ut) && e.__esModule ? e : { default: e };
      r.default = function(t3) {
        for (var r2 = t3.A, e2 = t3.C, i = t3.D, o2 = t3.W, f2 = 0, u2 = 0, a2 = 0; a2 < 5; a2++) {
          var s2 = 2 * a2, h2 = 2 * (a2 + 5), c2 = 2 * (a2 + 10), l2 = 2 * (a2 + 15), p2 = 2 * (a2 + 20);
          e2[s2] = r2[s2] ^ r2[h2] ^ r2[c2] ^ r2[l2] ^ r2[p2], e2[s2 + 1] = r2[s2 + 1] ^ r2[h2 + 1] ^ r2[c2 + 1] ^ r2[l2 + 1] ^ r2[p2 + 1];
        }
        for (var d2 = 0; d2 < 5; d2++) {
          (0, n.default)(e2, (d2 + 1) % 5)(o2, 0), o2[0] = (f2 = o2[0]) << 1 | (u2 = o2[1]) >>> 31, o2[1] = u2 << 1 | f2 >>> 31, i[2 * d2] = e2[(d2 + 4) % 5 * 2] ^ o2[0], i[2 * d2 + 1] = e2[(d2 + 4) % 5 * 2 + 1] ^ o2[1];
          for (var g2 = 0; g2 < 25; g2 += 5)
            r2[2 * (g2 + d2)] ^= i[2 * d2], r2[2 * (g2 + d2) + 1] ^= i[2 * d2 + 1];
        }
      };
    });
    gt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e = f2(at), n = f2(ht), i = f2(pt), o2 = f2(dt);
      function f2(t3) {
        return t3 && t3.__esModule ? t3 : { default: t3 };
      }
      r.default = function() {
        var t3 = new Uint32Array(10), r2 = new Uint32Array(10), f3 = new Uint32Array(2);
        return function(u2) {
          for (var a2 = 0; a2 < 24; a2++)
            (0, o2.default)({ A: u2, C: t3, D: r2, W: f3 }), (0, i.default)({ A: u2, C: t3, W: f3 }), (0, e.default)({ A: u2, C: t3 }), (0, n.default)({ A: u2, roundIndex: a2 });
          t3.fill(0), r2.fill(0), f3.fill(0);
        };
      };
    });
    yt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var e, n = (e = gt) && e.__esModule ? e : { default: e }, i = function(t3, r2) {
        for (var e2 = 0; e2 < t3.length; e2 += 8) {
          var n2 = e2 / 4;
          r2[n2] ^= t3[e2 + 7] << 24 | t3[e2 + 6] << 16 | t3[e2 + 5] << 8 | t3[e2 + 4], r2[n2 + 1] ^= t3[e2 + 3] << 24 | t3[e2 + 2] << 16 | t3[e2 + 1] << 8 | t3[e2];
        }
        return r2;
      }, o2 = function(t3, r2) {
        for (var e2 = 0; e2 < r2.length; e2 += 8) {
          var n2 = e2 / 4;
          r2[e2] = t3[n2 + 1], r2[e2 + 1] = t3[n2 + 1] >>> 8, r2[e2 + 2] = t3[n2 + 1] >>> 16, r2[e2 + 3] = t3[n2 + 1] >>> 24, r2[e2 + 4] = t3[n2], r2[e2 + 5] = t3[n2] >>> 8, r2[e2 + 6] = t3[n2] >>> 16, r2[e2 + 7] = t3[n2] >>> 24;
        }
        return r2;
      };
      r.default = function(t3) {
        var r2 = this, e2 = t3.capacity, f2 = t3.padding, u2 = (0, n.default)(), a2 = e2 / 8, s2 = 200 - e2 / 4, h2 = 0, c2 = new Uint32Array(50), l2 = ft.Buffer.allocUnsafe(s2);
        return this.absorb = function(t4) {
          for (var e3 = 0; e3 < t4.length; e3++)
            l2[h2] = t4[e3], (h2 += 1) >= s2 && (i(l2, c2), u2(c2), h2 = 0);
          return r2;
        }, this.squeeze = function() {
          var t4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r3 = { buffer: t4.buffer || ft.Buffer.allocUnsafe(a2), padding: t4.padding || f2, queue: ft.Buffer.allocUnsafe(l2.length), state: new Uint32Array(c2.length) };
          l2.copy(r3.queue);
          for (var e3 = 0; e3 < c2.length; e3++)
            r3.state[e3] = c2[e3];
          r3.queue.fill(0, h2), r3.queue[h2] |= r3.padding, r3.queue[s2 - 1] |= 128, i(r3.queue, r3.state);
          for (var n2 = 0; n2 < r3.buffer.length; n2 += s2)
            u2(r3.state), o2(r3.state, r3.buffer.slice(n2, n2 + s2));
          return r3.buffer;
        }, this.reset = function() {
          return l2.fill(0), c2.fill(0), h2 = 0, r2;
        }, this;
      };
    });
    vt = l(function(t2, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = r.SHAKE = r.SHA3Hash = r.SHA3 = r.Keccak = void 0;
      var e, n = (e = yt) && e.__esModule ? e : { default: e }, i = function(t3) {
        var r2 = t3.allowedSizes, e2 = t3.padding;
        return function t4() {
          var i2 = this, o3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 512;
          if (!this || this.constructor !== t4)
            return new t4(o3);
          if (r2 && !r2.includes(o3))
            throw new Error("Unsupported hash length");
          var f3 = new n.default({ capacity: o3 });
          return this.update = function(t5) {
            var r3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "utf8";
            if (ft.Buffer.isBuffer(t5))
              return f3.absorb(t5), i2;
            if (typeof t5 == "string")
              return i2.update(ft.Buffer.from(t5, r3));
            throw new TypeError("Not a string or buffer");
          }, this.digest = function() {
            var t5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "binary", r3 = typeof t5 == "string" ? { format: t5 } : t5, n2 = f3.squeeze({ buffer: r3.buffer, padding: r3.padding || e2 });
            return r3.format && r3.format !== "binary" ? n2.toString(r3.format) : n2;
          }, this.reset = function() {
            return f3.reset(), i2;
          }, this;
        };
      }, o2 = i({ allowedSizes: [224, 256, 384, 512], padding: 1 });
      r.Keccak = o2;
      var f2 = i({ allowedSizes: [224, 256, 384, 512], padding: 6 });
      r.SHA3 = f2;
      var u2 = i({ allowedSizes: [128, 256], padding: 31 });
      r.SHAKE = u2;
      var a2 = o2;
      r.SHA3Hash = a2, f2.SHA3Hash = a2, r.default = f2;
    });
    wt = new Array(16);
    bt = Pt([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
    mt = Pt([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
    Et = Pt([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
    Bt = Pt([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
    At = Lt([0, 1518500249, 1859775393, 2400959708, 2840853838]);
    Ut = Lt([1352829926, 1548603684, 1836072691, 2053994217, 0]);
    Rt = class {
      constructor() {
        this._block = zt(64), this._blockSize = 64, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false, this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
      }
      update(t2) {
        if (this._finalized)
          throw new Error("Digest already called");
        const r = this._block;
        let e = 0;
        for (; this._blockOffset + t2.length - e >= this._blockSize; ) {
          for (let n = this._blockOffset; n < this._blockSize; )
            r[n++] = t2[e++];
          this._update(), this._blockOffset = 0;
        }
        for (; e < t2.length; )
          r[this._blockOffset++] = t2[e++];
        for (let r2 = 0, e2 = 8 * t2.length; e2 > 0; ++r2)
          this._length[r2] += e2, e2 = this._length[r2] / 4294967296 | 0, e2 > 0 && (this._length[r2] -= 4294967296 * e2);
        return this;
      }
      _update() {
        const t2 = wt;
        for (let r2 = 0; r2 < 16; ++r2)
          t2[r2] = Ct(this._block, 4 * r2);
        let r = 0 | this._a, e = 0 | this._b, n = 0 | this._c, i = 0 | this._d, o2 = 0 | this._e, f2 = 0 | this._a, u2 = 0 | this._b, a2 = 0 | this._c, s2 = 0 | this._d, h2 = 0 | this._e;
        for (let c3 = 0; c3 < 80; c3 += 1) {
          let l2, p2;
          c3 < 16 ? (l2 = _t(r, e, n, i, o2, t2[bt[c3]], At[0], Et[c3]), p2 = Ot(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[0], Bt[c3])) : c3 < 32 ? (l2 = St(r, e, n, i, o2, t2[bt[c3]], At[1], Et[c3]), p2 = kt(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[1], Bt[c3])) : c3 < 48 ? (l2 = xt(r, e, n, i, o2, t2[bt[c3]], At[2], Et[c3]), p2 = xt(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[2], Bt[c3])) : c3 < 64 ? (l2 = kt(r, e, n, i, o2, t2[bt[c3]], At[3], Et[c3]), p2 = St(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[3], Bt[c3])) : (l2 = Ot(r, e, n, i, o2, t2[bt[c3]], At[4], Et[c3]), p2 = _t(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[4], Bt[c3])), r = o2, o2 = i, i = It(n, 10), n = e, e = l2, f2 = h2, h2 = s2, s2 = It(a2, 10), a2 = u2, u2 = p2;
        }
        const c2 = this._b + n + s2 | 0;
        this._b = this._c + i + h2 | 0, this._c = this._d + o2 + f2 | 0, this._d = this._e + r + u2 | 0, this._e = this._a + e + a2 | 0, this._a = c2;
      }
      digest() {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true, this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), Mt(this._block, this._length[0], 56), Mt(this._block, this._length[1], 60), this._update();
        const t2 = zt(20);
        Tt(t2, this._a, 0), Tt(t2, this._b, 4), Tt(t2, this._c, 8), Tt(t2, this._d, 12), Tt(t2, this._e, 16), this._block.fill(0), this._blockOffset = 0;
        for (let t3 = 0; t3 < 4; ++t3)
          this._length[t3] = 0;
        return t2;
      }
    };
    qt = (Nt = { __proto__: null, RIPEMD160: Rt, default: Rt }) && Nt.default || Nt;
    jt = l(function(t2, r) {
      function e(t3) {
        return t3 && typeof t3 == "object" && "default" in t3 ? t3.default : t3;
      }
      var n = vt, i = e(it), o2 = et, f2 = e(p), u2 = e(ot), a2 = qt, s2 = k, h2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", c2 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"], l2 = function(t3) {
        for (var r2 = new ArrayBuffer(5 * t3.length / 8), e2 = new Uint8Array(r2), n2 = 0; n2 < t3.length / 8; n2++) {
          for (var i2 = [0, 0, 0, 0, 0, 0, 0, 0], o3 = 0; o3 < 8; ++o3)
            i2[o3] = h2.indexOf(t3[8 * n2 + o3]);
          e2[5 * n2 + 0] = i2[0] << 3 | i2[1] >> 2, e2[5 * n2 + 1] = (3 & i2[1]) << 6 | i2[2] << 1 | i2[3] >> 4, e2[5 * n2 + 2] = (15 & i2[3]) << 4 | i2[4] >> 1, e2[5 * n2 + 3] = (1 & i2[4]) << 7 | i2[5] << 2 | i2[6] >> 3, e2[5 * n2 + 4] = (7 & i2[6]) << 5 | i2[7];
        }
        return Buffer.from(e2);
      };
      function d2(t3, r2) {
        this._block = o2.Buffer.alloc(t3), this._finalSize = r2, this._blockSize = t3, this._len = 0;
      }
      d2.prototype.update = function(t3, r2) {
        typeof t3 == "string" && (t3 = o2.Buffer.from(t3, r2 = r2 || "utf8"));
        for (var e2 = this._block, n2 = this._blockSize, i2 = t3.length, f3 = this._len, u3 = 0; u3 < i2; ) {
          for (var a3 = f3 % n2, s3 = Math.min(i2 - u3, n2 - a3), h3 = 0; h3 < s3; h3++)
            e2[a3 + h3] = t3[u3 + h3];
          u3 += s3, (f3 += s3) % n2 == 0 && this._update(e2);
        }
        return this._len += i2, this;
      }, d2.prototype.digest = function(t3) {
        var r2 = this._len % this._blockSize;
        this._block[r2] = 128, this._block.fill(0, r2 + 1), r2 >= this._finalSize && (this._update(this._block), this._block.fill(0));
        var e2 = 8 * this._len;
        if (e2 <= 4294967295)
          this._block.writeUInt32BE(e2, this._blockSize - 4);
        else {
          var n2 = (4294967295 & e2) >>> 0;
          this._block.writeUInt32BE((e2 - n2) / 4294967296, this._blockSize - 8), this._block.writeUInt32BE(n2, this._blockSize - 4);
        }
        this._update(this._block);
        var i2 = this._hash();
        return t3 ? i2.toString(t3) : i2;
      }, d2.prototype._update = function() {
        throw new Error("_update must be implemented by subclass");
      };
      var g2, y2, v2 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], w2 = new Array(64);
      function b2() {
        this.init(), this._w = w2, d2.call(this, 64, 56);
      }
      function m2(t3, r2, e2) {
        return e2 ^ t3 & (r2 ^ e2);
      }
      function E2(t3, r2, e2) {
        return t3 & r2 | e2 & (t3 | r2);
      }
      function B2(t3) {
        return (t3 >>> 2 | t3 << 30) ^ (t3 >>> 13 | t3 << 19) ^ (t3 >>> 22 | t3 << 10);
      }
      function A2(t3) {
        return (t3 >>> 6 | t3 << 26) ^ (t3 >>> 11 | t3 << 21) ^ (t3 >>> 25 | t3 << 7);
      }
      function U2(t3) {
        return (t3 >>> 7 | t3 << 25) ^ (t3 >>> 18 | t3 << 14) ^ t3 >>> 3;
      }
      function I2(t3) {
        return t3.length !== void 0;
      }
      g2 = b2, (y2 = d2) && (g2.super_ = y2, g2.prototype = Object.create(y2.prototype, { constructor: { value: g2, enumerable: false, writable: true, configurable: true } })), b2.prototype.init = function() {
        return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
      }, b2.prototype._update = function(t3) {
        for (var r2, e2 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o3 = 0 | this._c, f3 = 0 | this._d, u3 = 0 | this._e, a3 = 0 | this._f, s3 = 0 | this._g, h3 = 0 | this._h, c3 = 0; c3 < 16; ++c3)
          e2[c3] = t3.readInt32BE(4 * c3);
        for (; c3 < 64; ++c3)
          e2[c3] = 0 | (((r2 = e2[c3 - 2]) >>> 17 | r2 << 15) ^ (r2 >>> 19 | r2 << 13) ^ r2 >>> 10) + e2[c3 - 7] + U2(e2[c3 - 15]) + e2[c3 - 16];
        for (var l3 = 0; l3 < 64; ++l3) {
          var p2 = h3 + A2(u3) + m2(u3, a3, s3) + v2[l3] + e2[l3] | 0, d3 = B2(n2) + E2(n2, i2, o3) | 0;
          h3 = s3, s3 = a3, a3 = u3, u3 = f3 + p2 | 0, f3 = o3, o3 = i2, i2 = n2, n2 = p2 + d3 | 0;
        }
        this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o3 + this._c | 0, this._d = f3 + this._d | 0, this._e = u3 + this._e | 0, this._f = a3 + this._f | 0, this._g = s3 + this._g | 0, this._h = h3 + this._h | 0;
      }, b2.prototype._hash = function() {
        var t3 = o2.Buffer.allocUnsafe(32);
        return t3.writeInt32BE(this._a, 0), t3.writeInt32BE(this._b, 4), t3.writeInt32BE(this._c, 8), t3.writeInt32BE(this._d, 12), t3.writeInt32BE(this._e, 16), t3.writeInt32BE(this._f, 20), t3.writeInt32BE(this._g, 24), t3.writeInt32BE(this._h, 28), t3;
      };
      var _2 = new (function() {
        function t3(t4) {
          this.sha256 = t4.sha256, this.alphabet = t4.alphabet, this.codec = i(this.alphabet), this.base = this.alphabet.length;
        }
        var r2 = t3.prototype;
        return r2.encodeChecked = function(t4) {
          var r3 = this.sha256(this.sha256(t4)).slice(0, 4);
          return this.encodeRaw(Buffer.from(function() {
            for (var t5 = [], r4 = arguments.length, e2 = new Array(r4), n2 = 0; n2 < r4; n2++)
              e2[n2] = arguments[n2];
            return e2.forEach(function(r5) {
              if (I2(r5))
                for (var e3 = 0; e3 < r5.length; e3++)
                  t5.push(r5[e3]);
              else
                t5.push(r5);
            }), t5;
          }(t4, r3)));
        }, r2.encodeRaw = function(t4) {
          return this.codec.encode(t4);
        }, r2.decodeChecked = function(t4) {
          var r3 = this.decodeRaw(t4);
          if (r3.length < 5)
            throw new Error("invalid_input_size: decoded data must have length >= 5");
          if (!this.verifyCheckSum(r3))
            throw new Error("checksum_invalid");
          return r3.slice(0, -4);
        }, r2.decodeRaw = function(t4) {
          return this.codec.decode(t4);
        }, r2.verifyCheckSum = function(t4) {
          return function(t5, r3) {
            if (t5.length !== r3.length)
              return false;
            for (var e2 = 0; e2 < t5.length; e2++)
              if (t5[e2] !== r3[e2])
                return false;
            return true;
          }(this.sha256(this.sha256(t4.slice(0, -4))).slice(0, 4), t4.slice(-4));
        }, t3;
      }())({ sha256: function(t3) {
        return new b2().update(Buffer.from(t3)).digest();
      }, alphabet: "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz" }), S2 = function(t3) {
        return t3.slice(0, 2) === "0x" ? t3.slice(2) : t3;
      }, x2 = function(t3, r2) {
        if (r2 === void 0 && (r2 = null), typeof t3 != "string")
          throw new Error("stripHexPrefix param must be type 'string', is currently type " + typeof t3 + ".");
        for (var e2, i2 = S2(t3).toLowerCase(), o3 = (e2 = (r2 != null ? r2.toString() + "0x" : "") + i2, new n.Keccak(256).update(e2).digest()).toString("hex"), f3 = "0x", u3 = 0; u3 < i2.length; u3++)
          f3 += parseInt(o3[u3], 16) >= 8 ? i2[u3].toUpperCase() : i2[u3];
        return f3;
      }, O2 = function(t3, r2) {
        if (!t3)
          throw r2;
      }, C2 = function(t3, r2) {
        if (!Buffer.isBuffer(t3))
          throw r2;
      }, M2 = f2.one, T2 = f2.zero, L2 = f2(3);
      function P2(t3, r2) {
        return t3.and(M2.shiftLeft(r2)).notEquals(T2);
      }
      function z2(t3) {
        return f2.fromArray(Array.prototype.slice.call(t3, 0), 256);
      }
      function R2(t3, r2) {
        var e2 = t3.toArray(256).value, n2 = r2 ? Math.max(r2 - e2.length, 0) : 0;
        return Buffer.from([].concat(Array(n2).fill(0), e2));
      }
      function N2(t3, r2, e2, n2) {
        O2(n2 !== void 0, "Missing Z coordinate"), this.curve = t3, this.x = r2, this.y = e2, this.z = n2, this._zInv = null, this.compressed = true;
      }
      Object.defineProperty(N2.prototype, "zInv", { get: function() {
        return this._zInv === null && (this._zInv = this.z.modInv(this.curve.p)), this._zInv;
      } }), Object.defineProperty(N2.prototype, "affineX", { get: function() {
        return this.x.multiply(this.zInv).mod(this.curve.p);
      } }), Object.defineProperty(N2.prototype, "affineY", { get: function() {
        return this.y.multiply(this.zInv).mod(this.curve.p);
      } }), N2.fromAffine = function(t3, r2, e2) {
        return new N2(t3, r2, e2, M2);
      }, N2.prototype.equals = function(t3) {
        return t3 === this || (this.curve.isInfinity(this) ? this.curve.isInfinity(t3) : this.curve.isInfinity(t3) ? this.curve.isInfinity(this) : t3.y.multiply(this.z).subtract(this.y.multiply(t3.z)).mod(this.curve.p).compare(T2) === 0 && t3.x.multiply(this.z).subtract(this.x.multiply(t3.z)).mod(this.curve.p).compare(T2) === 0);
      }, N2.prototype.negate = function() {
        var t3 = this.curve.p.subtract(this.y);
        return new N2(this.curve, this.x, t3, this.z);
      }, N2.prototype.add = function(t3) {
        if (this.curve.isInfinity(this))
          return t3;
        if (this.curve.isInfinity(t3))
          return this;
        var r2 = this.x, e2 = this.y, n2 = t3.x, i2 = t3.y.multiply(this.z).subtract(e2.multiply(t3.z)).mod(this.curve.p), o3 = n2.multiply(this.z).subtract(r2.multiply(t3.z)).mod(this.curve.p);
        if (o3.compare(T2) === 0)
          return i2.compare(T2) === 0 ? this.twice() : this.curve.infinity;
        var f3 = o3.square(), u3 = f3.multiply(o3), a3 = r2.multiply(f3), s3 = i2.square().multiply(this.z), h3 = s3.subtract(a3.shiftLeft(1)).multiply(t3.z).subtract(u3).multiply(o3).mod(this.curve.p), c3 = a3.multiply(L2).multiply(i2).subtract(e2.multiply(u3)).subtract(s3.multiply(i2)).multiply(t3.z).add(i2.multiply(u3)).mod(this.curve.p), l3 = u3.multiply(this.z).multiply(t3.z).mod(this.curve.p);
        return new N2(this.curve, h3, c3, l3);
      }, N2.prototype.twice = function() {
        if (this.curve.isInfinity(this))
          return this;
        if (this.y.compare(T2) === 0)
          return this.curve.infinity;
        var t3 = this.x, r2 = this.y, e2 = r2.multiply(this.z).mod(this.curve.p), n2 = e2.multiply(r2).mod(this.curve.p), i2 = this.curve.a, o3 = t3.square().multiply(L2);
        i2.compare(T2) !== 0 && (o3 = o3.add(this.z.square().multiply(i2)));
        var f3 = (o3 = o3.mod(this.curve.p)).square().subtract(t3.shiftLeft(3).multiply(n2)).shiftLeft(1).multiply(e2).mod(this.curve.p), u3 = o3.multiply(L2).multiply(t3).subtract(n2.shiftLeft(1)).shiftLeft(2).multiply(n2).subtract(o3.pow(3)).mod(this.curve.p), a3 = e2.pow(3).shiftLeft(3).mod(this.curve.p);
        return new N2(this.curve, f3, u3, a3);
      }, N2.prototype.multiply = function(t3) {
        if (this.curve.isInfinity(this))
          return this;
        if (t3.compare(T2) === 0)
          return this.curve.infinity;
        for (var r2 = t3, e2 = r2.multiply(L2), n2 = this.negate(), i2 = this, o3 = e2.bitLength() - 2; o3 > 0; --o3) {
          var f3 = P2(e2, o3), u3 = P2(r2, o3);
          i2 = i2.twice(), f3 !== u3 && (i2 = i2.add(f3 ? this : n2));
        }
        return i2;
      }, N2.prototype.multiplyTwo = function(t3, r2, e2) {
        for (var n2 = Math.max(t3.bitLength(), e2.bitLength()) - 1, i2 = this.curve.infinity, o3 = this.add(r2); n2 >= 0; ) {
          var f3 = P2(t3, n2), u3 = P2(e2, n2);
          i2 = i2.twice(), f3 ? i2 = i2.add(u3 ? o3 : this) : u3 && (i2 = i2.add(r2)), --n2;
        }
        return i2;
      }, N2.prototype.getEncoded = function(t3) {
        if (t3 == null && (t3 = this.compressed), this.curve.isInfinity(this))
          return new Buffer("00", "hex");
        var r2, e2 = this.affineX, n2 = this.affineY, i2 = this.curve.pLength;
        return t3 ? (r2 = new Buffer(1 + i2)).writeUInt8(n2.isEven() ? 2 : 3, 0) : ((r2 = new Buffer(1 + i2 + i2)).writeUInt8(4, 0), R2(n2, i2).copy(r2, 1 + i2)), R2(e2, i2).copy(r2, 1), r2;
      }, N2.decodeFrom = function(t3, r2) {
        var e2, n2 = r2.readUInt8(0), i2 = n2 !== 4, o3 = Math.floor((t3.p.bitLength() + 7) / 8), f3 = z2(r2.slice(1, 1 + o3));
        if (i2)
          O2(r2.length === o3 + 1, "Invalid sequence length"), O2(n2 === 2 || n2 === 3, "Invalid sequence tag"), e2 = t3.pointFromX(n2 === 3, f3);
        else {
          O2(r2.length === 1 + o3 + o3, "Invalid sequence length");
          var u3 = z2(r2.slice(1 + o3));
          e2 = N2.fromAffine(t3, f3, u3);
        }
        return e2.compressed = i2, e2;
      }, N2.prototype.toString = function() {
        return this.curve.isInfinity(this) ? "(INFINITY)" : "(" + this.affineX.toString() + "," + this.affineY.toString() + ")";
      };
      var q2 = f2.zero, j2 = f2.one;
      function D2(t3, r2, e2, n2, i2, o3, f3) {
        this.p = t3, this.a = r2, this.b = e2, this.G = N2.fromAffine(this, n2, i2), this.n = o3, this.h = f3, this.infinity = new N2(this, null, null, q2), this.pOverFour = t3.add(j2).shiftRight(2), this.pLength = Math.floor((this.p.bitLength() + 7) / 8);
      }
      D2.prototype.pointFromX = function(t3, r2) {
        var e2 = r2.pow(3).add(this.a.multiply(r2)).add(this.b).mod(this.p).modPow(this.pOverFour, this.p), n2 = e2;
        return e2.isEven() ^ !t3 && (n2 = this.p.subtract(n2)), N2.fromAffine(this, r2, n2);
      }, D2.prototype.isInfinity = function(t3) {
        return t3 === this.infinity || t3.z.compare(q2) === 0 && t3.y.compare(q2) !== 0;
      }, D2.prototype.isOnCurve = function(t3) {
        if (this.isInfinity(t3))
          return true;
        var r2 = t3.affineX, e2 = t3.affineY, n2 = this.a, i2 = this.b, o3 = this.p;
        if (r2.compare(q2) < 0 || r2.compareTo(o3) >= 0)
          return false;
        if (e2.compare(q2) < 0 || e2.compareTo(o3) >= 0)
          return false;
        var f3 = e2.square().mod(o3), u3 = r2.pow(3).add(n2.multiply(r2)).add(i2).mod(o3);
        return f3.equals(u3);
      }, D2.prototype.validate = function(t3) {
        O2(!this.isInfinity(t3), "Point is at infinity"), O2(this.isOnCurve(t3), "Point is not on the curve");
        var r2 = t3.multiply(this.n);
        return O2(this.isInfinity(r2), "Point is not a scalar multiple of G"), true;
      };
      var H = { p: "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f", a: "00", b: "07", n: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", h: "01", Gx: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", Gy: "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8" };
      function F(t3, r2) {
        return new n.SHA3(256).update(t3).digest(r2);
      }
      function Z(t3) {
        return Buffer.from(new a2.RIPEMD160().update(t3).digest());
      }
      function K(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        if (C2(t3, "expecting keyBuffer<Buffer>"), r2 === "sha256x2") {
          var e2 = F(F(t3)).slice(0, 4);
          return u2.encode(Buffer.concat([t3, e2]));
        }
        var n2 = [t3];
        r2 && n2.push(Buffer.from(r2));
        var i2 = Z(Buffer.concat(n2)).slice(0, 4);
        return u2.encode(Buffer.concat([t3, i2]));
      }
      function X(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
        O2(t3, "private key expected");
        var e2, n2 = new Buffer(u2.decode(t3)), i2 = n2.slice(-4), o3 = n2.slice(0, -4);
        if (r2 === "sha256x2")
          e2 = F(F(o3)).slice(0, 4);
        else {
          var f3 = [o3];
          r2 && f3.push(Buffer.from(r2)), e2 = Z(Buffer.concat(f3)).slice(0, 4);
        }
        if (i2.toString("hex") !== e2.toString("hex"))
          throw new Error("Invalid checksum, " + "".concat(i2.toString("hex"), " != ").concat(e2.toString("hex")));
        return o3;
      }
      var V = function(t3) {
        var r2 = H;
        if (!r2)
          return null;
        var e2 = f2(r2.p, 16), n2 = f2(r2.a, 16), i2 = f2(r2.b, 16), o3 = f2(r2.n, 16), u3 = f2(r2.h, 16);
        return new D2(e2, n2, i2, f2(r2.Gx, 16), f2(r2.Gy, 16), o3, u3);
      }();
      function Y(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "EOS";
        if (typeof t3 == "string")
          return Y.fromString(t3, r2);
        if (Buffer.isBuffer(t3))
          return Y.fromBuffer(t3);
        if (typeof t3 == "object" && t3.Q)
          return Y(t3.Q);
        function e2() {
          var r3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : t3.compressed;
          return t3.getEncoded(r3);
        }
        function n2() {
          var t4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "EOS";
          return t4 + K(e2());
        }
        function i2() {
          return e2().toString("hex");
        }
        return { Q: t3, toString: n2, toBuffer: e2, toHex: i2 };
      }
      Y.isValid = function(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "EOS";
        try {
          return Y(t3, r2), true;
        } catch (t4) {
          return false;
        }
      }, Y.fromBuffer = function(t3) {
        return Y(N2.decodeFrom(V, t3));
      }, Y.fromString = function(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "EOS";
        try {
          return Y.fromStringOrThrow(t3, r2);
        } catch (t4) {
          return null;
        }
      }, Y.fromStringOrThrow = function(t3) {
        var r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "EOS", e2 = t3.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);
        if (e2 === null) {
          var n2 = new RegExp("^" + r2);
          return n2.test(t3) && (t3 = t3.substring(r2.length)), Y.fromBuffer(X(t3));
        }
        var i2 = e2[1], o3 = e2[2];
        return Y.fromBuffer(X(o3, i2));
      }, Y.fromHex = function(t3) {
        return Y.fromBuffer(new Buffer(t3, "hex"));
      }, Y.fromStringHex = function(t3) {
        return Y.fromString(new Buffer(t3, "hex"));
      };
      var W = i("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), J2 = W.encode, G2 = W.decode, Q2 = function(t3) {
        return t3 === void 0;
      }, $2 = { ed25519PublicKey: 48, ed25519SecretSeed: 144, preAuthTx: 152, sha256Hash: 184 }, tt2 = function(t3) {
        var r2 = Buffer.alloc(2);
        return r2.writeUInt16LE(function(t4, r3) {
          Buffer.isBuffer(t4) || (t4 = new Buffer());
          for (var e2 = 0, n2 = 0; n2 < t4.length; n2++) {
            var i2 = e2 >>> 8 & 255;
            i2 ^= 255 & t4[n2], e2 = e2 << 8 & 65535, e2 ^= i2 ^= i2 >>> 4, e2 ^= i2 = i2 << 5 & 65535, e2 ^= i2 = i2 << 7 & 65535;
          }
          return e2;
        }(t3), 0), r2;
      };
      function rt2(t3) {
        return (rt2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
          return t4.__proto__ || Object.getPrototypeOf(t4);
        })(t3);
      }
      function nt2(t3, r2) {
        return (nt2 = Object.setPrototypeOf || function(t4, r3) {
          return t4.__proto__ = r3, t4;
        })(t3, r2);
      }
      function ft2() {
        if (typeof Reflect == "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy == "function")
          return true;
        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
          })), true;
        } catch (t3) {
          return false;
        }
      }
      function ut2(t3, r2, e2) {
        return (ut2 = ft2() ? Reflect.construct : function(t4, r3, e3) {
          var n2 = [null];
          n2.push.apply(n2, r3);
          var i2 = new (Function.bind.apply(t4, n2))();
          return e3 && nt2(i2, e3.prototype), i2;
        }).apply(null, arguments);
      }
      function at2(t3) {
        var r2 = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
        return (at2 = function(t4) {
          if (t4 === null || Function.toString.call(t4).indexOf("[native code]") === -1)
            return t4;
          if (typeof t4 != "function")
            throw new TypeError("Super expression must either be null or a function");
          if (r2 !== void 0) {
            if (r2.has(t4))
              return r2.get(t4);
            r2.set(t4, e2);
          }
          function e2() {
            return ut2(t4, arguments, rt2(this).constructor);
          }
          return e2.prototype = Object.create(t4.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }), nt2(e2, t4);
        })(t3);
      }
      var st2 = [0, 1, 2, 42, 43, 68, 69], ht2 = function(t3) {
        for (var r2 = new Uint8Array(t3.length), e2 = 0; e2 < t3.length; e2++)
          r2[e2] = t3.charCodeAt(e2);
        return r2;
      }("SS58PRE"), ct2 = function(t3) {
        var r2, e2;
        function n2() {
          return t3.apply(this, arguments) || this;
        }
        return e2 = t3, (r2 = n2).prototype = Object.create(e2.prototype), r2.prototype.constructor = r2, r2.__proto__ = e2, n2.prototype.toJSON = function() {
          return { _type: "AccountIndex", data: this + 0 };
        }, n2;
      }(at2(Number));
      function lt2(t3, r2) {
        t3.length || (t3 = [t3]), r2.length || (r2 = [r2]);
        var e2 = new Uint8Array(t3.length + r2.length);
        return e2.set(t3), e2.set(r2, t3.length), e2;
      }
      function pt2(t3) {
        var r2 = new Error();
        this.name = r2.name = "ValidationError", this.message = r2.message = t3, this.stack = r2.stack;
      }
      function dt2(t3, r2) {
        if (r2 == null && (r2 = "Assertion failed."), !t3)
          throw new pt2(r2);
      }
      pt2.prototype = Object.create(Error.prototype);
      var gt2 = function() {
        function t3(t4, r2) {
          this.hi = 0 | t4, this.lo = 0 | r2;
        }
        return t3.prototype.ushrn32 = function(t4) {
          var r2 = this.lo;
          return (t4 &= 63) == 0 || (t4 < 32 ? (r2 >>>= t4, r2 |= this.hi << 32 - t4) : r2 = this.hi >>> t4 - 32), r2;
        }, t3;
      }(), yt2 = Buffer.allocUnsafe(105), wt2 = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", bt2 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 10, 17, 21, 20, 26, 30, 7, 5, -1, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1], mt2 = new gt2(7, 4294967295), Et2 = [new gt2(152, 4072443489), new gt2(121, 3077413346), new gt2(243, 1046459332), new gt2(174, 783016616), new gt2(30, 1329849456)];
      function Bt2(t3, r2) {
        var e2 = t3, n2 = e2.hi >>> 3;
        e2.hi &= mt2.hi, e2.lo &= mt2.lo, e2.hi <<= 5, e2.hi |= e2.lo >>> 27, e2.lo <<= 5;
        for (var i2 = 0; i2 < Et2.length; i2++)
          n2 >>> i2 & 1 && (e2.hi ^= Et2[i2].hi, e2.lo ^= Et2[i2].lo);
        return e2.lo ^= r2, e2;
      }
      function At2(t3, r2, e2, n2, i2, o3, f3) {
        dt2(Buffer.isBuffer(t3)), dt2(r2 >>> 0 === r2), dt2(Buffer.isBuffer(e2)), dt2(n2 >>> 0 === n2), dt2((255 & i2) === i2), dt2((255 & o3) === o3), dt2(typeof f3 == "boolean");
        for (var u3 = (1 << o3) - 1, a3 = 0, s3 = 0; r2 < t3.length; r2++) {
          var h3 = t3[r2];
          if (h3 >>> i2 != 0)
            throw new Error("Invalid bits.");
          for (a3 = a3 << i2 | h3, s3 += i2; s3 >= o3; )
            e2[n2++] = a3 >>> (s3 -= o3) & u3;
        }
        if (f3)
          s3 && (e2[n2++] = a3 << o3 - s3 & u3);
        else if (s3 >= i2 || a3 << o3 - s3 & u3)
          throw new Error("Invalid bits.");
        return dt2(n2 <= e2.length), e2.slice(0, n2);
      }
      var Ut2 = function(t3) {
        function r2(r3) {
          var e2 = r3.slice(0, -4), n2 = r3.slice(-4), i2 = t3(e2);
          if (!(n2[0] ^ i2[0] | n2[1] ^ i2[1] | n2[2] ^ i2[2] | n2[3] ^ i2[3]))
            return e2;
        }
        return { bs58Encode: function(r3) {
          var e2 = t3(r3);
          return u2.encode(Buffer.concat([r3, e2], r3.length + 4));
        }, bs58Decode: function(t4) {
          var e2 = r2(u2.decode(t4));
          if (!e2)
            throw new Error("Invalid checksum");
          return e2;
        }, decodeUnsafe: function(t4) {
          var e2 = u2.decodeUnsafe(t4);
          if (e2)
            return r2(e2);
        } };
      }(function(t3) {
        var r2 = new b2().update(t3).digest();
        return new b2().update(r2).digest();
      }), It2 = Ut2.bs58Decode, _t2 = Ut2.bs58Encode;
      r.b32decode = l2, r.b32encode = function(t3) {
        var r2 = [], e2 = Math.floor(t3.length / 5), n2 = t3.length % 5;
        if (n2 != 0) {
          for (var i2 = 0; i2 < 5 - n2; i2++)
            t3 += "\0";
          e2 += 1;
        }
        for (var o3 = 0; o3 < e2; o3++)
          r2.push(h2.charAt(t3.charCodeAt(5 * o3) >> 3)), r2.push(h2.charAt((7 & t3.charCodeAt(5 * o3)) << 2 | t3.charCodeAt(5 * o3 + 1) >> 6)), r2.push(h2.charAt((63 & t3.charCodeAt(5 * o3 + 1)) >> 1)), r2.push(h2.charAt((1 & t3.charCodeAt(5 * o3 + 1)) << 4 | t3.charCodeAt(5 * o3 + 2) >> 4)), r2.push(h2.charAt((15 & t3.charCodeAt(5 * o3 + 2)) << 1 | t3.charCodeAt(5 * o3 + 3) >> 7)), r2.push(h2.charAt((127 & t3.charCodeAt(5 * o3 + 3)) >> 2)), r2.push(h2.charAt((3 & t3.charCodeAt(5 * o3 + 3)) << 3 | t3.charCodeAt(5 * o3 + 4) >> 5)), r2.push(h2.charAt(31 & t3.charCodeAt(5 * o3 + 4)));
        var f3 = 0;
        n2 == 1 ? f3 = 6 : n2 == 2 ? f3 = 4 : n2 == 3 ? f3 = 3 : n2 == 4 && (f3 = 1);
        for (var u3 = 0; u3 < f3; u3++)
          r2.pop();
        for (var a3 = 0; a3 < f3; a3++)
          r2.push("=");
        return r2.join("");
      }, r.bs58Decode = It2, r.bs58Encode = _t2, r.calculateChecksum = tt2, r.cashaddrDecode = function(t3, r2) {
        r2 === void 0 && (r2 = "bitcoincash"), dt2(typeof t3 == "string"), dt2(typeof r2 == "string");
        var e2 = function(t4, r3) {
          if (dt2(typeof t4 == "string"), t4.length < 8 || t4.length > 196)
            throw new Error("Invalid cashaddr data length.");
          for (var e3 = false, n3 = false, i3 = false, o4 = 0, f4 = 0; f4 < t4.length; f4++) {
            var u4 = t4.charCodeAt(f4);
            if (u4 >= 97 && u4 <= 122)
              e3 = true;
            else if (u4 >= 65 && u4 <= 90)
              n3 = true;
            else if (u4 >= 48 && u4 <= 57)
              i3 = true;
            else {
              if (u4 !== 58)
                throw new Error("Invalid cashaddr character.");
              if (i3 || f4 === 0 || f4 > 83)
                throw new Error("Invalid cashaddr prefix.");
              if (o4 !== 0)
                throw new Error("Invalid cashaddr separators.");
              o4 = f4;
            }
          }
          if (n3 && e3)
            throw new Error("Invalid cashaddr casing.");
          var a4, s4 = new gt2(0, 1);
          o4 === 0 ? a4 = r3.toLowerCase() : (a4 = t4.substring(0, o4).toLowerCase(), o4 += 1);
          for (var h3 = 0; h3 < a4.length; h3++)
            Bt2(s4, 31 & (32 | a4.charCodeAt(h3)));
          Bt2(s4, 0);
          var c3 = t4.length - o4;
          if (c3 <= 8 || c3 > 112)
            throw new Error("Invalid cashaddr data length.");
          for (var l3 = Buffer.allocUnsafe(c3), p2 = o4; p2 < t4.length; p2++) {
            var d3 = t4.charCodeAt(p2), g3 = 65408 & d3 ? -1 : bt2[d3];
            if (g3 === -1)
              throw new Error("Invalid cashaddr character.");
            Bt2(s4, g3), p2 + 8 < t4.length && (l3[p2 - o4] = g3);
          }
          if (s4.hi !== 0 || s4.lo !== 1 || a4 !== r3)
            throw new Error("Invalid cashaddr checksum.");
          return [a4, l3.slice(0, -8)];
        }(t3, r2), n2 = e2[0], i2 = e2[1], o3 = 5 * i2.length & 7;
        if (o3 >= 5)
          throw new Error("Invalid padding in data.");
        if (i2[i2.length - 1] & (1 << o3) - 1)
          throw new Error("Non zero padding.");
        var f3 = At2(i2, 0, i2, 0, 5, 8, false), u3 = f3[0] >>> 3 & 31, a3 = f3.slice(1), s3 = 20 + 4 * (3 & f3[0]);
        if (4 & f3[0] && (s3 *= 2), s3 !== a3.length)
          throw new Error("Invalid cashaddr data length.");
        return { prefix: n2, type: u3, hash: a3 };
      }, r.cashaddrEncode = function(t3, r2, e2) {
        if (dt2(typeof t3 == "string"), dt2((15 & r2) === r2, "Invalid cashaddr type."), dt2(Buffer.isBuffer(e2)), t3.length === 0 || t3.length > 83)
          throw new Error("Invalid cashaddr prefix.");
        var n2 = function(t4) {
          switch (dt2(t4 >>> 0 === t4), t4) {
            case 20:
              return 0;
            case 24:
              return 1;
            case 28:
              return 2;
            case 32:
              return 3;
            case 40:
              return 4;
            case 48:
              return 5;
            case 56:
              return 6;
            case 64:
              return 7;
            default:
              throw new Error("Non standard length.");
          }
        }(e2.length), i2 = Buffer.allocUnsafe(e2.length + 1);
        return i2[0] = r2 << 3 | n2, e2.copy(i2, 1), function(t4, r3) {
          dt2(typeof t4 == "string"), dt2(Buffer.isBuffer(r3));
          for (var e3 = new gt2(0, 1), n3 = "", i3 = false, o3 = false, f3 = 0; f3 < t4.length; f3++) {
            var u3 = t4.charCodeAt(f3);
            if (65280 & u3 || u3 >>> 5 == 0)
              throw new Error("Invalid cashaddr character.");
            if (u3 >= 97 && u3 <= 122)
              o3 = true;
            else if (u3 >= 65 && u3 <= 90)
              i3 = true, u3 = u3 - 65 + 97;
            else if (u3 >= 48 && u3 <= 57)
              throw new Error("Invalid cashaddr prefix.");
            Bt2(e3, 31 & u3), n3 += String.fromCharCode(u3);
          }
          if (o3 && i3)
            throw new Error("Invalid cashaddr prefix.");
          Bt2(e3, 0), n3 += ":";
          for (var a3 = 0; a3 < r3.length; a3++) {
            var s3 = r3[a3];
            if (s3 >>> 5 != 0)
              throw new Error("Invalid cashaddr value.");
            Bt2(e3, s3), n3 += wt2[s3];
          }
          for (var h3 = 0; h3 < 8; h3++)
            Bt2(e3, 0);
          e3.lo ^= 1;
          for (var c3 = 0; c3 < 8; c3++) {
            var l3 = 31 & e3.ushrn32(5 * (7 - c3));
            n3 += wt2[l3];
          }
          return n3;
        }(t3, At2(i2, 0, yt2, 0, 8, 5, true));
      }, r.codec = _2, r.decodeCheck = function(t3, r2) {
        if (typeof r2 != "string")
          throw new TypeError("encoded argument must be of type String");
        var e2 = G2(r2), n2 = e2[0], i2 = e2.slice(0, -2), o3 = i2.slice(1), f3 = e2.slice(-2);
        if (r2 !== J2(e2))
          throw new Error("invalid encoded string");
        var u3 = $2[t3];
        if (Q2(u3))
          throw new Error(t3 + ' is not a valid version byte name.  expected one of "accountId" or "seed"');
        if (n2 !== u3)
          throw new Error("invalid version byte. expected " + u3 + ", got " + n2);
        if (!function(t4, r3) {
          if (t4.length !== r3.length)
            return false;
          if (t4.length === 0)
            return true;
          for (var e3 = 0; e3 < t4.length; e3 += 1)
            if (t4[e3] !== r3[e3])
              return false;
          return true;
        }(tt2(i2), f3))
          throw new Error("invalid checksum");
        return Buffer.from(o3);
      }, r.encodeCheck = function(t3, r2) {
        if (r2 === null || Q2(r2))
          throw new Error("cannot encode null data");
        var e2 = $2[t3];
        if (Q2(e2))
          throw new Error(t3 + ' is not a valid version byte name.  expected one of "ed25519PublicKey", "ed25519SecretSeed", "preAuthTx", "sha256Hash"');
        r2 = Buffer.from(r2);
        var n2 = Buffer.from([e2]), i2 = Buffer.concat([n2, r2]), o3 = tt2(i2), f3 = Buffer.concat([i2, o3]);
        return J2(f3);
      }, r.eosPublicKey = Y, r.hex2a = function(t3) {
        for (var r2 = t3.toString(), e2 = "", n2 = 0; n2 < r2.length; n2 += 2)
          e2 += String.fromCharCode(parseInt(r2.substr(n2, 2), 16));
        return e2;
      }, r.isValid = function(t3) {
        var r2 = t3.toString().toUpperCase().replace(/-/g, "");
        if (!r2 || r2.length !== 40)
          return false;
        var e2, i2 = function(t4) {
          for (var r3 = "", e3 = 0; e3 < t4.length; e3++) {
            var n2 = Math.round(t4[e3]).toString(16);
            n2.length === 1 && (n2 = "0" + n2), r3 += n2;
          }
          return r3;
        }(l2(r2));
        return e2 = Buffer.from(i2.slice(0, 42), "hex"), new n.Keccak(256).update(e2).digest("hex").toString().substr(0, 8) === i2.slice(42);
      }, r.isValidChecksumAddress = function(t3, r2) {
        return function(t4) {
          return /^0x[0-9a-fA-F]{40}$/.test(t4);
        }(t3) && x2(t3, r2) === t3;
      }, r.ss58Decode = function(t3, r2) {
        var e2;
        r2 === void 0 && (r2 = 0);
        try {
          e2 = u2.decode(t3);
        } catch (t4) {
          return null;
        }
        if (st2.indexOf(e2[0]) === -1)
          return null;
        if (e2.length < 3)
          return null;
        var n2, i2 = e2.length <= 3 ? 1 : e2.length <= 5 ? 2 : e2.length <= 9 ? 4 : e2.length <= 17 ? 8 : 32, o3 = e2.length - 1 - i2, f3 = e2.slice(1, 1 + i2);
        e2.slice(1 + e2.length), i2 === 32 && (n2 = f3);
        var a3 = i2 < 32 ? new ct2(function(t4) {
          var r3 = 0, e3 = 1;
          return t4.forEach(function(t5) {
            r3 += t5 * e3, e3 *= 256;
          }), r3;
        }(f3)) : new Buffer.from(f3);
        if (e2[0] % 1 && !n2 && !r2)
          return null;
        for (var h3 = s2.blake2b(lt2(ht2, e2[0] % 1 ? n2 || r2(a3) : e2.slice(0, 1 + i2))), c3 = 0; c3 < o3; ++c3)
          if (h3[c3] !== e2[1 + i2 + c3])
            return null;
        return a3;
      }, r.ss58Encode = function(t3, r2, e2, n2, i2) {
        var o3;
        if (r2 === void 0 && (r2 = 42), e2 === void 0 && (e2 = null), n2 === void 0 && (n2 = null), st2.indexOf(r2) === -1)
          throw new Error("Unknown ss58 address type", r2);
        if (typeof t3 == "number" || t3 instanceof ct2) {
          var f3 = t3 < 256 ? 1 : t3 < 65536 ? 2 : t3 < 1 ? 4 : 8;
          if ([1, 2, 4, 8].indexOf(n2 = n2 || f3) === -1)
            throw new Error("Invalid length");
          if (n2 = Math.max(f3, n2), e2 && typeof e2 != "number")
            throw new Error("Invalid checksum length");
          switch (n2) {
            case 1:
              e2 = 1;
              break;
            case 2:
              e2 = [1, 2].indexOf(e2) + 1 || 1;
              break;
            case 4:
              e2 = [1, 2, 3, 4].indexOf(e2) + 1 || 1;
              break;
            case 8:
              e2 = [1, 2, 3, 4, 5, 6, 7, 8].indexOf(e2) + 1 || 1;
          }
          o3 = function(t4, r3) {
            var e3 = false;
            t4 < 0 && (t4 = -t4 - 1, e3 = true);
            for (var n3 = new Uint8Array(r3), i3 = 0; i3 < r3; ++i3)
              n3[i3] = t4 % 256, e3 && (n3[i3] = 255 & ~n3[i3]), t4 /= 256;
            return n3;
          }(t3, n2);
        } else {
          if (!(t3 instanceof Uint8Array) || t3.length !== 32 && t3.length !== 35)
            throw new Error("Unknown item to encode as ss58. Passing back.", t3);
          e2 = 2, i2 = o3 = t3.length === 35 ? t3.slice(1, 33) : t3;
        }
        var a3 = s2.blake2b(lt2(ht2, 1 & r2 ? i2 : lt2(r2, o3))), h3 = lt2(lt2(r2, o3), a3.slice(0, e2));
        return u2.encode(Buffer.from(h3));
      }, r.stripHexPrefix = S2, r.toChecksumAddress = x2, r.ua2hex = function(t3) {
        for (var r2 = "", e2 = 0; e2 < t3.length; e2++) {
          var n2 = t3[e2];
          r2 += c2[n2 >>> 4], r2 += c2[15 & n2];
        }
        return r2;
      };
    });
    Dt = "13456789abcdefghijkmnopqrstuwxyz";
    Ft = function(t2) {
      if (t2.constructor !== Uint8Array)
        throw new Error("View must be a Uint8Array!");
      const r = t2.length, e = 8 * r % 5, n = e === 0 ? 0 : 5 - e;
      let i = 0, o2 = "", f2 = 0;
      for (var u2 = 0; u2 < r; u2++)
        for (i = i << 8 | t2[u2], f2 += 8; f2 >= 5; )
          o2 += Dt[i >>> f2 + n - 5 & 31], f2 -= 5;
      return f2 > 0 && (o2 += Dt[i << 5 - (f2 + n) & 31]), o2;
    };
    Zt = require_bn();
    Kt = function() {
      function t2(t3) {
        t3 === void 0 && (t3 = Buffer.from([])), this.buffer = t3, this.bytesRead = 0;
      }
      var r = t2.prototype;
      return r.read = function(t3) {
        var r2 = this.buffer.slice(0, t3);
        return this.buffer = this.buffer.slice(t3), this.bytesRead += t3, r2;
      }, r.write = function(t3) {
        this.buffer = Buffer.concat([this.buffer, Buffer.from(t3)]);
      }, t2;
    }();
    Xt = function() {
      function t2(t3) {
        if (!t3 || t3.length < 1)
          throw new Error("Missing str in address");
        this.str = t3;
      }
      var r = t2.prototype;
      return r.protocol = function() {
        if (this.str.length < 1)
          throw Error("No address found.");
        return this.str[0];
      }, r.payload = function() {
        if (this.str.length < 1)
          throw Error("No address found.");
        return this.str.slice(1, this.str.length);
      }, t2;
    }();
    Qt = function(t2, r, e, n) {
      return { coinType: r, decoder: Gt(e, n), encoder: Jt(e[0], n[0]), name: t2 };
    };
    rr = function(t2, r, e, n, i) {
      return { coinType: r, decoder: tr(e, n, i), encoder: $t(e, n[0], i[0]), name: t2 };
    };
    ir = function(t2, r, e) {
      return { coinType: r, decoder: nr(e), encoder: er(e), name: t2 };
    };
    ur = function(t2, r, e) {
      return { coinType: r, decoder: fr(e), encoder: or(e), name: t2 };
    };
    wr = function(t2, r, e, n) {
      return { coinType: r, decoder: n, encoder: e, name: t2 };
    };
    br = [rr("BTC", 0, "bc", [[0]], [[5]]), rr("LTC", 2, "ltc", [[48]], [[50], [5]]), Qt("DOGE", 3, [[30]], [[22]]), Qt("RDD", 4, [[61]], [[5]]), Qt("DASH", 5, [[76]], [[16]]), Qt("PPC", 6, [[55]], [[117]]), wr("NMC", 7, jt.bs58Encode, jt.bs58Decode), rr("MONA", 22, "mona", [[50]], [[55], [5]]), wr("DCR", 42, ot.encode, ot.decode), wr("XEM", 43, function(t2) {
      return jt.b32encode(jt.hex2a(t2.toString("hex")));
    }, function(t2) {
      if (!jt.isValid(t2))
        throw Error("Unrecognised address format");
      var r = t2.toString().toUpperCase().replace(/-/g, "");
      return jt.b32decode(r);
    }), Qt("AIB", 55, [[23]], [[5]]), rr("SYS", 57, "sys", [[63]], [[5]]), ir("ETH", 60), ir("ETC", 61), wr("ICX", 74, function(t2) {
      if (t2.length !== 21)
        throw Error("Unrecognised address format");
      switch (t2.readUInt8(0)) {
        case 0:
          return "hx" + t2.slice(1).toString("hex");
        case 1:
          return "cx" + t2.slice(1).toString("hex");
        default:
          throw Error("Unrecognised address format");
      }
    }, function(t2) {
      var r = t2.slice(0, 2), e = t2.slice(2);
      switch (r) {
        case "hx":
          return Buffer.concat([Buffer.from([0]), Buffer.from(e, "hex")]);
        case "cx":
          return Buffer.concat([Buffer.from([1]), Buffer.from(e, "hex")]);
        default:
          throw Error("Unrecognised address format");
      }
    }), wr("ARK", 111, jt.bs58Encode, function(t2) {
      var r = jt.bs58Decode(t2);
      if (r[0] !== 23)
        throw Error("Unrecognised address format");
      return r;
    }), ur("ATOM", 118, "cosmos"), ur("ZIL", 119, "zil"), ur("EGLD", 120, "erd"), (lr = [[28, 184]], pr = [[28, 189]], { coinType: 133, decoder: function(t2, r, e) {
      var n = Gt(r, e), i = fr("zs");
      return function(t3) {
        return t3.toLowerCase().startsWith("zs") ? i(t3) : n(t3);
      };
    }(0, lr, pr), encoder: (dr = lr[0], gr = pr[0], yr = or("zs"), vr = Jt(dr, gr), function(t2) {
      try {
        return vr(t2);
      } catch (r) {
        return yr(t2);
      }
    }), name: "ZEC" }), wr("LSK", 134, function(t2) {
      return p(t2.toString("hex"), 16).toString(10) + "L";
    }, function(t2) {
      return function(t3) {
        if (t3.length < 2 || t3.length > 22)
          throw new Error("Address length does not match requirements. Expected between 2 and 22 characters.");
        if (t3[t3.length - 1] !== "L")
          throw new Error('Address format does not match requirements. Expected "L" at the end.');
        if (t3.includes("."))
          throw new Error("Address format does not match requirements. Address includes invalid character: `.`.");
      }(t2), Buffer.from(p(t2.slice(0, -1)).toString(16), "hex");
    }), wr("STEEM", 135, sr, hr), ir("RSK", 137, 30), wr("XRP", 144, function(t2) {
      return jt.codec.encodeChecked(t2);
    }, function(t2) {
      return jt.codec.decodeChecked(t2);
    }), wr("BCH", 145, function(t2) {
      switch (t2.readUInt8(0)) {
        case 118:
          if (t2.readUInt8(1) !== 169 || t2.readUInt8(t2.length - 2) !== 136 || t2.readUInt8(t2.length - 1) !== 172)
            throw Error("Unrecognised address format");
          return jt.cashaddrEncode("bitcoincash", 0, t2.slice(3, 3 + t2.readUInt8(2)));
        case 169:
          if (t2.readUInt8(t2.length - 1) !== 135)
            throw Error("Unrecognised address format");
          return jt.cashaddrEncode("bitcoincash", 1, t2.slice(2, 2 + t2.readUInt8(1)));
        default:
          throw Error("Unrecognised address format");
      }
    }, function(t2) {
      var r = Gt([[0]], [[5]]);
      try {
        return r(t2);
      } catch (r2) {
        return function(t3) {
          var r3 = jt.cashaddrDecode(t3), e = r3.type, n = r3.hash;
          if (e === 0)
            return Buffer.concat([Buffer.from([118, 169, 20]), Buffer.from(n), Buffer.from([136, 172])]);
          if (e === 1)
            return Buffer.concat([Buffer.from([169, 20]), Buffer.from(n), Buffer.from([135])]);
          throw Error("Unrecognised address format");
        }(t2);
      }
    }), wr("XLM", 148, function(t2) {
      return jt.encodeCheck("ed25519PublicKey", t2);
    }, function(t2) {
      return jt.decodeCheck("ed25519PublicKey", t2);
    }), wr("NANO", 165, function(t2) {
      var r = Ft(Uint8Array.from(t2)), e = F.blake2b(t2, null, 5).reverse();
      return "nano_" + r + Ft(e);
    }, function(t2) {
      var r = function(t3) {
        if (typeof t3 != "string")
          throw new Error("Input must be a string!");
        var r2 = t3.length;
        const e = 5 * r2 % 8, n = e === 0 ? 0 : 8 - e;
        for (var i = 0, o2 = 0, f2 = 0, u2 = new Uint8Array(Math.ceil(5 * r2 / 8)), a2 = 0; a2 < r2; a2++)
          o2 = o2 << 5 | Ht(t3[a2]), (i += 5) >= 8 && (u2[f2++] = o2 >>> i + n - 8 & 255, i -= 8);
        return i > 0 && (u2[f2++] = o2 << i + n - 8 & 255), e !== 0 && (u2 = u2.slice(1)), u2;
      }(t2.slice(5));
      return Buffer.from(r).slice(0, -5);
    }), wr("EOS", 194, function(t2) {
      if (!jt.eosPublicKey.isValid(t2))
        throw Error("Unrecognised address format");
      return jt.eosPublicKey.fromHex(t2).toString();
    }, function(t2) {
      if (!jt.eosPublicKey.isValid(t2))
        throw Error("Unrecognised address format");
      return jt.eosPublicKey(t2).toBuffer();
    }), wr("TRX", 195, jt.bs58Encode, jt.bs58Decode), wr("NEO", 239, jt.bs58Encode, jt.bs58Decode), wr("ALGO", 283, function(t2) {
      var r = cr(t2);
      return jt.b32encode(jt.hex2a(t2.toString("hex").concat(r))).replace(/=/g, "");
    }, function(t2) {
      var r = jt.b32decode(t2);
      if (r.length !== 36)
        throw Error("Unrecognised address format");
      var e = r.slice(0, -4), n = r.slice(-4), i = cr(e);
      if (n.toString("hex") !== i)
        throw Error("Unrecognised address format");
      return e;
    }), Qt("DIVI", 301, [[30]], [[13]]), ur("IOTX", 304, "io"), wr("DOT", 354, function(t2) {
      return jt.ss58Encode(Uint8Array.from(t2), 0);
    }, ar), wr("KSM", 434, function(t2) {
      return jt.ss58Encode(Uint8Array.from(t2), 2);
    }, ar), wr("FIL", 461, function(t2) {
      return Yt("f", Wt(t2[0], t2.slice(1))).toString();
    }, function(t2) {
      return function(t3) {
        !function(t4) {
          if (!t4)
            throw Error("No bytes to validate.");
          if (t4.length < 3)
            throw Error("Address is too short to validate.");
          if (t4[0] !== "f" && t4[0] !== "t")
            throw Error("Unknown address network.");
          switch (t4[1]) {
            case "0":
              if (t4.length > 22)
                throw Error("Invalid ID address length.");
              break;
            case "1":
              if (t4.length !== 41)
                throw Error("Invalid secp256k1 address length.");
              break;
            case "2":
              if (t4.length !== 41)
                throw Error("Invalid Actor address length.");
              break;
            case "3":
              if (t4.length !== 86)
                throw Error("Invalid BLS address length.");
              break;
            default:
              throw new Error("Invalid address protocol.");
          }
        }(t3);
        var r, e = t3[0], n = parseInt(t3[1], 10), i = Buffer.from([n]), o2 = t3.slice(2);
        if (n === 0)
          return Wt(n, Buffer.from((function(t4, r2) {
            for (var e2 = new Zt(t4); ; ) {
              var n2 = e2.maskn(7).toNumber();
              if (e2.ishrn(7), e2.isZero()) {
                r2.write([n2]);
                break;
              }
              r2.write([128 | n2]);
            }
          }(o2, r = new Kt()), r.buffer)));
        var f2, u2, a2 = Buffer.from(jt.b32decode(o2.toUpperCase())), s2 = a2.length, h2 = a2.slice(0, s2 - 4);
        if (f2 = a2.slice(s2 - 4, s2), u2 = Vt(Buffer.concat([i, h2])), Buffer.compare(Buffer.from(u2), f2))
          throw Error("Checksums don't match");
        var c2 = Wt(n, h2);
        if (Yt(e, c2) !== t3)
          throw Error("Did not encode this address properly: " + t3);
        return c2;
      }(t2).str;
    }), Qt("CCA", 489, [[11]], [[5]]), wr("SOL", 501, ot.encode, ot.decode), Qt("LRG", 568, [[30]], [[13]]), rr("CCXX", 571, "ccx", [[137]], [[75], [5]]), Qt("BPS", 576, [[0]], [[5]]), ir("XDAI", 700), ir("VET", 703), ur("BNB", 714, "bnb"), wr("HIVE", 825, sr, hr), ur("ONE", 1023, "one"), wr("ONT", 1024, function(t2) {
      return jt.bs58Encode(Buffer.concat([Buffer.from([23]), t2]));
    }, function(t2) {
      var r = jt.bs58Decode(t2);
      switch (r.readUInt8(0)) {
        case 23:
          return r.slice(1);
        default:
          throw Error("Unrecognised address format");
      }
    }), { coinType: 1729, decoder: function(t2) {
      var r = jt.bs58Decode(t2).slice(3);
      switch (t2.substring(0, 3)) {
        case "tz1":
          return Buffer.concat([Buffer.from([0, 0]), r]);
        case "tz2":
          return Buffer.concat([Buffer.from([0, 1]), r]);
        case "tz3":
          return Buffer.concat([Buffer.from([0, 2]), r]);
        case "KT1":
          return Buffer.concat([Buffer.from([1]), r, Buffer.from([0])]);
        default:
          throw Error("Unrecognised address format");
      }
    }, encoder: function(t2) {
      if (t2.length !== 22 && t2.length !== 21)
        throw Error("Unrecognised address format");
      var r;
      switch (t2.readUInt8(0)) {
        case 0:
          if (t2.readUInt8(1) === 0)
            r = Buffer.from([6, 161, 159]);
          else if (t2.readUInt8(1) === 1)
            r = Buffer.from([6, 161, 161]);
          else {
            if (t2.readUInt8(1) !== 2)
              throw Error("Unrecognised address format");
            r = Buffer.from([6, 161, 164]);
          }
          return jt.bs58Encode(Buffer.concat([r, t2.slice(2)]));
        case 1:
          return r = Buffer.from([2, 90, 121]), jt.bs58Encode(Buffer.concat([r, t2.slice(1, 21)]));
        default:
          throw Error("Unrecognised address format");
      }
    }, name: "XTZ" }, ur("ADA", 1815, "addr"), wr("QTUM", 2301, jt.bs58Encode, jt.bs58Decode), wr("ELA", 2305, ot.encode, ot.decode), { coinType: 3030, decoder: function(t2) {
      var r = Buffer.alloc(20), e = new DataView(r.buffer, 0, 20), n = t2.split(".");
      if (n.length !== 3)
        throw Error("Unrecognised address format");
      var i = Number(n[0]), o2 = BigInt(n[1]), f2 = BigInt(n[2]);
      return e.setUint32(0, i), e.setBigUint64(4, o2), e.setBigUint64(12, f2), r;
    }, encoder: function(t2) {
      if (t2.length !== 20)
        throw Error("Unrecognised address format");
      var r = new DataView(t2.buffer, 0);
      return [r.getUint32(0), r.getBigUint64(4), r.getBigUint64(12)].join(".");
    }, name: "HBAR" }, wr("HNS", 5353, function(t2) {
      if (t2.length !== 20)
        throw Error("P2WPKH must be 20 bytes");
      var r = [0].concat(h(t2));
      return s("hs", r);
    }, function(t2) {
      var r = a(t2), e = r.words;
      if (r.prefix !== "hs")
        throw Error("Unrecognised address format");
      var n = e[0], i = c(e.slice(1));
      if (n !== 0)
        throw Error("Bad program version");
      if (i.length !== 20)
        throw Error("Witness program hash is the wrong size");
      return Buffer.from(i);
    }), ir("CELO", 52752)];
    mr = Object.assign.apply(Object, [{}].concat(br.map(function(t2) {
      var r;
      return (r = {})[t2.name] = t2, r;
    })));
    Er = Object.assign.apply(Object, [{}].concat(br.map(function(t2) {
      var r;
      return (r = {})[t2.coinType] = t2, r;
    })));
  }
});

// node_modules/@ensdomains/ens/build/contracts/ENS.json
var require_ENS = __commonJS({
  "node_modules/@ensdomains/ens/build/contracts/ENS.json"(exports, module2) {
    module2.exports = {
      contractName: "ENS",
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: true,
              name: "label",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "owner",
              type: "address"
            }
          ],
          name: "NewOwner",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "owner",
              type: "address"
            }
          ],
          name: "Transfer",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "resolver",
              type: "address"
            }
          ],
          name: "NewResolver",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "ttl",
              type: "uint64"
            }
          ],
          name: "NewTTL",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "owner",
              type: "address"
            },
            {
              indexed: true,
              name: "operator",
              type: "address"
            },
            {
              indexed: false,
              name: "approved",
              type: "bool"
            }
          ],
          name: "ApprovalForAll",
          type: "event"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "owner",
              type: "address"
            },
            {
              name: "resolver",
              type: "address"
            },
            {
              name: "ttl",
              type: "uint64"
            }
          ],
          name: "setRecord",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "label",
              type: "bytes32"
            },
            {
              name: "owner",
              type: "address"
            },
            {
              name: "resolver",
              type: "address"
            },
            {
              name: "ttl",
              type: "uint64"
            }
          ],
          name: "setSubnodeRecord",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "label",
              type: "bytes32"
            },
            {
              name: "owner",
              type: "address"
            }
          ],
          name: "setSubnodeOwner",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "resolver",
              type: "address"
            }
          ],
          name: "setResolver",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "owner",
              type: "address"
            }
          ],
          name: "setOwner",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "ttl",
              type: "uint64"
            }
          ],
          name: "setTTL",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "operator",
              type: "address"
            },
            {
              name: "approved",
              type: "bool"
            }
          ],
          name: "setApprovalForAll",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "owner",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "resolver",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "ttl",
          outputs: [
            {
              name: "",
              type: "uint64"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "recordExists",
          outputs: [
            {
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "owner",
              type: "address"
            },
            {
              name: "operator",
              type: "address"
            }
          ],
          name: "isApprovedForAll",
          outputs: [
            {
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        }
      ],
      bytecode: "0x",
      deployedBytecode: "0x",
      sourceMap: "",
      deployedSourceMap: "",
      source: "pragma solidity >=0.4.24;\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\n    function setResolver(bytes32 node, address resolver) external;\n    function setOwner(bytes32 node, address owner) external;\n    function setTTL(bytes32 node, uint64 ttl) external;\n    function setApprovalForAll(address operator, bool approved) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n    function recordExists(bytes32 node) external view returns (bool);\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n",
      sourcePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
      ast: {
        absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
        exportedSymbols: {
          ENS: [
            436
          ]
        },
        id: 437,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 301,
            literals: [
              "solidity",
              ">=",
              "0.4",
              ".24"
            ],
            nodeType: "PragmaDirective",
            src: "0:25:2"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "interface",
            documentation: null,
            fullyImplemented: false,
            id: 436,
            linearizedBaseContracts: [
              436
            ],
            name: "ENS",
            nodeType: "ContractDefinition",
            nodes: [
              {
                anonymous: false,
                documentation: null,
                id: 309,
                name: "NewOwner",
                nodeType: "EventDefinition",
                parameters: {
                  id: 308,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 303,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "136:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 302,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "136:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 305,
                      indexed: true,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "158:21:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 304,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "158:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 307,
                      indexed: false,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "181:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 306,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "181:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "135:60:2"
                },
                src: "121:75:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 315,
                name: "Transfer",
                nodeType: "EventDefinition",
                parameters: {
                  id: 314,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 311,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 315,
                      src: "294:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 310,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "294:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 313,
                      indexed: false,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 315,
                      src: "316:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 312,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "316:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "293:37:2"
                },
                src: "279:52:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 321,
                name: "NewResolver",
                nodeType: "EventDefinition",
                parameters: {
                  id: 320,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 317,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 321,
                      src: "407:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 316,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "407:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 319,
                      indexed: false,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 321,
                      src: "429:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 318,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "429:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "406:40:2"
                },
                src: "389:58:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 327,
                name: "NewTTL",
                nodeType: "EventDefinition",
                parameters: {
                  id: 326,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 323,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 327,
                      src: "511:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 322,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "511:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 325,
                      indexed: false,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 327,
                      src: "533:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 324,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "533:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "510:34:2"
                },
                src: "498:47:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 335,
                name: "ApprovalForAll",
                nodeType: "EventDefinition",
                parameters: {
                  id: 334,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 329,
                      indexed: true,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "624:21:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 328,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "624:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 331,
                      indexed: true,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "647:24:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 330,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "647:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 333,
                      indexed: false,
                      name: "approved",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "673:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 332,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "673:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "623:64:2"
                },
                src: "603:85:2"
              },
              {
                body: null,
                documentation: null,
                id: 346,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setRecord",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 344,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 337,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "713:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 336,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "713:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 339,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "727:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 338,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "727:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 341,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "742:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 340,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "742:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 343,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "760:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 342,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "760:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "712:59:2"
                },
                returnParameters: {
                  id: 345,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "780:0:2"
                },
                scope: 436,
                src: "694:87:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 359,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setSubnodeRecord",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 357,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 348,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "812:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 347,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "812:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 350,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "826:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 349,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "826:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 352,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "841:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 351,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "841:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 354,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "856:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 353,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "856:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 356,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "874:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 355,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "874:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "811:74:2"
                },
                returnParameters: {
                  id: 358,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "894:0:2"
                },
                scope: 436,
                src: "786:109:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 370,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setSubnodeOwner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 366,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 361,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "925:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 360,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "925:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 363,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "939:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 362,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "939:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 365,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "954:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 364,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "954:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "924:44:2"
                },
                returnParameters: {
                  id: 369,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 368,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "986:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 367,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "986:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "985:9:2"
                },
                scope: 436,
                src: "900:95:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 377,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setResolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 375,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 372,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 377,
                      src: "1021:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 371,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1021:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 374,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 377,
                      src: "1035:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 373,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1035:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1020:32:2"
                },
                returnParameters: {
                  id: 376,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1061:0:2"
                },
                scope: 436,
                src: "1000:62:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 384,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setOwner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 382,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 379,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 384,
                      src: "1085:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 378,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1085:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 381,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 384,
                      src: "1099:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 380,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1099:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1084:29:2"
                },
                returnParameters: {
                  id: 383,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1122:0:2"
                },
                scope: 436,
                src: "1067:56:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 391,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setTTL",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 389,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 386,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 391,
                      src: "1144:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 385,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1144:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 388,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 391,
                      src: "1158:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 387,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "1158:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1143:26:2"
                },
                returnParameters: {
                  id: 390,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1178:0:2"
                },
                scope: 436,
                src: "1128:51:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 398,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setApprovalForAll",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 396,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 393,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "1211:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 392,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1211:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 395,
                      name: "approved",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "1229:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 394,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1229:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1210:33:2"
                },
                returnParameters: {
                  id: 397,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1252:0:2"
                },
                scope: 436,
                src: "1184:69:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 405,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "owner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 401,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 400,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 405,
                      src: "1273:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 399,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1273:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1272:14:2"
                },
                returnParameters: {
                  id: 404,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 403,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 405,
                      src: "1310:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 402,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1310:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1309:9:2"
                },
                scope: 436,
                src: "1258:61:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 412,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "resolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 408,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 407,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 412,
                      src: "1342:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 406,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1342:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1341:14:2"
                },
                returnParameters: {
                  id: 411,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 410,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 412,
                      src: "1379:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 409,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1379:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1378:9:2"
                },
                scope: 436,
                src: "1324:64:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 419,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "ttl",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 415,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 414,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 419,
                      src: "1406:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 413,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1406:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1405:14:2"
                },
                returnParameters: {
                  id: 418,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 417,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 419,
                      src: "1443:6:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 416,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "1443:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1442:8:2"
                },
                scope: 436,
                src: "1393:58:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 426,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "recordExists",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 422,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 421,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 426,
                      src: "1478:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 420,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1478:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1477:14:2"
                },
                returnParameters: {
                  id: 425,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 424,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 426,
                      src: "1515:4:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 423,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1515:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1514:6:2"
                },
                scope: 436,
                src: "1456:65:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 435,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "isApprovedForAll",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 431,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 428,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1552:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 427,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1552:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 430,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1567:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 429,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1567:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1551:33:2"
                },
                returnParameters: {
                  id: 434,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 433,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1608:4:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 432,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1608:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1607:6:2"
                },
                scope: 436,
                src: "1526:88:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              }
            ],
            scope: 437,
            src: "27:1589:2"
          }
        ],
        src: "0:1617:2"
      },
      legacyAST: {
        absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
        exportedSymbols: {
          ENS: [
            436
          ]
        },
        id: 437,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 301,
            literals: [
              "solidity",
              ">=",
              "0.4",
              ".24"
            ],
            nodeType: "PragmaDirective",
            src: "0:25:2"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "interface",
            documentation: null,
            fullyImplemented: false,
            id: 436,
            linearizedBaseContracts: [
              436
            ],
            name: "ENS",
            nodeType: "ContractDefinition",
            nodes: [
              {
                anonymous: false,
                documentation: null,
                id: 309,
                name: "NewOwner",
                nodeType: "EventDefinition",
                parameters: {
                  id: 308,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 303,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "136:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 302,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "136:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 305,
                      indexed: true,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "158:21:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 304,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "158:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 307,
                      indexed: false,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 309,
                      src: "181:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 306,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "181:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "135:60:2"
                },
                src: "121:75:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 315,
                name: "Transfer",
                nodeType: "EventDefinition",
                parameters: {
                  id: 314,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 311,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 315,
                      src: "294:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 310,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "294:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 313,
                      indexed: false,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 315,
                      src: "316:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 312,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "316:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "293:37:2"
                },
                src: "279:52:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 321,
                name: "NewResolver",
                nodeType: "EventDefinition",
                parameters: {
                  id: 320,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 317,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 321,
                      src: "407:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 316,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "407:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 319,
                      indexed: false,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 321,
                      src: "429:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 318,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "429:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "406:40:2"
                },
                src: "389:58:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 327,
                name: "NewTTL",
                nodeType: "EventDefinition",
                parameters: {
                  id: 326,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 323,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 327,
                      src: "511:20:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 322,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "511:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 325,
                      indexed: false,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 327,
                      src: "533:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 324,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "533:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "510:34:2"
                },
                src: "498:47:2"
              },
              {
                anonymous: false,
                documentation: null,
                id: 335,
                name: "ApprovalForAll",
                nodeType: "EventDefinition",
                parameters: {
                  id: 334,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 329,
                      indexed: true,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "624:21:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 328,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "624:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 331,
                      indexed: true,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "647:24:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 330,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "647:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 333,
                      indexed: false,
                      name: "approved",
                      nodeType: "VariableDeclaration",
                      scope: 335,
                      src: "673:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 332,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "673:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "623:64:2"
                },
                src: "603:85:2"
              },
              {
                body: null,
                documentation: null,
                id: 346,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setRecord",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 344,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 337,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "713:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 336,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "713:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 339,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "727:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 338,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "727:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 341,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "742:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 340,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "742:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 343,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 346,
                      src: "760:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 342,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "760:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "712:59:2"
                },
                returnParameters: {
                  id: 345,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "780:0:2"
                },
                scope: 436,
                src: "694:87:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 359,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setSubnodeRecord",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 357,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 348,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "812:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 347,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "812:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 350,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "826:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 349,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "826:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 352,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "841:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 351,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "841:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 354,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "856:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 353,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "856:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 356,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 359,
                      src: "874:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 355,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "874:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "811:74:2"
                },
                returnParameters: {
                  id: 358,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "894:0:2"
                },
                scope: 436,
                src: "786:109:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 370,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setSubnodeOwner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 366,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 361,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "925:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 360,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "925:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 363,
                      name: "label",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "939:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 362,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "939:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 365,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "954:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 364,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "954:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "924:44:2"
                },
                returnParameters: {
                  id: 369,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 368,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "986:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 367,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "986:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "985:9:2"
                },
                scope: 436,
                src: "900:95:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 377,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setResolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 375,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 372,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 377,
                      src: "1021:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 371,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1021:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 374,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 377,
                      src: "1035:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 373,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1035:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1020:32:2"
                },
                returnParameters: {
                  id: 376,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1061:0:2"
                },
                scope: 436,
                src: "1000:62:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 384,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setOwner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 382,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 379,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 384,
                      src: "1085:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 378,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1085:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 381,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 384,
                      src: "1099:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 380,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1099:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1084:29:2"
                },
                returnParameters: {
                  id: 383,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1122:0:2"
                },
                scope: 436,
                src: "1067:56:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 391,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setTTL",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 389,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 386,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 391,
                      src: "1144:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 385,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1144:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 388,
                      name: "ttl",
                      nodeType: "VariableDeclaration",
                      scope: 391,
                      src: "1158:10:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 387,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "1158:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1143:26:2"
                },
                returnParameters: {
                  id: 390,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1178:0:2"
                },
                scope: 436,
                src: "1128:51:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 398,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setApprovalForAll",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 396,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 393,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "1211:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 392,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1211:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 395,
                      name: "approved",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "1229:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 394,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1229:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1210:33:2"
                },
                returnParameters: {
                  id: 397,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1252:0:2"
                },
                scope: 436,
                src: "1184:69:2",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 405,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "owner",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 401,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 400,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 405,
                      src: "1273:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 399,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1273:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1272:14:2"
                },
                returnParameters: {
                  id: 404,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 403,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 405,
                      src: "1310:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 402,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1310:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1309:9:2"
                },
                scope: 436,
                src: "1258:61:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 412,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "resolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 408,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 407,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 412,
                      src: "1342:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 406,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1342:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1341:14:2"
                },
                returnParameters: {
                  id: 411,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 410,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 412,
                      src: "1379:7:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 409,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1379:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1378:9:2"
                },
                scope: 436,
                src: "1324:64:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 419,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "ttl",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 415,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 414,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 419,
                      src: "1406:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 413,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1406:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1405:14:2"
                },
                returnParameters: {
                  id: 418,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 417,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 419,
                      src: "1443:6:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint64",
                        typeString: "uint64"
                      },
                      typeName: {
                        id: 416,
                        name: "uint64",
                        nodeType: "ElementaryTypeName",
                        src: "1443:6:2",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1442:8:2"
                },
                scope: 436,
                src: "1393:58:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 426,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "recordExists",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 422,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 421,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 426,
                      src: "1478:12:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 420,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1478:7:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1477:14:2"
                },
                returnParameters: {
                  id: 425,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 424,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 426,
                      src: "1515:4:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 423,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1515:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1514:6:2"
                },
                scope: 436,
                src: "1456:65:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 435,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "isApprovedForAll",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 431,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 428,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1552:13:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 427,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1552:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 430,
                      name: "operator",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1567:16:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 429,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1567:7:2",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1551:33:2"
                },
                returnParameters: {
                  id: 434,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 433,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 435,
                      src: "1608:4:2",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 432,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "1608:4:2",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1607:6:2"
                },
                scope: 436,
                src: "1526:88:2",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              }
            ],
            scope: 437,
            src: "27:1589:2"
          }
        ],
        src: "0:1617:2"
      },
      compiler: {
        name: "solc",
        version: "0.5.0+commit.1d4f565a.Emscripten.clang"
      },
      networks: {},
      schemaVersion: "3.0.0",
      updatedAt: "2020-02-10T20:00:51.340Z",
      devdoc: {
        methods: {}
      },
      userdoc: {
        methods: {}
      }
    };
  }
});

// node_modules/@ensdomains/resolver/build/contracts/Resolver.json
var require_Resolver = __commonJS({
  "node_modules/@ensdomains/resolver/build/contracts/Resolver.json"(exports, module2) {
    module2.exports = {
      contractName: "Resolver",
      abi: [
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "a",
              type: "address"
            }
          ],
          name: "AddrChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "coinType",
              type: "uint256"
            },
            {
              indexed: false,
              name: "newAddress",
              type: "bytes"
            }
          ],
          name: "AddressChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "name",
              type: "string"
            }
          ],
          name: "NameChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: true,
              name: "contentType",
              type: "uint256"
            }
          ],
          name: "ABIChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "x",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "y",
              type: "bytes32"
            }
          ],
          name: "PubkeyChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: true,
              name: "indexedKey",
              type: "string"
            },
            {
              indexed: false,
              name: "key",
              type: "string"
            }
          ],
          name: "TextChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "hash",
              type: "bytes"
            }
          ],
          name: "ContenthashChanged",
          type: "event"
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              name: "node",
              type: "bytes32"
            },
            {
              indexed: false,
              name: "hash",
              type: "bytes32"
            }
          ],
          name: "ContentChanged",
          type: "event"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "contentTypes",
              type: "uint256"
            }
          ],
          name: "ABI",
          outputs: [
            {
              name: "",
              type: "uint256"
            },
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "coinType",
              type: "uint256"
            }
          ],
          name: "addr",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "addr",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "contenthash",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "dnsrr",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "name",
          outputs: [
            {
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "pubkey",
          outputs: [
            {
              name: "x",
              type: "bytes32"
            },
            {
              name: "y",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "key",
              type: "string"
            }
          ],
          name: "text",
          outputs: [
            {
              name: "",
              type: "string"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "interfaceID",
              type: "bytes4"
            }
          ],
          name: "interfaceImplementer",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "contentType",
              type: "uint256"
            },
            {
              name: "data",
              type: "bytes"
            }
          ],
          name: "setABI",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "addr",
              type: "address"
            }
          ],
          name: "setAddr",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "coinType",
              type: "uint256"
            },
            {
              name: "a",
              type: "bytes"
            }
          ],
          name: "setAddr",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "hash",
              type: "bytes"
            }
          ],
          name: "setContenthash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "data",
              type: "bytes"
            }
          ],
          name: "setDnsrr",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "_name",
              type: "string"
            }
          ],
          name: "setName",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "x",
              type: "bytes32"
            },
            {
              name: "y",
              type: "bytes32"
            }
          ],
          name: "setPubkey",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "key",
              type: "string"
            },
            {
              name: "value",
              type: "string"
            }
          ],
          name: "setText",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "interfaceID",
              type: "bytes4"
            },
            {
              name: "implementer",
              type: "address"
            }
          ],
          name: "setInterface",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "interfaceID",
              type: "bytes4"
            }
          ],
          name: "supportsInterface",
          outputs: [
            {
              name: "",
              type: "bool"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "data",
              type: "bytes[]"
            }
          ],
          name: "multicall",
          outputs: [
            {
              name: "results",
              type: "bytes[]"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "content",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            }
          ],
          name: "multihash",
          outputs: [
            {
              name: "",
              type: "bytes"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "hash",
              type: "bytes32"
            }
          ],
          name: "setContent",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "node",
              type: "bytes32"
            },
            {
              name: "hash",
              type: "bytes"
            }
          ],
          name: "setMultihash",
          outputs: [],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        }
      ],
      metadata: '{"compiler":{"version":"0.5.8+commit.23d335f2"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"key","type":"string"},{"name":"value","type":"string"}],"name":"setText","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"dnsrr","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"x","type":"bytes32"},{"name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"addr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"key","type":"string"}],"name":"text","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"contentType","type":"uint256"},{"name":"data","type":"bytes"}],"name":"setABI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"data","type":"bytes"}],"name":"setDnsrr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"_name","type":"string"}],"name":"setName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"coinType","type":"uint256"},{"name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes"}],"name":"setMultihash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"name":"results","type":"bytes[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes32"}],"name":"setContent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"name":"x","type":"bytes32"},{"name":"y","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"addr","type":"address"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"interfaceID","type":"bytes4"},{"name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"multihash","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"coinType","type":"uint256"},{"indexed":false,"name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":true,"name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"x","type":"bytes32"},{"indexed":false,"name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":true,"name":"indexedKey","type":"string"},{"indexed":false,"name":"key","type":"string"}],"name":"TextChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"hash","type":"bytes32"}],"name":"ContentChanged","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{},"notice":"A generic resolver interface which includes all the functions including the ones deprecated"}},"settings":{"compilationTarget":{"/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol":"Resolver"},"evmVersion":"petersburg","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol":{"keccak256":"0xb992c6a78066be42d7e9b54d0e385e87267d7e229099ed6c857c9d9ace43995d","urls":["bzzr://ddba23b761cfa2d6bb8746fd4241896db84282f2550c06c738fc1de2f8fb33c2"]}},"version":1}',
      bytecode: "0x",
      deployedBytecode: "0x",
      sourceMap: "",
      deployedSourceMap: "",
      source: "pragma solidity >=0.4.25;\npragma experimental ABIEncoderV2;\n\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver{\n    event AddrChanged(bytes32 indexed node, address a);\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n    /* Deprecated events */\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\n    function addr(bytes32 node) external view returns (address);\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\n    function contenthash(bytes32 node) external view returns (bytes memory);\n    function dnsrr(bytes32 node) external view returns (bytes memory);\n    function name(bytes32 node) external view returns (string memory);\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n    function text(bytes32 node, string calldata key) external view returns (string memory);\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\n    function setAddr(bytes32 node, address addr) external;\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\n    function setContenthash(bytes32 node, bytes calldata hash) external;\n    function setDnsrr(bytes32 node, bytes calldata data) external;\n    function setName(bytes32 node, string calldata _name) external;\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n    function setText(bytes32 node, string calldata key, string calldata value) external;\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\n\n    /* Deprecated functions */\n    function content(bytes32 node) external view returns (bytes32);\n    function multihash(bytes32 node) external view returns (bytes memory);\n    function setContent(bytes32 node, bytes32 hash) external;\n    function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n",
      sourcePath: "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
      ast: {
        absolutePath: "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
        exportedSymbols: {
          Resolver: [
            603
          ]
        },
        id: 604,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 355,
            literals: [
              "solidity",
              ">=",
              "0.4",
              ".25"
            ],
            nodeType: "PragmaDirective",
            src: "0:25:4"
          },
          {
            id: 356,
            literals: [
              "experimental",
              "ABIEncoderV2"
            ],
            nodeType: "PragmaDirective",
            src: "26:33:4"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "interface",
            documentation: "A generic resolver interface which includes all the functions including the ones deprecated",
            fullyImplemented: false,
            id: 603,
            linearizedBaseContracts: [
              603
            ],
            name: "Resolver",
            nodeType: "ContractDefinition",
            nodes: [
              {
                anonymous: false,
                documentation: null,
                id: 362,
                name: "AddrChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 361,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 358,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 362,
                      src: "206:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 357,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "206:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 360,
                      indexed: false,
                      name: "a",
                      nodeType: "VariableDeclaration",
                      scope: 362,
                      src: "228:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 359,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "228:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "205:33:4"
                },
                src: "188:51:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 370,
                name: "AddressChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 369,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 364,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "265:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 363,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "265:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 366,
                      indexed: false,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "287:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 365,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "287:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 368,
                      indexed: false,
                      name: "newAddress",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "302:16:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 367,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "302:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "264:55:4"
                },
                src: "244:76:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 376,
                name: "NameChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 375,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 372,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 376,
                      src: "343:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 371,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "343:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 374,
                      indexed: false,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 376,
                      src: "365:11:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 373,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "365:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "342:35:4"
                },
                src: "325:53:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 382,
                name: "ABIChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 381,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 378,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 382,
                      src: "400:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 377,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "400:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 380,
                      indexed: true,
                      name: "contentType",
                      nodeType: "VariableDeclaration",
                      scope: 382,
                      src: "422:27:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 379,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "422:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "399:51:4"
                },
                src: "383:68:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 390,
                name: "PubkeyChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 389,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 384,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "476:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 383,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "476:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 386,
                      indexed: false,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "498:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 385,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "498:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 388,
                      indexed: false,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "509:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 387,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "509:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "475:44:4"
                },
                src: "456:64:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 398,
                name: "TextChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 397,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 392,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "543:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 391,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "543:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 394,
                      indexed: true,
                      name: "indexedKey",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "565:25:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 393,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "565:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 396,
                      indexed: false,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "592:10:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 395,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "592:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "542:61:4"
                },
                src: "525:79:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 404,
                name: "ContenthashChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 403,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 400,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 404,
                      src: "634:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 399,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "634:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 402,
                      indexed: false,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 404,
                      src: "656:10:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 401,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "656:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "633:34:4"
                },
                src: "609:59:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 410,
                name: "ContentChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 409,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 406,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 410,
                      src: "722:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 405,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "722:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 408,
                      indexed: false,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 410,
                      src: "744:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 407,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "744:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "721:36:4"
                },
                src: "701:57:4"
              },
              {
                body: null,
                documentation: null,
                id: 421,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "ABI",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 415,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 412,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "777:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 411,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "777:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 414,
                      name: "contentTypes",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "791:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 413,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "791:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "776:36:4"
                },
                returnParameters: {
                  id: 420,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 417,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "836:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 416,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "836:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 419,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "845:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 418,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "845:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "835:23:4"
                },
                scope: 603,
                src: "764:95:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 428,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "addr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 424,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 423,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 428,
                      src: "878:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 422,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "878:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "877:14:4"
                },
                returnParameters: {
                  id: 427,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 426,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 428,
                      src: "915:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 425,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "915:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "914:9:4"
                },
                scope: 603,
                src: "864:60:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 437,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "addr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 433,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 430,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "943:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 429,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "943:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 432,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "957:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 431,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "957:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "942:29:4"
                },
                returnParameters: {
                  id: 436,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 435,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "994:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 434,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "994:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "993:14:4"
                },
                scope: 603,
                src: "929:79:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 444,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "contenthash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 440,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 439,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 444,
                      src: "1034:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 438,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1034:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1033:14:4"
                },
                returnParameters: {
                  id: 443,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 442,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 444,
                      src: "1071:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 441,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1071:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1070:14:4"
                },
                scope: 603,
                src: "1013:72:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 451,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "dnsrr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 447,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 446,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 451,
                      src: "1105:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 445,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1105:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1104:14:4"
                },
                returnParameters: {
                  id: 450,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 449,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 451,
                      src: "1142:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 448,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1142:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1141:14:4"
                },
                scope: 603,
                src: "1090:66:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 458,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "name",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 454,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 453,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 458,
                      src: "1175:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 452,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1175:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1174:14:4"
                },
                returnParameters: {
                  id: 457,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 456,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 458,
                      src: "1212:13:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 455,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1212:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1211:15:4"
                },
                scope: 603,
                src: "1161:66:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 467,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "pubkey",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 461,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 460,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1248:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 459,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1248:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1247:14:4"
                },
                returnParameters: {
                  id: 466,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 463,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1285:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 462,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1285:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 465,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1296:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 464,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1296:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1284:22:4"
                },
                scope: 603,
                src: "1232:75:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 476,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "text",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 472,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 469,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1326:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 468,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1326:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 471,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1340:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 470,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1340:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1325:35:4"
                },
                returnParameters: {
                  id: 475,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 474,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1384:13:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 473,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1384:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1383:15:4"
                },
                scope: 603,
                src: "1312:87:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 485,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "interfaceImplementer",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 481,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 478,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1434:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 477,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1434:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 480,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1448:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 479,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "1448:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1433:34:4"
                },
                returnParameters: {
                  id: 484,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 483,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1491:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 482,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1491:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1490:9:4"
                },
                scope: 603,
                src: "1404:96:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 494,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setABI",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 492,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 487,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1521:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 486,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1521:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 489,
                      name: "contentType",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1535:19:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 488,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "1535:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 491,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1556:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 490,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1556:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1520:56:4"
                },
                returnParameters: {
                  id: 493,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1585:0:4"
                },
                scope: 603,
                src: "1505:81:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 501,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setAddr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 499,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 496,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 501,
                      src: "1608:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 495,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1608:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 498,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 501,
                      src: "1622:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 497,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1622:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1607:28:4"
                },
                returnParameters: {
                  id: 500,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1644:0:4"
                },
                scope: 603,
                src: "1591:54:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 510,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setAddr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 508,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 503,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1667:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 502,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1667:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 505,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1681:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 504,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "1681:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 507,
                      name: "a",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1696:16:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 506,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1696:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1666:47:4"
                },
                returnParameters: {
                  id: 509,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1722:0:4"
                },
                scope: 603,
                src: "1650:73:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 517,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setContenthash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 515,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 512,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 517,
                      src: "1752:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 511,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1752:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 514,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 517,
                      src: "1766:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 513,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1766:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1751:35:4"
                },
                returnParameters: {
                  id: 516,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1795:0:4"
                },
                scope: 603,
                src: "1728:68:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 524,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setDnsrr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 522,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 519,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 524,
                      src: "1819:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 518,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1819:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 521,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 524,
                      src: "1833:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 520,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1833:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1818:35:4"
                },
                returnParameters: {
                  id: 523,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1862:0:4"
                },
                scope: 603,
                src: "1801:62:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 531,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 529,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 526,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 531,
                      src: "1885:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 525,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1885:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 528,
                      name: "_name",
                      nodeType: "VariableDeclaration",
                      scope: 531,
                      src: "1899:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 527,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1899:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1884:37:4"
                },
                returnParameters: {
                  id: 530,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1930:0:4"
                },
                scope: 603,
                src: "1868:63:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 540,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setPubkey",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 538,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 533,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1955:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 532,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1955:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 535,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1969:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 534,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1969:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 537,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1980:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 536,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1980:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1954:36:4"
                },
                returnParameters: {
                  id: 539,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1999:0:4"
                },
                scope: 603,
                src: "1936:64:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 549,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setText",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 547,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 542,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2022:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 541,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2022:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 544,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2036:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 543,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2036:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 546,
                      name: "value",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2057:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 545,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2057:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2021:58:4"
                },
                returnParameters: {
                  id: 548,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2088:0:4"
                },
                scope: 603,
                src: "2005:84:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 558,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setInterface",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 556,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 551,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2116:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 550,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2116:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 553,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2130:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 552,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "2130:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 555,
                      name: "implementer",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2150:19:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 554,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "2150:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2115:55:4"
                },
                returnParameters: {
                  id: 557,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2179:0:4"
                },
                scope: 603,
                src: "2094:86:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 565,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "supportsInterface",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 561,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 560,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 565,
                      src: "2212:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 559,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "2212:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2211:20:4"
                },
                returnParameters: {
                  id: 564,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 563,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 565,
                      src: "2255:4:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 562,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "2255:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2254:6:4"
                },
                scope: 603,
                src: "2185:76:4",
                stateMutability: "pure",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 574,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "multicall",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 569,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 568,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 574,
                      src: "2285:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                        typeString: "bytes[]"
                      },
                      typeName: {
                        baseType: {
                          id: 566,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2285:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes"
                          }
                        },
                        id: 567,
                        length: null,
                        nodeType: "ArrayTypeName",
                        src: "2285:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_array$_t_bytes_storage_$dyn_storage_ptr",
                          typeString: "bytes[]"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2284:23:4"
                },
                returnParameters: {
                  id: 573,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 572,
                      name: "results",
                      nodeType: "VariableDeclaration",
                      scope: 574,
                      src: "2325:22:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_bytes_memory_$dyn_memory_ptr",
                        typeString: "bytes[]"
                      },
                      typeName: {
                        baseType: {
                          id: 570,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2325:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes"
                          }
                        },
                        id: 571,
                        length: null,
                        nodeType: "ArrayTypeName",
                        src: "2325:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_array$_t_bytes_storage_$dyn_storage_ptr",
                          typeString: "bytes[]"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2324:24:4"
                },
                scope: 603,
                src: "2266:83:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 581,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "content",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 577,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 576,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 581,
                      src: "2403:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 575,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2403:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2402:14:4"
                },
                returnParameters: {
                  id: 580,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 579,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 581,
                      src: "2440:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 578,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2440:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2439:9:4"
                },
                scope: 603,
                src: "2386:63:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 588,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "multihash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 584,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 583,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 588,
                      src: "2473:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 582,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2473:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2472:14:4"
                },
                returnParameters: {
                  id: 587,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 586,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 588,
                      src: "2510:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 585,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "2510:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2509:14:4"
                },
                scope: 603,
                src: "2454:70:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 595,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setContent",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 593,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 590,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 595,
                      src: "2549:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 589,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2549:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 592,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 595,
                      src: "2563:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 591,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2563:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2548:28:4"
                },
                returnParameters: {
                  id: 594,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2585:0:4"
                },
                scope: 603,
                src: "2529:57:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 602,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setMultihash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 600,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 597,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 602,
                      src: "2613:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 596,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2613:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 599,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 602,
                      src: "2627:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 598,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "2627:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2612:35:4"
                },
                returnParameters: {
                  id: 601,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2656:0:4"
                },
                scope: 603,
                src: "2591:66:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              }
            ],
            scope: 604,
            src: "164:2495:4"
          }
        ],
        src: "0:2660:4"
      },
      legacyAST: {
        absolutePath: "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
        exportedSymbols: {
          Resolver: [
            603
          ]
        },
        id: 604,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 355,
            literals: [
              "solidity",
              ">=",
              "0.4",
              ".25"
            ],
            nodeType: "PragmaDirective",
            src: "0:25:4"
          },
          {
            id: 356,
            literals: [
              "experimental",
              "ABIEncoderV2"
            ],
            nodeType: "PragmaDirective",
            src: "26:33:4"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "interface",
            documentation: "A generic resolver interface which includes all the functions including the ones deprecated",
            fullyImplemented: false,
            id: 603,
            linearizedBaseContracts: [
              603
            ],
            name: "Resolver",
            nodeType: "ContractDefinition",
            nodes: [
              {
                anonymous: false,
                documentation: null,
                id: 362,
                name: "AddrChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 361,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 358,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 362,
                      src: "206:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 357,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "206:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 360,
                      indexed: false,
                      name: "a",
                      nodeType: "VariableDeclaration",
                      scope: 362,
                      src: "228:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 359,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "228:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "205:33:4"
                },
                src: "188:51:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 370,
                name: "AddressChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 369,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 364,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "265:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 363,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "265:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 366,
                      indexed: false,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "287:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 365,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "287:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 368,
                      indexed: false,
                      name: "newAddress",
                      nodeType: "VariableDeclaration",
                      scope: 370,
                      src: "302:16:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 367,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "302:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "264:55:4"
                },
                src: "244:76:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 376,
                name: "NameChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 375,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 372,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 376,
                      src: "343:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 371,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "343:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 374,
                      indexed: false,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 376,
                      src: "365:11:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 373,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "365:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "342:35:4"
                },
                src: "325:53:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 382,
                name: "ABIChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 381,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 378,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 382,
                      src: "400:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 377,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "400:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 380,
                      indexed: true,
                      name: "contentType",
                      nodeType: "VariableDeclaration",
                      scope: 382,
                      src: "422:27:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 379,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "422:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "399:51:4"
                },
                src: "383:68:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 390,
                name: "PubkeyChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 389,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 384,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "476:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 383,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "476:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 386,
                      indexed: false,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "498:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 385,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "498:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 388,
                      indexed: false,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 390,
                      src: "509:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 387,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "509:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "475:44:4"
                },
                src: "456:64:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 398,
                name: "TextChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 397,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 392,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "543:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 391,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "543:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 394,
                      indexed: true,
                      name: "indexedKey",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "565:25:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 393,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "565:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 396,
                      indexed: false,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 398,
                      src: "592:10:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 395,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "592:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "542:61:4"
                },
                src: "525:79:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 404,
                name: "ContenthashChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 403,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 400,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 404,
                      src: "634:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 399,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "634:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 402,
                      indexed: false,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 404,
                      src: "656:10:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 401,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "656:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "633:34:4"
                },
                src: "609:59:4"
              },
              {
                anonymous: false,
                documentation: null,
                id: 410,
                name: "ContentChanged",
                nodeType: "EventDefinition",
                parameters: {
                  id: 409,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 406,
                      indexed: true,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 410,
                      src: "722:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 405,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "722:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 408,
                      indexed: false,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 410,
                      src: "744:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 407,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "744:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "721:36:4"
                },
                src: "701:57:4"
              },
              {
                body: null,
                documentation: null,
                id: 421,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "ABI",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 415,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 412,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "777:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 411,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "777:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 414,
                      name: "contentTypes",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "791:20:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 413,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "791:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "776:36:4"
                },
                returnParameters: {
                  id: 420,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 417,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "836:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 416,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "836:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 419,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 421,
                      src: "845:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 418,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "845:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "835:23:4"
                },
                scope: 603,
                src: "764:95:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 428,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "addr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 424,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 423,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 428,
                      src: "878:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 422,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "878:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "877:14:4"
                },
                returnParameters: {
                  id: 427,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 426,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 428,
                      src: "915:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 425,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "915:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "914:9:4"
                },
                scope: 603,
                src: "864:60:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 437,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "addr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 433,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 430,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "943:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 429,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "943:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 432,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "957:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 431,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "957:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "942:29:4"
                },
                returnParameters: {
                  id: 436,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 435,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 437,
                      src: "994:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 434,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "994:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "993:14:4"
                },
                scope: 603,
                src: "929:79:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 444,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "contenthash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 440,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 439,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 444,
                      src: "1034:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 438,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1034:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1033:14:4"
                },
                returnParameters: {
                  id: 443,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 442,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 444,
                      src: "1071:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 441,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1071:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1070:14:4"
                },
                scope: 603,
                src: "1013:72:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 451,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "dnsrr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 447,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 446,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 451,
                      src: "1105:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 445,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1105:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1104:14:4"
                },
                returnParameters: {
                  id: 450,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 449,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 451,
                      src: "1142:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 448,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1142:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1141:14:4"
                },
                scope: 603,
                src: "1090:66:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 458,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "name",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 454,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 453,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 458,
                      src: "1175:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 452,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1175:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1174:14:4"
                },
                returnParameters: {
                  id: 457,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 456,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 458,
                      src: "1212:13:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 455,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1212:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1211:15:4"
                },
                scope: 603,
                src: "1161:66:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 467,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "pubkey",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 461,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 460,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1248:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 459,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1248:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1247:14:4"
                },
                returnParameters: {
                  id: 466,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 463,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1285:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 462,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1285:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 465,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 467,
                      src: "1296:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 464,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1296:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1284:22:4"
                },
                scope: 603,
                src: "1232:75:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 476,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "text",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 472,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 469,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1326:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 468,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1326:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 471,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1340:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 470,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1340:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1325:35:4"
                },
                returnParameters: {
                  id: 475,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 474,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 476,
                      src: "1384:13:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 473,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1384:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1383:15:4"
                },
                scope: 603,
                src: "1312:87:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 485,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "interfaceImplementer",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 481,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 478,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1434:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 477,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1434:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 480,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1448:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 479,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "1448:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1433:34:4"
                },
                returnParameters: {
                  id: 484,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 483,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 485,
                      src: "1491:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 482,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1491:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1490:9:4"
                },
                scope: 603,
                src: "1404:96:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 494,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setABI",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 492,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 487,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1521:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 486,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1521:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 489,
                      name: "contentType",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1535:19:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 488,
                        name: "uint256",
                        nodeType: "ElementaryTypeName",
                        src: "1535:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 491,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 494,
                      src: "1556:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 490,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1556:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1520:56:4"
                },
                returnParameters: {
                  id: 493,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1585:0:4"
                },
                scope: 603,
                src: "1505:81:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 501,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setAddr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 499,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 496,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 501,
                      src: "1608:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 495,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1608:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 498,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 501,
                      src: "1622:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 497,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1622:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1607:28:4"
                },
                returnParameters: {
                  id: 500,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1644:0:4"
                },
                scope: 603,
                src: "1591:54:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 510,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setAddr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 508,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 503,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1667:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 502,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1667:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 505,
                      name: "coinType",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1681:13:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 504,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "1681:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 507,
                      name: "a",
                      nodeType: "VariableDeclaration",
                      scope: 510,
                      src: "1696:16:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 506,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1696:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1666:47:4"
                },
                returnParameters: {
                  id: 509,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1722:0:4"
                },
                scope: 603,
                src: "1650:73:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 517,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setContenthash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 515,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 512,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 517,
                      src: "1752:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 511,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1752:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 514,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 517,
                      src: "1766:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 513,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1766:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1751:35:4"
                },
                returnParameters: {
                  id: 516,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1795:0:4"
                },
                scope: 603,
                src: "1728:68:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 524,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setDnsrr",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 522,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 519,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 524,
                      src: "1819:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 518,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1819:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 521,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 524,
                      src: "1833:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 520,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "1833:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1818:35:4"
                },
                returnParameters: {
                  id: 523,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1862:0:4"
                },
                scope: 603,
                src: "1801:62:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 531,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 529,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 526,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 531,
                      src: "1885:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 525,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1885:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 528,
                      name: "_name",
                      nodeType: "VariableDeclaration",
                      scope: 531,
                      src: "1899:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 527,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "1899:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1884:37:4"
                },
                returnParameters: {
                  id: 530,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1930:0:4"
                },
                scope: 603,
                src: "1868:63:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 540,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setPubkey",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 538,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 533,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1955:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 532,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1955:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 535,
                      name: "x",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1969:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 534,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1969:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 537,
                      name: "y",
                      nodeType: "VariableDeclaration",
                      scope: 540,
                      src: "1980:9:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 536,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1980:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1954:36:4"
                },
                returnParameters: {
                  id: 539,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "1999:0:4"
                },
                scope: 603,
                src: "1936:64:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 549,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setText",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 547,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 542,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2022:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 541,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2022:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 544,
                      name: "key",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2036:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 543,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2036:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 546,
                      name: "value",
                      nodeType: "VariableDeclaration",
                      scope: 549,
                      src: "2057:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_string_calldata_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 545,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2057:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2021:58:4"
                },
                returnParameters: {
                  id: 548,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2088:0:4"
                },
                scope: 603,
                src: "2005:84:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 558,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setInterface",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 556,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 551,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2116:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 550,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2116:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 553,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2130:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 552,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "2130:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 555,
                      name: "implementer",
                      nodeType: "VariableDeclaration",
                      scope: 558,
                      src: "2150:19:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 554,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "2150:7:4",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2115:55:4"
                },
                returnParameters: {
                  id: 557,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2179:0:4"
                },
                scope: 603,
                src: "2094:86:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 565,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "supportsInterface",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 561,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 560,
                      name: "interfaceID",
                      nodeType: "VariableDeclaration",
                      scope: 565,
                      src: "2212:18:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes4",
                        typeString: "bytes4"
                      },
                      typeName: {
                        id: 559,
                        name: "bytes4",
                        nodeType: "ElementaryTypeName",
                        src: "2212:6:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2211:20:4"
                },
                returnParameters: {
                  id: 564,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 563,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 565,
                      src: "2255:4:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      typeName: {
                        id: 562,
                        name: "bool",
                        nodeType: "ElementaryTypeName",
                        src: "2255:4:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2254:6:4"
                },
                scope: 603,
                src: "2185:76:4",
                stateMutability: "pure",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 574,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "multicall",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 569,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 568,
                      name: "data",
                      nodeType: "VariableDeclaration",
                      scope: 574,
                      src: "2285:21:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                        typeString: "bytes[]"
                      },
                      typeName: {
                        baseType: {
                          id: 566,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2285:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes"
                          }
                        },
                        id: 567,
                        length: null,
                        nodeType: "ArrayTypeName",
                        src: "2285:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_array$_t_bytes_storage_$dyn_storage_ptr",
                          typeString: "bytes[]"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2284:23:4"
                },
                returnParameters: {
                  id: 573,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 572,
                      name: "results",
                      nodeType: "VariableDeclaration",
                      scope: 574,
                      src: "2325:22:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_bytes_memory_$dyn_memory_ptr",
                        typeString: "bytes[]"
                      },
                      typeName: {
                        baseType: {
                          id: 570,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2325:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes"
                          }
                        },
                        id: 571,
                        length: null,
                        nodeType: "ArrayTypeName",
                        src: "2325:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_array$_t_bytes_storage_$dyn_storage_ptr",
                          typeString: "bytes[]"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2324:24:4"
                },
                scope: 603,
                src: "2266:83:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 581,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "content",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 577,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 576,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 581,
                      src: "2403:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 575,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2403:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2402:14:4"
                },
                returnParameters: {
                  id: 580,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 579,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 581,
                      src: "2440:7:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 578,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2440:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2439:9:4"
                },
                scope: 603,
                src: "2386:63:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 588,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "multihash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 584,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 583,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 588,
                      src: "2473:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 582,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2473:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2472:14:4"
                },
                returnParameters: {
                  id: 587,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 586,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 588,
                      src: "2510:12:4",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_memory_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 585,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "2510:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2509:14:4"
                },
                scope: 603,
                src: "2454:70:4",
                stateMutability: "view",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 595,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setContent",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 593,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 590,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 595,
                      src: "2549:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 589,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2549:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 592,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 595,
                      src: "2563:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 591,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2563:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2548:28:4"
                },
                returnParameters: {
                  id: 594,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2585:0:4"
                },
                scope: 603,
                src: "2529:57:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              },
              {
                body: null,
                documentation: null,
                id: 602,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setMultihash",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 600,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 597,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 602,
                      src: "2613:12:4",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 596,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2613:7:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 599,
                      name: "hash",
                      nodeType: "VariableDeclaration",
                      scope: 602,
                      src: "2627:19:4",
                      stateVariable: false,
                      storageLocation: "calldata",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes_calldata_ptr",
                        typeString: "bytes"
                      },
                      typeName: {
                        id: 598,
                        name: "bytes",
                        nodeType: "ElementaryTypeName",
                        src: "2627:5:4",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_storage_ptr",
                          typeString: "bytes"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2612:35:4"
                },
                returnParameters: {
                  id: 601,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "2656:0:4"
                },
                scope: 603,
                src: "2591:66:4",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "external"
              }
            ],
            scope: 604,
            src: "164:2495:4"
          }
        ],
        src: "0:2660:4"
      },
      compiler: {
        name: "solc",
        version: "0.5.8+commit.23d335f2.Emscripten.clang"
      },
      networks: {},
      schemaVersion: "3.0.16",
      updatedAt: "2020-02-10T19:24:14.594Z",
      devdoc: {
        methods: {}
      },
      userdoc: {
        methods: {},
        notice: "A generic resolver interface which includes all the functions including the ones deprecated"
      }
    };
  }
});

// node_modules/@ensdomains/ens/build/contracts/ReverseRegistrar.json
var require_ReverseRegistrar = __commonJS({
  "node_modules/@ensdomains/ens/build/contracts/ReverseRegistrar.json"(exports, module2) {
    module2.exports = {
      contractName: "ReverseRegistrar",
      abi: [
        {
          constant: true,
          inputs: [],
          name: "ens",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "ADDR_REVERSE_NODE",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          constant: true,
          inputs: [],
          name: "defaultResolver",
          outputs: [
            {
              name: "",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "view",
          type: "function"
        },
        {
          inputs: [
            {
              name: "ensAddr",
              type: "address"
            },
            {
              name: "resolverAddr",
              type: "address"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "constructor"
        },
        {
          constant: false,
          inputs: [
            {
              name: "owner",
              type: "address"
            }
          ],
          name: "claim",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "owner",
              type: "address"
            },
            {
              name: "resolver",
              type: "address"
            }
          ],
          name: "claimWithResolver",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: false,
          inputs: [
            {
              name: "name",
              type: "string"
            }
          ],
          name: "setName",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "nonpayable",
          type: "function"
        },
        {
          constant: true,
          inputs: [
            {
              name: "addr",
              type: "address"
            }
          ],
          name: "node",
          outputs: [
            {
              name: "",
              type: "bytes32"
            }
          ],
          payable: false,
          stateMutability: "pure",
          type: "function"
        }
      ],
      bytecode: "0x608060405234801561001057600080fd5b50604051604080610f4c8339810180604052604081101561003057600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26001026040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561017f57600080fd5b505afa158015610193573d6000803e3d6000fd5b505050506040513d60208110156101a957600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156102ca578073ffffffffffffffffffffffffffffffffffffffff16631e83409a336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561028d57600080fd5b505af11580156102a1573d6000803e3d6000fd5b505050506040513d60208110156102b757600080fd5b8101908080519060200190929190505050505b505050610c70806102dc6000396000f3fe608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f5a5466146100885780631e83409a1461010d5780633f15457f146101725780637cf8a2eb146101c9578063828eab0e146101f4578063bffbe61c1461024b578063c47f0027146102b0575b600080fd5b34801561009457600080fd5b506100f7600480360360408110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061038c565b6040518082815260200191505060405180910390f35b34801561011957600080fd5b5061015c6004803603602081101561013057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109a1565b6040518082815260200191505060405180910390f35b34801561017e57600080fd5b506101876109b5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d557600080fd5b506101de6109da565b6040518082815260200191505060405180910390f35b34801561020057600080fd5b50610209610a01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025757600080fd5b5061029a6004803603602081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a27565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b50610376600480360360208110156102d357600080fd5b81019080803590602001906401000000008111156102f057600080fd5b82018360208201111561030257600080fd5b8035906020019184600183028401116401000000008311171561032457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610a8a565b6040518082815260200191505060405180910390f35b60008061039833610bda565b905060007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010282604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d60208110156104aa57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141580156105ee57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d60208110156105ad57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610834573073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610757576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010285306040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b505050506040513d602081101561074157600080fd5b8101908080519060200190929190505050503090505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610995576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010285896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b8101908080519060200190929190505050505b81935050505092915050565b60006109ae82600061038c565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2600102610a5683610bda565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600080610ab930600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661038c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221382856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b6c578082015181840152602081019050610b51565b50505050905090810190601f168015610b995780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b5050505080915050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610c365760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610c00565b50602860002091505091905056fea165627a7a72305820e6313e7a4e2df43a1f5b7da522763dc6a86c5cd20f813441bb72230d11cef23d0029",
      deployedBytecode: "0x608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f5a5466146100885780631e83409a1461010d5780633f15457f146101725780637cf8a2eb146101c9578063828eab0e146101f4578063bffbe61c1461024b578063c47f0027146102b0575b600080fd5b34801561009457600080fd5b506100f7600480360360408110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061038c565b6040518082815260200191505060405180910390f35b34801561011957600080fd5b5061015c6004803603602081101561013057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109a1565b6040518082815260200191505060405180910390f35b34801561017e57600080fd5b506101876109b5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101d557600080fd5b506101de6109da565b6040518082815260200191505060405180910390f35b34801561020057600080fd5b50610209610a01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025757600080fd5b5061029a6004803603602081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a27565b6040518082815260200191505060405180910390f35b3480156102bc57600080fd5b50610376600480360360208110156102d357600080fd5b81019080803590602001906401000000008111156102f057600080fd5b82018360208201111561030257600080fd5b8035906020019184600183028401116401000000008311171561032457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610a8a565b6040518082815260200191505060405180910390f35b60008061039833610bda565b905060007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010282604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d60208110156104aa57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141580156105ee57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d60208110156105ad57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610834573073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610757576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010285306040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561071757600080fd5b505af115801561072b573d6000803e3d6000fd5b505050506040513d602081101561074157600080fd5b8101908080519060200190929190505050503090505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515610995576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010285896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b8101908080519060200190929190505050505b81935050505092915050565b60006109ae82600061038c565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260010281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2600102610a5683610bda565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600080610ab930600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661038c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221382856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b6c578082015181840152602081019050610b51565b50505050905090810190601f168015610b995780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b5050505080915050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610c365760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610c00565b50602860002091505091905056fea165627a7a72305820e6313e7a4e2df43a1f5b7da522763dc6a86c5cd20f813441bb72230d11cef23d0029",
      sourceMap: "136:4188:9:-;;;546:391;8:9:-1;5:2;;;30:1;27;20:12;5:2;546:391:9;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;546:391:9;;;;;;;;;;;;;;;;;;;;;;;;;621:7;615:3;;:13;;;;;;;;;;;;;;;;;;656:12;638:15;;:30;;;;;;;;;;;;;;;;;;745:29;794:3;;;;;;;;;;;:9;;;244:66;804:17;;794:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;794:28:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;794:28:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;794:28:9;;;;;;;;;;;;;;;;745:78;;870:3;837:37;;845:12;837:37;;;;833:98;;;890:12;:18;;;909:10;890:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;890:30:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;890:30:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;890:30:9;;;;;;;;;;;;;;;;;833:98;546:391;;;136:4188;;;;;;",
      deployedSourceMap: "136:4188:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1669:871;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1669:871:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1669:871:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1204:117;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1204:117:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1204:117:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;317:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;317:14:9;;;;;;;;;;;;;;;;;;;;;;;;;;;200:110;;8:9:-1;5:2;;;30:1;27;20:12;5:2;200:110:9;;;;;;;;;;;;;;;;;;;;;;;337:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;337:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;3245:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3245:150:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3245:150:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2859:218;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2859:218:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2859:218:9;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2859:218:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2859:218:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2859:218:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2859:218:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1669:871;1745:7;1764:13;1780:26;1795:10;1780:14;:26::i;:::-;1764:42;;1816:12;244:66;1858:17;;1877:5;1841:42;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1841:42:9;;;1831:53;;;;;;1816:68;;1894:20;1917:3;;;;;;;;;;;:9;;;1927:4;1917:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1917:15:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1917:15:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1917:15:9;;;;;;;;;;;;;;;;1894:38;;2010:3;1990:24;;:8;:24;;;;:58;;;;;2030:3;;;;;;;;;;;:12;;;2043:4;2030:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2030:18:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2030:18:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2030:18:9;;;;;;;;;;;;;;;;2018:30;;:8;:30;;;;1990:58;1986:372;;;2157:4;2133:29;;:12;:29;;;;2129:174;;;2182:3;;;;;;;;;;;:19;;;244:66;2202:17;;2221:5;2236:4;2182:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2182:60:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2182:60:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2182:60:9;;;;;;;;;;;;;;;;;2283:4;2260:28;;2129:174;2316:3;;;;;;;;;;;:15;;;2332:4;2338:8;2316:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2316:31:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2316:31:9;;;;1986:372;2428:5;2412:21;;:12;:21;;;;2408:104;;;2449:3;;;;;;;;;;;:19;;;244:66;2469:17;;2488:5;2495;2449:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2449:52:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2449:52:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2449:52:9;;;;;;;;;;;;;;;;;2408:104;2529:4;2522:11;;;;;1669:871;;;;:::o;1204:117::-;1250:7;1276:38;1294:5;1309:3;1276:17;:38::i;:::-;1269:45;;1204:117;;;:::o;317:14::-;;;;;;;;;;;;;:::o;200:110::-;244:66;200:110;;;:::o;337:35::-;;;;;;;;;;;;;:::o;3245:150::-;3294:7;244:66;3347:17;;3366:20;3381:4;3366:14;:20::i;:::-;3330:57;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3330:57:9;;;3320:68;;;;;;3313:75;;3245:150;;;:::o;2859:218::-;2912:7;2931:12;2946:58;2972:4;2987:15;;;;;;;;;;;2946:17;:58::i;:::-;2931:73;;3014:15;;;;;;;;;;;:23;;;3038:4;3044;3014:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3014:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3014:35:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3014:35:9;;;;3066:4;3059:11;;;2859:218;;;:::o;3696:626::-;3756:11;3885:66;3980:2;3965:304;3991:1;3988;3985:8;3965:304;;;4028:1;4025;4021:9;4016:14;;4079:6;4073:3;4067:4;4063:14;4058:28;4055:1;4047:40;4122:4;4116;4112:15;4104:23;;4156:1;4153;4149:9;4144:14;;4207:6;4201:3;4195:4;4191:14;4186:28;4183:1;4175:40;4250:4;4244;4240:15;4232:23;;3965:304;;;3969:15;4303:2;4300:1;4290:16;4283:23;;3857:459;;;;:::o",
      source: "pragma solidity ^0.5.0;\n\nimport \"./ENS.sol\";\n\ncontract NameResolver {\n    function setName(bytes32 node, string memory name) public;\n}\n\ncontract ReverseRegistrar {\n    // namehash('addr.reverse')\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    ENS public ens;\n    NameResolver public defaultResolver;\n\n    /**\n     * @dev Constructor\n     * @param ensAddr The address of the ENS registry.\n     * @param resolverAddr The address of the default reverse resolver.\n     */\n    constructor(ENS ensAddr, NameResolver resolverAddr) public {\n        ens = ensAddr;\n        defaultResolver = resolverAddr;\n\n        // Assign ownership of the reverse record to our deployer\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\n        if (address(oldRegistrar) != address(0x0)) {\n            oldRegistrar.claim(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claim(address owner) public returns (bytes32) {\n        return claimWithResolver(owner, address(0x0));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\n        bytes32 label = sha3HexAddress(msg.sender);\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\n        address currentOwner = ens.owner(node);\n\n        // Update the resolver if required\n        if (resolver != address(0x0) && resolver != ens.resolver(node)) {\n            // Transfer the name to us first if it's not already\n            if (currentOwner != address(this)) {\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\n                currentOwner = address(this);\n            }\n            ens.setResolver(node, resolver);\n        }\n\n        // Update the owner if required\n        if (currentOwner != owner) {\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\n        }\n\n        return node;\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the calling account. First updates the resolver to the default reverse\n     * resolver if necessary.\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setName(string memory name) public returns (bytes32) {\n        bytes32 node = claimWithResolver(address(this), address(defaultResolver));\n        defaultResolver.setName(node, name);\n        return node;\n    }\n\n    /**\n     * @dev Returns the node hash for a given account's reverse records.\n     * @param addr The address to hash\n     * @return The ENS node hash.\n     */\n    function node(address addr) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\n    }\n\n    /**\n     * @dev An optimised function to compute the sha3 of the lower-case\n     *      hexadecimal representation of an Ethereum address.\n     * @param addr The address to hash\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\n     *         input address.\n     */\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\n        addr;\n        ret; // Stop warning us about unused variables\n        assembly {\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n\n            for { let i := 40 } gt(i, 0) { } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n\n            ret := keccak256(0, 40)\n        }\n    }\n}\n",
      sourcePath: "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
      ast: {
        absolutePath: "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
        exportedSymbols: {
          NameResolver: [
            2738
          ],
          ReverseRegistrar: [
            2954
          ]
        },
        id: 2955,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 2729,
            literals: [
              "solidity",
              "^",
              "0.5",
              ".0"
            ],
            nodeType: "PragmaDirective",
            src: "0:23:9"
          },
          {
            absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
            file: "./ENS.sol",
            id: 2730,
            nodeType: "ImportDirective",
            scope: 2955,
            sourceUnit: 437,
            src: "25:19:9",
            symbolAliases: [],
            unitAlias: ""
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "contract",
            documentation: null,
            fullyImplemented: false,
            id: 2738,
            linearizedBaseContracts: [
              2738
            ],
            name: "NameResolver",
            nodeType: "ContractDefinition",
            nodes: [
              {
                body: null,
                documentation: null,
                id: 2737,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2735,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2732,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 2737,
                      src: "91:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2731,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "91:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2734,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 2737,
                      src: "105:18:9",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 2733,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "105:6:9",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "90:34:9"
                },
                returnParameters: {
                  id: 2736,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "131:0:9"
                },
                scope: 2738,
                src: "74:58:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              }
            ],
            scope: 2955,
            src: "46:88:9"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "contract",
            documentation: null,
            fullyImplemented: true,
            id: 2954,
            linearizedBaseContracts: [
              2954
            ],
            name: "ReverseRegistrar",
            nodeType: "ContractDefinition",
            nodes: [
              {
                constant: true,
                id: 2741,
                name: "ADDR_REVERSE_NODE",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "200:110:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_bytes32",
                  typeString: "bytes32"
                },
                typeName: {
                  id: 2739,
                  name: "bytes32",
                  nodeType: "ElementaryTypeName",
                  src: "200:7:9",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32"
                  }
                },
                value: {
                  argumentTypes: null,
                  hexValue: "307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532",
                  id: 2740,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "number",
                  lValueRequested: false,
                  nodeType: "Literal",
                  src: "244:66:9",
                  subdenomination: null,
                  typeDescriptions: {
                    typeIdentifier: "t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1",
                    typeString: "int_const 6595...(69 digits omitted)...3154"
                  },
                  value: "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"
                },
                visibility: "public"
              },
              {
                constant: false,
                id: 2743,
                name: "ens",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "317:14:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_ENS_$436",
                  typeString: "contract ENS"
                },
                typeName: {
                  contractScope: null,
                  id: 2742,
                  name: "ENS",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 436,
                  src: "317:3:9",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_ENS_$436",
                    typeString: "contract ENS"
                  }
                },
                value: null,
                visibility: "public"
              },
              {
                constant: false,
                id: 2745,
                name: "defaultResolver",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "337:35:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_NameResolver_$2738",
                  typeString: "contract NameResolver"
                },
                typeName: {
                  contractScope: null,
                  id: 2744,
                  name: "NameResolver",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 2738,
                  src: "337:12:9",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_NameResolver_$2738",
                    typeString: "contract NameResolver"
                  }
                },
                value: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2785,
                  nodeType: "Block",
                  src: "605:332:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2754,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          argumentTypes: null,
                          id: 2752,
                          name: "ens",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2743,
                          src: "615:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          argumentTypes: null,
                          id: 2753,
                          name: "ensAddr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2747,
                          src: "621:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS"
                          }
                        },
                        src: "615:13:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS"
                        }
                      },
                      id: 2755,
                      nodeType: "ExpressionStatement",
                      src: "615:13:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2758,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          argumentTypes: null,
                          id: 2756,
                          name: "defaultResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2745,
                          src: "638:15:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          argumentTypes: null,
                          id: 2757,
                          name: "resolverAddr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2749,
                          src: "656:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver"
                          }
                        },
                        src: "638:30:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver"
                        }
                      },
                      id: 2759,
                      nodeType: "ExpressionStatement",
                      src: "638:30:9"
                    },
                    {
                      assignments: [
                        2761
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2761,
                          name: "oldRegistrar",
                          nodeType: "VariableDeclaration",
                          scope: 2785,
                          src: "745:29:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                            typeString: "contract ReverseRegistrar"
                          },
                          typeName: {
                            contractScope: null,
                            id: 2760,
                            name: "ReverseRegistrar",
                            nodeType: "UserDefinedTypeName",
                            referencedDeclaration: 2954,
                            src: "745:16:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                              typeString: "contract ReverseRegistrar"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2768,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2765,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "804:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2763,
                                name: "ens",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2743,
                                src: "794:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ENS_$436",
                                  typeString: "contract ENS"
                                }
                              },
                              id: 2764,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "owner",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 405,
                              src: "794:9:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                typeString: "function (bytes32) view external returns (address)"
                              }
                            },
                            id: 2766,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "794:28:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          ],
                          id: 2762,
                          name: "ReverseRegistrar",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2954,
                          src: "777:16:9",
                          typeDescriptions: {
                            typeIdentifier: "t_type$_t_contract$_ReverseRegistrar_$2954_$",
                            typeString: "type(contract ReverseRegistrar)"
                          }
                        },
                        id: 2767,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "typeConversion",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "777:46:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                          typeString: "contract ReverseRegistrar"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "745:78:9"
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        },
                        id: 2775,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2770,
                              name: "oldRegistrar",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2761,
                              src: "845:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar"
                              }
                            }
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar"
                              }
                            ],
                            id: 2769,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            lValueRequested: false,
                            nodeType: "ElementaryTypeNameExpression",
                            src: "837:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_type$_t_address_$",
                              typeString: "type(address)"
                            },
                            typeName: "address"
                          },
                          id: 2771,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "837:21:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "!=",
                        rightExpression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              hexValue: "307830",
                              id: 2773,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "number",
                              lValueRequested: false,
                              nodeType: "Literal",
                              src: "870:3:9",
                              subdenomination: null,
                              typeDescriptions: {
                                typeIdentifier: "t_rational_0_by_1",
                                typeString: "int_const 0"
                              },
                              value: "0x0"
                            }
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_rational_0_by_1",
                                typeString: "int_const 0"
                              }
                            ],
                            id: 2772,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            lValueRequested: false,
                            nodeType: "ElementaryTypeNameExpression",
                            src: "862:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_type$_t_address_$",
                              typeString: "type(address)"
                            },
                            typeName: "address"
                          },
                          id: 2774,
                          isConstant: false,
                          isLValue: false,
                          isPure: true,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "862:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address_payable",
                            typeString: "address payable"
                          }
                        },
                        src: "837:37:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2784,
                      nodeType: "IfStatement",
                      src: "833:98:9",
                      trueBody: {
                        id: 2783,
                        nodeType: "Block",
                        src: "876:55:9",
                        statements: [
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  expression: {
                                    argumentTypes: null,
                                    id: 2779,
                                    name: "msg",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 3032,
                                    src: "909:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_magic_message",
                                      typeString: "msg"
                                    }
                                  },
                                  id: 2780,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "sender",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: null,
                                  src: "909:10:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address_payable",
                                    typeString: "address payable"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_address_payable",
                                    typeString: "address payable"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2776,
                                  name: "oldRegistrar",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2761,
                                  src: "890:12:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar"
                                  }
                                },
                                id: 2778,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "claim",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 2801,
                                src: "890:18:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$",
                                  typeString: "function (address) external returns (bytes32)"
                                }
                              },
                              id: 2781,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "890:30:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32"
                              }
                            },
                            id: 2782,
                            nodeType: "ExpressionStatement",
                            src: "890:30:9"
                          }
                        ]
                      }
                    }
                  ]
                },
                documentation: "@dev Constructor\n@param ensAddr The address of the ENS registry.\n@param resolverAddr The address of the default reverse resolver.",
                id: 2786,
                implemented: true,
                kind: "constructor",
                modifiers: [],
                name: "",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2750,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2747,
                      name: "ensAddr",
                      nodeType: "VariableDeclaration",
                      scope: 2786,
                      src: "558:11:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_ENS_$436",
                        typeString: "contract ENS"
                      },
                      typeName: {
                        contractScope: null,
                        id: 2746,
                        name: "ENS",
                        nodeType: "UserDefinedTypeName",
                        referencedDeclaration: 436,
                        src: "558:3:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2749,
                      name: "resolverAddr",
                      nodeType: "VariableDeclaration",
                      scope: 2786,
                      src: "571:25:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_NameResolver_$2738",
                        typeString: "contract NameResolver"
                      },
                      typeName: {
                        contractScope: null,
                        id: 2748,
                        name: "NameResolver",
                        nodeType: "UserDefinedTypeName",
                        referencedDeclaration: 2738,
                        src: "571:12:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "557:40:9"
                },
                returnParameters: {
                  id: 2751,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "605:0:9"
                },
                scope: 2954,
                src: "546:391:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2800,
                  nodeType: "Block",
                  src: "1259:62:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2794,
                            name: "owner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2788,
                            src: "1294:5:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2796,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "1309:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                },
                                value: "0x0"
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                }
                              ],
                              id: 2795,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "1301:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2797,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "1301:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            },
                            {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          ],
                          id: 2793,
                          name: "claimWithResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2894,
                          src: "1276:17:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address,address) returns (bytes32)"
                          }
                        },
                        id: 2798,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1276:38:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2792,
                      id: 2799,
                      nodeType: "Return",
                      src: "1269:45:9"
                    }
                  ]
                },
                documentation: "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@return The ENS node hash of the reverse record.",
                id: 2801,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "claim",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2789,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2788,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 2801,
                      src: "1219:13:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2787,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1219:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1218:15:9"
                },
                returnParameters: {
                  id: 2792,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2791,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2801,
                      src: "1250:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2790,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1250:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1249:9:9"
                },
                scope: 2954,
                src: "1204:117:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2893,
                  nodeType: "Block",
                  src: "1754:786:9",
                  statements: [
                    {
                      assignments: [
                        2811
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2811,
                          name: "label",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1764:13:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2810,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "1764:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2816,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            expression: {
                              argumentTypes: null,
                              id: 2813,
                              name: "msg",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 3032,
                              src: "1795:3:9",
                              typeDescriptions: {
                                typeIdentifier: "t_magic_message",
                                typeString: "msg"
                              }
                            },
                            id: 2814,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "sender",
                            nodeType: "MemberAccess",
                            referencedDeclaration: null,
                            src: "1795:10:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          ],
                          id: 2812,
                          name: "sha3HexAddress",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2953,
                          src: "1780:14:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address) pure returns (bytes32)"
                          }
                        },
                        id: 2815,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1780:26:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1764:42:9"
                    },
                    {
                      assignments: [
                        2818
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2818,
                          name: "node",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1816:12:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2817,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "1816:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2826,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2822,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "1858:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              },
                              {
                                argumentTypes: null,
                                id: 2823,
                                name: "label",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2811,
                                src: "1877:5:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                },
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2820,
                                name: "abi",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3019,
                                src: "1841:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_abi",
                                  typeString: "abi"
                                }
                              },
                              id: 2821,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              memberName: "encodePacked",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "1841:16:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                typeString: "function () pure returns (bytes memory)"
                              }
                            },
                            id: 2824,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "1841:42:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          ],
                          id: 2819,
                          name: "keccak256",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 3026,
                          src: "1831:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            typeString: "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        id: 2825,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1831:53:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1816:68:9"
                    },
                    {
                      assignments: [
                        2828
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2828,
                          name: "currentOwner",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1894:20:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          typeName: {
                            id: 2827,
                            name: "address",
                            nodeType: "ElementaryTypeName",
                            src: "1894:7:9",
                            stateMutability: "nonpayable",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2833,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2831,
                            name: "node",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2818,
                            src: "1927:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          ],
                          expression: {
                            argumentTypes: null,
                            id: 2829,
                            name: "ens",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2743,
                            src: "1917:3:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS"
                            }
                          },
                          id: 2830,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "owner",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 405,
                          src: "1917:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                            typeString: "function (bytes32) view external returns (address)"
                          }
                        },
                        id: 2832,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1917:15:9",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1894:38:9"
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        },
                        id: 2845,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          id: 2838,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2834,
                            name: "resolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2805,
                            src: "1990:8:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2836,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "2010:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                },
                                value: "0x0"
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                }
                              ],
                              id: 2835,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2002:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2837,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2002:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          },
                          src: "1990:24:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "&&",
                        rightExpression: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          id: 2844,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2839,
                            name: "resolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2805,
                            src: "2018:8:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2842,
                                name: "node",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2818,
                                src: "2043:4:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2840,
                                name: "ens",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2743,
                                src: "2030:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ENS_$436",
                                  typeString: "contract ENS"
                                }
                              },
                              id: 2841,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "resolver",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 412,
                              src: "2030:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                typeString: "function (bytes32) view external returns (address)"
                              }
                            },
                            id: 2843,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2030:18:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          src: "2018:30:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool"
                          }
                        },
                        src: "1990:58:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2877,
                      nodeType: "IfStatement",
                      src: "1986:372:9",
                      trueBody: {
                        id: 2876,
                        nodeType: "Block",
                        src: "2050:308:9",
                        statements: [
                          {
                            condition: {
                              argumentTypes: null,
                              commonType: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              },
                              id: 2850,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              leftExpression: {
                                argumentTypes: null,
                                id: 2846,
                                name: "currentOwner",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2828,
                                src: "2133:12:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_address",
                                  typeString: "address"
                                }
                              },
                              nodeType: "BinaryOperation",
                              operator: "!=",
                              rightExpression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2848,
                                    name: "this",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 3065,
                                    src: "2157:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar"
                                    }
                                  }
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar"
                                    }
                                  ],
                                  id: 2847,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  lValueRequested: false,
                                  nodeType: "ElementaryTypeNameExpression",
                                  src: "2149:7:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_type$_t_address_$",
                                    typeString: "type(address)"
                                  },
                                  typeName: "address"
                                },
                                id: 2849,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "typeConversion",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2149:13:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_address",
                                  typeString: "address"
                                }
                              },
                              src: "2133:29:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bool",
                                typeString: "bool"
                              }
                            },
                            falseBody: null,
                            id: 2868,
                            nodeType: "IfStatement",
                            src: "2129:174:9",
                            trueBody: {
                              id: 2867,
                              nodeType: "Block",
                              src: "2164:139:9",
                              statements: [
                                {
                                  expression: {
                                    argumentTypes: null,
                                    arguments: [
                                      {
                                        argumentTypes: null,
                                        id: 2854,
                                        name: "ADDR_REVERSE_NODE",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2741,
                                        src: "2202:17:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        }
                                      },
                                      {
                                        argumentTypes: null,
                                        id: 2855,
                                        name: "label",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2811,
                                        src: "2221:5:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        }
                                      },
                                      {
                                        argumentTypes: null,
                                        arguments: [
                                          {
                                            argumentTypes: null,
                                            id: 2857,
                                            name: "this",
                                            nodeType: "Identifier",
                                            overloadedDeclarations: [],
                                            referencedDeclaration: 3065,
                                            src: "2236:4:9",
                                            typeDescriptions: {
                                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                              typeString: "contract ReverseRegistrar"
                                            }
                                          }
                                        ],
                                        expression: {
                                          argumentTypes: [
                                            {
                                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                              typeString: "contract ReverseRegistrar"
                                            }
                                          ],
                                          id: 2856,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: true,
                                          lValueRequested: false,
                                          nodeType: "ElementaryTypeNameExpression",
                                          src: "2228:7:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_type$_t_address_$",
                                            typeString: "type(address)"
                                          },
                                          typeName: "address"
                                        },
                                        id: 2858,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        kind: "typeConversion",
                                        lValueRequested: false,
                                        names: [],
                                        nodeType: "FunctionCall",
                                        src: "2228:13:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address"
                                        }
                                      }
                                    ],
                                    expression: {
                                      argumentTypes: [
                                        {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        },
                                        {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        },
                                        {
                                          typeIdentifier: "t_address",
                                          typeString: "address"
                                        }
                                      ],
                                      expression: {
                                        argumentTypes: null,
                                        id: 2851,
                                        name: "ens",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2743,
                                        src: "2182:3:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_contract$_ENS_$436",
                                          typeString: "contract ENS"
                                        }
                                      },
                                      id: 2853,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      lValueRequested: false,
                                      memberName: "setSubnodeOwner",
                                      nodeType: "MemberAccess",
                                      referencedDeclaration: 370,
                                      src: "2182:19:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                        typeString: "function (bytes32,bytes32,address) external returns (bytes32)"
                                      }
                                    },
                                    id: 2859,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    kind: "functionCall",
                                    lValueRequested: false,
                                    names: [],
                                    nodeType: "FunctionCall",
                                    src: "2182:60:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32"
                                    }
                                  },
                                  id: 2860,
                                  nodeType: "ExpressionStatement",
                                  src: "2182:60:9"
                                },
                                {
                                  expression: {
                                    argumentTypes: null,
                                    id: 2865,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    lValueRequested: false,
                                    leftHandSide: {
                                      argumentTypes: null,
                                      id: 2861,
                                      name: "currentOwner",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 2828,
                                      src: "2260:12:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address"
                                      }
                                    },
                                    nodeType: "Assignment",
                                    operator: "=",
                                    rightHandSide: {
                                      argumentTypes: null,
                                      arguments: [
                                        {
                                          argumentTypes: null,
                                          id: 2863,
                                          name: "this",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 3065,
                                          src: "2283:4:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                            typeString: "contract ReverseRegistrar"
                                          }
                                        }
                                      ],
                                      expression: {
                                        argumentTypes: [
                                          {
                                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                            typeString: "contract ReverseRegistrar"
                                          }
                                        ],
                                        id: 2862,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: true,
                                        lValueRequested: false,
                                        nodeType: "ElementaryTypeNameExpression",
                                        src: "2275:7:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_type$_t_address_$",
                                          typeString: "type(address)"
                                        },
                                        typeName: "address"
                                      },
                                      id: 2864,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      kind: "typeConversion",
                                      lValueRequested: false,
                                      names: [],
                                      nodeType: "FunctionCall",
                                      src: "2275:13:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address"
                                      }
                                    },
                                    src: "2260:28:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  },
                                  id: 2866,
                                  nodeType: "ExpressionStatement",
                                  src: "2260:28:9"
                                }
                              ]
                            }
                          },
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2872,
                                  name: "node",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2818,
                                  src: "2332:4:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2873,
                                  name: "resolver",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2805,
                                  src: "2338:8:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2869,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2316:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS"
                                  }
                                },
                                id: 2871,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "setResolver",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 377,
                                src: "2316:15:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                                  typeString: "function (bytes32,address) external"
                                }
                              },
                              id: 2874,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2316:31:9",
                              typeDescriptions: {
                                typeIdentifier: "t_tuple$__$",
                                typeString: "tuple()"
                              }
                            },
                            id: 2875,
                            nodeType: "ExpressionStatement",
                            src: "2316:31:9"
                          }
                        ]
                      }
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        },
                        id: 2880,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          id: 2878,
                          name: "currentOwner",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2828,
                          src: "2412:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "!=",
                        rightExpression: {
                          argumentTypes: null,
                          id: 2879,
                          name: "owner",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2803,
                          src: "2428:5:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        src: "2412:21:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2890,
                      nodeType: "IfStatement",
                      src: "2408:104:9",
                      trueBody: {
                        id: 2889,
                        nodeType: "Block",
                        src: "2435:77:9",
                        statements: [
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2884,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "2469:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2885,
                                  name: "label",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2811,
                                  src: "2488:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2886,
                                  name: "owner",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2803,
                                  src: "2495:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2881,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2449:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS"
                                  }
                                },
                                id: 2883,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "setSubnodeOwner",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 370,
                                src: "2449:19:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                  typeString: "function (bytes32,bytes32,address) external returns (bytes32)"
                                }
                              },
                              id: 2887,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2449:52:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32"
                              }
                            },
                            id: 2888,
                            nodeType: "ExpressionStatement",
                            src: "2449:52:9"
                          }
                        ]
                      }
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2891,
                        name: "node",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2818,
                        src: "2529:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2809,
                      id: 2892,
                      nodeType: "Return",
                      src: "2522:11:9"
                    }
                  ]
                },
                documentation: "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@param resolver The address of the resolver to set; 0 to leave unchanged.\n@return The ENS node hash of the reverse record.",
                id: 2894,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "claimWithResolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2806,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2803,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1696:13:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2802,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1696:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2805,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1711:16:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2804,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1711:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1695:33:9"
                },
                returnParameters: {
                  id: 2809,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2808,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1745:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2807,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1745:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1744:9:9"
                },
                scope: 2954,
                src: "1669:871:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2921,
                  nodeType: "Block",
                  src: "2921:156:9",
                  statements: [
                    {
                      assignments: [
                        2902
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2902,
                          name: "node",
                          nodeType: "VariableDeclaration",
                          scope: 2921,
                          src: "2931:12:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2901,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "2931:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2911,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2905,
                                name: "this",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3065,
                                src: "2972:4:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar"
                                }
                              ],
                              id: 2904,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2964:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2906,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2964:13:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2908,
                                name: "defaultResolver",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2745,
                                src: "2987:15:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_NameResolver_$2738",
                                  typeString: "contract NameResolver"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_contract$_NameResolver_$2738",
                                  typeString: "contract NameResolver"
                                }
                              ],
                              id: 2907,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2979:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2909,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2979:24:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            },
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          ],
                          id: 2903,
                          name: "claimWithResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2894,
                          src: "2946:17:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address,address) returns (bytes32)"
                          }
                        },
                        id: 2910,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "2946:58:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "2931:73:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2915,
                            name: "node",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2902,
                            src: "3038:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          {
                            argumentTypes: null,
                            id: 2916,
                            name: "name",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2896,
                            src: "3044:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_string_memory_ptr",
                              typeString: "string memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            },
                            {
                              typeIdentifier: "t_string_memory_ptr",
                              typeString: "string memory"
                            }
                          ],
                          expression: {
                            argumentTypes: null,
                            id: 2912,
                            name: "defaultResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2745,
                            src: "3014:15:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver"
                            }
                          },
                          id: 2914,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "setName",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 2737,
                          src: "3014:23:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$",
                            typeString: "function (bytes32,string memory) external"
                          }
                        },
                        id: 2917,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3014:35:9",
                        typeDescriptions: {
                          typeIdentifier: "t_tuple$__$",
                          typeString: "tuple()"
                        }
                      },
                      id: 2918,
                      nodeType: "ExpressionStatement",
                      src: "3014:35:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2919,
                        name: "node",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2902,
                        src: "3066:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2900,
                      id: 2920,
                      nodeType: "Return",
                      src: "3059:11:9"
                    }
                  ]
                },
                documentation: "@dev Sets the `name()` record for the reverse ENS record associated with\nthe calling account. First updates the resolver to the default reverse\nresolver if necessary.\n@param name The name to set for this address.\n@return The ENS node hash of the reverse record.",
                id: 2922,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2897,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2896,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 2922,
                      src: "2876:18:9",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 2895,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2876:6:9",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2875:20:9"
                },
                returnParameters: {
                  id: 2900,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2899,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2922,
                      src: "2912:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2898,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2912:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2911:9:9"
                },
                scope: 2954,
                src: "2859:218:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2939,
                  nodeType: "Block",
                  src: "3303:92:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2932,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "3347:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              },
                              {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2934,
                                    name: "addr",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2924,
                                    src: "3381:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  }
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  ],
                                  id: 2933,
                                  name: "sha3HexAddress",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2953,
                                  src: "3366:14:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                                    typeString: "function (address) pure returns (bytes32)"
                                  }
                                },
                                id: 2935,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "3366:20:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                },
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2930,
                                name: "abi",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3019,
                                src: "3330:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_abi",
                                  typeString: "abi"
                                }
                              },
                              id: 2931,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              memberName: "encodePacked",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "3330:16:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                typeString: "function () pure returns (bytes memory)"
                              }
                            },
                            id: 2936,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "3330:57:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          ],
                          id: 2929,
                          name: "keccak256",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 3026,
                          src: "3320:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            typeString: "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        id: 2937,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3320:68:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2928,
                      id: 2938,
                      nodeType: "Return",
                      src: "3313:75:9"
                    }
                  ]
                },
                documentation: "@dev Returns the node hash for a given account's reverse records.\n@param addr The address to hash\n@return The ENS node hash.",
                id: 2940,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "node",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2925,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2924,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 2940,
                      src: "3259:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2923,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "3259:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3258:14:9"
                },
                returnParameters: {
                  id: 2928,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2927,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2940,
                      src: "3294:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2926,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "3294:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3293:9:9"
                },
                scope: 2954,
                src: "3245:150:9",
                stateMutability: "pure",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2952,
                  nodeType: "Block",
                  src: "3769:553:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2947,
                        name: "addr",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2942,
                        src: "3779:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      id: 2948,
                      nodeType: "ExpressionStatement",
                      src: "3779:4:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2949,
                        name: "ret",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2945,
                        src: "3793:3:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      id: 2950,
                      nodeType: "ExpressionStatement",
                      src: "3793:3:9"
                    },
                    {
                      externalReferences: [
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4104:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4067:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4116:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4244:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4232:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          ret: {
                            declaration: 2945,
                            isOffset: false,
                            isSlot: false,
                            src: "4283:3:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4195:4:9",
                            valueSize: 1
                          }
                        }
                      ],
                      id: 2951,
                      nodeType: "InlineAssembly",
                      operations: "{\n    let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n    for {\n        let i := 40\n    }\n    gt(i, 0)\n    {\n    }\n    {\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n    }\n    ret := keccak256(0, 40)\n}",
                      src: "3848:474:9"
                    }
                  ]
                },
                documentation: "@dev An optimised function to compute the sha3 of the lower-case\n     hexadecimal representation of an Ethereum address.\n@param addr The address to hash\n@return The SHA3 hash of the lower-case hexadecimal encoding of the\n        input address.",
                id: 2953,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "sha3HexAddress",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2943,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2942,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 2953,
                      src: "3720:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2941,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "3720:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3719:14:9"
                },
                returnParameters: {
                  id: 2946,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2945,
                      name: "ret",
                      nodeType: "VariableDeclaration",
                      scope: 2953,
                      src: "3756:11:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2944,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "3756:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3755:13:9"
                },
                scope: 2954,
                src: "3696:626:9",
                stateMutability: "pure",
                superFunction: null,
                visibility: "private"
              }
            ],
            scope: 2955,
            src: "136:4188:9"
          }
        ],
        src: "0:4325:9"
      },
      legacyAST: {
        absolutePath: "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
        exportedSymbols: {
          NameResolver: [
            2738
          ],
          ReverseRegistrar: [
            2954
          ]
        },
        id: 2955,
        nodeType: "SourceUnit",
        nodes: [
          {
            id: 2729,
            literals: [
              "solidity",
              "^",
              "0.5",
              ".0"
            ],
            nodeType: "PragmaDirective",
            src: "0:23:9"
          },
          {
            absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
            file: "./ENS.sol",
            id: 2730,
            nodeType: "ImportDirective",
            scope: 2955,
            sourceUnit: 437,
            src: "25:19:9",
            symbolAliases: [],
            unitAlias: ""
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "contract",
            documentation: null,
            fullyImplemented: false,
            id: 2738,
            linearizedBaseContracts: [
              2738
            ],
            name: "NameResolver",
            nodeType: "ContractDefinition",
            nodes: [
              {
                body: null,
                documentation: null,
                id: 2737,
                implemented: false,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2735,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2732,
                      name: "node",
                      nodeType: "VariableDeclaration",
                      scope: 2737,
                      src: "91:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2731,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "91:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2734,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 2737,
                      src: "105:18:9",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 2733,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "105:6:9",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "90:34:9"
                },
                returnParameters: {
                  id: 2736,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "131:0:9"
                },
                scope: 2738,
                src: "74:58:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              }
            ],
            scope: 2955,
            src: "46:88:9"
          },
          {
            baseContracts: [],
            contractDependencies: [],
            contractKind: "contract",
            documentation: null,
            fullyImplemented: true,
            id: 2954,
            linearizedBaseContracts: [
              2954
            ],
            name: "ReverseRegistrar",
            nodeType: "ContractDefinition",
            nodes: [
              {
                constant: true,
                id: 2741,
                name: "ADDR_REVERSE_NODE",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "200:110:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_bytes32",
                  typeString: "bytes32"
                },
                typeName: {
                  id: 2739,
                  name: "bytes32",
                  nodeType: "ElementaryTypeName",
                  src: "200:7:9",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32"
                  }
                },
                value: {
                  argumentTypes: null,
                  hexValue: "307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532",
                  id: 2740,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "number",
                  lValueRequested: false,
                  nodeType: "Literal",
                  src: "244:66:9",
                  subdenomination: null,
                  typeDescriptions: {
                    typeIdentifier: "t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1",
                    typeString: "int_const 6595...(69 digits omitted)...3154"
                  },
                  value: "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"
                },
                visibility: "public"
              },
              {
                constant: false,
                id: 2743,
                name: "ens",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "317:14:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_ENS_$436",
                  typeString: "contract ENS"
                },
                typeName: {
                  contractScope: null,
                  id: 2742,
                  name: "ENS",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 436,
                  src: "317:3:9",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_ENS_$436",
                    typeString: "contract ENS"
                  }
                },
                value: null,
                visibility: "public"
              },
              {
                constant: false,
                id: 2745,
                name: "defaultResolver",
                nodeType: "VariableDeclaration",
                scope: 2954,
                src: "337:35:9",
                stateVariable: true,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_contract$_NameResolver_$2738",
                  typeString: "contract NameResolver"
                },
                typeName: {
                  contractScope: null,
                  id: 2744,
                  name: "NameResolver",
                  nodeType: "UserDefinedTypeName",
                  referencedDeclaration: 2738,
                  src: "337:12:9",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_NameResolver_$2738",
                    typeString: "contract NameResolver"
                  }
                },
                value: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2785,
                  nodeType: "Block",
                  src: "605:332:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2754,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          argumentTypes: null,
                          id: 2752,
                          name: "ens",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2743,
                          src: "615:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          argumentTypes: null,
                          id: 2753,
                          name: "ensAddr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2747,
                          src: "621:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS"
                          }
                        },
                        src: "615:13:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS"
                        }
                      },
                      id: 2755,
                      nodeType: "ExpressionStatement",
                      src: "615:13:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2758,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          argumentTypes: null,
                          id: 2756,
                          name: "defaultResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2745,
                          src: "638:15:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          argumentTypes: null,
                          id: 2757,
                          name: "resolverAddr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2749,
                          src: "656:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver"
                          }
                        },
                        src: "638:30:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver"
                        }
                      },
                      id: 2759,
                      nodeType: "ExpressionStatement",
                      src: "638:30:9"
                    },
                    {
                      assignments: [
                        2761
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2761,
                          name: "oldRegistrar",
                          nodeType: "VariableDeclaration",
                          scope: 2785,
                          src: "745:29:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                            typeString: "contract ReverseRegistrar"
                          },
                          typeName: {
                            contractScope: null,
                            id: 2760,
                            name: "ReverseRegistrar",
                            nodeType: "UserDefinedTypeName",
                            referencedDeclaration: 2954,
                            src: "745:16:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                              typeString: "contract ReverseRegistrar"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2768,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2765,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "804:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2763,
                                name: "ens",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2743,
                                src: "794:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ENS_$436",
                                  typeString: "contract ENS"
                                }
                              },
                              id: 2764,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "owner",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 405,
                              src: "794:9:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                typeString: "function (bytes32) view external returns (address)"
                              }
                            },
                            id: 2766,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "794:28:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          ],
                          id: 2762,
                          name: "ReverseRegistrar",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2954,
                          src: "777:16:9",
                          typeDescriptions: {
                            typeIdentifier: "t_type$_t_contract$_ReverseRegistrar_$2954_$",
                            typeString: "type(contract ReverseRegistrar)"
                          }
                        },
                        id: 2767,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "typeConversion",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "777:46:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                          typeString: "contract ReverseRegistrar"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "745:78:9"
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        },
                        id: 2775,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2770,
                              name: "oldRegistrar",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2761,
                              src: "845:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar"
                              }
                            }
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar"
                              }
                            ],
                            id: 2769,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            lValueRequested: false,
                            nodeType: "ElementaryTypeNameExpression",
                            src: "837:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_type$_t_address_$",
                              typeString: "type(address)"
                            },
                            typeName: "address"
                          },
                          id: 2771,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "837:21:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "!=",
                        rightExpression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              hexValue: "307830",
                              id: 2773,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "number",
                              lValueRequested: false,
                              nodeType: "Literal",
                              src: "870:3:9",
                              subdenomination: null,
                              typeDescriptions: {
                                typeIdentifier: "t_rational_0_by_1",
                                typeString: "int_const 0"
                              },
                              value: "0x0"
                            }
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_rational_0_by_1",
                                typeString: "int_const 0"
                              }
                            ],
                            id: 2772,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            lValueRequested: false,
                            nodeType: "ElementaryTypeNameExpression",
                            src: "862:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_type$_t_address_$",
                              typeString: "type(address)"
                            },
                            typeName: "address"
                          },
                          id: 2774,
                          isConstant: false,
                          isLValue: false,
                          isPure: true,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "862:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address_payable",
                            typeString: "address payable"
                          }
                        },
                        src: "837:37:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2784,
                      nodeType: "IfStatement",
                      src: "833:98:9",
                      trueBody: {
                        id: 2783,
                        nodeType: "Block",
                        src: "876:55:9",
                        statements: [
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  expression: {
                                    argumentTypes: null,
                                    id: 2779,
                                    name: "msg",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 3032,
                                    src: "909:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_magic_message",
                                      typeString: "msg"
                                    }
                                  },
                                  id: 2780,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "sender",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: null,
                                  src: "909:10:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address_payable",
                                    typeString: "address payable"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_address_payable",
                                    typeString: "address payable"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2776,
                                  name: "oldRegistrar",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2761,
                                  src: "890:12:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar"
                                  }
                                },
                                id: 2778,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "claim",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 2801,
                                src: "890:18:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$",
                                  typeString: "function (address) external returns (bytes32)"
                                }
                              },
                              id: 2781,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "890:30:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32"
                              }
                            },
                            id: 2782,
                            nodeType: "ExpressionStatement",
                            src: "890:30:9"
                          }
                        ]
                      }
                    }
                  ]
                },
                documentation: "@dev Constructor\n@param ensAddr The address of the ENS registry.\n@param resolverAddr The address of the default reverse resolver.",
                id: 2786,
                implemented: true,
                kind: "constructor",
                modifiers: [],
                name: "",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2750,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2747,
                      name: "ensAddr",
                      nodeType: "VariableDeclaration",
                      scope: 2786,
                      src: "558:11:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_ENS_$436",
                        typeString: "contract ENS"
                      },
                      typeName: {
                        contractScope: null,
                        id: 2746,
                        name: "ENS",
                        nodeType: "UserDefinedTypeName",
                        referencedDeclaration: 436,
                        src: "558:3:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2749,
                      name: "resolverAddr",
                      nodeType: "VariableDeclaration",
                      scope: 2786,
                      src: "571:25:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_contract$_NameResolver_$2738",
                        typeString: "contract NameResolver"
                      },
                      typeName: {
                        contractScope: null,
                        id: 2748,
                        name: "NameResolver",
                        nodeType: "UserDefinedTypeName",
                        referencedDeclaration: 2738,
                        src: "571:12:9",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "557:40:9"
                },
                returnParameters: {
                  id: 2751,
                  nodeType: "ParameterList",
                  parameters: [],
                  src: "605:0:9"
                },
                scope: 2954,
                src: "546:391:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2800,
                  nodeType: "Block",
                  src: "1259:62:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2794,
                            name: "owner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2788,
                            src: "1294:5:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2796,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "1309:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                },
                                value: "0x0"
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                }
                              ],
                              id: 2795,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "1301:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2797,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "1301:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            },
                            {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          ],
                          id: 2793,
                          name: "claimWithResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2894,
                          src: "1276:17:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address,address) returns (bytes32)"
                          }
                        },
                        id: 2798,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1276:38:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2792,
                      id: 2799,
                      nodeType: "Return",
                      src: "1269:45:9"
                    }
                  ]
                },
                documentation: "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@return The ENS node hash of the reverse record.",
                id: 2801,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "claim",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2789,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2788,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 2801,
                      src: "1219:13:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2787,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1219:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1218:15:9"
                },
                returnParameters: {
                  id: 2792,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2791,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2801,
                      src: "1250:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2790,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1250:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1249:9:9"
                },
                scope: 2954,
                src: "1204:117:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2893,
                  nodeType: "Block",
                  src: "1754:786:9",
                  statements: [
                    {
                      assignments: [
                        2811
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2811,
                          name: "label",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1764:13:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2810,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "1764:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2816,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            expression: {
                              argumentTypes: null,
                              id: 2813,
                              name: "msg",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 3032,
                              src: "1795:3:9",
                              typeDescriptions: {
                                typeIdentifier: "t_magic_message",
                                typeString: "msg"
                              }
                            },
                            id: 2814,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "sender",
                            nodeType: "MemberAccess",
                            referencedDeclaration: null,
                            src: "1795:10:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          ],
                          id: 2812,
                          name: "sha3HexAddress",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2953,
                          src: "1780:14:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address) pure returns (bytes32)"
                          }
                        },
                        id: 2815,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1780:26:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1764:42:9"
                    },
                    {
                      assignments: [
                        2818
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2818,
                          name: "node",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1816:12:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2817,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "1816:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2826,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2822,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "1858:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              },
                              {
                                argumentTypes: null,
                                id: 2823,
                                name: "label",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2811,
                                src: "1877:5:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                },
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2820,
                                name: "abi",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3019,
                                src: "1841:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_abi",
                                  typeString: "abi"
                                }
                              },
                              id: 2821,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              memberName: "encodePacked",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "1841:16:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                typeString: "function () pure returns (bytes memory)"
                              }
                            },
                            id: 2824,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "1841:42:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          ],
                          id: 2819,
                          name: "keccak256",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 3026,
                          src: "1831:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            typeString: "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        id: 2825,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1831:53:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1816:68:9"
                    },
                    {
                      assignments: [
                        2828
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2828,
                          name: "currentOwner",
                          nodeType: "VariableDeclaration",
                          scope: 2893,
                          src: "1894:20:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          typeName: {
                            id: 2827,
                            name: "address",
                            nodeType: "ElementaryTypeName",
                            src: "1894:7:9",
                            stateMutability: "nonpayable",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2833,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2831,
                            name: "node",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2818,
                            src: "1927:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          ],
                          expression: {
                            argumentTypes: null,
                            id: 2829,
                            name: "ens",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2743,
                            src: "1917:3:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS"
                            }
                          },
                          id: 2830,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "owner",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 405,
                          src: "1917:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                            typeString: "function (bytes32) view external returns (address)"
                          }
                        },
                        id: 2832,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "1917:15:9",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "1894:38:9"
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        },
                        id: 2845,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          id: 2838,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2834,
                            name: "resolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2805,
                            src: "1990:8:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2836,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "2010:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                },
                                value: "0x0"
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                }
                              ],
                              id: 2835,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2002:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2837,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2002:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable"
                            }
                          },
                          src: "1990:24:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "&&",
                        rightExpression: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          },
                          id: 2844,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2839,
                            name: "resolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2805,
                            src: "2018:8:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2842,
                                name: "node",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2818,
                                src: "2043:4:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2840,
                                name: "ens",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2743,
                                src: "2030:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ENS_$436",
                                  typeString: "contract ENS"
                                }
                              },
                              id: 2841,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "resolver",
                              nodeType: "MemberAccess",
                              referencedDeclaration: 412,
                              src: "2030:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                typeString: "function (bytes32) view external returns (address)"
                              }
                            },
                            id: 2843,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2030:18:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          src: "2018:30:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool"
                          }
                        },
                        src: "1990:58:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2877,
                      nodeType: "IfStatement",
                      src: "1986:372:9",
                      trueBody: {
                        id: 2876,
                        nodeType: "Block",
                        src: "2050:308:9",
                        statements: [
                          {
                            condition: {
                              argumentTypes: null,
                              commonType: {
                                typeIdentifier: "t_address",
                                typeString: "address"
                              },
                              id: 2850,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              leftExpression: {
                                argumentTypes: null,
                                id: 2846,
                                name: "currentOwner",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2828,
                                src: "2133:12:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_address",
                                  typeString: "address"
                                }
                              },
                              nodeType: "BinaryOperation",
                              operator: "!=",
                              rightExpression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2848,
                                    name: "this",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 3065,
                                    src: "2157:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar"
                                    }
                                  }
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar"
                                    }
                                  ],
                                  id: 2847,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  lValueRequested: false,
                                  nodeType: "ElementaryTypeNameExpression",
                                  src: "2149:7:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_type$_t_address_$",
                                    typeString: "type(address)"
                                  },
                                  typeName: "address"
                                },
                                id: 2849,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "typeConversion",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2149:13:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_address",
                                  typeString: "address"
                                }
                              },
                              src: "2133:29:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bool",
                                typeString: "bool"
                              }
                            },
                            falseBody: null,
                            id: 2868,
                            nodeType: "IfStatement",
                            src: "2129:174:9",
                            trueBody: {
                              id: 2867,
                              nodeType: "Block",
                              src: "2164:139:9",
                              statements: [
                                {
                                  expression: {
                                    argumentTypes: null,
                                    arguments: [
                                      {
                                        argumentTypes: null,
                                        id: 2854,
                                        name: "ADDR_REVERSE_NODE",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2741,
                                        src: "2202:17:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        }
                                      },
                                      {
                                        argumentTypes: null,
                                        id: 2855,
                                        name: "label",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2811,
                                        src: "2221:5:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        }
                                      },
                                      {
                                        argumentTypes: null,
                                        arguments: [
                                          {
                                            argumentTypes: null,
                                            id: 2857,
                                            name: "this",
                                            nodeType: "Identifier",
                                            overloadedDeclarations: [],
                                            referencedDeclaration: 3065,
                                            src: "2236:4:9",
                                            typeDescriptions: {
                                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                              typeString: "contract ReverseRegistrar"
                                            }
                                          }
                                        ],
                                        expression: {
                                          argumentTypes: [
                                            {
                                              typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                              typeString: "contract ReverseRegistrar"
                                            }
                                          ],
                                          id: 2856,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: true,
                                          lValueRequested: false,
                                          nodeType: "ElementaryTypeNameExpression",
                                          src: "2228:7:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_type$_t_address_$",
                                            typeString: "type(address)"
                                          },
                                          typeName: "address"
                                        },
                                        id: 2858,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        kind: "typeConversion",
                                        lValueRequested: false,
                                        names: [],
                                        nodeType: "FunctionCall",
                                        src: "2228:13:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address"
                                        }
                                      }
                                    ],
                                    expression: {
                                      argumentTypes: [
                                        {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        },
                                        {
                                          typeIdentifier: "t_bytes32",
                                          typeString: "bytes32"
                                        },
                                        {
                                          typeIdentifier: "t_address",
                                          typeString: "address"
                                        }
                                      ],
                                      expression: {
                                        argumentTypes: null,
                                        id: 2851,
                                        name: "ens",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2743,
                                        src: "2182:3:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_contract$_ENS_$436",
                                          typeString: "contract ENS"
                                        }
                                      },
                                      id: 2853,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      lValueRequested: false,
                                      memberName: "setSubnodeOwner",
                                      nodeType: "MemberAccess",
                                      referencedDeclaration: 370,
                                      src: "2182:19:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                        typeString: "function (bytes32,bytes32,address) external returns (bytes32)"
                                      }
                                    },
                                    id: 2859,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    kind: "functionCall",
                                    lValueRequested: false,
                                    names: [],
                                    nodeType: "FunctionCall",
                                    src: "2182:60:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32"
                                    }
                                  },
                                  id: 2860,
                                  nodeType: "ExpressionStatement",
                                  src: "2182:60:9"
                                },
                                {
                                  expression: {
                                    argumentTypes: null,
                                    id: 2865,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    lValueRequested: false,
                                    leftHandSide: {
                                      argumentTypes: null,
                                      id: 2861,
                                      name: "currentOwner",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 2828,
                                      src: "2260:12:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address"
                                      }
                                    },
                                    nodeType: "Assignment",
                                    operator: "=",
                                    rightHandSide: {
                                      argumentTypes: null,
                                      arguments: [
                                        {
                                          argumentTypes: null,
                                          id: 2863,
                                          name: "this",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 3065,
                                          src: "2283:4:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                            typeString: "contract ReverseRegistrar"
                                          }
                                        }
                                      ],
                                      expression: {
                                        argumentTypes: [
                                          {
                                            typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                            typeString: "contract ReverseRegistrar"
                                          }
                                        ],
                                        id: 2862,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: true,
                                        lValueRequested: false,
                                        nodeType: "ElementaryTypeNameExpression",
                                        src: "2275:7:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_type$_t_address_$",
                                          typeString: "type(address)"
                                        },
                                        typeName: "address"
                                      },
                                      id: 2864,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      kind: "typeConversion",
                                      lValueRequested: false,
                                      names: [],
                                      nodeType: "FunctionCall",
                                      src: "2275:13:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address"
                                      }
                                    },
                                    src: "2260:28:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  },
                                  id: 2866,
                                  nodeType: "ExpressionStatement",
                                  src: "2260:28:9"
                                }
                              ]
                            }
                          },
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2872,
                                  name: "node",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2818,
                                  src: "2332:4:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2873,
                                  name: "resolver",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2805,
                                  src: "2338:8:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2869,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2316:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS"
                                  }
                                },
                                id: 2871,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "setResolver",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 377,
                                src: "2316:15:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                                  typeString: "function (bytes32,address) external"
                                }
                              },
                              id: 2874,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2316:31:9",
                              typeDescriptions: {
                                typeIdentifier: "t_tuple$__$",
                                typeString: "tuple()"
                              }
                            },
                            id: 2875,
                            nodeType: "ExpressionStatement",
                            src: "2316:31:9"
                          }
                        ]
                      }
                    },
                    {
                      condition: {
                        argumentTypes: null,
                        commonType: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        },
                        id: 2880,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          argumentTypes: null,
                          id: 2878,
                          name: "currentOwner",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2828,
                          src: "2412:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        nodeType: "BinaryOperation",
                        operator: "!=",
                        rightExpression: {
                          argumentTypes: null,
                          id: 2879,
                          name: "owner",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2803,
                          src: "2428:5:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        src: "2412:21:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      falseBody: null,
                      id: 2890,
                      nodeType: "IfStatement",
                      src: "2408:104:9",
                      trueBody: {
                        id: 2889,
                        nodeType: "Block",
                        src: "2435:77:9",
                        statements: [
                          {
                            expression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2884,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "2469:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2885,
                                  name: "label",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2811,
                                  src: "2488:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  }
                                },
                                {
                                  argumentTypes: null,
                                  id: 2886,
                                  name: "owner",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2803,
                                  src: "2495:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                }
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32"
                                  },
                                  {
                                    typeIdentifier: "t_address",
                                    typeString: "address"
                                  }
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2881,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2449:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS"
                                  }
                                },
                                id: 2883,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "setSubnodeOwner",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 370,
                                src: "2449:19:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                  typeString: "function (bytes32,bytes32,address) external returns (bytes32)"
                                }
                              },
                              id: 2887,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2449:52:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32"
                              }
                            },
                            id: 2888,
                            nodeType: "ExpressionStatement",
                            src: "2449:52:9"
                          }
                        ]
                      }
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2891,
                        name: "node",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2818,
                        src: "2529:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2809,
                      id: 2892,
                      nodeType: "Return",
                      src: "2522:11:9"
                    }
                  ]
                },
                documentation: "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@param resolver The address of the resolver to set; 0 to leave unchanged.\n@return The ENS node hash of the reverse record.",
                id: 2894,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "claimWithResolver",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2806,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2803,
                      name: "owner",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1696:13:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2802,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1696:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    },
                    {
                      constant: false,
                      id: 2805,
                      name: "resolver",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1711:16:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2804,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "1711:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1695:33:9"
                },
                returnParameters: {
                  id: 2809,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2808,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2894,
                      src: "1745:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2807,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "1745:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "1744:9:9"
                },
                scope: 2954,
                src: "1669:871:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2921,
                  nodeType: "Block",
                  src: "2921:156:9",
                  statements: [
                    {
                      assignments: [
                        2902
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 2902,
                          name: "node",
                          nodeType: "VariableDeclaration",
                          scope: 2921,
                          src: "2931:12:9",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32"
                          },
                          typeName: {
                            id: 2901,
                            name: "bytes32",
                            nodeType: "ElementaryTypeName",
                            src: "2931:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          value: null,
                          visibility: "internal"
                        }
                      ],
                      id: 2911,
                      initialValue: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2905,
                                name: "this",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3065,
                                src: "2972:4:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar"
                                }
                              ],
                              id: 2904,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2964:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2906,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2964:13:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2908,
                                name: "defaultResolver",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2745,
                                src: "2987:15:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_contract$_NameResolver_$2738",
                                  typeString: "contract NameResolver"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_contract$_NameResolver_$2738",
                                  typeString: "contract NameResolver"
                                }
                              ],
                              id: 2907,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "2979:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)"
                              },
                              typeName: "address"
                            },
                            id: 2909,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "2979:24:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            },
                            {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          ],
                          id: 2903,
                          name: "claimWithResolver",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2894,
                          src: "2946:17:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                            typeString: "function (address,address) returns (bytes32)"
                          }
                        },
                        id: 2910,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "2946:58:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "2931:73:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            id: 2915,
                            name: "node",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2902,
                            src: "3038:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            }
                          },
                          {
                            argumentTypes: null,
                            id: 2916,
                            name: "name",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2896,
                            src: "3044:4:9",
                            typeDescriptions: {
                              typeIdentifier: "t_string_memory_ptr",
                              typeString: "string memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32"
                            },
                            {
                              typeIdentifier: "t_string_memory_ptr",
                              typeString: "string memory"
                            }
                          ],
                          expression: {
                            argumentTypes: null,
                            id: 2912,
                            name: "defaultResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2745,
                            src: "3014:15:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver"
                            }
                          },
                          id: 2914,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "setName",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 2737,
                          src: "3014:23:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$",
                            typeString: "function (bytes32,string memory) external"
                          }
                        },
                        id: 2917,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3014:35:9",
                        typeDescriptions: {
                          typeIdentifier: "t_tuple$__$",
                          typeString: "tuple()"
                        }
                      },
                      id: 2918,
                      nodeType: "ExpressionStatement",
                      src: "3014:35:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2919,
                        name: "node",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2902,
                        src: "3066:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2900,
                      id: 2920,
                      nodeType: "Return",
                      src: "3059:11:9"
                    }
                  ]
                },
                documentation: "@dev Sets the `name()` record for the reverse ENS record associated with\nthe calling account. First updates the resolver to the default reverse\nresolver if necessary.\n@param name The name to set for this address.\n@return The ENS node hash of the reverse record.",
                id: 2922,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "setName",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2897,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2896,
                      name: "name",
                      nodeType: "VariableDeclaration",
                      scope: 2922,
                      src: "2876:18:9",
                      stateVariable: false,
                      storageLocation: "memory",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string"
                      },
                      typeName: {
                        id: 2895,
                        name: "string",
                        nodeType: "ElementaryTypeName",
                        src: "2876:6:9",
                        typeDescriptions: {
                          typeIdentifier: "t_string_storage_ptr",
                          typeString: "string"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2875:20:9"
                },
                returnParameters: {
                  id: 2900,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2899,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2922,
                      src: "2912:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2898,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "2912:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "2911:9:9"
                },
                scope: 2954,
                src: "2859:218:9",
                stateMutability: "nonpayable",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2939,
                  nodeType: "Block",
                  src: "3303:92:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        arguments: [
                          {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2932,
                                name: "ADDR_REVERSE_NODE",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2741,
                                src: "3347:17:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              },
                              {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2934,
                                    name: "addr",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2924,
                                    src: "3381:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  }
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address"
                                    }
                                  ],
                                  id: 2933,
                                  name: "sha3HexAddress",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2953,
                                  src: "3366:14:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                                    typeString: "function (address) pure returns (bytes32)"
                                  }
                                },
                                id: 2935,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "3366:20:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              }
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                },
                                {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32"
                                }
                              ],
                              expression: {
                                argumentTypes: null,
                                id: 2930,
                                name: "abi",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3019,
                                src: "3330:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_abi",
                                  typeString: "abi"
                                }
                              },
                              id: 2931,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              memberName: "encodePacked",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "3330:16:9",
                              typeDescriptions: {
                                typeIdentifier: "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                typeString: "function () pure returns (bytes memory)"
                              }
                            },
                            id: 2936,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "functionCall",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "3330:57:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bytes_memory_ptr",
                              typeString: "bytes memory"
                            }
                          ],
                          id: 2929,
                          name: "keccak256",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 3026,
                          src: "3320:9:9",
                          typeDescriptions: {
                            typeIdentifier: "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            typeString: "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        id: 2937,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "3320:68:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      functionReturnParameters: 2928,
                      id: 2938,
                      nodeType: "Return",
                      src: "3313:75:9"
                    }
                  ]
                },
                documentation: "@dev Returns the node hash for a given account's reverse records.\n@param addr The address to hash\n@return The ENS node hash.",
                id: 2940,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "node",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2925,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2924,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 2940,
                      src: "3259:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2923,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "3259:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3258:14:9"
                },
                returnParameters: {
                  id: 2928,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2927,
                      name: "",
                      nodeType: "VariableDeclaration",
                      scope: 2940,
                      src: "3294:7:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2926,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "3294:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3293:9:9"
                },
                scope: 2954,
                src: "3245:150:9",
                stateMutability: "pure",
                superFunction: null,
                visibility: "public"
              },
              {
                body: {
                  id: 2952,
                  nodeType: "Block",
                  src: "3769:553:9",
                  statements: [
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2947,
                        name: "addr",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2942,
                        src: "3779:4:9",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      id: 2948,
                      nodeType: "ExpressionStatement",
                      src: "3779:4:9"
                    },
                    {
                      expression: {
                        argumentTypes: null,
                        id: 2949,
                        name: "ret",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 2945,
                        src: "3793:3:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      id: 2950,
                      nodeType: "ExpressionStatement",
                      src: "3793:3:9"
                    },
                    {
                      externalReferences: [
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4104:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4067:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4116:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4244:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4232:4:9",
                            valueSize: 1
                          }
                        },
                        {
                          ret: {
                            declaration: 2945,
                            isOffset: false,
                            isSlot: false,
                            src: "4283:3:9",
                            valueSize: 1
                          }
                        },
                        {
                          addr: {
                            declaration: 2942,
                            isOffset: false,
                            isSlot: false,
                            src: "4195:4:9",
                            valueSize: 1
                          }
                        }
                      ],
                      id: 2951,
                      nodeType: "InlineAssembly",
                      operations: "{\n    let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n    for {\n        let i := 40\n    }\n    gt(i, 0)\n    {\n    }\n    {\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n    }\n    ret := keccak256(0, 40)\n}",
                      src: "3848:474:9"
                    }
                  ]
                },
                documentation: "@dev An optimised function to compute the sha3 of the lower-case\n     hexadecimal representation of an Ethereum address.\n@param addr The address to hash\n@return The SHA3 hash of the lower-case hexadecimal encoding of the\n        input address.",
                id: 2953,
                implemented: true,
                kind: "function",
                modifiers: [],
                name: "sha3HexAddress",
                nodeType: "FunctionDefinition",
                parameters: {
                  id: 2943,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2942,
                      name: "addr",
                      nodeType: "VariableDeclaration",
                      scope: 2953,
                      src: "3720:12:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      typeName: {
                        id: 2941,
                        name: "address",
                        nodeType: "ElementaryTypeName",
                        src: "3720:7:9",
                        stateMutability: "nonpayable",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3719:14:9"
                },
                returnParameters: {
                  id: 2946,
                  nodeType: "ParameterList",
                  parameters: [
                    {
                      constant: false,
                      id: 2945,
                      name: "ret",
                      nodeType: "VariableDeclaration",
                      scope: 2953,
                      src: "3756:11:9",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_bytes32",
                        typeString: "bytes32"
                      },
                      typeName: {
                        id: 2944,
                        name: "bytes32",
                        nodeType: "ElementaryTypeName",
                        src: "3756:7:9",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32"
                        }
                      },
                      value: null,
                      visibility: "internal"
                    }
                  ],
                  src: "3755:13:9"
                },
                scope: 2954,
                src: "3696:626:9",
                stateMutability: "pure",
                superFunction: null,
                visibility: "private"
              }
            ],
            scope: 2955,
            src: "136:4188:9"
          }
        ],
        src: "0:4325:9"
      },
      compiler: {
        name: "solc",
        version: "0.5.0+commit.1d4f565a.Emscripten.clang"
      },
      networks: {},
      schemaVersion: "3.0.0",
      updatedAt: "2020-02-10T20:00:51.357Z",
      devdoc: {
        methods: {
          "claim(address)": {
            details: "Transfers ownership of the reverse ENS record associated with the     calling account.",
            params: {
              owner: "The address to set as the owner of the reverse record in ENS."
            },
            return: "The ENS node hash of the reverse record."
          },
          "claimWithResolver(address,address)": {
            details: "Transfers ownership of the reverse ENS record associated with the     calling account.",
            params: {
              owner: "The address to set as the owner of the reverse record in ENS.",
              resolver: "The address of the resolver to set; 0 to leave unchanged."
            },
            return: "The ENS node hash of the reverse record."
          },
          constructor: {
            details: "Constructor",
            params: {
              ensAddr: "The address of the ENS registry.",
              resolverAddr: "The address of the default reverse resolver."
            }
          },
          "node(address)": {
            details: "Returns the node hash for a given account's reverse records.",
            params: {
              addr: "The address to hash"
            },
            return: "The ENS node hash."
          },
          "setName(string)": {
            details: "Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.",
            params: {
              name: "The name to set for this address."
            },
            return: "The ENS node hash of the reverse record."
          }
        }
      },
      userdoc: {
        methods: {}
      }
    };
  }
});

// node_modules/eth-ens-namehash/node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/eth-ens-namehash/node_modules/js-sha3/src/sha3.js"(exports, module2) {
    init_cjs_shims();
    (function() {
      "use strict";
      var root = typeof window === "object" ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createOutputMethod(bits2, padding, type);
        }
        return method;
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createShakeOutputMethod(bits2, padding, type);
        }
        return method;
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j2 = 0; j2 < bits.length; ++j2) {
          var methodName = algorithm.name + "_" + bits[j2];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j2], algorithm.padding);
        }
      }
      function Keccak(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        var notString = typeof message !== "string";
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index = 0, s2 = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s2[i2] ^= blocks[i2];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.finalize = function() {
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s2[i2] ^= blocks[i2];
        }
        f2(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var hex = "", block;
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            block = s2[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j3 % blockCount === 0) {
            f2(s2);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i2];
          if (extraBytes > 0) {
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          }
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            array[j3] = s2[i2];
          }
          if (j3 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          array[i2] = s2[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var array = [], offset, block;
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            offset = j3 << 2;
            block = s2[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j3 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j3 << 2;
          block = s2[i2];
          if (extraBytes > 0) {
            array[offset] = block & 255;
          }
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      var f2 = function(s2) {
        var h2, l2, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h2 = c8 ^ (c2 << 1 | c3 >>> 31);
          l2 = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h2;
          s2[1] ^= l2;
          s2[10] ^= h2;
          s2[11] ^= l2;
          s2[20] ^= h2;
          s2[21] ^= l2;
          s2[30] ^= h2;
          s2[31] ^= l2;
          s2[40] ^= h2;
          s2[41] ^= l2;
          h2 = c0 ^ (c4 << 1 | c5 >>> 31);
          l2 = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h2;
          s2[3] ^= l2;
          s2[12] ^= h2;
          s2[13] ^= l2;
          s2[22] ^= h2;
          s2[23] ^= l2;
          s2[32] ^= h2;
          s2[33] ^= l2;
          s2[42] ^= h2;
          s2[43] ^= l2;
          h2 = c2 ^ (c6 << 1 | c7 >>> 31);
          l2 = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h2;
          s2[5] ^= l2;
          s2[14] ^= h2;
          s2[15] ^= l2;
          s2[24] ^= h2;
          s2[25] ^= l2;
          s2[34] ^= h2;
          s2[35] ^= l2;
          s2[44] ^= h2;
          s2[45] ^= l2;
          h2 = c4 ^ (c8 << 1 | c9 >>> 31);
          l2 = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h2;
          s2[7] ^= l2;
          s2[16] ^= h2;
          s2[17] ^= l2;
          s2[26] ^= h2;
          s2[27] ^= l2;
          s2[36] ^= h2;
          s2[37] ^= l2;
          s2[46] ^= h2;
          s2[47] ^= l2;
          h2 = c6 ^ (c0 << 1 | c1 >>> 31);
          l2 = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h2;
          s2[9] ^= l2;
          s2[18] ^= h2;
          s2[19] ^= l2;
          s2[28] ^= h2;
          s2[29] ^= l2;
          s2[38] ^= h2;
          s2[39] ^= l2;
          s2[48] ^= h2;
          s2[49] ^= l2;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module2.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
  }
});

// node_modules/idna-uts46-hx/idna-map.js
var require_idna_map = __commonJS({
  "node_modules/idna-uts46-hx/idna-map.js"(exports, module2) {
    init_cjs_shims();
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return factory();
        });
      } else if (typeof exports === "object") {
        module2.exports = factory();
      } else {
        root.uts46_map = factory();
      }
    })(exports, function() {
      var blocks = [
        new Uint32Array([2157250, 2157314, 2157378, 2157442, 2157506, 2157570, 2157634, 0, 2157698, 2157762, 2157826, 2157890, 2157954, 0, 2158018, 0]),
        new Uint32Array([2179041, 6291456, 2179073, 6291456, 2179105, 6291456, 2179137, 6291456, 2179169, 6291456, 2179201, 6291456, 2179233, 6291456, 2179265, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064]),
        new Uint32Array([0, 2113729, 2197345, 2197377, 2113825, 2197409, 2197441, 2113921, 2197473, 2114017, 2197505, 2197537, 2197569, 2197601, 2197633, 2197665]),
        new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672]),
        new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064]),
        new Uint32Array([2196001, 2196033, 2196065, 2196097, 2196129, 2196161, 2196193, 2196225, 2196257, 2196289, 2196321, 2196353, 2196385, 2196417, 2196449, 2196481]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0]),
        new Uint32Array([2097281, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]),
        new Uint32Array([2177025, 6291456, 2177057, 6291456, 2177089, 6291456, 2177121, 6291456, 2177153, 6291456, 2177185, 6291456, 2177217, 6291456, 2177249, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456]),
        new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]),
        new Uint32Array([2134435, 2134531, 2134627, 2134723, 2134723, 2134819, 2134819, 2134915, 2134915, 2135011, 2105987, 2135107, 2135203, 2135299, 2131587, 2135395]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 2168673, 2169249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354]),
        new Uint32Array([2125219, 2125315, 2152834, 2152898, 2125411, 2152962, 2153026, 2125506, 2125507, 2125603, 2153090, 2153154, 2153218, 2153282, 2153346, 2105348]),
        new Uint32Array([2203393, 6291456, 2203425, 6291456, 2203457, 6291456, 2203489, 6291456, 6291456, 6291456, 6291456, 2203521, 6291456, 2181281, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 23068672, 6291456, 2145538, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456]),
        new Uint32Array([2139426, 2160834, 2160898, 2160962, 2134242, 2161026, 2161090, 2161154, 2161218, 2161282, 2161346, 2161410, 2138658, 2161474, 2161538, 2134722]),
        new Uint32Array([2119939, 2124930, 2125026, 2106658, 2125218, 2128962, 2129058, 2129154, 2129250, 2129346, 2129442, 2108866, 2108770, 2150466, 2150530, 2150594]),
        new Uint32Array([2201601, 6291456, 2201633, 6291456, 2201665, 6291456, 2201697, 6291456, 2201729, 6291456, 2201761, 6291456, 2201793, 6291456, 2201825, 6291456]),
        new Uint32Array([2193537, 2193569, 2193601, 2193633, 2193665, 2193697, 2193729, 2193761, 2193793, 2193825, 2193857, 2193889, 2193921, 2193953, 2193985, 2194017]),
        new Uint32Array([6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2190561, 6291456, 2190593, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2190625, 6291456, 2190657, 6291456, 23068672]),
        new Uint32Array([2215905, 2215937, 2215969, 2216001, 2216033, 2216065, 2216097, 2216129, 2216161, 2216193, 2216225, 2216257, 2105441, 2216289, 2216321, 2216353]),
        new Uint32Array([23068672, 18884130, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2191233, 2191265, 2191297, 2191329, 2191361, 2191393, 2191425, 2117377, 2191457, 2191489, 2191521, 2191553, 2191585, 2191617, 2191649, 2117953]),
        new Uint32Array([2132227, 2132323, 2132419, 2132419, 2132515, 2132515, 2132611, 2132707, 2132707, 2132803, 2132899, 2132899, 2132995, 2132995, 2133091, 2133187]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0]),
        new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10609889, 10610785, 10609921, 10610817, 2222241]),
        new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]),
        new Uint32Array([2219969, 2157121, 2157441, 2157505, 2157889, 2157953, 2220001, 2158465, 2158529, 10575617, 2156994, 2157058, 2129923, 2130019, 2157122, 2157186]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
        new Uint32Array([2185249, 6291456, 2185281, 6291456, 2185313, 6291456, 2185345, 6291456, 2185377, 6291456, 2185409, 6291456, 2185441, 6291456, 2185473, 6291456]),
        new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0]),
        new Uint32Array([2183361, 6291456, 2183393, 6291456, 2183425, 6291456, 2183457, 6291456, 2183489, 6291456, 2183521, 6291456, 2183553, 6291456, 2183585, 6291456]),
        new Uint32Array([2192161, 2192193, 2192225, 2192257, 2192289, 2192321, 2192353, 2192385, 2192417, 2192449, 2192481, 2192513, 2192545, 2192577, 2192609, 2192641]),
        new Uint32Array([2212001, 2212033, 2212065, 2212097, 2212129, 2212161, 2212193, 2212225, 2212257, 2212289, 2212321, 2212353, 2212385, 2212417, 2212449, 2207265]),
        new Uint32Array([2249825, 2249857, 2249889, 2249921, 2249954, 2250018, 2250082, 2250145, 2250177, 2250209, 2250241, 2250274, 2250337, 2250370, 2250433, 2250465]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147905, 2147969, 2148033, 2148097, 2148161, 2148225, 2148289, 2148353]),
        new Uint32Array([10485857, 6291456, 2197217, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672]),
        new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([2180353, 2180385, 2144033, 2180417, 2180449, 2180481, 2180513, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10610209, 10610465, 10610241, 10610753, 10609857]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]),
        new Uint32Array([2223842, 2223906, 2223970, 2224034, 2224098, 2224162, 2224226, 2224290, 2224354, 2224418, 2224482, 2224546, 2224610, 2224674, 2224738, 2224802]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 18923650, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 18923714, 23068672, 23068672]),
        new Uint32Array([2126179, 2125538, 2126275, 2126371, 2126467, 2125634, 2126563, 2105603, 2105604, 2125346, 2126659, 2126755, 2126851, 2098179, 2098181, 2098182]),
        new Uint32Array([2227426, 2227490, 2227554, 2227618, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2192353, 2240642, 2240642, 2240705, 2240737, 2240737, 2240769, 2240802, 2240866, 2240929, 2240961, 2240993, 2241025, 2241057, 2241089, 2241121]),
        new Uint32Array([6291456, 2170881, 2170913, 2170945, 6291456, 2170977, 6291456, 2171009, 2171041, 6291456, 6291456, 6291456, 2171073, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2132226, 2132514, 2163586, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10532162, 10532226, 10532290, 10532354, 10532418, 10532482, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]),
        new Uint32Array([2098209, 2108353, 2108193, 2108481, 2170241, 2111713, 2105473, 2105569, 2105601, 2112289, 2112481, 2098305, 2108321, 0, 0, 0]),
        new Uint32Array([2209121, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313, 2209345, 2209377, 2209409, 2209441, 2209473, 2207265, 2209505, 2209537, 2209569]),
        new Uint32Array([2189025, 6291456, 2189057, 6291456, 2189089, 6291456, 2189121, 6291456, 2189153, 6291456, 2189185, 6291456, 2189217, 6291456, 2189249, 6291456]),
        new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2165764, 2140004]),
        new Uint32Array([2215105, 6291456, 2215137, 6291456, 6291456, 2215169, 2215201, 6291456, 6291456, 6291456, 2215233, 2215265, 2215297, 2215329, 2215361, 2215393]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([10505091, 10505187, 10505283, 10505379, 10505475, 10505571, 10505667, 10505763, 10505859, 10505955, 10506051, 10506147, 10506243, 10506339, 10506435, 10506531]),
        new Uint32Array([2229730, 2229794, 2229858, 2229922, 2229986, 2230050, 2230114, 2230178, 2230242, 2230306, 2230370, 2230434, 2230498, 2230562, 2230626, 2230690]),
        new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 0, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 10502115, 10502178, 10502211, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
        new Uint32Array([2190305, 6291456, 2190337, 6291456, 2190369, 6291456, 2190401, 6291456, 2190433, 6291456, 2190465, 6291456, 2190497, 6291456, 2190529, 6291456]),
        new Uint32Array([2173793, 2173985, 2174017, 6291456, 2173761, 2173697, 6291456, 2174689, 6291456, 2174017, 2174721, 6291456, 6291456, 2174753, 2174785, 2174817]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609, 2100033]),
        new Uint32Array([2132898, 2163842, 2163906, 2133282, 2132034, 2131938, 2137410, 2132802, 2132706, 2164866, 2133282, 2160578, 2165186, 2165186, 6291456, 6291456]),
        new Uint32Array([10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059, 10501155, 10501251, 10501347, 10501443]),
        new Uint32Array([2163458, 2130978, 2131074, 2131266, 2131362, 2163522, 2160130, 2132066, 2131010, 2131106, 2106018, 2131618, 2131298, 2132034, 2131938, 2137410]),
        new Uint32Array([2212961, 2116993, 2212993, 2213025, 2213057, 2213089, 2213121, 2213153, 2213185, 2213217, 2213249, 2209633, 2213281, 2213313, 2213345, 2213377]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([2113729, 2113825, 2113921, 2114017, 2114113, 2114209, 2114305, 2114401, 2114497, 2114593, 2114689, 2114785, 2114881, 2114977, 2115073, 2115169]),
        new Uint32Array([2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2238337, 2217537, 2238369, 2238401, 2238433, 2238465, 2215649, 2238497, 2238529, 2238561]),
        new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]),
        new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0]),
        new Uint32Array([6291456, 0, 6291456, 2145026, 0, 6291456, 2145090, 0, 6291456, 6291456, 0, 0, 23068672, 0, 23068672, 23068672]),
        new Uint32Array([2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129, 2100289]),
        new Uint32Array([6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0]),
        new Uint32Array([2187681, 2187713, 2187745, 2187777, 2187809, 2187841, 2187873, 2187905, 2187937, 2187969, 2188001, 2188033, 2188065, 2188097, 2188129, 2188161]),
        new Uint32Array([0, 10554498, 10554562, 10554626, 10554690, 10554754, 10554818, 10554882, 10554946, 10555010, 10555074, 6291456, 6291456, 0, 0, 0]),
        new Uint32Array([2235170, 2235234, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2181153, 6291456, 2188897, 6291456, 6291456, 2188929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2111905, 2100865, 2188961, 2188993]),
        new Uint32Array([2100833, 2100897, 0, 0, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 2112289]),
        new Uint32Array([6291456, 2172833, 6291456, 2172865, 2172897, 2172929, 2172961, 6291456, 2172993, 6291456, 2173025, 6291456, 2173057, 6291456, 2173089, 6291456]),
        new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 2190721]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456]),
        new Uint32Array([2184993, 6291456, 2185025, 6291456, 2185057, 6291456, 2185089, 6291456, 2185121, 6291456, 2185153, 6291456, 2185185, 6291456, 2185217, 6291456]),
        new Uint32Array([2115265, 2115361, 2115457, 2115553, 2115649, 2115745, 2115841, 2115937, 2116033, 2116129, 2116225, 2116321, 2150658, 2150722, 2200225, 6291456]),
        new Uint32Array([2168321, 6291456, 2168353, 6291456, 2168385, 6291456, 2168417, 6291456, 2168449, 6291456, 2168481, 6291456, 2168513, 6291456, 2168545, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 2186625, 0, 0, 6291456, 6291456, 2186657, 2186689, 2186721, 2173505, 0, 10496067, 10496163, 10496259]),
        new Uint32Array([2178785, 6291456, 2178817, 6291456, 2178849, 6291456, 2178881, 6291456, 2178913, 6291456, 2178945, 6291456, 2178977, 6291456, 2179009, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
        new Uint32Array([2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 2197857, 2197889, 2197921, 2197953, 2197985, 2198017, 0, 0, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2167297, 2111137, 6291456]),
        new Uint32Array([2171393, 6291456, 2171425, 6291456, 2171457, 6291456, 2171489, 6291456, 2171521, 6291456, 2171553, 6291456, 2171585, 6291456, 2171617, 6291456]),
        new Uint32Array([2206753, 2206785, 2195457, 2206817, 2206849, 2206881, 2206913, 2197153, 2197153, 2206945, 2117857, 2206977, 2207009, 2207041, 2207073, 2207105]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144834, 2144898, 0, 2144962]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672]),
        new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 0, 2105505, 2098241]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 2202049, 6291456, 2202081, 6291456, 2202113, 6291456, 2202145, 6291456, 2202177, 6291456, 2202209, 6291456, 2202241, 6291456]),
        new Uint32Array([10501155, 10501251, 10501347, 10501443, 10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2141731, 2105505, 2098177, 2155586, 2166530, 0]),
        new Uint32Array([2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441]),
        new Uint32Array([2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([10502307, 10502403, 10502499, 10502595, 10502691, 10502787, 10502883, 10502979, 10503075, 10503171, 10503267, 10503363, 10503459, 10503555, 10503651, 10503747]),
        new Uint32Array([2179937, 2179969, 2180001, 2180033, 2156545, 2180065, 2156577, 2180097, 2180129, 2180161, 2180193, 2180225, 2180257, 2180289, 2156737, 2180321]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]),
        new Uint32Array([2227682, 2227746, 2227810, 2227874, 2227938, 2228002, 2228066, 2228130, 2228194, 2228258, 2228322, 2228386, 2228450, 2228514, 2228578, 2228642]),
        new Uint32Array([2105601, 2169121, 2108193, 2170049, 2181025, 2181057, 2112481, 2108321, 2108289, 2181089, 2170497, 2100865, 2181121, 2173601, 2173633, 2173665]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180641, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([2178273, 6291456, 2178305, 6291456, 2178337, 6291456, 2178369, 6291456, 2178401, 6291456, 2178433, 6291456, 2178465, 6291456, 2178497, 6291456]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]),
        new Uint32Array([2237377, 2237409, 2236225, 2237441, 2237473, 2217441, 2215521, 2215553, 2217473, 2237505, 2237537, 2209697, 2237569, 2215585, 2237601, 2237633]),
        new Uint32Array([2221985, 2165601, 2165601, 2165665, 2165665, 2222017, 2222017, 2165729, 2165729, 2158913, 2158913, 2158913, 2158913, 2097281, 2097281, 2105921]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2149634, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2176897, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2176929, 6291456, 2176961, 6291456, 2176993, 6291456]),
        new Uint32Array([2172641, 6291456, 2172673, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2172705, 2172737, 6291456, 2172769, 2172801, 6291456]),
        new Uint32Array([2099173, 2104196, 2121667, 2099395, 2121763, 2152258, 2152322, 2098946, 2152386, 2121859, 2121955, 2099333, 2122051, 2104324, 2099493, 2122147]),
        new Uint32Array([6291456, 6291456, 6291456, 2145794, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145858, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0]),
        new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 0, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2239074, 2239138, 2239201, 2239233, 2239265, 2239297, 2239329, 2239361, 0, 2239393, 2239425, 2239425, 2239458, 2239521, 2239553, 2209569]),
        new Uint32Array([14680064, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 23068672]),
        new Uint32Array([2108321, 2108289, 2113153, 2098209, 2180897, 2180929, 2180961, 2111137, 2098241, 2108353, 2170241, 2170273, 2180993, 2105825, 6291456, 2105473]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 0, 0, 0]),
        new Uint32Array([2105921, 2105921, 2105921, 2222049, 2222049, 2130977, 2130977, 2130977, 2130977, 2160065, 2160065, 2160065, 2160065, 2097729, 2097729, 2097729]),
        new Uint32Array([2218145, 2214785, 2207937, 2218177, 2218209, 2192993, 2210113, 2212769, 2218241, 2218273, 2216129, 2218305, 2216161, 2218337, 2218369, 2218401]),
        new Uint32Array([0, 0, 0, 2156546, 2156610, 2156674, 2156738, 2156802, 0, 0, 0, 0, 0, 2156866, 23068672, 2156930]),
        new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([2213409, 2213441, 2213473, 2213505, 2213537, 2213569, 2213601, 2213633, 2213665, 2195681, 2213697, 2213729, 2213761, 2213793, 2213825, 2213857]),
        new Uint32Array([2100033, 2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2201857, 6291456, 2201889, 6291456, 2201921, 6291456, 2201953, 6291456, 2201985, 6291456, 2202017, 6291456, 2176193, 2176257, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2188193, 2188225, 2188257, 2188289, 2188321, 2188353, 2188385, 2188417, 2188449, 2188481, 2188513, 2188545, 2188577, 2188609, 2188641, 0]),
        new Uint32Array([10554529, 2221089, 0, 10502113, 10562017, 10537921, 10538049, 2221121, 2221153, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2213889, 2213921, 2213953, 2213985, 2214017, 2214049, 2214081, 2194177, 2214113, 2214145, 2214177, 2214209, 2214241, 2214273, 2214305, 2214337]),
        new Uint32Array([2166978, 2167042, 2099169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180545, 6291456, 6291456, 6291456]),
        new Uint32Array([10518915, 10519011, 10519107, 10519203, 2162242, 2162306, 2159554, 2162370, 2159362, 2159618, 2105922, 2162434, 2159746, 2162498, 2159810, 2159874]),
        new Uint32Array([2161730, 2161794, 2135586, 2161858, 2161922, 2137186, 2131810, 2160290, 2135170, 2161986, 2137954, 2162050, 2162114, 2162178, 10518723, 10518819]),
        new Uint32Array([10506627, 10506723, 10506819, 10506915, 10507011, 10507107, 10507203, 10507299, 10507395, 10507491, 10507587, 10507683, 10507779, 10507875, 10507971, 10508067]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
        new Uint32Array([2175873, 2175905, 2175937, 2175969, 2176001, 2176033, 2176065, 2176097, 2176129, 2176161, 2176193, 2176225, 2176257, 2176289, 2176321, 2176353]),
        new Uint32Array([2140006, 2140198, 2140390, 2140582, 2140774, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]),
        new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241]),
        new Uint32Array([0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145154, 2145218, 2145282, 6291456, 0, 2145346, 0]),
        new Uint32Array([0, 0, 0, 0, 10531458, 10495395, 2148545, 2143201, 2173473, 2148865, 2173505, 0, 2173537, 0, 2173569, 2149121]),
        new Uint32Array([10537282, 10495683, 2148738, 2148802, 2148866, 0, 6291456, 2148930, 2186593, 2173473, 2148737, 2148865, 2148802, 10495779, 10495875, 10495971]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2215425, 2215457, 2215489, 2215521, 2215553, 2215585, 2215617, 2215649, 2215681, 2215713, 2215745, 2215777, 2192033, 2215809, 2215841, 2215873]),
        new Uint32Array([2242049, 2242081, 2242113, 2242145, 2242177, 2242209, 2242241, 2242273, 2215937, 2242305, 2242338, 2242401, 2242433, 2242465, 2242497, 2216001]),
        new Uint32Array([10554529, 2221089, 0, 0, 10562017, 10502113, 10538049, 10537921, 2221185, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 10610273]),
        new Uint32Array([2141923, 2142019, 2142115, 2142211, 2142307, 2142403, 2142499, 2142595, 2142691, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([0, 2221185, 2221217, 10609857, 10609857, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 2221345, 2221377, 2221409, 2221441, 2187105]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18923970, 23068672, 23068672, 23068672, 0, 6291456, 6291456]),
        new Uint32Array([2183105, 6291456, 2183137, 6291456, 2183169, 6291456, 2183201, 6291456, 2183233, 6291456, 2183265, 6291456, 2183297, 6291456, 2183329, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2134434, 2134818, 2097666, 2097186, 2097474, 2097698, 2105986, 2131586, 2132450, 2131874, 2131778, 2135970, 2135778, 2161602, 2136162, 2161666]),
        new Uint32Array([2236865, 2236897, 2236930, 2236993, 2237025, 2235681, 2237058, 2237121, 2237153, 2237185, 2237217, 2217281, 2237250, 2191233, 2237313, 2237345]),
        new Uint32Array([2190049, 6291456, 2190081, 6291456, 2190113, 6291456, 2190145, 6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456, 2190273, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2101922, 2102050, 2102178, 2102306, 10498755, 10498851, 10498947, 10499043, 10499139, 10499235, 10499331, 10499427, 10499523, 10489604, 10489732, 10489860]),
        new Uint32Array([2166914, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
        new Uint32Array([2181601, 2170561, 2181633, 2181665, 2170753, 2181697, 2172897, 2170881, 2181729, 2170913, 2172929, 2113441, 2181761, 2181793, 2171009, 2173761]),
        new Uint32Array([0, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]),
        new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
        new Uint32Array([2248001, 2248033, 2248066, 2248130, 2248193, 2248226, 2248289, 2248322, 2248385, 2248417, 2216673, 2248450, 2248514, 2248577, 2248610, 2248673]),
        new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
        new Uint32Array([2169729, 6291456, 2169761, 6291456, 2169793, 6291456, 2169825, 6291456, 2169857, 2169889, 6291456, 2169921, 6291456, 2143329, 6291456, 2098305]),
        new Uint32Array([2162178, 2163202, 2163266, 2135170, 2136226, 2161986, 2137954, 2159426, 2159490, 2163330, 2159554, 2163394, 2159682, 2139522, 2136450, 2159746]),
        new Uint32Array([2173953, 2173985, 0, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2174209, 2174241, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 4271169, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2174273]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 2190785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2189793, 6291456, 2189825, 6291456, 2189857, 6291456, 2189889, 6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456, 2190017, 6291456]),
        new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 0, 2098209, 2111137]),
        new Uint32Array([2172129, 6291456, 2172161, 6291456, 2172193, 6291456, 2172225, 6291456, 2172257, 6291456, 2172289, 6291456, 2172321, 6291456, 2172353, 6291456]),
        new Uint32Array([2214753, 6291456, 2214785, 6291456, 6291456, 2214817, 2214849, 2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073, 2194401, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([10610305, 10610337, 10575617, 2221761, 10610401, 10610433, 10502177, 0, 10610465, 10610497, 10610529, 10610561, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 0, 0, 0, 0, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2187105, 2187137, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2199393, 2199425, 2199457, 2199489, 2199521, 2199553, 2199585, 2199617, 2199649, 2199681, 2199713, 2199745, 2199777, 2199809, 2199841, 0]),
        new Uint32Array([2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441, 2217473, 2215617, 2217505, 2217537, 2217569, 2214753, 2217601, 2217633, 2217665]),
        new Uint32Array([2170273, 2170305, 6291456, 2170337, 2170369, 6291456, 2170401, 2170433, 2170465, 6291456, 6291456, 6291456, 2170497, 2170529, 6291456, 2170561]),
        new Uint32Array([2188673, 6291456, 2188705, 2188737, 2188769, 6291456, 6291456, 2188801, 6291456, 2188833, 6291456, 2188865, 6291456, 2180929, 2181505, 2180897]),
        new Uint32Array([10489988, 10490116, 10490244, 10490372, 10490500, 10490628, 10490756, 10490884, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147393, 2147457, 2147521, 2147585, 2147649, 2147713, 2147777, 2147841]),
        new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
        new Uint32Array([2241153, 2241185, 2241217, 2215809, 2241250, 2241313, 2241345, 2241377, 2217921, 2241377, 2241409, 2215873, 2241441, 2241473, 2241505, 2241537]),
        new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2220417, 2220417, 2220449, 2220449, 2220481, 2220481, 2220513, 2220513, 2220545, 2220545, 2220577, 2220577, 2220609, 2220609, 2220641, 2220641]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2144002, 0, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([2167105, 2167137, 2167169, 2167201, 2167233, 2167265, 2167297, 2167329, 2167361, 2167393, 2167425, 2167457, 2167489, 2167521, 2167553, 2167585]),
        new Uint32Array([10575521, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]),
        new Uint32Array([2234146, 2234210, 2234274, 2234338, 2234402, 2234466, 2234530, 2234594, 2234658, 2234722, 2234786, 2234850, 2234914, 2234978, 2235042, 2235106]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 2180577, 0, 0, 0, 0, 0, 2180609, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456]),
        new Uint32Array([2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2242529, 2242561, 2242593, 2242625, 2242657, 2242689, 2242721, 2242753, 2207937, 2218177, 2242785, 2242817, 2242849, 2242882, 2242945, 2242977]),
        new Uint32Array([2118049, 2105345, 2118241, 2105441, 2118433, 2118529, 2118625, 2118721, 2118817, 2200257, 2200289, 2191809, 2200321, 2200353, 2200385, 2200417]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
        new Uint32Array([2185505, 6291456, 2185537, 6291456, 2185569, 6291456, 2185601, 6291456, 2185633, 6291456, 2185665, 6291456, 2185697, 6291456, 2185729, 6291456]),
        new Uint32Array([2231970, 2232034, 2232098, 2232162, 2232226, 2232290, 2232354, 2232418, 2232482, 2232546, 2232610, 2232674, 2232738, 2232802, 2232866, 2232930]),
        new Uint32Array([2218625, 2246402, 2246466, 2246530, 2246594, 2246657, 2246689, 2246689, 2218657, 2219681, 2246721, 2246753, 2246785, 2246818, 2246881, 2208481]),
        new Uint32Array([2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2219137, 2216961, 2219169, 2219201, 2219233, 2219265, 2219297, 2217025, 2215041, 2219329, 2217057, 2219361, 2217089, 2219393, 2197153, 2219426]),
        new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713]),
        new Uint32Array([2243522, 2243585, 2243617, 2243649, 2243681, 2210113, 2243713, 2243746, 2243810, 2243874, 2243937, 2243970, 2244033, 2244065, 2244097, 2244129]),
        new Uint32Array([2178017, 6291456, 2178049, 6291456, 2178081, 6291456, 2178113, 6291456, 2178145, 6291456, 2178177, 6291456, 2178209, 6291456, 2178241, 6291456]),
        new Uint32Array([10553858, 2165314, 10518722, 6291456, 10518818, 0, 10518914, 2130690, 10519010, 2130786, 10519106, 2130882, 10519202, 2165378, 10554050, 2165506]),
        new Uint32Array([0, 0, 2135491, 2135587, 2135683, 2135779, 2135875, 2135971, 2135971, 2136067, 2136163, 2136259, 2136355, 2136355, 2136451, 2136547]),
        new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2220033, 2220033, 2220065, 2220065, 2220065, 2220065, 2220097, 2220097, 2220097, 2220097, 2220129, 2220129, 2220129, 2220129, 2220161, 2220161]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2100897, 2100898, 2100899, 2150018, 2100865, 2100866, 2100867, 2100868, 2150082, 2108481, 2109858, 2109859, 2105569, 2105505, 2098241, 2105601]),
        new Uint32Array([2097217, 2097505, 2097505, 2097505, 2097505, 2165570, 2165570, 2165634, 2165634, 2165698, 2165698, 2097858, 2097858, 0, 0, 2097152]),
        new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([10503843, 10503939, 10504035, 10504131, 10504227, 10504323, 10504419, 10504515, 10504611, 10504707, 10504803, 10504899, 10504995, 10491140, 10491268, 0]),
        new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 2235297, 2220769, 2235329, 2235361]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2222401, 2222433, 2222465, 10531394, 2222497, 2222529, 2222561, 0, 2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0]),
        new Uint32Array([2184481, 6291456, 2184513, 6291456, 2184545, 6291456, 2184577, 6291456, 2184609, 6291456, 2184641, 6291456, 2184673, 6291456, 2184705, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2105570, 2156034, 2126947, 2156098, 2153666, 2127043, 2127139, 2156162, 0, 2127235, 2156226, 2156290, 2156354, 2156418, 2127331, 2127427]),
        new Uint32Array([2215905, 2207041, 2153185, 2241569, 2241601, 2241633, 2241665, 2241697, 2241730, 2241793, 2241825, 2241857, 2241889, 2241921, 2241954, 2242017]),
        new Uint32Array([2203777, 6291456, 2203809, 6291456, 2203841, 6291456, 2203873, 6291456, 2203905, 6291456, 2173121, 2180993, 2181249, 2203937, 2181313, 0]),
        new Uint32Array([2168577, 6291456, 2168609, 6291456, 2168641, 6291456, 2168673, 6291456, 2168705, 6291456, 2168737, 6291456, 2168769, 6291456, 2168801, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([2210113, 2195521, 2210145, 2210177, 2210209, 2210241, 2210273, 2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497, 2210529, 2210561]),
        new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
        new Uint32Array([2228706, 2228770, 2228834, 2228898, 2228962, 2229026, 2229090, 2229154, 2229218, 2229282, 2229346, 2229410, 2229474, 2229538, 2229602, 2229666]),
        new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0]),
        new Uint32Array([2133089, 2133281, 2133281, 2133281, 2133281, 2160577, 2160577, 2160577, 2160577, 2097441, 2097441, 2097441, 2097441, 2133857, 2133857, 2133857]),
        new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089]),
        new Uint32Array([2178529, 6291456, 2178561, 6291456, 2178593, 6291456, 2178625, 6291456, 2178657, 6291456, 2178689, 6291456, 2178721, 6291456, 2178753, 6291456]),
        new Uint32Array([2221025, 2221025, 2221057, 2221057, 2159329, 2159329, 2159329, 2159329, 2097217, 2097217, 2158914, 2158914, 2158978, 2158978, 2159042, 2159042]),
        new Uint32Array([2208161, 2208193, 2208225, 2208257, 2194433, 2208289, 2208321, 2208353, 2208385, 2208417, 2208449, 2208481, 2208513, 2208545, 2208577, 2208609]),
        new Uint32Array([2169217, 6291456, 2169249, 6291456, 2169281, 6291456, 2169313, 6291456, 2169345, 6291456, 2169377, 6291456, 2169409, 6291456, 2169441, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2133187, 2133283, 2133283, 2133379, 2133475, 2133571, 2133667, 2133667, 2133763, 2133859, 2133955, 2134051, 2134147, 2134147, 2134243, 2134339]),
        new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 0]),
        new Uint32Array([2193089, 2193121, 2193153, 2193185, 2117665, 2117569, 2193217, 2193249, 2193281, 2193313, 2193345, 2193377, 2193409, 2193441, 2193473, 2193505]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2184225, 6291456, 2184257, 6291456, 2184289, 6291456, 2184321, 6291456, 2184353, 6291456, 2184385, 6291456, 2184417, 6291456, 2184449, 6291456]),
        new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2100833, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2200801, 2200833, 2200865, 0]),
        new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]),
        new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2181153, 2105505, 2181185, 2167617, 2180993]),
        new Uint32Array([2160002, 2160066, 2160130, 2160194, 2160258, 2132066, 2131010, 2131106, 2106018, 2131618, 2160322, 2131298, 2132034, 2131938, 2137410, 2132226]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
        new Uint32Array([2183617, 6291456, 2183649, 6291456, 2183681, 6291456, 2183713, 6291456, 2183745, 6291456, 2183777, 6291456, 2183809, 6291456, 2183841, 6291456]),
        new Uint32Array([0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 0, 0]),
        new Uint32Array([2250977, 2251009, 2251041, 2251073, 2195009, 2251106, 2251169, 2251201, 2251233, 2251265, 2251297, 2251330, 2251394, 2251457, 2251489, 2251521]),
        new Uint32Array([2205729, 2205761, 2205793, 2205825, 2205857, 2205889, 2205921, 2205953, 2205985, 2206017, 2206049, 2206081, 2206113, 2206145, 2206177, 2206209]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2143170, 2168993, 6291456, 2169025, 6291456, 2169057, 6291456, 2169089, 6291456, 2143234, 2169121, 6291456, 2169153, 6291456, 2169185, 6291456]),
        new Uint32Array([23068672, 23068672, 2190689, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2248706, 2248769, 2248801, 2248833, 2248865, 2248897, 2248929, 2248962, 2249026, 2249090, 2249154, 2240705, 2249217, 2249249, 2249281, 2249313]),
        new Uint32Array([10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10495394, 6291456, 2098209, 6291456, 6291456, 2097152, 6291456, 10531394]),
        new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
        new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]),
        new Uint32Array([6291456, 2186977, 6291456, 6291456, 6291456, 6291456, 6291456, 10537858, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2209601, 2209633, 2209665, 2209697, 2209729, 2209761, 2209793, 2209825, 2209857, 2209889, 2209921, 2209953, 2209985, 2210017, 2210049, 2210081]),
        new Uint32Array([10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]),
        new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2194561, 2194593, 2194625, 2119777, 2119873, 2194657, 2194689, 2194721, 2194753, 2194785, 2194817, 2194849, 2194881, 2194913, 2194945, 2194977]),
        new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569]),
        new Uint32Array([2222818, 2222882, 2222946, 2223010, 2223074, 2223138, 2223202, 2223266, 2223330, 2223394, 2223458, 2223522, 2223586, 2223650, 2223714, 2223778]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]),
        new Uint32Array([0, 2179553, 2179585, 2179617, 2179649, 2144001, 2179681, 2179713, 2179745, 2179777, 2179809, 2156705, 2179841, 2156833, 2179873, 2179905]),
        new Uint32Array([6291456, 23068672, 6291456, 2145602, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 6291456, 0, 0]),
        new Uint32Array([2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705, 2196737, 2196769, 2196801, 2196833, 2196865, 2196897, 2196929, 2196961, 2196993]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2177281, 6291456, 2177313, 6291456, 2177345, 6291456, 2177377, 6291456, 2177409, 6291456, 2177441, 6291456, 2177473, 6291456, 2177505, 6291456]),
        new Uint32Array([2187137, 2221473, 2221505, 2221537, 2221569, 6291456, 6291456, 10610209, 10610241, 10537986, 10537986, 10537986, 10537986, 10609857, 10609857, 10609857]),
        new Uint32Array([2243009, 2243041, 2216033, 2243074, 2243137, 2243169, 2243201, 2219617, 2243233, 2243265, 2243297, 2243329, 2243362, 2243425, 2243457, 2243489]),
        new Uint32Array([10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304, 4194304, 0, 0]),
        new Uint32Array([2143042, 6291456, 2143106, 2143106, 2168833, 6291456, 2168865, 6291456, 6291456, 2168897, 6291456, 2168929, 6291456, 2168961, 6291456, 2143170]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2204193, 2204225, 2204257, 2204289, 2204321, 2204353, 2204385, 2204417, 2204449, 2204481, 2204513, 2204545, 2204577, 2204609, 2204641, 2204673]),
        new Uint32Array([2202753, 6291456, 2202785, 6291456, 2202817, 6291456, 2202849, 6291456, 2202881, 6291456, 2202913, 6291456, 2202945, 6291456, 2202977, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321]),
        new Uint32Array([2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842]),
        new Uint32Array([2253313, 2253346, 2253409, 2253441, 2253473, 2253505, 2253537, 2253569, 2253601, 2253634, 2219393, 2253697, 2253729, 2253761, 2253793, 2253825]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([2162562, 2162626, 2131362, 2162690, 2159938, 2160002, 2162754, 2162818, 2160130, 2162882, 2160194, 2160258, 2160834, 2160898, 2161026, 2161090]),
        new Uint32Array([2175361, 2175393, 2175425, 2175457, 2175489, 2175521, 2175553, 2175585, 2175617, 2175649, 2175681, 2175713, 2175745, 2175777, 2175809, 2175841]),
        new Uint32Array([2253858, 2253921, 2253954, 2254018, 2254082, 2196737, 2254145, 2196865, 2254177, 2254209, 2254241, 2254273, 2197025, 2254306, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202113, 2204129, 2188705, 2204161]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953]),
        new Uint32Array([2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209]),
        new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 0, 2108417, 0, 2111713, 2100897, 2111905]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2175425, 2175489, 2175809, 2175905, 2175937, 2175937, 2176193, 2176417, 2180865, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 2143298, 2143298, 2143298, 2143362, 2143362, 2143362, 2143426, 2143426, 2143426, 2171105, 6291456, 2171137]),
        new Uint32Array([2120162, 2120258, 2151618, 2151682, 2151746, 2151810, 2151874, 2151938, 2152002, 2120035, 2120131, 2120227, 2152066, 2120323, 2152130, 2120419]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2195361, 2142433, 2236065, 2236097, 2236129, 2236161, 2118241, 2117473, 2236193, 2236225, 2236257, 2236289, 0, 0, 0, 0]),
        new Uint32Array([2189281, 6291456, 2189313, 6291456, 2189345, 6291456, 2189377, 6291456, 2189409, 6291456, 2189441, 6291456, 2189473, 6291456, 2189505, 6291456]),
        new Uint32Array([6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456, 2145986, 6291456, 6291456, 6291456, 6291456, 2146050, 6291456, 6291456, 6291456]),
        new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10502113, 10562017, 10610401, 10502177, 10610433, 10538049]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 2186401, 0, 2186433, 0, 2186465, 0, 2186497]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 23068672, 23068672]),
        new Uint32Array([0, 0, 2198241, 2198273, 2198305, 2198337, 2198369, 2198401, 0, 0, 2198433, 2198465, 2198497, 0, 0, 0]),
        new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
        new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 2133281, 2097505, 2105889, 0, 2097697, 2135777, 2097633, 2097441]),
        new Uint32Array([2197889, 2197921, 2197953, 2197985, 2198017, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209, 2198241, 2198273, 2198305, 2198337, 2198369]),
        new Uint32Array([2132514, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2133282, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770, 2134146]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2184737, 6291456, 2184769, 6291456, 2184801, 6291456, 2184833, 6291456, 2184865, 6291456, 2184897, 6291456, 2184929, 6291456, 2184961, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
        new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 2186753, 6291456, 6291456, 6291456, 6291456, 2186785, 2186817, 2186849, 2173569, 2186881, 10496355, 10495395, 10575521]),
        new Uint32Array([0, 0, 2097729, 0, 0, 0, 0, 2106017, 0, 2097505, 0, 2097185, 0, 2135777, 2097633, 2097441]),
        new Uint32Array([2189537, 6291456, 2189569, 6291456, 2189601, 6291456, 2189633, 6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456, 2189761, 6291456]),
        new Uint32Array([2202497, 6291456, 2202529, 6291456, 2202561, 6291456, 2202593, 6291456, 2202625, 6291456, 2202657, 6291456, 2202689, 6291456, 2202721, 6291456]),
        new Uint32Array([2245217, 2218369, 2245249, 2245282, 2245345, 2245377, 2245410, 2245474, 2245537, 2245569, 2245601, 2245633, 2245665, 2245665, 2245697, 2245729]),
        new Uint32Array([6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]),
        new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2097281, 2105921, 2097729, 2106081, 2097377, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]),
        new Uint32Array([2176641, 6291456, 2176673, 6291456, 2176705, 6291456, 2176737, 6291456, 2176769, 6291456, 2176801, 6291456, 2176833, 6291456, 2176865, 6291456]),
        new Uint32Array([2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2174369, 2174369, 0, 0, 2100833, 2100737]),
        new Uint32Array([2116513, 2190817, 2190849, 2190881, 2190913, 2190945, 2116609, 2190977, 2191009, 2191041, 2191073, 2117185, 2191105, 2191137, 2191169, 2191201]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]),
        new Uint32Array([2167617, 2167649, 2167681, 2167713, 2167745, 2167777, 2167809, 6291456, 2167841, 2167873, 2167905, 2167937, 2167969, 2168001, 2168033, 4240130]),
        new Uint32Array([2165122, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122, 2134562, 2132162, 2132834, 2136866]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2186209, 2186241, 2186273, 2186305, 2186337, 2186369, 0, 0]),
        new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 14680064, 14680064, 14680064, 14680064, 14680064]),
        new Uint32Array([0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
        new Uint32Array([0, 10537921, 10610689, 10610273, 10610497, 10610529, 10610305, 10610721, 10489601, 10489697, 10610337, 10575617, 10554529, 2221761, 2197217, 10496577]),
        new Uint32Array([2105473, 2105569, 2105601, 2112289, 0, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]),
        new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]),
        new Uint32Array([2125346, 2153410, 2153474, 2127394, 2153538, 2153602, 2153666, 2153730, 2105507, 2105476, 2153794, 2153858, 2153922, 2153986, 2154050, 2105794]),
        new Uint32Array([2200449, 2119681, 2200481, 2153313, 2199873, 2199905, 2199937, 2200513, 2200545, 2200577, 2200609, 2119105, 2119201, 2119297, 2119393, 2119489]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2175777, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2222273, 2197217, 2221473, 2221505, 2221089, 2222305, 2200865, 2099681, 2104481, 2222337, 2099905, 2120737, 2222369, 2103713, 2100225, 2098785]),
        new Uint32Array([2201377, 6291456, 2201409, 6291456, 2201441, 6291456, 2201473, 6291456, 2201505, 6291456, 2201537, 6291456, 2201569, 6291456, 6291456, 23068672]),
        new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]),
        new Uint32Array([2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993, 6291456, 2201025, 6291456, 2180865, 6291456, 2201057, 6291456, 2201089, 6291456]),
        new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]),
        new Uint32Array([2161154, 2161410, 2138658, 2161474, 2161538, 2097666, 2097186, 2097474, 2162946, 2132450, 2163010, 2163074, 2136162, 2163138, 2161666, 2161730]),
        new Uint32Array([2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 2145410, 2145474, 0, 6291456]),
        new Uint32Array([2244161, 2216065, 2212769, 2244193, 2244225, 2244257, 2244290, 2244353, 2244385, 2244417, 2244449, 2218273, 2244481, 2244514, 2244577, 2244609]),
        new Uint32Array([2125730, 2125699, 2125795, 2125891, 2125987, 2154114, 2154178, 2154242, 2154306, 2154370, 2154434, 2154498, 2126082, 2126178, 2126274, 2126083]),
        new Uint32Array([2237665, 2237697, 2237697, 2237697, 2237730, 2237793, 2237825, 2237857, 2237890, 2237953, 2237985, 2238017, 2238049, 2238081, 2238113, 2238145]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150146, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]),
        new Uint32Array([2214369, 2238593, 2238625, 2238657, 2238689, 2238721, 2238753, 2238785, 2238817, 2238850, 2238913, 2238945, 2238977, 2235457, 2239009, 2239041]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([2252066, 2252130, 2252193, 2252225, 2252257, 2252290, 2252353, 2252385, 2252417, 2252449, 2252481, 2252513, 2252545, 2252578, 2252641, 2252673]),
        new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 2197857]),
        new Uint32Array([2224866, 2224930, 2224994, 2225058, 2225122, 2225186, 2225250, 2225314, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2219490, 2219554, 2219617, 2219649, 2219681, 2219714, 2219778, 2219842, 2219905, 2219937, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
        new Uint32Array([2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]),
        new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665]),
        new Uint32Array([2220161, 2220161, 2220193, 2220193, 2220193, 2220193, 2220225, 2220225, 2220225, 2220225, 2220257, 2220257, 2220257, 2220257, 2220289, 2220289]),
        new Uint32Array([2192673, 2192705, 2192737, 2192769, 2192801, 2192833, 2192865, 2118049, 2192897, 2117473, 2117761, 2192929, 2192961, 2192993, 2193025, 2193057]),
        new Uint32Array([2179297, 6291456, 2179329, 6291456, 2179361, 6291456, 2179393, 6291456, 2179425, 6291456, 2179457, 6291456, 2179489, 6291456, 2179521, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2235745, 2235777, 2193633, 2235809, 2235841, 2235873, 2235905, 2235937, 2235969, 2116513, 2116705, 2236001, 2200513, 2199905, 2200545, 2236033]),
        new Uint32Array([2113153, 2108481, 2113345, 2113441, 2232993, 2233025, 0, 0, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761]),
        new Uint32Array([2170593, 6291456, 2170625, 6291456, 2170657, 6291456, 2170689, 2170721, 6291456, 2170753, 6291456, 6291456, 2170785, 6291456, 2170817, 2170849]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2166786, 2166850, 0, 0, 0, 0]),
        new Uint32Array([23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 0]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2134562, 2132162, 2132834, 2136866, 2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058]),
        new Uint32Array([6291456, 6291456, 2098337, 2101441, 10531458, 2153473, 6291456, 6291456, 10531522, 2100737, 2108193, 6291456, 2106499, 2106595, 2106691, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2233122, 2233186, 2233250, 2233314, 2233378, 2233442, 2233506, 2233570, 2233634, 2233698, 2233762, 2233826, 2233890, 2233954, 2234018, 2234082]),
        new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2205217, 2205249, 2205281, 2205313, 2205345, 2205377, 2205409, 2205441, 2205473, 2205505, 2205537, 2205569, 2205601, 2205633, 2205665, 2205697]),
        new Uint32Array([6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]),
        new Uint32Array([2173601, 2173761, 2174081, 2173569, 2174241, 2174113, 2173953, 6291456, 2174305, 6291456, 2174337, 6291456, 2174369, 6291456, 2174401, 6291456]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([2152450, 2152514, 2099653, 2104452, 2099813, 2122243, 2099973, 2152578, 2122339, 2122435, 2122531, 2122627, 2122723, 2104580, 2122819, 2152642]),
        new Uint32Array([2236385, 2236417, 2236449, 2236482, 2236545, 2215425, 2236577, 2236609, 2236641, 2236673, 2215457, 2236705, 2236737, 2236770, 2215489, 2236833]),
        new Uint32Array([2163394, 2159746, 2163458, 2131362, 2163522, 2160130, 2163778, 2132226, 2163842, 2132898, 2163906, 2161410, 2138658, 2097666, 2136162, 2163650]),
        new Uint32Array([2218721, 2246913, 2246946, 2216385, 2247010, 2247074, 2215009, 2247137, 2247169, 2216481, 2247201, 2247233, 2247266, 2247330, 2247330, 0]),
        new Uint32Array([2129730, 2129762, 2129858, 2129731, 2129827, 2156482, 2156482, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0, 0, 0, 0, 6291456, 0, 0]),
        new Uint32Array([2203969, 2204001, 2181377, 2204033, 2204065, 6291456, 2204097, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2169473, 6291456, 2169505, 6291456, 2169537, 6291456, 2169569, 6291456, 2169601, 6291456, 2169633, 6291456, 2169665, 6291456, 2169697, 6291456]),
        new Uint32Array([2141542, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2220801, 2220801, 2220801, 2220801, 2220833, 2220833, 2220865, 2220865, 2220865, 2220865, 2220897, 2220897, 2220897, 2220897, 2139873, 2139873]),
        new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0]),
        new Uint32Array([2214849, 2218433, 2218465, 2218497, 2218529, 2218561, 2214881, 2218593, 2218625, 2218657, 2218689, 2218721, 2218753, 2216545, 2218785, 2218817]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]),
        new Uint32Array([2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058, 2165122, 2132802, 2132706, 2164866]),
        new Uint32Array([2207649, 2207681, 2207713, 2207745, 2207777, 2207809, 2207841, 2207873, 2207905, 2207937, 2207969, 2208001, 2208033, 2208065, 2208097, 2208129]),
        new Uint32Array([2123683, 2105092, 2152706, 2123779, 2105220, 2152770, 2100453, 2098755, 2123906, 2124002, 2124098, 2124194, 2124290, 2124386, 2124482, 2124578]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0, 0, 10485857]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([10508163, 10508259, 10508355, 10508451, 2200129, 2200161, 2192737, 2200193, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2203553, 6291456, 2203585, 6291456, 6291456, 6291456, 2203617, 6291456, 2203649, 6291456, 2203681, 6291456, 2203713, 6291456, 2203745, 6291456]),
        new Uint32Array([18884449, 18884065, 23068672, 18884417, 18884034, 18921185, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18874368]),
        new Uint32Array([2247393, 2247426, 2247489, 2247521, 2247553, 2247586, 2247649, 2247681, 2247713, 2247745, 2247777, 2247810, 2247873, 2247905, 2247937, 2247969]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]),
        new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 2160577, 2133857, 2235297, 0, 2235329, 0]),
        new Uint32Array([2182593, 6291456, 2182625, 6291456, 2182657, 6291456, 2182689, 6291456, 2182721, 6291456, 2182753, 6291456, 2182785, 6291456, 2182817, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102402, 2102403, 6291456, 2110050]),
        new Uint32Array([2149890, 2108323, 2149954, 6291456, 2113441, 6291456, 2149057, 6291456, 2113441, 6291456, 2105473, 2167265, 2111137, 2105505, 6291456, 2108353]),
        new Uint32Array([2219105, 2219137, 2195233, 2251554, 2251617, 2251649, 2251681, 2251713, 2251746, 2251810, 2251873, 2251905, 2251937, 2251970, 2252033, 2219169]),
        new Uint32Array([2203009, 6291456, 2203041, 6291456, 2203073, 6291456, 2203105, 6291456, 2203137, 6291456, 2203169, 6291456, 2203201, 6291456, 2203233, 6291456]),
        new Uint32Array([2128195, 2128291, 2128387, 2128483, 2128579, 2128675, 2128771, 2128867, 2128963, 2129059, 2129155, 2129251, 2129347, 2129443, 2129539, 2129635]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2140964, 2141156, 2140966, 2141158, 2141350]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2225378, 2225442, 2225506, 2225570, 2225634, 2225698, 2225762, 2225826, 2225890, 2225954, 2226018, 2226082, 2226146, 2226210, 2226274, 2226338]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417]),
        new Uint32Array([2108353, 2108417, 0, 2105601, 2108193, 2157121, 2157313, 2157377, 2157441, 2100897, 6291456, 2108419, 2173953, 2173633, 2173633, 2173953]),
        new Uint32Array([2111713, 2173121, 2111905, 2098177, 2173153, 2173185, 2173217, 2113153, 2113345, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2190753]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197249, 6291456, 2117377, 2197281, 2197313, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]),
        new Uint32Array([0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672]),
        new Uint32Array([2173281, 6291456, 2173313, 6291456, 2173345, 6291456, 2173377, 6291456, 0, 0, 10532546, 6291456, 6291456, 6291456, 10562017, 2173441]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]),
        new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2159426, 2159490, 2159554, 2159362, 2159618, 2159682, 2139522, 2136450, 2159746, 2159810, 2159874, 2130978, 2131074, 2131266, 2131362, 2159938]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2203233, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2203265, 6291456, 2203297, 6291456, 2203329, 2203361, 6291456]),
        new Uint32Array([6291456, 6291456, 2148418, 2148482, 2148546, 0, 6291456, 2148610, 2186529, 2186561, 2148417, 2148545, 2148482, 10495778, 2143969, 10495778]),
        new Uint32Array([2134146, 2139426, 2160962, 2134242, 2161218, 2161282, 2161346, 2161410, 2138658, 2134722, 2134434, 2134818, 2097666, 2097346, 2097698, 2105986]),
        new Uint32Array([2198881, 2198913, 2198945, 2198977, 2199009, 2199041, 2199073, 2199105, 2199137, 2199169, 2199201, 2199233, 2199265, 2199297, 2199329, 2199361]),
        new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
        new Uint32Array([10610561, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]),
        new Uint32Array([2183873, 6291456, 2183905, 6291456, 2183937, 6291456, 2183969, 6291456, 2184001, 6291456, 2184033, 6291456, 2184065, 6291456, 2184097, 6291456]),
        new Uint32Array([2244642, 2244706, 2244769, 2244801, 2218305, 2244833, 2244865, 2244897, 2244929, 2244961, 2244993, 2245026, 2245089, 2245122, 2245185, 0]),
        new Uint32Array([6291456, 6291456, 2116513, 2116609, 2116705, 2116801, 2199873, 2199905, 2199937, 2199969, 2190913, 2200001, 2200033, 2200065, 2200097, 2191009]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2180673, 2180705, 2180737, 2180769, 2180801, 2180833, 0, 0]),
        new Uint32Array([2098081, 2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150402]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2145666, 2145730, 6291456, 6291456]),
        new Uint32Array([2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665]),
        new Uint32Array([2187073, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241, 2108353, 2100897, 2111905, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102404, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2100612, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10485857]),
        new Uint32Array([2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]),
        new Uint32Array([2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889, 2217921, 2217953, 2215873, 2217985, 2215905, 2218017, 2218049, 2218081, 2218113]),
        new Uint32Array([2211233, 2218849, 2216673, 2218881, 2218913, 2218945, 2218977, 2219009, 2216833, 2219041, 2215137, 2219073, 2216865, 2209505, 2219105, 2216897]),
        new Uint32Array([2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2240289, 2240321, 2240353, 2240386, 2240449, 2240481, 2240513, 2240545, 2207905, 2240578]),
        new Uint32Array([6291456, 6291456, 2202273, 6291456, 2202305, 6291456, 2202337, 6291456, 2202369, 6291456, 2202401, 6291456, 2202433, 6291456, 2202465, 6291456]),
        new Uint32Array([0, 23068672, 23068672, 18923394, 23068672, 18923458, 18923522, 18884099, 18923586, 18884195, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2201121, 6291456, 2201153, 6291456, 2201185, 6291456, 2201217, 6291456, 2201249, 6291456, 2201281, 6291456, 2201313, 6291456, 2201345, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
        new Uint32Array([2211041, 2211073, 2211105, 2211137, 2211169, 2211201, 2211233, 2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457, 2211489, 2211521]),
        new Uint32Array([2181825, 6291456, 2181857, 6291456, 2181889, 6291456, 2181921, 6291456, 2181953, 6291456, 2181985, 6291456, 2182017, 6291456, 2182049, 6291456]),
        new Uint32Array([2162337, 2097633, 2097633, 2097633, 2097633, 2132705, 2132705, 2132705, 2132705, 2097153, 2097153, 2097153, 2097153, 2133089, 2133089, 2133089]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 2148545, 6291456, 2173473, 6291456, 2148865, 6291456, 2173505, 6291456, 2173537, 6291456, 2173569, 6291456, 2149121, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
        new Uint32Array([2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2207137, 2207169, 2207201, 2207233, 2207265, 2207297, 2207329, 2207361, 2207393, 2207425, 2207457, 2207489, 2207521, 2207553, 2207585, 2207617]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2198401, 2198433, 2198465, 2198497, 0, 2198529, 2198561, 2198593, 2198625, 2198657, 2198689, 2198721, 2198753, 2198785, 2198817, 2198849]),
        new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]),
        new Uint32Array([2216385, 2118721, 2216417, 2216449, 2216481, 2216513, 2216545, 2211233, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737, 2216737, 2216769]),
        new Uint32Array([2216801, 2216833, 2216865, 2216897, 2216929, 2216961, 2216993, 2215169, 2217025, 2217057, 2217089, 2217121, 2217154, 2217217, 0, 0]),
        new Uint32Array([2210593, 2191809, 2210625, 2210657, 2210689, 2210721, 2210753, 2210785, 2210817, 2210849, 2191297, 2210881, 2210913, 2210945, 2210977, 2211009]),
        new Uint32Array([0, 0, 2105825, 0, 0, 2111905, 2105473, 0, 0, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321]),
        new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 2097153, 2134241, 0, 2132705, 0, 0, 2131297, 0, 2133089, 0, 2133857, 0, 2220769, 0, 2235361]),
        new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 6291456, 6291456, 14680064]),
        new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2171873, 6291456, 2171905, 6291456, 2171937, 6291456, 2171969, 6291456, 2172001, 6291456, 2172033, 6291456, 2172065, 6291456, 2172097, 6291456]),
        new Uint32Array([2220929, 2220929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2133857, 2134145, 2134145, 2134145, 2134145, 2134241, 2134241, 2134241, 2134241, 2105889, 2105889, 2105889, 2105889, 2097185, 2097185, 2097185]),
        new Uint32Array([2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10499619, 10499715, 10499811, 10499907]),
        new Uint32Array([0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2144322, 2144386, 2144450, 2144514, 2144578, 2144642, 2144706, 2144770]),
        new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0, 0, 2111905, 2105473, 2105569]),
        new Uint32Array([2236321, 2236353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2152194, 2121283, 2103684, 2103812, 2097986, 2098533, 2097990, 2098693, 2098595, 2098853, 2099013, 2103940, 2121379, 2121475, 2121571, 2104068]),
        new Uint32Array([2206241, 2206273, 2206305, 2206337, 2206369, 2206401, 2206433, 2206465, 2206497, 2206529, 2206561, 2206593, 2206625, 2206657, 2206689, 2206721]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 10538818, 10538882, 6291456, 6291456, 2150338]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2214369, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561, 2214593, 2194977, 2214625, 2195073, 2214657, 2214689, 2214721, 6291456, 6291456]),
        new Uint32Array([2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2182081, 6291456, 2182113, 6291456, 2182145, 6291456, 2182177, 6291456, 2182209, 6291456, 2182241, 6291456, 2182273, 6291456, 2182305, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146881, 2146945, 2147009, 2147073, 2147137, 2147201, 2147265, 2147329]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2122915, 2123011, 2123107, 2104708, 2123203, 2123299, 2123395, 2100133, 2104836, 2100290, 2100293, 2104962, 2104964, 2098052, 2123491, 2123587]),
        new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]),
        new Uint32Array([6291456, 2171169, 6291456, 2171201, 6291456, 2171233, 6291456, 2171265, 6291456, 2171297, 6291456, 2171329, 6291456, 6291456, 2171361, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 2148994, 2149058, 2149122, 0, 6291456, 2149186, 2186945, 2173537, 2148993, 2149121, 2149058, 10531458, 10496066, 0]),
        new Uint32Array([2195009, 2195041, 2195073, 2195105, 2195137, 2195169, 2195201, 2195233, 2195265, 2195297, 2195329, 2195361, 2195393, 2195425, 2195457, 2195489]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 6291456, 6291456]),
        new Uint32Array([2182849, 6291456, 2182881, 6291456, 2182913, 6291456, 2182945, 6291456, 2182977, 6291456, 2183009, 6291456, 2183041, 6291456, 2183073, 6291456]),
        new Uint32Array([2211553, 2210081, 2211585, 2211617, 2211649, 2211681, 2211713, 2211745, 2211777, 2211809, 2209569, 2211841, 2211873, 2211905, 2211937, 2211969]),
        new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2166594, 2127298, 2166658, 2142978, 2141827, 2166722]),
        new Uint32Array([2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2185761, 2185793, 2185825, 2185857, 2185889, 2185921, 0, 0]),
        new Uint32Array([6291456, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456]),
        new Uint32Array([0, 0, 0, 2220961, 2220961, 2220961, 2220961, 2144193, 2144193, 2159201, 2159201, 2159265, 2159265, 2144194, 2220993, 2220993]),
        new Uint32Array([2192641, 2235393, 2235425, 2152257, 2116609, 2235457, 2235489, 2200065, 2235521, 2235553, 2235585, 2212449, 2235617, 2235649, 2235681, 2235713]),
        new Uint32Array([2194049, 2194081, 2194113, 2194145, 2194177, 2194209, 2194241, 2194273, 2194305, 2194337, 2194369, 2194401, 2194433, 2194465, 2194497, 2194529]),
        new Uint32Array([2196673, 2208641, 2208673, 2208705, 2208737, 2208769, 2208801, 2208833, 2208865, 2208897, 2208929, 2208961, 2208993, 2209025, 2209057, 2209089]),
        new Uint32Array([2191681, 2191713, 2191745, 2191777, 2153281, 2191809, 2191841, 2191873, 2191905, 2191937, 2191969, 2192001, 2192033, 2192065, 2192097, 2192129]),
        new Uint32Array([2230946, 2231010, 2231074, 2231138, 2231202, 2231266, 2231330, 2231394, 2231458, 2231522, 2231586, 2231650, 2231714, 2231778, 2231842, 2231906]),
        new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2185953, 2185985, 2186017, 2186049, 2186081, 2186113, 2186145, 2186177]),
        new Uint32Array([2139811, 2139907, 2097284, 2105860, 2105988, 2106116, 2106244, 2097444, 2097604, 2097155, 10485778, 10486344, 2106372, 6291456, 0, 0]),
        new Uint32Array([2110051, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2172385, 6291456, 2172417, 6291456, 2172449, 6291456, 2172481, 6291456, 2172513, 6291456, 2172545, 6291456, 2172577, 6291456, 2172609, 6291456]),
        new Uint32Array([0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2249345, 2249377, 2249409, 2249441, 2249473, 2249505, 2249537, 2249570, 2210209, 2249633, 2249665, 2249697, 2249729, 2249761, 2249793, 2216769]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2187169, 2187201, 2187233, 2187265, 2187297, 2187329, 2187361, 2187393, 2187425, 2187457, 2187489, 2187521, 2187553, 2187585, 2187617, 2187649]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]),
        new Uint32Array([2182337, 6291456, 2182369, 6291456, 2182401, 6291456, 2182433, 6291456, 2182465, 6291456, 2182497, 6291456, 2182529, 6291456, 2182561, 6291456]),
        new Uint32Array([2138179, 2138275, 2138371, 2138467, 2134243, 2134435, 2138563, 2138659, 2138755, 2138851, 2138947, 2139043, 2138947, 2138755, 2139139, 2139235]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2250498, 2250562, 2250625, 2250657, 2208321, 2250689, 2250721, 2250753, 2250785, 2250817, 2250849, 2218945, 2250881, 2250913, 2250945, 0]),
        new Uint32Array([2170369, 2105569, 2098305, 2108481, 2173249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]),
        new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 0, 2108193, 0, 0, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]),
        new Uint32Array([2100897, 2100897, 2105569, 2105569, 6291456, 2112289, 2149826, 6291456, 6291456, 2112481, 2112577, 2098177, 2098177, 2098177, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 2169953, 2169985, 6291456, 2170017, 6291456, 2170049, 2170081, 6291456, 2170113, 2170145, 2170177, 6291456, 6291456, 2170209, 2170241]),
        new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2220641, 2220641, 2220673, 2220673, 2220673, 2220673, 2220705, 2220705, 2220705, 2220705, 2220737, 2220737, 2220737, 2220737, 2220769, 2220769]),
        new Uint32Array([2127650, 2127746, 2127842, 2127938, 2128034, 2128130, 2128226, 2128322, 2128418, 2127523, 2127619, 2127715, 2127811, 2127907, 2128003, 2128099]),
        new Uint32Array([2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177]),
        new Uint32Array([0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([2204705, 2204737, 2204769, 2204801, 2204833, 2204865, 2204897, 2204929, 2204961, 2204993, 2205025, 2205057, 2205089, 2205121, 2205153, 2205185]),
        new Uint32Array([2176385, 6291456, 2176417, 6291456, 2176449, 6291456, 2176481, 6291456, 2176513, 6291456, 2176545, 6291456, 2176577, 6291456, 2176609, 6291456]),
        new Uint32Array([2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2117857, 2195713, 2195745, 2195777, 2195809, 2195841, 2195873, 2195905, 2195937, 2195969]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456]),
        new Uint32Array([2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113]),
        new Uint32Array([2131586, 2132450, 2135970, 2135778, 2161602, 2136162, 2163650, 2161794, 2135586, 2163714, 2137186, 2131810, 2160290, 2135170, 2097506, 2159554]),
        new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 0, 0, 0, 0]),
        new Uint32Array([2116513, 2116609, 2116705, 2116801, 2116897, 2116993, 2117089, 2117185, 2117281, 2117377, 2117473, 2117569, 2117665, 2117761, 2117857, 2117953]),
        new Uint32Array([2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100802, 2101154, 2101282, 2101410, 2101538, 2101666, 2101794]),
        new Uint32Array([2100289, 2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2098977, 2150241, 2150305]),
        new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 2109955, 6291456, 6291456, 0, 0, 0, 0]),
        new Uint32Array([18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0]),
        new Uint32Array([2130979, 2131075, 2131075, 2131171, 2131267, 2131363, 2131459, 2131555, 2131651, 2131651, 2131747, 2131843, 2131939, 2132035, 2132131, 2132227]),
        new Uint32Array([0, 2177793, 6291456, 2177825, 6291456, 2177857, 6291456, 2177889, 6291456, 2177921, 6291456, 2177953, 6291456, 2177985, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]),
        new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2113345, 0, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]),
        new Uint32Array([2136643, 2136739, 2136835, 2136931, 2137027, 2137123, 2137219, 2137315, 2137411, 2137507, 2137603, 2137699, 2137795, 2137891, 2137987, 2138083]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]),
        new Uint32Array([2174433, 6291456, 2174465, 6291456, 2174497, 6291456, 2174529, 6291456, 2174561, 6291456, 2174593, 6291456, 2174625, 6291456, 2174657, 6291456]),
        new Uint32Array([0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]),
        new Uint32Array([10496547, 10496643, 2105505, 2149698, 6291456, 10496739, 10496835, 2170273, 6291456, 2149762, 2105825, 2111713, 2111713, 2111713, 2111713, 2168673]),
        new Uint32Array([6291456, 2143490, 2143490, 2143490, 2171649, 6291456, 2171681, 2171713, 2171745, 6291456, 2171777, 6291456, 2171809, 6291456, 2171841, 6291456]),
        new Uint32Array([2159106, 2159106, 2159170, 2159170, 2159234, 2159234, 2159298, 2159298, 2159298, 2159362, 2159362, 2159362, 2106401, 2106401, 2106401, 2106401]),
        new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137]),
        new Uint32Array([2108417, 2181217, 2181249, 2181281, 2170433, 2170401, 2181313, 2181345, 2181377, 2181409, 2181441, 2181473, 2181505, 2181537, 2170529, 2181569]),
        new Uint32Array([2218433, 2245761, 2245793, 2245825, 2245857, 2245890, 2245953, 2245986, 2209665, 2246050, 2246113, 2246146, 2246210, 2246274, 2246337, 2246369]),
        new Uint32Array([2230754, 2230818, 2230882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2184129, 6291456, 2184161, 6291456, 2184193, 6291456, 6291456, 6291456, 6291456, 6291456, 2146818, 2183361, 6291456, 6291456, 2142978, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2135170, 2097506, 2130691, 2130787, 2130883, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122]),
        new Uint32Array([2108515, 2108611, 2100740, 2108707, 2108803, 2108899, 2108995, 2109091, 2109187, 2109283, 2109379, 2109475, 2109571, 2109667, 2109763, 2100738]),
        new Uint32Array([2102788, 2102916, 2103044, 2120515, 2103172, 2120611, 2120707, 2098373, 2103300, 2120803, 2120899, 2120995, 2103428, 2103556, 2121091, 2121187]),
        new Uint32Array([2158082, 2158146, 0, 2158210, 2158274, 0, 2158338, 2158402, 2158466, 2129922, 2158530, 2158594, 2158658, 2158722, 2158786, 2158850]),
        new Uint32Array([10499619, 10499715, 10499811, 10499907, 10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059]),
        new Uint32Array([2239585, 2239618, 2239681, 2239713, 0, 2191969, 2239745, 2239777, 2192033, 2239809, 2239841, 2239874, 2239937, 2239970, 2240033, 2240065]),
        new Uint32Array([2252705, 2252738, 2252801, 2252833, 2252865, 2252897, 2252930, 2252994, 2253057, 2253089, 2253121, 2253154, 2253217, 2253250, 2219361, 2219361]),
        new Uint32Array([2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10538050, 10538114, 10538178, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([2226402, 2226466, 2226530, 2226594, 2226658, 2226722, 2226786, 2226850, 2226914, 2226978, 2227042, 2227106, 2227170, 2227234, 2227298, 2227362]),
        new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 2144066, 2144130, 2144194, 2144258, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2124674, 2124770, 2123875, 2123971, 2124067, 2124163, 2124259, 2124355, 2124451, 2124547, 2124643, 2124739, 2124835, 2124931, 2125027, 2125123]),
        new Uint32Array([2168065, 6291456, 2168097, 6291456, 2168129, 6291456, 2168161, 6291456, 2168193, 6291456, 2168225, 6291456, 2168257, 6291456, 2168289, 6291456]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0]),
        new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 2100610, 2100611, 6291456, 2107842, 2107843, 6291456, 6291456, 6291456, 6291456, 10537922, 6291456, 10537986, 6291456]),
        new Uint32Array([2174849, 2174881, 2174913, 2174945, 2174977, 2175009, 2175041, 2175073, 2175105, 2175137, 2175169, 2175201, 2175233, 2175265, 2175297, 2175329]),
        new Uint32Array([2154562, 2154626, 2154690, 2154754, 2141858, 2154818, 2154882, 2127298, 2154946, 2127298, 2155010, 2155074, 2155138, 2155202, 2155266, 2155202]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]),
        new Uint32Array([2200641, 2150786, 2150850, 2150914, 2150978, 2151042, 2106562, 2151106, 2150562, 2151170, 2151234, 2151298, 2151362, 2151426, 2151490, 2151554]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456]),
        new Uint32Array([2220289, 2220289, 2220321, 2220321, 2220321, 2220321, 2220353, 2220353, 2220353, 2220353, 2220385, 2220385, 2220385, 2220385, 2220417, 2220417]),
        new Uint32Array([2155330, 2155394, 0, 2155458, 2155522, 2155586, 2105732, 0, 2155650, 2155714, 2155778, 2125314, 2155842, 2155906, 2126274, 2155970]),
        new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2097729, 2106017, 2106017, 2106017, 2106017, 2131297, 2131297, 2131297, 2131297, 2106081, 2106081, 2162049, 2162049, 2105953, 2105953, 2162337]),
        new Uint32Array([2097185, 2097697, 2097697, 2097697, 2097697, 2135777, 2135777, 2135777, 2135777, 2097377, 2097377, 2097377, 2097377, 2097601, 2097601, 2097217]),
        new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]),
        new Uint32Array([2139331, 2139427, 2139523, 2139043, 2133571, 2132611, 2139619, 2139715, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2174113, 2174145, 2100897, 2098177, 2108289, 2100865, 2173601, 2173633, 2173985, 2174113, 2174145, 6291456, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456]),
        new Uint32Array([23068672, 23068672, 18923778, 23068672, 23068672, 23068672, 23068672, 18923842, 23068672, 23068672, 23068672, 23068672, 18923906, 23068672, 23068672, 23068672]),
        new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 0, 2133857, 0, 0, 0, 0]),
        new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2177537, 6291456, 2177569, 6291456, 2177601, 6291456, 2177633, 6291456, 2177665, 6291456, 2177697, 6291456, 2177729, 6291456, 2177761, 6291456]),
        new Uint32Array([2212481, 2212513, 2212545, 2212577, 2197121, 2212609, 2212641, 2212673, 2212705, 2212737, 2212769, 2212801, 2212833, 2212865, 2212897, 2212929]),
        new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
        new Uint32Array([2098241, 2108353, 2170209, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 6291456, 2108193, 2172417, 2112481, 2098177]),
        new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456])
      ];
      var blockIdxes = new Uint16Array([616, 616, 565, 147, 161, 411, 330, 2, 131, 131, 328, 454, 241, 408, 86, 86, 696, 113, 285, 350, 325, 301, 473, 214, 639, 232, 447, 64, 369, 598, 124, 672, 567, 223, 621, 154, 107, 86, 86, 86, 86, 86, 86, 505, 86, 68, 634, 86, 218, 218, 218, 218, 486, 218, 218, 513, 188, 608, 216, 86, 217, 463, 668, 85, 700, 360, 184, 86, 86, 86, 647, 402, 153, 10, 346, 718, 662, 260, 145, 298, 117, 1, 443, 342, 138, 54, 563, 86, 240, 572, 218, 70, 387, 86, 118, 460, 641, 602, 86, 86, 306, 218, 86, 692, 86, 86, 86, 86, 86, 162, 707, 86, 458, 26, 86, 218, 638, 86, 86, 86, 86, 86, 65, 449, 86, 86, 306, 183, 86, 58, 391, 667, 86, 157, 131, 131, 131, 131, 86, 433, 131, 406, 31, 218, 247, 86, 86, 693, 218, 581, 351, 86, 438, 295, 69, 462, 45, 126, 173, 650, 14, 295, 69, 97, 168, 187, 641, 78, 523, 390, 69, 108, 287, 664, 173, 219, 83, 295, 69, 108, 431, 426, 173, 694, 412, 115, 628, 52, 257, 398, 641, 118, 501, 121, 69, 579, 151, 423, 173, 620, 464, 121, 69, 382, 151, 476, 173, 27, 53, 121, 86, 594, 578, 226, 173, 86, 632, 130, 86, 96, 228, 268, 641, 622, 563, 86, 86, 21, 148, 650, 131, 131, 321, 43, 144, 343, 381, 531, 131, 131, 178, 20, 86, 399, 156, 375, 164, 541, 30, 60, 715, 198, 92, 118, 131, 131, 86, 86, 306, 407, 86, 280, 457, 196, 488, 358, 131, 131, 244, 86, 86, 143, 86, 86, 86, 86, 86, 667, 563, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 336, 363, 86, 86, 336, 86, 86, 380, 678, 67, 86, 86, 86, 678, 86, 86, 86, 512, 86, 307, 86, 708, 86, 86, 86, 86, 86, 528, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 563, 307, 86, 86, 86, 86, 86, 104, 450, 337, 86, 720, 86, 32, 450, 397, 86, 86, 86, 587, 218, 558, 708, 708, 293, 708, 86, 86, 86, 86, 86, 694, 205, 86, 8, 86, 86, 86, 86, 549, 86, 667, 697, 697, 679, 86, 458, 460, 86, 86, 650, 86, 708, 543, 86, 86, 86, 245, 86, 86, 86, 140, 218, 127, 708, 708, 458, 197, 131, 131, 131, 131, 500, 86, 86, 483, 251, 86, 306, 510, 515, 86, 722, 86, 86, 86, 65, 201, 86, 86, 483, 580, 470, 86, 86, 86, 368, 131, 131, 131, 694, 114, 110, 555, 86, 86, 123, 721, 163, 142, 713, 418, 86, 317, 675, 209, 218, 218, 218, 371, 545, 592, 629, 490, 603, 199, 46, 320, 525, 680, 310, 279, 388, 111, 42, 252, 593, 607, 235, 617, 410, 377, 50, 548, 135, 356, 17, 520, 189, 116, 392, 600, 349, 332, 482, 699, 690, 535, 119, 106, 451, 71, 152, 667, 131, 218, 218, 265, 671, 637, 492, 504, 533, 683, 269, 269, 658, 86, 86, 86, 86, 86, 86, 86, 86, 86, 491, 619, 86, 86, 6, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 229, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 86, 86, 171, 131, 118, 131, 656, 206, 234, 571, 89, 334, 670, 246, 311, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 534, 86, 86, 86, 86, 86, 86, 82, 86, 86, 86, 86, 86, 430, 86, 86, 86, 86, 86, 86, 86, 86, 86, 599, 86, 324, 86, 470, 69, 640, 264, 131, 626, 101, 174, 86, 86, 667, 233, 105, 73, 374, 394, 221, 204, 84, 28, 326, 86, 86, 471, 86, 86, 86, 109, 573, 86, 171, 200, 200, 200, 200, 218, 218, 86, 86, 86, 86, 460, 131, 131, 131, 86, 506, 86, 86, 86, 86, 86, 220, 404, 34, 614, 47, 442, 305, 25, 612, 338, 601, 648, 7, 344, 255, 131, 131, 51, 86, 312, 507, 563, 86, 86, 86, 86, 588, 86, 86, 86, 86, 86, 530, 511, 86, 458, 3, 435, 384, 556, 522, 230, 527, 86, 118, 86, 86, 717, 86, 137, 273, 79, 181, 484, 23, 93, 112, 655, 249, 417, 703, 370, 87, 98, 313, 684, 585, 155, 465, 596, 481, 695, 18, 416, 428, 61, 701, 706, 282, 643, 495, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 86, 86, 86, 171, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 650, 131, 422, 542, 420, 263, 24, 172, 86, 86, 86, 86, 86, 566, 86, 86, 132, 540, 395, 353, 494, 519, 19, 485, 284, 472, 131, 131, 131, 16, 714, 86, 211, 708, 86, 86, 86, 694, 698, 86, 86, 483, 704, 708, 218, 272, 86, 86, 120, 86, 159, 478, 86, 307, 247, 86, 86, 663, 597, 459, 627, 667, 86, 86, 277, 455, 39, 302, 86, 250, 86, 86, 86, 271, 99, 452, 306, 281, 329, 400, 200, 86, 86, 362, 549, 352, 646, 461, 323, 586, 86, 86, 4, 708, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 86, 518, 86, 86, 650, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 125, 554, 480, 300, 613, 72, 333, 288, 561, 544, 604, 48, 719, 91, 169, 176, 590, 224, 76, 191, 29, 559, 560, 231, 537, 166, 477, 538, 256, 437, 131, 131, 469, 167, 40, 0, 685, 266, 441, 705, 239, 642, 475, 568, 640, 610, 299, 673, 517, 318, 385, 22, 202, 180, 179, 359, 424, 215, 90, 66, 521, 653, 467, 682, 453, 409, 479, 88, 131, 661, 35, 303, 15, 262, 666, 630, 712, 131, 131, 618, 659, 175, 218, 195, 347, 193, 227, 261, 150, 165, 709, 546, 294, 569, 710, 270, 413, 376, 524, 55, 242, 38, 419, 529, 170, 657, 3, 304, 122, 379, 278, 131, 651, 86, 67, 576, 458, 458, 131, 131, 86, 86, 86, 86, 86, 86, 86, 118, 309, 86, 86, 547, 86, 86, 86, 86, 667, 650, 664, 131, 131, 86, 86, 56, 131, 131, 131, 131, 131, 131, 131, 131, 86, 307, 86, 86, 86, 664, 238, 650, 86, 86, 717, 86, 118, 86, 86, 315, 86, 59, 86, 86, 574, 549, 131, 131, 340, 57, 436, 86, 86, 86, 86, 86, 86, 458, 708, 499, 691, 62, 86, 650, 86, 86, 694, 86, 86, 86, 319, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 86, 549, 694, 131, 131, 131, 131, 131, 131, 131, 131, 131, 77, 86, 86, 139, 86, 502, 86, 86, 86, 667, 595, 131, 131, 131, 86, 12, 86, 13, 86, 609, 131, 131, 131, 131, 86, 86, 86, 625, 86, 669, 86, 86, 182, 129, 86, 5, 694, 104, 86, 86, 86, 86, 131, 131, 86, 86, 386, 171, 86, 86, 86, 345, 86, 324, 86, 589, 86, 213, 36, 131, 131, 131, 131, 131, 86, 86, 86, 86, 104, 131, 131, 131, 141, 290, 80, 677, 86, 86, 86, 267, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 515, 86, 86, 33, 136, 669, 86, 711, 515, 86, 86, 550, 640, 86, 104, 708, 515, 86, 159, 372, 717, 86, 86, 444, 515, 86, 86, 663, 37, 86, 563, 460, 86, 390, 624, 702, 131, 131, 131, 131, 389, 59, 708, 86, 86, 341, 208, 708, 635, 295, 69, 108, 431, 508, 100, 190, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 649, 516, 660, 131, 131, 86, 86, 86, 218, 631, 708, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 341, 575, 238, 514, 131, 131, 86, 86, 86, 218, 291, 708, 307, 131, 86, 86, 306, 367, 708, 131, 131, 131, 86, 378, 697, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 615, 253, 86, 86, 86, 292, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 104, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 69, 86, 341, 553, 549, 86, 307, 86, 86, 645, 275, 455, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 708, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 667, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 104, 86, 667, 459, 131, 131, 131, 131, 131, 131, 86, 458, 225, 86, 86, 86, 516, 549, 11, 390, 405, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 460, 44, 218, 197, 711, 515, 131, 131, 131, 131, 664, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 118, 307, 104, 286, 591, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 681, 86, 86, 75, 185, 314, 582, 86, 358, 496, 474, 86, 104, 131, 86, 86, 86, 86, 146, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 171, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 246, 503, 689, 339, 674, 81, 258, 415, 439, 128, 562, 366, 414, 246, 503, 689, 583, 222, 557, 316, 636, 665, 186, 355, 95, 670, 246, 503, 689, 339, 674, 557, 258, 415, 439, 186, 355, 95, 670, 246, 503, 689, 446, 644, 536, 652, 331, 532, 335, 440, 274, 421, 297, 570, 74, 425, 364, 425, 606, 552, 403, 509, 134, 365, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 218, 218, 218, 498, 218, 218, 577, 627, 551, 497, 572, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 553, 354, 236, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 296, 455, 131, 131, 456, 243, 103, 86, 41, 459, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 9, 276, 158, 716, 393, 564, 383, 489, 401, 654, 210, 654, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 650, 86, 86, 86, 86, 86, 86, 717, 667, 563, 563, 563, 86, 549, 102, 686, 133, 246, 605, 86, 448, 86, 86, 207, 307, 131, 131, 131, 641, 86, 177, 611, 445, 373, 194, 584, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 307, 171, 86, 86, 86, 86, 86, 86, 86, 717, 86, 86, 86, 86, 86, 460, 131, 131, 650, 86, 86, 86, 694, 708, 86, 86, 694, 86, 458, 131, 131, 131, 131, 131, 131, 667, 694, 289, 650, 667, 131, 131, 86, 640, 131, 131, 664, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 458, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 466, 203, 149, 429, 94, 432, 160, 687, 539, 63, 237, 283, 192, 248, 348, 259, 427, 526, 396, 676, 254, 468, 487, 212, 327, 623, 49, 633, 322, 493, 434, 688, 357, 361, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131]);
      var mappingStr = "\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064A\u0647 \u0648\u0633\u0644\u0645\u062C\u0644 \u062C\u0644\u0627\u0644\u0647\u30AD\u30ED\u30E1\u30FC\u30C8\u30EBrad\u2215s2\u30A8\u30B9\u30AF\u30FC\u30C9\u30AD\u30ED\u30B0\u30E9\u30E0\u30AD\u30ED\u30EF\u30C3\u30C8\u30B0\u30E9\u30E0\u30C8\u30F3\u30AF\u30EB\u30BC\u30A4\u30ED\u30B5\u30F3\u30C1\u30FC\u30E0\u30D1\u30FC\u30BB\u30F3\u30C8\u30D4\u30A2\u30B9\u30C8\u30EB\u30D5\u30A1\u30E9\u30C3\u30C9\u30D6\u30C3\u30B7\u30A7\u30EB\u30D8\u30AF\u30BF\u30FC\u30EB\u30DE\u30F3\u30B7\u30E7\u30F3\u30DF\u30EA\u30D0\u30FC\u30EB\u30EC\u30F3\u30C8\u30B2\u30F3\u2032\u2032\u2032\u20321\u204410viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)\u222B\u222B\u222B\u222B(\uC624\uC804)(\uC624\uD6C4)\u30A2\u30D1\u30FC\u30C8\u30A2\u30EB\u30D5\u30A1\u30A2\u30F3\u30DA\u30A2\u30A4\u30CB\u30F3\u30B0\u30A8\u30FC\u30AB\u30FC\u30AB\u30E9\u30C3\u30C8\u30AB\u30ED\u30EA\u30FC\u30AD\u30E5\u30EA\u30FC\u30AE\u30EB\u30C0\u30FC\u30AF\u30ED\u30FC\u30CD\u30B5\u30A4\u30AF\u30EB\u30B7\u30EA\u30F3\u30B0\u30D0\u30FC\u30EC\u30EB\u30D5\u30A3\u30FC\u30C8\u30DD\u30A4\u30F3\u30C8\u30DE\u30A4\u30AF\u30ED\u30DF\u30AF\u30ED\u30F3\u30E1\u30AC\u30C8\u30F3\u30EA\u30C3\u30C8\u30EB\u30EB\u30FC\u30D6\u30EB\u682A\u5F0F\u4F1A\u793Ekcalm\u2215s2c\u2215kg\u0627\u0643\u0628\u0631\u0645\u062D\u0645\u062F\u0635\u0644\u0639\u0645\u0631\u0633\u0648\u0644\u0631\u06CC\u0627\u06441\u204441\u204423\u20444 \u0308\u0301\u0FB2\u0F71\u0F80\u0FB3\u0F71\u0F80 \u0308\u0342 \u0313\u0300 \u0313\u0301 \u0313\u0342 \u0314\u0300 \u0314\u0301 \u0314\u0342 \u0308\u0300\u2035\u2035\u2035a/ca/sc/oc/utelfax1\u204471\u204491\u204432\u204431\u204452\u204453\u204454\u204451\u204465\u204461\u204483\u204485\u204487\u20448xii0\u20443\u222E\u222E\u222E(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(\u1100)(\u1102)(\u1103)(\u1105)(\u1106)(\u1107)(\u1109)(\u110B)(\u110C)(\u110E)(\u110F)(\u1110)(\u1111)(\u1112)(\uAC00)(\uB098)(\uB2E4)(\uB77C)(\uB9C8)(\uBC14)(\uC0AC)(\uC544)(\uC790)(\uCC28)(\uCE74)(\uD0C0)(\uD30C)(\uD558)(\uC8FC)(\u4E00)(\u4E8C)(\u4E09)(\u56DB)(\u4E94)(\u516D)(\u4E03)(\u516B)(\u4E5D)(\u5341)(\u6708)(\u706B)(\u6C34)(\u6728)(\u91D1)(\u571F)(\u65E5)(\u682A)(\u6709)(\u793E)(\u540D)(\u7279)(\u8CA1)(\u795D)(\u52B4)(\u4EE3)(\u547C)(\u5B66)(\u76E3)(\u4F01)(\u8CC7)(\u5354)(\u796D)(\u4F11)(\u81EA)(\u81F3)pte10\u670811\u670812\u6708ergltd\u30A2\u30FC\u30EB\u30A4\u30F3\u30C1\u30A6\u30A9\u30F3\u30AA\u30F3\u30B9\u30AA\u30FC\u30E0\u30AB\u30A4\u30EA\u30AC\u30ED\u30F3\u30AC\u30F3\u30DE\u30AE\u30CB\u30FC\u30B1\u30FC\u30B9\u30B3\u30EB\u30CA\u30B3\u30FC\u30DD\u30BB\u30F3\u30C1\u30C0\u30FC\u30B9\u30CE\u30C3\u30C8\u30CF\u30A4\u30C4\u30D1\u30FC\u30C4\u30D4\u30AF\u30EB\u30D5\u30E9\u30F3\u30DA\u30CB\u30D2\u30D8\u30EB\u30C4\u30DA\u30F3\u30B9\u30DA\u30FC\u30B8\u30D9\u30FC\u30BF\u30DC\u30EB\u30C8\u30DD\u30F3\u30C9\u30DB\u30FC\u30EB\u30DB\u30FC\u30F3\u30DE\u30A4\u30EB\u30DE\u30C3\u30CF\u30DE\u30EB\u30AF\u30E4\u30FC\u30C9\u30E4\u30FC\u30EB\u30E6\u30A2\u30F3\u30EB\u30D4\u30FC10\u70B911\u70B912\u70B913\u70B914\u70B915\u70B916\u70B917\u70B918\u70B919\u70B920\u70B921\u70B922\u70B923\u70B924\u70B9hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv\u2215ma\u2215m10\u65E511\u65E512\u65E513\u65E514\u65E515\u65E516\u65E517\u65E518\u65E519\u65E520\u65E521\u65E522\u65E523\u65E524\u65E525\u65E526\u65E527\u65E528\u65E529\u65E530\u65E531\u65E5galffiffl\u05E9\u05BC\u05C1\u05E9\u05BC\u05C2 \u064C\u0651 \u064D\u0651 \u064E\u0651 \u064F\u0651 \u0650\u0651 \u0651\u0670\u0640\u064E\u0651\u0640\u064F\u0651\u0640\u0650\u0651\u062A\u062C\u0645\u062A\u062D\u062C\u062A\u062D\u0645\u062A\u062E\u0645\u062A\u0645\u062C\u062A\u0645\u062D\u062A\u0645\u062E\u062C\u0645\u062D\u062D\u0645\u064A\u062D\u0645\u0649\u0633\u062D\u062C\u0633\u062C\u062D\u0633\u062C\u0649\u0633\u0645\u062D\u0633\u0645\u062C\u0633\u0645\u0645\u0635\u062D\u062D\u0635\u0645\u0645\u0634\u062D\u0645\u0634\u062C\u064A\u0634\u0645\u062E\u0634\u0645\u0645\u0636\u062D\u0649\u0636\u062E\u0645\u0637\u0645\u062D\u0637\u0645\u0645\u0637\u0645\u064A\u0639\u062C\u0645\u0639\u0645\u0645\u0639\u0645\u0649\u063A\u0645\u0645\u063A\u0645\u064A\u063A\u0645\u0649\u0641\u062E\u0645\u0642\u0645\u062D\u0642\u0645\u0645\u0644\u062D\u0645\u0644\u062D\u064A\u0644\u062D\u0649\u0644\u062C\u062C\u0644\u062E\u0645\u0644\u0645\u062D\u0645\u062D\u062C\u0645\u062D\u064A\u0645\u062C\u062D\u0645\u062C\u0645\u0645\u062E\u0645\u0645\u062C\u062E\u0647\u0645\u062C\u0647\u0645\u0645\u0646\u062D\u0645\u0646\u062D\u0649\u0646\u062C\u0645\u0646\u062C\u0649\u0646\u0645\u064A\u0646\u0645\u0649\u064A\u0645\u0645\u0628\u062E\u064A\u062A\u062C\u064A\u062A\u062C\u0649\u062A\u062E\u064A\u062A\u062E\u0649\u062A\u0645\u064A\u062A\u0645\u0649\u062C\u0645\u064A\u062C\u062D\u0649\u062C\u0645\u0649\u0633\u062E\u0649\u0635\u062D\u064A\u0634\u062D\u064A\u0636\u062D\u064A\u0644\u062C\u064A\u0644\u0645\u064A\u064A\u062D\u064A\u064A\u062C\u064A\u064A\u0645\u064A\u0645\u0645\u064A\u0642\u0645\u064A\u0646\u062D\u064A\u0639\u0645\u064A\u0643\u0645\u064A\u0646\u062C\u062D\u0645\u062E\u064A\u0644\u062C\u0645\u0643\u0645\u0645\u062C\u062D\u064A\u062D\u062C\u064A\u0645\u062C\u064A\u0641\u0645\u064A\u0628\u062D\u064A\u0633\u062E\u064A\u0646\u062C\u064A\u0635\u0644\u06D2\u0642\u0644\u06D2\u{1D158}\u{1D165}\u{1D16E}\u{1D158}\u{1D165}\u{1D16F}\u{1D158}\u{1D165}\u{1D170}\u{1D158}\u{1D165}\u{1D171}\u{1D158}\u{1D165}\u{1D172}\u{1D1B9}\u{1D165}\u{1D16E}\u{1D1BA}\u{1D165}\u{1D16E}\u{1D1B9}\u{1D165}\u{1D16F}\u{1D1BA}\u{1D165}\u{1D16F}\u3014s\u3015ppv\u3014\u672C\u3015\u3014\u4E09\u3015\u3014\u4E8C\u3015\u3014\u5B89\u3015\u3014\u70B9\u3015\u3014\u6253\u3015\u3014\u76D7\u3015\u3014\u52DD\u3015\u3014\u6557\u3015 \u0304 \u0301 \u0327ssi\u0307ijl\xB7\u02BCnd\u017Eljnjdz \u0306 \u0307 \u030A \u0328 \u0303 \u030B \u03B9\u0565\u0582\u0627\u0674\u0648\u0674\u06C7\u0674\u064A\u0674\u0915\u093C\u0916\u093C\u0917\u093C\u091C\u093C\u0921\u093C\u0922\u093C\u092B\u093C\u092F\u093C\u09A1\u09BC\u09A2\u09BC\u09AF\u09BC\u0A32\u0A3C\u0A38\u0A3C\u0A16\u0A3C\u0A17\u0A3C\u0A1C\u0A3C\u0A2B\u0A3C\u0B21\u0B3C\u0B22\u0B3C\u0E4D\u0E32\u0ECD\u0EB2\u0EAB\u0E99\u0EAB\u0EA1\u0F42\u0FB7\u0F4C\u0FB7\u0F51\u0FB7\u0F56\u0FB7\u0F5B\u0FB7\u0F40\u0FB5\u0F71\u0F72\u0F71\u0F74\u0FB2\u0F80\u0FB3\u0F80\u0F92\u0FB7\u0F9C\u0FB7\u0FA1\u0FB7\u0FA6\u0FB7\u0FAB\u0FB7\u0F90\u0FB5a\u02BE\u1F00\u03B9\u1F01\u03B9\u1F02\u03B9\u1F03\u03B9\u1F04\u03B9\u1F05\u03B9\u1F06\u03B9\u1F07\u03B9\u1F20\u03B9\u1F21\u03B9\u1F22\u03B9\u1F23\u03B9\u1F24\u03B9\u1F25\u03B9\u1F26\u03B9\u1F27\u03B9\u1F60\u03B9\u1F61\u03B9\u1F62\u03B9\u1F63\u03B9\u1F64\u03B9\u1F65\u03B9\u1F66\u03B9\u1F67\u03B9\u1F70\u03B9\u03B1\u03B9\u03AC\u03B9\u1FB6\u03B9 \u0342\u1F74\u03B9\u03B7\u03B9\u03AE\u03B9\u1FC6\u03B9\u1F7C\u03B9\u03C9\u03B9\u03CE\u03B9\u1FF6\u03B9 \u0333!! \u0305???!!?rs\xB0c\xB0fnosmtmivix\u2ADD\u0338 \u3099 \u309A\u3088\u308A\u30B3\u30C8333435\uCC38\uACE0\uC8FC\uC758363738394042444546474849503\u67084\u67085\u67086\u67087\u67088\u67089\u6708hgev\u30AE\u30AC\u30C7\u30B7\u30C9\u30EB\u30CA\u30CE\u30D4\u30B3\u30D3\u30EB\u30DA\u30BD\u30DB\u30F3\u30EA\u30E9\u30EC\u30E0daauovpciu\u5E73\u6210\u662D\u548C\u5927\u6B63\u660E\u6CBBna\u03BCakakbmbgbpfnf\u03BCf\u03BCgmg\u03BClmldlklfmnm\u03BCmpsns\u03BCsmsnv\u03BCvkvpwnw\u03BCwmwkwk\u03C9m\u03C9bqcccddbgyhainkkktlnlxphprsrsvwbst\u0574\u0576\u0574\u0565\u0574\u056B\u057E\u0576\u0574\u056D\u05D9\u05B4\u05F2\u05B7\u05E9\u05C1\u05E9\u05C2\u05D0\u05B7\u05D0\u05B8\u05D0\u05BC\u05D1\u05BC\u05D2\u05BC\u05D3\u05BC\u05D4\u05BC\u05D5\u05BC\u05D6\u05BC\u05D8\u05BC\u05D9\u05BC\u05DA\u05BC\u05DB\u05BC\u05DC\u05BC\u05DE\u05BC\u05E0\u05BC\u05E1\u05BC\u05E3\u05BC\u05E4\u05BC\u05E6\u05BC\u05E7\u05BC\u05E8\u05BC\u05EA\u05BC\u05D5\u05B9\u05D1\u05BF\u05DB\u05BF\u05E4\u05BF\u05D0\u05DC\u0626\u0627\u0626\u06D5\u0626\u0648\u0626\u06C7\u0626\u06C6\u0626\u06C8\u0626\u06D0\u0626\u0649\u0626\u062C\u0626\u062D\u0626\u0645\u0626\u064A\u0628\u062C\u0628\u0645\u0628\u0649\u0628\u064A\u062A\u0649\u062A\u064A\u062B\u062C\u062B\u0645\u062B\u0649\u062B\u064A\u062E\u062D\u0636\u062C\u0636\u0645\u0637\u062D\u0638\u0645\u063A\u062C\u0641\u062C\u0641\u062D\u0641\u0649\u0641\u064A\u0642\u062D\u0642\u0649\u0642\u064A\u0643\u0627\u0643\u062C\u0643\u062D\u0643\u062E\u0643\u0644\u0643\u0649\u0643\u064A\u0646\u062E\u0646\u0649\u0646\u064A\u0647\u062C\u0647\u0649\u0647\u064A\u064A\u0649\u0630\u0670\u0631\u0670\u0649\u0670\u0626\u0631\u0626\u0632\u0626\u0646\u0628\u0632\u0628\u0646\u062A\u0631\u062A\u0632\u062A\u0646\u062B\u0631\u062B\u0632\u062B\u0646\u0645\u0627\u0646\u0631\u0646\u0632\u0646\u0646\u064A\u0631\u064A\u0632\u0626\u062E\u0626\u0647\u0628\u0647\u062A\u0647\u0635\u062E\u0646\u0647\u0647\u0670\u062B\u0647\u0633\u0647\u0634\u0647\u0637\u0649\u0637\u064A\u0639\u0649\u0639\u064A\u063A\u0649\u063A\u064A\u0633\u0649\u0633\u064A\u0634\u0649\u0634\u064A\u0635\u0649\u0635\u064A\u0636\u0649\u0636\u064A\u0634\u062E\u0634\u0631\u0633\u0631\u0635\u0631\u0636\u0631\u0627\u064B \u064B\u0640\u064B\u0640\u0651 \u0652\u0640\u0652\u0644\u0622\u0644\u0623\u0644\u0625\u{1D157}\u{1D165}0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddj\u307B\u304B\u30B3\u30B3\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0135\u0137\u013A\u013C\u013E\u0142\u0144\u0146\u0148\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\xFF\u017A\u017C\u0253\u0183\u0185\u0254\u0188\u0256\u0257\u018C\u01DD\u0259\u025B\u0192\u0260\u0263\u0269\u0268\u0199\u026F\u0272\u0275\u01A1\u01A3\u01A5\u0280\u01A8\u0283\u01AD\u0288\u01B0\u028A\u028B\u01B4\u01B6\u0292\u01B9\u01BD\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F5\u0195\u01BF\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u019E\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233\u2C65\u023C\u019A\u2C66\u0242\u0180\u0289\u028C\u0247\u0249\u024B\u024D\u024F\u0266\u0279\u027B\u0281\u0295\u0371\u0373\u02B9\u0377;\u03F3\u03AD\u03AF\u03CC\u03CD\u03B2\u03B3\u03B4\u03B5\u03B6\u03B8\u03BA\u03BB\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03CA\u03CB\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF\u03F8\u03FB\u037B\u037C\u037D\u0450\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\u045D\u045E\u045F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561\u0562\u0563\u0564\u0566\u0567\u0568\u0569\u056A\u056C\u056E\u056F\u0570\u0571\u0572\u0573\u0575\u0577\u0578\u0579\u057A\u057B\u057C\u057D\u057F\u0580\u0581\u0583\u0584\u0585\u0586\u0F0B\u2D27\u2D2D\u10DC\u13F0\u13F1\u13F2\u13F3\u13F4\u13F5\uA64B\u0250\u0251\u1D02\u025C\u1D16\u1D17\u1D1D\u1D25\u0252\u0255\u025F\u0261\u0265\u026A\u1D7B\u029D\u026D\u1D85\u029F\u0271\u0270\u0273\u0274\u0278\u0282\u01AB\u1D1C\u0290\u0291\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF\u1F10\u1F11\u1F12\u1F13\u1F14\u1F15\u1F30\u1F31\u1F32\u1F33\u1F34\u1F35\u1F36\u1F37\u1F40\u1F41\u1F42\u1F43\u1F44\u1F45\u1F51\u1F53\u1F55\u1F57\u1FB0\u1FB1\u1F72\u0390\u1FD0\u1FD1\u1F76\u03B0\u1FE0\u1FE1\u1F7A\u1FE5`\u1F78\u2010+\u2212\u2211\u3008\u3009\u2C30\u2C31\u2C32\u2C33\u2C34\u2C35\u2C36\u2C37\u2C38\u2C39\u2C3A\u2C3B\u2C3C\u2C3D\u2C3E\u2C3F\u2C40\u2C41\u2C42\u2C43\u2C44\u2C45\u2C46\u2C47\u2C48\u2C49\u2C4A\u2C4B\u2C4C\u2C4D\u2C4E\u2C4F\u2C50\u2C51\u2C52\u2C53\u2C54\u2C55\u2C56\u2C57\u2C58\u2C59\u2C5A\u2C5B\u2C5C\u2C5D\u2C5E\u2C61\u026B\u1D7D\u027D\u2C68\u2C6A\u2C6C\u2C73\u2C76\u023F\u0240\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CEC\u2CEE\u2CF3\u2D61\u6BCD\u9F9F\u4E28\u4E36\u4E3F\u4E59\u4E85\u4EA0\u4EBA\u513F\u5165\u5182\u5196\u51AB\u51E0\u51F5\u5200\u529B\u52F9\u5315\u531A\u5338\u535C\u5369\u5382\u53B6\u53C8\u53E3\u56D7\u58EB\u5902\u590A\u5915\u5973\u5B50\u5B80\u5BF8\u5C0F\u5C22\u5C38\u5C6E\u5C71\u5DDB\u5DE5\u5DF1\u5DFE\u5E72\u5E7A\u5E7F\u5EF4\u5EFE\u5F0B\u5F13\u5F50\u5F61\u5F73\u5FC3\u6208\u6236\u624B\u652F\u6534\u6587\u6597\u65A4\u65B9\u65E0\u66F0\u6B20\u6B62\u6B79\u6BB3\u6BCB\u6BD4\u6BDB\u6C0F\u6C14\u722A\u7236\u723B\u723F\u7247\u7259\u725B\u72AC\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7530\u758B\u7592\u7676\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79B8\u79BE\u7A74\u7ACB\u7AF9\u7C73\u7CF8\u7F36\u7F51\u7F8A\u7FBD\u8001\u800C\u8012\u8033\u807F\u8089\u81E3\u81FC\u820C\u821B\u821F\u826E\u8272\u8278\u864D\u866B\u8840\u884C\u8863\u897E\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C78\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FB5\u9091\u9149\u91C6\u91CC\u9577\u9580\u961C\u96B6\u96B9\u96E8\u9751\u975E\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u99AC\u9AA8\u9AD8\u9ADF\u9B25\u9B2F\u9B32\u9B3C\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u9EC3\u9ECD\u9ED1\u9EF9\u9EFD\u9F0E\u9F13\u9F20\u9F3B\u9F4A\u9F52\u9F8D\u9F9C\u9FA0.\u3012\u5344\u5345\u1101\u11AA\u11AC\u11AD\u1104\u11B0\u11B1\u11B2\u11B3\u11B4\u11B5\u111A\u1108\u1121\u110A\u110D\u1161\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116A\u116B\u116C\u116D\u116E\u116F\u1170\u1171\u1172\u1173\u1174\u1175\u1114\u1115\u11C7\u11C8\u11CC\u11CE\u11D3\u11D7\u11D9\u111C\u11DD\u11DF\u111D\u111E\u1120\u1122\u1123\u1127\u1129\u112B\u112C\u112D\u112E\u112F\u1132\u1136\u1140\u1147\u114C\u11F1\u11F2\u1157\u1158\u1159\u1184\u1185\u1188\u1191\u1192\u1194\u119E\u11A1\u4E0A\u4E2D\u4E0B\u7532\u4E19\u4E01\u5929\u5730\u554F\u5E7C\u7B8F\uC6B0\u79D8\u7537\u9069\u512A\u5370\u6CE8\u9805\u5199\u5DE6\u53F3\u533B\u5B97\u591C\u30C6\u30CC\u30E2\u30E8\u30F0\u30F1\u30F2\uA641\uA643\uA645\uA647\uA649\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA77A\uA77C\u1D79\uA77F\uA781\uA783\uA785\uA787\uA78C\uA791\uA793\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\u026C\u029E\u0287\uAB53\uA7B5\uA7B7\uAB37\uAB52\u13A0\u13A1\u13A2\u13A3\u13A4\u13A5\u13A6\u13A7\u13A8\u13A9\u13AA\u13AB\u13AC\u13AD\u13AE\u13AF\u13B0\u13B1\u13B2\u13B3\u13B4\u13B5\u13B6\u13B7\u13B8\u13B9\u13BA\u13BB\u13BC\u13BD\u13BE\u13BF\u13C0\u13C1\u13C2\u13C3\u13C4\u13C5\u13C6\u13C7\u13C8\u13C9\u13CA\u13CB\u13CC\u13CD\u13CE\u13CF\u13D0\u13D1\u13D2\u13D3\u13D4\u13D5\u13D6\u13D7\u13D8\u13D9\u13DA\u13DB\u13DC\u13DD\u13DE\u13DF\u13E0\u13E1\u13E2\u13E3\u13E4\u13E5\u13E6\u13E7\u13E8\u13E9\u13EA\u13EB\u13EC\u13ED\u13EE\u13EF\u8C48\u66F4\u8CC8\u6ED1\u4E32\u53E5\u5951\u5587\u5948\u61F6\u7669\u7F85\u863F\u87BA\u88F8\u908F\u6A02\u6D1B\u70D9\u73DE\u843D\u916A\u99F1\u4E82\u5375\u6B04\u721B\u862D\u9E1E\u5D50\u6FEB\u85CD\u8964\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u90CE\u4F86\u51B7\u52DE\u64C4\u6AD3\u7210\u76E7\u8606\u865C\u8DEF\u9732\u9B6F\u9DFA\u788C\u797F\u7DA0\u83C9\u9304\u8AD6\u58DF\u5F04\u7C60\u807E\u7262\u78CA\u8CC2\u96F7\u58D8\u5C62\u6A13\u6DDA\u6F0F\u7D2F\u7E37\u964B\u52D2\u808B\u51DC\u51CC\u7A1C\u7DBE\u83F1\u9675\u8B80\u62CF\u8AFE\u4E39\u5BE7\u6012\u7387\u7570\u5317\u78FB\u4FBF\u5FA9\u4E0D\u6CCC\u6578\u7D22\u53C3\u585E\u7701\u8449\u8AAA\u6BBA\u6C88\u62FE\u82E5\u63A0\u7565\u4EAE\u5169\u51C9\u6881\u7CE7\u826F\u8AD2\u91CF\u52F5\u5442\u5EEC\u65C5\u6FFE\u792A\u95AD\u9A6A\u9E97\u9ECE\u66C6\u6B77\u8F62\u5E74\u6190\u6200\u649A\u6F23\u7149\u7489\u79CA\u7DF4\u806F\u8F26\u84EE\u9023\u934A\u5217\u52A3\u54BD\u70C8\u88C2\u5EC9\u5FF5\u637B\u6BAE\u7C3E\u7375\u4EE4\u56F9\u5DBA\u601C\u73B2\u7469\u7F9A\u8046\u9234\u96F6\u9748\u9818\u4F8B\u79AE\u91B4\u96B8\u60E1\u4E86\u50DA\u5BEE\u5C3F\u6599\u71CE\u7642\u84FC\u907C\u6688\u962E\u5289\u677B\u67F3\u6D41\u6E9C\u7409\u7559\u786B\u7D10\u985E\u622E\u9678\u502B\u5D19\u6DEA\u8F2A\u5F8B\u6144\u6817\u9686\u5229\u540F\u5C65\u6613\u674E\u68A8\u6CE5\u7406\u75E2\u7F79\u88CF\u88E1\u96E2\u533F\u6EBA\u541D\u71D0\u7498\u85FA\u96A3\u9C57\u9E9F\u6797\u6DCB\u81E8\u7B20\u7C92\u72C0\u7099\u8B58\u4EC0\u8336\u523A\u5207\u5EA6\u62D3\u7CD6\u5B85\u6D1E\u66B4\u8F3B\u964D\u5ED3\u5140\u55C0\u585A\u6674\u51DE\u732A\u76CA\u793C\u795E\u7965\u798F\u9756\u7CBE\u8612\u8AF8\u9038\u90FD\u98EF\u98FC\u9928\u9DB4\u90DE\u96B7\u4FAE\u50E7\u514D\u52C9\u52E4\u5351\u559D\u5606\u5668\u5840\u58A8\u5C64\u6094\u6168\u618E\u61F2\u654F\u65E2\u6691\u6885\u6D77\u6E1A\u6F22\u716E\u722B\u7422\u7891\u7949\u7948\u7950\u7956\u798D\u798E\u7A40\u7A81\u7BC0\u7E09\u7E41\u7F72\u8005\u81ED\u8279\u8457\u8910\u8996\u8B01\u8B39\u8CD3\u8D08\u8FB6\u96E3\u97FF\u983B\u6075\u{242EE}\u8218\u4E26\u51B5\u5168\u4F80\u5145\u5180\u52C7\u52FA\u5555\u5599\u55E2\u58B3\u5944\u5954\u5A62\u5B28\u5ED2\u5ED9\u5F69\u5FAD\u60D8\u614E\u6108\u6160\u6234\u63C4\u641C\u6452\u6556\u671B\u6756\u6EDB\u6ECB\u701E\u77A7\u7235\u72AF\u7471\u7506\u753B\u761D\u761F\u76DB\u76F4\u774A\u7740\u78CC\u7AB1\u7C7B\u7D5B\u7F3E\u8352\u83EF\u8779\u8941\u8986\u8ABF\u8ACB\u8AED\u8B8A\u8F38\u9072\u9199\u9276\u967C\u97DB\u980B\u9B12\u{2284A}\u{22844}\u{233D5}\u3B9D\u4018\u4039\u{25249}\u{25CD0}\u{27ED3}\u9F43\u9F8E\u05E2\u05DD\u0671\u067B\u067E\u0680\u067A\u067F\u0679\u06A4\u06A6\u0684\u0683\u0686\u0687\u068D\u068C\u068E\u0688\u0698\u0691\u06A9\u06AF\u06B3\u06B1\u06BA\u06BB\u06C0\u06C1\u06BE\u06D3\u06AD\u06CB\u06C5\u06C9\u3001\u3016\u3017\u2014\u2013_{}\u3010\u3011\u300A\u300B\u300C\u300D\u300E\u300F[]#&*-<>\\$%@\u0621\u0624\u0629\"'^|~\u2985\u2986\u30FB\u30A5\u30E3\xA2\xA3\xAC\xA6\xA5\u20A9\u2502\u2190\u2191\u2192\u2193\u25A0\u25CB\u{10428}\u{10429}\u{1042A}\u{1042B}\u{1042C}\u{1042D}\u{1042E}\u{1042F}\u{10430}\u{10431}\u{10432}\u{10433}\u{10434}\u{10435}\u{10436}\u{10437}\u{10438}\u{10439}\u{1043A}\u{1043B}\u{1043C}\u{1043D}\u{1043E}\u{1043F}\u{10440}\u{10441}\u{10442}\u{10443}\u{10444}\u{10445}\u{10446}\u{10447}\u{10448}\u{10449}\u{1044A}\u{1044B}\u{1044C}\u{1044D}\u{1044E}\u{1044F}\u{104D8}\u{104D9}\u{104DA}\u{104DB}\u{104DC}\u{104DD}\u{104DE}\u{104DF}\u{104E0}\u{104E1}\u{104E2}\u{104E3}\u{104E4}\u{104E5}\u{104E6}\u{104E7}\u{104E8}\u{104E9}\u{104EA}\u{104EB}\u{104EC}\u{104ED}\u{104EE}\u{104EF}\u{104F0}\u{104F1}\u{104F2}\u{104F3}\u{104F4}\u{104F5}\u{104F6}\u{104F7}\u{104F8}\u{104F9}\u{104FA}\u{104FB}\u{10CC0}\u{10CC1}\u{10CC2}\u{10CC3}\u{10CC4}\u{10CC5}\u{10CC6}\u{10CC7}\u{10CC8}\u{10CC9}\u{10CCA}\u{10CCB}\u{10CCC}\u{10CCD}\u{10CCE}\u{10CCF}\u{10CD0}\u{10CD1}\u{10CD2}\u{10CD3}\u{10CD4}\u{10CD5}\u{10CD6}\u{10CD7}\u{10CD8}\u{10CD9}\u{10CDA}\u{10CDB}\u{10CDC}\u{10CDD}\u{10CDE}\u{10CDF}\u{10CE0}\u{10CE1}\u{10CE2}\u{10CE3}\u{10CE4}\u{10CE5}\u{10CE6}\u{10CE7}\u{10CE8}\u{10CE9}\u{10CEA}\u{10CEB}\u{10CEC}\u{10CED}\u{10CEE}\u{10CEF}\u{10CF0}\u{10CF1}\u{10CF2}\u{118C0}\u{118C1}\u{118C2}\u{118C3}\u{118C4}\u{118C5}\u{118C6}\u{118C7}\u{118C8}\u{118C9}\u{118CA}\u{118CB}\u{118CC}\u{118CD}\u{118CE}\u{118CF}\u{118D0}\u{118D1}\u{118D2}\u{118D3}\u{118D4}\u{118D5}\u{118D6}\u{118D7}\u{118D8}\u{118D9}\u{118DA}\u{118DB}\u{118DC}\u{118DD}\u{118DE}\u{118DF}\u0131\u0237\u2207\u2202\u{1E922}\u{1E923}\u{1E924}\u{1E925}\u{1E926}\u{1E927}\u{1E928}\u{1E929}\u{1E92A}\u{1E92B}\u{1E92C}\u{1E92D}\u{1E92E}\u{1E92F}\u{1E930}\u{1E931}\u{1E932}\u{1E933}\u{1E934}\u{1E935}\u{1E936}\u{1E937}\u{1E938}\u{1E939}\u{1E93A}\u{1E93B}\u{1E93C}\u{1E93D}\u{1E93E}\u{1E93F}\u{1E940}\u{1E941}\u{1E942}\u{1E943}\u066E\u06A1\u066F\u5B57\u53CC\u591A\u89E3\u4EA4\u6620\u7121\u524D\u5F8C\u518D\u65B0\u521D\u7D42\u8CA9\u58F0\u5439\u6F14\u6295\u6355\u904A\u6307\u7981\u7A7A\u5408\u6E80\u7533\u5272\u55B6\u914D\u5F97\u53EF\u4E3D\u4E38\u4E41\u{20122}\u4F60\u4FBB\u5002\u507A\u5099\u50CF\u349E\u{2063A}\u5154\u5164\u5177\u{2051C}\u34B9\u5167\u{2054B}\u5197\u51A4\u4ECC\u51AC\u{291DF}\u5203\u34DF\u523B\u5246\u5277\u3515\u5305\u5306\u5349\u535A\u5373\u537D\u537F\u{20A2C}\u7070\u53CA\u53DF\u{20B63}\u53EB\u53F1\u5406\u549E\u5438\u5448\u5468\u54A2\u54F6\u5510\u5553\u5563\u5584\u55AB\u55B3\u55C2\u5716\u5717\u5651\u5674\u58EE\u57CE\u57F4\u580D\u578B\u5832\u5831\u58AC\u{214E4}\u58F2\u58F7\u5906\u5922\u5962\u{216A8}\u{216EA}\u59EC\u5A1B\u5A27\u59D8\u5A66\u36EE\u5B08\u5B3E\u{219C8}\u5BC3\u5BD8\u5BF3\u{21B18}\u5BFF\u5C06\u3781\u5C60\u5CC0\u5C8D\u{21DE4}\u5D43\u{21DE6}\u5D6E\u5D6B\u5D7C\u5DE1\u5DE2\u382F\u5DFD\u5E28\u5E3D\u5E69\u3862\u{22183}\u387C\u5EB0\u5EB3\u5EB6\u{2A392}\u{22331}\u8201\u5F22\u38C7\u{232B8}\u{261DA}\u5F62\u5F6B\u38E3\u5F9A\u5FCD\u5FD7\u5FF9\u6081\u393A\u391C\u{226D4}\u60C7\u6148\u614C\u617A\u61B2\u61A4\u61AF\u61DE\u621B\u625D\u62B1\u62D4\u6350\u{22B0C}\u633D\u62FC\u6368\u6383\u63E4\u{22BF1}\u6422\u63C5\u63A9\u3A2E\u6469\u647E\u649D\u6477\u3A6C\u656C\u{2300A}\u65E3\u66F8\u6649\u3B19\u3B08\u3AE4\u5192\u5195\u6700\u669C\u80AD\u43D9\u6721\u675E\u6753\u{233C3}\u3B49\u67FA\u6785\u6852\u{2346D}\u688E\u681F\u6914\u6942\u69A3\u69EA\u6AA8\u{236A3}\u6ADB\u3C18\u6B21\u{238A7}\u6B54\u3C4E\u6B72\u6B9F\u6BBB\u{23A8D}\u{21D0B}\u{23AFA}\u6C4E\u{23CBC}\u6CBF\u6CCD\u6C67\u6D16\u6D3E\u6D69\u6D78\u6D85\u{23D1E}\u6D34\u6E2F\u6E6E\u3D33\u6EC7\u{23ED1}\u6DF9\u6F6E\u{23F5E}\u{23F8E}\u6FC6\u7039\u701B\u3D96\u704A\u707D\u7077\u70AD\u{20525}\u7145\u{24263}\u719C\u7228\u7250\u{24608}\u7280\u7295\u{24735}\u{24814}\u737A\u738B\u3EAC\u73A5\u3EB8\u7447\u745C\u7485\u74CA\u3F1B\u7524\u{24C36}\u753E\u{24C92}\u{2219F}\u7610\u{24FA1}\u{24FB8}\u{25044}\u3FFC\u4008\u{250F3}\u{250F2}\u{25119}\u{25133}\u771E\u771F\u778B\u4046\u4096\u{2541D}\u784E\u40E3\u{25626}\u{2569A}\u{256C5}\u79EB\u412F\u7A4A\u7A4F\u{2597C}\u{25AA7}\u4202\u{25BAB}\u7BC6\u7BC9\u4227\u{25C80}\u7CD2\u42A0\u7CE8\u7CE3\u7D00\u{25F86}\u7D63\u4301\u7DC7\u7E02\u7E45\u4334\u{26228}\u{26247}\u4359\u{262D9}\u7F7A\u{2633E}\u7F95\u7FFA\u{264DA}\u{26523}\u8060\u{265A8}\u8070\u{2335F}\u43D5\u80B2\u8103\u440B\u813E\u5AB5\u{267A7}\u{267B5}\u{23393}\u{2339C}\u8204\u8F9E\u446B\u8291\u828B\u829D\u52B3\u82B1\u82B3\u82BD\u82E6\u{26B3C}\u831D\u8363\u83AD\u8323\u83BD\u83E7\u8353\u83CA\u83CC\u83DC\u{26C36}\u{26D6B}\u{26CD5}\u452B\u84F1\u84F3\u8516\u{273CA}\u8564\u{26F2C}\u455D\u4561\u{26FB1}\u{270D2}\u456B\u8650\u8667\u8669\u86A9\u8688\u870E\u86E2\u8728\u876B\u8786\u87E1\u8801\u45F9\u8860\u{27667}\u88D7\u88DE\u4635\u88FA\u34BB\u{278AE}\u{27966}\u46BE\u46C7\u8AA0\u{27CA8}\u8CAB\u8CC1\u8D1B\u8D77\u{27F2F}\u{20804}\u8DCB\u8DBC\u8DF0\u{208DE}\u8ED4\u{285D2}\u{285ED}\u9094\u90F1\u9111\u{2872E}\u911B\u9238\u92D7\u92D8\u927C\u93F9\u9415\u{28BFA}\u958B\u4995\u95B7\u{28D77}\u49E6\u96C3\u5DB2\u9723\u{29145}\u{2921A}\u4A6E\u4A76\u97E0\u{2940A}\u4AB2\u{29496}\u9829\u{295B6}\u98E2\u4B33\u9929\u99A7\u99C2\u99FE\u4BCE\u{29B30}\u9C40\u9CFD\u4CCE\u4CED\u9D67\u{2A0CE}\u4CF8\u{2A105}\u{2A20E}\u{2A291}\u4D56\u9EFE\u9F05\u9F0F\u9F16\u{2A600}";
      function mapChar(codePoint) {
        if (codePoint >= 196608) {
          if (codePoint >= 917760 && codePoint <= 917999)
            return 18874368;
          return 0;
        }
        return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
      }
      return {
        mapStr: mappingStr,
        mapChar
      };
    });
  }
});

// node_modules/idna-uts46-hx/uts46.js
var require_uts46 = __commonJS({
  "node_modules/idna-uts46-hx/uts46.js"(exports, module2) {
    init_cjs_shims();
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["punycode", "./idna-map"], function(punycode, idna_map) {
          return factory(punycode, idna_map);
        });
      } else if (typeof exports === "object") {
        module2.exports = factory(require("punycode"), require_idna_map());
      } else {
        root.uts46 = factory(root.punycode, root.idna_map);
      }
    })(exports, function(punycode, idna_map) {
      function mapLabel(label, useStd3ASCII, transitional) {
        var mapped = [];
        var chars = punycode.ucs2.decode(label);
        for (var i = 0; i < chars.length; i++) {
          var cp = chars[i];
          var ch = punycode.ucs2.encode([chars[i]]);
          var composite = idna_map.mapChar(cp);
          var flags = composite >> 23;
          var kind = composite >> 21 & 3;
          var index = composite >> 5 & 65535;
          var length = composite & 31;
          var value = idna_map.mapStr.substr(index, length);
          if (kind === 0 || useStd3ASCII && flags & 1) {
            throw new Error("Illegal char " + ch);
          } else if (kind === 1) {
            mapped.push(value);
          } else if (kind === 2) {
            mapped.push(transitional ? value : ch);
          } else if (kind === 3) {
            mapped.push(ch);
          }
        }
        var newLabel = mapped.join("").normalize("NFC");
        return newLabel;
      }
      function process2(domain, transitional, useStd3ASCII) {
        if (useStd3ASCII === void 0)
          useStd3ASCII = false;
        var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);
        var labels = mappedIDNA.split(".");
        labels = labels.map(function(label) {
          if (label.startsWith("xn--")) {
            label = punycode.decode(label.substring(4));
            validateLabel(label, useStd3ASCII, false);
          } else {
            validateLabel(label, useStd3ASCII, transitional);
          }
          return label;
        });
        return labels.join(".");
      }
      function validateLabel(label, useStd3ASCII, transitional) {
        if (label[2] === "-" && label[3] === "-")
          throw new Error("Failed to validate " + label);
        if (label.startsWith("-") || label.endsWith("-"))
          throw new Error("Failed to validate " + label);
        if (label.includes("."))
          throw new Error("Failed to validate " + label);
        if (mapLabel(label, useStd3ASCII, transitional) !== label)
          throw new Error("Failed to validate " + label);
        var ch = label.codePointAt(0);
        if (idna_map.mapChar(ch) & 2 << 23)
          throw new Error("Label contains illegal character: " + ch);
      }
      function toAscii(domain, options) {
        if (options === void 0)
          options = {};
        var transitional = "transitional" in options ? options.transitional : true;
        var useStd3ASCII = "useStd3ASCII" in options ? options.useStd3ASCII : false;
        var verifyDnsLength = "verifyDnsLength" in options ? options.verifyDnsLength : false;
        var labels = process2(domain, transitional, useStd3ASCII).split(".");
        var asciiLabels = labels.map(punycode.toASCII);
        var asciiString = asciiLabels.join(".");
        var i;
        if (verifyDnsLength) {
          if (asciiString.length < 1 || asciiString.length > 253) {
            throw new Error("DNS name has wrong length: " + asciiString);
          }
          for (i = 0; i < asciiLabels.length; i++) {
            var label = asciiLabels[i];
            if (label.length < 1 || label.length > 63)
              throw new Error("DNS label has wrong length: " + label);
          }
        }
        return asciiString;
      }
      function toUnicode(domain, options) {
        if (options === void 0)
          options = {};
        var useStd3ASCII = "useStd3ASCII" in options ? options.useStd3ASCII : false;
        return process2(domain, false, useStd3ASCII);
      }
      return {
        toUnicode,
        toAscii
      };
    });
  }
});

// node_modules/eth-ens-namehash/index.js
var require_eth_ens_namehash = __commonJS({
  "node_modules/eth-ens-namehash/index.js"(exports) {
    init_cjs_shims();
    var sha3 = require_sha3().keccak_256;
    var uts46 = require_uts46();
    function namehash(inputName) {
      var node = "";
      for (var i = 0; i < 32; i++) {
        node += "00";
      }
      name = normalize(inputName);
      if (name) {
        var labels = name.split(".");
        for (var i = labels.length - 1; i >= 0; i--) {
          var labelSha = sha3(labels[i]);
          node = sha3(new Buffer(node + labelSha, "hex"));
        }
      }
      return "0x" + node;
    }
    function normalize(name2) {
      return name2 ? uts46.toUnicode(name2, { useStd3ASCII: true, transitional: false }) : name2;
    }
    exports.hash = namehash;
    exports.normalize = normalize;
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha32 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module2) {
    init_cjs_shims();
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n, s2) {
          return methods["cshake" + bits2].update(message, outputBits, n, s2)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key, message, outputBits, s2) {
          return methods["kmac" + bits2].update(key, message, outputBits, s2)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w2 = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits, n, s2) {
          if (!n && !s2) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding, outputBits).bytepad([n, s2], w2);
          }
        };
        method.update = function(message, outputBits, n, s2) {
          return method.create(outputBits, n, s2).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w2 = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding, "hex");
        method.create = function(key, outputBits, s2) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s2], w2).bytepad([key], w2);
        };
        method.update = function(key, message, outputBits, s2) {
          return method.create(key, outputBits, s2).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j2 = 0; j2 < bits.length; ++j2) {
          var methodName = algorithm.name + "_" + bits[j2];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j2], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j2];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s2[i2] ^= blocks[i2];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x2, right) {
        var o2 = x2 & 255, n = 1;
        var bytes = [o2];
        x2 = x2 >> 8;
        o2 = x2 & 255;
        while (o2 > 0) {
          bytes.unshift(o2);
          x2 = x2 >> 8;
          o2 = x2 & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w2) {
        var bytes = this.encode(w2);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w2 - bytes % w2;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s2[i2] ^= blocks[i2];
        }
        f2(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var hex = "", block;
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            block = s2[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j3 % blockCount === 0) {
            f2(s2);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            array[j3] = s2[i2];
          }
          if (j3 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          array[i2] = s2[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j3 = 0;
        var array = [], offset, block;
        while (j3 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
            offset = j3 << 2;
            block = s2[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j3 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j3 << 2;
          block = s2[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f2 = function(s2) {
        var h2, l2, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h2 = c8 ^ (c2 << 1 | c3 >>> 31);
          l2 = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h2;
          s2[1] ^= l2;
          s2[10] ^= h2;
          s2[11] ^= l2;
          s2[20] ^= h2;
          s2[21] ^= l2;
          s2[30] ^= h2;
          s2[31] ^= l2;
          s2[40] ^= h2;
          s2[41] ^= l2;
          h2 = c0 ^ (c4 << 1 | c5 >>> 31);
          l2 = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h2;
          s2[3] ^= l2;
          s2[12] ^= h2;
          s2[13] ^= l2;
          s2[22] ^= h2;
          s2[23] ^= l2;
          s2[32] ^= h2;
          s2[33] ^= l2;
          s2[42] ^= h2;
          s2[43] ^= l2;
          h2 = c2 ^ (c6 << 1 | c7 >>> 31);
          l2 = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h2;
          s2[5] ^= l2;
          s2[14] ^= h2;
          s2[15] ^= l2;
          s2[24] ^= h2;
          s2[25] ^= l2;
          s2[34] ^= h2;
          s2[35] ^= l2;
          s2[44] ^= h2;
          s2[45] ^= l2;
          h2 = c4 ^ (c8 << 1 | c9 >>> 31);
          l2 = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h2;
          s2[7] ^= l2;
          s2[16] ^= h2;
          s2[17] ^= l2;
          s2[26] ^= h2;
          s2[27] ^= l2;
          s2[36] ^= h2;
          s2[37] ^= l2;
          s2[46] ^= h2;
          s2[47] ^= l2;
          h2 = c6 ^ (c0 << 1 | c1 >>> 31);
          l2 = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h2;
          s2[9] ^= l2;
          s2[18] ^= h2;
          s2[19] ^= l2;
          s2[28] ^= h2;
          s2[29] ^= l2;
          s2[38] ^= h2;
          s2[39] ^= l2;
          s2[48] ^= h2;
          s2[49] ^= l2;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module2.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ensdomains/ensjs/dist/utils/labelhash.js
var require_labelhash = __commonJS({
  "node_modules/@ensdomains/ensjs/dist/utils/labelhash.js"(exports) {
    "use strict";
    init_cjs_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.encodeLabelhash = encodeLabelhash;
    exports.decodeLabelhash = decodeLabelhash;
    exports.isEncodedLabelhash = isEncodedLabelhash;
    exports.isDecrypted = isDecrypted;
    exports.labelhash = labelhash;
    var _ethEnsNamehash = require_eth_ens_namehash();
    var sha3 = require_sha32().keccak_256;
    function encodeLabelhash(hash) {
      if (!hash.startsWith("0x")) {
        throw new Error("Expected label hash to start with 0x");
      }
      if (hash.length !== 66) {
        throw new Error("Expected label hash to have a length of 66");
      }
      return "[".concat(hash.slice(2), "]");
    }
    function decodeLabelhash(hash) {
      if (!(hash.startsWith("[") && hash.endsWith("]"))) {
        throw Error("Expected encoded labelhash to start and end with square brackets");
      }
      if (hash.length !== 66) {
        throw Error("Expected encoded labelhash to have a length of 66");
      }
      return "".concat(hash.slice(1, -1));
    }
    function isEncodedLabelhash(hash) {
      return hash.startsWith("[") && hash.endsWith("]") && hash.length === 66;
    }
    function isDecrypted(name2) {
      var nameArray = name2.split(".");
      var decrypted = nameArray.reduce(function(acc, label) {
        if (acc === false)
          return false;
        return isEncodedLabelhash(label) ? false : true;
      }, true);
      return decrypted;
    }
    function labelhash(unnormalisedLabelOrLabelhash) {
      return isEncodedLabelhash(unnormalisedLabelOrLabelhash) ? "0x" + decodeLabelhash(unnormalisedLabelOrLabelhash) : "0x" + sha3((0, _ethEnsNamehash.normalize)(unnormalisedLabelOrLabelhash));
    }
  }
});

// node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/base-x/src/index.js"(exports, module2) {
    "use strict";
    init_cjs_shims();
    var _Buffer = require_safe_buffer().Buffer;
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
        BASE_MAP[j2] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x2 = ALPHABET.charAt(i);
        var xc = x2.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x2 + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode(source) {
        if (Array.isArray(source) || source instanceof Uint8Array) {
          source = _Buffer.from(source);
        }
        if (!_Buffer.isBuffer(source)) {
          throw new TypeError("Expected Buffer");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return _Buffer.alloc(0);
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
        vch.fill(0, 0, zeroes);
        var j3 = zeroes;
        while (it4 !== size) {
          vch[j3++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode,
        decodeUnsafe,
        decode
      };
    }
    module2.exports = base;
  }
});

// node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/bs58/index.js"(exports, module2) {
    init_cjs_shims();
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/@ensdomains/ensjs/dist/utils/contents.js
var require_contents = __commonJS({
  "node_modules/@ensdomains/ensjs/dist/utils/contents.js"(exports) {
    "use strict";
    init_cjs_shims();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.decodeContenthash = decodeContenthash;
    exports.validateContent = validateContent;
    exports.isValidContenthash = isValidContenthash;
    exports.encodeContenthash = encodeContenthash;
    var _contentHash = _interopRequireDefault(require("content-hash"));
    var _ethers = require("ethers");
    var _bs = _interopRequireDefault(require_bs58());
    var supportedCodecs = ["ipns-ns", "ipfs-ns", "swarm-ns", "onion", "onion3"];
    var utils = _ethers.ethers.utils;
    function decodeContenthash(encoded) {
      var decoded, protocolType, error;
      if (encoded.error) {
        return {
          protocolType: null,
          decoded: encoded.error
        };
      }
      if (encoded) {
        try {
          decoded = _contentHash["default"].decode(encoded);
          var codec = _contentHash["default"].getCodec(encoded);
          if (codec === "ipfs-ns") {
            protocolType = "ipfs";
          } else if (codec === "ipns-ns") {
            decoded = _bs["default"].decode(decoded).slice(2).toString();
            protocolType = "ipns";
          } else if (codec === "swarm-ns") {
            protocolType = "bzz";
          } else if (codec === "onion") {
            protocolType = "onion";
          } else if (codec === "onion3") {
            protocolType = "onion3";
          } else {
            decoded = encoded;
          }
        } catch (e) {
          error = e.message;
        }
      }
      return {
        protocolType,
        decoded,
        error
      };
    }
    function validateContent(encoded) {
      return _contentHash["default"].isHashOfType(encoded, _contentHash["default"].Types.ipfs) || _contentHash["default"].isHashOfType(encoded, _contentHash["default"].Types.swarm);
    }
    function isValidContenthash(encoded) {
      try {
        var codec = _contentHash["default"].getCodec(encoded);
        return utils.isHexString(encoded) && supportedCodecs.includes(codec);
      } catch (e) {
        console.log(e);
      }
    }
    function encodeContenthash(text) {
      var content, contentType;
      var encoded = false;
      if (!!text) {
        var matched = text.match(/^(ipfs|ipns|bzz|onion|onion3):\/\/(.*)/) || text.match(/\/(ipfs)\/(.*)/) || text.match(/\/(ipns)\/(.*)/);
        if (matched) {
          contentType = matched[1];
          content = matched[2];
        }
        try {
          if (contentType === "ipfs") {
            if (content.length >= 4) {
              encoded = "0x" + _contentHash["default"].encode("ipfs-ns", content);
            }
          } else if (contentType === "ipns") {
            var bs58content = _bs["default"].encode(Buffer.concat([Buffer.from([0, content.length]), Buffer.from(content)]));
            encoded = "0x" + _contentHash["default"].encode("ipns-ns", bs58content);
          } else if (contentType === "bzz") {
            if (content.length >= 4) {
              encoded = "0x" + _contentHash["default"].fromSwarm(content);
            }
          } else if (contentType === "onion") {
            if (content.length == 16) {
              encoded = "0x" + _contentHash["default"].encode("onion", content);
            }
          } else if (contentType === "onion3") {
            if (content.length == 56) {
              encoded = "0x" + _contentHash["default"].encode("onion3", content);
            }
          } else {
            console.warn("Unsupported protocol or invalid value", {
              contentType,
              text
            });
          }
        } catch (err) {
          console.warn("Error encoding content hash", {
            text,
            encoded
          });
        }
      }
      return encoded;
    }
  }
});

// node_modules/@ensdomains/ensjs/dist/utils/namehash.js
var require_namehash = __commonJS({
  "node_modules/@ensdomains/ensjs/dist/utils/namehash.js"(exports) {
    "use strict";
    init_cjs_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.namehash = namehash;
    var _labelhash = require_labelhash();
    var _ethEnsNamehash = require_eth_ens_namehash();
    var sha3 = require_sha32().keccak_256;
    function namehash(inputName) {
      var node = "";
      for (var i = 0; i < 32; i++) {
        node += "00";
      }
      if (inputName) {
        var labels = inputName.split(".");
        for (var _i = labels.length - 1; _i >= 0; _i--) {
          var labelSha = void 0;
          if ((0, _labelhash.isEncodedLabelhash)(labels[_i])) {
            labelSha = (0, _labelhash.decodeLabelhash)(labels[_i]);
          } else {
            var normalisedLabel = (0, _ethEnsNamehash.normalize)(labels[_i]);
            labelSha = sha3(normalisedLabel);
          }
          node = sha3(new Buffer(node + labelSha, "hex"));
        }
      }
      return "0x" + node;
    }
  }
});

// node_modules/@ensdomains/ensjs/dist/utils/index.js
var require_utils = __commonJS({
  "node_modules/@ensdomains/ensjs/dist/utils/index.js"(exports) {
    "use strict";
    init_cjs_shims();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getEnsStartBlock = getEnsStartBlock;
    exports.validateName = validateName;
    exports.isLabelValid = isLabelValid;
    Object.defineProperty(exports, "isEncodedLabelhash", {
      enumerable: true,
      get: function get() {
        return _labelhash.isEncodedLabelhash;
      }
    });
    Object.defineProperty(exports, "isDecrypted", {
      enumerable: true,
      get: function get() {
        return _labelhash.isDecrypted;
      }
    });
    Object.defineProperty(exports, "decodeLabelhash", {
      enumerable: true,
      get: function get() {
        return _labelhash.decodeLabelhash;
      }
    });
    Object.defineProperty(exports, "encodeLabelhash", {
      enumerable: true,
      get: function get() {
        return _labelhash.encodeLabelhash;
      }
    });
    Object.defineProperty(exports, "labelhash", {
      enumerable: true,
      get: function get() {
        return _labelhash.labelhash;
      }
    });
    Object.defineProperty(exports, "encodeContenthash", {
      enumerable: true,
      get: function get() {
        return _contents.encodeContenthash;
      }
    });
    Object.defineProperty(exports, "decodeContenthash", {
      enumerable: true,
      get: function get() {
        return _contents.decodeContenthash;
      }
    });
    Object.defineProperty(exports, "isValidContenthash", {
      enumerable: true,
      get: function get() {
        return _contents.isValidContenthash;
      }
    });
    Object.defineProperty(exports, "namehash", {
      enumerable: true,
      get: function get() {
        return _namehash.namehash;
      }
    });
    exports.parseSearchTerm = exports.mergeLabels = exports.checkLabels = exports.emptyAddress = exports.uniq = void 0;
    var _ethers = require("ethers");
    var _labelhash = require_labelhash();
    var _contents = require_contents();
    var _ethEnsNamehash = require_eth_ens_namehash();
    var _namehash = require_namehash();
    var uniq = function uniq2(a2, param) {
      return a2.filter(function(item, pos) {
        return a2.map(function(mapItem) {
          return mapItem[param];
        }).indexOf(item[param]) === pos;
      });
    };
    exports.uniq = uniq;
    var checkLabels = function checkLabels2() {
      for (var _len = arguments.length, labelHashes = new Array(_len), _key = 0; _key < _len; _key++) {
        labelHashes[_key] = arguments[_key];
      }
      return labelHashes.map(function(hash) {
        return null;
      });
    };
    exports.checkLabels = checkLabels;
    function getEnsStartBlock(networkId) {
      switch (networkId) {
        case 1:
        case "1":
          return 3327417;
        case 3:
        case "3":
          return 25409;
        default:
          return 0;
      }
    }
    var mergeLabels = function mergeLabels2(labels1, labels2) {
      return labels1.map(function(label, index) {
        return label ? label : labels2[index];
      });
    };
    exports.mergeLabels = mergeLabels;
    function validateName(name2) {
      var nameArray = name2.split(".");
      var hasEmptyLabels = nameArray.filter(function(e) {
        return e.length < 1;
      }).length > 0;
      if (hasEmptyLabels)
        throw new Error("Domain cannot have empty labels");
      var normalizedArray = nameArray.map(function(label) {
        return (0, _labelhash.isEncodedLabelhash)(label) ? label : (0, _ethEnsNamehash.normalize)(label);
      });
      try {
        return normalizedArray.join(".");
      } catch (e) {
        throw e;
      }
    }
    function isLabelValid(name2) {
      try {
        validateName(name2);
        if (name2.indexOf(".") === -1) {
          return true;
        }
      } catch (e) {
        console.log(e);
        return false;
      }
    }
    var parseSearchTerm = function parseSearchTerm2(term, validTld) {
      var regex = /[^.]+$/;
      try {
        validateName(term);
      } catch (e) {
        return "invalid";
      }
      if (term.indexOf(".") !== -1) {
        var termArray = term.split(".");
        var tld = term.match(regex) ? term.match(regex)[0] : "";
        if (validTld) {
          if (tld === "eth" && termArray[termArray.length - 2].length < 3) {
            return "short";
          }
          return "supported";
        }
        return "unsupported";
      } else if (_ethers.ethers.utils.isAddress(term)) {
        return "address";
      } else {
        if (validTld) {
          return "tld";
        }
        return "search";
      }
    };
    exports.parseSearchTerm = parseSearchTerm;
    var emptyAddress = "0x0000000000000000000000000000000000000000";
    exports.emptyAddress = emptyAddress;
  }
});

// node_modules/@ensdomains/ensjs/dist/index.js
var require_dist = __commonJS({
  "node_modules/@ensdomains/ensjs/dist/index.js"(exports) {
    "use strict";
    init_cjs_shims();
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getENSContract = getENSContract;
    exports.getResolverContract = getResolverContract;
    exports.getEnsAddress = getEnsAddress2;
    Object.defineProperty(exports, "namehash", {
      enumerable: true,
      get: function get() {
        return _utils.namehash;
      }
    });
    Object.defineProperty(exports, "labelhash", {
      enumerable: true,
      get: function get() {
        return _utils.labelhash;
      }
    });
    exports["default"] = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _classCallCheck2 = _interopRequireDefault(require_classCallCheck());
    var _createClass2 = _interopRequireDefault(require_createClass());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _ethers = require("ethers");
    var _addressEncoder = (init_index_module(), __toCommonJS(index_module_exports));
    var _ENS = require_ENS();
    var _Resolver5 = require_Resolver();
    var _ReverseRegistrar = require_ReverseRegistrar();
    var _utils = require_utils();
    var _contents = require_contents();
    var Provider = _ethers.ethers.providers.Provider;
    var utils = _ethers.ethers.utils;
    function getEnsAddress2(networkId) {
      if ([1, 3, 4, 5].includes(parseInt(networkId))) {
        return "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
      }
    }
    function getResolverContract(_ref) {
      var address = _ref.address, provider = _ref.provider;
      return new _ethers.ethers.Contract(address, _Resolver5.abi, provider);
    }
    function getENSContract(_ref2) {
      var address = _ref2.address, provider = _ref2.provider;
      return new _ethers.ethers.Contract(address, _ENS.abi, provider);
    }
    function getReverseRegistrarContract(_ref3) {
      var address = _ref3.address, provider = _ref3.provider;
      return new _ethers.ethers.Contract(address, _ReverseRegistrar.abi, provider);
    }
    function getAddrWithResolver(_x) {
      return _getAddrWithResolver.apply(this, arguments);
    }
    function _getAddrWithResolver() {
      _getAddrWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee20(_ref4) {
        var name2, key, resolverAddr, provider, nh, _Resolver2, _formatsByName$key, coinType, encoder, addr;
        return _regenerator["default"].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                name2 = _ref4.name, key = _ref4.key, resolverAddr = _ref4.resolverAddr, provider = _ref4.provider;
                nh = (0, _utils.namehash)(name2);
                _context20.prev = 2;
                _Resolver2 = getResolverContract({
                  address: resolverAddr,
                  provider
                });
                _formatsByName$key = _addressEncoder.formatsByName[key], coinType = _formatsByName$key.coinType, encoder = _formatsByName$key.encoder;
                _context20.next = 7;
                return _Resolver2["addr(bytes32,uint256)"](nh, coinType);
              case 7:
                addr = _context20.sent;
                if (!(addr === "0x")) {
                  _context20.next = 10;
                  break;
                }
                return _context20.abrupt("return", _utils.emptyAddress);
              case 10:
                return _context20.abrupt("return", encoder(Buffer.from(addr.slice(2), "hex")));
              case 13:
                _context20.prev = 13;
                _context20.t0 = _context20["catch"](2);
                console.log(_context20.t0);
                console.warn("Error getting addr on the resolver contract, are you sure the resolver address is a resolver contract?");
                return _context20.abrupt("return", _utils.emptyAddress);
              case 18:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, null, [[2, 13]]);
      }));
      return _getAddrWithResolver.apply(this, arguments);
    }
    function setAddrWithResolver(_x2) {
      return _setAddrWithResolver.apply(this, arguments);
    }
    function _setAddrWithResolver() {
      _setAddrWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee21(_ref5) {
        var name2, key, address, resolverAddr, signer, nh, Resolver3, _formatsByName$key2, decoder, coinType, addressAsBytes;
        return _regenerator["default"].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                name2 = _ref5.name, key = _ref5.key, address = _ref5.address, resolverAddr = _ref5.resolverAddr, signer = _ref5.signer;
                nh = (0, _utils.namehash)(name2);
                Resolver3 = getResolverContract({
                  address: resolverAddr,
                  provider: signer
                });
                _formatsByName$key2 = _addressEncoder.formatsByName[key], decoder = _formatsByName$key2.decoder, coinType = _formatsByName$key2.coinType;
                if (!address || address === "") {
                  addressAsBytes = Buffer.from("");
                } else {
                  addressAsBytes = decoder(address);
                }
                return _context21.abrupt("return", Resolver3["setAddr(bytes32,uint256,bytes)"](nh, coinType, addressAsBytes));
              case 6:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21);
      }));
      return _setAddrWithResolver.apply(this, arguments);
    }
    function getContentWithResolver(_x3) {
      return _getContentWithResolver.apply(this, arguments);
    }
    function _getContentWithResolver() {
      _getContentWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee22(_ref6) {
        var name2, resolverAddr, provider, nh, _Resolver3, contentHashSignature, isContentHashSupported, _decodeContenthash, protocolType, decoded, error, value, message;
        return _regenerator["default"].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                name2 = _ref6.name, resolverAddr = _ref6.resolverAddr, provider = _ref6.provider;
                nh = (0, _utils.namehash)(name2);
                if (!(parseInt(resolverAddr, 16) === 0)) {
                  _context22.next = 4;
                  break;
                }
                return _context22.abrupt("return", _utils.emptyAddress);
              case 4:
                _context22.prev = 4;
                _Resolver3 = getResolverContract({
                  address: resolverAddr,
                  provider
                });
                contentHashSignature = utils.solidityKeccak256(["string"], ["contenthash(bytes32)"]).slice(0, 10);
                _context22.next = 9;
                return _Resolver3.supportsInterface(contentHashSignature);
              case 9:
                isContentHashSupported = _context22.sent;
                if (!isContentHashSupported) {
                  _context22.next = 25;
                  break;
                }
                _context22.t0 = _contents.decodeContenthash;
                _context22.next = 14;
                return _Resolver3.contenthash(nh);
              case 14:
                _context22.t1 = _context22.sent;
                _decodeContenthash = (0, _context22.t0)(_context22.t1);
                protocolType = _decodeContenthash.protocolType;
                decoded = _decodeContenthash.decoded;
                error = _decodeContenthash.error;
                if (!error) {
                  _context22.next = 22;
                  break;
                }
                console.log("error decoding", error);
                return _context22.abrupt("return", {
                  value: _utils.emptyAddress,
                  contentType: "contenthash"
                });
              case 22:
                return _context22.abrupt("return", {
                  value: "".concat(protocolType, "://").concat(decoded),
                  contentType: "contenthash"
                });
              case 25:
                _context22.next = 27;
                return _Resolver3.content(nh);
              case 27:
                value = _context22.sent;
                return _context22.abrupt("return", {
                  value,
                  contentType: "oldcontent"
                });
              case 29:
                _context22.next = 36;
                break;
              case 31:
                _context22.prev = 31;
                _context22.t2 = _context22["catch"](4);
                message = "Error getting content on the resolver contract, are you sure the resolver address is a resolver contract?";
                console.warn(message, _context22.t2);
                return _context22.abrupt("return", {
                  value: message,
                  contentType: "error"
                });
              case 36:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, null, [[4, 31]]);
      }));
      return _getContentWithResolver.apply(this, arguments);
    }
    function setContenthashWithResolver(_x4) {
      return _setContenthashWithResolver.apply(this, arguments);
    }
    function _setContenthashWithResolver() {
      _setContenthashWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee23(_ref7) {
        var name2, content, resolverAddr, signer, encodedContenthash, Resolver3;
        return _regenerator["default"].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                name2 = _ref7.name, content = _ref7.content, resolverAddr = _ref7.resolverAddr, signer = _ref7.signer;
                encodedContenthash = content;
                if (parseInt(content, 16) !== 0) {
                  encodedContenthash = (0, _contents.encodeContenthash)(content);
                }
                Resolver3 = getResolverContract({
                  address: resolverAddr,
                  provider: signer
                });
                return _context23.abrupt("return", Resolver3.setContenthash((0, _utils.namehash)(name2), encodedContenthash));
              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23);
      }));
      return _setContenthashWithResolver.apply(this, arguments);
    }
    function getTextWithResolver(_x5) {
      return _getTextWithResolver.apply(this, arguments);
    }
    function _getTextWithResolver() {
      _getTextWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee24(_ref8) {
        var name2, key, resolverAddr, provider, nh, _Resolver4, addr;
        return _regenerator["default"].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                name2 = _ref8.name, key = _ref8.key, resolverAddr = _ref8.resolverAddr, provider = _ref8.provider;
                nh = (0, _utils.namehash)(name2);
                if (!(parseInt(resolverAddr, 16) === 0)) {
                  _context24.next = 4;
                  break;
                }
                return _context24.abrupt("return", "");
              case 4:
                _context24.prev = 4;
                _Resolver4 = getResolverContract({
                  address: resolverAddr,
                  provider
                });
                _context24.next = 8;
                return _Resolver4.text(nh, key);
              case 8:
                addr = _context24.sent;
                return _context24.abrupt("return", addr);
              case 12:
                _context24.prev = 12;
                _context24.t0 = _context24["catch"](4);
                console.warn("Error getting text record on the resolver contract, are you sure the resolver address is a resolver contract?");
                return _context24.abrupt("return", "");
              case 16:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, null, [[4, 12]]);
      }));
      return _getTextWithResolver.apply(this, arguments);
    }
    function setTextWithResolver(_x6) {
      return _setTextWithResolver.apply(this, arguments);
    }
    function _setTextWithResolver() {
      _setTextWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee25(_ref9) {
        var name2, key, recordValue, resolverAddr, signer, nh;
        return _regenerator["default"].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                name2 = _ref9.name, key = _ref9.key, recordValue = _ref9.recordValue, resolverAddr = _ref9.resolverAddr, signer = _ref9.signer;
                nh = (0, _utils.namehash)(name2);
                return _context25.abrupt("return", getResolverContract({
                  address: resolverAddr,
                  provider: signer
                }).setText(nh, key, recordValue));
              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25);
      }));
      return _setTextWithResolver.apply(this, arguments);
    }
    var Resolver2 = /* @__PURE__ */ function() {
      function Resolver3(_ref10) {
        var address = _ref10.address, ens = _ref10.ens;
        (0, _classCallCheck2["default"])(this, Resolver3);
        this.address = address;
        this.ens = ens;
      }
      (0, _createClass2["default"])(Resolver3, [{
        key: "name",
        value: function name2(_name) {
          return new Name({
            name: _name,
            ens: this.ens,
            provider: this.provider,
            signer: this.signer,
            resolver: this.address
          });
        }
      }]);
      return Resolver3;
    }();
    var Name = /* @__PURE__ */ function() {
      function Name2(options) {
        (0, _classCallCheck2["default"])(this, Name2);
        var name2 = options.name, ens = options.ens, provider = options.provider, signer = options.signer, nh = options.namehash, resolver2 = options.resolver;
        if (options.namehash) {
          this.namehash = nh;
        }
        this.ens = ens;
        this.ensWithSigner = this.ens.connect(signer);
        this.name = name2;
        this.namehash = (0, _utils.namehash)(name2);
        this.provider = provider;
        this.signer = signer;
        this.resolver = resolver2;
      }
      (0, _createClass2["default"])(Name2, [{
        key: "getOwner",
        value: function() {
          var _getOwner = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee() {
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", this.ens.owner(this.namehash));
                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          function getOwner() {
            return _getOwner.apply(this, arguments);
          }
          return getOwner;
        }()
      }, {
        key: "setOwner",
        value: function() {
          var _setOwner = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee2(address) {
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (address) {
                      _context2.next = 2;
                      break;
                    }
                    throw new Error("No newOwner address provided!");
                  case 2:
                    return _context2.abrupt("return", this.ensWithSigner.setOwner(this.namehash, address));
                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));
          function setOwner(_x7) {
            return _setOwner.apply(this, arguments);
          }
          return setOwner;
        }()
      }, {
        key: "getResolver",
        value: function() {
          var _getResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee3() {
            return _regenerator["default"].wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    return _context3.abrupt("return", this.ens.resolver(this.namehash));
                  case 1:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));
          function getResolver() {
            return _getResolver.apply(this, arguments);
          }
          return getResolver;
        }()
      }, {
        key: "setResolver",
        value: function() {
          var _setResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee4(address) {
            return _regenerator["default"].wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (address) {
                      _context4.next = 2;
                      break;
                    }
                    throw new Error("No resolver address provided!");
                  case 2:
                    return _context4.abrupt("return", this.ensWithSigner.setResolver(this.namehash, address));
                  case 3:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));
          function setResolver(_x8) {
            return _setResolver.apply(this, arguments);
          }
          return setResolver;
        }()
      }, {
        key: "getTTL",
        value: function() {
          var _getTTL = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee5() {
            return _regenerator["default"].wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    return _context5.abrupt("return", this.ens.ttl(this.namehash));
                  case 1:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));
          function getTTL() {
            return _getTTL.apply(this, arguments);
          }
          return getTTL;
        }()
      }, {
        key: "getResolverAddr",
        value: function() {
          var _getResolverAddr = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee6() {
            return _regenerator["default"].wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    if (!this.resolver) {
                      _context6.next = 4;
                      break;
                    }
                    return _context6.abrupt("return", this.resolver);
                  case 4:
                    return _context6.abrupt("return", this.getResolver());
                  case 5:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));
          function getResolverAddr() {
            return _getResolverAddr.apply(this, arguments);
          }
          return getResolverAddr;
        }()
      }, {
        key: "getAddress",
        value: function() {
          var _getAddress = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee7(coinId) {
            var resolverAddr, Resolver3;
            return _regenerator["default"].wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.next = 2;
                    return this.getResolverAddr();
                  case 2:
                    resolverAddr = _context7.sent;
                    if (!(parseInt(resolverAddr, 16) === 0)) {
                      _context7.next = 5;
                      break;
                    }
                    return _context7.abrupt("return", _utils.emptyAddress);
                  case 5:
                    Resolver3 = getResolverContract({
                      address: resolverAddr,
                      provider: this.provider
                    });
                    if (coinId) {
                      _context7.next = 8;
                      break;
                    }
                    return _context7.abrupt("return", Resolver3["addr(bytes32)"](this.namehash));
                  case 8:
                    return _context7.abrupt("return", getAddrWithResolver({
                      name: this.name,
                      key: coinId,
                      resolverAddr,
                      provider: this.provider
                    }));
                  case 9:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));
          function getAddress(_x9) {
            return _getAddress.apply(this, arguments);
          }
          return getAddress;
        }()
      }, {
        key: "setAddress",
        value: function() {
          var _setAddress = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee8(key, address) {
            var resolverAddr;
            return _regenerator["default"].wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    if (key) {
                      _context8.next = 2;
                      break;
                    }
                    throw new Error("No coinId provided");
                  case 2:
                    if (address) {
                      _context8.next = 4;
                      break;
                    }
                    throw new Error("No address provided");
                  case 4:
                    _context8.next = 6;
                    return this.getResolverAddr();
                  case 6:
                    resolverAddr = _context8.sent;
                    return _context8.abrupt("return", setAddrWithResolver({
                      name: this.name,
                      key,
                      address,
                      resolverAddr,
                      signer: this.signer
                    }));
                  case 8:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));
          function setAddress(_x10, _x11) {
            return _setAddress.apply(this, arguments);
          }
          return setAddress;
        }()
      }, {
        key: "getContent",
        value: function() {
          var _getContent = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee9() {
            var resolverAddr;
            return _regenerator["default"].wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _context9.next = 2;
                    return this.getResolverAddr();
                  case 2:
                    resolverAddr = _context9.sent;
                    return _context9.abrupt("return", getContentWithResolver({
                      name: this.name,
                      resolverAddr,
                      provider: this.provider
                    }));
                  case 4:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9, this);
          }));
          function getContent() {
            return _getContent.apply(this, arguments);
          }
          return getContent;
        }()
      }, {
        key: "setContenthash",
        value: function() {
          var _setContenthash = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee10(content) {
            var resolverAddr;
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return this.getResolverAddr();
                  case 2:
                    resolverAddr = _context10.sent;
                    console.log(content);
                    return _context10.abrupt("return", setContenthashWithResolver({
                      name: this.name,
                      content,
                      resolverAddr,
                      signer: this.signer
                    }));
                  case 5:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));
          function setContenthash(_x12) {
            return _setContenthash.apply(this, arguments);
          }
          return setContenthash;
        }()
      }, {
        key: "getText",
        value: function() {
          var _getText = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee11(key) {
            var resolverAddr;
            return _regenerator["default"].wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    _context11.next = 2;
                    return this.getResolverAddr();
                  case 2:
                    resolverAddr = _context11.sent;
                    return _context11.abrupt("return", getTextWithResolver({
                      name: this.name,
                      key,
                      resolverAddr,
                      provider: this.provider
                    }));
                  case 4:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));
          function getText(_x13) {
            return _getText.apply(this, arguments);
          }
          return getText;
        }()
      }, {
        key: "setText",
        value: function() {
          var _setText = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee12(key, recordValue) {
            var resolverAddr;
            return _regenerator["default"].wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _context12.next = 2;
                    return this.getResolverAddr();
                  case 2:
                    resolverAddr = _context12.sent;
                    return _context12.abrupt("return", setTextWithResolver({
                      name: this.name,
                      key,
                      recordValue,
                      resolverAddr,
                      signer: this.signer
                    }));
                  case 4:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));
          function setText(_x14, _x15) {
            return _setText.apply(this, arguments);
          }
          return setText;
        }()
      }, {
        key: "setSubnodeOwner",
        value: function() {
          var _setSubnodeOwner = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee13(label, newOwner) {
            var lh;
            return _regenerator["default"].wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    lh = (0, _utils.labelhash)(label);
                    return _context13.abrupt("return", this.ensWithSigner.setSubnodeOwner(this.namehash, lh, newOwner));
                  case 2:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));
          function setSubnodeOwner(_x16, _x17) {
            return _setSubnodeOwner.apply(this, arguments);
          }
          return setSubnodeOwner;
        }()
      }, {
        key: "setSubnodeRecord",
        value: function() {
          var _setSubnodeRecord = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee14(label, newOwner, resolver2) {
            var ttl, lh, _args14 = arguments;
            return _regenerator["default"].wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    ttl = _args14.length > 3 && _args14[3] !== void 0 ? _args14[3] : 0;
                    lh = (0, _utils.labelhash)(label);
                    return _context14.abrupt("return", this.ensWithSigner.setSubnodeRecord(this.namehash, lh, newOwner, resolver2, ttl));
                  case 3:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14, this);
          }));
          function setSubnodeRecord(_x18, _x19, _x20) {
            return _setSubnodeRecord.apply(this, arguments);
          }
          return setSubnodeRecord;
        }()
      }, {
        key: "createSubdomain",
        value: function() {
          var _createSubdomain = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee15(label) {
            var resolverPromise, ownerPromise, _ref11, _ref12, resolver2, owner;
            return _regenerator["default"].wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    resolverPromise = this.getResolver();
                    ownerPromise = this.getOwner();
                    _context15.next = 4;
                    return Promise.all([resolverPromise, ownerPromise]);
                  case 4:
                    _ref11 = _context15.sent;
                    _ref12 = (0, _slicedToArray2["default"])(_ref11, 2);
                    resolver2 = _ref12[0];
                    owner = _ref12[1];
                    return _context15.abrupt("return", this.setSubnodeRecord(label, owner, resolver2));
                  case 9:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this);
          }));
          function createSubdomain(_x21) {
            return _createSubdomain.apply(this, arguments);
          }
          return createSubdomain;
        }()
      }, {
        key: "deleteSubdomain",
        value: function() {
          var _deleteSubdomain = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee16(label) {
            return _regenerator["default"].wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    return _context16.abrupt("return", this.setSubnodeRecord(label, _utils.emptyAddress, _utils.emptyAddress));
                  case 1:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16, this);
          }));
          function deleteSubdomain(_x22) {
            return _deleteSubdomain.apply(this, arguments);
          }
          return deleteSubdomain;
        }()
      }]);
      return Name2;
    }();
    var ENS2 = /* @__PURE__ */ function() {
      function ENS3(options) {
        (0, _classCallCheck2["default"])(this, ENS3);
        var networkId = options.networkId, provider = options.provider, ensAddress = options.ensAddress;
        var ethersProvider;
        if (Provider.isProvider(provider)) {
          ethersProvider = provider;
        } else {
          ethersProvider = new _ethers.ethers.providers.Web3Provider(provider);
        }
        this.provider = ethersProvider;
        this.signer = ethersProvider.getSigner();
        this.ens = getENSContract({
          address: ensAddress ? ensAddress : registries[networkId],
          provider: ethersProvider
        });
      }
      (0, _createClass2["default"])(ENS3, [{
        key: "name",
        value: function name2(_name2) {
          return new Name({
            name: _name2,
            ens: this.ens,
            provider: this.provider,
            signer: this.signer
          });
        }
      }, {
        key: "resolver",
        value: function resolver2(address) {
          return new Resolver2({
            ens: this.ens,
            provider: this.provider,
            address
          });
        }
      }, {
        key: "getName",
        value: function() {
          var _getName = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee17(address) {
            var reverseNode, resolverAddr;
            return _regenerator["default"].wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    reverseNode = "".concat(address.slice(2), ".addr.reverse");
                    _context17.next = 3;
                    return this.ens.resolver((0, _utils.namehash)(reverseNode));
                  case 3:
                    resolverAddr = _context17.sent;
                    return _context17.abrupt("return", this.getNameWithResolver(address, resolverAddr));
                  case 5:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17, this);
          }));
          function getName(_x23) {
            return _getName.apply(this, arguments);
          }
          return getName;
        }()
      }, {
        key: "getNameWithResolver",
        value: function() {
          var _getNameWithResolver = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee18(address, resolverAddr) {
            var reverseNode, reverseNamehash, _Resolver, name2;
            return _regenerator["default"].wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    reverseNode = "".concat(address.slice(2), ".addr.reverse");
                    reverseNamehash = (0, _utils.namehash)(reverseNode);
                    if (!(parseInt(resolverAddr, 16) === 0)) {
                      _context18.next = 4;
                      break;
                    }
                    return _context18.abrupt("return", {
                      name: null
                    });
                  case 4:
                    _context18.prev = 4;
                    _Resolver = getResolverContract({
                      address: resolverAddr,
                      provider: this.provider
                    });
                    _context18.next = 8;
                    return _Resolver.name(reverseNamehash);
                  case 8:
                    name2 = _context18.sent;
                    return _context18.abrupt("return", {
                      name: name2
                    });
                  case 12:
                    _context18.prev = 12;
                    _context18.t0 = _context18["catch"](4);
                    console.log("Error getting name for reverse record of ".concat(address), _context18.t0);
                  case 15:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18, this, [[4, 12]]);
          }));
          function getNameWithResolver(_x24, _x25) {
            return _getNameWithResolver.apply(this, arguments);
          }
          return getNameWithResolver;
        }()
      }, {
        key: "setReverseRecord",
        value: function() {
          var _setReverseRecord = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ _regenerator["default"].mark(function _callee19(name2, overrides) {
            var reverseRegistrarAddr, reverseRegistrar;
            return _regenerator["default"].wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    _context19.next = 2;
                    return this.name("addr.reverse").getOwner("addr.reverse");
                  case 2:
                    reverseRegistrarAddr = _context19.sent;
                    reverseRegistrar = getReverseRegistrarContract({
                      address: reverseRegistrarAddr,
                      provider: this.signer
                    });
                    return _context19.abrupt("return", reverseRegistrar.setName(name2));
                  case 5:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19, this);
          }));
          function setReverseRecord(_x26, _x27) {
            return _setReverseRecord.apply(this, arguments);
          }
          return setReverseRecord;
        }()
      }]);
      return ENS3;
    }();
    exports["default"] = ENS2;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Resolver: () => Resolver,
  default: () => src_default
});
init_cjs_shims();

// src/Resolver.ts
init_cjs_shims();
var Resolver = class {
  _resolvers = [];
  _portals = [];
  async resolve(input, params = []) {
    for (let resolver2 of this._resolvers) {
      let result = await resolver2.resolve(input, params);
      if (result) {
        return result;
      }
    }
    return false;
  }
  registerResolver(resolver2) {
    this._resolvers.push(resolver2);
  }
  registerPortal(hostname) {
    this._portals.push(hostname);
  }
  set portals(value) {
    this._portals = value;
  }
  getPortal() {
    return this._portals[Math.floor(Math.random() * (1 + this._portals.length - 1))];
  }
};

// src/resolvers/handshake.ts
init_cjs_shims();

// src/lib/util.ts
init_cjs_shims();
function isIp(ip) {
  return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip);
}
function isDomain(domain) {
  return /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/.test(domain);
}
var startsWithSkylinkRegExp = /^(sia:\/\/)?([a-zA-Z0-9_-]{46})/;
var registryEntryRegExp = /^skyns:\/\/(?<publickey>[a-zA-Z0-9%]+)\/(?<datakey>[a-zA-Z0-9%]+)$/;

// src/resolvers/handshake/HnsClient.ts
init_cjs_shims();
var import_path = require("path");
var import_brq = __toESM(require_brq(), 1);
var import_assert = __toESM(require("assert"), 1);
var import_hs_client = require("@lumeweb/hs-client");
var HnsClient = class extends import_hs_client.NodeClient {
  constructor(options) {
    super(options);
  }
  async execute(name2, params) {
    var _a;
    (0, import_assert.default)(typeof name2 === "string");
    (0, import_assert.default)(Array.isArray(params));
    this.sequence += 1;
    const res = await (0, import_brq.default)({
      method: "POST",
      ssl: true,
      strictSSL: this.strictSSL,
      host: this.host,
      port: this.port,
      path: import_path.posix.join(this.path, "/rpc"),
      username: this.username,
      password: this.password,
      headers: this.headers,
      timeout: this.timeout,
      limit: this.limit,
      pool: true,
      query: {
        chain: (_a = this.headers["X-Chain"]) != null ? _a : "hns"
      },
      json: {
        jsonrpc: "2.0",
        method: name2,
        params,
        chain: "hns",
        id: this.sequence
      }
    });
    if (res.statusCode === 401) {
      throw new RPCError("Unauthorized (bad API key).", -1);
    }
    if (res.type !== "json") {
      throw new Error("Bad response (wrong content-type).");
    }
    const json = res.json();
    if (!json) {
      throw new Error("No body for JSON-RPC response.");
    }
    if (json.error) {
      const { message, code } = json.error;
      throw new RPCError(message, code);
    }
    if (res.statusCode !== 200) {
      throw new Error(`Status code: ${res.statusCode}.`);
    }
    return json;
  }
};
var RPCError = class extends Error {
  constructor(msg, code) {
    super();
    this.type = "RPCError";
    this.message = String(msg);
    this.code = code >> 0;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, RPCError);
    }
  }
};

// src/resolvers/handshake.ts
var import_skynet_js = require("skynet-js");
var Handshake = class {
  async resolve(input, params = {}) {
    let tld = input;
    if (isIp(input)) {
      return false;
    }
    if (input.endsWith(".eth")) {
      return false;
    }
    if (input.includes(".")) {
      tld = input.split(".")[input.split(".").length - 1];
    }
    let records = await Handshake.query(tld);
    if (!records) {
      return false;
    }
    let result = false;
    for (let record of records.reverse()) {
      switch (record.type) {
        case "NS": {
          result = await Handshake.processNs(input, record, records);
          break;
        }
        case "TXT": {
          result = await Handshake.processTxt(record);
          break;
        }
        default: {
          break;
        }
      }
      if (result) {
        break;
      }
    }
    return result;
  }
  static async processNs(domain, record, records) {
    let glue = records.slice().find((item) => ["GLUE4", "GLUE6"].includes(item.type) && item.ns === record.ns);
    if (glue) {
      return src_default.resolve(glue.address, { subquery: true, domain });
    }
    if (isDomain(record.ns)) {
      return src_default.resolve(record.ns, { subquery: true });
    }
    let result = await src_default.resolve(record.ns, { domain });
    return result || record.ns;
  }
  static async query(tld) {
    var _a;
    const portal = src_default.getPortal();
    const clientOptions = {
      ssl: true,
      network: "main",
      host: portal,
      port: 443,
      headers: {
        "X-Chain": "hns"
      }
    };
    const client = new HnsClient(clientOptions);
    let resp;
    try {
      resp = await client.execute("getnameresource", [tld]);
    } catch (e) {
      console.error(e);
      return false;
    }
    return ((_a = resp == null ? void 0 : resp.result) == null ? void 0 : _a.records) || [];
  }
  static async processTxt(record) {
    var _a;
    let matches;
    if (matches = record.txt.slice().pop().match(startsWithSkylinkRegExp)) {
      return decodeURIComponent(matches[2]);
    }
    if (matches = record.txt.slice().pop().match(registryEntryRegExp)) {
      const client = new import_skynet_js.SkynetClient(`https://${src_default.getPortal()}`);
      let pubKey = decodeURIComponent(matches.groups.publickey).replace("ed25519:", "");
      let entry = await client.registry.getEntry(pubKey, matches.groups.datakey, { hashedDataKeyHex: true });
      return Buffer.from((_a = entry.entry) == null ? void 0 : _a.data).toString();
    }
    return false;
  }
};

// src/resolvers/icann.ts
init_cjs_shims();
var import_hs_client2 = require("@lumeweb/hs-client");
var Icann = class {
  async resolve(input, params = {}) {
    if (!params || !("subquery" in params) || !params.subquery) {
      return false;
    }
    if (!isDomain(input)) {
      return false;
    }
    const portal = src_default.getPortal();
    const clientOptions = {
      ssl: true,
      host: portal,
      port: 443,
      path: "/pocketdns",
      headers: {
        "X-Chain": "icann"
      }
    };
    const client = new import_hs_client2.NodeClient(clientOptions);
    let resp = false;
    try {
      let rpcParams = {};
      rpcParams.domain = params.domain || input;
      rpcParams.nameserver = !params.domain ? null : input;
      resp = await client.execute("dnslookup", rpcParams);
    } catch (e) {
      console.error(e);
      return false;
    }
    return resp.result;
  }
};

// src/resolvers/eip137.ts
init_cjs_shims();
var import_ensjs = __toESM(require_dist(), 1);
var import_ethers = require("ethers");
var URL2 = __toESM(require("url"), 1);
var ENS = import_ensjs.default.default;
var Eip137 = class {
  async resolve(input, params = {}) {
    if (input.endsWith(".eth")) {
      return await this.resolveEns(input);
    }
    let hip5Data = input.split(".");
    if (2 <= hip5Data.length && "domain" in params) {
      if (import_ethers.ethers.utils.isAddress(hip5Data[0])) {
        return await this.resolveHip5(params.domain, hip5Data);
      }
    }
    return false;
  }
  async resolveEns(input) {
    let data = [(0, import_ensjs.getEnsAddress)("1"), "eth-mainnet"];
    return this.resolveHip5(input, data);
  }
  async resolveHip5(domain, data) {
    let connection = this.getConnection(data[1].replace("_", ""));
    const ens = new ENS({ provider: connection, ensAddress: data[0] });
    try {
      let name2 = await ens.name(domain);
      let contentResult = await name2.getContent();
      let url = await name2.getText("url");
      let content;
      if (typeof contentResult === "string" && Number(contentResult) === 0) {
        content = false;
      }
      if (typeof contentResult === "object" && contentResult.contentType === "contenthash") {
        content = contentResult.value;
      }
      return content || url || false;
    } catch (e) {
      console.log(e);
      return false;
    }
  }
  getConnection(chain) {
    let apiUrl = URL2.parse(`https://${src_default.getPortal()}/pocketdns`);
    if (URL2.URLSearchParams) {
      let params = new URL2.URLSearchParams();
      params.set("chain", chain);
      apiUrl.search = params.toString();
    } else {
      apiUrl.search = `?chain=${chain}`;
    }
    return new import_ethers.ethers.providers.StaticJsonRpcProvider({
      url: apiUrl.format()
    });
  }
};

// src/index.ts
var resolver = new Resolver();
resolver.registerResolver(new Icann());
resolver.registerResolver(new Eip137());
resolver.registerResolver(new Handshake());
var src_default = resolver;
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Resolver
});
/*!
 * assert.js - assertions for javascript
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bsert
 */
/*!
 * brq.js - simple request module
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*!
 * mime.js - mime types for brq
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*!
 * request.js - http request for brq
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
//# sourceMappingURL=index.cjs.map