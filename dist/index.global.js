(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value) =>
    key2 in obj
      ? __defProp(obj, key2, {
          enumerable: true,
          configurable: true,
          writable: true,
          value,
        })
      : (obj[key2] = value);
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop)) __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop)) __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
  var __markAsModule = (target) =>
    __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x2) =>
    typeof require !== "undefined"
      ? require
      : typeof Proxy !== "undefined"
      ? new Proxy(x2, {
          get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2],
        })
      : x2)(function (x2) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __esm = (fn, res) =>
    function __init() {
      return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
    };
  var __commonJS = (cb, mod) =>
    function __require2() {
      return (
        mod ||
          (0, cb[__getOwnPropNames(cb)[0]])(
            (mod = { exports: {} }).exports,
            mod
          ),
        mod.exports
      );
    };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (
      (module && typeof module === "object") ||
      typeof module === "function"
    ) {
      for (let key2 of __getOwnPropNames(module))
        if (
          !__hasOwnProp.call(target, key2) &&
          (copyDefault || key2 !== "default")
        )
          __defProp(target, key2, {
            get: () => module[key2],
            enumerable:
              !(desc = __getOwnPropDesc(module, key2)) || desc.enumerable,
          });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(
      __markAsModule(
        __defProp(
          module != null ? __create(__getProtoOf(module)) : {},
          "default",
          !isNodeMode && module && module.__esModule
            ? { get: () => module.default, enumerable: true }
            : { value: module, enumerable: true }
        )
      ),
      module
    );
  };
  var __toCommonJS = /* @__PURE__ */ ((cache) => {
    return (module, temp) => {
      return (
        (cache && cache.get(module)) ||
        ((temp = __reExport(__markAsModule({}), module, 1)),
        cache && cache.set(module, temp),
        temp)
      );
    };
  })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

  // node_modules/bsert/lib/assert.js
  var require_assert = __commonJS({
    "node_modules/bsert/lib/assert.js"(exports, module) {
      "use strict";
      var AssertionError = class extends Error {
        constructor(options) {
          if (typeof options === "string") options = { message: options };
          if (options === null || typeof options !== "object") options = {};
          let message = null;
          let operator = "fail";
          let generatedMessage = Boolean(options.generatedMessage);
          if (options.message != null) message = toString(options.message);
          if (typeof options.operator === "string") operator = options.operator;
          if (message == null) {
            if (operator === "fail") {
              message = "Assertion failed.";
            } else {
              const a2 = stringify(options.actual);
              const b2 = stringify(options.expected);
              message = `${a2} ${operator} ${b2}`;
            }
            generatedMessage = true;
          }
          super(message);
          let start = this.constructor;
          if (typeof options.stackStartFunction === "function")
            start = options.stackStartFunction;
          else if (typeof options.stackStartFn === "function")
            start = options.stackStartFn;
          this.type = "AssertionError";
          this.name = "AssertionError [ERR_ASSERTION]";
          this.code = "ERR_ASSERTION";
          this.generatedMessage = generatedMessage;
          this.actual = options.actual;
          this.expected = options.expected;
          this.operator = operator;
          if (Error.captureStackTrace) Error.captureStackTrace(this, start);
        }
      };
      function assert3(value, message) {
        if (!value) {
          let generatedMessage = false;
          if (arguments.length === 0) {
            message = "No value argument passed to `assert()`.";
            generatedMessage = true;
          } else if (message == null) {
            message = "Assertion failed.";
            generatedMessage = true;
          } else if (isError(message)) {
            throw message;
          }
          throw new AssertionError({
            message,
            actual: value,
            expected: true,
            operator: "==",
            generatedMessage,
            stackStartFn: assert3,
          });
        }
      }
      function equal(actual, expected, message) {
        if (!Object.is(actual, expected)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual,
            expected,
            operator: "strictEqual",
            stackStartFn: equal,
          });
        }
      }
      function notEqual(actual, expected, message) {
        if (Object.is(actual, expected)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual,
            expected,
            operator: "notStrictEqual",
            stackStartFn: notEqual,
          });
        }
      }
      function fail(message) {
        let generatedMessage = false;
        if (isError(message)) throw message;
        if (message == null) {
          message = "Assertion failed.";
          generatedMessage = true;
        }
        throw new AssertionError({
          message,
          actual: false,
          expected: true,
          operator: "fail",
          generatedMessage,
          stackStartFn: fail,
        });
      }
      function throws(func, expected, message) {
        if (typeof expected === "string") {
          message = expected;
          expected = void 0;
        }
        let thrown = false;
        let err = null;
        enforce(typeof func === "function", "func", "function");
        try {
          func();
        } catch (e) {
          thrown = true;
          err = e;
        }
        if (!thrown) {
          let generatedMessage = false;
          if (message == null) {
            message = "Missing expected exception.";
            generatedMessage = true;
          }
          throw new AssertionError({
            message,
            actual: void 0,
            expected,
            operator: "throws",
            generatedMessage,
            stackStartFn: throws,
          });
        }
        if (!testError(err, expected, message, throws)) throw err;
      }
      function doesNotThrow(func, expected, message) {
        if (typeof expected === "string") {
          message = expected;
          expected = void 0;
        }
        let thrown = false;
        let err = null;
        enforce(typeof func === "function", "func", "function");
        try {
          func();
        } catch (e) {
          thrown = true;
          err = e;
        }
        if (!thrown) return;
        if (testError(err, expected, message, doesNotThrow)) {
          let generatedMessage = false;
          if (message == null) {
            message = "Got unwanted exception.";
            generatedMessage = true;
          }
          throw new AssertionError({
            message,
            actual: err,
            expected,
            operator: "doesNotThrow",
            generatedMessage,
            stackStartFn: doesNotThrow,
          });
        }
        throw err;
      }
      async function rejects(func, expected, message) {
        if (typeof expected === "string") {
          message = expected;
          expected = void 0;
        }
        let thrown = false;
        let err = null;
        if (typeof func !== "function")
          enforce(isPromise(func), "func", "promise");
        try {
          if (isPromise(func)) await func;
          else await func();
        } catch (e) {
          thrown = true;
          err = e;
        }
        if (!thrown) {
          let generatedMessage = false;
          if (message == null) {
            message = "Missing expected rejection.";
            generatedMessage = true;
          }
          throw new AssertionError({
            message,
            actual: void 0,
            expected,
            operator: "rejects",
            generatedMessage,
            stackStartFn: rejects,
          });
        }
        if (!testError(err, expected, message, rejects)) throw err;
      }
      async function doesNotReject(func, expected, message) {
        if (typeof expected === "string") {
          message = expected;
          expected = void 0;
        }
        let thrown = false;
        let err = null;
        if (typeof func !== "function")
          enforce(isPromise(func), "func", "promise");
        try {
          if (isPromise(func)) await func;
          else await func();
        } catch (e) {
          thrown = true;
          err = e;
        }
        if (!thrown) return;
        if (testError(err, expected, message, doesNotReject)) {
          let generatedMessage = false;
          if (message == null) {
            message = "Got unwanted rejection.";
            generatedMessage = true;
          }
          throw new AssertionError({
            message,
            actual: void 0,
            expected,
            operator: "doesNotReject",
            generatedMessage,
            stackStartFn: doesNotReject,
          });
        }
        throw err;
      }
      function ifError(err) {
        if (err != null) {
          let message = "ifError got unwanted exception: ";
          if (typeof err === "object" && typeof err.message === "string") {
            if (err.message.length === 0 && err.constructor)
              message += err.constructor.name;
            else message += err.message;
          } else {
            message += stringify(err);
          }
          throw new AssertionError({
            message,
            actual: err,
            expected: null,
            operator: "ifError",
            generatedMessage: true,
            stackStartFn: ifError,
          });
        }
      }
      function deepEqual(actual, expected, message) {
        if (!isDeepEqual(actual, expected, false)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual,
            expected,
            operator: "deepStrictEqual",
            stackStartFn: deepEqual,
          });
        }
      }
      function notDeepEqual(actual, expected, message) {
        if (isDeepEqual(actual, expected, true)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual,
            expected,
            operator: "notDeepStrictEqual",
            stackStartFn: notDeepEqual,
          });
        }
      }
      function bufferEqual(actual, expected, enc, message) {
        if (!isEncoding(enc)) {
          message = enc;
          enc = null;
        }
        if (enc == null) enc = "hex";
        expected = bufferize(actual, expected, enc);
        enforce(isBuffer(actual), "actual", "buffer");
        enforce(isBuffer(expected), "expected", "buffer");
        if (actual !== expected && !actual.equals(expected)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual: actual.toString(enc),
            expected: expected.toString(enc),
            operator: "bufferEqual",
            stackStartFn: bufferEqual,
          });
        }
      }
      function notBufferEqual(actual, expected, enc, message) {
        if (!isEncoding(enc)) {
          message = enc;
          enc = null;
        }
        if (enc == null) enc = "hex";
        expected = bufferize(actual, expected, enc);
        enforce(isBuffer(actual), "actual", "buffer");
        enforce(isBuffer(expected), "expected", "buffer");
        if (actual === expected || actual.equals(expected)) {
          if (isError(message)) throw message;
          throw new AssertionError({
            message,
            actual: actual.toString(enc),
            expected: expected.toString(enc),
            operator: "notBufferEqual",
            stackStartFn: notBufferEqual,
          });
        }
      }
      function enforce(value, name2, type) {
        if (!value) {
          let msg;
          if (name2 == null) {
            msg = "Invalid type for parameter.";
          } else {
            if (type == null) msg = `Invalid type for "${name2}".`;
            else msg = `"${name2}" must be a(n) ${type}.`;
          }
          const err = new TypeError(msg);
          if (Error.captureStackTrace) Error.captureStackTrace(err, enforce);
          throw err;
        }
      }
      function range(value, name2) {
        if (!value) {
          const msg =
            name2 != null
              ? `"${name2}" is out of range.`
              : "Parameter is out of range.";
          const err = new RangeError(msg);
          if (Error.captureStackTrace) Error.captureStackTrace(err, range);
          throw err;
        }
      }
      function stringify(value) {
        switch (typeof value) {
          case "undefined":
            return "undefined";
          case "object":
            if (value === null) return "null";
            return `[${objectName(value)}]`;
          case "boolean":
            return `${value}`;
          case "number":
            return `${value}`;
          case "string":
            if (value.length > 80) value = `${value.substring(0, 77)}...`;
            return JSON.stringify(value);
          case "symbol":
            return tryString(value);
          case "function":
            return `[${funcName(value)}]`;
          case "bigint":
            return `${value}n`;
          default:
            return `[${typeof value}]`;
        }
      }
      function toString(value) {
        if (typeof value === "string") return value;
        if (isError(value)) return tryString(value);
        return stringify(value);
      }
      function tryString(value) {
        try {
          return String(value);
        } catch (e) {
          return "Object";
        }
      }
      function testError(err, expected, message, func) {
        if (expected == null) return true;
        if (isRegExp(expected)) return expected.test(err);
        if (typeof expected !== "function") {
          if (func === doesNotThrow || func === doesNotReject)
            throw new TypeError('"expected" must not be an object.');
          if (typeof expected !== "object")
            throw new TypeError('"expected" must be an object.');
          let generatedMessage = false;
          if (message == null) {
            const name2 = func === rejects ? "rejection" : "exception";
            message = `Missing expected ${name2}.`;
            generatedMessage = true;
          }
          if (err == null || typeof err !== "object") {
            throw new AssertionError({
              actual: err,
              expected,
              message,
              operator: func.name,
              generatedMessage,
              stackStartFn: func,
            });
          }
          const keys = Object.keys(expected);
          if (isError(expected)) keys.push("name", "message");
          if (keys.length === 0)
            throw new TypeError('"expected" may not be an empty object.');
          for (const key2 of keys) {
            const expect = expected[key2];
            const value = err[key2];
            if (
              typeof value === "string" &&
              isRegExp(expect) &&
              expect.test(value)
            ) {
              continue;
            }
            if (key2 in err && isDeepEqual(value, expect, false)) continue;
            throw new AssertionError({
              actual: err,
              expected,
              message,
              operator: func.name,
              generatedMessage,
              stackStartFn: func,
            });
          }
          return true;
        }
        if (expected.prototype !== void 0 && err instanceof expected)
          return true;
        if (Error.isPrototypeOf(expected)) return false;
        return expected.call({}, err) === true;
      }
      function isDeepEqual(x2, y2, fail2) {
        try {
          return compare(x2, y2, null);
        } catch (e) {
          return fail2;
        }
      }
      function compare(a2, b2, cache) {
        if (Object.is(a2, b2)) return true;
        if (!isObject(a2) || !isObject(b2)) return false;
        if (objectString(a2) !== objectString(b2)) return false;
        if (Object.getPrototypeOf(a2) !== Object.getPrototypeOf(b2))
          return false;
        if (isBuffer(a2) && isBuffer(b2)) return a2.equals(b2);
        if (isDate(a2)) return Object.is(a2.getTime(), b2.getTime());
        if (isRegExp(a2)) {
          return (
            a2.source === b2.source &&
            a2.global === b2.global &&
            a2.multiline === b2.multiline &&
            a2.lastIndex === b2.lastIndex &&
            a2.ignoreCase === b2.ignoreCase
          );
        }
        if (isError(a2)) {
          if (a2.message !== b2.message) return false;
        }
        if (isArrayBuffer(a2)) {
          a2 = new Uint8Array(a2);
          b2 = new Uint8Array(b2);
        }
        if (isView(a2) && !isBuffer(a2)) {
          if (isBuffer(b2)) return false;
          const x2 = new Uint8Array(a2.buffer);
          const y2 = new Uint8Array(b2.buffer);
          if (x2.length !== y2.length) return false;
          for (let i = 0; i < x2.length; i++) {
            if (x2[i] !== y2[i]) return false;
          }
          return true;
        }
        if (isSet(a2)) {
          if (a2.size !== b2.size) return false;
          const keys = /* @__PURE__ */ new Set([...a2, ...b2]);
          return keys.size === a2.size;
        }
        if (!cache) {
          cache = {
            a: /* @__PURE__ */ new Map(),
            b: /* @__PURE__ */ new Map(),
            p: 0,
          };
        } else {
          const aa = cache.a.get(a2);
          if (aa != null) {
            const bb = cache.b.get(b2);
            if (bb != null) return aa === bb;
          }
          cache.p += 1;
        }
        cache.a.set(a2, cache.p);
        cache.b.set(b2, cache.p);
        const ret = recurse(a2, b2, cache);
        cache.a.delete(a2);
        cache.b.delete(b2);
        return ret;
      }
      function recurse(a2, b2, cache) {
        if (isMap(a2)) {
          if (a2.size !== b2.size) return false;
          const keys2 = /* @__PURE__ */ new Set([...a2.keys(), ...b2.keys()]);
          if (keys2.size !== a2.size) return false;
          for (const key2 of keys2) {
            if (!compare(a2.get(key2), b2.get(key2), cache)) return false;
          }
          return true;
        }
        if (isArray(a2)) {
          if (a2.length !== b2.length) return false;
          for (let i = 0; i < a2.length; i++) {
            if (!compare(a2[i], b2[i], cache)) return false;
          }
          return true;
        }
        const ak = ownKeys4(a2);
        const bk = ownKeys4(b2);
        if (ak.length !== bk.length) return false;
        const keys = /* @__PURE__ */ new Set([...ak, ...bk]);
        if (keys.size !== ak.length) return false;
        for (const key2 of keys) {
          if (!compare(a2[key2], b2[key2], cache)) return false;
        }
        return true;
      }
      function ownKeys4(obj) {
        const keys = Object.keys(obj);
        if (!Object.getOwnPropertySymbols) return keys;
        if (!Object.getOwnPropertyDescriptor) return keys;
        const symbols = Object.getOwnPropertySymbols(obj);
        for (const symbol of symbols) {
          const desc = Object.getOwnPropertyDescriptor(obj, symbol);
          if (desc && desc.enumerable) keys.push(symbol);
        }
        return keys;
      }
      function objectString(obj) {
        if (obj === void 0) return "[object Undefined]";
        if (obj === null) return "[object Null]";
        try {
          return Object.prototype.toString.call(obj);
        } catch (e) {
          return "[object Object]";
        }
      }
      function objectType(obj) {
        return objectString(obj).slice(8, -1);
      }
      function objectName(obj) {
        const type = objectType(obj);
        if (obj == null) return type;
        if (type !== "Object" && type !== "Error") return type;
        let ctor, name2;
        try {
          ctor = obj.constructor;
        } catch (e) {}
        if (ctor == null) return type;
        try {
          name2 = ctor.name;
        } catch (e) {
          return type;
        }
        if (typeof name2 !== "string" || name2.length === 0) return type;
        return name2;
      }
      function funcName(func) {
        let name2;
        try {
          name2 = func.name;
        } catch (e) {}
        if (typeof name2 !== "string" || name2.length === 0) return "Function";
        return `Function: ${name2}`;
      }
      function isArray(obj) {
        return Array.isArray(obj);
      }
      function isArrayBuffer(obj) {
        return obj instanceof ArrayBuffer;
      }
      function isBuffer(obj) {
        return (
          isObject(obj) &&
          typeof obj.writeUInt32LE === "function" &&
          typeof obj.equals === "function"
        );
      }
      function isDate(obj) {
        return obj instanceof Date;
      }
      function isError(obj) {
        return obj instanceof Error;
      }
      function isMap(obj) {
        return obj instanceof Map;
      }
      function isObject(obj) {
        return obj && typeof obj === "object";
      }
      function isPromise(obj) {
        return obj instanceof Promise;
      }
      function isRegExp(obj) {
        return obj instanceof RegExp;
      }
      function isSet(obj) {
        return obj instanceof Set;
      }
      function isView(obj) {
        return ArrayBuffer.isView(obj);
      }
      function isEncoding(enc) {
        if (typeof enc !== "string") return false;
        switch (enc) {
          case "ascii":
          case "binary":
          case "base64":
          case "hex":
          case "latin1":
          case "ucs2":
          case "utf8":
          case "utf16le":
            return true;
        }
        return false;
      }
      function bufferize(actual, expected, enc) {
        if (typeof expected === "string") {
          if (!isBuffer(actual)) return null;
          const { constructor } = actual;
          if (!constructor || typeof constructor.from !== "function")
            return null;
          if (!isEncoding(enc)) return null;
          if (enc === "hex" && expected.length & 1) return null;
          const raw = constructor.from(expected, enc);
          if (enc === "hex" && raw.length !== expected.length >>> 1)
            return null;
          return raw;
        }
        return expected;
      }
      assert3.AssertionError = AssertionError;
      assert3.assert = assert3;
      assert3.strict = assert3;
      assert3.ok = assert3;
      assert3.equal = equal;
      assert3.notEqual = notEqual;
      assert3.strictEqual = equal;
      assert3.notStrictEqual = notEqual;
      assert3.fail = fail;
      assert3.throws = throws;
      assert3.doesNotThrow = doesNotThrow;
      assert3.rejects = rejects;
      assert3.doesNotReject = doesNotReject;
      assert3.ifError = ifError;
      assert3.deepEqual = deepEqual;
      assert3.notDeepEqual = notDeepEqual;
      assert3.deepStrictEqual = deepEqual;
      assert3.notDeepStrictEqual = notDeepEqual;
      assert3.bufferEqual = bufferEqual;
      assert3.notBufferEqual = notBufferEqual;
      assert3.enforce = enforce;
      assert3.range = range;
      module.exports = assert3;
    },
  });

  // node_modules/brq/lib/mime.js
  var require_mime = __commonJS({
    "node_modules/brq/lib/mime.js"(exports) {
      "use strict";
      var assert3 = require_assert();
      var types = {
        atom: ["application/atom+xml", true],
        bin: ["application/octet-stream", false],
        bmp: ["image/bmp", false],
        cjs: ["application/javascript", true],
        css: ["text/css", true],
        dat: ["application/octet-stream", false],
        form: ["application/x-www-form-urlencoded", true],
        gif: ["image/gif", false],
        gz: ["application/x-gzip", false],
        htc: ["text/x-component", true],
        html: ["text/html", true],
        ico: ["image/x-icon", false],
        jpg: ["image/jpeg", false],
        jpeg: ["image/jpeg", false],
        js: ["application/javascript", true],
        json: ["application/json", true],
        log: ["text/plain", true],
        manifest: ["text/cache-manifest", false],
        mathml: ["application/mathml+xml", true],
        md: ["text/plain", true],
        mjs: ["application/javascript", true],
        mkv: ["video/x-matroska", false],
        mml: ["application/mathml+xml", true],
        mp3: ["audio/mpeg", false],
        mp4: ["video/mp4", false],
        mpeg: ["video/mpeg", false],
        mpg: ["video/mpeg", false],
        oga: ["audio/ogg", false],
        ogg: ["application/ogg", false],
        ogv: ["video/ogg", false],
        otf: ["font/otf", false],
        pdf: ["application/pdf", false],
        png: ["image/png", false],
        rdf: ["application/rdf+xml", true],
        rss: ["application/rss+xml", true],
        svg: ["image/svg+xml", false],
        swf: ["application/x-shockwave-flash", false],
        tar: ["application/x-tar", false],
        torrent: ["application/x-bittorrent", false],
        txt: ["text/plain", true],
        ttf: ["font/ttf", false],
        wav: ["audio/wav", false],
        webm: ["video/webm", false],
        woff: ["font/x-woff", false],
        xhtml: ["application/xhtml+xml", true],
        xbl: ["application/xml", true],
        xml: ["application/xml", true],
        xsl: ["application/xml", true],
        xslt: ["application/xslt+xml", true],
        zip: ["application/zip", false],
      };
      var extensions = {
        "application/atom+xml": "atom",
        "application/octet-stream": "bin",
        "image/bmp": "bmp",
        "text/css": "css",
        "application/x-www-form-urlencoded": "form",
        "image/gif": "gif",
        "application/x-gzip": "gz",
        "text/x-component": "htc",
        "text/html": "html",
        "text/xml": "xml",
        "image/x-icon": "ico",
        "image/jpeg": "jpeg",
        "text/javascript": "js",
        "application/javascript": "js",
        "text/x-json": "json",
        "application/json": "json",
        "text/json": "json",
        "text/plain": "txt",
        "text/cache-manifest": "manifest",
        "application/mathml+xml": "mml",
        "video/x-matroska": "mkv",
        "audio/x-matroska": "mkv",
        "audio/mpeg": "mp3",
        "audio/mpa": "mp3",
        "video/mp4": "mp4",
        "video/mpeg": "mpg",
        "audio/ogg": "oga",
        "application/ogg": "ogg",
        "video/ogg": "ogv",
        "font/otf": "otf",
        "application/pdf": "pdf",
        "application/x-pdf": "pdf",
        "image/png": "png",
        "application/rdf+xml": "rdf",
        "application/rss+xml": "rss",
        "image/svg+xml": "svg",
        "application/x-shockwave-flash": "swf",
        "application/x-tar": "tar",
        "application/x-bittorrent": "torrent",
        "font/ttf": "ttf",
        "audio/wav": "wav",
        "audio/wave": "wav",
        "video/webm": "webm",
        "audio/webm": "webm",
        "font/x-woff": "woff",
        "application/xhtml+xml": "xhtml",
        "application/xml": "xsl",
        "application/xslt+xml": "xslt",
        "application/zip": "zip",
      };
      exports.file = function file(path3) {
        assert3(typeof path3 === "string");
        const name2 = path3.split("/").pop();
        const parts = name2.split(".");
        if (parts.length < 2) return "bin";
        if (parts.length === 2 && parts[0] === "") return "txt";
        const ext = parts[parts.length - 1];
        if (types[ext]) return ext;
        return "bin";
      };
      exports.textual = function textual(ext) {
        const value = types[ext];
        if (!value) return false;
        return value[1];
      };
      exports.type = function type(ext) {
        assert3(typeof ext === "string");
        if (ext.indexOf("/") !== -1) return ext;
        const value = types[ext];
        if (!value) return "application/octet-stream";
        let [name2, text] = value;
        if (text) name2 += "; charset=utf-8";
        return name2;
      };
      exports.ext = function ext(type) {
        if (type == null) return "bin";
        assert3(typeof type === "string");
        [type] = type.split(";");
        type = type.toLowerCase();
        type = type.trim();
        return extensions[type] || "bin";
      };
    },
  });

  // node_modules/brq/lib/request.js
  var require_request = __commonJS({
    "node_modules/brq/lib/request.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var { Stream } = __require("stream");
      var mime2 = require_mime();
      var URL4 = null;
      var qs = null;
      var http2 = null;
      var https2 = null;
      var StringDecoder = null;
      var RequestOptions = class {
        constructor(options, buffer) {
          this.method = "GET";
          this.ssl = false;
          this.host = "localhost";
          this.port = 80;
          this.path = "/";
          this.query = "";
          this.strictSSL = true;
          this.pool = false;
          this.agent = "brq";
          this.lookup = null;
          this.type = null;
          this.expect = null;
          this.body = null;
          this.username = "";
          this.password = "";
          this.limit = 20 << 20;
          this.maxRedirects = 5;
          this.timeout = 5e3;
          this.buffer = buffer || false;
          this.headers = /* @__PURE__ */ Object.create(null);
          ensureRequires();
          if (options) this.fromOptions(options);
        }
        fromOptions(options) {
          if (typeof options === "string") options = { url: options };
          if (options.method != null) {
            assert3(typeof options.method === "string");
            this.method = options.method.toUpperCase();
          }
          if (options.uri != null) this.navigate(options.uri);
          if (options.url != null) this.navigate(options.url);
          if (options.ssl != null) {
            assert3(typeof options.ssl === "boolean");
            this.ssl = options.ssl;
            this.port = 443;
          }
          if (options.host != null) {
            assert3(typeof options.host === "string");
            this.host = options.host;
          }
          if (options.port != null) {
            assert3((options.port & 65535) === options.port);
            assert3(options.port !== 0);
            this.port = options.port;
          }
          if (options.path != null) {
            assert3(typeof options.path === "string");
            this.path = options.path;
          }
          if (options.query != null) {
            if (typeof options.query === "string") {
              this.query = options.query;
            } else {
              assert3(typeof options.query === "object");
              this.query = qs.stringify(options.query);
            }
          }
          if (options.username != null) {
            assert3(typeof options.username === "string");
            this.username = options.username;
          }
          if (options.password != null) {
            assert3(typeof options.password === "string");
            this.password = options.password;
          }
          if (options.strictSSL != null) {
            assert3(typeof options.strictSSL === "boolean");
            this.strictSSL = options.strictSSL;
          }
          if (options.pool != null) {
            assert3(typeof options.pool === "boolean");
            this.pool = options.pool;
          }
          if (options.agent != null) {
            assert3(typeof options.agent === "string");
            this.agent = options.agent;
          }
          if (options.json != null) {
            assert3(typeof options.json === "object");
            this.body = Buffer.from(JSON.stringify(options.json), "utf8");
            this.type = "json";
          }
          if (options.form != null) {
            assert3(typeof options.form === "object");
            this.body = Buffer.from(qs.stringify(options.form), "utf8");
            this.type = "form";
          }
          if (options.type != null) {
            assert3(typeof options.type === "string");
            this.type = options.type;
          }
          if (options.expect != null) {
            assert3(typeof options.expect === "string");
            this.expect = options.expect;
          }
          if (options.body != null) {
            if (typeof options.body === "string") {
              this.body = Buffer.from(options.body, "utf8");
            } else {
              assert3(Buffer.isBuffer(options.body));
              this.body = options.body;
            }
          }
          if (options.timeout != null) {
            assert3(typeof options.timeout === "number");
            this.timeout = options.timeout;
          }
          if (options.limit != null) {
            assert3(typeof options.limit === "number");
            this.limit = options.limit;
          }
          if (options.maxRedirects != null) {
            assert3(typeof options.maxRedirects === "number");
            this.maxRedirects = options.maxRedirects;
          }
          if (options.headers != null) {
            assert3(typeof options.headers === "object");
            this.headers = options.headers;
          }
          if (options.lookup != null) {
            assert3(typeof options.lookup === "function");
            this.lookup = options.lookup;
          }
          return this;
        }
        navigate(url) {
          assert3(typeof url === "string");
          if (url.indexOf("://") === -1) url = "http://" + url;
          const data = URL4.parse(url);
          if (data.protocol !== "http:" && data.protocol !== "https:") {
            throw new Error("Malformed URL.");
          }
          if (!data.hostname) throw new Error("Malformed URL.");
          this.ssl = data.protocol === "https:";
          this.host = data.hostname;
          this.port = this.ssl ? 443 : 80;
          if (data.port != null) {
            const port = parseInt(data.port, 10);
            assert3((port & 65535) === port);
            this.port = port;
          }
          this.path = data.pathname;
          this.query = data.query;
          if (data.auth) {
            const parts = data.auth.split(":");
            this.username = parts.shift();
            this.password = parts.join(":");
          }
          return this;
        }
        isExpected(type) {
          assert3(typeof type === "string");
          if (!this.expect) return true;
          return this.expect === type;
        }
        isOverflow(hdr) {
          if (hdr == null) return false;
          assert3(typeof hdr === "string");
          if (!this.buffer) return false;
          hdr = hdr.trim();
          if (!/^\d+$/.test(hdr)) return false;
          hdr = hdr.replace(/^0+/g, "");
          if (hdr.length === 0) hdr = "0";
          if (hdr.length > 15) return false;
          const length = parseInt(hdr, 10);
          if (!Number.isSafeInteger(length)) return true;
          return length > this.limit;
        }
        getBackend() {
          ensureRequires(this.ssl);
          return this.ssl ? https2 : http2;
        }
        getHeaders() {
          const headers = /* @__PURE__ */ Object.create(null);
          headers["User-Agent"] = this.agent;
          if (this.type) headers["Content-Type"] = mime2.type(this.type);
          if (this.body)
            headers["Content-Length"] = this.body.length.toString(10);
          if (this.username || this.password) {
            const auth = `${this.username}:${this.password}`;
            const data = Buffer.from(auth, "utf8");
            headers["Authorization"] = `Basic ${data.toString("base64")}`;
          }
          Object.assign(headers, this.headers);
          return headers;
        }
        redirect(location) {
          assert3(typeof location === "string");
          let url = "";
          if (this.ssl) url += "https://";
          else url += "http://";
          if (this.host.indexOf(":") !== -1) url += `[${this.host}]`;
          else url += this.host;
          url += ":" + this.port;
          url += this.path;
          if (this.query) url += "?" + this.query;
          this.navigate(URL4.resolve(url, location));
          return this;
        }
        toHTTP() {
          let query = "";
          if (this.query) query = "?" + this.query;
          return {
            method: this.method,
            host: this.host,
            port: this.port,
            path: this.path + query,
            headers: this.getHeaders(),
            agent: this.pool ? null : false,
            lookup: this.lookup || void 0,
            rejectUnauthorized: this.strictSSL,
          };
        }
      };
      var Request2 = class extends Stream {
        constructor(options, buffer) {
          super();
          this.options = new RequestOptions(options, buffer);
          this.req = null;
          this.res = null;
          this.statusCode = 0;
          this.headers = /* @__PURE__ */ Object.create(null);
          this.type = "bin";
          this.redirects = 0;
          this.timeout = null;
          this.finished = false;
          this.onResponse = this.handleResponse.bind(this);
          this.onData = this.handleData.bind(this);
          this.onEnd = this.handleEnd.bind(this);
          this.total = 0;
          this.decoder = null;
          this.buf = [];
          this.str = "";
        }
        startTimeout() {
          if (!this.options.timeout) return;
          this.timeout = setTimeout(() => {
            this.finish(new Error("Request timed out."));
          }, this.options.timeout);
        }
        stopTimeout() {
          if (this.timeout != null) {
            clearTimeout(this.timeout);
            this.timeout = null;
          }
        }
        cleanup() {
          this.stopTimeout();
          if (this.req) {
            this.req.removeListener("response", this.onResponse);
            this.req.removeListener("error", this.onEnd);
            this.req.addListener("error", () => {});
          }
          if (this.res) {
            this.res.removeListener("data", this.onData);
            this.res.removeListener("error", this.onEnd);
            this.res.removeListener("end", this.onEnd);
            this.res.addListener("error", () => {});
          }
        }
        close() {
          if (this.req) {
            try {
              this.req.abort();
            } catch (e) {}
          }
          if (this.res) {
            try {
              this.res.destroy();
            } catch (e) {}
          }
          this.cleanup();
          this.req = null;
          this.res = null;
        }
        destroy() {
          this.close();
        }
        start() {
          const http3 = this.options.getBackend();
          const options = this.options.toHTTP();
          this.startTimeout();
          this.req = http3.request(options);
          this.res = null;
          if (this.options.body) this.req.write(this.options.body);
          this.req.on("response", this.onResponse);
          this.req.on("error", this.onEnd);
        }
        write(data) {
          return this.req.write(data);
        }
        end() {
          return this.req.end();
        }
        finish(err) {
          if (this.finished) return;
          this.finished = true;
          if (err) {
            this.destroy();
            this.emit("error", err);
            return;
          }
          this.cleanup();
          this.emit("end");
          this.emit("close");
        }
        handleResponse(res) {
          const { headers } = res;
          const location = headers["location"];
          if (location) {
            if (this.redirects >= this.options.maxRedirects) {
              this.finish(new Error("Too many redirects."));
              return;
            }
            this.redirects += 1;
            this.close();
            try {
              this.options.redirect(location);
            } catch (e) {
              this.finish(e);
              return;
            }
            this.start();
            this.end();
            return;
          }
          const type = mime2.ext(headers["content-type"]);
          if (!this.options.isExpected(type)) {
            this.finish(new Error("Wrong content-type for response."));
            return;
          }
          const length = headers["content-length"];
          if (this.options.isOverflow(length)) {
            this.finish(new Error("Response exceeded limit."));
            return;
          }
          this.res = res;
          this.statusCode = res.statusCode;
          this.headers = headers;
          this.type = type;
          this.res.on("data", this.onData);
          this.res.on("error", this.onEnd);
          this.res.on("end", this.onEnd);
          this.emit("headers", headers);
          this.emit("type", type);
          this.emit("response", res);
          if (this.options.buffer) {
            if (mime2.textual(this.type)) {
              this.decoder = new StringDecoder("utf8");
              this.str = "";
            } else {
              this.buf = [];
            }
          }
        }
        handleData(data) {
          this.total += data.length;
          this.emit("data", data);
          if (this.options.buffer) {
            if (this.options.limit) {
              if (this.total > this.options.limit) {
                this.finish(new Error("Response exceeded limit."));
                return;
              }
            }
            if (this.decoder) {
              this.str += this.decoder.write(data);
              return;
            }
            this.buf.push(data);
          }
        }
        handleEnd(err) {
          this.finish(err);
        }
        text() {
          if (this.decoder) return this.str;
          return this.buffer().toString("utf8");
        }
        buffer() {
          if (this.decoder) return Buffer.from(this.str, "utf8");
          return Buffer.concat(this.buf);
        }
        json() {
          const text = this.text().trim();
          if (text.length === 0) return /* @__PURE__ */ Object.create(null);
          const body = JSON.parse(text);
          if (!body || typeof body !== "object")
            throw new Error("JSON body is a non-object.");
          return body;
        }
        form() {
          return qs.parse(this.text());
        }
      };
      function request(options) {
        if (typeof options === "string") options = { url: options };
        return new Promise((resolve2, reject) => {
          const req = new Request2(options, true);
          req.on("error", (err) => reject(err));
          req.on("end", () => resolve2(req));
          req.start();
          req.end();
        });
      }
      request.stream = function stream(options) {
        const req = new Request2(options, false);
        req.start();
        return req;
      };
      function ensureRequires(ssl) {
        if (!URL4) URL4 = __require("url");
        if (!qs) qs = __require("querystring");
        if (!http2) http2 = __require("http");
        if (ssl && !https2) https2 = __require("https");
        if (!StringDecoder)
          StringDecoder = __require("string_decoder").StringDecoder;
      }
      module.exports = request;
    },
  });

  // node_modules/brq/lib/brq.js
  var require_brq = __commonJS({
    "node_modules/brq/lib/brq.js"(exports, module) {
      "use strict";
      module.exports = require_request();
    },
  });

  // node_modules/bsock/vendor/faye-websocket.js
  var require_faye_websocket = __commonJS({
    "node_modules/bsock/vendor/faye-websocket.js"(exports, module) {
      var __node_modules__ = [
        [
          "faye-websocket",
          "/lib/faye/websocket.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var util = __require("util"),
              driver = __node_require__(1),
              API = __node_require__(23);
            var WebSocket2 = function (
              request,
              socket,
              body,
              protocols,
              options
            ) {
              options = options || {};
              this._stream = socket;
              this._driver = driver.http(request, {
                maxLength: options.maxLength,
                protocols,
              });
              var self2 = this;
              if (!this._stream || !this._stream.writable) return;
              if (!this._stream.readable) return this._stream.end();
              var catchup = function () {
                self2._stream.removeListener("data", catchup);
              };
              this._stream.on("data", catchup);
              API.call(this, options);
              process.nextTick(function () {
                self2._driver.start();
                self2._driver.io.write(body);
              });
            };
            util.inherits(WebSocket2, API);
            WebSocket2.isWebSocket = function (request) {
              return driver.isWebSocket(request);
            };
            WebSocket2.validateOptions = function (options, validKeys) {
              driver.validateOptions(options, validKeys);
            };
            WebSocket2.WebSocket = WebSocket2;
            WebSocket2.Client = __node_require__(26);
            WebSocket2.EventSource = __node_require__(27);
            module2.exports = WebSocket2;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Base = __node_require__(2),
              Client = __node_require__(6),
              Server = __node_require__(20);
            var Driver = {
              client: function (url, options) {
                options = options || {};
                if (options.masking === void 0) options.masking = true;
                return new Client(url, options);
              },
              server: function (options) {
                options = options || {};
                if (options.requireMasking === void 0)
                  options.requireMasking = true;
                return new Server(options);
              },
              http: function () {
                return Server.http.apply(Server, arguments);
              },
              isSecureRequest: function (request) {
                return Server.isSecureRequest(request);
              },
              isWebSocket: function (request) {
                if (request.method !== "GET") return false;
                var connection = request.headers.connection || "",
                  upgrade = request.headers.upgrade || "";
                return (
                  request.method === "GET" &&
                  connection.toLowerCase().split(/ *, */).indexOf("upgrade") >=
                    0 &&
                  upgrade.toLowerCase() === "websocket"
                );
              },
              validateOptions: function (options, validKeys) {
                Base.validateOptions(options, validKeys);
              },
            };
            module2.exports = Driver;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/base.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Emitter = __require("events").EventEmitter,
              util = __require("util"),
              streams = __node_require__(3),
              Headers = __node_require__(4),
              Reader2 = __node_require__(5);
            var Base = function (request, url, options) {
              Emitter.call(this);
              Base.validateOptions(options || {}, [
                "maxLength",
                "masking",
                "requireMasking",
                "protocols",
              ]);
              this._request = request;
              this._reader = new Reader2();
              this._options = options || {};
              this._maxLength = this._options.maxLength || this.MAX_LENGTH;
              this._headers = new Headers();
              this.__queue = [];
              this.readyState = 0;
              this.url = url;
              this.io = new streams.IO(this);
              this.messages = new streams.Messages(this);
              this._bindEventListeners();
            };
            util.inherits(Base, Emitter);
            Base.validateOptions = function (options, validKeys) {
              for (var key3 in options) {
                if (validKeys.indexOf(key3) < 0)
                  throw new Error("Unrecognized option: " + key3);
              }
            };
            var instance = {
              MAX_LENGTH: 67108863,
              STATES: ["connecting", "open", "closing", "closed"],
              _bindEventListeners: function () {
                var self2 = this;
                this.messages.on("error", function () {});
                this.on("message", function (event) {
                  var messages = self2.messages;
                  if (messages.readable) messages.emit("data", event.data);
                });
                this.on("error", function (error) {
                  var messages = self2.messages;
                  if (messages.readable) messages.emit("error", error);
                });
                this.on("close", function () {
                  var messages = self2.messages;
                  if (!messages.readable) return;
                  messages.readable = messages.writable = false;
                  messages.emit("end");
                });
              },
              getState: function () {
                return this.STATES[this.readyState] || null;
              },
              addExtension: function (extension) {
                return false;
              },
              setHeader: function (name2, value) {
                if (this.readyState > 0) return false;
                this._headers.set(name2, value);
                return true;
              },
              start: function () {
                if (this.readyState !== 0) return false;
                var response = this._handshakeResponse();
                if (!response) return false;
                this._write(response);
                if (this._stage !== -1) this._open();
                return true;
              },
              text: function (message) {
                return this.frame(message);
              },
              binary: function (message) {
                return false;
              },
              ping: function () {
                return false;
              },
              pong: function () {
                return false;
              },
              close: function (reason, code) {
                if (this.readyState !== 1) return false;
                this.readyState = 3;
                this.emit("close", new Base.CloseEvent(null, null));
                return true;
              },
              _open: function () {
                this.readyState = 1;
                this.__queue.forEach(function (args) {
                  this.frame.apply(this, args);
                }, this);
                this.__queue = [];
                this.emit("open", new Base.OpenEvent());
              },
              _queue: function (message) {
                this.__queue.push(message);
                return true;
              },
              _write: function (chunk) {
                var io = this.io;
                if (io.readable) io.emit("data", chunk);
              },
            };
            for (var key2 in instance) Base.prototype[key2] = instance[key2];
            Base.ConnectEvent = function () {};
            Base.OpenEvent = function () {};
            Base.CloseEvent = function (code, reason) {
              this.code = code;
              this.reason = reason;
            };
            Base.MessageEvent = function (data) {
              this.data = data;
            };
            Base.PingEvent = function (data) {
              this.data = data;
            };
            Base.PongEvent = function (data) {
              this.data = data;
            };
            module2.exports = Base;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/streams.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Stream = __require("stream").Stream,
              util = __require("util");
            var IO = function (driver) {
              this.readable = this.writable = true;
              this._paused = false;
              this._driver = driver;
            };
            util.inherits(IO, Stream);
            IO.prototype.pause = function () {
              this._paused = true;
              this._driver.messages._paused = true;
            };
            IO.prototype.resume = function () {
              this._paused = false;
              this.emit("drain");
              var messages = this._driver.messages;
              messages._paused = false;
              messages.emit("drain");
            };
            IO.prototype.write = function (chunk) {
              if (!this.writable) return false;
              this._driver.parse(chunk);
              return !this._paused;
            };
            IO.prototype.end = function (chunk) {
              if (!this.writable) return;
              if (chunk !== void 0) this.write(chunk);
              this.writable = false;
              var messages = this._driver.messages;
              if (messages.readable) {
                messages.readable = messages.writable = false;
                messages.emit("end");
              }
            };
            IO.prototype.destroy = function () {
              this.end();
            };
            var Messages = function (driver) {
              this.readable = this.writable = true;
              this._paused = false;
              this._driver = driver;
            };
            util.inherits(Messages, Stream);
            Messages.prototype.pause = function () {
              this._driver.io._paused = true;
            };
            Messages.prototype.resume = function () {
              this._driver.io._paused = false;
              this._driver.io.emit("drain");
            };
            Messages.prototype.write = function (message) {
              if (!this.writable) return false;
              if (typeof message === "string") this._driver.text(message);
              else this._driver.binary(message);
              return !this._paused;
            };
            Messages.prototype.end = function (message) {
              if (message !== void 0) this.write(message);
            };
            Messages.prototype.destroy = function () {};
            exports2.IO = IO;
            exports2.Messages = Messages;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/headers.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Headers = function () {
              this.clear();
            };
            Headers.prototype.ALLOWED_DUPLICATES = [
              "set-cookie",
              "set-cookie2",
              "warning",
              "www-authenticate",
            ];
            Headers.prototype.clear = function () {
              this._sent = {};
              this._lines = [];
            };
            Headers.prototype.set = function (name2, value) {
              if (value === void 0) return;
              name2 = this._strip(name2);
              value = this._strip(value);
              var key2 = name2.toLowerCase();
              if (
                !this._sent.hasOwnProperty(key2) ||
                this.ALLOWED_DUPLICATES.indexOf(key2) >= 0
              ) {
                this._sent[key2] = true;
                this._lines.push(name2 + ": " + value + "\r\n");
              }
            };
            Headers.prototype.toString = function () {
              return this._lines.join("");
            };
            Headers.prototype._strip = function (string) {
              return string.toString().replace(/^ */, "").replace(/ *$/, "");
            };
            module2.exports = Headers;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/stream_reader.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var StreamReader = function () {
              this._queue = [];
              this._queueSize = 0;
              this._offset = 0;
            };
            StreamReader.prototype.put = function (buffer) {
              if (!buffer || buffer.length === 0) return;
              if (!buffer.copy) buffer = new Buffer(buffer);
              this._queue.push(buffer);
              this._queueSize += buffer.length;
            };
            StreamReader.prototype.read = function (length) {
              if (length > this._queueSize) return null;
              if (length === 0) return new Buffer(0);
              this._queueSize -= length;
              var queue = this._queue,
                remain = length,
                first = queue[0],
                buffers,
                buffer;
              if (first.length >= length) {
                if (first.length === length) {
                  return queue.shift();
                } else {
                  buffer = first.slice(0, length);
                  queue[0] = first.slice(length);
                  return buffer;
                }
              }
              for (var i = 0, n = queue.length; i < n; i++) {
                if (remain < queue[i].length) break;
                remain -= queue[i].length;
              }
              buffers = queue.splice(0, i);
              if (remain > 0 && queue.length > 0) {
                buffers.push(queue[0].slice(0, remain));
                queue[0] = queue[0].slice(remain);
              }
              return this._concat(buffers, length);
            };
            StreamReader.prototype.eachByte = function (callback, context) {
              var buffer, n, index;
              while (this._queue.length > 0) {
                buffer = this._queue[0];
                n = buffer.length;
                while (this._offset < n) {
                  index = this._offset;
                  this._offset += 1;
                  callback.call(context, buffer[index]);
                }
                this._offset = 0;
                this._queue.shift();
              }
            };
            StreamReader.prototype._concat = function (buffers, length) {
              if (Buffer.concat) return Buffer.concat(buffers, length);
              var buffer = new Buffer(length),
                offset = 0;
              for (var i = 0, n = buffers.length; i < n; i++) {
                buffers[i].copy(buffer, offset);
                offset += buffers[i].length;
              }
              return buffer;
            };
            module2.exports = StreamReader;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/client.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var crypto2 = __require("crypto"),
              url = __require("url"),
              util = __require("util"),
              HttpParser = __node_require__(7),
              Base = __node_require__(2),
              Hybi = __node_require__(9),
              Proxy2 = __node_require__(19);
            var Client = function (_url, options) {
              this.version = "hybi-13";
              Hybi.call(this, null, _url, options);
              this.readyState = -1;
              this._key = Client.generateKey();
              this._accept = Hybi.generateAccept(this._key);
              this._http = new HttpParser("response");
              var uri = url.parse(this.url),
                auth =
                  uri.auth && new Buffer(uri.auth, "utf8").toString("base64");
              if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0)
                throw new Error(this.url + " is not a valid WebSocket URL");
              this._pathname = (uri.pathname || "/") + (uri.search || "");
              this._headers.set("Host", uri.host);
              this._headers.set("Upgrade", "websocket");
              this._headers.set("Connection", "Upgrade");
              this._headers.set("Sec-WebSocket-Key", this._key);
              this._headers.set("Sec-WebSocket-Version", "13");
              if (this._protocols.length > 0)
                this._headers.set(
                  "Sec-WebSocket-Protocol",
                  this._protocols.join(", ")
                );
              if (auth) this._headers.set("Authorization", "Basic " + auth);
            };
            util.inherits(Client, Hybi);
            Client.generateKey = function () {
              return crypto2.randomBytes(16).toString("base64");
            };
            var instance = {
              VALID_PROTOCOLS: ["ws:", "wss:"],
              proxy: function (origin, options) {
                return new Proxy2(this, origin, options);
              },
              start: function () {
                if (this.readyState !== -1) return false;
                this._write(this._handshakeRequest());
                this.readyState = 0;
                return true;
              },
              parse: function (chunk) {
                if (this.readyState === 3) return;
                if (this.readyState > 0)
                  return Hybi.prototype.parse.call(this, chunk);
                this._http.parse(chunk);
                if (!this._http.isComplete()) return;
                this._validateHandshake();
                if (this.readyState === 3) return;
                this._open();
                this.parse(this._http.body);
              },
              _handshakeRequest: function () {
                var extensions = this._extensions.generateOffer();
                if (extensions)
                  this._headers.set("Sec-WebSocket-Extensions", extensions);
                var start = "GET " + this._pathname + " HTTP/1.1",
                  headers = [start, this._headers.toString(), ""];
                return new Buffer(headers.join("\r\n"), "utf8");
              },
              _failHandshake: function (message) {
                message = "Error during WebSocket handshake: " + message;
                this.readyState = 3;
                this.emit("error", new Error(message));
                this.emit(
                  "close",
                  new Base.CloseEvent(this.ERRORS.protocol_error, message)
                );
              },
              _validateHandshake: function () {
                this.statusCode = this._http.statusCode;
                this.headers = this._http.headers;
                if (this._http.error)
                  return this._failHandshake(this._http.error.message);
                if (this._http.statusCode !== 101)
                  return this._failHandshake(
                    "Unexpected response code: " + this._http.statusCode
                  );
                var headers = this._http.headers,
                  upgrade = headers["upgrade"] || "",
                  connection = headers["connection"] || "",
                  accept = headers["sec-websocket-accept"] || "",
                  protocol = headers["sec-websocket-protocol"] || "";
                if (upgrade === "")
                  return this._failHandshake("'Upgrade' header is missing");
                if (upgrade.toLowerCase() !== "websocket")
                  return this._failHandshake(
                    "'Upgrade' header value is not 'WebSocket'"
                  );
                if (connection === "")
                  return this._failHandshake("'Connection' header is missing");
                if (connection.toLowerCase() !== "upgrade")
                  return this._failHandshake(
                    "'Connection' header value is not 'Upgrade'"
                  );
                if (accept !== this._accept)
                  return this._failHandshake("Sec-WebSocket-Accept mismatch");
                this.protocol = null;
                if (protocol !== "") {
                  if (this._protocols.indexOf(protocol) < 0)
                    return this._failHandshake(
                      "Sec-WebSocket-Protocol mismatch"
                    );
                  else this.protocol = protocol;
                }
                try {
                  this._extensions.activate(
                    this.headers["sec-websocket-extensions"]
                  );
                } catch (e) {
                  return this._failHandshake(e.message);
                }
              },
            };
            for (var key2 in instance) Client.prototype[key2] = instance[key2];
            module2.exports = Client;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/http_parser.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var NodeHTTPParser = __node_require__(8).HTTPParser;
            var VERSION = process.version.match(/[0-9]+/g).map(function (n) {
              return parseInt(n, 10);
            });
            var TYPES = {
              request: NodeHTTPParser.REQUEST || "request",
              response: NodeHTTPParser.RESPONSE || "response",
            };
            var HttpParser = function (type) {
              this._type = type;
              this._parser = new NodeHTTPParser(TYPES[type]);
              this._complete = false;
              this.headers = {};
              var current = null,
                self2 = this;
              this._parser.onHeaderField = function (b2, start, length) {
                current = b2
                  .toString("utf8", start, start + length)
                  .toLowerCase();
              };
              this._parser.onHeaderValue = function (b2, start, length) {
                var value = b2.toString("utf8", start, start + length);
                if (self2.headers.hasOwnProperty(current))
                  self2.headers[current] += ", " + value;
                else self2.headers[current] = value;
              };
              this._parser.onHeadersComplete = this._parser[
                NodeHTTPParser.kOnHeadersComplete
              ] = function (
                majorVersion,
                minorVersion,
                headers,
                method,
                pathname,
                statusCode
              ) {
                var info = arguments[0];
                if (typeof info === "object") {
                  method = info.method;
                  pathname = info.url;
                  statusCode = info.statusCode;
                  headers = info.headers;
                }
                self2.method =
                  typeof method === "number"
                    ? HttpParser.METHODS[method]
                    : method;
                self2.statusCode = statusCode;
                self2.url = pathname;
                if (!headers) return;
                for (
                  var i = 0, n = headers.length, key2, value;
                  i < n;
                  i += 2
                ) {
                  key2 = headers[i].toLowerCase();
                  value = headers[i + 1];
                  if (self2.headers.hasOwnProperty(key2))
                    self2.headers[key2] += ", " + value;
                  else self2.headers[key2] = value;
                }
                self2._complete = true;
              };
            };
            HttpParser.METHODS = {
              0: "DELETE",
              1: "GET",
              2: "HEAD",
              3: "POST",
              4: "PUT",
              5: "CONNECT",
              6: "OPTIONS",
              7: "TRACE",
              8: "COPY",
              9: "LOCK",
              10: "MKCOL",
              11: "MOVE",
              12: "PROPFIND",
              13: "PROPPATCH",
              14: "SEARCH",
              15: "UNLOCK",
              16: "BIND",
              17: "REBIND",
              18: "UNBIND",
              19: "ACL",
              20: "REPORT",
              21: "MKACTIVITY",
              22: "CHECKOUT",
              23: "MERGE",
              24: "M-SEARCH",
              25: "NOTIFY",
              26: "SUBSCRIBE",
              27: "UNSUBSCRIBE",
              28: "PATCH",
              29: "PURGE",
              30: "MKCALENDAR",
              31: "LINK",
              32: "UNLINK",
            };
            if (VERSION[0] === 0 && VERSION[1] === 12) {
              HttpParser.METHODS[16] = "REPORT";
              HttpParser.METHODS[17] = "MKACTIVITY";
              HttpParser.METHODS[18] = "CHECKOUT";
              HttpParser.METHODS[19] = "MERGE";
              HttpParser.METHODS[20] = "M-SEARCH";
              HttpParser.METHODS[21] = "NOTIFY";
              HttpParser.METHODS[22] = "SUBSCRIBE";
              HttpParser.METHODS[23] = "UNSUBSCRIBE";
              HttpParser.METHODS[24] = "PATCH";
              HttpParser.METHODS[25] = "PURGE";
            }
            HttpParser.prototype.isComplete = function () {
              return this._complete;
            };
            HttpParser.prototype.parse = function (chunk) {
              var consumed = this._parser.execute(chunk, 0, chunk.length);
              if (typeof consumed !== "number") {
                this.error = consumed;
                this._complete = true;
                return;
              }
              if (VERSION[0] === 0 && VERSION[1] < 6) consumed += 1;
              if (this._complete)
                this.body =
                  consumed < chunk.length
                    ? chunk.slice(consumed)
                    : new Buffer(0);
            };
            module2.exports = HttpParser;
          },
        ],
        [
          "http-parser-js",
          "/http-parser.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var assert3 = __require("assert");
            exports2.HTTPParser = HTTPParser;
            function HTTPParser(type) {
              assert3.ok(
                type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE
              );
              this.type = type;
              this.state = type + "_LINE";
              this.info = {
                headers: [],
                upgrade: false,
              };
              this.trailers = [];
              this.line = "";
              this.isChunked = false;
              this.connection = "";
              this.headerSize = 0;
              this.body_bytes = null;
              this.isUserCall = false;
              this.hadError = false;
            }
            HTTPParser.encoding = "ascii";
            HTTPParser.maxHeaderSize = 80 * 1024;
            HTTPParser.REQUEST = "REQUEST";
            HTTPParser.RESPONSE = "RESPONSE";
            var kOnHeaders = (HTTPParser.kOnHeaders = 0);
            var kOnHeadersComplete = (HTTPParser.kOnHeadersComplete = 1);
            var kOnBody = (HTTPParser.kOnBody = 2);
            var kOnMessageComplete = (HTTPParser.kOnMessageComplete = 3);
            HTTPParser.prototype[kOnHeaders] =
              HTTPParser.prototype[kOnHeadersComplete] =
              HTTPParser.prototype[kOnBody] =
              HTTPParser.prototype[kOnMessageComplete] =
                function () {};
            var compatMode0_12 = true;
            Object.defineProperty(HTTPParser, "kOnExecute", {
              get: function () {
                compatMode0_12 = false;
                return 4;
              },
            });
            var methods =
              (exports2.methods =
              HTTPParser.methods =
                [
                  "DELETE",
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "CONNECT",
                  "OPTIONS",
                  "TRACE",
                  "COPY",
                  "LOCK",
                  "MKCOL",
                  "MOVE",
                  "PROPFIND",
                  "PROPPATCH",
                  "SEARCH",
                  "UNLOCK",
                  "BIND",
                  "REBIND",
                  "UNBIND",
                  "ACL",
                  "REPORT",
                  "MKACTIVITY",
                  "CHECKOUT",
                  "MERGE",
                  "M-SEARCH",
                  "NOTIFY",
                  "SUBSCRIBE",
                  "UNSUBSCRIBE",
                  "PATCH",
                  "PURGE",
                  "MKCALENDAR",
                  "LINK",
                  "UNLINK",
                ]);
            var method_connect = methods.indexOf("CONNECT");
            HTTPParser.prototype.reinitialize = HTTPParser;
            HTTPParser.prototype.close =
              HTTPParser.prototype.pause =
              HTTPParser.prototype.resume =
              HTTPParser.prototype.free =
                function () {};
            HTTPParser.prototype._compatMode0_11 = false;
            HTTPParser.prototype.getAsyncId = function () {
              return 0;
            };
            var headerState = {
              REQUEST_LINE: true,
              RESPONSE_LINE: true,
              HEADER: true,
            };
            HTTPParser.prototype.execute = function (chunk, start, length) {
              if (!(this instanceof HTTPParser)) {
                throw new TypeError("not a HTTPParser");
              }
              start = start || 0;
              length = typeof length === "number" ? length : chunk.length;
              this.chunk = chunk;
              this.offset = start;
              var end = (this.end = start + length);
              try {
                while (this.offset < end) {
                  if (this[this.state]()) {
                    break;
                  }
                }
              } catch (err) {
                if (this.isUserCall) {
                  throw err;
                }
                this.hadError = true;
                return err;
              }
              this.chunk = null;
              length = this.offset - start;
              if (headerState[this.state]) {
                this.headerSize += length;
                if (this.headerSize > HTTPParser.maxHeaderSize) {
                  return new Error("max header size exceeded");
                }
              }
              return length;
            };
            var stateFinishAllowed = {
              REQUEST_LINE: true,
              RESPONSE_LINE: true,
              BODY_RAW: true,
            };
            HTTPParser.prototype.finish = function () {
              if (this.hadError) {
                return;
              }
              if (!stateFinishAllowed[this.state]) {
                return new Error("invalid state for EOF");
              }
              if (this.state === "BODY_RAW") {
                this.userCall()(this[kOnMessageComplete]());
              }
            };
            HTTPParser.prototype.consume =
              HTTPParser.prototype.unconsume =
              HTTPParser.prototype.getCurrentBuffer =
                function () {};
            HTTPParser.prototype.userCall = function () {
              this.isUserCall = true;
              var self2 = this;
              return function (ret) {
                self2.isUserCall = false;
                return ret;
              };
            };
            HTTPParser.prototype.nextRequest = function () {
              this.userCall()(this[kOnMessageComplete]());
              this.reinitialize(this.type);
            };
            HTTPParser.prototype.consumeLine = function () {
              var end = this.end,
                chunk = this.chunk;
              for (var i = this.offset; i < end; i++) {
                if (chunk[i] === 10) {
                  var line =
                    this.line +
                    chunk.toString(HTTPParser.encoding, this.offset, i);
                  if (line.charAt(line.length - 1) === "\r") {
                    line = line.substr(0, line.length - 1);
                  }
                  this.line = "";
                  this.offset = i + 1;
                  return line;
                }
              }
              this.line += chunk.toString(
                HTTPParser.encoding,
                this.offset,
                this.end
              );
              this.offset = this.end;
            };
            var headerExp = /^([^: \t]+):[ \t]*((?:.*[^ \t])|)/;
            var headerContinueExp = /^[ \t]+(.*[^ \t])/;
            HTTPParser.prototype.parseHeader = function (line, headers) {
              if (line.indexOf("\r") !== -1) {
                throw parseErrorCode("HPE_LF_EXPECTED");
              }
              var match = headerExp.exec(line);
              var k2 = match && match[1];
              if (k2) {
                headers.push(k2);
                headers.push(match[2]);
              } else {
                var matchContinue = headerContinueExp.exec(line);
                if (matchContinue && headers.length) {
                  if (headers[headers.length - 1]) {
                    headers[headers.length - 1] += " ";
                  }
                  headers[headers.length - 1] += matchContinue[1];
                }
              }
            };
            var requestExp = /^([A-Z-]+) ([^ ]+) HTTP\/(\d)\.(\d)$/;
            HTTPParser.prototype.REQUEST_LINE = function () {
              var line = this.consumeLine();
              if (!line) {
                return;
              }
              var match = requestExp.exec(line);
              if (match === null) {
                throw parseErrorCode("HPE_INVALID_CONSTANT");
              }
              this.info.method = this._compatMode0_11
                ? match[1]
                : methods.indexOf(match[1]);
              if (this.info.method === -1) {
                throw new Error("invalid request method");
              }
              this.info.url = match[2];
              this.info.versionMajor = +match[3];
              this.info.versionMinor = +match[4];
              this.body_bytes = 0;
              this.state = "HEADER";
            };
            var responseExp = /^HTTP\/(\d)\.(\d) (\d{3}) ?(.*)$/;
            HTTPParser.prototype.RESPONSE_LINE = function () {
              var line = this.consumeLine();
              if (!line) {
                return;
              }
              var match = responseExp.exec(line);
              if (match === null) {
                throw parseErrorCode("HPE_INVALID_CONSTANT");
              }
              this.info.versionMajor = +match[1];
              this.info.versionMinor = +match[2];
              var statusCode = (this.info.statusCode = +match[3]);
              this.info.statusMessage = match[4];
              if (
                ((statusCode / 100) | 0) === 1 ||
                statusCode === 204 ||
                statusCode === 304
              ) {
                this.body_bytes = 0;
              }
              this.state = "HEADER";
            };
            HTTPParser.prototype.shouldKeepAlive = function () {
              if (this.info.versionMajor > 0 && this.info.versionMinor > 0) {
                if (this.connection.indexOf("close") !== -1) {
                  return false;
                }
              } else if (this.connection.indexOf("keep-alive") === -1) {
                return false;
              }
              if (this.body_bytes !== null || this.isChunked) {
                return true;
              }
              return false;
            };
            HTTPParser.prototype.HEADER = function () {
              var line = this.consumeLine();
              if (line === void 0) {
                return;
              }
              var info = this.info;
              if (line) {
                this.parseHeader(line, info.headers);
              } else {
                var headers = info.headers;
                var hasContentLength = false;
                var currentContentLengthValue;
                var hasUpgradeHeader = false;
                for (var i = 0; i < headers.length; i += 2) {
                  switch (headers[i].toLowerCase()) {
                    case "transfer-encoding":
                      this.isChunked =
                        headers[i + 1].toLowerCase() === "chunked";
                      break;
                    case "content-length":
                      currentContentLengthValue = +headers[i + 1];
                      if (hasContentLength) {
                        if (currentContentLengthValue !== this.body_bytes) {
                          throw parseErrorCode("HPE_UNEXPECTED_CONTENT_LENGTH");
                        }
                      } else {
                        hasContentLength = true;
                        this.body_bytes = currentContentLengthValue;
                      }
                      break;
                    case "connection":
                      this.connection += headers[i + 1].toLowerCase();
                      break;
                    case "upgrade":
                      hasUpgradeHeader = true;
                      break;
                  }
                }
                if (this.isChunked && hasContentLength) {
                  hasContentLength = false;
                  this.body_bytes = null;
                }
                if (
                  hasUpgradeHeader &&
                  this.connection.indexOf("upgrade") != -1
                ) {
                  info.upgrade =
                    this.type === HTTPParser.REQUEST || info.statusCode === 101;
                } else {
                  info.upgrade = info.method === method_connect;
                }
                info.shouldKeepAlive = this.shouldKeepAlive();
                var skipBody;
                if (compatMode0_12) {
                  skipBody = this.userCall()(this[kOnHeadersComplete](info));
                } else {
                  skipBody = this.userCall()(
                    this[kOnHeadersComplete](
                      info.versionMajor,
                      info.versionMinor,
                      info.headers,
                      info.method,
                      info.url,
                      info.statusCode,
                      info.statusMessage,
                      info.upgrade,
                      info.shouldKeepAlive
                    )
                  );
                }
                if (skipBody === 2) {
                  this.nextRequest();
                  return true;
                } else if (this.isChunked && !skipBody) {
                  this.state = "BODY_CHUNKHEAD";
                } else if (skipBody || this.body_bytes === 0) {
                  this.nextRequest();
                  return info.upgrade;
                } else if (this.body_bytes === null) {
                  this.state = "BODY_RAW";
                } else {
                  this.state = "BODY_SIZED";
                }
              }
            };
            HTTPParser.prototype.BODY_CHUNKHEAD = function () {
              var line = this.consumeLine();
              if (line === void 0) {
                return;
              }
              this.body_bytes = parseInt(line, 16);
              if (!this.body_bytes) {
                this.state = "BODY_CHUNKTRAILERS";
              } else {
                this.state = "BODY_CHUNK";
              }
            };
            HTTPParser.prototype.BODY_CHUNK = function () {
              var length = Math.min(this.end - this.offset, this.body_bytes);
              this.userCall()(this[kOnBody](this.chunk, this.offset, length));
              this.offset += length;
              this.body_bytes -= length;
              if (!this.body_bytes) {
                this.state = "BODY_CHUNKEMPTYLINE";
              }
            };
            HTTPParser.prototype.BODY_CHUNKEMPTYLINE = function () {
              var line = this.consumeLine();
              if (line === void 0) {
                return;
              }
              assert3.equal(line, "");
              this.state = "BODY_CHUNKHEAD";
            };
            HTTPParser.prototype.BODY_CHUNKTRAILERS = function () {
              var line = this.consumeLine();
              if (line === void 0) {
                return;
              }
              if (line) {
                this.parseHeader(line, this.trailers);
              } else {
                if (this.trailers.length) {
                  this.userCall()(this[kOnHeaders](this.trailers, ""));
                }
                this.nextRequest();
              }
            };
            HTTPParser.prototype.BODY_RAW = function () {
              var length = this.end - this.offset;
              this.userCall()(this[kOnBody](this.chunk, this.offset, length));
              this.offset = this.end;
            };
            HTTPParser.prototype.BODY_SIZED = function () {
              var length = Math.min(this.end - this.offset, this.body_bytes);
              this.userCall()(this[kOnBody](this.chunk, this.offset, length));
              this.offset += length;
              this.body_bytes -= length;
              if (!this.body_bytes) {
                this.nextRequest();
              }
            };
            ["Headers", "HeadersComplete", "Body", "MessageComplete"].forEach(
              function (name2) {
                var k2 = HTTPParser["kOn" + name2];
                Object.defineProperty(HTTPParser.prototype, "on" + name2, {
                  get: function () {
                    return this[k2];
                  },
                  set: function (to) {
                    this._compatMode0_11 = true;
                    method_connect = "CONNECT";
                    return (this[k2] = to);
                  },
                });
              }
            );
            function parseErrorCode(code) {
              var err = new Error("Parse Error");
              err.code = code;
              return err;
            }
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/hybi.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var crypto2 = __require("crypto"),
              util = __require("util"),
              Extensions = __node_require__(10),
              Base = __node_require__(2),
              Frame = __node_require__(17),
              Message = __node_require__(18);
            var Hybi = function (request, url, options) {
              Base.apply(this, arguments);
              this._extensions = new Extensions();
              this._stage = 0;
              this._masking = this._options.masking;
              this._protocols = this._options.protocols || [];
              this._requireMasking = this._options.requireMasking;
              this._pingCallbacks = {};
              if (typeof this._protocols === "string")
                this._protocols = this._protocols.split(/ *, */);
              if (!this._request) return;
              var secKey = this._request.headers["sec-websocket-key"],
                protos = this._request.headers["sec-websocket-protocol"],
                version89 = this._request.headers["sec-websocket-version"],
                supported = this._protocols;
              this._headers.set("Upgrade", "websocket");
              this._headers.set("Connection", "Upgrade");
              this._headers.set(
                "Sec-WebSocket-Accept",
                Hybi.generateAccept(secKey)
              );
              if (protos !== void 0) {
                if (typeof protos === "string") protos = protos.split(/ *, */);
                this.protocol = protos.filter(function (p2) {
                  return supported.indexOf(p2) >= 0;
                })[0];
                if (this.protocol)
                  this._headers.set("Sec-WebSocket-Protocol", this.protocol);
              }
              this.version = "hybi-" + version89;
            };
            util.inherits(Hybi, Base);
            Hybi.mask = function (payload, mask, offset) {
              if (!mask || mask.length === 0) return payload;
              offset = offset || 0;
              for (var i = 0, n = payload.length - offset; i < n; i++) {
                payload[offset + i] = payload[offset + i] ^ mask[i % 4];
              }
              return payload;
            };
            Hybi.generateAccept = function (key3) {
              var sha1 = crypto2.createHash("sha1");
              sha1.update(key3 + Hybi.GUID);
              return sha1.digest("base64");
            };
            Hybi.GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
            var instance = {
              FIN: 128,
              MASK: 128,
              RSV1: 64,
              RSV2: 32,
              RSV3: 16,
              OPCODE: 15,
              LENGTH: 127,
              OPCODES: {
                continuation: 0,
                text: 1,
                binary: 2,
                close: 8,
                ping: 9,
                pong: 10,
              },
              OPCODE_CODES: [0, 1, 2, 8, 9, 10],
              MESSAGE_OPCODES: [0, 1, 2],
              OPENING_OPCODES: [1, 2],
              ERRORS: {
                normal_closure: 1e3,
                going_away: 1001,
                protocol_error: 1002,
                unacceptable: 1003,
                encoding_error: 1007,
                policy_violation: 1008,
                too_large: 1009,
                extension_error: 1010,
                unexpected_condition: 1011,
              },
              ERROR_CODES: [
                1e3, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011,
              ],
              DEFAULT_ERROR_CODE: 1e3,
              MIN_RESERVED_ERROR: 3e3,
              MAX_RESERVED_ERROR: 4999,
              UTF8_MATCH:
                /^([\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})*$/,
              addExtension: function (extension) {
                this._extensions.add(extension);
                return true;
              },
              parse: function (chunk) {
                this._reader.put(chunk);
                var buffer = true;
                while (buffer) {
                  switch (this._stage) {
                    case 0:
                      buffer = this._reader.read(1);
                      if (buffer) this._parseOpcode(buffer[0]);
                      break;
                    case 1:
                      buffer = this._reader.read(1);
                      if (buffer) this._parseLength(buffer[0]);
                      break;
                    case 2:
                      buffer = this._reader.read(this._frame.lengthBytes);
                      if (buffer) this._parseExtendedLength(buffer);
                      break;
                    case 3:
                      buffer = this._reader.read(4);
                      if (buffer) {
                        this._stage = 4;
                        this._frame.maskingKey = buffer;
                      }
                      break;
                    case 4:
                      buffer = this._reader.read(this._frame.length);
                      if (buffer) {
                        this._stage = 0;
                        this._emitFrame(buffer);
                      }
                      break;
                    default:
                      buffer = null;
                  }
                }
              },
              text: function (message) {
                if (this.readyState > 1) return false;
                return this.frame(message, "text");
              },
              binary: function (message) {
                if (this.readyState > 1) return false;
                return this.frame(message, "binary");
              },
              ping: function (message, callback) {
                if (this.readyState > 1) return false;
                message = message || "";
                if (callback) this._pingCallbacks[message] = callback;
                return this.frame(message, "ping");
              },
              pong: function (message) {
                if (this.readyState > 1) return false;
                message = message || "";
                return this.frame(message, "pong");
              },
              close: function (reason, code) {
                reason = reason || "";
                code = code || this.ERRORS.normal_closure;
                if (this.readyState <= 0) {
                  this.readyState = 3;
                  this.emit("close", new Base.CloseEvent(code, reason));
                  return true;
                } else if (this.readyState === 1) {
                  this.readyState = 2;
                  this._extensions.close(function () {
                    this.frame(reason, "close", code);
                  }, this);
                  return true;
                } else {
                  return false;
                }
              },
              frame: function (buffer, type, code) {
                if (this.readyState <= 0)
                  return this._queue([buffer, type, code]);
                if (this.readyState > 2) return false;
                if (buffer instanceof Array) buffer = new Buffer(buffer);
                if (typeof buffer === "number") buffer = buffer.toString();
                var message = new Message(),
                  isText = typeof buffer === "string",
                  payload,
                  copy;
                message.rsv1 = message.rsv2 = message.rsv3 = false;
                message.opcode =
                  this.OPCODES[type || (isText ? "text" : "binary")];
                payload = isText ? new Buffer(buffer, "utf8") : buffer;
                if (code) {
                  copy = payload;
                  payload = new Buffer(2 + copy.length);
                  payload.writeUInt16BE(code, 0);
                  copy.copy(payload, 2);
                }
                message.data = payload;
                var onMessageReady = function (message2) {
                  var frame = new Frame();
                  frame.final = true;
                  frame.rsv1 = message2.rsv1;
                  frame.rsv2 = message2.rsv2;
                  frame.rsv3 = message2.rsv3;
                  frame.opcode = message2.opcode;
                  frame.masked = !!this._masking;
                  frame.length = message2.data.length;
                  frame.payload = message2.data;
                  if (frame.masked) frame.maskingKey = crypto2.randomBytes(4);
                  this._sendFrame(frame);
                };
                if (this.MESSAGE_OPCODES.indexOf(message.opcode) >= 0)
                  this._extensions.processOutgoingMessage(
                    message,
                    function (error, message2) {
                      if (error)
                        return this._fail("extension_error", error.message);
                      onMessageReady.call(this, message2);
                    },
                    this
                  );
                else onMessageReady.call(this, message);
                return true;
              },
              _sendFrame: function (frame) {
                var length = frame.length,
                  header = length <= 125 ? 2 : length <= 65535 ? 4 : 10,
                  offset = header + (frame.masked ? 4 : 0),
                  buffer = new Buffer(offset + length),
                  masked = frame.masked ? this.MASK : 0;
                buffer[0] =
                  (frame.final ? this.FIN : 0) |
                  (frame.rsv1 ? this.RSV1 : 0) |
                  (frame.rsv2 ? this.RSV2 : 0) |
                  (frame.rsv3 ? this.RSV3 : 0) |
                  frame.opcode;
                if (length <= 125) {
                  buffer[1] = masked | length;
                } else if (length <= 65535) {
                  buffer[1] = masked | 126;
                  buffer.writeUInt16BE(length, 2);
                } else {
                  buffer[1] = masked | 127;
                  buffer.writeUInt32BE(Math.floor(length / 4294967296), 2);
                  buffer.writeUInt32BE(length % 4294967296, 6);
                }
                frame.payload.copy(buffer, offset);
                if (frame.masked) {
                  frame.maskingKey.copy(buffer, header);
                  Hybi.mask(buffer, frame.maskingKey, offset);
                }
                this._write(buffer);
              },
              _handshakeResponse: function () {
                try {
                  var extensions = this._extensions.generateResponse(
                    this._request.headers["sec-websocket-extensions"]
                  );
                } catch (e) {
                  return this._fail("protocol_error", e.message);
                }
                if (extensions)
                  this._headers.set("Sec-WebSocket-Extensions", extensions);
                var start = "HTTP/1.1 101 Switching Protocols",
                  headers = [start, this._headers.toString(), ""];
                return new Buffer(headers.join("\r\n"), "utf8");
              },
              _shutdown: function (code, reason, error) {
                delete this._frame;
                delete this._message;
                this._stage = 5;
                var sendCloseFrame = this.readyState === 1;
                this.readyState = 2;
                this._extensions.close(function () {
                  if (sendCloseFrame) this.frame(reason, "close", code);
                  this.readyState = 3;
                  if (error) this.emit("error", new Error(reason));
                  this.emit("close", new Base.CloseEvent(code, reason));
                }, this);
              },
              _fail: function (type, message) {
                if (this.readyState > 1) return;
                this._shutdown(this.ERRORS[type], message, true);
              },
              _parseOpcode: function (octet) {
                var rsvs = [this.RSV1, this.RSV2, this.RSV3].map(function (
                  rsv
                ) {
                  return (octet & rsv) === rsv;
                });
                var frame = (this._frame = new Frame());
                frame.final = (octet & this.FIN) === this.FIN;
                frame.rsv1 = rsvs[0];
                frame.rsv2 = rsvs[1];
                frame.rsv3 = rsvs[2];
                frame.opcode = octet & this.OPCODE;
                this._stage = 1;
                if (!this._extensions.validFrameRsv(frame))
                  return this._fail(
                    "protocol_error",
                    "One or more reserved bits are on: reserved1 = " +
                      (frame.rsv1 ? 1 : 0) +
                      ", reserved2 = " +
                      (frame.rsv2 ? 1 : 0) +
                      ", reserved3 = " +
                      (frame.rsv3 ? 1 : 0)
                  );
                if (this.OPCODE_CODES.indexOf(frame.opcode) < 0)
                  return this._fail(
                    "protocol_error",
                    "Unrecognized frame opcode: " + frame.opcode
                  );
                if (
                  this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 &&
                  !frame.final
                )
                  return this._fail(
                    "protocol_error",
                    "Received fragmented control frame: opcode = " +
                      frame.opcode
                  );
                if (
                  this._message &&
                  this.OPENING_OPCODES.indexOf(frame.opcode) >= 0
                )
                  return this._fail(
                    "protocol_error",
                    "Received new data frame but previous continuous frame is unfinished"
                  );
              },
              _parseLength: function (octet) {
                var frame = this._frame;
                frame.masked = (octet & this.MASK) === this.MASK;
                frame.length = octet & this.LENGTH;
                if (frame.length >= 0 && frame.length <= 125) {
                  this._stage = frame.masked ? 3 : 4;
                  if (!this._checkFrameLength()) return;
                } else {
                  this._stage = 2;
                  frame.lengthBytes = frame.length === 126 ? 2 : 8;
                }
                if (this._requireMasking && !frame.masked)
                  return this._fail(
                    "unacceptable",
                    "Received unmasked frame but masking is required"
                  );
              },
              _parseExtendedLength: function (buffer) {
                var frame = this._frame;
                frame.length = this._readUInt(buffer);
                this._stage = frame.masked ? 3 : 4;
                if (
                  this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 &&
                  frame.length > 125
                )
                  return this._fail(
                    "protocol_error",
                    "Received control frame having too long payload: " +
                      frame.length
                  );
                if (!this._checkFrameLength()) return;
              },
              _checkFrameLength: function () {
                var length = this._message ? this._message.length : 0;
                if (length + this._frame.length > this._maxLength) {
                  this._fail("too_large", "WebSocket frame length too large");
                  return false;
                } else {
                  return true;
                }
              },
              _emitFrame: function (buffer) {
                var frame = this._frame,
                  payload = (frame.payload = Hybi.mask(
                    buffer,
                    frame.maskingKey
                  )),
                  opcode = frame.opcode,
                  message,
                  code,
                  reason,
                  callbacks,
                  callback;
                delete this._frame;
                if (opcode === this.OPCODES.continuation) {
                  if (!this._message)
                    return this._fail(
                      "protocol_error",
                      "Received unexpected continuation frame"
                    );
                  this._message.pushFrame(frame);
                }
                if (
                  opcode === this.OPCODES.text ||
                  opcode === this.OPCODES.binary
                ) {
                  this._message = new Message();
                  this._message.pushFrame(frame);
                }
                if (frame.final && this.MESSAGE_OPCODES.indexOf(opcode) >= 0)
                  return this._emitMessage(this._message);
                if (opcode === this.OPCODES.close) {
                  code = payload.length >= 2 ? payload.readUInt16BE(0) : null;
                  reason =
                    payload.length > 2 ? this._encode(payload.slice(2)) : null;
                  if (
                    !(payload.length === 0) &&
                    !(
                      code !== null &&
                      code >= this.MIN_RESERVED_ERROR &&
                      code <= this.MAX_RESERVED_ERROR
                    ) &&
                    this.ERROR_CODES.indexOf(code) < 0
                  )
                    code = this.ERRORS.protocol_error;
                  if (payload.length > 125 || (payload.length > 2 && !reason))
                    code = this.ERRORS.protocol_error;
                  this._shutdown(code || this.DEFAULT_ERROR_CODE, reason || "");
                }
                if (opcode === this.OPCODES.ping) {
                  this.frame(payload, "pong");
                  this.emit("ping", new Base.PingEvent(payload.toString()));
                }
                if (opcode === this.OPCODES.pong) {
                  callbacks = this._pingCallbacks;
                  message = this._encode(payload);
                  callback = callbacks[message];
                  delete callbacks[message];
                  if (callback) callback();
                  this.emit("pong", new Base.PongEvent(payload.toString()));
                }
              },
              _emitMessage: function (message) {
                var message = this._message;
                message.read();
                delete this._message;
                this._extensions.processIncomingMessage(
                  message,
                  function (error, message2) {
                    if (error)
                      return this._fail("extension_error", error.message);
                    var payload = message2.data;
                    if (message2.opcode === this.OPCODES.text)
                      payload = this._encode(payload);
                    if (payload === null)
                      return this._fail(
                        "encoding_error",
                        "Could not decode a text frame as UTF-8"
                      );
                    else this.emit("message", new Base.MessageEvent(payload));
                  },
                  this
                );
              },
              _encode: function (buffer) {
                try {
                  var string = buffer.toString("binary", 0, buffer.length);
                  if (!this.UTF8_MATCH.test(string)) return null;
                } catch (e) {}
                return buffer.toString("utf8", 0, buffer.length);
              },
              _readUInt: function (buffer) {
                if (buffer.length === 2) return buffer.readUInt16BE(0);
                return (
                  buffer.readUInt32BE(0) * 4294967296 + buffer.readUInt32BE(4)
                );
              },
            };
            for (var key2 in instance) Hybi.prototype[key2] = instance[key2];
            module2.exports = Hybi;
          },
        ],
        [
          "websocket-extensions",
          "/lib/websocket_extensions.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Parser = __node_require__(11),
              Pipeline = __node_require__(12);
            var Extensions = function () {
              this._rsv1 = this._rsv2 = this._rsv3 = null;
              this._byName = {};
              this._inOrder = [];
              this._sessions = [];
              this._index = {};
            };
            Extensions.MESSAGE_OPCODES = [1, 2];
            var instance = {
              add: function (ext) {
                if (typeof ext.name !== "string")
                  throw new TypeError("extension.name must be a string");
                if (ext.type !== "permessage")
                  throw new TypeError('extension.type must be "permessage"');
                if (typeof ext.rsv1 !== "boolean")
                  throw new TypeError("extension.rsv1 must be true or false");
                if (typeof ext.rsv2 !== "boolean")
                  throw new TypeError("extension.rsv2 must be true or false");
                if (typeof ext.rsv3 !== "boolean")
                  throw new TypeError("extension.rsv3 must be true or false");
                if (this._byName.hasOwnProperty(ext.name))
                  throw new TypeError(
                    'An extension with name "' +
                      ext.name +
                      '" is already registered'
                  );
                this._byName[ext.name] = ext;
                this._inOrder.push(ext);
              },
              generateOffer: function () {
                var sessions = [],
                  offer = [],
                  index = {};
                this._inOrder.forEach(function (ext) {
                  var session = ext.createClientSession();
                  if (!session) return;
                  var record = [ext, session];
                  sessions.push(record);
                  index[ext.name] = record;
                  var offers = session.generateOffer();
                  offers = offers ? [].concat(offers) : [];
                  offers.forEach(function (off) {
                    offer.push(Parser.serializeParams(ext.name, off));
                  }, this);
                }, this);
                this._sessions = sessions;
                this._index = index;
                return offer.length > 0 ? offer.join(", ") : null;
              },
              activate: function (header) {
                var responses = Parser.parseHeader(header),
                  sessions = [];
                responses.eachOffer(function (name2, params) {
                  var record = this._index[name2];
                  if (!record)
                    throw new Error(
                      'Server sent an extension response for unknown extension "' +
                        name2 +
                        '"'
                    );
                  var ext = record[0],
                    session = record[1],
                    reserved = this._reserved(ext);
                  if (reserved)
                    throw new Error(
                      "Server sent two extension responses that use the RSV" +
                        reserved[0] +
                        ' bit: "' +
                        reserved[1] +
                        '" and "' +
                        ext.name +
                        '"'
                    );
                  if (session.activate(params) !== true)
                    throw new Error(
                      "Server sent unacceptable extension parameters: " +
                        Parser.serializeParams(name2, params)
                    );
                  this._reserve(ext);
                  sessions.push(record);
                }, this);
                this._sessions = sessions;
                this._pipeline = new Pipeline(sessions);
              },
              generateResponse: function (header) {
                var sessions = [],
                  response = [],
                  offers = Parser.parseHeader(header);
                this._inOrder.forEach(function (ext) {
                  var offer = offers.byName(ext.name);
                  if (offer.length === 0 || this._reserved(ext)) return;
                  var session = ext.createServerSession(offer);
                  if (!session) return;
                  this._reserve(ext);
                  sessions.push([ext, session]);
                  response.push(
                    Parser.serializeParams(ext.name, session.generateResponse())
                  );
                }, this);
                this._sessions = sessions;
                this._pipeline = new Pipeline(sessions);
                return response.length > 0 ? response.join(", ") : null;
              },
              validFrameRsv: function (frame) {
                var allowed = { rsv1: false, rsv2: false, rsv3: false },
                  ext;
                if (Extensions.MESSAGE_OPCODES.indexOf(frame.opcode) >= 0) {
                  for (var i = 0, n = this._sessions.length; i < n; i++) {
                    ext = this._sessions[i][0];
                    allowed.rsv1 = allowed.rsv1 || ext.rsv1;
                    allowed.rsv2 = allowed.rsv2 || ext.rsv2;
                    allowed.rsv3 = allowed.rsv3 || ext.rsv3;
                  }
                }
                return (
                  (allowed.rsv1 || !frame.rsv1) &&
                  (allowed.rsv2 || !frame.rsv2) &&
                  (allowed.rsv3 || !frame.rsv3)
                );
              },
              processIncomingMessage: function (message, callback, context) {
                this._pipeline.processIncomingMessage(
                  message,
                  callback,
                  context
                );
              },
              processOutgoingMessage: function (message, callback, context) {
                this._pipeline.processOutgoingMessage(
                  message,
                  callback,
                  context
                );
              },
              close: function (callback, context) {
                if (!this._pipeline) return callback.call(context);
                this._pipeline.close(callback, context);
              },
              _reserve: function (ext) {
                this._rsv1 = this._rsv1 || (ext.rsv1 && ext.name);
                this._rsv2 = this._rsv2 || (ext.rsv2 && ext.name);
                this._rsv3 = this._rsv3 || (ext.rsv3 && ext.name);
              },
              _reserved: function (ext) {
                if (this._rsv1 && ext.rsv1) return [1, this._rsv1];
                if (this._rsv2 && ext.rsv2) return [2, this._rsv2];
                if (this._rsv3 && ext.rsv3) return [3, this._rsv3];
                return false;
              },
            };
            for (var key2 in instance)
              Extensions.prototype[key2] = instance[key2];
            module2.exports = Extensions;
          },
        ],
        [
          "websocket-extensions",
          "/lib/parser.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var TOKEN = /([!#\$%&'\*\+\-\.\^_`\|~0-9A-Za-z]+)/,
              NOTOKEN = /([^!#\$%&'\*\+\-\.\^_`\|~0-9A-Za-z])/g,
              QUOTED = /"((?:\\[\x00-\x7f]|[^\x00-\x08\x0a-\x1f\x7f"])*)"/,
              PARAM = new RegExp(
                TOKEN.source +
                  "(?:=(?:" +
                  TOKEN.source +
                  "|" +
                  QUOTED.source +
                  "))?"
              ),
              EXT = new RegExp(
                TOKEN.source + "(?: *; *" + PARAM.source + ")*",
                "g"
              ),
              EXT_LIST = new RegExp(
                "^" + EXT.source + "(?: *, *" + EXT.source + ")*$"
              ),
              NUMBER = /^-?(0|[1-9][0-9]*)(\.[0-9]+)?$/;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var Parser = {
              parseHeader: function (header) {
                var offers = new Offers();
                if (header === "" || header === void 0) return offers;
                if (!EXT_LIST.test(header))
                  throw new SyntaxError(
                    "Invalid Sec-WebSocket-Extensions header: " + header
                  );
                var values = header.match(EXT);
                values.forEach(function (value) {
                  var params = value.match(new RegExp(PARAM.source, "g")),
                    name2 = params.shift(),
                    offer = {};
                  params.forEach(function (param) {
                    var args = param.match(PARAM),
                      key2 = args[1],
                      data;
                    if (args[2] !== void 0) {
                      data = args[2];
                    } else if (args[3] !== void 0) {
                      data = args[3].replace(/\\/g, "");
                    } else {
                      data = true;
                    }
                    if (NUMBER.test(data)) data = parseFloat(data);
                    if (hasOwnProperty.call(offer, key2)) {
                      offer[key2] = [].concat(offer[key2]);
                      offer[key2].push(data);
                    } else {
                      offer[key2] = data;
                    }
                  }, this);
                  offers.push(name2, offer);
                }, this);
                return offers;
              },
              serializeParams: function (name2, params) {
                var values = [];
                var print = function (key3, value) {
                  if (value instanceof Array) {
                    value.forEach(function (v2) {
                      print(key3, v2);
                    });
                  } else if (value === true) {
                    values.push(key3);
                  } else if (typeof value === "number") {
                    values.push(key3 + "=" + value);
                  } else if (NOTOKEN.test(value)) {
                    values.push(key3 + '="' + value.replace(/"/g, '\\"') + '"');
                  } else {
                    values.push(key3 + "=" + value);
                  }
                };
                for (var key2 in params) print(key2, params[key2]);
                return [name2].concat(values).join("; ");
              },
            };
            var Offers = function () {
              this._byName = {};
              this._inOrder = [];
            };
            Offers.prototype.push = function (name2, params) {
              if (!hasOwnProperty.call(this._byName, name2))
                this._byName[name2] = [];
              this._byName[name2].push(params);
              this._inOrder.push({ name: name2, params });
            };
            Offers.prototype.eachOffer = function (callback, context) {
              var list = this._inOrder;
              for (var i = 0, n = list.length; i < n; i++)
                callback.call(context, list[i].name, list[i].params);
            };
            Offers.prototype.byName = function (name2) {
              return this._byName[name2] || [];
            };
            Offers.prototype.toArray = function () {
              return this._inOrder.slice();
            };
            module2.exports = Parser;
          },
        ],
        [
          "websocket-extensions",
          "/lib/pipeline/index.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Cell = __node_require__(13),
              Pledge = __node_require__(16);
            var Pipeline = function (sessions) {
              this._cells = sessions.map(function (session) {
                return new Cell(session);
              });
              this._stopped = { incoming: false, outgoing: false };
            };
            Pipeline.prototype.processIncomingMessage = function (
              message,
              callback,
              context
            ) {
              if (this._stopped.incoming) return;
              this._loop(
                "incoming",
                this._cells.length - 1,
                -1,
                -1,
                message,
                callback,
                context
              );
            };
            Pipeline.prototype.processOutgoingMessage = function (
              message,
              callback,
              context
            ) {
              if (this._stopped.outgoing) return;
              this._loop(
                "outgoing",
                0,
                this._cells.length,
                1,
                message,
                callback,
                context
              );
            };
            Pipeline.prototype.close = function (callback, context) {
              this._stopped = { incoming: true, outgoing: true };
              var closed = this._cells.map(function (a2) {
                return a2.close();
              });
              if (callback)
                Pledge.all(closed).then(function () {
                  callback.call(context);
                });
            };
            Pipeline.prototype._loop = function (
              direction,
              start,
              end,
              step,
              message,
              callback,
              context
            ) {
              var cells = this._cells,
                n = cells.length,
                self2 = this;
              while (n--) cells[n].pending(direction);
              var pipe = function (index, error, msg) {
                if (index === end) return callback.call(context, error, msg);
                cells[index][direction](error, msg, function (err, m2) {
                  if (err) self2._stopped[direction] = true;
                  pipe(index + step, err, m2);
                });
              };
              pipe(start, null, message);
            };
            module2.exports = Pipeline;
          },
        ],
        [
          "websocket-extensions",
          "/lib/pipeline/cell.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Functor = __node_require__(14),
              Pledge = __node_require__(16);
            var Cell = function (tuple) {
              this._ext = tuple[0];
              this._session = tuple[1];
              this._functors = {
                incoming: new Functor(this._session, "processIncomingMessage"),
                outgoing: new Functor(this._session, "processOutgoingMessage"),
              };
            };
            Cell.prototype.pending = function (direction) {
              var functor = this._functors[direction];
              if (!functor._stopped) functor.pending += 1;
            };
            Cell.prototype.incoming = function (
              error,
              message,
              callback,
              context
            ) {
              this._exec("incoming", error, message, callback, context);
            };
            Cell.prototype.outgoing = function (
              error,
              message,
              callback,
              context
            ) {
              this._exec("outgoing", error, message, callback, context);
            };
            Cell.prototype.close = function () {
              this._closed = this._closed || new Pledge();
              this._doClose();
              return this._closed;
            };
            Cell.prototype._exec = function (
              direction,
              error,
              message,
              callback,
              context
            ) {
              this._functors[direction].call(
                error,
                message,
                function (err, msg) {
                  if (err) err.message = this._ext.name + ": " + err.message;
                  callback.call(context, err, msg);
                  this._doClose();
                },
                this
              );
            };
            Cell.prototype._doClose = function () {
              var fin = this._functors.incoming,
                fout = this._functors.outgoing;
              if (!this._closed || fin.pending + fout.pending !== 0) return;
              if (this._session) this._session.close();
              this._session = null;
              this._closed.done();
            };
            module2.exports = Cell;
          },
        ],
        [
          "websocket-extensions",
          "/lib/pipeline/functor.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var RingBuffer = __node_require__(15);
            var Functor = function (session, method) {
              this._session = session;
              this._method = method;
              this._queue = new RingBuffer(Functor.QUEUE_SIZE);
              this._stopped = false;
              this.pending = 0;
            };
            Functor.QUEUE_SIZE = 8;
            Functor.prototype.call = function (
              error,
              message,
              callback,
              context
            ) {
              if (this._stopped) return;
              var record = { error, message, callback, context, done: false },
                called = false,
                self2 = this;
              this._queue.push(record);
              if (record.error) {
                record.done = true;
                this._stop();
                return this._flushQueue();
              }
              var handler = function (err, msg) {
                if (!(called ^ (called = true))) return;
                if (err) {
                  self2._stop();
                  record.error = err;
                  record.message = null;
                } else {
                  record.message = msg;
                }
                record.done = true;
                self2._flushQueue();
              };
              try {
                this._session[this._method](message, handler);
              } catch (err) {
                handler(err);
              }
            };
            Functor.prototype._stop = function () {
              this.pending = this._queue.length;
              this._stopped = true;
            };
            Functor.prototype._flushQueue = function () {
              var queue = this._queue,
                record;
              while (queue.length > 0 && queue.peek().done) {
                record = queue.shift();
                if (record.error) {
                  this.pending = 0;
                  queue.clear();
                } else {
                  this.pending -= 1;
                }
                record.callback.call(
                  record.context,
                  record.error,
                  record.message
                );
              }
            };
            module2.exports = Functor;
          },
        ],
        [
          "websocket-extensions",
          "/lib/pipeline/ring_buffer.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var RingBuffer = function (bufferSize) {
              this._bufferSize = bufferSize;
              this.clear();
            };
            RingBuffer.prototype.clear = function () {
              this._buffer = new Array(this._bufferSize);
              this._ringOffset = 0;
              this._ringSize = this._bufferSize;
              this._head = 0;
              this._tail = 0;
              this.length = 0;
            };
            RingBuffer.prototype.push = function (value) {
              var expandBuffer = false,
                expandRing = false;
              if (this._ringSize < this._bufferSize) {
                expandBuffer = this._tail === 0;
              } else if (this._ringOffset === this._ringSize) {
                expandBuffer = true;
                expandRing = this._tail === 0;
              }
              if (expandBuffer) {
                this._tail = this._bufferSize;
                this._buffer = this._buffer.concat(new Array(this._bufferSize));
                this._bufferSize = this._buffer.length;
                if (expandRing) this._ringSize = this._bufferSize;
              }
              this._buffer[this._tail] = value;
              this.length += 1;
              if (this._tail < this._ringSize) this._ringOffset += 1;
              this._tail = (this._tail + 1) % this._bufferSize;
            };
            RingBuffer.prototype.peek = function () {
              if (this.length === 0) return void 0;
              return this._buffer[this._head];
            };
            RingBuffer.prototype.shift = function () {
              if (this.length === 0) return void 0;
              var value = this._buffer[this._head];
              this._buffer[this._head] = void 0;
              this.length -= 1;
              this._ringOffset -= 1;
              if (this._ringOffset === 0 && this.length > 0) {
                this._head = this._ringSize;
                this._ringOffset = this.length;
                this._ringSize = this._bufferSize;
              } else {
                this._head = (this._head + 1) % this._ringSize;
              }
              return value;
            };
            module2.exports = RingBuffer;
          },
        ],
        [
          "websocket-extensions",
          "/lib/pipeline/pledge.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var RingBuffer = __node_require__(15);
            var Pledge = function () {
              this._complete = false;
              this._callbacks = new RingBuffer(Pledge.QUEUE_SIZE);
            };
            Pledge.QUEUE_SIZE = 4;
            Pledge.all = function (list) {
              var pledge = new Pledge(),
                pending = list.length,
                n = pending;
              if (pending === 0) pledge.done();
              while (n--)
                list[n].then(function () {
                  pending -= 1;
                  if (pending === 0) pledge.done();
                });
              return pledge;
            };
            Pledge.prototype.then = function (callback) {
              if (this._complete) callback();
              else this._callbacks.push(callback);
            };
            Pledge.prototype.done = function () {
              this._complete = true;
              var callbacks = this._callbacks,
                callback;
              while ((callback = callbacks.shift())) callback();
            };
            module2.exports = Pledge;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/hybi/frame.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Frame = function () {};
            var instance = {
              final: false,
              rsv1: false,
              rsv2: false,
              rsv3: false,
              opcode: null,
              masked: false,
              maskingKey: null,
              lengthBytes: 1,
              length: 0,
              payload: null,
            };
            for (var key2 in instance) Frame.prototype[key2] = instance[key2];
            module2.exports = Frame;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/hybi/message.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Message = function () {
              this.rsv1 = false;
              this.rsv2 = false;
              this.rsv3 = false;
              this.opcode = null;
              this.length = 0;
              this._chunks = [];
            };
            var instance = {
              read: function () {
                if (this.data) return this.data;
                this.data = new Buffer(this.length);
                var offset = 0;
                for (var i = 0, n = this._chunks.length; i < n; i++) {
                  this._chunks[i].copy(this.data, offset);
                  offset += this._chunks[i].length;
                }
                return this.data;
              },
              pushFrame: function (frame) {
                this.rsv1 = this.rsv1 || frame.rsv1;
                this.rsv2 = this.rsv2 || frame.rsv2;
                this.rsv3 = this.rsv3 || frame.rsv3;
                if (this.opcode === null) this.opcode = frame.opcode;
                this._chunks.push(frame.payload);
                this.length += frame.length;
              },
            };
            for (var key2 in instance) Message.prototype[key2] = instance[key2];
            module2.exports = Message;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/proxy.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Stream = __require("stream").Stream,
              url = __require("url"),
              util = __require("util"),
              Base = __node_require__(2),
              Headers = __node_require__(4),
              HttpParser = __node_require__(7);
            var PORTS = { "ws:": 80, "wss:": 443 };
            var Proxy2 = function (client, origin, options) {
              this._client = client;
              this._http = new HttpParser("response");
              this._origin =
                typeof client.url === "object"
                  ? client.url
                  : url.parse(client.url);
              this._url =
                typeof origin === "object" ? origin : url.parse(origin);
              this._options = options || {};
              this._state = 0;
              this.readable = this.writable = true;
              this._paused = false;
              this._headers = new Headers();
              this._headers.set("Host", this._origin.host);
              this._headers.set("Connection", "keep-alive");
              this._headers.set("Proxy-Connection", "keep-alive");
              var auth =
                this._url.auth &&
                new Buffer(this._url.auth, "utf8").toString("base64");
              if (auth)
                this._headers.set("Proxy-Authorization", "Basic " + auth);
            };
            util.inherits(Proxy2, Stream);
            var instance = {
              setHeader: function (name2, value) {
                if (this._state !== 0) return false;
                this._headers.set(name2, value);
                return true;
              },
              start: function () {
                if (this._state !== 0) return false;
                this._state = 1;
                var origin = this._origin,
                  port = origin.port || PORTS[origin.protocol],
                  start =
                    "CONNECT " + origin.hostname + ":" + port + " HTTP/1.1";
                var headers = [start, this._headers.toString(), ""];
                this.emit("data", new Buffer(headers.join("\r\n"), "utf8"));
                return true;
              },
              pause: function () {
                this._paused = true;
              },
              resume: function () {
                this._paused = false;
                this.emit("drain");
              },
              write: function (chunk) {
                if (!this.writable) return false;
                this._http.parse(chunk);
                if (!this._http.isComplete()) return !this._paused;
                this.statusCode = this._http.statusCode;
                this.headers = this._http.headers;
                if (this.statusCode === 200) {
                  this.emit("connect", new Base.ConnectEvent());
                } else {
                  var message =
                    "Can't establish a connection to the server at " +
                    this._origin.href;
                  this.emit("error", new Error(message));
                }
                this.end();
                return !this._paused;
              },
              end: function (chunk) {
                if (!this.writable) return;
                if (chunk !== void 0) this.write(chunk);
                this.readable = this.writable = false;
                this.emit("close");
                this.emit("end");
              },
              destroy: function () {
                this.end();
              },
            };
            for (var key2 in instance) Proxy2.prototype[key2] = instance[key2];
            module2.exports = Proxy2;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/server.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var util = __require("util"),
              HttpParser = __node_require__(7),
              Base = __node_require__(2),
              Draft75 = __node_require__(21),
              Draft76 = __node_require__(22),
              Hybi = __node_require__(9);
            var Server = function (options) {
              Base.call(this, null, null, options);
              this._http = new HttpParser("request");
            };
            util.inherits(Server, Base);
            var instance = {
              EVENTS: ["open", "message", "error", "close"],
              _bindEventListeners: function () {
                this.messages.on("error", function () {});
                this.on("error", function () {});
              },
              parse: function (chunk) {
                if (this._delegate) return this._delegate.parse(chunk);
                this._http.parse(chunk);
                if (!this._http.isComplete()) return;
                this.method = this._http.method;
                this.url = this._http.url;
                this.headers = this._http.headers;
                this.body = this._http.body;
                var self2 = this;
                this._delegate = Server.http(this, this._options);
                this._delegate.messages = this.messages;
                this._delegate.io = this.io;
                this._open();
                this.EVENTS.forEach(function (event) {
                  this._delegate.on(event, function (e) {
                    self2.emit(event, e);
                  });
                }, this);
                this.protocol = this._delegate.protocol;
                this.version = this._delegate.version;
                this.parse(this._http.body);
                this.emit("connect", new Base.ConnectEvent());
              },
              _open: function () {
                this.__queue.forEach(function (msg) {
                  this._delegate[msg[0]].apply(this._delegate, msg[1]);
                }, this);
                this.__queue = [];
              },
            };
            [
              "addExtension",
              "setHeader",
              "start",
              "frame",
              "text",
              "binary",
              "ping",
              "close",
            ].forEach(function (method) {
              instance[method] = function () {
                if (this._delegate) {
                  return this._delegate[method].apply(
                    this._delegate,
                    arguments
                  );
                } else {
                  this.__queue.push([method, arguments]);
                  return true;
                }
              };
            });
            for (var key2 in instance) Server.prototype[key2] = instance[key2];
            Server.isSecureRequest = function (request) {
              if (
                request.connection &&
                request.connection.authorized !== void 0
              )
                return true;
              if (request.socket && request.socket.secure) return true;
              var headers = request.headers;
              if (!headers) return false;
              if (headers["https"] === "on") return true;
              if (headers["x-forwarded-ssl"] === "on") return true;
              if (headers["x-forwarded-scheme"] === "https") return true;
              if (headers["x-forwarded-proto"] === "https") return true;
              return false;
            };
            Server.determineUrl = function (request) {
              var scheme = this.isSecureRequest(request) ? "wss:" : "ws:";
              return scheme + "//" + request.headers.host + request.url;
            };
            Server.http = function (request, options) {
              options = options || {};
              if (options.requireMasking === void 0)
                options.requireMasking = true;
              var headers = request.headers,
                url = this.determineUrl(request);
              if (headers["sec-websocket-version"])
                return new Hybi(request, url, options);
              else if (headers["sec-websocket-key1"])
                return new Draft76(request, url, options);
              else return new Draft75(request, url, options);
            };
            module2.exports = Server;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/draft75.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Base = __node_require__(2),
              util = __require("util");
            var Draft75 = function (request, url, options) {
              Base.apply(this, arguments);
              this._stage = 0;
              this.version = "hixie-75";
              this._headers.set("Upgrade", "WebSocket");
              this._headers.set("Connection", "Upgrade");
              this._headers.set(
                "WebSocket-Origin",
                this._request.headers.origin
              );
              this._headers.set("WebSocket-Location", this.url);
            };
            util.inherits(Draft75, Base);
            var instance = {
              close: function () {
                if (this.readyState === 3) return false;
                this.readyState = 3;
                this.emit("close", new Base.CloseEvent(null, null));
                return true;
              },
              parse: function (chunk) {
                if (this.readyState > 1) return;
                this._reader.put(chunk);
                this._reader.eachByte(function (octet) {
                  var message;
                  switch (this._stage) {
                    case -1:
                      this._body.push(octet);
                      this._sendHandshakeBody();
                      break;
                    case 0:
                      this._parseLeadingByte(octet);
                      break;
                    case 1:
                      this._length = (octet & 127) + 128 * this._length;
                      if (this._closing && this._length === 0) {
                        return this.close();
                      } else if ((octet & 128) !== 128) {
                        if (this._length === 0) {
                          this._stage = 0;
                        } else {
                          this._skipped = 0;
                          this._stage = 2;
                        }
                      }
                      break;
                    case 2:
                      if (octet === 255) {
                        this._stage = 0;
                        message = new Buffer(this._buffer).toString(
                          "utf8",
                          0,
                          this._buffer.length
                        );
                        this.emit("message", new Base.MessageEvent(message));
                      } else {
                        if (this._length) {
                          this._skipped += 1;
                          if (this._skipped === this._length) this._stage = 0;
                        } else {
                          this._buffer.push(octet);
                          if (this._buffer.length > this._maxLength)
                            return this.close();
                        }
                      }
                      break;
                  }
                }, this);
              },
              frame: function (buffer) {
                if (this.readyState === 0) return this._queue([buffer]);
                if (this.readyState > 1) return false;
                if (typeof buffer !== "string") buffer = buffer.toString();
                var payload = new Buffer(buffer, "utf8"),
                  frame = new Buffer(payload.length + 2);
                frame[0] = 0;
                frame[payload.length + 1] = 255;
                payload.copy(frame, 1);
                this._write(frame);
                return true;
              },
              _handshakeResponse: function () {
                var start = "HTTP/1.1 101 Web Socket Protocol Handshake",
                  headers = [start, this._headers.toString(), ""];
                return new Buffer(headers.join("\r\n"), "utf8");
              },
              _parseLeadingByte: function (octet) {
                if ((octet & 128) === 128) {
                  this._length = 0;
                  this._stage = 1;
                } else {
                  delete this._length;
                  delete this._skipped;
                  this._buffer = [];
                  this._stage = 2;
                }
              },
            };
            for (var key2 in instance) Draft75.prototype[key2] = instance[key2];
            module2.exports = Draft75;
          },
        ],
        [
          "websocket-driver",
          "/lib/websocket/driver/draft76.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            "use strict";
            var Base = __node_require__(2),
              Draft75 = __node_require__(21),
              crypto2 = __require("crypto"),
              util = __require("util");
            var numberFromKey = function (key3) {
              return parseInt(key3.match(/[0-9]/g).join(""), 10);
            };
            var spacesInKey = function (key3) {
              return key3.match(/ /g).length;
            };
            var Draft76 = function (request, url, options) {
              Draft75.apply(this, arguments);
              this._stage = -1;
              this._body = [];
              this.version = "hixie-76";
              this._headers.clear();
              this._headers.set("Upgrade", "WebSocket");
              this._headers.set("Connection", "Upgrade");
              this._headers.set(
                "Sec-WebSocket-Origin",
                this._request.headers.origin
              );
              this._headers.set("Sec-WebSocket-Location", this.url);
            };
            util.inherits(Draft76, Draft75);
            var instance = {
              BODY_SIZE: 8,
              start: function () {
                if (!Draft75.prototype.start.call(this)) return false;
                this._started = true;
                this._sendHandshakeBody();
                return true;
              },
              close: function () {
                if (this.readyState === 3) return false;
                this._write(new Buffer([255, 0]));
                this.readyState = 3;
                this.emit("close", new Base.CloseEvent(null, null));
                return true;
              },
              _handshakeResponse: function () {
                var headers = this._request.headers,
                  key1 = headers["sec-websocket-key1"],
                  number1 = numberFromKey(key1),
                  spaces1 = spacesInKey(key1),
                  key22 = headers["sec-websocket-key2"],
                  number2 = numberFromKey(key22),
                  spaces2 = spacesInKey(key22);
                if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) {
                  this.emit(
                    "error",
                    new Error("Client sent invalid Sec-WebSocket-Key headers")
                  );
                  this.close();
                  return null;
                }
                this._keyValues = [number1 / spaces1, number2 / spaces2];
                var start = "HTTP/1.1 101 WebSocket Protocol Handshake",
                  headers = [start, this._headers.toString(), ""];
                return new Buffer(headers.join("\r\n"), "binary");
              },
              _handshakeSignature: function () {
                if (this._body.length < this.BODY_SIZE) return null;
                var md5 = crypto2.createHash("md5"),
                  buffer = new Buffer(8 + this.BODY_SIZE);
                buffer.writeUInt32BE(this._keyValues[0], 0);
                buffer.writeUInt32BE(this._keyValues[1], 4);
                new Buffer(this._body).copy(buffer, 8, 0, this.BODY_SIZE);
                md5.update(buffer);
                return new Buffer(md5.digest("binary"), "binary");
              },
              _sendHandshakeBody: function () {
                if (!this._started) return;
                var signature2 = this._handshakeSignature();
                if (!signature2) return;
                this._write(signature2);
                this._stage = 0;
                this._open();
                if (this._body.length > this.BODY_SIZE)
                  this.parse(this._body.slice(this.BODY_SIZE));
              },
              _parseLeadingByte: function (octet) {
                if (octet !== 255)
                  return Draft75.prototype._parseLeadingByte.call(this, octet);
                this._closing = true;
                this._length = 0;
                this._stage = 1;
              },
            };
            for (var key2 in instance) Draft76.prototype[key2] = instance[key2];
            module2.exports = Draft76;
          },
        ],
        [
          "faye-websocket",
          "/lib/faye/websocket/api.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var Stream = __require("stream").Stream,
              util = __require("util"),
              driver = __node_require__(1),
              EventTarget = __node_require__(24),
              Event2 = __node_require__(25);
            var API = function (options) {
              options = options || {};
              driver.validateOptions(options, [
                "headers",
                "extensions",
                "maxLength",
                "ping",
                "proxy",
                "tls",
                "ca",
              ]);
              this.readable = this.writable = true;
              var headers = options.headers;
              if (headers) {
                for (var name2 in headers)
                  this._driver.setHeader(name2, headers[name2]);
              }
              var extensions = options.extensions;
              if (extensions) {
                []
                  .concat(extensions)
                  .forEach(this._driver.addExtension, this._driver);
              }
              this._ping = options.ping;
              this._pingId = 0;
              this.readyState = API.CONNECTING;
              this.bufferedAmount = 0;
              this.protocol = "";
              this.url = this._driver.url;
              this.version = this._driver.version;
              var self2 = this;
              this._driver.on("open", function (e) {
                self2._open();
              });
              this._driver.on("message", function (e) {
                self2._receiveMessage(e.data);
              });
              this._driver.on("close", function (e) {
                self2._beginClose(e.reason, e.code);
              });
              this._driver.on("error", function (error) {
                self2._emitError(error.message);
              });
              this.on("error", function () {});
              this._driver.messages.on("drain", function () {
                self2.emit("drain");
              });
              if (this._ping)
                this._pingTimer = setInterval(function () {
                  self2._pingId += 1;
                  self2.ping(self2._pingId.toString());
                }, this._ping * 1e3);
              this._configureStream();
              if (!this._proxy) {
                this._stream.pipe(this._driver.io);
                this._driver.io.pipe(this._stream);
              }
            };
            util.inherits(API, Stream);
            API.CONNECTING = 0;
            API.OPEN = 1;
            API.CLOSING = 2;
            API.CLOSED = 3;
            API.CLOSE_TIMEOUT = 3e4;
            var instance = {
              write: function (data) {
                return this.send(data);
              },
              end: function (data) {
                if (data !== void 0) this.send(data);
                this.close();
              },
              pause: function () {
                return this._driver.messages.pause();
              },
              resume: function () {
                return this._driver.messages.resume();
              },
              send: function (data) {
                if (this.readyState > API.OPEN) return false;
                if (!(data instanceof Buffer)) data = String(data);
                return this._driver.messages.write(data);
              },
              ping: function (message, callback) {
                if (this.readyState > API.OPEN) return false;
                return this._driver.ping(message, callback);
              },
              close: function (code, reason) {
                if (code === void 0) code = 1e3;
                if (reason === void 0) reason = "";
                if (code !== 1e3 && (code < 3e3 || code > 4999))
                  throw new Error(
                    "Failed to execute 'close' on WebSocket: The code must be either 1000, or between 3000 and 4999. " +
                      code +
                      " is neither."
                  );
                if (this.readyState !== API.CLOSED)
                  this.readyState = API.CLOSING;
                var self2 = this;
                this._closeTimer = setTimeout(function () {
                  self2._beginClose("", 1006);
                }, API.CLOSE_TIMEOUT);
                this._driver.close(reason, code);
              },
              _configureStream: function () {
                var self2 = this;
                this._stream.setTimeout(0);
                this._stream.setNoDelay(true);
                ["close", "end"].forEach(function (event) {
                  this._stream.on(event, function () {
                    self2._finalizeClose();
                  });
                }, this);
                this._stream.on("error", function (error) {
                  self2._emitError(
                    "Network error: " + self2.url + ": " + error.message
                  );
                  self2._finalizeClose();
                });
              },
              _open: function () {
                if (this.readyState !== API.CONNECTING) return;
                this.readyState = API.OPEN;
                this.protocol = this._driver.protocol || "";
                var event = new Event2("open");
                event.initEvent("open", false, false);
                this.dispatchEvent(event);
              },
              _receiveMessage: function (data) {
                if (this.readyState > API.OPEN) return false;
                if (this.readable) this.emit("data", data);
                var event = new Event2("message", { data });
                event.initEvent("message", false, false);
                this.dispatchEvent(event);
              },
              _emitError: function (message) {
                if (this.readyState >= API.CLOSING) return;
                var event = new Event2("error", { message });
                event.initEvent("error", false, false);
                this.dispatchEvent(event);
              },
              _beginClose: function (reason, code) {
                if (this.readyState === API.CLOSED) return;
                this.readyState = API.CLOSING;
                this._closeParams = [reason, code];
                if (this._stream) {
                  this._stream.destroy();
                  if (!this._stream.readable) this._finalizeClose();
                }
              },
              _finalizeClose: function () {
                if (this._closeTimer) clearTimeout(this._closeTimer);
                if (this.readyState === API.CLOSED) return;
                this.readyState = API.CLOSED;
                if (this._pingTimer) clearInterval(this._pingTimer);
                if (this._stream) this._stream.end();
                if (this.readable) this.emit("end");
                this.readable = this.writable = false;
                var reason = this._closeParams ? this._closeParams[0] : "",
                  code = this._closeParams ? this._closeParams[1] : 1006;
                var event = new Event2("close", { code, reason });
                event.initEvent("close", false, false);
                this.dispatchEvent(event);
              },
            };
            for (var method in instance)
              API.prototype[method] = instance[method];
            for (var key2 in EventTarget)
              API.prototype[key2] = EventTarget[key2];
            module2.exports = API;
          },
        ],
        [
          "faye-websocket",
          "/lib/faye/websocket/api/event_target.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var Event2 = __node_require__(25);
            var EventTarget = {
              onopen: null,
              onmessage: null,
              onerror: null,
              onclose: null,
              addEventListener: function (eventType, listener, useCapture) {
                this.on(eventType, listener);
              },
              removeEventListener: function (eventType, listener, useCapture) {
                this.removeListener(eventType, listener);
              },
              dispatchEvent: function (event) {
                event.target = event.currentTarget = this;
                event.eventPhase = Event2.AT_TARGET;
                if (this["on" + event.type]) this["on" + event.type](event);
                this.emit(event.type, event);
              },
            };
            module2.exports = EventTarget;
          },
        ],
        [
          "faye-websocket",
          "/lib/faye/websocket/api/event.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var Event2 = function (eventType, options) {
              this.type = eventType;
              for (var key2 in options) this[key2] = options[key2];
            };
            Event2.prototype.initEvent = function (
              eventType,
              canBubble,
              cancelable
            ) {
              this.type = eventType;
              this.bubbles = canBubble;
              this.cancelable = cancelable;
            };
            Event2.prototype.stopPropagation = function () {};
            Event2.prototype.preventDefault = function () {};
            Event2.CAPTURING_PHASE = 1;
            Event2.AT_TARGET = 2;
            Event2.BUBBLING_PHASE = 3;
            module2.exports = Event2;
          },
        ],
        [
          "faye-websocket",
          "/lib/faye/websocket/client.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var util = __require("util"),
              net = __require("net"),
              tls = __require("tls"),
              url = __require("url"),
              driver = __node_require__(1),
              API = __node_require__(23),
              Event2 = __node_require__(25);
            var DEFAULT_PORTS = {
                "http:": 80,
                "https:": 443,
                "ws:": 80,
                "wss:": 443,
              },
              SECURE_PROTOCOLS = ["https:", "wss:"];
            var Client = function (_url, protocols, options) {
              options = options || {};
              this.url = _url;
              this._driver = driver.client(this.url, {
                maxLength: options.maxLength,
                protocols,
              });
              ["open", "error"].forEach(function (event) {
                this._driver.on(event, function () {
                  self2.headers = self2._driver.headers;
                  self2.statusCode = self2._driver.statusCode;
                });
              }, this);
              var proxy = options.proxy || {},
                endpoint = url.parse(proxy.origin || this.url),
                port = endpoint.port || DEFAULT_PORTS[endpoint.protocol],
                secure = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,
                onConnect = function () {
                  self2._onConnect();
                },
                netOptions = options.net || {},
                originTLS = options.tls || {},
                socketTLS = proxy.origin ? proxy.tls || {} : originTLS,
                self2 = this;
              netOptions.host = socketTLS.host = endpoint.hostname;
              netOptions.port = socketTLS.port = port;
              originTLS.ca = originTLS.ca || options.ca;
              socketTLS.servername = socketTLS.servername || endpoint.hostname;
              this._stream = secure
                ? tls.connect(socketTLS, onConnect)
                : net.connect(netOptions, onConnect);
              if (proxy.origin) this._configureProxy(proxy, originTLS);
              API.call(this, options);
            };
            util.inherits(Client, API);
            Client.prototype._onConnect = function () {
              var worker = this._proxy || this._driver;
              worker.start();
            };
            Client.prototype._configureProxy = function (proxy, originTLS) {
              var uri = url.parse(this.url),
                secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,
                self2 = this,
                name2;
              this._proxy = this._driver.proxy(proxy.origin);
              if (proxy.headers) {
                for (name2 in proxy.headers)
                  this._proxy.setHeader(name2, proxy.headers[name2]);
              }
              this._proxy.pipe(this._stream, { end: false });
              this._stream.pipe(this._proxy);
              this._proxy.on("connect", function () {
                if (secure) {
                  var options = {
                    socket: self2._stream,
                    servername: uri.hostname,
                  };
                  for (name2 in originTLS) options[name2] = originTLS[name2];
                  self2._stream = tls.connect(options);
                  self2._configureStream();
                }
                self2._driver.io.pipe(self2._stream);
                self2._stream.pipe(self2._driver.io);
                self2._driver.start();
              });
              this._proxy.on("error", function (error) {
                self2._driver.emit("error", error);
              });
            };
            module2.exports = Client;
          },
        ],
        [
          "faye-websocket",
          "/lib/faye/eventsource.js",
          function (exports2, module2, __filename2, __dirname2, __meta) {
            var Stream = __require("stream").Stream,
              util = __require("util"),
              driver = __node_require__(1),
              Headers = __node_require__(4),
              API = __node_require__(23),
              EventTarget = __node_require__(24),
              Event2 = __node_require__(25);
            var EventSource = function (request, response, options) {
              this.writable = true;
              options = options || {};
              this._stream = response.socket;
              this._ping = options.ping || this.DEFAULT_PING;
              this._retry = options.retry || this.DEFAULT_RETRY;
              var scheme = driver.isSecureRequest(request) ? "https:" : "http:";
              this.url = scheme + "//" + request.headers.host + request.url;
              this.lastEventId = request.headers["last-event-id"] || "";
              this.readyState = API.CONNECTING;
              var headers = new Headers(),
                self2 = this;
              if (options.headers) {
                for (var key3 in options.headers)
                  headers.set(key3, options.headers[key3]);
              }
              if (!this._stream || !this._stream.writable) return;
              process.nextTick(function () {
                self2._open();
              });
              this._stream.setTimeout(0);
              this._stream.setNoDelay(true);
              var handshake =
                "HTTP/1.1 200 OK\r\nContent-Type: text/event-stream\r\nCache-Control: no-cache, no-store\r\nConnection: close\r\n" +
                headers.toString() +
                "\r\nretry: " +
                Math.floor(this._retry * 1e3) +
                "\r\n\r\n";
              this._write(handshake);
              this._stream.on("drain", function () {
                self2.emit("drain");
              });
              if (this._ping)
                this._pingTimer = setInterval(function () {
                  self2.ping();
                }, this._ping * 1e3);
              ["error", "end"].forEach(function (event) {
                self2._stream.on(event, function () {
                  self2.close();
                });
              });
            };
            util.inherits(EventSource, Stream);
            EventSource.isEventSource = function (request) {
              if (request.method !== "GET") return false;
              var accept = (request.headers.accept || "").split(/\s*,\s*/);
              return accept.indexOf("text/event-stream") >= 0;
            };
            var instance = {
              DEFAULT_PING: 10,
              DEFAULT_RETRY: 5,
              _write: function (chunk) {
                if (!this.writable) return false;
                try {
                  return this._stream.write(chunk, "utf8");
                } catch (e) {
                  return false;
                }
              },
              _open: function () {
                if (this.readyState !== API.CONNECTING) return;
                this.readyState = API.OPEN;
                var event = new Event2("open");
                event.initEvent("open", false, false);
                this.dispatchEvent(event);
              },
              write: function (message) {
                return this.send(message);
              },
              end: function (message) {
                if (message !== void 0) this.write(message);
                this.close();
              },
              send: function (message, options) {
                if (this.readyState > API.OPEN) return false;
                message = String(message).replace(/(\r\n|\r|\n)/g, "$1data: ");
                options = options || {};
                var frame = "";
                if (options.event) frame += "event: " + options.event + "\r\n";
                if (options.id) frame += "id: " + options.id + "\r\n";
                frame += "data: " + message + "\r\n\r\n";
                return this._write(frame);
              },
              ping: function () {
                return this._write(":\r\n\r\n");
              },
              close: function () {
                if (this.readyState > API.OPEN) return false;
                this.readyState = API.CLOSED;
                this.writable = false;
                if (this._pingTimer) clearInterval(this._pingTimer);
                if (this._stream) this._stream.end();
                var event = new Event2("close");
                event.initEvent("close", false, false);
                this.dispatchEvent(event);
                return true;
              },
            };
            for (var method in instance)
              EventSource.prototype[method] = instance[method];
            for (var key2 in EventTarget)
              EventSource.prototype[key2] = EventTarget[key2];
            module2.exports = EventSource;
          },
        ],
      ];
      var __node_cache__ = [];
      function __node_error__(location) {
        var err = new Error("Cannot find module '" + location + "'");
        err.code = "MODULE_NOT_FOUND";
        throw err;
      }
      function __node_require__(id2) {
        if (id2 >>> 0 !== id2 || id2 > __node_modules__.length)
          return __node_error__(id2);
        while (__node_cache__.length <= id2) __node_cache__.push(null);
        var cache = __node_cache__[id2];
        if (cache) return cache.exports;
        var mod = __node_modules__[id2];
        var name2 = mod[0];
        var path3 = mod[1];
        var func = mod[2];
        var meta;
        var _exports = exports;
        var _module = module;
        if (id2 !== 0) {
          _exports = {};
          _module = {
            id: "/" + name2 + path3,
            exports: _exports,
            parent: module.parent,
            filename: module.filename,
            loaded: false,
            children: module.children,
            paths: module.paths,
          };
        }
        __node_cache__[id2] = _module;
        try {
          func.call(_exports, _exports, _module, __filename, __dirname, meta);
        } catch (e) {
          __node_cache__[id2] = null;
          throw e;
        }
        __node_modules__[id2] = null;
        if (id2 !== 0) _module.loaded = true;
        return _module.exports;
      }
      __node_require__(0);
    },
  });

  // node_modules/bsock/lib/backend.js
  var require_backend = __commonJS({
    "node_modules/bsock/lib/backend.js"(exports, module) {
      "use strict";
      module.exports = require_faye_websocket();
    },
  });

  // node_modules/bsock/lib/packet.js
  var require_packet = __commonJS({
    "node_modules/bsock/lib/packet.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var types = {
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
      };
      var Packet = class {
        constructor(type) {
          this.type = type || 0;
          this.attachments = 0;
          this.nsp = "/";
          this.id = -1;
          this.data = "";
          this.buffers = [];
        }
        setData(data) {
          assert3(data !== void 0);
          assert3(typeof data !== "number");
          assert3(typeof data !== "function");
          const [str, buffers] = deconstruct(data);
          this.data = str;
          this.buffers = buffers;
          this.attachments = buffers.length;
          if (this.attachments > 0) {
            switch (this.type) {
              case types.EVENT:
                this.type = types.BINARY_EVENT;
                break;
              case types.ACK:
                this.type = types.BINARY_ACK;
                break;
            }
          }
          return this;
        }
        getData() {
          if (this.data.length === 0) return null;
          return reconstruct(this.data, this.buffers);
        }
        toString() {
          let str = this.type.toString(10);
          switch (this.type) {
            case types.BINARY_EVENT:
            case types.BINARY_ACK:
              str += this.attachments.toString(10) + "-";
              break;
          }
          if (this.nsp !== "/") str += this.nsp + ",";
          if (this.id !== -1) str += this.id.toString(10);
          str += this.data;
          return str;
        }
        static fromString(str) {
          assert3(typeof str === "string");
          assert3(str.length > 0);
          let i = 0;
          let type = 0;
          let attachments = 0;
          let nsp = "/";
          let id2 = -1;
          let data = "";
          [i, type] = readChar(str, i);
          assert3(type !== -1);
          assert3(type <= types.BINARY_ACK);
          switch (type) {
            case types.BINARY_EVENT:
            case types.BINARY_ACK: {
              [i, attachments] = readInt(str, i);
              assert3(attachments !== -1);
              assert3(i < str.length);
              assert3(str[i] === "-");
              i += 1;
              break;
            }
          }
          if (i < str.length && str[i] === "/") [i, nsp] = readTo(str, i, ",");
          [i, id2] = readInt(str, i);
          if (i < str.length) data = str.substring(i);
          const packet = new this();
          packet.type = type;
          packet.attachments = attachments;
          packet.nsp = nsp;
          packet.id = id2;
          packet.data = data;
          return packet;
        }
      };
      Packet.types = types;
      function isPlaceholder(obj) {
        return (
          obj !== null &&
          typeof obj === "object" &&
          obj._placeholder === true &&
          obj.num >>> 0 === obj.num
        );
      }
      function deconstruct(obj) {
        const buffers = [];
        const out = replace("", obj, buffers, /* @__PURE__ */ new Map());
        const str = JSON.stringify(out);
        return [str, buffers];
      }
      function replace(key2, value, buffers, seen) {
        if (value === null || typeof value !== "object") return value;
        if (Buffer.isBuffer(value)) {
          const placeholder = seen.get(value);
          if (placeholder != null) return placeholder;
          const out2 = { _placeholder: true, num: buffers.length };
          seen.set(value, out2);
          buffers.push(value);
          return out2;
        }
        if (seen.has(value))
          throw new TypeError("Converting circular structure to JSON.");
        if (Array.isArray(value)) {
          const out2 = [];
          seen.set(value, null);
          for (let i = 0; i < value.length; i++)
            out2.push(replace(i, value[i], buffers, seen));
          seen.delete(value);
          return out2;
        }
        const out = /* @__PURE__ */ Object.create(null);
        const json =
          typeof value.toJSON === "function" ? value.toJSON(key2) : value;
        seen.set(value, null);
        for (const key3 of Object.keys(json))
          out[key3] = replace(key3, json[key3], buffers, seen);
        seen.delete(value);
        return out;
      }
      function reconstruct(str, buffers) {
        return JSON.parse(str, (key2, value) => {
          if (isPlaceholder(value)) {
            if (value.num < buffers.length) return buffers[value.num];
          }
          return value;
        });
      }
      function readChar(str, i) {
        const ch = str.charCodeAt(i) - 48;
        if (ch < 0 || ch > 9) return -1;
        return [i + 1, ch];
      }
      function readInt(str, i) {
        let len = 0;
        let num = 0;
        for (; i < str.length; i++) {
          const ch = str.charCodeAt(i) - 48;
          if (ch < 0 || ch > 9) break;
          num *= 10;
          num += ch;
          len += 1;
          assert3(len <= 10);
        }
        assert3(num <= 4294967295);
        if (len === 0) num = -1;
        return [i, num];
      }
      function readTo(str, i, ch) {
        let j2 = i;
        for (; j2 < str.length; j2++) {
          if (str[j2] === ch) break;
        }
        assert3(j2 < str.length);
        return [j2 + 1, str.substring(i, j2)];
      }
      module.exports = Packet;
    },
  });

  // node_modules/bsock/lib/frame.js
  var require_frame = __commonJS({
    "node_modules/bsock/lib/frame.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var DUMMY = Buffer.alloc(0);
      var types = {
        OPEN: 0,
        CLOSE: 1,
        PING: 2,
        PONG: 3,
        MESSAGE: 4,
        UPGRADE: 5,
        NOOP: 6,
      };
      var table = [
        "open",
        "close",
        "ping",
        "pong",
        "message",
        "upgrade",
        "noop",
      ];
      var Frame = class {
        constructor(type, data, binary) {
          assert3(typeof type === "number");
          assert3(type >>> 0 === type);
          assert3(type <= types.NOOP);
          assert3(typeof binary === "boolean");
          if (binary) {
            if (data == null) data = DUMMY;
            assert3(Buffer.isBuffer(data));
          } else {
            if (data == null) data = "";
            assert3(typeof data === "string");
          }
          this.type = type;
          this.data = data;
          this.binary = binary;
        }
        toString() {
          let str = "";
          if (this.binary) {
            str += "b";
            str += this.type.toString(10);
            str += this.data.toString("base64");
          } else {
            str += this.type.toString(10);
            str += this.data;
          }
          return str;
        }
        static fromString(str) {
          assert3(typeof str === "string");
          let type = str.charCodeAt(0);
          let binary = false;
          let data;
          if (type === 98) {
            assert3(str.length > 1);
            type = str.charCodeAt(1);
            data = Buffer.from(str.substring(2), "base64");
            binary = true;
          } else {
            data = str.substring(1);
          }
          type -= 48;
          assert3(type >= 0 && type <= 9);
          assert3(type <= types.NOOP);
          return new this(type, data, binary);
        }
        size() {
          let len = 1;
          if (this.binary) len += this.data.length;
          else len += Buffer.byteLength(this.data, "utf8");
          return len;
        }
        toRaw() {
          const data = Buffer.allocUnsafe(this.size());
          data[0] = this.type;
          if (this.binary) {
            this.data.copy(data, 1);
          } else {
            if (this.data.length > 0) data.write(this.data, 1, "utf8");
          }
          return data;
        }
        static fromRaw(data) {
          assert3(Buffer.isBuffer(data));
          assert3(data.length > 0);
          const type = data[0];
          assert3(type <= types.NOOP);
          return new this(type, data.slice(1), true);
        }
      };
      Frame.types = types;
      Frame.table = table;
      module.exports = Frame;
    },
  });

  // node_modules/bsock/lib/util.js
  var require_util = __commonJS({
    "node_modules/bsock/lib/util.js"(exports) {
      "use strict";
      var assert3 = require_assert();
      var URL4 = __require("url");
      exports.parseURL = function parseURL(url) {
        if (url.indexOf("://") === -1) url = `ws://${url}`;
        const data = URL4.parse(url);
        if (
          data.protocol !== "http:" &&
          data.protocol !== "https:" &&
          data.protocol !== "ws:" &&
          data.protocol !== "wss:"
        ) {
          throw new Error("Invalid protocol for websocket URL.");
        }
        if (!data.hostname) throw new Error("Malformed URL.");
        const host = data.hostname;
        let port = 80;
        let ssl = false;
        if (data.protocol === "https:" || data.protocol === "wss:") {
          port = 443;
          ssl = true;
        }
        if (data.port) {
          port = parseInt(data.port, 10);
          assert3((port & 65535) === port);
          assert3(port !== 0);
        }
        return [port, host, ssl];
      };
    },
  });

  // node_modules/bsock/lib/parser.js
  var require_parser = __commonJS({
    "node_modules/bsock/lib/parser.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var EventEmitter = __require("events");
      var Frame = require_frame();
      var MAX_MESSAGE = 1e8;
      var Parser = class extends EventEmitter {
        constructor() {
          super();
        }
        error(msg) {
          this.emit("error", new Error(msg));
        }
        feedBinary(data) {
          assert3(Buffer.isBuffer(data));
          if (data.length > MAX_MESSAGE) {
            this.error("Frame too large.");
            return;
          }
          let frame;
          try {
            frame = Frame.fromRaw(data);
          } catch (e) {
            this.emit("error", e);
            return;
          }
          this.emit("frame", frame);
        }
        feedString(data) {
          assert3(typeof data === "string");
          if (Buffer.byteLength(data, "utf8") > MAX_MESSAGE) {
            this.error("Frame too large.");
            return;
          }
          let frame;
          try {
            frame = Frame.fromString(data);
          } catch (e) {
            this.emit("error", e);
            return;
          }
          this.emit("frame", frame);
        }
      };
      module.exports = Parser;
    },
  });

  // node_modules/bsock/lib/codes.js
  var require_codes = __commonJS({
    "node_modules/bsock/lib/codes.js"(exports, module) {
      "use strict";
      module.exports = {
        1e3: "NORMAL_CLOSURE",
        1001: "GOING_AWAY",
        1002: "PROTOCOL_ERROR",
        1003: "UNSUPPORTED_DATA",
        1004: "RESERVED",
        1005: "NO_STATUS_RECVD",
        1006: "ABNORMAL_CLOSURE",
        1007: "INVALID_FRAME_PAYLOAD_DATA",
        1008: "POLICY_VIOLATION",
        1009: "MESSAGE_TOO_BIG",
        1010: "MISSING_EXTENSION",
        1011: "INTERNAL_ERROR",
        1012: "SERVICE_RESTART",
        1013: "TRY_AGAIN_LATER",
        1014: "BAD_GATEWAY",
        1015: "TLS_HANDSHAKE",
      };
    },
  });

  // node_modules/bsock/lib/blacklist.js
  var require_blacklist = __commonJS({
    "node_modules/bsock/lib/blacklist.js"(exports, module) {
      "use strict";
      module.exports = {
        connect: true,
        connect_error: true,
        connect_timeout: true,
        connecting: true,
        disconnect: true,
        error: true,
        reconnect: true,
        reconnect_attempt: true,
        reconnect_failed: true,
        reconnect_error: true,
        reconnecting: true,
        ping: true,
        pong: true,
      };
    },
  });

  // node_modules/bsock/lib/socket.js
  var require_socket = __commonJS({
    "node_modules/bsock/lib/socket.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var EventEmitter = __require("events");
      var WebSocket2 = require_backend().Client;
      var Packet = require_packet();
      var Frame = require_frame();
      var util = require_util();
      var Parser = require_parser();
      var codes = require_codes();
      var blacklist = require_blacklist();
      var Socket = class extends EventEmitter {
        constructor() {
          super();
          this.server = null;
          this.ws = null;
          this.protocol = "";
          this.url = "ws://127.0.0.1:80/socket.io/?transport=websocket";
          this.ssl = false;
          this.host = "127.0.0.1";
          this.port = 80;
          this.inbound = false;
          this.handshake = false;
          this.opened = false;
          this.connected = false;
          this.challenge = false;
          this.destroyed = false;
          this.reconnection = true;
          this.time = 0;
          this.sequence = 0;
          this.pingInterval = 25e3;
          this.pingTimeout = 6e4;
          this.lastPing = 0;
          this.parser = new Parser();
          this.binary = false;
          this.packet = null;
          this.timer = null;
          this.jobs = /* @__PURE__ */ new Map();
          this.hooks = /* @__PURE__ */ new Map();
          this.channels = /* @__PURE__ */ new Set();
          this.events = new EventEmitter();
          this.buffer = [];
          this.admin = false;
          this.auth = false;
        }
        accept(server, req, socket, ws) {
          assert3(!this.ws, "Cannot accept twice.");
          assert3(server);
          assert3(req);
          assert3(socket);
          assert3(socket.remoteAddress);
          assert3(socket.remotePort != null);
          assert3(ws);
          let proto = "ws";
          let host = socket.remoteAddress;
          let port = socket.remotePort;
          if (socket.encrypted) proto = "wss";
          if (host.indexOf(":") !== -1) host = `[${host}]`;
          if (!port) port = 0;
          this.server = server;
          this.binary = req.url.indexOf("b64=1") === -1;
          this.url = `${proto}://${host}:${port}/socket.io/?transport=websocket`;
          this.ssl = proto === "wss";
          this.host = socket.remoteAddress;
          this.port = socket.remotePort;
          this.inbound = true;
          this.ws = ws;
          this.init();
          return this;
        }
        connect(port, host, ssl, protocols) {
          assert3(!this.ws, "Cannot connect twice.");
          if (typeof port === "string") {
            protocols = host;
            [port, host, ssl] = util.parseURL(port);
          }
          let proto = "ws";
          if (ssl) proto = "wss";
          if (!host) host = "127.0.0.1";
          assert3(typeof host === "string");
          assert3((port & 65535) === port, "Must pass a port.");
          assert3(!ssl || typeof ssl === "boolean");
          assert3(!protocols || Array.isArray(protocols));
          let hostname = host;
          if (host.indexOf(":") !== -1 && host[0] !== "[")
            hostname = `[${host}]`;
          const path3 = "/socket.io";
          const qs = "?transport=websocket";
          const url = `${proto}://${hostname}:${port}${path3}/${qs}`;
          this.binary = true;
          this.url = url;
          this.ssl = ssl;
          this.host = host;
          this.port = port;
          this.inbound = false;
          this.ws = new WebSocket2(url, protocols);
          this.init();
          return this;
        }
        init() {
          this.protocol = this.ws.protocol;
          this.time = Date.now();
          this.observe();
          this.parser.on("error", (err) => {
            this.emit("error", err);
          });
          this.parser.on("frame", async (frame) => {
            try {
              await this.handleFrame(frame);
            } catch (e) {
              this.emit("error", e);
            }
          });
          this.start();
        }
        observe() {
          const ws = this.ws;
          assert3(ws);
          ws.binaryType = "arraybuffer";
          ws.onopen = async () => {
            await this.onOpen();
          };
          ws.onmessage = async (event) => {
            await this.onMessage(event);
          };
          ws.onerror = async (event) => {
            await this.onError(event);
          };
          ws.onclose = async (event) => {
            await this.onClose(event);
          };
        }
        async onOpen() {
          if (this.destroyed) return;
          if (!this.inbound) return;
          assert3(!this.opened);
          assert3(!this.connected);
          assert3(!this.handshake);
          this.opened = true;
          this.handshake = true;
          await this.emitAsync("open");
          this.sendHandshake();
          this.connected = true;
          await this.emitAsync("connect");
          this.sendConnect();
        }
        async emitAsync(event, ...args) {
          const handlers = this.listeners(event);
          for (const handler of handlers) {
            try {
              await handler(...args);
            } catch (e) {
              this.emit("error", e);
            }
          }
        }
        async onMessage(event) {
          if (this.destroyed) return;
          let data;
          try {
            data = await readBinary(event.data);
          } catch (e) {
            this.emit("error", e);
            return;
          }
          if (typeof data === "string") {
            this.parser.feedString(data);
            return;
          }
          this.parser.feedBinary(data);
        }
        async onError(event) {
          if (this.destroyed) return;
          this.emit("error", new Error(event.message));
          if (this.inbound) {
            this.destroy();
            return;
          }
          this.close();
        }
        async onClose(event) {
          if (this.destroyed) return;
          if (event.code === 1e3 || event.code === 1001) {
            if (!this.connected)
              this.emit("error", new Error("Could not connect."));
            if (this.inbound) {
              this.destroy();
              return;
            }
            this.close();
            return;
          }
          const code = codes[event.code] || "UNKNOWN_CODE";
          const reason = event.reason || "Unknown reason";
          const msg = `Websocket Closed: ${reason} (code=${code}).`;
          const err = new Error(msg);
          err.reason = event.reason || "";
          err.code = event.code || 0;
          this.emit("error", err);
          if (this.inbound) {
            this.destroy();
            return;
          }
          if (!this.reconnection) {
            this.destroy();
            return;
          }
          this.close();
        }
        close() {
          if (this.destroyed) return;
          this.time = Date.now();
          this.packet = null;
          this.handshake = false;
          this.connected = false;
          this.challenge = false;
          this.sequence = 0;
          this.lastPing = 0;
          for (const [id2, job] of this.jobs) {
            this.jobs.delete(id2);
            job.reject(new Error("Job timed out."));
          }
          assert3(this.ws);
          this.ws.onopen = () => {};
          this.ws.onmessage = () => {};
          this.ws.onerror = () => {};
          this.ws.onclose = () => {};
          this.ws.close();
          this.emitAsync("disconnect");
        }
        error(msg) {
          if (this.destroyed) return;
          this.emit("error", new Error(msg));
        }
        destroy() {
          if (this.destroyed) return;
          this.close();
          this.stop();
          this.opened = false;
          this.destroyed = true;
          this.buffer.length = 0;
          this.emitAsync("close");
          this.removeAllListeners();
          this.on("error", () => {});
        }
        send(frame) {
          if (this.destroyed) return;
          assert3(this.ws);
          if (frame.binary && this.binary) this.ws.send(frame.toRaw());
          else this.ws.send(frame.toString());
        }
        reconnect() {
          assert3(!this.inbound);
          this.close();
          this.ws = new WebSocket2(this.url);
          this.time = Date.now();
          this.observe();
        }
        start() {
          assert3(this.ws);
          assert3(this.timer == null);
          this.timer = setInterval(() => this.stall(), 5e3);
        }
        stop() {
          if (this.timer != null) {
            clearInterval(this.timer);
            this.timer = null;
          }
        }
        stall() {
          const now2 = Date.now();
          assert3(this.ws);
          if (!this.connected) {
            if (now2 - this.time > 1e4) {
              if (this.inbound || !this.reconnection) {
                this.error("Timed out waiting for connection.");
                this.destroy();
                return;
              }
              this.error("Timed out waiting for connection. Reconnecting...");
              this.reconnect();
              return;
            }
            return;
          }
          for (const [id2, job] of this.jobs) {
            if (now2 - job.time > 6e5) {
              this.jobs.delete(id2);
              job.reject(new Error("Job timed out."));
            }
          }
          if (!this.inbound && !this.challenge) {
            this.challenge = true;
            this.lastPing = now2;
            this.sendPing();
            return;
          }
          if (!this.inbound && now2 - this.lastPing > this.pingTimeout) {
            this.error("Connection is stalling (ping).");
            if (this.inbound) {
              this.destroy();
              return;
            }
            this.close();
            return;
          }
        }
        async handleFrame(frame) {
          if (this.destroyed) return void 0;
          switch (frame.type) {
            case Frame.types.OPEN:
              return this.handleOpen(frame);
            case Frame.types.CLOSE:
              return this.handleClose(frame);
            case Frame.types.PING:
              return this.handlePing(frame);
            case Frame.types.PONG:
              return this.handlePong(frame);
            case Frame.types.MESSAGE:
              return this.handleMessage(frame);
            case Frame.types.UPGRADE:
              return this.handleUpgrade(frame);
            case Frame.types.NOOP:
              return this.handleNoop(frame);
            default: {
              throw new Error("Unknown frame.");
            }
          }
        }
        async handleOpen(frame) {
          if (this.inbound)
            throw new Error("Inbound socket sent an open frame.");
          if (frame.binary) throw new Error("Received a binary open frame.");
          if (this.handshake) throw new Error("Duplicate open frame.");
          const json = JSON.parse(frame.data);
          enforce(json && typeof json === "object", "open", "object");
          const { pingInterval, pingTimeout } = json;
          enforce(pingInterval >>> 0 === pingInterval, "interval", "uint32");
          enforce(pingTimeout >>> 0 === pingTimeout, "timeout", "uint32");
          this.pingInterval = pingInterval;
          this.pingTimeout = pingTimeout;
          this.handshake = true;
          if (!this.opened) {
            this.opened = true;
            await this.emitAsync("open");
          }
        }
        async handleClose(frame) {
          if (this.inbound)
            throw new Error("Inbound socket sent a close frame.");
          this.close();
        }
        async handlePing() {
          if (!this.inbound)
            throw new Error("Outbound socket sent a ping frame.");
          this.sendPong();
        }
        async handlePong() {
          if (this.inbound)
            throw new Error("Inbound socket sent a pong frame.");
          if (!this.challenge) {
            this.error("Remote node sent bad pong.");
            this.destroy();
            return;
          }
          this.challenge = false;
        }
        async handleMessage(frame) {
          if (this.packet) {
            const packet2 = this.packet;
            if (!frame.binary)
              throw new Error("Received non-binary frame as attachment.");
            packet2.buffers.push(frame.data);
            if (packet2.buffers.length === packet2.attachments) {
              this.packet = null;
              return this.handlePacket(packet2);
            }
            return void 0;
          }
          if (frame.binary)
            throw new Error("Received binary frame as a message.");
          const packet = Packet.fromString(frame.data);
          if (packet.attachments > 0) {
            this.packet = packet;
            return void 0;
          }
          return this.handlePacket(packet);
        }
        async handleUpgrade(frame) {
          if (!this.inbound)
            throw new Error("Outbound socket sent an upgrade frame.");
          throw new Error("Cannot upgrade from websocket.");
        }
        async handleNoop(frame) {}
        sendFrame(type, data, binary) {
          this.send(new Frame(type, data, binary));
        }
        sendOpen(data) {
          this.sendFrame(Frame.types.OPEN, data, false);
        }
        sendClose(data) {
          this.sendFrame(Frame.types.CLOSE, data, false);
        }
        sendPing(data) {
          this.sendFrame(Frame.types.PING, data, false);
        }
        sendPong(data) {
          this.sendFrame(Frame.types.PONG, data, false);
        }
        sendMessage(data) {
          this.sendFrame(Frame.types.MESSAGE, data, false);
        }
        sendBinary(data) {
          this.sendFrame(Frame.types.MESSAGE, data, true);
        }
        sendHandshake() {
          const handshake = JSON.stringify({
            sid: "00000000000000000000",
            upgrades: [],
            pingInterval: this.pingInterval,
            pingTimeout: this.pingTimeout,
          });
          this.sendOpen(handshake);
        }
        async handlePacket(packet) {
          if (this.destroyed) return void 0;
          switch (packet.type) {
            case Packet.types.CONNECT: {
              return this.handleConnect();
            }
            case Packet.types.DISCONNECT: {
              return this.handleDisconnect();
            }
            case Packet.types.EVENT:
            case Packet.types.BINARY_EVENT: {
              const args = packet.getData();
              enforce(Array.isArray(args), "args", "array");
              enforce(args.length > 0, "args", "array");
              enforce(typeof args[0] === "string", "event", "string");
              if (packet.id !== -1) return this.handleCall(packet.id, args);
              return this.handleEvent(args);
            }
            case Packet.types.ACK:
            case Packet.types.BINARY_ACK: {
              enforce(packet.id !== -1, "id", "uint32");
              const json = packet.getData();
              enforce(json == null || Array.isArray(json), "args", "array");
              let err = null;
              let result = null;
              if (json && json.length > 0) err = json[0];
              if (json && json.length > 1) result = json[1];
              if (result == null) result = null;
              if (err) {
                enforce(typeof err === "object", "error", "object");
                return this.handleError(packet.id, err);
              }
              return this.handleAck(packet.id, result);
            }
            case Packet.types.ERROR: {
              const err = packet.getData();
              enforce(err && typeof err === "object", "error", "object");
              return this.handleError(-1, err);
            }
            default: {
              throw new Error("Unknown packet.");
            }
          }
        }
        async handleConnect() {
          if (this.inbound)
            throw new Error("Inbound socket sent connect packet.");
          this.connected = true;
          await this.emitAsync("connect");
          for (const packet of this.buffer) this.sendPacket(packet);
          this.buffer.length = 0;
        }
        async handleDisconnect() {
          this.close();
        }
        async handleEvent(args) {
          try {
            const event = args[0];
            if (blacklist.hasOwnProperty(event))
              throw new Error(`Cannot emit blacklisted event: ${event}.`);
            this.events.emit(...args);
          } catch (e) {
            this.emit("error", e);
            this.sendError(-1, e);
          }
        }
        async handleCall(id2, args) {
          let result;
          try {
            const event = args.shift();
            if (blacklist.hasOwnProperty(event))
              throw new Error(`Cannot emit blacklisted event: ${event}.`);
            const handler = this.hooks.get(event);
            if (!handler) throw new Error(`Call not found: ${event}.`);
            result = await handler(...args);
          } catch (e) {
            this.emit("error", e);
            this.sendError(id2, e);
            return;
          }
          if (result == null) result = null;
          this.sendAck(id2, result);
        }
        async handleAck(id2, data) {
          const job = this.jobs.get(id2);
          if (!job) throw new Error(`Job not found for ${id2}.`);
          this.jobs.delete(id2);
          job.resolve(data);
        }
        async handleError(id2, err) {
          const msg = castMsg(err.message);
          const name2 = castString(err.name);
          const type = castString(err.type);
          const code = castCode(err.code);
          if (id2 === -1) {
            const e2 = new Error(msg);
            e2.name = name2;
            e2.type = type;
            e2.code = code;
            this.emit("error", e2);
            return;
          }
          const job = this.jobs.get(id2);
          if (!job) throw new Error(`Job not found for ${id2}.`);
          this.jobs.delete(id2);
          const e = new Error(msg);
          e.name = name2;
          e.type = type;
          e.code = code;
          job.reject(e);
        }
        sendPacket(packet) {
          this.sendMessage(packet.toString());
          for (const data of packet.buffers) this.sendBinary(data);
        }
        sendConnect() {
          this.sendPacket(new Packet(Packet.types.CONNECT));
        }
        sendDisconnect() {
          this.sendPacket(new Packet(Packet.types.DISCONNECT));
        }
        sendEvent(data) {
          const packet = new Packet();
          packet.type = Packet.types.EVENT;
          packet.setData(data);
          if (!this.connected) {
            this.buffer.push(packet);
            return;
          }
          this.sendPacket(packet);
        }
        sendCall(id2, data) {
          const packet = new Packet();
          packet.type = Packet.types.EVENT;
          packet.id = id2;
          packet.setData(data);
          if (!this.connected) {
            this.buffer.push(packet);
            return;
          }
          this.sendPacket(packet);
        }
        sendAck(id2, data) {
          const packet = new Packet();
          packet.type = Packet.types.ACK;
          packet.id = id2;
          packet.setData([null, data]);
          this.sendPacket(packet);
        }
        sendError(id2, err) {
          const message = castMsg(err.message);
          const name2 = castString(err.name);
          const type = castString(err.type);
          const code = castCode(err.code);
          if (id2 === -1) {
            const packet2 = new Packet();
            packet2.type = Packet.types.ERROR;
            packet2.setData({ message, name: name2, type, code });
            this.sendPacket(packet2);
            return;
          }
          const packet = new Packet();
          packet.type = Packet.types.ACK;
          packet.id = id2;
          packet.setData([{ message, name: name2, type, code }]);
          this.sendPacket(packet);
        }
        bind(event, handler) {
          enforce(typeof event === "string", "event", "string");
          enforce(typeof handler === "function", "handler", "function");
          assert3(!blacklist.hasOwnProperty(event), "Blacklisted event.");
          this.events.on(event, handler);
        }
        unbind(event, handler) {
          enforce(typeof event === "string", "event", "string");
          enforce(typeof handler === "function", "handler", "function");
          assert3(!blacklist.hasOwnProperty(event), "Blacklisted event.");
          this.events.removeListener(event, handler);
        }
        fire(...args) {
          enforce(args.length > 0, "event", "string");
          enforce(typeof args[0] === "string", "event", "string");
          this.sendEvent(args);
        }
        hook(event, handler) {
          enforce(typeof event === "string", "event", "string");
          enforce(typeof handler === "function", "handler", "function");
          assert3(!this.hooks.has(event), "Hook already bound.");
          assert3(!blacklist.hasOwnProperty(event), "Blacklisted event.");
          this.hooks.set(event, handler);
        }
        unhook(event) {
          enforce(typeof event === "string", "event", "string");
          assert3(!blacklist.hasOwnProperty(event), "Blacklisted event.");
          this.hooks.delete(event);
        }
        call(...args) {
          enforce(args.length > 0, "event", "string");
          enforce(typeof args[0] === "string", "event", "string");
          const id2 = this.sequence;
          this.sequence += 1;
          this.sequence >>>= 0;
          assert3(!this.jobs.has(id2), "ID collision.");
          this.sendCall(id2, args);
          return new Promise((resolve2, reject) => {
            this.jobs.set(id2, new Job(resolve2, reject, Date.now()));
          });
        }
        channel(name2) {
          return this.channels.has(name2);
        }
        join(name2) {
          if (!this.server) return false;
          return this.server.join(this, name2);
        }
        leave(name2) {
          if (!this.server) return false;
          return this.server.leave(this, name2);
        }
        static accept(server, req, socket, ws) {
          return new this().accept(server, req, socket, ws);
        }
        static connect(port, host, ssl, protocols) {
          return new this().connect(port, host, ssl, protocols);
        }
      };
      var Job = class {
        constructor(resolve2, reject, time) {
          this.resolve = resolve2;
          this.reject = reject;
          this.time = time;
        }
      };
      function castCode(code) {
        if (
          code !== null &&
          typeof code !== "number" &&
          typeof code !== "string"
        ) {
          return null;
        }
        return code;
      }
      function castMsg(msg) {
        if (typeof msg !== "string") return "No message.";
        return msg;
      }
      function castString(type) {
        if (typeof type !== "string") return null;
        return type;
      }
      function enforce(value, name2, type) {
        if (!value) {
          const err = new TypeError(`'${name2}' must be a(n) ${type}.`);
          if (Error.captureStackTrace) Error.captureStackTrace(err, enforce);
          throw err;
        }
      }
      function readBinary(data) {
        return new Promise((resolve2, reject) => {
          if (typeof data === "string") {
            resolve2(data);
            return;
          }
          if (!data || typeof data !== "object") {
            reject(new Error("Bad data object."));
            return;
          }
          if (Buffer.isBuffer(data)) {
            resolve2(data);
            return;
          }
          if (data instanceof ArrayBuffer) {
            const result = Buffer.from(data);
            resolve2(result);
            return;
          }
          if (data.buffer instanceof ArrayBuffer) {
            const result = Buffer.from(
              data.buffer,
              data.byteOffset,
              data.byteLength
            );
            resolve2(result);
            return;
          }
          if (typeof Blob !== "undefined" && Blob) {
            if (data instanceof Blob) {
              const reader = new FileReader();
              reader.onloadend = () => {
                const result = Buffer.from(reader.result);
                resolve2(result);
              };
              reader.readAsArrayBuffer(data);
              return;
            }
          }
          reject(new Error("Bad data object."));
        });
      }
      module.exports = Socket;
    },
  });

  // node_modules/bsock/lib/server.js
  var require_server = __commonJS({
    "node_modules/bsock/lib/server.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var EventEmitter = __require("events");
      var Packet = require_packet();
      var WebSocket2 = require_backend();
      var Socket = require_socket();
      var Server = class extends EventEmitter {
        constructor(options = {}) {
          super();
          assert3(!options.protocols || Array.isArray(options.protocols));
          this.protocols = options.protocols || void 0;
          this.sockets = /* @__PURE__ */ new Set();
          this.channels = /* @__PURE__ */ new Map();
          this.mounts = [];
          this.mounted = false;
        }
        handleSocket(socket) {
          this.add(socket);
          socket.on("close", () => {
            this.remove(socket);
          });
          this.emit("socket", socket);
          for (const server of this.mounts) server.emit("socket", socket);
        }
        mount(server) {
          assert3(!server.mounted);
          server.mounted = true;
          server.sockets = this.sockets;
          server.channels = this.channels;
          this.mounts.push(server);
        }
        async open() {}
        async close() {
          if (this.mounted) return;
          for (const socket of this.sockets) socket.destroy();
        }
        attach(server) {
          const onUpgrade = (req, socket, body) => {
            if (!socket.remoteAddress) {
              socket.destroy();
              return;
            }
            if (!WebSocket2.isWebSocket(req)) {
              socket.destroy();
              return;
            }
            const ws = new WebSocket2(req, socket, body, this.protocols);
            const sock = Socket.accept(this, req, socket, ws);
            this.handleSocket(sock);
          };
          server.on("upgrade", (req, socket, body) => {
            try {
              onUpgrade(req, socket, body);
            } catch (e) {
              this.emit("error", e);
            }
          });
          return this;
        }
        add(socket) {
          this.sockets.add(socket);
        }
        remove(socket) {
          for (const name2 of socket.channels) this.leave(socket, name2);
          assert3(this.sockets.delete(socket));
        }
        join(socket, name2) {
          if (socket.channels.has(name2)) return false;
          if (!this.channels.has(name2))
            this.channels.set(name2, /* @__PURE__ */ new Set());
          const sockets = this.channels.get(name2);
          sockets.add(socket);
          socket.channels.add(name2);
          return true;
        }
        leave(socket, name2) {
          if (!socket.channels.has(name2)) return false;
          const sockets = this.channels.get(name2);
          assert3(sockets);
          assert3(sockets.delete(socket));
          if (sockets.size === 0) this.channels.delete(name2);
          socket.channels.delete(name2);
          return true;
        }
        channel(name2) {
          const sockets = this.channels.get(name2);
          if (!sockets) return null;
          assert3(sockets.size > 0);
          return sockets;
        }
        event(args) {
          assert3(args.length > 0, "Event must be present.");
          assert3(typeof args[0] === "string", "Event must be a string.");
          const packet = new Packet();
          packet.type = Packet.types.EVENT;
          packet.setData(args);
          return packet;
        }
        to(name2, ...args) {
          const sockets = this.channels.get(name2);
          if (!sockets) return;
          assert3(sockets.size > 0);
          const packet = this.event(args);
          for (const socket of sockets) socket.sendPacket(packet);
        }
        all(...args) {
          const packet = this.event(args);
          for (const socket of this.sockets) socket.sendPacket(packet);
        }
        static attach(parent, options) {
          const server = new this(options);
          return server.attach(parent);
        }
        static createServer(options) {
          return new this(options);
        }
      };
      module.exports = Server;
    },
  });

  // node_modules/bsock/lib/bsock.js
  var require_bsock = __commonJS({
    "node_modules/bsock/lib/bsock.js"(exports) {
      "use strict";
      var WebSocket2 = require_backend();
      var Server = require_server();
      var Socket = require_socket();
      exports.WebSocket = WebSocket2;
      exports.Server = Server;
      exports.server = () => new Server();
      exports.createServer = Server.createServer.bind(Server);
      exports.attach = Server.attach.bind(Server);
      exports.Socket = Socket;
      exports.socket = () => new Socket();
      exports.connect = Socket.connect.bind(Socket);
    },
  });

  // node_modules/@lumeweb/bcurl/lib/client.js
  var require_client = __commonJS({
    "node_modules/@lumeweb/bcurl/lib/client.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var EventEmitter = __require("events");
      var URL4 = __require("url");
      var Path2 = __require("path").posix;
      var bsock = require_bsock();
      var brq2 = require_brq();
      var Client = class extends EventEmitter {
        constructor(options) {
          super();
          const opt = new ClientOptions(options);
          this.ssl = opt.ssl;
          this.strictSSL = opt.strictSSL;
          this.host = opt.host;
          this.port = opt.port;
          this.path = opt.path;
          this.headers = opt.headers;
          this.username = opt.username;
          this.password = opt.password;
          this.id = opt.id;
          this.token = opt.token;
          this.timeout = opt.timeout;
          this.limit = opt.limit;
          this.sequence = 0;
          this.opened = false;
          this.socket = bsock.socket();
        }
        clone() {
          const copy = new this.constructor();
          copy.ssl = this.ssl;
          copy.strictSSL = this.strictSSL;
          copy.host = this.host;
          copy.port = this.port;
          copy.path = this.path;
          copy.headers = this.headers;
          copy.username = this.username;
          copy.password = this.password;
          copy.id = this.id;
          copy.token = this.token;
          copy.sequence = this.sequence;
          copy.timeout = this.timeout;
          copy.limit = this.limit;
          copy.opened = this.opened;
          copy.socket = this.socket;
          return copy;
        }
        async open() {
          const { port, host, ssl } = this;
          assert3(!this.opened, "Already opened.");
          this.opened = true;
          this.socket.on("connect", async () => {
            try {
              await this.auth();
            } catch (e) {
              this.emit("error", e);
              return;
            }
            this.emit("connect");
          });
          this.socket.on("error", (err) => {
            this.emit("error", err);
          });
          this.socket.on("disconnect", () => {
            this.emit("disconnect");
          });
          this.socket.connect(port, host, ssl);
        }
        async close() {
          assert3(this.opened, "Not opened.");
          this.opened = false;
          this.socket.destroy();
          this.socket = bsock.socket();
        }
        async auth() {}
        hook(...args) {
          return this.socket.hook(...args);
        }
        unhook(...args) {
          return this.socket.unhook(...args);
        }
        async call(...args) {
          return this.socket.call(...args);
        }
        bind(...args) {
          return this.socket.bind(...args);
        }
        unbind(...args) {
          return this.socket.unbind(...args);
        }
        fire(...args) {
          return this.socket.fire(...args);
        }
        async request(method, endpoint, params) {
          assert3(typeof method === "string");
          assert3(typeof endpoint === "string");
          let query = null;
          if (params == null) params = {};
          assert3(params && typeof params === "object");
          if (this.token) params.token = this.token;
          if (method === "GET") {
            query = params;
            params = null;
          }
          const res = await brq2({
            method,
            ssl: this.ssl,
            strictSSL: this.strictSSL,
            host: this.host,
            port: this.port,
            path: Path2.join(this.path, endpoint),
            username: this.username,
            password: this.password,
            headers: this.headers,
            timeout: this.timeout,
            limit: this.limit,
            query,
            pool: true,
            json: params,
          });
          if (res.statusCode === 404) return null;
          if (res.statusCode === 401)
            throw new Error("Unauthorized (bad API key).");
          if (res.type !== "json")
            throw new Error("Bad response (wrong content-type).");
          const json = res.json();
          if (!json) throw new Error("Bad response (no body).");
          if (json.error && res.statusCode >= 400) {
            const { error } = json;
            const err = new Error(error.message);
            err.type = String(error.type);
            err.code = error.code;
            throw err;
          }
          if (res.statusCode !== 200)
            throw new Error(`Status code: ${res.statusCode}.`);
          return json;
        }
        get(endpoint, params) {
          return this.request("GET", endpoint, params);
        }
        post(endpoint, params) {
          return this.request("POST", endpoint, params);
        }
        put(endpoint, params) {
          return this.request("PUT", endpoint, params);
        }
        del(endpoint, params) {
          return this.request("DELETE", endpoint, params);
        }
        patch(endpoint, params) {
          return this.request("PATCH", endpoint, params);
        }
        async execute(endpoint, method, params) {
          assert3(typeof endpoint === "string");
          assert3(typeof method === "string");
          if (params == null) params = null;
          this.sequence += 1;
          const res = await brq2({
            method: "POST",
            ssl: this.ssl,
            strictSSL: this.strictSSL,
            host: this.host,
            port: this.port,
            path: Path2.join(this.path, endpoint),
            username: this.username,
            password: this.password,
            headers: this.headers,
            timeout: this.timeout,
            limit: this.limit,
            pool: true,
            query: this.token ? { token: this.token } : void 0,
            json: {
              method,
              params,
              id: this.sequence,
            },
          });
          if (res.statusCode === 401)
            throw new RPCError2("Unauthorized (bad API key).", -1);
          if (res.type !== "json")
            throw new Error("Bad response (wrong content-type).");
          const json = res.json();
          if (!json) throw new Error("No body for JSON-RPC response.");
          if (json.error) {
            const { message, code } = json.error;
            throw new RPCError2(message, code);
          }
          if (res.statusCode !== 200)
            throw new Error(`Status code: ${res.statusCode}.`);
          return json.result;
        }
      };
      var ClientOptions = class {
        constructor(options) {
          this.ssl = false;
          this.strictSSL = true;
          this.host = "localhost";
          this.port = 80;
          this.path = "/";
          this.headers = null;
          this.username = null;
          this.password = null;
          this.id = null;
          this.token = null;
          this.timeout = 5e3;
          this.limit = null;
          if (options) this.fromOptions(options);
        }
        fromOptions(options) {
          if (typeof options === "string") options = { url: options };
          assert3(options && typeof options === "object");
          if (options.ssl != null) {
            assert3(typeof options.ssl === "boolean");
            this.ssl = options.ssl;
            this.port = 443;
          }
          if (options.strictSSL != null) {
            assert3(typeof options.strictSSL === "boolean");
            this.strictSSL = options.strictSSL;
          }
          if (options.host != null) {
            assert3(typeof options.host === "string");
            this.host = options.host;
          }
          if (options.port != null) {
            assert3((options.port & 65535) === options.port);
            assert3(options.port !== 0);
            this.port = options.port;
          }
          if (options.path != null) {
            assert3(typeof options.path === "string");
            this.path = options.path;
          }
          if (options.headers != null) {
            assert3(typeof options.headers === "object");
            this.headers = options.headers;
          }
          if (options.apiKey != null) {
            assert3(typeof options.apiKey === "string");
            this.password = options.apiKey;
          }
          if (options.key != null) {
            assert3(typeof options.key === "string");
            this.password = options.key;
          }
          if (options.username != null) {
            assert3(typeof options.username === "string");
            this.username = options.username;
          }
          if (options.password != null) {
            assert3(typeof options.password === "string");
            this.password = options.password;
          }
          if (options.url != null) {
            assert3(typeof options.url === "string");
            let url = options.url;
            if (url.indexOf("://") === -1) url = `http://${url}`;
            const data = URL4.parse(url);
            if (data.protocol !== "http:" && data.protocol !== "https:") {
              throw new Error("Malformed URL.");
            }
            if (!data.hostname) throw new Error("Malformed URL.");
            if (data.protocol === "https:") {
              this.ssl = true;
              this.port = 443;
            }
            this.host = data.hostname;
            if (data.port) {
              const port = parseInt(data.port, 10);
              assert3((port & 65535) === port);
              assert3(port !== 0);
              this.port = port;
            }
            this.path = data.pathname;
            if (data.auth) {
              const parts = data.auth.split(":");
              this.username = parts.shift();
              this.password = parts.join(":");
            }
          }
          if (options.id != null) {
            assert3(typeof options.id === "string");
            this.id = options.id;
          }
          if (options.token != null) {
            assert3(typeof options.token === "string");
            this.token = options.token;
          }
          if (options.timeout != null) {
            assert3(typeof options.timeout === "number");
            this.timeout = options.timeout;
          }
          if (options.limit != null) {
            assert3(typeof options.limit === "number");
            this.limit = options.limit;
          }
          return this;
        }
      };
      var RPCError2 = class extends Error {
        constructor(msg, code) {
          super();
          this.type = "RPCError";
          this.message = String(msg);
          this.code = code >> 0;
          if (Error.captureStackTrace) Error.captureStackTrace(this, RPCError2);
        }
      };
      module.exports = Client;
    },
  });

  // node_modules/@lumeweb/bcurl/lib/bcurl.js
  var require_bcurl = __commonJS({
    "node_modules/@lumeweb/bcurl/lib/bcurl.js"(exports) {
      "use strict";
      var Client = require_client();
      exports.Client = Client;
      exports.client = (options) => new Client(options);
    },
  });

  // node_modules/@lumeweb/hs-client/lib/node.js
  var require_node = __commonJS({
    "node_modules/@lumeweb/hs-client/lib/node.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var { Client } = require_bcurl();
      var NodeClient2 = class extends Client {
        constructor(options) {
          super(options);
        }
        async auth() {
          await this.call("auth", this.password);
          await this.watchChain();
          await this.watchMempool();
        }
        execute(name2, params) {
          return super.execute("/", name2, params);
        }
        getMempool() {
          return this.get("/mempool");
        }
        getInfo() {
          return this.get("/");
        }
        getCoinsByAddress(address) {
          assert3(typeof address === "string");
          return this.get(`/coin/address/${address}`);
        }
        getCoinsByAddresses(addresses) {
          assert3(Array.isArray(addresses));
          return this.post("/coin/address", { addresses });
        }
        getCoin(hash4, index) {
          assert3(typeof hash4 === "string");
          assert3(index >>> 0 === index);
          return this.get(`/coin/${hash4}/${index}`);
        }
        getTXByAddress(address) {
          assert3(typeof address === "string");
          return this.get(`/tx/address/${address}`);
        }
        getTXByAddresses(addresses) {
          assert3(Array.isArray(addresses));
          return this.post("/tx/address", { addresses });
        }
        getTX(hash4) {
          assert3(typeof hash4 === "string");
          return this.get(`/tx/${hash4}`);
        }
        getBlock(block) {
          assert3(typeof block === "string" || typeof block === "number");
          return this.get(`/block/${block}`);
        }
        getBlockHeader(block) {
          assert3(typeof block === "string" || typeof block === "number");
          return this.get(`/header/${block}`);
        }
        broadcast(tx) {
          assert3(typeof tx === "string");
          return this.post("/broadcast", { tx });
        }
        broadcastClaim(claim) {
          assert3(typeof claim === "string");
          return this.post("/claim", { claim });
        }
        reset(height) {
          return this.post("/reset", { height });
        }
        watchChain() {
          return this.call("watch chain");
        }
        watchMempool() {
          return this.call("watch mempool");
        }
        getTip() {
          return this.call("get tip");
        }
        getEntry(block) {
          return this.call("get entry", block);
        }
        getHashes(start, end) {
          return this.call("get hashes", start, end);
        }
        send(tx) {
          assert3(Buffer.isBuffer(tx));
          return this.call("send", tx);
        }
        sendClaim(claim) {
          assert3(Buffer.isBuffer(claim));
          return this.call("send claim", claim);
        }
        getNameStatus(nameHash) {
          assert3(Buffer.isBuffer(nameHash));
          return this.call("get name", nameHash);
        }
        setFilter(filter) {
          assert3(Buffer.isBuffer(filter));
          return this.call("set filter", filter);
        }
        addFilter(chunks) {
          if (!Array.isArray(chunks)) chunks = [chunks];
          return this.call("add filter", chunks);
        }
        resetFilter() {
          return this.call("reset filter");
        }
        estimateFee(blocks) {
          assert3(blocks == null || typeof blocks === "number");
          return this.call("estimate fee", blocks);
        }
        rescan(start) {
          if (start == null) start = 0;
          assert3(typeof start === "number" || Buffer.isBuffer(start));
          return this.call("rescan", start);
        }
      };
      module.exports = NodeClient2;
    },
  });

  // node_modules/@lumeweb/hs-client/lib/wallet.js
  var require_wallet = __commonJS({
    "node_modules/@lumeweb/hs-client/lib/wallet.js"(exports, module) {
      "use strict";
      var assert3 = require_assert();
      var EventEmitter = __require("events");
      var { Client } = require_bcurl();
      var WalletClient = class extends Client {
        constructor(options) {
          super(options);
          this.wallets = /* @__PURE__ */ new Map();
        }
        init() {
          this.bind("tx", (id2, details) => {
            this.dispatch(id2, "tx", details);
          });
          this.bind("confirmed", (id2, details) => {
            this.dispatch(id2, "confirmed", details);
          });
          this.bind("unconfirmed", (id2, details) => {
            this.dispatch(id2, "unconfirmed", details);
          });
          this.bind("conflict", (id2, details) => {
            this.dispatch(id2, "conflict", details);
          });
          this.bind("updated", (id2, details) => {
            this.dispatch(id2, "updated", details);
          });
          this.bind("address", (id2, receive) => {
            this.dispatch(id2, "address", receive);
          });
          this.bind("balance", (id2, balance) => {
            this.dispatch(id2, "balance", balance);
          });
        }
        dispatch(id2, event, ...args) {
          const wallet = this.wallets.get(id2);
          if (wallet) wallet.emit(event, ...args);
        }
        async open() {
          await super.open();
          this.init();
        }
        async close() {
          await super.close();
          this.wallets = /* @__PURE__ */ new Map();
        }
        async auth() {
          await this.call("auth", this.password);
        }
        execute(name2, params) {
          return super.execute("/", name2, params);
        }
        wallet(id2, token) {
          return new Wallet2(this, id2, token);
        }
        all(token) {
          return this.call("join", "*", token);
        }
        none() {
          return this.call("leave", "*");
        }
        join(id2, token) {
          return this.call("join", id2, token);
        }
        leave(id2) {
          return this.call("leave", id2);
        }
        rescan(height) {
          return this.post("/rescan", { height });
        }
        resend() {
          return this.post("/resend");
        }
        backup(path3) {
          return this.post("/backup", { path: path3 });
        }
        getWallets() {
          return this.get("/wallet");
        }
        createWallet(id2, options) {
          if (id2 == null) throw new Error("Wallet id is required.");
          return this.put(`/wallet/${id2}`, options);
        }
        getHistory(id2, account) {
          return this.get(`/wallet/${id2}/tx/history`, { account });
        }
        getCoins(id2, account) {
          return this.get(`/wallet/${id2}/coin`, { account });
        }
        getPending(id2, account) {
          return this.get(`/wallet/${id2}/tx/unconfirmed`, { account });
        }
        getBalance(id2, account) {
          return this.get(`/wallet/${id2}/balance`, { account });
        }
        getLast(id2, account, limit) {
          return this.get(`/wallet/${id2}/tx/last`, { account, limit });
        }
        getRange(id2, account, options) {
          return this.get(`/wallet/${id2}/tx/range`, {
            account,
            start: options.start,
            end: options.end,
            limit: options.limit,
            reverse: options.reverse,
          });
        }
        getTX(id2, hash4) {
          return this.get(`/wallet/${id2}/tx/${hash4}`);
        }
        getBlocks(id2) {
          return this.get(`/wallet/${id2}/block`);
        }
        getBlock(id2, height) {
          return this.get(`/wallet/${id2}/block/${height}`);
        }
        getCoin(id2, hash4, index) {
          return this.get(`/wallet/${id2}/coin/${hash4}/${index}`);
        }
        getName(id2, name2) {
          return this.get(`/wallet/${id2}/name/${name2}`);
        }
        getNames(id2) {
          return this.get(`/wallet/${id2}/name`);
        }
        getAuctionByName(id2, name2) {
          return this.get(`/wallet/${id2}/auction/${name2}`);
        }
        getAuctions(id2, options) {
          return this.get(`/wallet/${id2}/auction`, options);
        }
        getBidsByName(id2, name2, options) {
          return this.get(`/wallet/${id2}/bid/${name2}`, options);
        }
        getBids(id2, options) {
          return this.get(`/wallet/${id2}/bid`, options);
        }
        getRevealsByName(id2, name2, options) {
          return this.get(`/wallet/${id2}/reveal/${name2}`, options);
        }
        getReveals(id2, options) {
          return this.get(`/wallet/${id2}/reveal`, options);
        }
        getResource(id2, name2) {
          return this.get(`/wallet/${id2}/resource/${name2}`);
        }
        getNonce(id2, name2, options) {
          return this.get(`/wallet/${id2}/nonce/${name2}`, options);
        }
        zap(id2, account, age) {
          return this.post(`/wallet/${id2}/zap`, { account, age });
        }
        abandon(id2, hash4) {
          return this.del(`/wallet/${id2}/tx/${hash4}`);
        }
        createTX(id2, options) {
          return this.post(`/wallet/${id2}/create`, options);
        }
        send(id2, options) {
          return this.post(`/wallet/${id2}/send`, options);
        }
        createOpen(id2, options) {
          return this.post(`/wallet/${id2}/open`, options);
        }
        createBid(id2, options) {
          return this.post(`/wallet/${id2}/bid`, options);
        }
        createReveal(id2, options) {
          return this.post(`/wallet/${id2}/reveal`, options);
        }
        createRedeem(id2, options) {
          return this.post(`/wallet/${id2}/redeem`, options);
        }
        createUpdate(id2, options) {
          return this.post(`/wallet/${id2}/update`, options);
        }
        createRenewal(id2, options) {
          return this.post(`/wallet/${id2}/renewal`, options);
        }
        createTransfer(id2, options) {
          return this.post(`/wallet/${id2}/transfer`, options);
        }
        createCancel(id2, options) {
          return this.post(`/wallet/${id2}/cancel`, options);
        }
        createFinalize(id2, options) {
          return this.post(`/wallet/${id2}/finalize`, options);
        }
        createRevoke(id2, options) {
          return this.post(`/wallet/${id2}/revoke`, options);
        }
        sign(id2, options) {
          return this.post(`/wallet/${id2}/sign`, options);
        }
        getInfo(id2) {
          return this.get(`/wallet/${id2}`);
        }
        getAccounts(id2) {
          return this.get(`/wallet/${id2}/account`);
        }
        getMaster(id2) {
          return this.get(`/wallet/${id2}/master`);
        }
        getAccount(id2, account) {
          return this.get(`/wallet/${id2}/account/${account}`);
        }
        createAccount(id2, name2, options) {
          return this.put(`/wallet/${id2}/account/${name2}`, options);
        }
        createAddress(id2, account) {
          return this.post(`/wallet/${id2}/address`, { account });
        }
        createChange(id2, account) {
          return this.post(`/wallet/${id2}/change`, { account });
        }
        setPassphrase(id2, passphrase, old) {
          return this.post(`/wallet/${id2}/passphrase`, { passphrase, old });
        }
        retoken(id2, passphrase) {
          return this.post(`/wallet/${id2}/retoken`, {
            passphrase,
          });
        }
        importPrivate(id2, account, privateKey, passphrase) {
          return this.post(`/wallet/${id2}/import`, {
            account,
            privateKey,
            passphrase,
          });
        }
        importPublic(id2, account, publicKey) {
          return this.post(`/wallet/${id2}/import`, {
            account,
            publicKey,
          });
        }
        importAddress(id2, account, address) {
          return this.post(`/wallet/${id2}/import`, { account, address });
        }
        lockCoin(id2, hash4, index) {
          return this.put(`/wallet/${id2}/locked/${hash4}/${index}`);
        }
        unlockCoin(id2, hash4, index) {
          return this.del(`/wallet/${id2}/locked/${hash4}/${index}`);
        }
        getLocked(id2) {
          return this.get(`/wallet/${id2}/locked`);
        }
        lock(id2) {
          return this.post(`/wallet/${id2}/lock`);
        }
        unlock(id2, passphrase, timeout) {
          return this.post(`/wallet/${id2}/unlock`, { passphrase, timeout });
        }
        getKey(id2, address) {
          return this.get(`/wallet/${id2}/key/${address}`);
        }
        getWIF(id2, address, passphrase) {
          return this.get(`/wallet/${id2}/wif/${address}`, { passphrase });
        }
        addSharedKey(id2, account, accountKey) {
          return this.put(`/wallet/${id2}/shared-key`, { account, accountKey });
        }
        removeSharedKey(id2, account, accountKey) {
          return this.del(`/wallet/${id2}/shared-key`, { account, accountKey });
        }
        resendWallet(id2) {
          return this.post(`/wallet/${id2}/resend`);
        }
      };
      var Wallet2 = class extends EventEmitter {
        constructor(parent, id2, token) {
          super();
          this.parent = parent;
          this.client = parent.clone();
          this.client.token = token;
          this.id = id2;
          this.token = token;
        }
        async open() {
          await this.parent.join(this.id, this.token);
          this.parent.wallets.set(this.id, this);
        }
        async close() {
          await this.parent.leave(this.id);
          this.parent.wallets.delete(this.id);
        }
        getHistory(account) {
          return this.client.getHistory(this.id, account);
        }
        getCoins(account) {
          return this.client.getCoins(this.id, account);
        }
        getPending(account) {
          return this.client.getPending(this.id, account);
        }
        getBalance(account) {
          return this.client.getBalance(this.id, account);
        }
        getLast(account, limit) {
          return this.client.getLast(this.id, account, limit);
        }
        getRange(account, options) {
          return this.client.getRange(this.id, account, options);
        }
        getTX(hash4) {
          return this.client.getTX(this.id, hash4);
        }
        getBlocks() {
          return this.client.getBlocks(this.id);
        }
        getBlock(height) {
          return this.client.getBlock(this.id, height);
        }
        getCoin(hash4, index) {
          return this.client.getCoin(this.id, hash4, index);
        }
        getName(name2) {
          return this.client.getName(this.id, name2);
        }
        getNames() {
          return this.client.getNames(this.id);
        }
        getAuctionByName(name2) {
          return this.client.getAuctionByName(this.id, name2);
        }
        getAuctions(options) {
          return this.client.getAuctions(this.id, options);
        }
        getBidsByName(name2, options) {
          return this.client.getBidsByName(this.id, name2, options);
        }
        getBids(options) {
          return this.client.getBids(this.id, options);
        }
        getRevealsByName(name2, options) {
          return this.client.getRevealsByName(this.id, name2, options);
        }
        getReveals(options) {
          return this.client.getReveals(this.id, options);
        }
        getResource(name2) {
          return this.client.getResource(this.id, name2);
        }
        getNonce(name2, options) {
          return this.client.getNonce(this.id, name2, options);
        }
        zap(account, age) {
          return this.client.zap(this.id, account, age);
        }
        abandon(hash4) {
          return this.client.abandon(this.id, hash4);
        }
        createTX(options) {
          return this.client.createTX(this.id, options);
        }
        send(options) {
          return this.client.send(this.id, options);
        }
        createOpen(options) {
          return this.client.createOpen(this.id, options);
        }
        createBid(options) {
          return this.client.createBid(this.id, options);
        }
        createReveal(options) {
          return this.client.createReveal(this.id, options);
        }
        createRedeem(options) {
          return this.client.createRedeem(this.id, options);
        }
        createUpdate(options) {
          return this.client.createUpdate(this.id, options);
        }
        createRenewal(options) {
          return this.client.createRenewal(this.id, options);
        }
        createTransfer(options) {
          return this.client.createTransfer(this.id, options);
        }
        createCancel(options) {
          return this.client.createCancel(this.id, options);
        }
        createFinalize(options) {
          return this.client.createFinalize(this.id, options);
        }
        createRevoke(options) {
          return this.client.createRevoke(this.id, options);
        }
        sign(options) {
          return this.client.sign(this.id, options);
        }
        getInfo() {
          return this.client.getInfo(this.id);
        }
        getAccounts() {
          return this.client.getAccounts(this.id);
        }
        getMaster() {
          return this.client.getMaster(this.id);
        }
        getAccount(account) {
          return this.client.getAccount(this.id, account);
        }
        createAccount(name2, options) {
          if (name2 == null) throw new Error("Account name is required.");
          return this.client.createAccount(this.id, name2, options);
        }
        createAddress(account) {
          return this.client.createAddress(this.id, account);
        }
        createChange(account) {
          return this.client.createChange(this.id, account);
        }
        setPassphrase(passphrase, old) {
          return this.client.setPassphrase(this.id, passphrase, old);
        }
        async retoken(passphrase) {
          const result = await this.client.retoken(this.id, passphrase);
          assert3(result);
          assert3(typeof result.token === "string");
          this.token = result.token;
          return result;
        }
        importPrivate(account, privateKey, passphrase) {
          return this.client.importPrivate(
            this.id,
            account,
            privateKey,
            passphrase
          );
        }
        importPublic(account, publicKey) {
          return this.client.importPublic(this.id, account, publicKey);
        }
        importAddress(account, address) {
          return this.client.importAddress(this.id, account, address);
        }
        lockCoin(hash4, index) {
          return this.client.lockCoin(this.id, hash4, index);
        }
        unlockCoin(hash4, index) {
          return this.client.unlockCoin(this.id, hash4, index);
        }
        getLocked() {
          return this.client.getLocked(this.id);
        }
        lock() {
          return this.client.lock(this.id);
        }
        unlock(passphrase, timeout) {
          return this.client.unlock(this.id, passphrase, timeout);
        }
        getKey(address) {
          return this.client.getKey(this.id, address);
        }
        getWIF(address, passphrase) {
          return this.client.getWIF(this.id, address, passphrase);
        }
        addSharedKey(account, accountKey) {
          return this.client.addSharedKey(this.id, account, accountKey);
        }
        removeSharedKey(account, accountKey) {
          return this.client.removeSharedKey(this.id, account, accountKey);
        }
        resend() {
          return this.client.resendWallet(this.id);
        }
      };
      module.exports = WalletClient;
    },
  });

  // node_modules/@lumeweb/hs-client/lib/hs-client.js
  var require_hs_client = __commonJS({
    "node_modules/@lumeweb/hs-client/lib/hs-client.js"(exports) {
      "use strict";
      exports.NodeClient = require_node();
      exports.WalletClient = require_wallet();
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/bind.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function bind(fn, thisArg) {
        return function wrap() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn.apply(thisArg, args);
        };
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/utils.js"(
      exports,
      module
    ) {
      "use strict";
      var bind = require_bind();
      var toString = Object.prototype.toString;
      function isArray(val) {
        return Array.isArray(val);
      }
      function isUndefined(val) {
        return typeof val === "undefined";
      }
      function isBuffer(val) {
        return (
          val !== null &&
          !isUndefined(val) &&
          val.constructor !== null &&
          !isUndefined(val.constructor) &&
          typeof val.constructor.isBuffer === "function" &&
          val.constructor.isBuffer(val)
        );
      }
      function isArrayBuffer(val) {
        return toString.call(val) === "[object ArrayBuffer]";
      }
      function isFormData(val) {
        return toString.call(val) === "[object FormData]";
      }
      function isArrayBufferView(val) {
        var result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && isArrayBuffer(val.buffer);
        }
        return result;
      }
      function isString(val) {
        return typeof val === "string";
      }
      function isNumber(val) {
        return typeof val === "number";
      }
      function isObject(val) {
        return val !== null && typeof val === "object";
      }
      function isPlainObject(val) {
        if (toString.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      function isDate(val) {
        return toString.call(val) === "[object Date]";
      }
      function isFile(val) {
        return toString.call(val) === "[object File]";
      }
      function isBlob(val) {
        return toString.call(val) === "[object Blob]";
      }
      function isFunction(val) {
        return toString.call(val) === "[object Function]";
      }
      function isStream2(val) {
        return isObject(val) && isFunction(val.pipe);
      }
      function isURLSearchParams(val) {
        return toString.call(val) === "[object URLSearchParams]";
      }
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      function isStandardBrowserEnv() {
        if (
          typeof navigator !== "undefined" &&
          (navigator.product === "ReactNative" ||
            navigator.product === "NativeScript" ||
            navigator.product === "NS")
        ) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      function forEach(obj, fn) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray(obj)) {
          for (var i = 0, l2 = obj.length; i < l2; i++) {
            fn.call(null, obj[i], i, obj);
          }
        } else {
          for (var key2 in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key2)) {
              fn.call(null, obj[key2], key2, obj);
            }
          }
        }
      }
      function merge() {
        var result = {};
        function assignValue(val, key2) {
          if (isPlainObject(result[key2]) && isPlainObject(val)) {
            result[key2] = merge(result[key2], val);
          } else if (isPlainObject(val)) {
            result[key2] = merge({}, val);
          } else if (isArray(val)) {
            result[key2] = val.slice();
          } else {
            result[key2] = val;
          }
        }
        for (var i = 0, l2 = arguments.length; i < l2; i++) {
          forEach(arguments[i], assignValue);
        }
        return result;
      }
      function extend(a2, b2, thisArg) {
        forEach(b2, function assignValue(val, key2) {
          if (thisArg && typeof val === "function") {
            a2[key2] = bind(val, thisArg);
          } else {
            a2[key2] = val;
          }
        });
        return a2;
      }
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      module.exports = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString,
        isNumber,
        isObject,
        isPlainObject,
        isUndefined,
        isDate,
        isFile,
        isBlob,
        isFunction,
        isStream: isStream2,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach,
        merge,
        extend,
        trim,
        stripBOM,
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/buildURL.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      function encode4(val) {
        return encodeURIComponent(val)
          .replace(/%3A/gi, ":")
          .replace(/%24/g, "$")
          .replace(/%2C/gi, ",")
          .replace(/%20/g, "+")
          .replace(/%5B/gi, "[")
          .replace(/%5D/gi, "]");
      }
      module.exports = function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, function serialize4(val, key2) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key2 = key2 + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, function parseValue(v2) {
              if (utils.isDate(v2)) {
                v2 = v2.toISOString();
              } else if (utils.isObject(v2)) {
                v2 = JSON.stringify(v2);
              }
              parts.push(encode4(key2) + "=" + encode4(v2));
            });
          });
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/InterceptorManager.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      function InterceptorManager() {
        this.handlers = [];
      }
      InterceptorManager.prototype.use = function use(
        fulfilled,
        rejected,
        options
      ) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null,
        });
        return this.handlers.length - 1;
      };
      InterceptorManager.prototype.eject = function eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      };
      InterceptorManager.prototype.forEach = function forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h2) {
          if (h2 !== null) {
            fn(h2);
          }
        });
      };
      module.exports = InterceptorManager;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/normalizeHeaderName.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      module.exports = function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, function processHeader(value, name2) {
          if (
            name2 !== normalizedName &&
            name2.toUpperCase() === normalizedName.toUpperCase()
          ) {
            headers[normalizedName] = value;
            delete headers[name2];
          }
        });
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/enhanceError.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function enhanceError(
        error,
        config,
        code,
        request,
        response
      ) {
        error.config = config;
        if (code) {
          error.code = code;
        }
        error.request = request;
        error.response = response;
        error.isAxiosError = true;
        error.toJSON = function toJSON2() {
          return {
            message: this.message,
            name: this.name,
            description: this.description,
            number: this.number,
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            config: this.config,
            code: this.code,
            status:
              this.response && this.response.status
                ? this.response.status
                : null,
          };
        };
        return error;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/createError.js"(
      exports,
      module
    ) {
      "use strict";
      var enhanceError = require_enhanceError();
      module.exports = function createError(
        message,
        config,
        code,
        request,
        response
      ) {
        var error = new Error(message);
        return enhanceError(error, config, code, request, response);
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/settle.js"(
      exports,
      module
    ) {
      "use strict";
      var createError = require_createError();
      module.exports = function settle(resolve2, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (
          !response.status ||
          !validateStatus ||
          validateStatus(response.status)
        ) {
          resolve2(response);
        } else {
          reject(
            createError(
              "Request failed with status code " + response.status,
              response.config,
              null,
              response.request,
              response
            )
          );
        }
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/cookies.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv()
        ? (function standardBrowserEnv() {
            return {
              write: function write(
                name2,
                value,
                expires,
                path3,
                domain,
                secure
              ) {
                var cookie = [];
                cookie.push(name2 + "=" + encodeURIComponent(value));
                if (utils.isNumber(expires)) {
                  cookie.push("expires=" + new Date(expires).toGMTString());
                }
                if (utils.isString(path3)) {
                  cookie.push("path=" + path3);
                }
                if (utils.isString(domain)) {
                  cookie.push("domain=" + domain);
                }
                if (secure === true) {
                  cookie.push("secure");
                }
                document.cookie = cookie.join("; ");
              },
              read: function read(name2) {
                var match = document.cookie.match(
                  new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)")
                );
                return match ? decodeURIComponent(match[3]) : null;
              },
              remove: function remove(name2) {
                this.write(name2, "", Date.now() - 864e5);
              },
            };
          })()
        : (function nonStandardBrowserEnv() {
            return {
              write: function write() {},
              read: function read() {
                return null;
              },
              remove: function remove() {},
            };
          })();
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isAbsoluteURL.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function isAbsoluteURL(url) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/combineURLs.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function combineURLs(baseURL, relativeURL) {
        return relativeURL
          ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "")
          : baseURL;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/buildFullPath.js"(
      exports,
      module
    ) {
      "use strict";
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module.exports = function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/parseHeaders.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent",
      ];
      module.exports = function parseHeaders(headers) {
        var parsed = {};
        var key2;
        var val;
        var i;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), function parser(line) {
          i = line.indexOf(":");
          key2 = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));
          if (key2) {
            if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
              return;
            }
            if (key2 === "set-cookie") {
              parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
            } else {
              parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
            }
          }
        });
        return parsed;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isURLSameOrigin.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv()
        ? (function standardBrowserEnv() {
            var msie = /(msie|trident)/i.test(navigator.userAgent);
            var urlParsingNode = document.createElement("a");
            var originURL;
            function resolveURL(url) {
              var href = url;
              if (msie) {
                urlParsingNode.setAttribute("href", href);
                href = urlParsingNode.href;
              }
              urlParsingNode.setAttribute("href", href);
              return {
                href: urlParsingNode.href,
                protocol: urlParsingNode.protocol
                  ? urlParsingNode.protocol.replace(/:$/, "")
                  : "",
                host: urlParsingNode.host,
                search: urlParsingNode.search
                  ? urlParsingNode.search.replace(/^\?/, "")
                  : "",
                hash: urlParsingNode.hash
                  ? urlParsingNode.hash.replace(/^#/, "")
                  : "",
                hostname: urlParsingNode.hostname,
                port: urlParsingNode.port,
                pathname:
                  urlParsingNode.pathname.charAt(0) === "/"
                    ? urlParsingNode.pathname
                    : "/" + urlParsingNode.pathname,
              };
            }
            originURL = resolveURL(window.location.href);
            return function isURLSameOrigin(requestURL) {
              var parsed = utils.isString(requestURL)
                ? resolveURL(requestURL)
                : requestURL;
              return (
                parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host
              );
            };
          })()
        : (function nonStandardBrowserEnv() {
            return function isURLSameOrigin() {
              return true;
            };
          })();
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/Cancel.js"(
      exports,
      module
    ) {
      "use strict";
      function Cancel(message) {
        this.message = message;
      }
      Cancel.prototype.toString = function toString() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      };
      Cancel.prototype.__CANCEL__ = true;
      module.exports = Cancel;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/adapters/xhr.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      var defaults = require_defaults();
      var Cancel = require_Cancel();
      module.exports = function xhrAdapter(config) {
        return new Promise(function dispatchXhrRequest(resolve2, reject) {
          var requestData = config.data;
          var requestHeaders = config.headers;
          var responseType = config.responseType;
          var onCanceled;
          function done() {
            if (config.cancelToken) {
              config.cancelToken.unsubscribe(onCanceled);
            }
            if (config.signal) {
              config.signal.removeEventListener("abort", onCanceled);
            }
          }
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request = new XMLHttpRequest();
          if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password
              ? unescape(encodeURIComponent(config.auth.password))
              : "";
            requestHeaders.Authorization =
              "Basic " + btoa(username + ":" + password);
          }
          var fullPath = buildFullPath(config.baseURL, config.url);
          request.open(
            config.method.toUpperCase(),
            buildURL(fullPath, config.params, config.paramsSerializer),
            true
          );
          request.timeout = config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            var responseHeaders =
              "getAllResponseHeaders" in request
                ? parseHeaders(request.getAllResponseHeaders())
                : null;
            var responseData =
              !responseType ||
              responseType === "text" ||
              responseType === "json"
                ? request.responseText
                : request.response;
            var response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request,
            };
            settle(
              function _resolve(value) {
                resolve2(value);
                done();
              },
              function _reject(err) {
                reject(err);
                done();
              },
              response
            );
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (
                request.status === 0 &&
                !(
                  request.responseURL &&
                  request.responseURL.indexOf("file:") === 0
                )
              ) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(
              createError("Request aborted", config, "ECONNABORTED", request)
            );
            request = null;
          };
          request.onerror = function handleError() {
            reject(createError("Network Error", config, null, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout
              ? "timeout of " + config.timeout + "ms exceeded"
              : "timeout exceeded";
            var transitional = config.transitional || defaults.transitional;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(
              createError(
                timeoutErrorMessage,
                config,
                transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
                request
              )
            );
            request = null;
          };
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue =
              (config.withCredentials || isURLSameOrigin(fullPath)) &&
              config.xsrfCookieName
                ? cookies.read(config.xsrfCookieName)
                : void 0;
            if (xsrfValue) {
              requestHeaders[config.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders, function setRequestHeader(val, key2) {
              if (
                typeof requestData === "undefined" &&
                key2.toLowerCase() === "content-type"
              ) {
                delete requestHeaders[key2];
              } else {
                request.setRequestHeader(key2, val);
              }
            });
          }
          if (!utils.isUndefined(config.withCredentials)) {
            request.withCredentials = !!config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = config.responseType;
          }
          if (typeof config.onDownloadProgress === "function") {
            request.addEventListener("progress", config.onDownloadProgress);
          }
          if (typeof config.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener(
              "progress",
              config.onUploadProgress
            );
          }
          if (config.cancelToken || config.signal) {
            onCanceled = function (cancel) {
              if (!request) {
                return;
              }
              reject(
                !cancel || (cancel && cancel.type)
                  ? new Cancel("canceled")
                  : cancel
              );
              request.abort();
              request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) {
              config.signal.aborted
                ? onCanceled()
                : config.signal.addEventListener("abort", onCanceled);
            }
          }
          if (!requestData) {
            requestData = null;
          }
          request.send(requestData);
        });
      };
    },
  });

  // node_modules/debug/node_modules/ms/index.js
  var require_ms = __commonJS({
    "node_modules/debug/node_modules/ms/index.js"(exports, module) {
      var s2 = 1e3;
      var m2 = s2 * 60;
      var h2 = m2 * 60;
      var d2 = h2 * 24;
      var w2 = d2 * 7;
      var y2 = d2 * 365.25;
      module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0) {
          return parse6(val);
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error(
          "val is not a non-empty string or a valid number. val=" +
            JSON.stringify(val)
        );
      };
      function parse6(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match =
          /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            str
          );
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y2;
          case "weeks":
          case "week":
          case "w":
            return n * w2;
          case "days":
          case "day":
          case "d":
            return n * d2;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h2;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m2;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s2;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d2) {
          return Math.round(ms / d2) + "d";
        }
        if (msAbs >= h2) {
          return Math.round(ms / h2) + "h";
        }
        if (msAbs >= m2) {
          return Math.round(ms / m2) + "m";
        }
        if (msAbs >= s2) {
          return Math.round(ms / s2) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d2) {
          return plural(ms, msAbs, d2, "day");
        }
        if (msAbs >= h2) {
          return plural(ms, msAbs, h2, "hour");
        }
        if (msAbs >= m2) {
          return plural(ms, msAbs, m2, "minute");
        }
        if (msAbs >= s2) {
          return plural(ms, msAbs, s2, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name2) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name2 + (isPlural ? "s" : "");
      }
    },
  });

  // node_modules/debug/src/common.js
  var require_common = __commonJS({
    "node_modules/debug/src/common.js"(exports, module) {
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require_ms();
        createDebug.destroy = destroy;
        Object.keys(env).forEach((key2) => {
          createDebug[key2] = env[key2];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};
        function selectColor(namespace) {
          let hash4 = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash4 = (hash4 << 5) - hash4 + namespace.charCodeAt(i);
            hash4 |= 0;
          }
          return createDebug.colors[
            Math.abs(hash4) % createDebug.colors.length
          ];
        }
        createDebug.selectColor = selectColor;
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            if (!debug.enabled) {
              return;
            }
            const self2 = debug;
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self2.diff = ms;
            self2.prev = prevTime;
            self2.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%") {
                return "%";
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === "function") {
                const val = args[index];
                match = formatter.call(self2, val);
                args.splice(index, 1);
                index--;
              }
              return match;
            });
            createDebug.formatArgs.call(self2, args);
            const logFn = self2.log || createDebug.log;
            logFn.apply(self2, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: (v2) => {
              enableOverride = v2;
            },
          });
          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(
            this.namespace +
              (typeof delimiter === "undefined" ? ":" : delimiter) +
              namespace
          );
          newDebug.log = this.log;
          return newDebug;
        }
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (
            typeof namespaces === "string" ? namespaces : ""
          ).split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              createDebug.skips.push(
                new RegExp("^" + namespaces.substr(1) + "$")
              );
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }
        function disable() {
          const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips
              .map(toNamespace)
              .map((namespace) => "-" + namespace),
          ].join(",");
          createDebug.enable("");
          return namespaces;
        }
        function enabled(name2) {
          if (name2[name2.length - 1] === "*") {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name2)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name2)) {
              return true;
            }
          }
          return false;
        }
        function toNamespace(regexp) {
          return regexp
            .toString()
            .substring(2, regexp.toString().length - 2)
            .replace(/\.\*\?$/, "*");
        }
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }
        function destroy() {
          console.warn(
            "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
          );
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    },
  });

  // node_modules/debug/src/browser.js
  var require_browser = __commonJS({
    "node_modules/debug/src/browser.js"(exports, module) {
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();
      exports.destroy = (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn(
              "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
            );
          }
        };
      })();
      exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33",
      ];
      function useColors() {
        if (
          typeof window !== "undefined" &&
          window.process &&
          (window.process.type === "renderer" || window.process.__nwjs)
        ) {
          return true;
        }
        if (
          typeof navigator !== "undefined" &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
        ) {
          return false;
        }
        return (
          (typeof document !== "undefined" &&
            document.documentElement &&
            document.documentElement.style &&
            document.documentElement.style.WebkitAppearance) ||
          (typeof window !== "undefined" &&
            window.console &&
            (window.console.firebug ||
              (window.console.exception && window.console.table))) ||
          (typeof navigator !== "undefined" &&
            navigator.userAgent &&
            navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
            parseInt(RegExp.$1, 10) >= 31) ||
          (typeof navigator !== "undefined" &&
            navigator.userAgent &&
            navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
        );
      }
      function formatArgs(args) {
        args[0] =
          (this.useColors ? "%c" : "") +
          this.namespace +
          (this.useColors ? " %c" : " ") +
          args[0] +
          (this.useColors ? "%c " : " ") +
          "+" +
          module.exports.humanize(this.diff);
        if (!this.useColors) {
          return;
        }
        const c2 = "color: " + this.color;
        args.splice(1, 0, c2, "color: inherit");
        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          if (match === "%%") {
            return;
          }
          index++;
          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c2);
      }
      exports.log = console.debug || console.log || (() => {});
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem("debug", namespaces);
          } else {
            exports.storage.removeItem("debug");
          }
        } catch (error) {}
      }
      function load() {
        let r;
        try {
          r = exports.storage.getItem("debug");
        } catch (error) {}
        if (!r && typeof process !== "undefined" && "env" in process) {
          r = process.env.DEBUG;
        }
        return r;
      }
      function localstorage() {
        try {
          return localStorage;
        } catch (error) {}
      }
      module.exports = require_common()(exports);
      var { formatters } = module.exports;
      formatters.j = function (v2) {
        try {
          return JSON.stringify(v2);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    },
  });

  // node_modules/has-flag/index.js
  var require_has_flag = __commonJS({
    "node_modules/has-flag/index.js"(exports, module) {
      "use strict";
      module.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-")
          ? ""
          : flag.length === 1
          ? "-"
          : "--";
        const position = argv.indexOf(prefix + flag);
        const terminatorPosition = argv.indexOf("--");
        return (
          position !== -1 &&
          (terminatorPosition === -1 || position < terminatorPosition)
        );
      };
    },
  });

  // node_modules/supports-color/index.js
  var require_supports_color = __commonJS({
    "node_modules/supports-color/index.js"(exports, module) {
      "use strict";
      var os = __require("os");
      var tty = __require("tty");
      var hasFlag = require_has_flag();
      var { env } = process;
      var forceColor;
      if (
        hasFlag("no-color") ||
        hasFlag("no-colors") ||
        hasFlag("color=false") ||
        hasFlag("color=never")
      ) {
        forceColor = 0;
      } else if (
        hasFlag("color") ||
        hasFlag("colors") ||
        hasFlag("color=true") ||
        hasFlag("color=always")
      ) {
        forceColor = 1;
      }
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          forceColor = 1;
        } else if (env.FORCE_COLOR === "false") {
          forceColor = 0;
        } else {
          forceColor =
            env.FORCE_COLOR.length === 0
              ? 1
              : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(level) {
        if (level === 0) {
          return false;
        }
        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3,
        };
      }
      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0) {
          return 0;
        }
        if (
          hasFlag("color=16m") ||
          hasFlag("color=full") ||
          hasFlag("color=truecolor")
        ) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
        if (haveStream && !streamIsTTY && forceColor === void 0) {
          return 0;
        }
        const min = forceColor || 0;
        if (env.TERM === "dumb") {
          return min;
        }
        if (process.platform === "win32") {
          const osRelease = os.release().split(".");
          if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in env) {
          if (
            [
              "TRAVIS",
              "CIRCLECI",
              "APPVEYOR",
              "GITLAB_CI",
              "GITHUB_ACTIONS",
              "BUILDKITE",
            ].some((sign7) => sign7 in env) ||
            env.CI_NAME === "codeship"
          ) {
            return 1;
          }
          return min;
        }
        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION)
            ? 1
            : 0;
        }
        if (env.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in env) {
          const version89 = parseInt(
            (env.TERM_PROGRAM_VERSION || "").split(".")[0],
            10
          );
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version89 >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(env.TERM)) {
          return 2;
        }
        if (
          /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
            env.TERM
          )
        ) {
          return 1;
        }
        if ("COLORTERM" in env) {
          return 1;
        }
        return min;
      }
      function getSupportLevel(stream) {
        const level = supportsColor(stream, stream && stream.isTTY);
        return translateLevel(level);
      }
      module.exports = {
        supportsColor: getSupportLevel,
        stdout: translateLevel(supportsColor(true, tty.isatty(1))),
        stderr: translateLevel(supportsColor(true, tty.isatty(2))),
      };
    },
  });

  // node_modules/debug/src/node.js
  var require_node2 = __commonJS({
    "node_modules/debug/src/node.js"(exports, module) {
      var tty = __require("tty");
      var util = __require("util");
      exports.init = init2;
      exports.log = log2;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.destroy = util.deprecate(() => {},
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      exports.colors = [6, 2, 3, 4, 5, 1];
      try {
        const supportsColor = require_supports_color();
        if (
          supportsColor &&
          (supportsColor.stderr || supportsColor).level >= 2
        ) {
          exports.colors = [
            20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62,
            63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112,
            113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165,
            166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196,
            197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
            214, 215, 220, 221,
          ];
        }
      } catch (error) {}
      exports.inspectOpts = Object.keys(process.env)
        .filter((key2) => {
          return /^debug_/i.test(key2);
        })
        .reduce((obj, key2) => {
          const prop = key2
            .substring(6)
            .toLowerCase()
            .replace(/_([a-z])/g, (_2, k2) => {
              return k2.toUpperCase();
            });
          let val = process.env[key2];
          if (/^(yes|on|true|enabled)$/i.test(val)) {
            val = true;
          } else if (/^(no|off|false|disabled)$/i.test(val)) {
            val = false;
          } else if (val === "null") {
            val = null;
          } else {
            val = Number(val);
          }
          obj[prop] = val;
          return obj;
        }, {});
      function useColors() {
        return "colors" in exports.inspectOpts
          ? Boolean(exports.inspectOpts.colors)
          : tty.isatty(process.stderr.fd);
      }
      function formatArgs(args) {
        const { namespace: name2, useColors: useColors2 } = this;
        if (useColors2) {
          const c2 = this.color;
          const colorCode = "\x1B[3" + (c2 < 8 ? c2 : "8;5;" + c2);
          const prefix = `  ${colorCode};1m${name2} \x1B[0m`;
          args[0] = prefix + args[0].split("\n").join("\n" + prefix);
          args.push(
            colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m"
          );
        } else {
          args[0] = getDate() + name2 + " " + args[0];
        }
      }
      function getDate() {
        if (exports.inspectOpts.hideDate) {
          return "";
        }
        return new Date().toISOString() + " ";
      }
      function log2(...args) {
        return process.stderr.write(util.format(...args) + "\n");
      }
      function save(namespaces) {
        if (namespaces) {
          process.env.DEBUG = namespaces;
        } else {
          delete process.env.DEBUG;
        }
      }
      function load() {
        return process.env.DEBUG;
      }
      function init2(debug) {
        debug.inspectOpts = {};
        const keys = Object.keys(exports.inspectOpts);
        for (let i = 0; i < keys.length; i++) {
          debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
        }
      }
      module.exports = require_common()(exports);
      var { formatters } = module.exports;
      formatters.o = function (v2) {
        this.inspectOpts.colors = this.useColors;
        return util
          .inspect(v2, this.inspectOpts)
          .split("\n")
          .map((str) => str.trim())
          .join(" ");
      };
      formatters.O = function (v2) {
        this.inspectOpts.colors = this.useColors;
        return util.inspect(v2, this.inspectOpts);
      };
    },
  });

  // node_modules/debug/src/index.js
  var require_src = __commonJS({
    "node_modules/debug/src/index.js"(exports, module) {
      if (
        typeof process === "undefined" ||
        process.type === "renderer" ||
        process.browser === true ||
        process.__nwjs
      ) {
        module.exports = require_browser();
      } else {
        module.exports = require_node2();
      }
    },
  });

  // node_modules/follow-redirects/debug.js
  var require_debug = __commonJS({
    "node_modules/follow-redirects/debug.js"(exports, module) {
      var debug;
      module.exports = function () {
        if (!debug) {
          try {
            debug = require_src()("follow-redirects");
          } catch (error) {}
          if (typeof debug !== "function") {
            debug = function () {};
          }
        }
        debug.apply(null, arguments);
      };
    },
  });

  // node_modules/follow-redirects/index.js
  var require_follow_redirects = __commonJS({
    "node_modules/follow-redirects/index.js"(exports, module) {
      var url = __require("url");
      var URL4 = url.URL;
      var http2 = __require("http");
      var https2 = __require("https");
      var Writable = __require("stream").Writable;
      var assert3 = __require("assert");
      var debug = require_debug();
      var events = [
        "abort",
        "aborted",
        "connect",
        "error",
        "socket",
        "timeout",
      ];
      var eventHandlers = /* @__PURE__ */ Object.create(null);
      events.forEach(function (event) {
        eventHandlers[event] = function (arg1, arg2, arg3) {
          this._redirectable.emit(event, arg1, arg2, arg3);
        };
      });
      var RedirectionError = createErrorType(
        "ERR_FR_REDIRECTION_FAILURE",
        "Redirected request failed"
      );
      var TooManyRedirectsError = createErrorType(
        "ERR_FR_TOO_MANY_REDIRECTS",
        "Maximum number of redirects exceeded"
      );
      var MaxBodyLengthExceededError = createErrorType(
        "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
        "Request body larger than maxBodyLength limit"
      );
      var WriteAfterEndError = createErrorType(
        "ERR_STREAM_WRITE_AFTER_END",
        "write after end"
      );
      function RedirectableRequest(options, responseCallback) {
        Writable.call(this);
        this._sanitizeOptions(options);
        this._options = options;
        this._ended = false;
        this._ending = false;
        this._redirectCount = 0;
        this._redirects = [];
        this._requestBodyLength = 0;
        this._requestBodyBuffers = [];
        if (responseCallback) {
          this.on("response", responseCallback);
        }
        var self2 = this;
        this._onNativeResponse = function (response) {
          self2._processResponse(response);
        };
        this._performRequest();
      }
      RedirectableRequest.prototype = Object.create(Writable.prototype);
      RedirectableRequest.prototype.abort = function () {
        abortRequest(this._currentRequest);
        this.emit("abort");
      };
      RedirectableRequest.prototype.write = function (
        data,
        encoding,
        callback
      ) {
        if (this._ending) {
          throw new WriteAfterEndError();
        }
        if (
          !(
            typeof data === "string" ||
            (typeof data === "object" && "length" in data)
          )
        ) {
          throw new TypeError("data should be a string, Buffer or Uint8Array");
        }
        if (typeof encoding === "function") {
          callback = encoding;
          encoding = null;
        }
        if (data.length === 0) {
          if (callback) {
            callback();
          }
          return;
        }
        if (
          this._requestBodyLength + data.length <=
          this._options.maxBodyLength
        ) {
          this._requestBodyLength += data.length;
          this._requestBodyBuffers.push({ data, encoding });
          this._currentRequest.write(data, encoding, callback);
        } else {
          this.emit("error", new MaxBodyLengthExceededError());
          this.abort();
        }
      };
      RedirectableRequest.prototype.end = function (data, encoding, callback) {
        if (typeof data === "function") {
          callback = data;
          data = encoding = null;
        } else if (typeof encoding === "function") {
          callback = encoding;
          encoding = null;
        }
        if (!data) {
          this._ended = this._ending = true;
          this._currentRequest.end(null, null, callback);
        } else {
          var self2 = this;
          var currentRequest = this._currentRequest;
          this.write(data, encoding, function () {
            self2._ended = true;
            currentRequest.end(null, null, callback);
          });
          this._ending = true;
        }
      };
      RedirectableRequest.prototype.setHeader = function (name2, value) {
        this._options.headers[name2] = value;
        this._currentRequest.setHeader(name2, value);
      };
      RedirectableRequest.prototype.removeHeader = function (name2) {
        delete this._options.headers[name2];
        this._currentRequest.removeHeader(name2);
      };
      RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
        var self2 = this;
        function destroyOnTimeout(socket) {
          socket.setTimeout(msecs);
          socket.removeListener("timeout", socket.destroy);
          socket.addListener("timeout", socket.destroy);
        }
        function startTimer(socket) {
          if (self2._timeout) {
            clearTimeout(self2._timeout);
          }
          self2._timeout = setTimeout(function () {
            self2.emit("timeout");
            clearTimer();
          }, msecs);
          destroyOnTimeout(socket);
        }
        function clearTimer() {
          if (self2._timeout) {
            clearTimeout(self2._timeout);
            self2._timeout = null;
          }
          self2.removeListener("abort", clearTimer);
          self2.removeListener("error", clearTimer);
          self2.removeListener("response", clearTimer);
          if (callback) {
            self2.removeListener("timeout", callback);
          }
          if (!self2.socket) {
            self2._currentRequest.removeListener("socket", startTimer);
          }
        }
        if (callback) {
          this.on("timeout", callback);
        }
        if (this.socket) {
          startTimer(this.socket);
        } else {
          this._currentRequest.once("socket", startTimer);
        }
        this.on("socket", destroyOnTimeout);
        this.on("abort", clearTimer);
        this.on("error", clearTimer);
        this.on("response", clearTimer);
        return this;
      };
      ["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(
        function (method) {
          RedirectableRequest.prototype[method] = function (a2, b2) {
            return this._currentRequest[method](a2, b2);
          };
        }
      );
      ["aborted", "connection", "socket"].forEach(function (property) {
        Object.defineProperty(RedirectableRequest.prototype, property, {
          get: function () {
            return this._currentRequest[property];
          },
        });
      });
      RedirectableRequest.prototype._sanitizeOptions = function (options) {
        if (!options.headers) {
          options.headers = {};
        }
        if (options.host) {
          if (!options.hostname) {
            options.hostname = options.host;
          }
          delete options.host;
        }
        if (!options.pathname && options.path) {
          var searchPos = options.path.indexOf("?");
          if (searchPos < 0) {
            options.pathname = options.path;
          } else {
            options.pathname = options.path.substring(0, searchPos);
            options.search = options.path.substring(searchPos);
          }
        }
      };
      RedirectableRequest.prototype._performRequest = function () {
        var protocol = this._options.protocol;
        var nativeProtocol = this._options.nativeProtocols[protocol];
        if (!nativeProtocol) {
          this.emit("error", new TypeError("Unsupported protocol " + protocol));
          return;
        }
        if (this._options.agents) {
          var scheme = protocol.substr(0, protocol.length - 1);
          this._options.agent = this._options.agents[scheme];
        }
        var request = (this._currentRequest = nativeProtocol.request(
          this._options,
          this._onNativeResponse
        ));
        this._currentUrl = url.format(this._options);
        request._redirectable = this;
        for (var e = 0; e < events.length; e++) {
          request.on(events[e], eventHandlers[events[e]]);
        }
        if (this._isRedirect) {
          var i = 0;
          var self2 = this;
          var buffers = this._requestBodyBuffers;
          (function writeNext(error) {
            if (request === self2._currentRequest) {
              if (error) {
                self2.emit("error", error);
              } else if (i < buffers.length) {
                var buffer = buffers[i++];
                if (!request.finished) {
                  request.write(buffer.data, buffer.encoding, writeNext);
                }
              } else if (self2._ended) {
                request.end();
              }
            }
          })();
        }
      };
      RedirectableRequest.prototype._processResponse = function (response) {
        var statusCode = response.statusCode;
        if (this._options.trackRedirects) {
          this._redirects.push({
            url: this._currentUrl,
            headers: response.headers,
            statusCode,
          });
        }
        var location = response.headers.location;
        if (
          !location ||
          this._options.followRedirects === false ||
          statusCode < 300 ||
          statusCode >= 400
        ) {
          response.responseUrl = this._currentUrl;
          response.redirects = this._redirects;
          this.emit("response", response);
          this._requestBodyBuffers = [];
          return;
        }
        abortRequest(this._currentRequest);
        response.destroy();
        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new TooManyRedirectsError());
          return;
        }
        if (
          ((statusCode === 301 || statusCode === 302) &&
            this._options.method === "POST") ||
          (statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method))
        ) {
          this._options.method = "GET";
          this._requestBodyBuffers = [];
          removeMatchingHeaders(/^content-/i, this._options.headers);
        }
        var currentHostHeader = removeMatchingHeaders(
          /^host$/i,
          this._options.headers
        );
        var currentUrlParts = url.parse(this._currentUrl);
        var currentHost = currentHostHeader || currentUrlParts.host;
        var currentUrl = /^\w+:/.test(location)
          ? this._currentUrl
          : url.format(Object.assign(currentUrlParts, { host: currentHost }));
        var redirectUrl;
        try {
          redirectUrl = url.resolve(currentUrl, location);
        } catch (cause) {
          this.emit("error", new RedirectionError(cause));
          return;
        }
        debug("redirecting to", redirectUrl);
        this._isRedirect = true;
        var redirectUrlParts = url.parse(redirectUrl);
        Object.assign(this._options, redirectUrlParts);
        if (
          (redirectUrlParts.protocol !== currentUrlParts.protocol &&
            redirectUrlParts.protocol !== "https:") ||
          (redirectUrlParts.host !== currentHost &&
            !isSubdomain(redirectUrlParts.host, currentHost))
        ) {
          removeMatchingHeaders(
            /^(?:authorization|cookie)$/i,
            this._options.headers
          );
        }
        if (typeof this._options.beforeRedirect === "function") {
          var responseDetails = { headers: response.headers };
          try {
            this._options.beforeRedirect.call(
              null,
              this._options,
              responseDetails
            );
          } catch (err) {
            this.emit("error", err);
            return;
          }
          this._sanitizeOptions(this._options);
        }
        try {
          this._performRequest();
        } catch (cause) {
          this.emit("error", new RedirectionError(cause));
        }
      };
      function wrap(protocols) {
        var exports2 = {
          maxRedirects: 21,
          maxBodyLength: 10 * 1024 * 1024,
        };
        var nativeProtocols = {};
        Object.keys(protocols).forEach(function (scheme) {
          var protocol = scheme + ":";
          var nativeProtocol = (nativeProtocols[protocol] = protocols[scheme]);
          var wrappedProtocol = (exports2[scheme] =
            Object.create(nativeProtocol));
          function request(input, options, callback) {
            if (typeof input === "string") {
              var urlStr = input;
              try {
                input = urlToOptions(new URL4(urlStr));
              } catch (err) {
                input = url.parse(urlStr);
              }
            } else if (URL4 && input instanceof URL4) {
              input = urlToOptions(input);
            } else {
              callback = options;
              options = input;
              input = { protocol };
            }
            if (typeof options === "function") {
              callback = options;
              options = null;
            }
            options = Object.assign(
              {
                maxRedirects: exports2.maxRedirects,
                maxBodyLength: exports2.maxBodyLength,
              },
              input,
              options
            );
            options.nativeProtocols = nativeProtocols;
            assert3.equal(options.protocol, protocol, "protocol mismatch");
            debug("options", options);
            return new RedirectableRequest(options, callback);
          }
          function get(input, options, callback) {
            var wrappedRequest = wrappedProtocol.request(
              input,
              options,
              callback
            );
            wrappedRequest.end();
            return wrappedRequest;
          }
          Object.defineProperties(wrappedProtocol, {
            request: {
              value: request,
              configurable: true,
              enumerable: true,
              writable: true,
            },
            get: {
              value: get,
              configurable: true,
              enumerable: true,
              writable: true,
            },
          });
        });
        return exports2;
      }
      function noop() {}
      function urlToOptions(urlObject) {
        var options = {
          protocol: urlObject.protocol,
          hostname: urlObject.hostname.startsWith("[")
            ? urlObject.hostname.slice(1, -1)
            : urlObject.hostname,
          hash: urlObject.hash,
          search: urlObject.search,
          pathname: urlObject.pathname,
          path: urlObject.pathname + urlObject.search,
          href: urlObject.href,
        };
        if (urlObject.port !== "") {
          options.port = Number(urlObject.port);
        }
        return options;
      }
      function removeMatchingHeaders(regex, headers) {
        var lastValue;
        for (var header in headers) {
          if (regex.test(header)) {
            lastValue = headers[header];
            delete headers[header];
          }
        }
        return lastValue === null || typeof lastValue === "undefined"
          ? void 0
          : String(lastValue).trim();
      }
      function createErrorType(code, defaultMessage) {
        function CustomError(cause) {
          Error.captureStackTrace(this, this.constructor);
          if (!cause) {
            this.message = defaultMessage;
          } else {
            this.message = defaultMessage + ": " + cause.message;
            this.cause = cause;
          }
        }
        CustomError.prototype = new Error();
        CustomError.prototype.constructor = CustomError;
        CustomError.prototype.name = "Error [" + code + "]";
        CustomError.prototype.code = code;
        return CustomError;
      }
      function abortRequest(request) {
        for (var e = 0; e < events.length; e++) {
          request.removeListener(events[e], eventHandlers[events[e]]);
        }
        request.on("error", noop);
        request.abort();
      }
      function isSubdomain(subdomain, domain) {
        const dot = subdomain.length - domain.length - 1;
        return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
      }
      module.exports = wrap({ http: http2, https: https2 });
      module.exports.wrap = wrap;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/env/data.js
  var require_data = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/env/data.js"(
      exports,
      module
    ) {
      module.exports = {
        version: "0.26.0",
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/adapters/http.js
  var require_http = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/adapters/http.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var buildFullPath = require_buildFullPath();
      var buildURL = require_buildURL();
      var http2 = __require("http");
      var https2 = __require("https");
      var httpFollow = require_follow_redirects().http;
      var httpsFollow = require_follow_redirects().https;
      var url = __require("url");
      var zlib = __require("zlib");
      var VERSION = require_data().version;
      var createError = require_createError();
      var enhanceError = require_enhanceError();
      var defaults = require_defaults();
      var Cancel = require_Cancel();
      var isHttps = /https:?/;
      function setProxy(options, proxy, location) {
        options.hostname = proxy.host;
        options.host = proxy.host;
        options.port = proxy.port;
        options.path = location;
        if (proxy.auth) {
          var base64 = Buffer.from(
            proxy.auth.username + ":" + proxy.auth.password,
            "utf8"
          ).toString("base64");
          options.headers["Proxy-Authorization"] = "Basic " + base64;
        }
        options.beforeRedirect = function beforeRedirect(redirection) {
          redirection.headers.host = redirection.host;
          setProxy(redirection, proxy, redirection.href);
        };
      }
      module.exports = function httpAdapter(config) {
        return new Promise(function dispatchHttpRequest(
          resolvePromise,
          rejectPromise
        ) {
          var onCanceled;
          function done() {
            if (config.cancelToken) {
              config.cancelToken.unsubscribe(onCanceled);
            }
            if (config.signal) {
              config.signal.removeEventListener("abort", onCanceled);
            }
          }
          var resolve2 = function resolve3(value) {
            done();
            resolvePromise(value);
          };
          var rejected = false;
          var reject = function reject2(value) {
            done();
            rejected = true;
            rejectPromise(value);
          };
          var data = config.data;
          var headers = config.headers;
          var headerNames = {};
          Object.keys(headers).forEach(function storeLowerName(name2) {
            headerNames[name2.toLowerCase()] = name2;
          });
          if ("user-agent" in headerNames) {
            if (!headers[headerNames["user-agent"]]) {
              delete headers[headerNames["user-agent"]];
            }
          } else {
            headers["User-Agent"] = "axios/" + VERSION;
          }
          if (data && !utils.isStream(data)) {
            if (Buffer.isBuffer(data)) {
            } else if (utils.isArrayBuffer(data)) {
              data = Buffer.from(new Uint8Array(data));
            } else if (utils.isString(data)) {
              data = Buffer.from(data, "utf-8");
            } else {
              return reject(
                createError(
                  "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
                  config
                )
              );
            }
            if (
              config.maxBodyLength > -1 &&
              data.length > config.maxBodyLength
            ) {
              return reject(
                createError(
                  "Request body larger than maxBodyLength limit",
                  config
                )
              );
            }
            if (!headerNames["content-length"]) {
              headers["Content-Length"] = data.length;
            }
          }
          var auth = void 0;
          if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password || "";
            auth = username + ":" + password;
          }
          var fullPath = buildFullPath(config.baseURL, config.url);
          var parsed = url.parse(fullPath);
          var protocol = parsed.protocol || "http:";
          if (!auth && parsed.auth) {
            var urlAuth = parsed.auth.split(":");
            var urlUsername = urlAuth[0] || "";
            var urlPassword = urlAuth[1] || "";
            auth = urlUsername + ":" + urlPassword;
          }
          if (auth && headerNames.authorization) {
            delete headers[headerNames.authorization];
          }
          var isHttpsRequest = isHttps.test(protocol);
          var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
          try {
            buildURL(
              parsed.path,
              config.params,
              config.paramsSerializer
            ).replace(/^\?/, "");
          } catch (err) {
            var customErr = new Error(err.message);
            customErr.config = config;
            customErr.url = config.url;
            customErr.exists = true;
            reject(customErr);
          }
          var options = {
            path: buildURL(
              parsed.path,
              config.params,
              config.paramsSerializer
            ).replace(/^\?/, ""),
            method: config.method.toUpperCase(),
            headers,
            agent,
            agents: { http: config.httpAgent, https: config.httpsAgent },
            auth,
          };
          if (config.socketPath) {
            options.socketPath = config.socketPath;
          } else {
            options.hostname = parsed.hostname;
            options.port = parsed.port;
          }
          var proxy = config.proxy;
          if (!proxy && proxy !== false) {
            var proxyEnv = protocol.slice(0, -1) + "_proxy";
            var proxyUrl =
              process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
            if (proxyUrl) {
              var parsedProxyUrl = url.parse(proxyUrl);
              var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
              var shouldProxy = true;
              if (noProxyEnv) {
                var noProxy = noProxyEnv.split(",").map(function trim(s2) {
                  return s2.trim();
                });
                shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                  if (!proxyElement) {
                    return false;
                  }
                  if (proxyElement === "*") {
                    return true;
                  }
                  if (
                    proxyElement[0] === "." &&
                    parsed.hostname.substr(
                      parsed.hostname.length - proxyElement.length
                    ) === proxyElement
                  ) {
                    return true;
                  }
                  return parsed.hostname === proxyElement;
                });
              }
              if (shouldProxy) {
                proxy = {
                  host: parsedProxyUrl.hostname,
                  port: parsedProxyUrl.port,
                  protocol: parsedProxyUrl.protocol,
                };
                if (parsedProxyUrl.auth) {
                  var proxyUrlAuth = parsedProxyUrl.auth.split(":");
                  proxy.auth = {
                    username: proxyUrlAuth[0],
                    password: proxyUrlAuth[1],
                  };
                }
              }
            }
          }
          if (proxy) {
            options.headers.host =
              parsed.hostname + (parsed.port ? ":" + parsed.port : "");
            setProxy(
              options,
              proxy,
              protocol +
                "//" +
                parsed.hostname +
                (parsed.port ? ":" + parsed.port : "") +
                options.path
            );
          }
          var transport;
          var isHttpsProxy =
            isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
          if (config.transport) {
            transport = config.transport;
          } else if (config.maxRedirects === 0) {
            transport = isHttpsProxy ? https2 : http2;
          } else {
            if (config.maxRedirects) {
              options.maxRedirects = config.maxRedirects;
            }
            transport = isHttpsProxy ? httpsFollow : httpFollow;
          }
          if (config.maxBodyLength > -1) {
            options.maxBodyLength = config.maxBodyLength;
          }
          if (config.insecureHTTPParser) {
            options.insecureHTTPParser = config.insecureHTTPParser;
          }
          var req = transport.request(options, function handleResponse(res) {
            if (req.aborted) return;
            var stream = res;
            var lastRequest = res.req || req;
            if (
              res.statusCode !== 204 &&
              lastRequest.method !== "HEAD" &&
              config.decompress !== false
            ) {
              switch (res.headers["content-encoding"]) {
                case "gzip":
                case "compress":
                case "deflate":
                  stream = stream.pipe(zlib.createUnzip());
                  delete res.headers["content-encoding"];
                  break;
              }
            }
            var response = {
              status: res.statusCode,
              statusText: res.statusMessage,
              headers: res.headers,
              config,
              request: lastRequest,
            };
            if (config.responseType === "stream") {
              response.data = stream;
              settle(resolve2, reject, response);
            } else {
              var responseBuffer = [];
              var totalResponseBytes = 0;
              stream.on("data", function handleStreamData(chunk) {
                responseBuffer.push(chunk);
                totalResponseBytes += chunk.length;
                if (
                  config.maxContentLength > -1 &&
                  totalResponseBytes > config.maxContentLength
                ) {
                  rejected = true;
                  stream.destroy();
                  reject(
                    createError(
                      "maxContentLength size of " +
                        config.maxContentLength +
                        " exceeded",
                      config,
                      null,
                      lastRequest
                    )
                  );
                }
              });
              stream.on("aborted", function handlerStreamAborted() {
                if (rejected) {
                  return;
                }
                stream.destroy();
                reject(
                  createError(
                    "error request aborted",
                    config,
                    "ERR_REQUEST_ABORTED",
                    lastRequest
                  )
                );
              });
              stream.on("error", function handleStreamError(err) {
                if (req.aborted) return;
                reject(enhanceError(err, config, null, lastRequest));
              });
              stream.on("end", function handleStreamEnd() {
                try {
                  var responseData =
                    responseBuffer.length === 1
                      ? responseBuffer[0]
                      : Buffer.concat(responseBuffer);
                  if (config.responseType !== "arraybuffer") {
                    responseData = responseData.toString(
                      config.responseEncoding
                    );
                    if (
                      !config.responseEncoding ||
                      config.responseEncoding === "utf8"
                    ) {
                      responseData = utils.stripBOM(responseData);
                    }
                  }
                  response.data = responseData;
                } catch (err) {
                  reject(
                    enhanceError(
                      err,
                      config,
                      err.code,
                      response.request,
                      response
                    )
                  );
                }
                settle(resolve2, reject, response);
              });
            }
          });
          req.on("error", function handleRequestError(err) {
            if (req.aborted && err.code !== "ERR_FR_TOO_MANY_REDIRECTS") return;
            reject(enhanceError(err, config, null, req));
          });
          req.on("socket", function handleRequestSocket(socket) {
            socket.setKeepAlive(true, 1e3 * 60);
          });
          if (config.timeout) {
            var timeout = parseInt(config.timeout, 10);
            if (isNaN(timeout)) {
              reject(
                createError(
                  "error trying to parse `config.timeout` to int",
                  config,
                  "ERR_PARSE_TIMEOUT",
                  req
                )
              );
              return;
            }
            req.setTimeout(timeout, function handleRequestTimeout() {
              req.abort();
              var timeoutErrorMessage = "";
              if (config.timeoutErrorMessage) {
                timeoutErrorMessage = config.timeoutErrorMessage;
              } else {
                timeoutErrorMessage =
                  "timeout of " + config.timeout + "ms exceeded";
              }
              var transitional = config.transitional || defaults.transitional;
              reject(
                createError(
                  timeoutErrorMessage,
                  config,
                  transitional.clarifyTimeoutError
                    ? "ETIMEDOUT"
                    : "ECONNABORTED",
                  req
                )
              );
            });
          }
          if (config.cancelToken || config.signal) {
            onCanceled = function (cancel) {
              if (req.aborted) return;
              req.abort();
              reject(
                !cancel || (cancel && cancel.type)
                  ? new Cancel("canceled")
                  : cancel
              );
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) {
              config.signal.aborted
                ? onCanceled()
                : config.signal.addEventListener("abort", onCanceled);
            }
          }
          if (utils.isStream(data)) {
            data
              .on("error", function handleStreamError(err) {
                reject(enhanceError(err, config, null, req));
              })
              .pipe(req);
          } else {
            req.end(data);
          }
        });
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/defaults.js
  var require_defaults = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/defaults.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var DEFAULT_CONTENT_TYPE = {
        "Content-Type": "application/x-www-form-urlencoded",
      };
      function setContentTypeIfUnset(headers, value) {
        if (
          !utils.isUndefined(headers) &&
          utils.isUndefined(headers["Content-Type"])
        ) {
          headers["Content-Type"] = value;
        }
      }
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (
          typeof process !== "undefined" &&
          Object.prototype.toString.call(process) === "[object process]"
        ) {
          adapter = require_http();
        }
        return adapter;
      }
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
          } catch (e) {
            if (e.name !== "SyntaxError") {
              throw e;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      var defaults = {
        transitional: {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false,
        },
        adapter: getDefaultAdapter(),
        transformRequest: [
          function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (
              utils.isFormData(data) ||
              utils.isArrayBuffer(data) ||
              utils.isBuffer(data) ||
              utils.isStream(data) ||
              utils.isFile(data) ||
              utils.isBlob(data)
            ) {
              return data;
            }
            if (utils.isArrayBufferView(data)) {
              return data.buffer;
            }
            if (utils.isURLSearchParams(data)) {
              setContentTypeIfUnset(
                headers,
                "application/x-www-form-urlencoded;charset=utf-8"
              );
              return data.toString();
            }
            if (
              utils.isObject(data) ||
              (headers && headers["Content-Type"] === "application/json")
            ) {
              setContentTypeIfUnset(headers, "application/json");
              return stringifySafely(data);
            }
            return data;
          },
        ],
        transformResponse: [
          function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing =
              transitional && transitional.silentJSONParsing;
            var forcedJSONParsing =
              transitional && transitional.forcedJSONParsing;
            var strictJSONParsing =
              !silentJSONParsing && this.responseType === "json";
            if (
              strictJSONParsing ||
              (forcedJSONParsing && utils.isString(data) && data.length)
            ) {
              try {
                return JSON.parse(data);
              } catch (e) {
                if (strictJSONParsing) {
                  if (e.name === "SyntaxError") {
                    throw enhanceError(e, this, "E_JSON_PARSE");
                  }
                  throw e;
                }
              }
            }
            return data;
          },
        ],
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
        headers: {
          common: {
            Accept: "application/json, text/plain, */*",
          },
        },
      };
      utils.forEach(
        ["delete", "get", "head"],
        function forEachMethodNoData(method) {
          defaults.headers[method] = {};
        }
      );
      utils.forEach(
        ["post", "put", "patch"],
        function forEachMethodWithData(method) {
          defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
        }
      );
      module.exports = defaults;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/transformData.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var defaults = require_defaults();
      module.exports = function transformData(data, headers, fns) {
        var context = this || defaults;
        utils.forEach(fns, function transform(fn) {
          data = fn.call(context, data, headers);
        });
        return data;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/isCancel.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function isCancel(value) {
        return !!(value && value.__CANCEL__);
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/dispatchRequest.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults = require_defaults();
      var Cancel = require_Cancel();
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
        if (config.signal && config.signal.aborted) {
          throw new Cancel("canceled");
        }
      }
      module.exports = function dispatchRequest(config) {
        throwIfCancellationRequested(config);
        config.headers = config.headers || {};
        config.data = transformData.call(
          config,
          config.data,
          config.headers,
          config.transformRequest
        );
        config.headers = utils.merge(
          config.headers.common || {},
          config.headers[config.method] || {},
          config.headers
        );
        utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          function cleanHeaderConfig(method) {
            delete config.headers[method];
          }
        );
        var adapter = config.adapter || defaults.adapter;
        return adapter(config).then(
          function onAdapterResolution(response) {
            throwIfCancellationRequested(config);
            response.data = transformData.call(
              config,
              response.data,
              response.headers,
              config.transformResponse
            );
            return response;
          },
          function onAdapterRejection(reason) {
            if (!isCancel(reason)) {
              throwIfCancellationRequested(config);
              if (reason && reason.response) {
                reason.response.data = transformData.call(
                  config,
                  reason.response.data,
                  reason.response.headers,
                  config.transformResponse
                );
              }
            }
            return Promise.reject(reason);
          }
        );
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/mergeConfig.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      module.exports = function mergeConfig(config1, config2) {
        config2 = config2 || {};
        var config = {};
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        function valueFromConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          }
        }
        function defaultToConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        function mergeDirectKeys(prop) {
          if (prop in config2) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (prop in config1) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        var mergeMap = {
          url: valueFromConfig2,
          method: valueFromConfig2,
          data: valueFromConfig2,
          baseURL: defaultToConfig2,
          transformRequest: defaultToConfig2,
          transformResponse: defaultToConfig2,
          paramsSerializer: defaultToConfig2,
          timeout: defaultToConfig2,
          timeoutMessage: defaultToConfig2,
          withCredentials: defaultToConfig2,
          adapter: defaultToConfig2,
          responseType: defaultToConfig2,
          xsrfCookieName: defaultToConfig2,
          xsrfHeaderName: defaultToConfig2,
          onUploadProgress: defaultToConfig2,
          onDownloadProgress: defaultToConfig2,
          decompress: defaultToConfig2,
          maxContentLength: defaultToConfig2,
          maxBodyLength: defaultToConfig2,
          transport: defaultToConfig2,
          httpAgent: defaultToConfig2,
          httpsAgent: defaultToConfig2,
          cancelToken: defaultToConfig2,
          socketPath: defaultToConfig2,
          responseEncoding: defaultToConfig2,
          validateStatus: mergeDirectKeys,
        };
        utils.forEach(
          Object.keys(config1).concat(Object.keys(config2)),
          function computeConfigValue(prop) {
            var merge = mergeMap[prop] || mergeDeepProperties;
            var configValue = merge(prop);
            (utils.isUndefined(configValue) && merge !== mergeDirectKeys) ||
              (config[prop] = configValue);
          }
        );
        return config;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/validator.js"(
      exports,
      module
    ) {
      "use strict";
      var VERSION = require_data().version;
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(
        function (type, i) {
          validators[type] = function validator(thing) {
            return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
          };
        }
      );
      var deprecatedWarnings = {};
      validators.transitional = function transitional(
        validator,
        version89,
        message
      ) {
        function formatMessage(opt, desc) {
          return (
            "[Axios v" +
            VERSION +
            "] Transitional option '" +
            opt +
            "'" +
            desc +
            (message ? ". " + message : "")
          );
        }
        return function (value, opt, opts) {
          if (validator === false) {
            throw new Error(
              formatMessage(
                opt,
                " has been removed" + (version89 ? " in " + version89 : "")
              )
            );
          }
          if (version89 && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" +
                  version89 +
                  " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var i = keys.length;
        while (i-- > 0) {
          var opt = keys[i];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result = value === void 0 || validator(value, opt, options);
            if (result !== true) {
              throw new TypeError("option " + opt + " must be " + result);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      module.exports = {
        assertOptions,
        validators,
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/core/Axios.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager(),
        };
      }
      Axios.prototype.request = function request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        if (config.method) {
          config.method = config.method.toLowerCase();
        } else if (this.defaults.method) {
          config.method = this.defaults.method.toLowerCase();
        } else {
          config.method = "get";
        }
        var transitional = config.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(
            transitional,
            {
              silentJSONParsing: validators.transitional(validators.boolean),
              forcedJSONParsing: validators.transitional(validators.boolean),
              clarifyTimeoutError: validators.transitional(validators.boolean),
            },
            false
          );
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(
          interceptor
        ) {
          if (
            typeof interceptor.runWhen === "function" &&
            interceptor.runWhen(config) === false
          ) {
            return;
          }
          synchronousRequestInterceptors =
            synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(
            interceptor.fulfilled,
            interceptor.rejected
          );
        });
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(
          interceptor
        ) {
          responseInterceptorChain.push(
            interceptor.fulfilled,
            interceptor.rejected
          );
        });
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain = chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected(error);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(
            responseInterceptorChain.shift(),
            responseInterceptorChain.shift()
          );
        }
        return promise;
      };
      Axios.prototype.getUri = function getUri(config) {
        config = mergeConfig(this.defaults, config);
        return buildURL(
          config.url,
          config.params,
          config.paramsSerializer
        ).replace(/^\?/, "");
      };
      utils.forEach(
        ["delete", "get", "head", "options"],
        function forEachMethodNoData(method) {
          Axios.prototype[method] = function (url, config) {
            return this.request(
              mergeConfig(config || {}, {
                method,
                url,
                data: (config || {}).data,
              })
            );
          };
        }
      );
      utils.forEach(
        ["post", "put", "patch"],
        function forEachMethodWithData(method) {
          Axios.prototype[method] = function (url, data, config) {
            return this.request(
              mergeConfig(config || {}, {
                method,
                url,
                data,
              })
            );
          };
        }
      );
      module.exports = Axios;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/cancel/CancelToken.js"(
      exports,
      module
    ) {
      "use strict";
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve2) {
          resolvePromise = resolve2;
        });
        var token = this;
        this.promise.then(function (cancel) {
          if (!token._listeners) return;
          var i;
          var l2 = token._listeners.length;
          for (i = 0; i < l2; i++) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = function (onfulfilled) {
          var _resolve;
          var promise = new Promise(function (resolve2) {
            token.subscribe(resolve2);
            _resolve = resolve2;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        });
      }
      CancelToken.prototype.throwIfRequested = function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      };
      CancelToken.prototype.subscribe = function subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      };
      CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        var index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      };
      CancelToken.source = function source() {
        var cancel;
        var token = new CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel,
        };
      };
      module.exports = CancelToken;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/spread.js"(
      exports,
      module
    ) {
      "use strict";
      module.exports = function spread(callback) {
        return function wrap(arr) {
          return callback.apply(null, arr);
        };
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/helpers/isAxiosError.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      module.exports = function isAxiosError(payload) {
        return utils.isObject(payload) && payload.isAxiosError === true;
      };
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/lib/axios.js"(
      exports,
      module
    ) {
      "use strict";
      var utils = require_utils();
      var bind = require_bind();
      var Axios = require_Axios();
      var mergeConfig = require_mergeConfig();
      var defaults = require_defaults();
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = bind(Axios.prototype.request, context);
        utils.extend(instance, Axios.prototype, context);
        utils.extend(instance, context);
        instance.create = function create(instanceConfig) {
          return createInstance(mergeConfig(defaultConfig, instanceConfig));
        };
        return instance;
      }
      var axios2 = createInstance(defaults);
      axios2.Axios = Axios;
      axios2.Cancel = require_Cancel();
      axios2.CancelToken = require_CancelToken();
      axios2.isCancel = require_isCancel();
      axios2.VERSION = require_data().version;
      axios2.all = function all(promises) {
        return Promise.all(promises);
      };
      axios2.spread = require_spread();
      axios2.isAxiosError = require_isAxiosError();
      module.exports = axios2;
      module.exports.default = axios2;
    },
  });

  // node_modules/@lumeweb/skynet-js/node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "node_modules/@lumeweb/skynet-js/node_modules/axios/index.js"(
      exports,
      module
    ) {
      module.exports = require_axios();
    },
  });

  // node_modules/skynet-mysky-utils/dist/utils.js
  var require_utils2 = __commonJS({
    "node_modules/skynet-mysky-utils/dist/utils.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.ensurePrefix =
        exports.trimSuffix =
        exports.removeAdjacentChars =
        exports.ensureUrl =
        exports.createFullScreenIframe =
        exports.createIframe =
          void 0;
      function createIframe2(srcUrl, name2) {
        srcUrl = ensureUrl3(srcUrl);
        var childFrame = document.createElement("iframe");
        if (childFrame === null) {
          throw new Error("Could not create new iframe");
        }
        childFrame.src = srcUrl;
        childFrame.name = name2;
        childFrame.style.display = "none";
        document.body.appendChild(childFrame);
        return childFrame;
      }
      exports.createIframe = createIframe2;
      function createFullScreenIframe(srcUrl, name2) {
        srcUrl = ensureUrl3(srcUrl);
        var childFrame = document.createElement("iframe");
        if (childFrame === null) {
          throw new Error("Could not create new iframe");
        }
        childFrame.src = srcUrl;
        childFrame.name = name2;
        childFrame.style.position = "fixed";
        childFrame.style.top = "0";
        childFrame.style.left = "0";
        childFrame.style.bottom = "0";
        childFrame.style.right = "0";
        childFrame.style.width = "100%";
        childFrame.style.height = "100%";
        childFrame.style.border = "none";
        childFrame.style.margin = "0";
        childFrame.style.padding = "0";
        childFrame.style.overflow = "hidden";
        childFrame.style.zIndex = "999999";
        document.body.appendChild(childFrame);
        return childFrame;
      }
      exports.createFullScreenIframe = createFullScreenIframe;
      function ensureUrl3(url) {
        return ensurePrefix2(url, "https://");
      }
      exports.ensureUrl = ensureUrl3;
      function removeAdjacentChars(str, char) {
        var pathArray = Array.from(str);
        for (var i = 0; i < pathArray.length - 1; ) {
          if (pathArray[i] === char && pathArray[i + 1] === char) {
            pathArray.splice(i, 1);
          } else {
            i++;
          }
        }
        return pathArray.join("");
      }
      exports.removeAdjacentChars = removeAdjacentChars;
      function trimSuffix2(str, suffix, limit) {
        while (str.endsWith(suffix)) {
          if (limit !== void 0 && limit <= 0) {
            break;
          }
          str = str.substring(0, str.length - suffix.length);
          if (limit) {
            limit -= 1;
          }
        }
        return str;
      }
      exports.trimSuffix = trimSuffix2;
      function ensurePrefix2(str, prefix) {
        if (!str.startsWith(prefix)) {
          str = "" + prefix + str;
        }
        return str;
      }
      exports.ensurePrefix = ensurePrefix2;
    },
  });

  // node_modules/skynet-mysky-utils/dist/paths.js
  var require_paths = __commonJS({
    "node_modules/skynet-mysky-utils/dist/paths.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.sanitizePath =
        exports.getParentPath =
        exports.getPathDomain =
          void 0;
      var utils_12 = require_utils2();
      function getPathDomain(path3) {
        var sanitizedPath = sanitizePath2(path3);
        if (sanitizedPath === null) {
          return null;
        }
        var domain = sanitizedPath.split("/")[0];
        if (domain === "") {
          return null;
        }
        return domain;
      }
      exports.getPathDomain = getPathDomain;
      function getParentPath(path3) {
        var sanitizedPath = sanitizePath2(path3);
        if (sanitizedPath === null) {
          return null;
        }
        var pathArray = sanitizedPath.split("/");
        if (pathArray.length <= 1) {
          return null;
        }
        pathArray.pop();
        var parentPath = pathArray.join("/");
        if (parentPath === "") {
          return null;
        }
        return parentPath;
      }
      exports.getParentPath = getParentPath;
      function sanitizePath2(path3) {
        path3 = path3.trim();
        if (path3.startsWith("/")) {
          return null;
        }
        path3 = utils_12.trimSuffix(path3, "/");
        path3 = utils_12.removeAdjacentChars(path3, "/");
        var pathArray = path3.split("/");
        pathArray[0] = pathArray[0].toLowerCase();
        var sanitizedPath = pathArray.join("/");
        if (sanitizedPath === "") {
          return null;
        }
        return sanitizedPath;
      }
      exports.sanitizePath = sanitizePath2;
    },
  });

  // node_modules/skynet-mysky-utils/dist/permissions.js
  var require_permissions = __commonJS({
    "node_modules/skynet-mysky-utils/dist/permissions.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.permTypeToString =
        exports.permCategoryToString =
        exports.PermType =
        exports.PermWrite =
        exports.PermRead =
        exports.PermCategory =
        exports.PermLegacySkyID =
        exports.PermHidden =
        exports.PermDiscoverable =
        exports.Permission =
          void 0;
      var Permission3 = (function () {
        function Permission4(requestor, path3, category, permType) {
          this.requestor = requestor;
          this.path = path3;
          this.category = category;
          this.permType = permType;
          if (typeof category !== "number" || !(category in PermCategory3)) {
            throw new Error("Invalid 'category' enum value " + category);
          }
          if (typeof permType !== "number" || !(permType in PermType3)) {
            throw new Error("Invalid 'permType' enum value " + permType);
          }
        }
        return Permission4;
      })();
      exports.Permission = Permission3;
      exports.PermDiscoverable = 1;
      exports.PermHidden = 2;
      exports.PermLegacySkyID = 3;
      var PermCategory3;
      (function (PermCategory4) {
        PermCategory4[
          (PermCategory4["Discoverable"] = exports.PermDiscoverable)
        ] = "Discoverable";
        PermCategory4[(PermCategory4["Hidden"] = exports.PermHidden)] =
          "Hidden";
        PermCategory4[
          (PermCategory4["LegacySkyID"] = exports.PermLegacySkyID)
        ] = "LegacySkyID";
      })((PermCategory3 = exports.PermCategory || (exports.PermCategory = {})));
      exports.PermRead = 4;
      exports.PermWrite = 5;
      var PermType3;
      (function (PermType4) {
        PermType4[(PermType4["Read"] = exports.PermRead)] = "Read";
        PermType4[(PermType4["Write"] = exports.PermWrite)] = "Write";
      })((PermType3 = exports.PermType || (exports.PermType = {})));
      function permCategoryToString(category) {
        if (category === PermCategory3.Discoverable) {
          return "Discoverable";
        } else if (category === PermCategory3.Hidden) {
          return "Hidden";
        } else if (category === PermCategory3.LegacySkyID) {
          return "LegacySkyID";
        } else {
          throw new Error("Invalid permission category " + category);
        }
      }
      exports.permCategoryToString = permCategoryToString;
      function permTypeToString(permType) {
        if (permType === PermType3.Read) {
          return "Read";
        } else if (permType === PermType3.Write) {
          return "Write";
        } else {
          throw new Error("Invalid permission type " + permType);
        }
      }
      exports.permTypeToString = permTypeToString;
    },
  });

  // node_modules/skynet-mysky-utils/dist/window-listener.js
  var require_window_listener = __commonJS({
    "node_modules/skynet-mysky-utils/dist/window-listener.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.monitorWindowError =
        exports.PromiseController =
        exports.dispatchedErrorEvent =
        exports.errorWindowClosed =
          void 0;
      exports.errorWindowClosed = "window-closed";
      exports.dispatchedErrorEvent = "catchError";
      var PromiseController = (function () {
        function PromiseController2() {}
        PromiseController2.prototype.cleanup = function () {};
        return PromiseController2;
      })();
      exports.PromiseController = PromiseController;
      function monitorWindowError2() {
        var controller = new PromiseController();
        var abortController = new AbortController();
        var promise = new Promise(function (resolve2, reject) {
          var handleEvent = function (event) {
            window.removeEventListener(
              exports.dispatchedErrorEvent,
              handleEvent
            );
            var err = event.detail;
            reject(err);
          };
          window.addEventListener(exports.dispatchedErrorEvent, handleEvent, {
            signal: abortController.signal,
          });
          controller.cleanup = function () {
            abortController.abort();
            resolve2();
          };
        });
        return { promise, controller };
      }
      exports.monitorWindowError = monitorWindowError2;
    },
  });

  // node_modules/skynet-mysky-utils/dist/index.js
  var require_dist = __commonJS({
    "node_modules/skynet-mysky-utils/dist/index.js"(exports) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o2, m2, k2, k22) {
              if (k22 === void 0) k22 = k2;
              Object.defineProperty(o2, k22, {
                enumerable: true,
                get: function () {
                  return m2[k2];
                },
              });
            }
          : function (o2, m2, k2, k22) {
              if (k22 === void 0) k22 = k2;
              o2[k22] = m2[k2];
            });
      exports.__esModule = true;
      exports.defaultHandshakeAttemptsInterval =
        exports.defaultHandshakeMaxAttempts =
        exports.monitorWindowError =
        exports.errorWindowClosed =
        exports.dispatchedErrorEvent =
        exports.trimSuffix =
        exports.removeAdjacentChars =
        exports.ensureUrl =
        exports.createIframe =
        exports.createFullScreenIframe =
        exports.PermWrite =
        exports.PermRead =
        exports.PermLegacySkyID =
        exports.PermHidden =
        exports.PermDiscoverable =
        exports.permTypeToString =
        exports.permCategoryToString =
        exports.PermType =
        exports.PermCategory =
        exports.Permission =
        exports.sanitizePath =
        exports.getParentPath =
        exports.getPathDomain =
          void 0;
      var paths_1 = require_paths();
      __createBinding(exports, paths_1, "getPathDomain");
      __createBinding(exports, paths_1, "getParentPath");
      __createBinding(exports, paths_1, "sanitizePath");
      var permissions_1 = require_permissions();
      __createBinding(exports, permissions_1, "Permission");
      __createBinding(exports, permissions_1, "PermCategory");
      __createBinding(exports, permissions_1, "PermType");
      __createBinding(exports, permissions_1, "permCategoryToString");
      __createBinding(exports, permissions_1, "permTypeToString");
      __createBinding(exports, permissions_1, "PermDiscoverable");
      __createBinding(exports, permissions_1, "PermHidden");
      __createBinding(exports, permissions_1, "PermLegacySkyID");
      __createBinding(exports, permissions_1, "PermRead");
      __createBinding(exports, permissions_1, "PermWrite");
      var utils_12 = require_utils2();
      __createBinding(exports, utils_12, "createFullScreenIframe");
      __createBinding(exports, utils_12, "createIframe");
      __createBinding(exports, utils_12, "ensureUrl");
      __createBinding(exports, utils_12, "removeAdjacentChars");
      __createBinding(exports, utils_12, "trimSuffix");
      var window_listener_1 = require_window_listener();
      __createBinding(exports, window_listener_1, "dispatchedErrorEvent");
      __createBinding(exports, window_listener_1, "errorWindowClosed");
      __createBinding(exports, window_listener_1, "monitorWindowError");
      exports.defaultHandshakeMaxAttempts = 150;
      exports.defaultHandshakeAttemptsInterval = 100;
    },
  });

  // node_modules/js-base64/base64.js
  var require_base64 = __commonJS({
    "node_modules/js-base64/base64.js"(exports, module) {
      (function (global2, factory) {
        typeof exports === "object" && typeof module !== "undefined"
          ? (module.exports = factory(global2))
          : typeof define === "function" && define.amd
          ? define(factory)
          : factory(global2);
      })(
        typeof self !== "undefined"
          ? self
          : typeof window !== "undefined"
          ? window
          : typeof global !== "undefined"
          ? global
          : exports,
        function (global2) {
          "use strict";
          global2 = global2 || {};
          var _Base64 = global2.Base64;
          var version89 = "2.6.4";
          var b64chars =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
          var b64tab = (function (bin) {
            var t2 = {};
            for (var i = 0, l2 = bin.length; i < l2; i++) t2[bin.charAt(i)] = i;
            return t2;
          })(b64chars);
          var fromCharCode = String.fromCharCode;
          var cb_utob = function (c2) {
            if (c2.length < 2) {
              var cc = c2.charCodeAt(0);
              return cc < 128
                ? c2
                : cc < 2048
                ? fromCharCode(192 | (cc >>> 6)) + fromCharCode(128 | (cc & 63))
                : fromCharCode(224 | ((cc >>> 12) & 15)) +
                  fromCharCode(128 | ((cc >>> 6) & 63)) +
                  fromCharCode(128 | (cc & 63));
            } else {
              var cc =
                65536 +
                (c2.charCodeAt(0) - 55296) * 1024 +
                (c2.charCodeAt(1) - 56320);
              return (
                fromCharCode(240 | ((cc >>> 18) & 7)) +
                fromCharCode(128 | ((cc >>> 12) & 63)) +
                fromCharCode(128 | ((cc >>> 6) & 63)) +
                fromCharCode(128 | (cc & 63))
              );
            }
          };
          var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
          var utob = function (u2) {
            return u2.replace(re_utob, cb_utob);
          };
          var cb_encode = function (ccc) {
            var padlen = [0, 2, 1][ccc.length % 3],
              ord =
                (ccc.charCodeAt(0) << 16) |
                ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8) |
                (ccc.length > 2 ? ccc.charCodeAt(2) : 0),
              chars = [
                b64chars.charAt(ord >>> 18),
                b64chars.charAt((ord >>> 12) & 63),
                padlen >= 2 ? "=" : b64chars.charAt((ord >>> 6) & 63),
                padlen >= 1 ? "=" : b64chars.charAt(ord & 63),
              ];
            return chars.join("");
          };
          var btoa2 =
            global2.btoa && typeof global2.btoa == "function"
              ? function (b2) {
                  return global2.btoa(b2);
                }
              : function (b2) {
                  if (b2.match(/[^\x00-\xFF]/))
                    throw new RangeError(
                      "The string contains invalid characters."
                    );
                  return b2.replace(/[\s\S]{1,3}/g, cb_encode);
                };
          var _encode3 = function (u2) {
            return btoa2(utob(String(u2)));
          };
          var mkUriSafe = function (b64) {
            return b64
              .replace(/[+\/]/g, function (m0) {
                return m0 == "+" ? "-" : "_";
              })
              .replace(/=/g, "");
          };
          var encode4 = function (u2, urisafe) {
            return urisafe ? mkUriSafe(_encode3(u2)) : _encode3(u2);
          };
          var encodeURI2 = function (u2) {
            return encode4(u2, true);
          };
          var fromUint8Array;
          if (global2.Uint8Array)
            fromUint8Array = function (a2, urisafe) {
              var b64 = "";
              for (var i = 0, l2 = a2.length; i < l2; i += 3) {
                var a0 = a2[i],
                  a1 = a2[i + 1],
                  a22 = a2[i + 2];
                var ord = (a0 << 16) | (a1 << 8) | a22;
                b64 +=
                  b64chars.charAt(ord >>> 18) +
                  b64chars.charAt((ord >>> 12) & 63) +
                  (typeof a1 != "undefined"
                    ? b64chars.charAt((ord >>> 6) & 63)
                    : "=") +
                  (typeof a22 != "undefined" ? b64chars.charAt(ord & 63) : "=");
              }
              return urisafe ? mkUriSafe(b64) : b64;
            };
          var re_btou =
            /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
          var cb_btou = function (cccc) {
            switch (cccc.length) {
              case 4:
                var cp =
                    ((7 & cccc.charCodeAt(0)) << 18) |
                    ((63 & cccc.charCodeAt(1)) << 12) |
                    ((63 & cccc.charCodeAt(2)) << 6) |
                    (63 & cccc.charCodeAt(3)),
                  offset = cp - 65536;
                return (
                  fromCharCode((offset >>> 10) + 55296) +
                  fromCharCode((offset & 1023) + 56320)
                );
              case 3:
                return fromCharCode(
                  ((15 & cccc.charCodeAt(0)) << 12) |
                    ((63 & cccc.charCodeAt(1)) << 6) |
                    (63 & cccc.charCodeAt(2))
                );
              default:
                return fromCharCode(
                  ((31 & cccc.charCodeAt(0)) << 6) | (63 & cccc.charCodeAt(1))
                );
            }
          };
          var btou = function (b2) {
            return b2.replace(re_btou, cb_btou);
          };
          var cb_decode = function (cccc) {
            var len = cccc.length,
              padlen = len % 4,
              n =
                (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) |
                (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) |
                (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) |
                (len > 3 ? b64tab[cccc.charAt(3)] : 0),
              chars = [
                fromCharCode(n >>> 16),
                fromCharCode((n >>> 8) & 255),
                fromCharCode(n & 255),
              ];
            chars.length -= [0, 0, 2, 1][padlen];
            return chars.join("");
          };
          var _atob =
            global2.atob && typeof global2.atob == "function"
              ? function (a2) {
                  return global2.atob(a2);
                }
              : function (a2) {
                  return a2.replace(/\S{1,4}/g, cb_decode);
                };
          var atob2 = function (a2) {
            return _atob(String(a2).replace(/[^A-Za-z0-9\+\/]/g, ""));
          };
          var _decode2 = function (a2) {
            return btou(_atob(a2));
          };
          var _fromURI = function (a2) {
            return String(a2)
              .replace(/[-_]/g, function (m0) {
                return m0 == "-" ? "+" : "/";
              })
              .replace(/[^A-Za-z0-9\+\/]/g, "");
          };
          var decode3 = function (a2) {
            return _decode2(_fromURI(a2));
          };
          var toUint8Array;
          if (global2.Uint8Array)
            toUint8Array = function (a2) {
              return Uint8Array.from(atob2(_fromURI(a2)), function (c2) {
                return c2.charCodeAt(0);
              });
            };
          var noConflict = function () {
            var Base643 = global2.Base64;
            global2.Base64 = _Base64;
            return Base643;
          };
          global2.Base64 = {
            VERSION: version89,
            atob: atob2,
            btoa: btoa2,
            fromBase64: decode3,
            toBase64: encode4,
            utob,
            encode: encode4,
            encodeURI: encodeURI2,
            btou,
            decode: decode3,
            noConflict,
            fromUint8Array,
            toUint8Array,
          };
          if (typeof Object.defineProperty === "function") {
            var noEnum = function (v2) {
              return {
                value: v2,
                enumerable: false,
                writable: true,
                configurable: true,
              };
            };
            global2.Base64.extendString = function () {
              Object.defineProperty(
                String.prototype,
                "fromBase64",
                noEnum(function () {
                  return decode3(this);
                })
              );
              Object.defineProperty(
                String.prototype,
                "toBase64",
                noEnum(function (urisafe) {
                  return encode4(this, urisafe);
                })
              );
              Object.defineProperty(
                String.prototype,
                "toBase64URI",
                noEnum(function () {
                  return encode4(this, true);
                })
              );
            };
          }
          if (global2["Meteor"]) {
            Base64 = global2.Base64;
          }
          if (typeof module !== "undefined" && module.exports) {
            module.exports.Base64 = global2.Base64;
          } else if (typeof define === "function" && define.amd) {
            define([], function () {
              return global2.Base64;
            });
          }
          return { Base64: global2.Base64 };
        }
      );
    },
  });

  // node_modules/requires-port/index.js
  var require_requires_port = __commonJS({
    "node_modules/requires-port/index.js"(exports, module) {
      "use strict";
      module.exports = function required(port, protocol) {
        protocol = protocol.split(":")[0];
        port = +port;
        if (!port) return false;
        switch (protocol) {
          case "http":
          case "ws":
            return port !== 80;
          case "https":
          case "wss":
            return port !== 443;
          case "ftp":
            return port !== 21;
          case "gopher":
            return port !== 70;
          case "file":
            return false;
        }
        return port !== 0;
      };
    },
  });

  // node_modules/querystringify/index.js
  var require_querystringify = __commonJS({
    "node_modules/querystringify/index.js"(exports) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var undef;
      function decode3(input) {
        try {
          return decodeURIComponent(input.replace(/\+/g, " "));
        } catch (e) {
          return null;
        }
      }
      function encode4(input) {
        try {
          return encodeURIComponent(input);
        } catch (e) {
          return null;
        }
      }
      function querystring(query) {
        var parser = /([^=?#&]+)=?([^&]*)/g,
          result = {},
          part;
        while ((part = parser.exec(query))) {
          var key2 = decode3(part[1]),
            value = decode3(part[2]);
          if (key2 === null || value === null || key2 in result) continue;
          result[key2] = value;
        }
        return result;
      }
      function querystringify(obj, prefix) {
        prefix = prefix || "";
        var pairs = [],
          value,
          key2;
        if (typeof prefix !== "string") prefix = "?";
        for (key2 in obj) {
          if (has.call(obj, key2)) {
            value = obj[key2];
            if (!value && (value === null || value === undef || isNaN(value))) {
              value = "";
            }
            key2 = encode4(key2);
            value = encode4(value);
            if (key2 === null || value === null) continue;
            pairs.push(key2 + "=" + value);
          }
        }
        return pairs.length ? prefix + pairs.join("&") : "";
      }
      exports.stringify = querystringify;
      exports.parse = querystring;
    },
  });

  // node_modules/url-parse/index.js
  var require_url_parse = __commonJS({
    "node_modules/url-parse/index.js"(exports, module) {
      "use strict";
      var required = require_requires_port();
      var qs = require_querystringify();
      var controlOrWhitespace =
        /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
      var CRHTLF = /[\n\r\t]/g;
      var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
      var port = /:\d+$/;
      var protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i;
      var windowsDriveLetter = /^[a-zA-Z]:/;
      function trimLeft(str) {
        return (str ? str : "").toString().replace(controlOrWhitespace, "");
      }
      var rules = [
        ["#", "hash"],
        ["?", "query"],
        function sanitize(address, url) {
          return isSpecial(url.protocol)
            ? address.replace(/\\/g, "/")
            : address;
        },
        ["/", "pathname"],
        ["@", "auth", 1],
        [NaN, "host", void 0, 1, 1],
        [/:(\d*)$/, "port", void 0, 1],
        [NaN, "hostname", void 0, 1, 1],
      ];
      var ignore = { hash: 1, query: 1 };
      function lolcation(loc) {
        var globalVar;
        if (typeof window !== "undefined") globalVar = window;
        else if (typeof global !== "undefined") globalVar = global;
        else if (typeof self !== "undefined") globalVar = self;
        else globalVar = {};
        var location = globalVar.location || {};
        loc = loc || location;
        var finaldestination = {},
          type = typeof loc,
          key2;
        if (loc.protocol === "blob:") {
          finaldestination = new Url(unescape(loc.pathname), {});
        } else if (type === "string") {
          finaldestination = new Url(loc, {});
          for (key2 in ignore) delete finaldestination[key2];
        } else if (type === "object") {
          for (key2 in loc) {
            if (key2 in ignore) continue;
            finaldestination[key2] = loc[key2];
          }
          if (finaldestination.slashes === void 0) {
            finaldestination.slashes = slashes.test(loc.href);
          }
        }
        return finaldestination;
      }
      function isSpecial(scheme) {
        return (
          scheme === "file:" ||
          scheme === "ftp:" ||
          scheme === "http:" ||
          scheme === "https:" ||
          scheme === "ws:" ||
          scheme === "wss:"
        );
      }
      function extractProtocol(address, location) {
        address = trimLeft(address);
        address = address.replace(CRHTLF, "");
        location = location || {};
        var match = protocolre.exec(address);
        var protocol = match[1] ? match[1].toLowerCase() : "";
        var forwardSlashes = !!match[2];
        var otherSlashes = !!match[3];
        var slashesCount = 0;
        var rest;
        if (forwardSlashes) {
          if (otherSlashes) {
            rest = match[2] + match[3] + match[4];
            slashesCount = match[2].length + match[3].length;
          } else {
            rest = match[2] + match[4];
            slashesCount = match[2].length;
          }
        } else {
          if (otherSlashes) {
            rest = match[3] + match[4];
            slashesCount = match[3].length;
          } else {
            rest = match[4];
          }
        }
        if (protocol === "file:") {
          if (slashesCount >= 2) {
            rest = rest.slice(2);
          }
        } else if (isSpecial(protocol)) {
          rest = match[4];
        } else if (protocol) {
          if (forwardSlashes) {
            rest = rest.slice(2);
          }
        } else if (slashesCount >= 2 && isSpecial(location.protocol)) {
          rest = match[4];
        }
        return {
          protocol,
          slashes: forwardSlashes || isSpecial(protocol),
          slashesCount,
          rest,
        };
      }
      function resolve2(relative, base2) {
        if (relative === "") return base2;
        var path3 = (base2 || "/")
            .split("/")
            .slice(0, -1)
            .concat(relative.split("/")),
          i = path3.length,
          last = path3[i - 1],
          unshift = false,
          up = 0;
        while (i--) {
          if (path3[i] === ".") {
            path3.splice(i, 1);
          } else if (path3[i] === "..") {
            path3.splice(i, 1);
            up++;
          } else if (up) {
            if (i === 0) unshift = true;
            path3.splice(i, 1);
            up--;
          }
        }
        if (unshift) path3.unshift("");
        if (last === "." || last === "..") path3.push("");
        return path3.join("/");
      }
      function Url(address, location, parser) {
        address = trimLeft(address);
        address = address.replace(CRHTLF, "");
        if (!(this instanceof Url)) {
          return new Url(address, location, parser);
        }
        var relative,
          extracted,
          parse6,
          instruction,
          index,
          key2,
          instructions = rules.slice(),
          type = typeof location,
          url = this,
          i = 0;
        if (type !== "object" && type !== "string") {
          parser = location;
          location = null;
        }
        if (parser && typeof parser !== "function") parser = qs.parse;
        location = lolcation(location);
        extracted = extractProtocol(address || "", location);
        relative = !extracted.protocol && !extracted.slashes;
        url.slashes = extracted.slashes || (relative && location.slashes);
        url.protocol = extracted.protocol || location.protocol || "";
        address = extracted.rest;
        if (
          (extracted.protocol === "file:" &&
            (extracted.slashesCount !== 2 ||
              windowsDriveLetter.test(address))) ||
          (!extracted.slashes &&
            (extracted.protocol ||
              extracted.slashesCount < 2 ||
              !isSpecial(url.protocol)))
        ) {
          instructions[3] = [/(.*)/, "pathname"];
        }
        for (; i < instructions.length; i++) {
          instruction = instructions[i];
          if (typeof instruction === "function") {
            address = instruction(address, url);
            continue;
          }
          parse6 = instruction[0];
          key2 = instruction[1];
          if (parse6 !== parse6) {
            url[key2] = address;
          } else if (typeof parse6 === "string") {
            index =
              parse6 === "@"
                ? address.lastIndexOf(parse6)
                : address.indexOf(parse6);
            if (~index) {
              if (typeof instruction[2] === "number") {
                url[key2] = address.slice(0, index);
                address = address.slice(index + instruction[2]);
              } else {
                url[key2] = address.slice(index);
                address = address.slice(0, index);
              }
            }
          } else if ((index = parse6.exec(address))) {
            url[key2] = index[1];
            address = address.slice(0, index.index);
          }
          url[key2] =
            url[key2] ||
            (relative && instruction[3] ? location[key2] || "" : "");
          if (instruction[4]) url[key2] = url[key2].toLowerCase();
        }
        if (parser) url.query = parser(url.query);
        if (
          relative &&
          location.slashes &&
          url.pathname.charAt(0) !== "/" &&
          (url.pathname !== "" || location.pathname !== "")
        ) {
          url.pathname = resolve2(url.pathname, location.pathname);
        }
        if (url.pathname.charAt(0) !== "/" && isSpecial(url.protocol)) {
          url.pathname = "/" + url.pathname;
        }
        if (!required(url.port, url.protocol)) {
          url.host = url.hostname;
          url.port = "";
        }
        url.username = url.password = "";
        if (url.auth) {
          index = url.auth.indexOf(":");
          if (~index) {
            url.username = url.auth.slice(0, index);
            url.username = encodeURIComponent(decodeURIComponent(url.username));
            url.password = url.auth.slice(index + 1);
            url.password = encodeURIComponent(decodeURIComponent(url.password));
          } else {
            url.username = encodeURIComponent(decodeURIComponent(url.auth));
          }
          url.auth = url.password
            ? url.username + ":" + url.password
            : url.username;
        }
        url.origin =
          url.protocol !== "file:" && isSpecial(url.protocol) && url.host
            ? url.protocol + "//" + url.host
            : "null";
        url.href = url.toString();
      }
      function set(part, value, fn) {
        var url = this;
        switch (part) {
          case "query":
            if (typeof value === "string" && value.length) {
              value = (fn || qs.parse)(value);
            }
            url[part] = value;
            break;
          case "port":
            url[part] = value;
            if (!required(value, url.protocol)) {
              url.host = url.hostname;
              url[part] = "";
            } else if (value) {
              url.host = url.hostname + ":" + value;
            }
            break;
          case "hostname":
            url[part] = value;
            if (url.port) value += ":" + url.port;
            url.host = value;
            break;
          case "host":
            url[part] = value;
            if (port.test(value)) {
              value = value.split(":");
              url.port = value.pop();
              url.hostname = value.join(":");
            } else {
              url.hostname = value;
              url.port = "";
            }
            break;
          case "protocol":
            url.protocol = value.toLowerCase();
            url.slashes = !fn;
            break;
          case "pathname":
          case "hash":
            if (value) {
              var char = part === "pathname" ? "/" : "#";
              url[part] = value.charAt(0) !== char ? char + value : value;
            } else {
              url[part] = value;
            }
            break;
          case "username":
          case "password":
            url[part] = encodeURIComponent(value);
            break;
          case "auth":
            var index = value.indexOf(":");
            if (~index) {
              url.username = value.slice(0, index);
              url.username = encodeURIComponent(
                decodeURIComponent(url.username)
              );
              url.password = value.slice(index + 1);
              url.password = encodeURIComponent(
                decodeURIComponent(url.password)
              );
            } else {
              url.username = encodeURIComponent(decodeURIComponent(value));
            }
        }
        for (var i = 0; i < rules.length; i++) {
          var ins = rules[i];
          if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
        }
        url.auth = url.password
          ? url.username + ":" + url.password
          : url.username;
        url.origin =
          url.protocol !== "file:" && isSpecial(url.protocol) && url.host
            ? url.protocol + "//" + url.host
            : "null";
        url.href = url.toString();
        return url;
      }
      function toString(stringify) {
        if (!stringify || typeof stringify !== "function")
          stringify = qs.stringify;
        var query,
          url = this,
          host = url.host,
          protocol = url.protocol;
        if (protocol && protocol.charAt(protocol.length - 1) !== ":")
          protocol += ":";
        var result =
          protocol +
          ((url.protocol && url.slashes) || isSpecial(url.protocol)
            ? "//"
            : "");
        if (url.username) {
          result += url.username;
          if (url.password) result += ":" + url.password;
          result += "@";
        } else if (url.password) {
          result += ":" + url.password;
          result += "@";
        } else if (
          url.protocol !== "file:" &&
          isSpecial(url.protocol) &&
          !host &&
          url.pathname !== "/"
        ) {
          result += "@";
        }
        if (
          host[host.length - 1] === ":" ||
          (port.test(url.hostname) && !url.port)
        ) {
          host += ":";
        }
        result += host + url.pathname;
        query =
          typeof url.query === "object" ? stringify(url.query) : url.query;
        if (query) result += query.charAt(0) !== "?" ? "?" + query : query;
        if (url.hash) result += url.hash;
        return result;
      }
      Url.prototype = { set, toString };
      Url.extractProtocol = extractProtocol;
      Url.location = lolcation;
      Url.trimLeft = trimLeft;
      Url.qs = qs;
      module.exports = Url;
    },
  });

  // node_modules/graceful-fs/polyfills.js
  var require_polyfills = __commonJS({
    "node_modules/graceful-fs/polyfills.js"(exports, module) {
      var constants = __require("constants");
      var origCwd = process.cwd;
      var cwd = null;
      var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function () {
        if (!cwd) cwd = origCwd.call(process);
        return cwd;
      };
      try {
        process.cwd();
      } catch (er2) {}
      if (typeof process.chdir === "function") {
        chdir = process.chdir;
        process.chdir = function (d2) {
          cwd = null;
          chdir.call(process, d2);
        };
        if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
      }
      var chdir;
      module.exports = patch;
      function patch(fs2) {
        if (
          constants.hasOwnProperty("O_SYMLINK") &&
          process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)
        ) {
          patchLchmod(fs2);
        }
        if (!fs2.lutimes) {
          patchLutimes(fs2);
        }
        fs2.chown = chownFix(fs2.chown);
        fs2.fchown = chownFix(fs2.fchown);
        fs2.lchown = chownFix(fs2.lchown);
        fs2.chmod = chmodFix(fs2.chmod);
        fs2.fchmod = chmodFix(fs2.fchmod);
        fs2.lchmod = chmodFix(fs2.lchmod);
        fs2.chownSync = chownFixSync(fs2.chownSync);
        fs2.fchownSync = chownFixSync(fs2.fchownSync);
        fs2.lchownSync = chownFixSync(fs2.lchownSync);
        fs2.chmodSync = chmodFixSync(fs2.chmodSync);
        fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
        fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
        fs2.stat = statFix(fs2.stat);
        fs2.fstat = statFix(fs2.fstat);
        fs2.lstat = statFix(fs2.lstat);
        fs2.statSync = statFixSync(fs2.statSync);
        fs2.fstatSync = statFixSync(fs2.fstatSync);
        fs2.lstatSync = statFixSync(fs2.lstatSync);
        if (!fs2.lchmod) {
          fs2.lchmod = function (path3, mode, cb) {
            if (cb) process.nextTick(cb);
          };
          fs2.lchmodSync = function () {};
        }
        if (!fs2.lchown) {
          fs2.lchown = function (path3, uid, gid, cb) {
            if (cb) process.nextTick(cb);
          };
          fs2.lchownSync = function () {};
        }
        if (platform === "win32") {
          fs2.rename = (function (fs$rename) {
            return function (from, to, cb) {
              var start = Date.now();
              var backoff = 0;
              fs$rename(from, to, function CB(er2) {
                if (
                  er2 &&
                  (er2.code === "EACCES" || er2.code === "EPERM") &&
                  Date.now() - start < 6e4
                ) {
                  setTimeout(function () {
                    fs2.stat(to, function (stater, st2) {
                      if (stater && stater.code === "ENOENT")
                        fs$rename(from, to, CB);
                      else cb(er2);
                    });
                  }, backoff);
                  if (backoff < 100) backoff += 10;
                  return;
                }
                if (cb) cb(er2);
              });
            };
          })(fs2.rename);
        }
        fs2.read = (function (fs$read) {
          function read(fd, buffer, offset, length, position, callback_) {
            var callback;
            if (callback_ && typeof callback_ === "function") {
              var eagCounter = 0;
              callback = function (er2, _2, __) {
                if (er2 && er2.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  return fs$read.call(
                    fs2,
                    fd,
                    buffer,
                    offset,
                    length,
                    position,
                    callback
                  );
                }
                callback_.apply(this, arguments);
              };
            }
            return fs$read.call(
              fs2,
              fd,
              buffer,
              offset,
              length,
              position,
              callback
            );
          }
          if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
          return read;
        })(fs2.read);
        fs2.readSync = (function (fs$readSync) {
          return function (fd, buffer, offset, length, position) {
            var eagCounter = 0;
            while (true) {
              try {
                return fs$readSync.call(
                  fs2,
                  fd,
                  buffer,
                  offset,
                  length,
                  position
                );
              } catch (er2) {
                if (er2.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  continue;
                }
                throw er2;
              }
            }
          };
        })(fs2.readSync);
        function patchLchmod(fs3) {
          fs3.lchmod = function (path3, mode, callback) {
            fs3.open(
              path3,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode,
              function (err, fd) {
                if (err) {
                  if (callback) callback(err);
                  return;
                }
                fs3.fchmod(fd, mode, function (err2) {
                  fs3.close(fd, function (err22) {
                    if (callback) callback(err2 || err22);
                  });
                });
              }
            );
          };
          fs3.lchmodSync = function (path3, mode) {
            var fd = fs3.openSync(
              path3,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode
            );
            var threw = true;
            var ret;
            try {
              ret = fs3.fchmodSync(fd, mode);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs3.closeSync(fd);
                } catch (er2) {}
              } else {
                fs3.closeSync(fd);
              }
            }
            return ret;
          };
        }
        function patchLutimes(fs3) {
          if (constants.hasOwnProperty("O_SYMLINK")) {
            fs3.lutimes = function (path3, at2, mt2, cb) {
              fs3.open(path3, constants.O_SYMLINK, function (er2, fd) {
                if (er2) {
                  if (cb) cb(er2);
                  return;
                }
                fs3.futimes(fd, at2, mt2, function (er3) {
                  fs3.close(fd, function (er22) {
                    if (cb) cb(er3 || er22);
                  });
                });
              });
            };
            fs3.lutimesSync = function (path3, at2, mt2) {
              var fd = fs3.openSync(path3, constants.O_SYMLINK);
              var ret;
              var threw = true;
              try {
                ret = fs3.futimesSync(fd, at2, mt2);
                threw = false;
              } finally {
                if (threw) {
                  try {
                    fs3.closeSync(fd);
                  } catch (er2) {}
                } else {
                  fs3.closeSync(fd);
                }
              }
              return ret;
            };
          } else {
            fs3.lutimes = function (_a, _b, _c, cb) {
              if (cb) process.nextTick(cb);
            };
            fs3.lutimesSync = function () {};
          }
        }
        function chmodFix(orig) {
          if (!orig) return orig;
          return function (target, mode, cb) {
            return orig.call(fs2, target, mode, function (er2) {
              if (chownErOk(er2)) er2 = null;
              if (cb) cb.apply(this, arguments);
            });
          };
        }
        function chmodFixSync(orig) {
          if (!orig) return orig;
          return function (target, mode) {
            try {
              return orig.call(fs2, target, mode);
            } catch (er2) {
              if (!chownErOk(er2)) throw er2;
            }
          };
        }
        function chownFix(orig) {
          if (!orig) return orig;
          return function (target, uid, gid, cb) {
            return orig.call(fs2, target, uid, gid, function (er2) {
              if (chownErOk(er2)) er2 = null;
              if (cb) cb.apply(this, arguments);
            });
          };
        }
        function chownFixSync(orig) {
          if (!orig) return orig;
          return function (target, uid, gid) {
            try {
              return orig.call(fs2, target, uid, gid);
            } catch (er2) {
              if (!chownErOk(er2)) throw er2;
            }
          };
        }
        function statFix(orig) {
          if (!orig) return orig;
          return function (target, options, cb) {
            if (typeof options === "function") {
              cb = options;
              options = null;
            }
            function callback(er2, stats) {
              if (stats) {
                if (stats.uid < 0) stats.uid += 4294967296;
                if (stats.gid < 0) stats.gid += 4294967296;
              }
              if (cb) cb.apply(this, arguments);
            }
            return options
              ? orig.call(fs2, target, options, callback)
              : orig.call(fs2, target, callback);
          };
        }
        function statFixSync(orig) {
          if (!orig) return orig;
          return function (target, options) {
            var stats = options
              ? orig.call(fs2, target, options)
              : orig.call(fs2, target);
            if (stats) {
              if (stats.uid < 0) stats.uid += 4294967296;
              if (stats.gid < 0) stats.gid += 4294967296;
            }
            return stats;
          };
        }
        function chownErOk(er2) {
          if (!er2) return true;
          if (er2.code === "ENOSYS") return true;
          var nonroot = !process.getuid || process.getuid() !== 0;
          if (nonroot) {
            if (er2.code === "EINVAL" || er2.code === "EPERM") return true;
          }
          return false;
        }
      }
    },
  });

  // node_modules/graceful-fs/legacy-streams.js
  var require_legacy_streams = __commonJS({
    "node_modules/graceful-fs/legacy-streams.js"(exports, module) {
      var Stream = __require("stream").Stream;
      module.exports = legacy;
      function legacy(fs2) {
        return {
          ReadStream: ReadStream3,
          WriteStream,
        };
        function ReadStream3(path3, options) {
          if (!(this instanceof ReadStream3))
            return new ReadStream3(path3, options);
          Stream.call(this);
          var self2 = this;
          this.path = path3;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length; index < length; index++) {
            var key2 = keys[index];
            this[key2] = options[key2];
          }
          if (this.encoding) this.setEncoding(this.encoding);
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.end === void 0) {
              this.end = Infinity;
            } else if (typeof this.end !== "number") {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function () {
              self2._read();
            });
            return;
          }
          fs2.open(this.path, this.flags, this.mode, function (err, fd) {
            if (err) {
              self2.emit("error", err);
              self2.readable = false;
              return;
            }
            self2.fd = fd;
            self2.emit("open", fd);
            self2._read();
          });
        }
        function WriteStream(path3, options) {
          if (!(this instanceof WriteStream))
            return new WriteStream(path3, options);
          Stream.call(this);
          this.path = path3;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length; index < length; index++) {
            var key2 = keys[index];
            this[key2] = options[key2];
          }
          if (this.start !== void 0) {
            if (typeof this.start !== "number") {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = fs2.open;
            this._queue.push([
              this._open,
              this.path,
              this.flags,
              this.mode,
              void 0,
            ]);
            this.flush();
          }
        }
      }
    },
  });

  // node_modules/graceful-fs/clone.js
  var require_clone = __commonJS({
    "node_modules/graceful-fs/clone.js"(exports, module) {
      "use strict";
      module.exports = clone;
      var getPrototypeOf =
        Object.getPrototypeOf ||
        function (obj) {
          return obj.__proto__;
        };
      function clone(obj) {
        if (obj === null || typeof obj !== "object") return obj;
        if (obj instanceof Object)
          var copy = { __proto__: getPrototypeOf(obj) };
        else var copy = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(obj).forEach(function (key2) {
          Object.defineProperty(
            copy,
            key2,
            Object.getOwnPropertyDescriptor(obj, key2)
          );
        });
        return copy;
      }
    },
  });

  // node_modules/graceful-fs/graceful-fs.js
  var require_graceful_fs = __commonJS({
    "node_modules/graceful-fs/graceful-fs.js"(exports, module) {
      var fs2 = __require("fs");
      var polyfills = require_polyfills();
      var legacy = require_legacy_streams();
      var clone = require_clone();
      var util = __require("util");
      var gracefulQueue;
      var previousSymbol;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        gracefulQueue = Symbol.for("graceful-fs.queue");
        previousSymbol = Symbol.for("graceful-fs.previous");
      } else {
        gracefulQueue = "___graceful-fs.queue";
        previousSymbol = "___graceful-fs.previous";
      }
      function noop() {}
      function publishQueue(context, queue2) {
        Object.defineProperty(context, gracefulQueue, {
          get: function () {
            return queue2;
          },
        });
      }
      var debug = noop;
      if (util.debuglog) debug = util.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        debug = function () {
          var m2 = util.format.apply(util, arguments);
          m2 = "GFS4: " + m2.split(/\n/).join("\nGFS4: ");
          console.error(m2);
        };
      if (!fs2[gracefulQueue]) {
        queue = global[gracefulQueue] || [];
        publishQueue(fs2, queue);
        fs2.close = (function (fs$close) {
          function close(fd, cb) {
            return fs$close.call(fs2, fd, function (err) {
              if (!err) {
                resetQueue();
              }
              if (typeof cb === "function") cb.apply(this, arguments);
            });
          }
          Object.defineProperty(close, previousSymbol, {
            value: fs$close,
          });
          return close;
        })(fs2.close);
        fs2.closeSync = (function (fs$closeSync) {
          function closeSync(fd) {
            fs$closeSync.apply(fs2, arguments);
            resetQueue();
          }
          Object.defineProperty(closeSync, previousSymbol, {
            value: fs$closeSync,
          });
          return closeSync;
        })(fs2.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function () {
            debug(fs2[gracefulQueue]);
            __require("assert").equal(fs2[gracefulQueue].length, 0);
          });
        }
      }
      var queue;
      if (!global[gracefulQueue]) {
        publishQueue(global, fs2[gracefulQueue]);
      }
      module.exports = patch(clone(fs2));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs2.__patched) {
        module.exports = patch(fs2);
        fs2.__patched = true;
      }
      function patch(fs3) {
        polyfills(fs3);
        fs3.gracefulify = patch;
        fs3.createReadStream = createReadStream2;
        fs3.createWriteStream = createWriteStream;
        var fs$readFile = fs3.readFile;
        fs3.readFile = readFile;
        function readFile(path3, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$readFile(path3, options, cb);
          function go$readFile(path4, options2, cb2, startTime) {
            return fs$readFile(path4, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readFile,
                  [path4, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$writeFile = fs3.writeFile;
        fs3.writeFile = writeFile;
        function writeFile(path3, data, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$writeFile(path3, data, options, cb);
          function go$writeFile(path4, data2, options2, cb2, startTime) {
            return fs$writeFile(path4, data2, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$writeFile,
                  [path4, data2, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$appendFile = fs3.appendFile;
        if (fs$appendFile) fs3.appendFile = appendFile;
        function appendFile(path3, data, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$appendFile(path3, data, options, cb);
          function go$appendFile(path4, data2, options2, cb2, startTime) {
            return fs$appendFile(path4, data2, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$appendFile,
                  [path4, data2, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$copyFile = fs3.copyFile;
        if (fs$copyFile) fs3.copyFile = copyFile;
        function copyFile(src, dest, flags, cb) {
          if (typeof flags === "function") {
            cb = flags;
            flags = 0;
          }
          return go$copyFile(src, dest, flags, cb);
          function go$copyFile(src2, dest2, flags2, cb2, startTime) {
            return fs$copyFile(src2, dest2, flags2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$copyFile,
                  [src2, dest2, flags2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$readdir = fs3.readdir;
        fs3.readdir = readdir;
        function readdir(path3, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$readdir(path3, options, cb);
          function go$readdir(path4, options2, cb2, startTime) {
            return fs$readdir(path4, options2, function (err, files) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readdir,
                  [path4, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (files && files.sort) files.sort();
                if (typeof cb2 === "function") cb2.call(this, err, files);
              }
            });
          }
        }
        if (process.version.substr(0, 4) === "v0.8") {
          var legStreams = legacy(fs3);
          ReadStream3 = legStreams.ReadStream;
          WriteStream = legStreams.WriteStream;
        }
        var fs$ReadStream = fs3.ReadStream;
        if (fs$ReadStream) {
          ReadStream3.prototype = Object.create(fs$ReadStream.prototype);
          ReadStream3.prototype.open = ReadStream$open;
        }
        var fs$WriteStream = fs3.WriteStream;
        if (fs$WriteStream) {
          WriteStream.prototype = Object.create(fs$WriteStream.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(fs3, "ReadStream", {
          get: function () {
            return ReadStream3;
          },
          set: function (val) {
            ReadStream3 = val;
          },
          enumerable: true,
          configurable: true,
        });
        Object.defineProperty(fs3, "WriteStream", {
          get: function () {
            return WriteStream;
          },
          set: function (val) {
            WriteStream = val;
          },
          enumerable: true,
          configurable: true,
        });
        var FileReadStream = ReadStream3;
        Object.defineProperty(fs3, "FileReadStream", {
          get: function () {
            return FileReadStream;
          },
          set: function (val) {
            FileReadStream = val;
          },
          enumerable: true,
          configurable: true,
        });
        var FileWriteStream = WriteStream;
        Object.defineProperty(fs3, "FileWriteStream", {
          get: function () {
            return FileWriteStream;
          },
          set: function (val) {
            FileWriteStream = val;
          },
          enumerable: true,
          configurable: true,
        });
        function ReadStream3(path3, options) {
          if (this instanceof ReadStream3)
            return fs$ReadStream.apply(this, arguments), this;
          else
            return ReadStream3.apply(
              Object.create(ReadStream3.prototype),
              arguments
            );
        }
        function ReadStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              if (that.autoClose) that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
              that.read();
            }
          });
        }
        function WriteStream(path3, options) {
          if (this instanceof WriteStream)
            return fs$WriteStream.apply(this, arguments), this;
          else
            return WriteStream.apply(
              Object.create(WriteStream.prototype),
              arguments
            );
        }
        function WriteStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
            }
          });
        }
        function createReadStream2(path3, options) {
          return new fs3.ReadStream(path3, options);
        }
        function createWriteStream(path3, options) {
          return new fs3.WriteStream(path3, options);
        }
        var fs$open = fs3.open;
        fs3.open = open;
        function open(path3, flags, mode, cb) {
          if (typeof mode === "function") (cb = mode), (mode = null);
          return go$open(path3, flags, mode, cb);
          function go$open(path4, flags2, mode2, cb2, startTime) {
            return fs$open(path4, flags2, mode2, function (err, fd) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$open,
                  [path4, flags2, mode2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
        }
        return fs3;
      }
      function enqueue(elem) {
        debug("ENQUEUE", elem[0].name, elem[1]);
        fs2[gracefulQueue].push(elem);
        retry();
      }
      var retryTimer;
      function resetQueue() {
        var now2 = Date.now();
        for (var i = 0; i < fs2[gracefulQueue].length; ++i) {
          if (fs2[gracefulQueue][i].length > 2) {
            fs2[gracefulQueue][i][3] = now2;
            fs2[gracefulQueue][i][4] = now2;
          }
        }
        retry();
      }
      function retry() {
        clearTimeout(retryTimer);
        retryTimer = void 0;
        if (fs2[gracefulQueue].length === 0) return;
        var elem = fs2[gracefulQueue].shift();
        var fn = elem[0];
        var args = elem[1];
        var err = elem[2];
        var startTime = elem[3];
        var lastTime = elem[4];
        if (startTime === void 0) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args);
        } else if (Date.now() - startTime >= 6e4) {
          debug("TIMEOUT", fn.name, args);
          var cb = args.pop();
          if (typeof cb === "function") cb.call(null, err);
        } else {
          var sinceAttempt = Date.now() - lastTime;
          var sinceStart = Math.max(lastTime - startTime, 1);
          var desiredDelay = Math.min(sinceStart * 1.2, 100);
          if (sinceAttempt >= desiredDelay) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args.concat([startTime]));
          } else {
            fs2[gracefulQueue].push(elem);
          }
        }
        if (retryTimer === void 0) {
          retryTimer = setTimeout(retry, 0);
        }
      }
    },
  });

  // node_modules/retry/lib/retry_operation.js
  var require_retry_operation = __commonJS({
    "node_modules/retry/lib/retry_operation.js"(exports, module) {
      function RetryOperation(timeouts, options) {
        if (typeof options === "boolean") {
          options = { forever: options };
        }
        this._timeouts = timeouts;
        this._options = options || {};
        this._fn = null;
        this._errors = [];
        this._attempts = 1;
        this._operationTimeout = null;
        this._operationTimeoutCb = null;
        this._timeout = null;
        if (this._options.forever) {
          this._cachedTimeouts = this._timeouts.slice(0);
        }
      }
      module.exports = RetryOperation;
      RetryOperation.prototype.stop = function () {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        this._timeouts = [];
        this._cachedTimeouts = null;
      };
      RetryOperation.prototype.retry = function (err) {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        if (!err) {
          return false;
        }
        this._errors.push(err);
        var timeout = this._timeouts.shift();
        if (timeout === void 0) {
          if (this._cachedTimeouts) {
            this._errors.splice(this._errors.length - 1, this._errors.length);
            this._timeouts = this._cachedTimeouts.slice(0);
            timeout = this._timeouts.shift();
          } else {
            return false;
          }
        }
        var self2 = this;
        var timer2 = setTimeout(function () {
          self2._attempts++;
          if (self2._operationTimeoutCb) {
            self2._timeout = setTimeout(function () {
              self2._operationTimeoutCb(self2._attempts);
            }, self2._operationTimeout);
            if (this._options.unref) {
              self2._timeout.unref();
            }
          }
          self2._fn(self2._attempts);
        }, timeout);
        if (this._options.unref) {
          timer2.unref();
        }
        return true;
      };
      RetryOperation.prototype.attempt = function (fn, timeoutOps) {
        this._fn = fn;
        if (timeoutOps) {
          if (timeoutOps.timeout) {
            this._operationTimeout = timeoutOps.timeout;
          }
          if (timeoutOps.cb) {
            this._operationTimeoutCb = timeoutOps.cb;
          }
        }
        var self2 = this;
        if (this._operationTimeoutCb) {
          this._timeout = setTimeout(function () {
            self2._operationTimeoutCb();
          }, self2._operationTimeout);
        }
        this._fn(this._attempts);
      };
      RetryOperation.prototype.try = function (fn) {
        console.log("Using RetryOperation.try() is deprecated");
        this.attempt(fn);
      };
      RetryOperation.prototype.start = function (fn) {
        console.log("Using RetryOperation.start() is deprecated");
        this.attempt(fn);
      };
      RetryOperation.prototype.start = RetryOperation.prototype.try;
      RetryOperation.prototype.errors = function () {
        return this._errors;
      };
      RetryOperation.prototype.attempts = function () {
        return this._attempts;
      };
      RetryOperation.prototype.mainError = function () {
        if (this._errors.length === 0) {
          return null;
        }
        var counts = {};
        var mainError = null;
        var mainErrorCount = 0;
        for (var i = 0; i < this._errors.length; i++) {
          var error = this._errors[i];
          var message = error.message;
          var count = (counts[message] || 0) + 1;
          counts[message] = count;
          if (count >= mainErrorCount) {
            mainError = error;
            mainErrorCount = count;
          }
        }
        return mainError;
      };
    },
  });

  // node_modules/retry/lib/retry.js
  var require_retry = __commonJS({
    "node_modules/retry/lib/retry.js"(exports) {
      var RetryOperation = require_retry_operation();
      exports.operation = function (options) {
        var timeouts = exports.timeouts(options);
        return new RetryOperation(timeouts, {
          forever: options && options.forever,
          unref: options && options.unref,
        });
      };
      exports.timeouts = function (options) {
        if (options instanceof Array) {
          return [].concat(options);
        }
        var opts = {
          retries: 10,
          factor: 2,
          minTimeout: 1 * 1e3,
          maxTimeout: Infinity,
          randomize: false,
        };
        for (var key2 in options) {
          opts[key2] = options[key2];
        }
        if (opts.minTimeout > opts.maxTimeout) {
          throw new Error("minTimeout is greater than maxTimeout");
        }
        var timeouts = [];
        for (var i = 0; i < opts.retries; i++) {
          timeouts.push(this.createTimeout(i, opts));
        }
        if (options && options.forever && !timeouts.length) {
          timeouts.push(this.createTimeout(i, opts));
        }
        timeouts.sort(function (a2, b2) {
          return a2 - b2;
        });
        return timeouts;
      };
      exports.createTimeout = function (attempt, opts) {
        var random = opts.randomize ? Math.random() + 1 : 1;
        var timeout = Math.round(
          random * opts.minTimeout * Math.pow(opts.factor, attempt)
        );
        timeout = Math.min(timeout, opts.maxTimeout);
        return timeout;
      };
      exports.wrap = function (obj, options, methods) {
        if (options instanceof Array) {
          methods = options;
          options = null;
        }
        if (!methods) {
          methods = [];
          for (var key2 in obj) {
            if (typeof obj[key2] === "function") {
              methods.push(key2);
            }
          }
        }
        for (var i = 0; i < methods.length; i++) {
          var method = methods[i];
          var original = obj[method];
          obj[method] = function retryWrapper() {
            var op = exports.operation(options);
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            args.push(function (err) {
              if (op.retry(err)) {
                return;
              }
              if (err) {
                arguments[0] = op.mainError();
              }
              callback.apply(this, arguments);
            });
            op.attempt(function () {
              original.apply(obj, args);
            });
          };
          obj[method].options = options;
        }
      };
    },
  });

  // node_modules/retry/index.js
  var require_retry2 = __commonJS({
    "node_modules/retry/index.js"(exports, module) {
      module.exports = require_retry();
    },
  });

  // node_modules/proper-lockfile/lib/syncFs.js
  var require_syncFs = __commonJS({
    "node_modules/proper-lockfile/lib/syncFs.js"(exports, module) {
      "use strict";
      function makeSync(fs2, name2) {
        const fn = fs2[`${name2}Sync`];
        return function () {
          const callback = arguments[arguments.length - 1];
          const args = Array.prototype.slice.call(arguments, 0, -1);
          let ret;
          try {
            ret = fn.apply(fs2, args);
          } catch (err) {
            return callback(err);
          }
          callback(null, ret);
        };
      }
      function syncFs(fs2) {
        const fns = ["mkdir", "realpath", "stat", "rmdir", "utimes"];
        const obj = {};
        fns.forEach((name2) => {
          obj[name2] = makeSync(fs2, name2);
        });
        for (const key2 in fs2) {
          if (!obj[key2]) {
            obj[key2] = fs2[key2];
          }
        }
        return obj;
      }
      module.exports = syncFs;
    },
  });

  // node_modules/proper-lockfile/index.js
  var require_proper_lockfile = __commonJS({
    "node_modules/proper-lockfile/index.js"(exports, module) {
      "use strict";
      var fs2 = require_graceful_fs();
      var path3 = __require("path");
      var retry = require_retry2();
      var syncFs = require_syncFs();
      var locks = {};
      function getLockFile(file) {
        return `${file}.lock`;
      }
      function canonicalPath(file, options, callback) {
        if (!options.realpath) {
          return callback(null, path3.resolve(file));
        }
        options.fs.realpath(file, callback);
      }
      function acquireLock(file, options, callback) {
        options.fs.mkdir(getLockFile(file), (err) => {
          if (!err) {
            return callback();
          }
          if (err.code !== "EEXIST") {
            return callback(err);
          }
          if (options.stale <= 0) {
            return callback(
              Object.assign(new Error("Lock file is already being hold"), {
                code: "ELOCKED",
                file,
              })
            );
          }
          options.fs.stat(getLockFile(file), (err2, stat2) => {
            if (err2) {
              if (err2.code === "ENOENT") {
                return acquireLock(
                  file,
                  Object.assign({}, options, { stale: 0 }),
                  callback
                );
              }
              return callback(err2);
            }
            if (!isLockStale(stat2, options)) {
              return callback(
                Object.assign(new Error("Lock file is already being hold"), {
                  code: "ELOCKED",
                  file,
                })
              );
            }
            removeLock(file, options, (err3) => {
              if (err3) {
                return callback(err3);
              }
              acquireLock(
                file,
                Object.assign({}, options, { stale: 0 }),
                callback
              );
            });
          });
        });
      }
      function isLockStale(stat2, options) {
        return stat2.mtime.getTime() < Date.now() - options.stale;
      }
      function removeLock(file, options, callback) {
        options.fs.rmdir(getLockFile(file), (err) => {
          if (err && err.code !== "ENOENT") {
            return callback(err);
          }
          callback();
        });
      }
      function updateLock(file, options) {
        const lock3 = locks[file];
        if (lock3.updateTimeout) {
          return;
        }
        lock3.updateDelay = lock3.updateDelay || options.update;
        lock3.updateTimeout = setTimeout(() => {
          const mtime = Date.now() / 1e3;
          lock3.updateTimeout = null;
          options.fs.utimes(getLockFile(file), mtime, mtime, (err) => {
            if (lock3.released) {
              return;
            }
            if (
              lock3.lastUpdate <= Date.now() - options.stale &&
              lock3.lastUpdate > Date.now() - options.stale * 2
            ) {
              return compromisedLock(
                file,
                lock3,
                Object.assign(
                  new Error(
                    lock3.updateError ||
                      "Unable to update lock within the stale threshold"
                  ),
                  { code: "ECOMPROMISED" }
                )
              );
            }
            if (err) {
              if (err.code === "ENOENT") {
                return compromisedLock(
                  file,
                  lock3,
                  Object.assign(err, { code: "ECOMPROMISED" })
                );
              }
              lock3.updateError = err;
              lock3.updateDelay = 1e3;
              return updateLock(file, options);
            }
            lock3.lastUpdate = Date.now();
            lock3.updateError = null;
            lock3.updateDelay = null;
            updateLock(file, options);
          });
        }, lock3.updateDelay);
        if (lock3.updateTimeout.unref) {
          lock3.updateTimeout.unref();
        }
      }
      function compromisedLock(file, lock3, err) {
        lock3.released = true;
        lock3.updateTimeout && clearTimeout(lock3.updateTimeout);
        if (locks[file] === lock3) {
          delete locks[file];
        }
        lock3.compromised(err);
      }
      function lock2(file, options, compromised, callback) {
        if (typeof options === "function") {
          callback = compromised;
          compromised = options;
          options = null;
        }
        if (!callback) {
          callback = compromised;
          compromised = null;
        }
        options = Object.assign(
          {
            stale: 1e4,
            update: null,
            realpath: true,
            retries: 0,
            fs: fs2,
          },
          options
        );
        options.retries = options.retries || 0;
        options.retries =
          typeof options.retries === "number"
            ? { retries: options.retries }
            : options.retries;
        options.stale = Math.max(options.stale || 0, 2e3);
        options.update =
          options.update == null ? options.stale / 2 : options.update || 0;
        options.update = Math.max(
          Math.min(options.update, options.stale / 2),
          1e3
        );
        compromised =
          compromised ||
          function (err) {
            throw err;
          };
        canonicalPath(file, options, (err, file2) => {
          if (err) {
            return callback(err);
          }
          const operation = retry.operation(options.retries);
          operation.attempt(() => {
            acquireLock(file2, options, (err2) => {
              if (operation.retry(err2)) {
                return;
              }
              if (err2) {
                return callback(operation.mainError());
              }
              const lock3 = (locks[file2] = {
                options,
                compromised,
                lastUpdate: Date.now(),
              });
              updateLock(file2, options);
              callback(null, (releasedCallback) => {
                if (lock3.released) {
                  return (
                    releasedCallback &&
                    releasedCallback(
                      Object.assign(new Error("Lock is already released"), {
                        code: "ERELEASED",
                      })
                    )
                  );
                }
                unlock(
                  file2,
                  Object.assign({}, options, { realpath: false }),
                  releasedCallback
                );
              });
            });
          });
        });
      }
      function unlock(file, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = null;
        }
        options = Object.assign(
          {
            fs: fs2,
            realpath: true,
          },
          options
        );
        callback = callback || function () {};
        canonicalPath(file, options, (err, file2) => {
          if (err) {
            return callback(err);
          }
          const lock3 = locks[file2];
          if (!lock3) {
            return callback(
              Object.assign(new Error("Lock is not acquired/owned by you"), {
                code: "ENOTACQUIRED",
              })
            );
          }
          lock3.updateTimeout && clearTimeout(lock3.updateTimeout);
          lock3.released = true;
          delete locks[file2];
          removeLock(file2, options, callback);
        });
      }
      function lockSync(file, options, compromised) {
        if (typeof options === "function") {
          compromised = options;
          options = null;
        }
        options = options || {};
        options.fs = syncFs(options.fs || fs2);
        options.retries = options.retries || 0;
        options.retries =
          typeof options.retries === "number"
            ? { retries: options.retries }
            : options.retries;
        if (options.retries.retries) {
          throw Object.assign(
            new Error("Cannot use retries with the sync api"),
            { code: "ESYNC" }
          );
        }
        let err;
        let release;
        lock2(file, options, compromised, (_err, _release) => {
          err = _err;
          release = _release;
        });
        if (err) {
          throw err;
        }
        return release;
      }
      function unlockSync(file, options) {
        options = options || {};
        options.fs = syncFs(options.fs || fs2);
        let err;
        unlock(file, options, (_err) => {
          err = _err;
        });
        if (err) {
          throw err;
        }
      }
      function check(file, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = null;
        }
        options = Object.assign(
          {
            stale: 1e4,
            realpath: true,
            fs: fs2,
          },
          options
        );
        options.stale = Math.max(options.stale || 0, 2e3);
        canonicalPath(file, options, (err, file2) => {
          if (err) {
            return callback(err);
          }
          options.fs.stat(getLockFile(file2), (err2, stat2) => {
            if (err2) {
              return err2.code === "ENOENT"
                ? callback(null, false)
                : callback(err2);
            }
            if (options.stale <= 0) {
              return callback(null, true);
            }
            return callback(null, !isLockStale(stat2, options));
          });
        });
      }
      function checkSync(file, options) {
        options = options || {};
        options.fs = syncFs(options.fs || fs2);
        let err;
        let locked;
        check(file, options, (_err, _locked) => {
          err = _err;
          locked = _locked;
        });
        if (err) {
          throw err;
        }
        return locked;
      }
      process.on("exit", () => {
        Object.keys(locks).forEach((file) => {
          try {
            locks[file].options.fs.rmdirSync(getLockFile(file));
          } catch (e) {}
        });
      });
      module.exports = lock2;
      module.exports.lock = lock2;
      module.exports.unlock = unlock;
      module.exports.lockSync = lockSync;
      module.exports.unlockSync = unlockSync;
      module.exports.check = check;
      module.exports.checkSync = checkSync;
    },
  });

  // node_modules/custom-error-instance/bin/factories.js
  var require_factories = __commonJS({
    "node_modules/custom-error-instance/bin/factories.js"(exports) {
      "use strict";
      exports.expectReceive = function (properties, configuration, factory) {
        var message;
        factory.root(properties, configuration, factory);
        message = this.message;
        if (properties.hasOwnProperty("expected"))
          message += " Expected " + properties.expected + ".";
        if (properties.hasOwnProperty("received"))
          message += " Received: " + properties.received + ".";
        this.message = message;
      };
      exports.root = function (properties, configuration, factories) {
        var _this = this;
        var code;
        var config = { stackLength: Error.stackTraceLimit, rootOnly: true };
        var messageStr = "";
        var originalStackLength = Error.stackTraceLimit;
        var stack;
        function updateStack() {
          stack[0] = _this.toString();
          _this.stack = stack.join("\n");
        }
        if (!configuration || typeof configuration !== "object")
          configuration = {};
        if (
          configuration.hasOwnProperty("stackLength") &&
          typeof configuration.stackLength === "number" &&
          !isNaN(configuration.stackLength) &&
          configuration.stackLength >= 0
        )
          config.stackLength = configuration.stackLength;
        if (!configuration.hasOwnProperty("rootOnly"))
          config.rootOnly = configuration.rootOnly;
        if (!config.rootOnly || this.CustomError.parent === Error) {
          Object.keys(properties).forEach(function (key2) {
            switch (key2) {
              case "code":
                code = properties.code || void 0;
                break;
              case "message":
                messageStr = properties.message || "";
                break;
              default:
                _this[key2] = properties[key2];
            }
          });
          Error.stackTraceLimit = config.stackLength + 2;
          stack = new Error().stack.split("\n");
          stack.splice(0, 3);
          stack.unshift("");
          Error.stackTraceLimit = originalStackLength;
          this.stack = stack.join("\n");
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            get: function () {
              return code;
            },
            set: function (value) {
              code = value;
              updateStack();
            },
          });
          Object.defineProperty(this, "message", {
            configurable: true,
            enumerable: true,
            get: function () {
              return messageStr;
            },
            set: function (value) {
              messageStr = value;
              updateStack();
            },
          });
          updateStack();
        }
      };
    },
  });

  // node_modules/custom-error-instance/bin/error.js
  var require_error = __commonJS({
    "node_modules/custom-error-instance/bin/error.js"(exports, module) {
      "use strict";
      module.exports = CustomError;
      CustomError.factory = require_factories();
      var Err = CustomError("CustomError");
      Err.order = CustomError(Err, {
        message: "Arguments out of order.",
        code: "EOARG",
      });
      function CustomError(name2, parent, properties, factory) {
        var construct;
        var isRoot;
        parent = findArg(arguments, 1, Error, isParentArg, [
          isPropertiesArg,
          isFactoryArg,
        ]);
        properties = findArg(arguments, 2, {}, isPropertiesArg, [isFactoryArg]);
        factory = findArg(arguments, 3, noop, isFactoryArg, []);
        name2 = findArg(
          arguments,
          0,
          parent === Error ? "Error" : parent.prototype.CustomError.name,
          isNameArg,
          [isParentArg, isPropertiesArg, isFactoryArg]
        );
        isRoot = parent === Error;
        if (isRoot && factory === noop) factory = CustomError.factory.root;
        construct = function (message, configuration) {
          var _this;
          var ar2;
          var factories;
          var i;
          var item;
          var props;
          if (!(this instanceof construct))
            return new construct(message, configuration);
          delete this.constructor.name;
          Object.defineProperty(this.constructor, "name", {
            enumerable: false,
            configurable: true,
            value: name2,
            writable: false,
          });
          if (typeof message === "string") message = { message };
          if (!message) message = {};
          ar2 = this.CustomError.chain
            .slice(0)
            .reverse()
            .map(function (value) {
              return value.properties;
            });
          ar2.push(message);
          ar2.unshift({});
          props = Object.assign.apply(Object, ar2);
          _this = this;
          factories = {};
          Object.keys(CustomError.factory).forEach(function (key2) {
            factories[key2] = function (props2, config) {
              CustomError.factory[key2].call(_this, props2, config, factories);
            };
          });
          for (i = this.CustomError.chain.length - 1; i >= 0; i--) {
            item = this.CustomError.chain[i];
            if (item.factory !== noop) {
              item.factory.call(this, props, configuration, factories);
            }
          }
        };
        construct.prototype = Object.create(parent.prototype);
        construct.prototype.constructor = construct;
        construct.prototype.name = name2;
        construct.prototype.CustomError = {
          chain: isRoot ? [] : parent.prototype.CustomError.chain.slice(0),
          factory,
          name: name2,
          parent,
          properties,
        };
        construct.prototype.CustomError.chain.unshift(
          construct.prototype.CustomError
        );
        construct.prototype.toString = function () {
          var result =
            this.CustomError.chain[this.CustomError.chain.length - 1].name;
          if (this.code) result += " " + this.code;
          if (this.message) result += ": " + this.message;
          return result;
        };
        return construct;
      }
      function findArg(args, index, defaultValue, filter, antiFilters) {
        var anti = -1;
        var found = -1;
        var i;
        var j2;
        var len = index < args.length ? index : args.length;
        var val;
        for (i = 0; i <= len; i++) {
          val = args[i];
          if (anti === -1) {
            for (j2 = 0; j2 < antiFilters.length; j2++) {
              if (antiFilters[j2](val)) anti = i;
            }
          }
          if (found === -1 && filter(val)) {
            found = i;
          }
        }
        if (found !== -1 && anti !== -1 && anti < found) throw new Err.order();
        return found !== -1 ? args[found] : defaultValue;
      }
      function isFactoryArg(value) {
        return (
          typeof value === "function" &&
          value !== Error &&
          !value.prototype.CustomError
        );
      }
      function isNameArg(value) {
        return typeof value === "string";
      }
      function isParentArg(value) {
        return (
          typeof value === "function" &&
          (value === Error || value.prototype.CustomError)
        );
      }
      function isPropertiesArg(value) {
        return value && typeof value === "object";
      }
      function noop() {}
    },
  });

  // node_modules/custom-error-instance/index.js
  var require_custom_error_instance = __commonJS({
    "node_modules/custom-error-instance/index.js"(exports, module) {
      module.exports = require_error();
    },
  });

  // node_modules/lodash._basetostring/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash._basetostring/index.js"(exports, module) {
      var INFINITY = 1 / 0;
      var symbolTag = "[object Symbol]";
      var objectTypes = {
        function: true,
        object: true,
      };
      var freeExports =
        objectTypes[typeof exports] && exports && !exports.nodeType
          ? exports
          : void 0;
      var freeModule =
        objectTypes[typeof module] && module && !module.nodeType
          ? module
          : void 0;
      var freeGlobal = checkGlobal(
        freeExports && freeModule && typeof global == "object" && global
      );
      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
      var thisGlobal = checkGlobal(objectTypes[typeof exports] && exports);
      var root =
        freeGlobal ||
        (freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow) ||
        freeSelf ||
        thisGlobal ||
        Function("return this")();
      function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
      }
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var Symbol2 = root.Symbol;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return (
          typeof value == "symbol" ||
          (isObjectLike(value) && objectToString.call(value) == symbolTag)
        );
      }
      module.exports = baseToString;
    },
  });

  // node_modules/lodash._stringtopath/index.js
  var require_lodash2 = __commonJS({
    "node_modules/lodash._stringtopath/index.js"(exports, module) {
      var baseToString = require_lodash();
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var rePropName =
        /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reEscapeChar = /\\(\\)?/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var objectTypes = {
        function: true,
        object: true,
      };
      var freeExports =
        objectTypes[typeof exports] && exports && !exports.nodeType
          ? exports
          : void 0;
      var freeModule =
        objectTypes[typeof module] && module && !module.nodeType
          ? module
          : void 0;
      var freeGlobal = checkGlobal(
        freeExports && freeModule && typeof global == "object" && global
      );
      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
      var thisGlobal = checkGlobal(objectTypes[typeof exports] && exports);
      var root =
        freeGlobal ||
        (freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow) ||
        freeSelf ||
        thisGlobal ||
        Function("return this")();
      function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {}
        }
        return result;
      }
      var arrayProto = Array.prototype;
      var objectProto = Object.prototype;
      var funcToString = Function.prototype.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      );
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key2) {
        return this.has(key2) && delete this.__data__[key2];
      }
      function hashGet(key2) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key2];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
      }
      function hashHas(key2) {
        var data = this.__data__;
        return nativeCreate
          ? data[key2] !== void 0
          : hasOwnProperty.call(data, key2);
      }
      function hashSet(key2, value) {
        var data = this.__data__;
        data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key2) {
        return assocIndexOf(this.__data__, key2) > -1;
      }
      function listCacheSet(key2, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          data.push([key2, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          hash: new Hash(),
          map: new (Map2 || ListCache)(),
          string: new Hash(),
        };
      }
      function mapCacheDelete(key2) {
        return getMapData(this, key2)["delete"](key2);
      }
      function mapCacheGet(key2) {
        return getMapData(this, key2).get(key2);
      }
      function mapCacheHas(key2) {
        return getMapData(this, key2).has(key2);
      }
      function mapCacheSet(key2, value) {
        getMapData(this, key2).set(key2, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key2) {
        var length = array.length;
        while (length--) {
          if (eq4(array[length][0], key2)) {
            return length;
          }
        }
        return -1;
      }
      function getMapData(map, key2) {
        var data = map.__data__;
        return isKeyable(key2)
          ? data[typeof key2 == "string" ? "string" : "hash"]
          : data.map;
      }
      function getNative(object, key2) {
        var value = object[key2];
        return isNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" ||
          type == "number" ||
          type == "symbol" ||
          type == "boolean"
          ? value !== "__proto__"
          : value === null;
      }
      var stringToPath = memoize(function (string) {
        var result = [];
        toString(string).replace(
          rePropName,
          function (match, number, quote, string2) {
            result.push(
              quote ? string2.replace(reEscapeChar, "$1") : number || match
            );
          }
        );
        return result;
      });
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + "";
          } catch (e) {}
        }
        return "";
      }
      function memoize(func, resolver2) {
        if (
          typeof func != "function" ||
          (resolver2 && typeof resolver2 != "function")
        ) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function () {
          var args = arguments,
            key2 = resolver2 ? resolver2.apply(this, args) : args[0],
            cache = memoized.cache;
          if (cache.has(key2)) {
            return cache.get(key2);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key2, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq4(value, other) {
        return value === other || (value !== value && other !== other);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isNative(value) {
        if (!isObject(value)) {
          return false;
        }
        var pattern =
          isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      module.exports = stringToPath;
    },
  });

  // node_modules/lodash._baseiteratee/index.js
  var require_lodash3 = __commonJS({
    "node_modules/lodash._baseiteratee/index.js"(exports, module) {
      var stringToPath = require_lodash2();
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var UNORDERED_COMPARE_FLAG = 1;
      var PARTIAL_COMPARE_FLAG = 2;
      var INFINITY = 1 / 0;
      var MAX_SAFE_INTEGER2 = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true;
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false;
      var objectTypes = {
        function: true,
        object: true,
      };
      var freeExports =
        objectTypes[typeof exports] && exports && !exports.nodeType
          ? exports
          : void 0;
      var freeModule =
        objectTypes[typeof module] && module && !module.nodeType
          ? module
          : void 0;
      var freeGlobal = checkGlobal(
        freeExports && freeModule && typeof global == "object" && global
      );
      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
      var thisGlobal = checkGlobal(objectTypes[typeof exports] && exports);
      var root =
        freeGlobal ||
        (freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow) ||
        freeSelf ||
        thisGlobal ||
        Function("return this")();
      function arrayMap(array, iteratee) {
        var index = -1,
          length = array.length,
          result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arraySome(array, predicate) {
        var index = -1,
          length = array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      function baseTimes(n, iteratee) {
        var index = -1,
          result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function (key2) {
          return [key2, object[key2]];
        });
      }
      function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {}
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1,
          result = Array(map.size);
        map.forEach(function (value, key2) {
          result[++index] = [key2, value];
        });
        return result;
      }
      function setToArray(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = [value, value];
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var objectProto = Object.prototype;
      var funcToString = Function.prototype.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      );
      var Symbol2 = root.Symbol;
      var Uint8Array2 = root.Uint8Array;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var nativeGetPrototype = Object.getPrototypeOf;
      var nativeKeys = Object.keys;
      var DataView2 = getNative(root, "DataView");
      var Map2 = getNative(root, "Map");
      var Promise2 = getNative(root, "Promise");
      var Set2 = getNative(root, "Set");
      var WeakMap2 = getNative(root, "WeakMap");
      var nativeCreate = getNative(Object, "create");
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function Hash(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key2) {
        return this.has(key2) && delete this.__data__[key2];
      }
      function hashGet(key2) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key2];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
      }
      function hashHas(key2) {
        var data = this.__data__;
        return nativeCreate
          ? data[key2] !== void 0
          : hasOwnProperty.call(data, key2);
      }
      function hashSet(key2, value) {
        var data = this.__data__;
        data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key2) {
        return assocIndexOf(this.__data__, key2) > -1;
      }
      function listCacheSet(key2, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          data.push([key2, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          hash: new Hash(),
          map: new (Map2 || ListCache)(),
          string: new Hash(),
        };
      }
      function mapCacheDelete(key2) {
        return getMapData(this, key2)["delete"](key2);
      }
      function mapCacheGet(key2) {
        return getMapData(this, key2).get(key2);
      }
      function mapCacheHas(key2) {
        return getMapData(this, key2).has(key2);
      }
      function mapCacheSet(key2, value) {
        getMapData(this, key2).set(key2, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index = -1,
          length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        this.__data__ = new ListCache(entries);
      }
      function stackClear() {
        this.__data__ = new ListCache();
      }
      function stackDelete(key2) {
        return this.__data__["delete"](key2);
      }
      function stackGet(key2) {
        return this.__data__.get(key2);
      }
      function stackHas(key2) {
        return this.__data__.has(key2);
      }
      function stackSet(key2, value) {
        var cache = this.__data__;
        if (
          cache instanceof ListCache &&
          cache.__data__.length == LARGE_ARRAY_SIZE
        ) {
          cache = this.__data__ = new MapCache(cache.__data__);
        }
        cache.set(key2, value);
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function assocIndexOf(array, key2) {
        var length = array.length;
        while (length--) {
          if (eq4(array[length][0], key2)) {
            return length;
          }
        }
        return -1;
      }
      function baseGet(object, path3) {
        path3 = isKey(path3, object) ? [path3] : castPath(path3);
        var index = 0,
          length = path3.length;
        while (object != null && index < length) {
          object = object[toKey(path3[index++])];
        }
        return index && index == length ? object : void 0;
      }
      function baseHas(object, key2) {
        return (
          hasOwnProperty.call(object, key2) ||
          (typeof object == "object" &&
            key2 in object &&
            getPrototype(object) === null)
        );
      }
      function baseHasIn(object, key2) {
        return key2 in Object(object);
      }
      function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
          return true;
        }
        if (
          value == null ||
          other == null ||
          (!isObject(value) && !isObjectLike(other))
        ) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(
          value,
          other,
          baseIsEqual,
          customizer,
          bitmask,
          stack
        );
      }
      function baseIsEqualDeep(
        object,
        other,
        equalFunc,
        customizer,
        bitmask,
        stack
      ) {
        var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;
        if (!objIsArr) {
          objTag = getTag(object);
          objTag = objTag == argsTag ? objectTag : objTag;
        }
        if (!othIsArr) {
          othTag = getTag(other);
          othTag = othTag == argsTag ? objectTag : othTag;
        }
        var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object)
            ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
            : equalByTag(
                object,
                other,
                objTag,
                equalFunc,
                customizer,
                bitmask,
                stack
              );
        }
        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
          var objIsWrapped =
              objIsObj && hasOwnProperty.call(object, "__wrapped__"),
            othIsWrapped =
              othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(
              objUnwrapped,
              othUnwrapped,
              customizer,
              bitmask,
              stack
            );
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(
          object,
          other,
          equalFunc,
          customizer,
          bitmask,
          stack
        );
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
          length = index,
          noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (
            noCustomizer && data[2]
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
          ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key2 = data[0],
            objValue = object[key2],
            srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key2 in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(
                objValue,
                srcValue,
                key2,
                object,
                source,
                stack
              );
            }
            if (
              !(result === void 0
                ? baseIsEqual(
                    srcValue,
                    objValue,
                    customizer,
                    UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG,
                    stack
                  )
                : result)
            ) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        return nativeKeys(Object(object));
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path3, srcValue) {
        if (isKey(path3) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path3), srcValue);
        }
        return function (object) {
          var objValue = get(object, path3);
          return objValue === void 0 && objValue === srcValue
            ? hasIn(object, path3)
            : baseIsEqual(
                srcValue,
                objValue,
                void 0,
                UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG
              );
        };
      }
      function baseProperty(key2) {
        return function (object) {
          return object == null ? void 0 : object[key2];
        };
      }
      function basePropertyDeep(path3) {
        return function (object) {
          return baseGet(object, path3);
        };
      }
      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }
      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function equalArrays(
        array,
        other,
        equalFunc,
        customizer,
        bitmask,
        stack
      ) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var stacked = stack.get(array);
        if (stacked) {
          return stacked == other;
        }
        var index = -1,
          result = true,
          seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        while (++index < arrLength) {
          var arrValue = array[index],
            othValue = other[index];
          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (
              !arraySome(other, function (othValue2, othIndex) {
                if (
                  !seen.has(othIndex) &&
                  (arrValue === othValue2 ||
                    equalFunc(arrValue, othValue2, customizer, bitmask, stack))
                ) {
                  return seen.add(othIndex);
                }
              })
            ) {
              result = false;
              break;
            }
          } else if (
            !(
              arrValue === othValue ||
              equalFunc(arrValue, othValue, customizer, bitmask, stack)
            )
          ) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        return result;
      }
      function equalByTag(
        object,
        other,
        tag,
        equalFunc,
        customizer,
        bitmask,
        stack
      ) {
        switch (tag) {
          case dataViewTag:
            if (
              object.byteLength != other.byteLength ||
              object.byteOffset != other.byteOffset
            ) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (
              object.byteLength != other.byteLength ||
              !equalFunc(new Uint8Array2(object), new Uint8Array2(other))
            ) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
            return +object == +other;
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case numberTag:
            return object != +object ? other != +other : object == +other;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= UNORDERED_COMPARE_FLAG;
            stack.set(object, other);
            return equalArrays(
              convert(object),
              convert(other),
              equalFunc,
              customizer,
              bitmask,
              stack
            );
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(
        object,
        other,
        equalFunc,
        customizer,
        bitmask,
        stack
      ) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key2 = objProps[index];
          if (!(isPartial ? key2 in other : baseHas(other, key2))) {
            return false;
          }
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        var skipCtor = isPartial;
        while (++index < objLength) {
          key2 = objProps[index];
          var objValue = object[key2],
            othValue = other[key2];
          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key2, other, object, stack)
              : customizer(objValue, othValue, key2, object, other, stack);
          }
          if (
            !(compared === void 0
              ? objValue === othValue ||
                equalFunc(objValue, othValue, customizer, bitmask, stack)
              : compared)
          ) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key2 == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
            othCtor = other.constructor;
          if (
            objCtor != othCtor &&
            "constructor" in object &&
            "constructor" in other &&
            !(
              typeof objCtor == "function" &&
              objCtor instanceof objCtor &&
              typeof othCtor == "function" &&
              othCtor instanceof othCtor
            )
          ) {
            result = false;
          }
        }
        stack["delete"](object);
        return result;
      }
      var getLength2 = baseProperty("length");
      function getMapData(map, key2) {
        var data = map.__data__;
        return isKeyable(key2)
          ? data[typeof key2 == "string" ? "string" : "hash"]
          : data.map;
      }
      function getMatchData(object) {
        var result = toPairs(object),
          length = result.length;
        while (length--) {
          result[length][2] = isStrictComparable(result[length][1]);
        }
        return result;
      }
      function getNative(object, key2) {
        var value = object[key2];
        return isNative(value) ? value : void 0;
      }
      function getPrototype(value) {
        return nativeGetPrototype(Object(value));
      }
      function getTag(value) {
        return objectToString.call(value);
      }
      if (
        (DataView2 &&
          getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag) ||
        (Map2 && getTag(new Map2()) != mapTag) ||
        (Promise2 && getTag(Promise2.resolve()) != promiseTag) ||
        (Set2 && getTag(new Set2()) != setTag) ||
        (WeakMap2 && getTag(new WeakMap2()) != weakMapTag)
      ) {
        getTag = function (value) {
          var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : void 0,
            ctorString = Ctor ? toSource(Ctor) : void 0;
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      function hasPath(object, path3, hasFunc) {
        path3 = isKey(path3, object) ? [path3] : castPath(path3);
        var result,
          index = -1,
          length = path3.length;
        while (++index < length) {
          var key2 = toKey(path3[index]);
          if (!(result = object != null && hasFunc(object, key2))) {
            break;
          }
          object = object[key2];
        }
        if (result) {
          return result;
        }
        var length = object ? object.length : 0;
        return (
          !!length &&
          isLength(length) &&
          isIndex(key2, length) &&
          (isArray(object) || isString(object) || isArguments(object))
        );
      }
      function indexKeys(object) {
        var length = object ? object.length : void 0;
        if (
          isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))
        ) {
          return baseTimes(length, String);
        }
        return null;
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER2 : length;
        return (
          !!length &&
          (typeof value == "number" || reIsUint.test(value)) &&
          value > -1 &&
          value % 1 == 0 &&
          value < length
        );
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (
          type == "number" ||
          type == "symbol" ||
          type == "boolean" ||
          value == null ||
          isSymbol(value)
        ) {
          return true;
        }
        return (
          reIsPlainProp.test(value) ||
          !reIsDeepProp.test(value) ||
          (object != null && value in Object(object))
        );
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" ||
          type == "number" ||
          type == "symbol" ||
          type == "boolean"
          ? value !== "__proto__"
          : value === null;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor,
          proto = (typeof Ctor == "function" && Ctor.prototype) || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      function matchesStrictComparable(key2, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }
          return (
            object[key2] === srcValue &&
            (srcValue !== void 0 || key2 in Object(object))
          );
        };
      }
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + "";
          } catch (e) {}
        }
        return "";
      }
      function eq4(value, other) {
        return value === other || (value !== value && other !== other);
      }
      function isArguments(value) {
        return (
          isArrayLikeObject(value) &&
          hasOwnProperty.call(value, "callee") &&
          (!propertyIsEnumerable.call(value, "callee") ||
            objectToString.call(value) == argsTag)
        );
      }
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return (
          value != null && isLength(getLength2(value)) && !isFunction(value)
        );
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isLength(value) {
        return (
          typeof value == "number" &&
          value > -1 &&
          value % 1 == 0 &&
          value <= MAX_SAFE_INTEGER2
        );
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isNative(value) {
        if (!isObject(value)) {
          return false;
        }
        var pattern =
          isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function isString(value) {
        return (
          typeof value == "string" ||
          (!isArray(value) &&
            isObjectLike(value) &&
            objectToString.call(value) == stringTag)
        );
      }
      function isSymbol(value) {
        return (
          typeof value == "symbol" ||
          (isObjectLike(value) && objectToString.call(value) == symbolTag)
        );
      }
      function isTypedArray(value) {
        return (
          isObjectLike(value) &&
          isLength(value.length) &&
          !!typedArrayTags[objectToString.call(value)]
        );
      }
      function get(object, path3, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path3);
        return result === void 0 ? defaultValue : result;
      }
      function hasIn(object, path3) {
        return object != null && hasPath(object, path3, baseHasIn);
      }
      function keys(object) {
        var isProto = isPrototype(object);
        if (!(isProto || isArrayLike(object))) {
          return baseKeys(object);
        }
        var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;
        for (var key2 in object) {
          if (
            baseHas(object, key2) &&
            !(skipIndexes && (key2 == "length" || isIndex(key2, length))) &&
            !(isProto && key2 == "constructor")
          ) {
            result.push(key2);
          }
        }
        return result;
      }
      var toPairs = createToPairs(keys);
      function identity(value) {
        return value;
      }
      function property(path3) {
        return isKey(path3)
          ? baseProperty(toKey(path3))
          : basePropertyDeep(path3);
      }
      module.exports = baseIteratee;
    },
  });

  // node_modules/lodash._createset/index.js
  var require_lodash4 = __commonJS({
    "node_modules/lodash._createset/index.js"(exports, module) {
      var INFINITY = 1 / 0;
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var objectTypes = {
        function: true,
        object: true,
      };
      var freeExports =
        objectTypes[typeof exports] && exports && !exports.nodeType
          ? exports
          : void 0;
      var freeModule =
        objectTypes[typeof module] && module && !module.nodeType
          ? module
          : void 0;
      var freeGlobal = checkGlobal(
        freeExports && freeModule && typeof global == "object" && global
      );
      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
      var thisGlobal = checkGlobal(objectTypes[typeof exports] && exports);
      var root =
        freeGlobal ||
        (freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow) ||
        freeSelf ||
        thisGlobal ||
        Function("return this")();
      function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {}
        }
        return result;
      }
      function setToArray(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }
      var objectProto = Object.prototype;
      var funcToString = Function.prototype.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      );
      var Set2 = getNative(root, "Set");
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY)
        ? noop
        : function (values) {
            return new Set2(values);
          };
      function getNative(object, key2) {
        var value = object[key2];
        return isNative(value) ? value : void 0;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + "";
          } catch (e) {}
        }
        return "";
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isNative(value) {
        if (!isObject(value)) {
          return false;
        }
        var pattern =
          isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function noop() {}
      module.exports = createSet;
    },
  });

  // node_modules/lodash._root/index.js
  var require_lodash5 = __commonJS({
    "node_modules/lodash._root/index.js"(exports, module) {
      var objectTypes = {
        function: true,
        object: true,
      };
      var freeExports =
        objectTypes[typeof exports] && exports && !exports.nodeType
          ? exports
          : void 0;
      var freeModule =
        objectTypes[typeof module] && module && !module.nodeType
          ? module
          : void 0;
      var freeGlobal = checkGlobal(
        freeExports && freeModule && typeof global == "object" && global
      );
      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
      var thisGlobal = checkGlobal(objectTypes[typeof exports] && exports);
      var root =
        freeGlobal ||
        (freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow) ||
        freeSelf ||
        thisGlobal ||
        Function("return this")();
      function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
      }
      module.exports = root;
    },
  });

  // node_modules/lodash._baseuniq/index.js
  var require_lodash6 = __commonJS({
    "node_modules/lodash._baseuniq/index.js"(exports, module) {
      var createSet = require_lodash4();
      var root = require_lodash5();
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      function arrayIncludes(array, value) {
        return !!array.length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
          length = array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function baseIndexOf(array, value, fromIndex) {
        if (value !== value) {
          return indexOfNaN(array, fromIndex);
        }
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function cacheHas(cache, key2) {
        return cache.has(key2);
      }
      function indexOfNaN(array, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 0 : -1);
        while (fromRight ? index-- : ++index < length) {
          var other = array[index];
          if (other !== other) {
            return index;
          }
        }
        return -1;
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {}
        }
        return result;
      }
      function setToArray(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var objectProto = Object.prototype;
      var funcToString = Function.prototype.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" +
          funcToString
            .call(hasOwnProperty)
            .replace(reRegExpChar, "\\$&")
            .replace(
              /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
              "$1.*?"
            ) +
          "$"
      );
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key2) {
        return this.has(key2) && delete this.__data__[key2];
      }
      function hashGet(key2) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key2];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
      }
      function hashHas(key2) {
        var data = this.__data__;
        return nativeCreate
          ? data[key2] !== void 0
          : hasOwnProperty.call(data, key2);
      }
      function hashSet(key2, value) {
        var data = this.__data__;
        data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key2) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key2) {
        return assocIndexOf(this.__data__, key2) > -1;
      }
      function listCacheSet(key2, value) {
        var data = this.__data__,
          index = assocIndexOf(data, key2);
        if (index < 0) {
          data.push([key2, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1,
          length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          hash: new Hash(),
          map: new (Map2 || ListCache)(),
          string: new Hash(),
        };
      }
      function mapCacheDelete(key2) {
        return getMapData(this, key2)["delete"](key2);
      }
      function mapCacheGet(key2) {
        return getMapData(this, key2).get(key2);
      }
      function mapCacheHas(key2) {
        return getMapData(this, key2).has(key2);
      }
      function mapCacheSet(key2, value) {
        getMapData(this, key2).set(key2, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index = -1,
          length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function assocIndexOf(array, key2) {
        var length = array.length;
        while (length--) {
          if (eq4(array[length][0], key2)) {
            return length;
          }
        }
        return -1;
      }
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer: while (++index < length) {
          var value = array[index],
            computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }
      function getMapData(map, key2) {
        var data = map.__data__;
        return isKeyable(key2)
          ? data[typeof key2 == "string" ? "string" : "hash"]
          : data.map;
      }
      function getNative(object, key2) {
        var value = object[key2];
        return isNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" ||
          type == "number" ||
          type == "symbol" ||
          type == "boolean"
          ? value !== "__proto__"
          : value === null;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + "";
          } catch (e) {}
        }
        return "";
      }
      function eq4(value, other) {
        return value === other || (value !== value && other !== other);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isNative(value) {
        if (!isObject(value)) {
          return false;
        }
        var pattern =
          isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseUniq;
    },
  });

  // node_modules/lodash.uniqby/index.js
  var require_lodash7 = __commonJS({
    "node_modules/lodash.uniqby/index.js"(exports, module) {
      var baseIteratee = require_lodash3();
      var baseUniq = require_lodash6();
      function uniqBy(array, iteratee) {
        return array && array.length
          ? baseUniq(array, baseIteratee(iteratee))
          : [];
      }
      module.exports = uniqBy;
    },
  });

  // node_modules/combine-errors/index.js
  var require_combine_errors = __commonJS({
    "node_modules/combine-errors/index.js"(exports, module) {
      "use strict";
      var Custom = require_custom_error_instance();
      var uniq = require_lodash7();
      var MultiError = Custom("MultiError");
      module.exports = error;
      function error(errors) {
        if (!(this instanceof error)) return new error(errors);
        errors = Array.isArray(errors) ? errors : [errors];
        errors = uniq(errors, function (err) {
          return err.stack;
        });
        if (errors.length === 1) return errors[0];
        var multierror = new MultiError({
          message: errors
            .map(function (err) {
              return err.message;
            })
            .join("; "),
          errors: errors.reduce(function (errs, err) {
            return errs.concat(err.errors || err);
          }, []),
        });
        multierror.__defineGetter__("stack", function () {
          return errors
            .map(function (err) {
              return err.stack;
            })
            .join("\n\n");
        });
        multierror.__defineSetter__("stack", function (value) {
          return [value].concat(multierror.stack).join("\n\n");
        });
        return multierror;
      }
    },
  });

  // node_modules/lodash.throttle/index.js
  var require_lodash8 = __commonJS({
    "node_modules/lodash.throttle/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal =
        typeof global == "object" &&
        global &&
        global.Object === Object &&
        global;
      var freeSelf =
        typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now2 = function () {
        return root.Date.now();
      };
      function debounce(func, wait, options) {
        var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing
            ? nativeMax(toNumber(options.maxWait) || 0, wait)
            : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs,
            thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result2 = wait - timeSinceLastCall;
          return maxing
            ? nativeMin(result2, maxWait - timeSinceLastInvoke)
            : result2;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;
          return (
            lastCallTime === void 0 ||
            timeSinceLastCall >= wait ||
            timeSinceLastCall < 0 ||
            (maxing && timeSinceLastInvoke >= maxWait)
          );
        }
        function timerExpired() {
          var time = now2();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now2());
        }
        function debounced() {
          var time = now2(),
            isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function throttle2(func, wait, options) {
        var leading = true,
          trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          leading: leading,
          maxWait: wait,
          trailing: trailing,
        });
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return (
          typeof value == "symbol" ||
          (isObjectLike(value) && objectToString.call(value) == symbolTag)
        );
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other =
            typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value)
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : reIsBadHex.test(value)
          ? NAN
          : +value;
      }
      module.exports = throttle2;
    },
  });

  // node_modules/is-stream/index.js
  var require_is_stream = __commonJS({
    "node_modules/is-stream/index.js"(exports, module) {
      "use strict";
      var isStream2 = (stream) =>
        stream !== null &&
        typeof stream === "object" &&
        typeof stream.pipe === "function";
      isStream2.writable = (stream) =>
        isStream2(stream) &&
        stream.writable !== false &&
        typeof stream._write === "function" &&
        typeof stream._writableState === "object";
      isStream2.readable = (stream) =>
        isStream2(stream) &&
        stream.readable !== false &&
        typeof stream._read === "function" &&
        typeof stream._readableState === "object";
      isStream2.duplex = (stream) =>
        isStream2.writable(stream) && isStream2.readable(stream);
      isStream2.transform = (stream) =>
        isStream2.duplex(stream) && typeof stream._transform === "function";
      module.exports = isStream2;
    },
  });

  // node_modules/mime/Mime.js
  var require_Mime = __commonJS({
    "node_modules/mime/Mime.js"(exports, module) {
      "use strict";
      function Mime() {
        this._types = /* @__PURE__ */ Object.create(null);
        this._extensions = /* @__PURE__ */ Object.create(null);
        for (let i = 0; i < arguments.length; i++) {
          this.define(arguments[i]);
        }
        this.define = this.define.bind(this);
        this.getType = this.getType.bind(this);
        this.getExtension = this.getExtension.bind(this);
      }
      Mime.prototype.define = function (typeMap, force) {
        for (let type in typeMap) {
          let extensions = typeMap[type].map(function (t2) {
            return t2.toLowerCase();
          });
          type = type.toLowerCase();
          for (let i = 0; i < extensions.length; i++) {
            const ext = extensions[i];
            if (ext[0] === "*") {
              continue;
            }
            if (!force && ext in this._types) {
              throw new Error(
                'Attempt to change mapping for "' +
                  ext +
                  '" extension from "' +
                  this._types[ext] +
                  '" to "' +
                  type +
                  '". Pass `force=true` to allow this, otherwise remove "' +
                  ext +
                  '" from the list of extensions for "' +
                  type +
                  '".'
              );
            }
            this._types[ext] = type;
          }
          if (force || !this._extensions[type]) {
            const ext = extensions[0];
            this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
          }
        }
      };
      Mime.prototype.getType = function (path3) {
        path3 = String(path3);
        let last = path3.replace(/^.*[/\\]/, "").toLowerCase();
        let ext = last.replace(/^.*\./, "").toLowerCase();
        let hasPath = last.length < path3.length;
        let hasDot = ext.length < last.length - 1;
        return ((hasDot || !hasPath) && this._types[ext]) || null;
      };
      Mime.prototype.getExtension = function (type) {
        type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
        return (type && this._extensions[type.toLowerCase()]) || null;
      };
      module.exports = Mime;
    },
  });

  // node_modules/mime/types/standard.js
  var require_standard = __commonJS({
    "node_modules/mime/types/standard.js"(exports, module) {
      module.exports = {
        "application/andrew-inset": ["ez"],
        "application/applixware": ["aw"],
        "application/atom+xml": ["atom"],
        "application/atomcat+xml": ["atomcat"],
        "application/atomdeleted+xml": ["atomdeleted"],
        "application/atomsvc+xml": ["atomsvc"],
        "application/atsc-dwd+xml": ["dwd"],
        "application/atsc-held+xml": ["held"],
        "application/atsc-rsat+xml": ["rsat"],
        "application/bdoc": ["bdoc"],
        "application/calendar+xml": ["xcs"],
        "application/ccxml+xml": ["ccxml"],
        "application/cdfx+xml": ["cdfx"],
        "application/cdmi-capability": ["cdmia"],
        "application/cdmi-container": ["cdmic"],
        "application/cdmi-domain": ["cdmid"],
        "application/cdmi-object": ["cdmio"],
        "application/cdmi-queue": ["cdmiq"],
        "application/cu-seeme": ["cu"],
        "application/dash+xml": ["mpd"],
        "application/davmount+xml": ["davmount"],
        "application/docbook+xml": ["dbk"],
        "application/dssc+der": ["dssc"],
        "application/dssc+xml": ["xdssc"],
        "application/ecmascript": ["es", "ecma"],
        "application/emma+xml": ["emma"],
        "application/emotionml+xml": ["emotionml"],
        "application/epub+zip": ["epub"],
        "application/exi": ["exi"],
        "application/express": ["exp"],
        "application/fdt+xml": ["fdt"],
        "application/font-tdpfr": ["pfr"],
        "application/geo+json": ["geojson"],
        "application/gml+xml": ["gml"],
        "application/gpx+xml": ["gpx"],
        "application/gxf": ["gxf"],
        "application/gzip": ["gz"],
        "application/hjson": ["hjson"],
        "application/hyperstudio": ["stk"],
        "application/inkml+xml": ["ink", "inkml"],
        "application/ipfix": ["ipfix"],
        "application/its+xml": ["its"],
        "application/java-archive": ["jar", "war", "ear"],
        "application/java-serialized-object": ["ser"],
        "application/java-vm": ["class"],
        "application/javascript": ["js", "mjs"],
        "application/json": ["json", "map"],
        "application/json5": ["json5"],
        "application/jsonml+json": ["jsonml"],
        "application/ld+json": ["jsonld"],
        "application/lgr+xml": ["lgr"],
        "application/lost+xml": ["lostxml"],
        "application/mac-binhex40": ["hqx"],
        "application/mac-compactpro": ["cpt"],
        "application/mads+xml": ["mads"],
        "application/manifest+json": ["webmanifest"],
        "application/marc": ["mrc"],
        "application/marcxml+xml": ["mrcx"],
        "application/mathematica": ["ma", "nb", "mb"],
        "application/mathml+xml": ["mathml"],
        "application/mbox": ["mbox"],
        "application/mediaservercontrol+xml": ["mscml"],
        "application/metalink+xml": ["metalink"],
        "application/metalink4+xml": ["meta4"],
        "application/mets+xml": ["mets"],
        "application/mmt-aei+xml": ["maei"],
        "application/mmt-usd+xml": ["musd"],
        "application/mods+xml": ["mods"],
        "application/mp21": ["m21", "mp21"],
        "application/mp4": ["mp4s", "m4p"],
        "application/msword": ["doc", "dot"],
        "application/mxf": ["mxf"],
        "application/n-quads": ["nq"],
        "application/n-triples": ["nt"],
        "application/node": ["cjs"],
        "application/octet-stream": [
          "bin",
          "dms",
          "lrf",
          "mar",
          "so",
          "dist",
          "distz",
          "pkg",
          "bpk",
          "dump",
          "elc",
          "deploy",
          "exe",
          "dll",
          "deb",
          "dmg",
          "iso",
          "img",
          "msi",
          "msp",
          "msm",
          "buffer",
        ],
        "application/oda": ["oda"],
        "application/oebps-package+xml": ["opf"],
        "application/ogg": ["ogx"],
        "application/omdoc+xml": ["omdoc"],
        "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"],
        "application/oxps": ["oxps"],
        "application/p2p-overlay+xml": ["relo"],
        "application/patch-ops-error+xml": ["xer"],
        "application/pdf": ["pdf"],
        "application/pgp-encrypted": ["pgp"],
        "application/pgp-signature": ["asc", "sig"],
        "application/pics-rules": ["prf"],
        "application/pkcs10": ["p10"],
        "application/pkcs7-mime": ["p7m", "p7c"],
        "application/pkcs7-signature": ["p7s"],
        "application/pkcs8": ["p8"],
        "application/pkix-attr-cert": ["ac"],
        "application/pkix-cert": ["cer"],
        "application/pkix-crl": ["crl"],
        "application/pkix-pkipath": ["pkipath"],
        "application/pkixcmp": ["pki"],
        "application/pls+xml": ["pls"],
        "application/postscript": ["ai", "eps", "ps"],
        "application/provenance+xml": ["provx"],
        "application/pskc+xml": ["pskcxml"],
        "application/raml+yaml": ["raml"],
        "application/rdf+xml": ["rdf", "owl"],
        "application/reginfo+xml": ["rif"],
        "application/relax-ng-compact-syntax": ["rnc"],
        "application/resource-lists+xml": ["rl"],
        "application/resource-lists-diff+xml": ["rld"],
        "application/rls-services+xml": ["rs"],
        "application/route-apd+xml": ["rapd"],
        "application/route-s-tsid+xml": ["sls"],
        "application/route-usd+xml": ["rusd"],
        "application/rpki-ghostbusters": ["gbr"],
        "application/rpki-manifest": ["mft"],
        "application/rpki-roa": ["roa"],
        "application/rsd+xml": ["rsd"],
        "application/rss+xml": ["rss"],
        "application/rtf": ["rtf"],
        "application/sbml+xml": ["sbml"],
        "application/scvp-cv-request": ["scq"],
        "application/scvp-cv-response": ["scs"],
        "application/scvp-vp-request": ["spq"],
        "application/scvp-vp-response": ["spp"],
        "application/sdp": ["sdp"],
        "application/senml+xml": ["senmlx"],
        "application/sensml+xml": ["sensmlx"],
        "application/set-payment-initiation": ["setpay"],
        "application/set-registration-initiation": ["setreg"],
        "application/shf+xml": ["shf"],
        "application/sieve": ["siv", "sieve"],
        "application/smil+xml": ["smi", "smil"],
        "application/sparql-query": ["rq"],
        "application/sparql-results+xml": ["srx"],
        "application/srgs": ["gram"],
        "application/srgs+xml": ["grxml"],
        "application/sru+xml": ["sru"],
        "application/ssdl+xml": ["ssdl"],
        "application/ssml+xml": ["ssml"],
        "application/swid+xml": ["swidtag"],
        "application/tei+xml": ["tei", "teicorpus"],
        "application/thraud+xml": ["tfi"],
        "application/timestamped-data": ["tsd"],
        "application/toml": ["toml"],
        "application/trig": ["trig"],
        "application/ttml+xml": ["ttml"],
        "application/ubjson": ["ubj"],
        "application/urc-ressheet+xml": ["rsheet"],
        "application/urc-targetdesc+xml": ["td"],
        "application/voicexml+xml": ["vxml"],
        "application/wasm": ["wasm"],
        "application/widget": ["wgt"],
        "application/winhlp": ["hlp"],
        "application/wsdl+xml": ["wsdl"],
        "application/wspolicy+xml": ["wspolicy"],
        "application/xaml+xml": ["xaml"],
        "application/xcap-att+xml": ["xav"],
        "application/xcap-caps+xml": ["xca"],
        "application/xcap-diff+xml": ["xdf"],
        "application/xcap-el+xml": ["xel"],
        "application/xcap-ns+xml": ["xns"],
        "application/xenc+xml": ["xenc"],
        "application/xhtml+xml": ["xhtml", "xht"],
        "application/xliff+xml": ["xlf"],
        "application/xml": ["xml", "xsl", "xsd", "rng"],
        "application/xml-dtd": ["dtd"],
        "application/xop+xml": ["xop"],
        "application/xproc+xml": ["xpl"],
        "application/xslt+xml": ["*xsl", "xslt"],
        "application/xspf+xml": ["xspf"],
        "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"],
        "application/yang": ["yang"],
        "application/yin+xml": ["yin"],
        "application/zip": ["zip"],
        "audio/3gpp": ["*3gpp"],
        "audio/adpcm": ["adp"],
        "audio/amr": ["amr"],
        "audio/basic": ["au", "snd"],
        "audio/midi": ["mid", "midi", "kar", "rmi"],
        "audio/mobile-xmf": ["mxmf"],
        "audio/mp3": ["*mp3"],
        "audio/mp4": ["m4a", "mp4a"],
        "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"],
        "audio/ogg": ["oga", "ogg", "spx", "opus"],
        "audio/s3m": ["s3m"],
        "audio/silk": ["sil"],
        "audio/wav": ["wav"],
        "audio/wave": ["*wav"],
        "audio/webm": ["weba"],
        "audio/xm": ["xm"],
        "font/collection": ["ttc"],
        "font/otf": ["otf"],
        "font/ttf": ["ttf"],
        "font/woff": ["woff"],
        "font/woff2": ["woff2"],
        "image/aces": ["exr"],
        "image/apng": ["apng"],
        "image/avif": ["avif"],
        "image/bmp": ["bmp"],
        "image/cgm": ["cgm"],
        "image/dicom-rle": ["drle"],
        "image/emf": ["emf"],
        "image/fits": ["fits"],
        "image/g3fax": ["g3"],
        "image/gif": ["gif"],
        "image/heic": ["heic"],
        "image/heic-sequence": ["heics"],
        "image/heif": ["heif"],
        "image/heif-sequence": ["heifs"],
        "image/hej2k": ["hej2"],
        "image/hsj2": ["hsj2"],
        "image/ief": ["ief"],
        "image/jls": ["jls"],
        "image/jp2": ["jp2", "jpg2"],
        "image/jpeg": ["jpeg", "jpg", "jpe"],
        "image/jph": ["jph"],
        "image/jphc": ["jhc"],
        "image/jpm": ["jpm"],
        "image/jpx": ["jpx", "jpf"],
        "image/jxr": ["jxr"],
        "image/jxra": ["jxra"],
        "image/jxrs": ["jxrs"],
        "image/jxs": ["jxs"],
        "image/jxsc": ["jxsc"],
        "image/jxsi": ["jxsi"],
        "image/jxss": ["jxss"],
        "image/ktx": ["ktx"],
        "image/ktx2": ["ktx2"],
        "image/png": ["png"],
        "image/sgi": ["sgi"],
        "image/svg+xml": ["svg", "svgz"],
        "image/t38": ["t38"],
        "image/tiff": ["tif", "tiff"],
        "image/tiff-fx": ["tfx"],
        "image/webp": ["webp"],
        "image/wmf": ["wmf"],
        "message/disposition-notification": ["disposition-notification"],
        "message/global": ["u8msg"],
        "message/global-delivery-status": ["u8dsn"],
        "message/global-disposition-notification": ["u8mdn"],
        "message/global-headers": ["u8hdr"],
        "message/rfc822": ["eml", "mime"],
        "model/3mf": ["3mf"],
        "model/gltf+json": ["gltf"],
        "model/gltf-binary": ["glb"],
        "model/iges": ["igs", "iges"],
        "model/mesh": ["msh", "mesh", "silo"],
        "model/mtl": ["mtl"],
        "model/obj": ["obj"],
        "model/step+xml": ["stpx"],
        "model/step+zip": ["stpz"],
        "model/step-xml+zip": ["stpxz"],
        "model/stl": ["stl"],
        "model/vrml": ["wrl", "vrml"],
        "model/x3d+binary": ["*x3db", "x3dbz"],
        "model/x3d+fastinfoset": ["x3db"],
        "model/x3d+vrml": ["*x3dv", "x3dvz"],
        "model/x3d+xml": ["x3d", "x3dz"],
        "model/x3d-vrml": ["x3dv"],
        "text/cache-manifest": ["appcache", "manifest"],
        "text/calendar": ["ics", "ifb"],
        "text/coffeescript": ["coffee", "litcoffee"],
        "text/css": ["css"],
        "text/csv": ["csv"],
        "text/html": ["html", "htm", "shtml"],
        "text/jade": ["jade"],
        "text/jsx": ["jsx"],
        "text/less": ["less"],
        "text/markdown": ["markdown", "md"],
        "text/mathml": ["mml"],
        "text/mdx": ["mdx"],
        "text/n3": ["n3"],
        "text/plain": [
          "txt",
          "text",
          "conf",
          "def",
          "list",
          "log",
          "in",
          "ini",
        ],
        "text/richtext": ["rtx"],
        "text/rtf": ["*rtf"],
        "text/sgml": ["sgml", "sgm"],
        "text/shex": ["shex"],
        "text/slim": ["slim", "slm"],
        "text/spdx": ["spdx"],
        "text/stylus": ["stylus", "styl"],
        "text/tab-separated-values": ["tsv"],
        "text/troff": ["t", "tr", "roff", "man", "me", "ms"],
        "text/turtle": ["ttl"],
        "text/uri-list": ["uri", "uris", "urls"],
        "text/vcard": ["vcard"],
        "text/vtt": ["vtt"],
        "text/xml": ["*xml"],
        "text/yaml": ["yaml", "yml"],
        "video/3gpp": ["3gp", "3gpp"],
        "video/3gpp2": ["3g2"],
        "video/h261": ["h261"],
        "video/h263": ["h263"],
        "video/h264": ["h264"],
        "video/iso.segment": ["m4s"],
        "video/jpeg": ["jpgv"],
        "video/jpm": ["*jpm", "jpgm"],
        "video/mj2": ["mj2", "mjp2"],
        "video/mp2t": ["ts"],
        "video/mp4": ["mp4", "mp4v", "mpg4"],
        "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"],
        "video/ogg": ["ogv"],
        "video/quicktime": ["qt", "mov"],
        "video/webm": ["webm"],
      };
    },
  });

  // node_modules/mime/lite.js
  var require_lite = __commonJS({
    "node_modules/mime/lite.js"(exports, module) {
      "use strict";
      var Mime = require_Mime();
      module.exports = new Mime(require_standard());
    },
  });

  // node_modules/path-browserify/index.js
  var require_path_browserify = __commonJS({
    "node_modules/path-browserify/index.js"(exports, module) {
      "use strict";
      function assertPath(path3) {
        if (typeof path3 !== "string") {
          throw new TypeError(
            "Path must be a string. Received " + JSON.stringify(path3)
          );
        }
      }
      function normalizeStringPosix(path3, allowAboveRoot) {
        var res = "";
        var lastSegmentLength = 0;
        var lastSlash = -1;
        var dots = 0;
        var code;
        for (var i = 0; i <= path3.length; ++i) {
          if (i < path3.length) code = path3.charCodeAt(i);
          else if (code === 47) break;
          else code = 47;
          if (code === 47) {
            if (lastSlash === i - 1 || dots === 1) {
            } else if (lastSlash !== i - 1 && dots === 2) {
              if (
                res.length < 2 ||
                lastSegmentLength !== 2 ||
                res.charCodeAt(res.length - 1) !== 46 ||
                res.charCodeAt(res.length - 2) !== 46
              ) {
                if (res.length > 2) {
                  var lastSlashIndex = res.lastIndexOf("/");
                  if (lastSlashIndex !== res.length - 1) {
                    if (lastSlashIndex === -1) {
                      res = "";
                      lastSegmentLength = 0;
                    } else {
                      res = res.slice(0, lastSlashIndex);
                      lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                    }
                    lastSlash = i;
                    dots = 0;
                    continue;
                  }
                } else if (res.length === 2 || res.length === 1) {
                  res = "";
                  lastSegmentLength = 0;
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              }
              if (allowAboveRoot) {
                if (res.length > 0) res += "/..";
                else res = "..";
                lastSegmentLength = 2;
              }
            } else {
              if (res.length > 0) res += "/" + path3.slice(lastSlash + 1, i);
              else res = path3.slice(lastSlash + 1, i);
              lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
          } else if (code === 46 && dots !== -1) {
            ++dots;
          } else {
            dots = -1;
          }
        }
        return res;
      }
      function _format(sep, pathObject) {
        var dir = pathObject.dir || pathObject.root;
        var base2 =
          pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
        if (!dir) {
          return base2;
        }
        if (dir === pathObject.root) {
          return dir + base2;
        }
        return dir + sep + base2;
      }
      var posix = {
        resolve: function resolve2() {
          var resolvedPath = "";
          var resolvedAbsolute = false;
          var cwd;
          for (
            var i = arguments.length - 1;
            i >= -1 && !resolvedAbsolute;
            i--
          ) {
            var path3;
            if (i >= 0) path3 = arguments[i];
            else {
              if (cwd === void 0) cwd = process.cwd();
              path3 = cwd;
            }
            assertPath(path3);
            if (path3.length === 0) {
              continue;
            }
            resolvedPath = path3 + "/" + resolvedPath;
            resolvedAbsolute = path3.charCodeAt(0) === 47;
          }
          resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
          if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return "/" + resolvedPath;
            else return "/";
          } else if (resolvedPath.length > 0) {
            return resolvedPath;
          } else {
            return ".";
          }
        },
        normalize: function normalize(path3) {
          assertPath(path3);
          if (path3.length === 0) return ".";
          var isAbsolute = path3.charCodeAt(0) === 47;
          var trailingSeparator = path3.charCodeAt(path3.length - 1) === 47;
          path3 = normalizeStringPosix(path3, !isAbsolute);
          if (path3.length === 0 && !isAbsolute) path3 = ".";
          if (path3.length > 0 && trailingSeparator) path3 += "/";
          if (isAbsolute) return "/" + path3;
          return path3;
        },
        isAbsolute: function isAbsolute(path3) {
          assertPath(path3);
          return path3.length > 0 && path3.charCodeAt(0) === 47;
        },
        join: function join() {
          if (arguments.length === 0) return ".";
          var joined;
          for (var i = 0; i < arguments.length; ++i) {
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
              if (joined === void 0) joined = arg;
              else joined += "/" + arg;
            }
          }
          if (joined === void 0) return ".";
          return posix.normalize(joined);
        },
        relative: function relative(from, to) {
          assertPath(from);
          assertPath(to);
          if (from === to) return "";
          from = posix.resolve(from);
          to = posix.resolve(to);
          if (from === to) return "";
          var fromStart = 1;
          for (; fromStart < from.length; ++fromStart) {
            if (from.charCodeAt(fromStart) !== 47) break;
          }
          var fromEnd = from.length;
          var fromLen = fromEnd - fromStart;
          var toStart = 1;
          for (; toStart < to.length; ++toStart) {
            if (to.charCodeAt(toStart) !== 47) break;
          }
          var toEnd = to.length;
          var toLen = toEnd - toStart;
          var length = fromLen < toLen ? fromLen : toLen;
          var lastCommonSep = -1;
          var i = 0;
          for (; i <= length; ++i) {
            if (i === length) {
              if (toLen > length) {
                if (to.charCodeAt(toStart + i) === 47) {
                  return to.slice(toStart + i + 1);
                } else if (i === 0) {
                  return to.slice(toStart + i);
                }
              } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                  lastCommonSep = i;
                } else if (i === 0) {
                  lastCommonSep = 0;
                }
              }
              break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47) lastCommonSep = i;
          }
          var out = "";
          for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
            if (i === fromEnd || from.charCodeAt(i) === 47) {
              if (out.length === 0) out += "..";
              else out += "/..";
            }
          }
          if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
          else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47) ++toStart;
            return to.slice(toStart);
          }
        },
        _makeLong: function _makeLong(path3) {
          return path3;
        },
        dirname: function dirname(path3) {
          assertPath(path3);
          if (path3.length === 0) return ".";
          var code = path3.charCodeAt(0);
          var hasRoot = code === 47;
          var end = -1;
          var matchedSlash = true;
          for (var i = path3.length - 1; i >= 1; --i) {
            code = path3.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                end = i;
                break;
              }
            } else {
              matchedSlash = false;
            }
          }
          if (end === -1) return hasRoot ? "/" : ".";
          if (hasRoot && end === 1) return "//";
          return path3.slice(0, end);
        },
        basename: function basename(path3, ext) {
          if (ext !== void 0 && typeof ext !== "string")
            throw new TypeError('"ext" argument must be a string');
          assertPath(path3);
          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;
          if (ext !== void 0 && ext.length > 0 && ext.length <= path3.length) {
            if (ext.length === path3.length && ext === path3) return "";
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for (i = path3.length - 1; i >= 0; --i) {
              var code = path3.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else {
                if (firstNonSlashEnd === -1) {
                  matchedSlash = false;
                  firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                  if (code === ext.charCodeAt(extIdx)) {
                    if (--extIdx === -1) {
                      end = i;
                    }
                  } else {
                    extIdx = -1;
                    end = firstNonSlashEnd;
                  }
                }
              }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path3.length;
            return path3.slice(start, end);
          } else {
            for (i = path3.length - 1; i >= 0; --i) {
              if (path3.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1) return "";
            return path3.slice(start, end);
          }
        },
        extname: function extname(path3) {
          assertPath(path3);
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          var preDotState = 0;
          for (var i = path3.length - 1; i >= 0; --i) {
            var code = path3.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46) {
              if (startDot === -1) startDot = i;
              else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) {
              preDotState = -1;
            }
          }
          if (
            startDot === -1 ||
            end === -1 ||
            preDotState === 0 ||
            (preDotState === 1 &&
              startDot === end - 1 &&
              startDot === startPart + 1)
          ) {
            return "";
          }
          return path3.slice(startDot, end);
        },
        format: function format(pathObject) {
          if (pathObject === null || typeof pathObject !== "object") {
            throw new TypeError(
              'The "pathObject" argument must be of type Object. Received type ' +
                typeof pathObject
            );
          }
          return _format("/", pathObject);
        },
        parse: function parse6(path3) {
          assertPath(path3);
          var ret = { root: "", dir: "", base: "", ext: "", name: "" };
          if (path3.length === 0) return ret;
          var code = path3.charCodeAt(0);
          var isAbsolute = code === 47;
          var start;
          if (isAbsolute) {
            ret.root = "/";
            start = 1;
          } else {
            start = 0;
          }
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          var i = path3.length - 1;
          var preDotState = 0;
          for (; i >= start; --i) {
            code = path3.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46) {
              if (startDot === -1) startDot = i;
              else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) {
              preDotState = -1;
            }
          }
          if (
            startDot === -1 ||
            end === -1 ||
            preDotState === 0 ||
            (preDotState === 1 &&
              startDot === end - 1 &&
              startDot === startPart + 1)
          ) {
            if (end !== -1) {
              if (startPart === 0 && isAbsolute)
                ret.base = ret.name = path3.slice(1, end);
              else ret.base = ret.name = path3.slice(startPart, end);
            }
          } else {
            if (startPart === 0 && isAbsolute) {
              ret.name = path3.slice(1, startDot);
              ret.base = path3.slice(1, end);
            } else {
              ret.name = path3.slice(startPart, startDot);
              ret.base = path3.slice(startPart, end);
            }
            ret.ext = path3.slice(startDot, end);
          }
          if (startPart > 0) ret.dir = path3.slice(0, startPart - 1);
          else if (isAbsolute) ret.dir = "/";
          return ret;
        },
        sep: "/",
        delimiter: ":",
        win32: null,
        posix: null,
      };
      posix.posix = posix;
      module.exports = posix;
    },
  });

  // node_modules/url-join/lib/url-join.js
  var require_url_join = __commonJS({
    "node_modules/url-join/lib/url-join.js"(exports, module) {
      (function (name2, context, definition) {
        if (typeof module !== "undefined" && module.exports)
          module.exports = definition();
        else if (typeof define === "function" && define.amd) define(definition);
        else context[name2] = definition();
      })("urljoin", exports, function () {
        function normalize(strArray) {
          var resultArray = [];
          if (strArray.length === 0) {
            return "";
          }
          if (typeof strArray[0] !== "string") {
            throw new TypeError(
              "Url must be a string. Received " + strArray[0]
            );
          }
          if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
            var first = strArray.shift();
            strArray[0] = first + strArray[0];
          }
          if (strArray[0].match(/^file:\/\/\//)) {
            strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1:///");
          } else {
            strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1://");
          }
          for (var i = 0; i < strArray.length; i++) {
            var component = strArray[i];
            if (typeof component !== "string") {
              throw new TypeError(
                "Url must be a string. Received " + component
              );
            }
            if (component === "") {
              continue;
            }
            if (i > 0) {
              component = component.replace(/^[\/]+/, "");
            }
            if (i < strArray.length - 1) {
              component = component.replace(/[\/]+$/, "");
            } else {
              component = component.replace(/[\/]+$/, "/");
            }
            resultArray.push(component);
          }
          var str = resultArray.join("/");
          str = str.replace(/\/(\?|&|#[^!])/g, "$1");
          var parts = str.split("?");
          str = parts.shift() + (parts.length > 0 ? "?" : "") + parts.join("&");
          return str;
        }
        return function () {
          var input;
          if (typeof arguments[0] === "object") {
            input = arguments[0];
          } else {
            input = [].slice.call(arguments);
          }
          return normalize(input);
        };
      });
    },
  });

  // node_modules/sjcl/sjcl.js
  var require_sjcl = __commonJS({
    "node_modules/sjcl/sjcl.js"(exports, module) {
      "use strict";
      var sjcl2 = {
        cipher: {},
        hash: {},
        keyexchange: {},
        mode: {},
        misc: {},
        codec: {},
        exception: {
          corrupt: function (a2) {
            this.toString = function () {
              return "CORRUPT: " + this.message;
            };
            this.message = a2;
          },
          invalid: function (a2) {
            this.toString = function () {
              return "INVALID: " + this.message;
            };
            this.message = a2;
          },
          bug: function (a2) {
            this.toString = function () {
              return "BUG: " + this.message;
            };
            this.message = a2;
          },
          notReady: function (a2) {
            this.toString = function () {
              return "NOT READY: " + this.message;
            };
            this.message = a2;
          },
        },
      };
      sjcl2.cipher.aes = function (a2) {
        this.s[0][0][0] || this.O();
        var b2,
          c2,
          d2,
          e,
          f2 = this.s[0][4],
          g2 = this.s[1];
        b2 = a2.length;
        var h2 = 1;
        if (b2 !== 4 && b2 !== 6 && b2 !== 8)
          throw new sjcl2.exception.invalid("invalid aes key size");
        this.b = [(d2 = a2.slice(0)), (e = [])];
        for (a2 = b2; a2 < 4 * b2 + 28; a2++) {
          c2 = d2[a2 - 1];
          if (a2 % b2 === 0 || (b2 === 8 && a2 % b2 === 4))
            (c2 =
              (f2[c2 >>> 24] << 24) ^
              (f2[(c2 >> 16) & 255] << 16) ^
              (f2[(c2 >> 8) & 255] << 8) ^
              f2[c2 & 255]),
              a2 % b2 === 0 &&
                ((c2 = (c2 << 8) ^ (c2 >>> 24) ^ (h2 << 24)),
                (h2 = (h2 << 1) ^ (283 * (h2 >> 7))));
          d2[a2] = d2[a2 - b2] ^ c2;
        }
        for (b2 = 0; a2; b2++, a2--)
          (c2 = d2[b2 & 3 ? a2 : a2 - 4]),
            (e[b2] =
              4 >= a2 || 4 > b2
                ? c2
                : g2[0][f2[c2 >>> 24]] ^
                  g2[1][f2[(c2 >> 16) & 255]] ^
                  g2[2][f2[(c2 >> 8) & 255]] ^
                  g2[3][f2[c2 & 255]]);
      };
      sjcl2.cipher.aes.prototype = {
        encrypt: function (a2) {
          return t2(this, a2, 0);
        },
        decrypt: function (a2) {
          return t2(this, a2, 1);
        },
        s: [
          [[], [], [], [], []],
          [[], [], [], [], []],
        ],
        O: function () {
          var a2 = this.s[0],
            b2 = this.s[1],
            c2 = a2[4],
            d2 = b2[4],
            e,
            f2,
            g2,
            h2 = [],
            k2 = [],
            l2,
            n,
            m2,
            p2;
          for (e = 0; 256 > e; e++)
            k2[(h2[e] = (e << 1) ^ (283 * (e >> 7))) ^ e] = e;
          for (f2 = g2 = 0; !c2[f2]; f2 ^= l2 || 1, g2 = k2[g2] || 1)
            for (
              m2 = g2 ^ (g2 << 1) ^ (g2 << 2) ^ (g2 << 3) ^ (g2 << 4),
                m2 = (m2 >> 8) ^ (m2 & 255) ^ 99,
                c2[f2] = m2,
                d2[m2] = f2,
                n = h2[(e = h2[(l2 = h2[f2])])],
                p2 =
                  (16843009 * n) ^ (65537 * e) ^ (257 * l2) ^ (16843008 * f2),
                n = (257 * h2[m2]) ^ (16843008 * m2),
                e = 0;
              4 > e;
              e++
            )
              (a2[e][f2] = n = (n << 24) ^ (n >>> 8)),
                (b2[e][m2] = p2 = (p2 << 24) ^ (p2 >>> 8));
          for (e = 0; 5 > e; e++)
            (a2[e] = a2[e].slice(0)), (b2[e] = b2[e].slice(0));
        },
      };
      function t2(a2, b2, c2) {
        if (b2.length !== 4)
          throw new sjcl2.exception.invalid("invalid aes block size");
        var d2 = a2.b[c2],
          e = b2[0] ^ d2[0],
          f2 = b2[c2 ? 3 : 1] ^ d2[1],
          g2 = b2[2] ^ d2[2];
        b2 = b2[c2 ? 1 : 3] ^ d2[3];
        var h2,
          k2,
          l2,
          n = d2.length / 4 - 2,
          m2,
          p2 = 4,
          r = [0, 0, 0, 0];
        h2 = a2.s[c2];
        a2 = h2[0];
        var q2 = h2[1],
          v2 = h2[2],
          w2 = h2[3],
          x2 = h2[4];
        for (m2 = 0; m2 < n; m2++)
          (h2 =
            a2[e >>> 24] ^
            q2[(f2 >> 16) & 255] ^
            v2[(g2 >> 8) & 255] ^
            w2[b2 & 255] ^
            d2[p2]),
            (k2 =
              a2[f2 >>> 24] ^
              q2[(g2 >> 16) & 255] ^
              v2[(b2 >> 8) & 255] ^
              w2[e & 255] ^
              d2[p2 + 1]),
            (l2 =
              a2[g2 >>> 24] ^
              q2[(b2 >> 16) & 255] ^
              v2[(e >> 8) & 255] ^
              w2[f2 & 255] ^
              d2[p2 + 2]),
            (b2 =
              a2[b2 >>> 24] ^
              q2[(e >> 16) & 255] ^
              v2[(f2 >> 8) & 255] ^
              w2[g2 & 255] ^
              d2[p2 + 3]),
            (p2 += 4),
            (e = h2),
            (f2 = k2),
            (g2 = l2);
        for (m2 = 0; 4 > m2; m2++)
          (r[c2 ? 3 & -m2 : m2] =
            (x2[e >>> 24] << 24) ^
            (x2[(f2 >> 16) & 255] << 16) ^
            (x2[(g2 >> 8) & 255] << 8) ^
            x2[b2 & 255] ^
            d2[p2++]),
            (h2 = e),
            (e = f2),
            (f2 = g2),
            (g2 = b2),
            (b2 = h2);
        return r;
      }
      sjcl2.bitArray = {
        bitSlice: function (a2, b2, c2) {
          a2 = sjcl2.bitArray.$(a2.slice(b2 / 32), 32 - (b2 & 31)).slice(1);
          return c2 === void 0 ? a2 : sjcl2.bitArray.clamp(a2, c2 - b2);
        },
        extract: function (a2, b2, c2) {
          var d2 = Math.floor((-b2 - c2) & 31);
          return (
            (((b2 + c2 - 1) ^ b2) & -32
              ? (a2[(b2 / 32) | 0] << (32 - d2)) ^
                (a2[(b2 / 32 + 1) | 0] >>> d2)
              : a2[(b2 / 32) | 0] >>> d2) &
            ((1 << c2) - 1)
          );
        },
        concat: function (a2, b2) {
          if (a2.length === 0 || b2.length === 0) return a2.concat(b2);
          var c2 = a2[a2.length - 1],
            d2 = sjcl2.bitArray.getPartial(c2);
          return d2 === 32
            ? a2.concat(b2)
            : sjcl2.bitArray.$(b2, d2, c2 | 0, a2.slice(0, a2.length - 1));
        },
        bitLength: function (a2) {
          var b2 = a2.length;
          return b2 === 0
            ? 0
            : 32 * (b2 - 1) + sjcl2.bitArray.getPartial(a2[b2 - 1]);
        },
        clamp: function (a2, b2) {
          if (32 * a2.length < b2) return a2;
          a2 = a2.slice(0, Math.ceil(b2 / 32));
          var c2 = a2.length;
          b2 = b2 & 31;
          0 < c2 &&
            b2 &&
            (a2[c2 - 1] = sjcl2.bitArray.partial(
              b2,
              a2[c2 - 1] & (2147483648 >> (b2 - 1)),
              1
            ));
          return a2;
        },
        partial: function (a2, b2, c2) {
          return a2 === 32
            ? b2
            : (c2 ? b2 | 0 : b2 << (32 - a2)) + 1099511627776 * a2;
        },
        getPartial: function (a2) {
          return Math.round(a2 / 1099511627776) || 32;
        },
        equal: function (a2, b2) {
          if (sjcl2.bitArray.bitLength(a2) !== sjcl2.bitArray.bitLength(b2))
            return false;
          var c2 = 0,
            d2;
          for (d2 = 0; d2 < a2.length; d2++) c2 |= a2[d2] ^ b2[d2];
          return c2 === 0;
        },
        $: function (a2, b2, c2, d2) {
          var e;
          e = 0;
          for (d2 === void 0 && (d2 = []); 32 <= b2; b2 -= 32)
            d2.push(c2), (c2 = 0);
          if (b2 === 0) return d2.concat(a2);
          for (e = 0; e < a2.length; e++)
            d2.push(c2 | (a2[e] >>> b2)), (c2 = a2[e] << (32 - b2));
          e = a2.length ? a2[a2.length - 1] : 0;
          a2 = sjcl2.bitArray.getPartial(e);
          d2.push(
            sjcl2.bitArray.partial(
              (b2 + a2) & 31,
              32 < b2 + a2 ? c2 : d2.pop(),
              1
            )
          );
          return d2;
        },
        i: function (a2, b2) {
          return [a2[0] ^ b2[0], a2[1] ^ b2[1], a2[2] ^ b2[2], a2[3] ^ b2[3]];
        },
        byteswapM: function (a2) {
          var b2, c2;
          for (b2 = 0; b2 < a2.length; ++b2)
            (c2 = a2[b2]),
              (a2[b2] =
                (c2 >>> 24) |
                ((c2 >>> 8) & 65280) |
                ((c2 & 65280) << 8) |
                (c2 << 24));
          return a2;
        },
      };
      sjcl2.codec.utf8String = {
        fromBits: function (a2) {
          var b2 = "",
            c2 = sjcl2.bitArray.bitLength(a2),
            d2,
            e;
          for (d2 = 0; d2 < c2 / 8; d2++)
            (d2 & 3) === 0 && (e = a2[d2 / 4]),
              (b2 += String.fromCharCode(((e >>> 8) >>> 8) >>> 8)),
              (e <<= 8);
          return decodeURIComponent(escape(b2));
        },
        toBits: function (a2) {
          a2 = unescape(encodeURIComponent(a2));
          var b2 = [],
            c2,
            d2 = 0;
          for (c2 = 0; c2 < a2.length; c2++)
            (d2 = (d2 << 8) | a2.charCodeAt(c2)),
              (c2 & 3) === 3 && (b2.push(d2), (d2 = 0));
          c2 & 3 && b2.push(sjcl2.bitArray.partial(8 * (c2 & 3), d2));
          return b2;
        },
      };
      sjcl2.codec.hex = {
        fromBits: function (a2) {
          var b2 = "",
            c2;
          for (c2 = 0; c2 < a2.length; c2++)
            b2 += ((a2[c2] | 0) + 263882790666240).toString(16).substr(4);
          return b2.substr(0, sjcl2.bitArray.bitLength(a2) / 4);
        },
        toBits: function (a2) {
          var b2,
            c2 = [],
            d2;
          a2 = a2.replace(/\s|0x/g, "");
          d2 = a2.length;
          a2 = a2 + "00000000";
          for (b2 = 0; b2 < a2.length; b2 += 8)
            c2.push(parseInt(a2.substr(b2, 8), 16) ^ 0);
          return sjcl2.bitArray.clamp(c2, 4 * d2);
        },
      };
      sjcl2.codec.base32 = {
        B: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        X: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
        BITS: 32,
        BASE: 5,
        REMAINING: 27,
        fromBits: function (a2, b2, c2) {
          var d2 = sjcl2.codec.base32.BASE,
            e = sjcl2.codec.base32.REMAINING,
            f2 = "",
            g2 = 0,
            h2 = sjcl2.codec.base32.B,
            k2 = 0,
            l2 = sjcl2.bitArray.bitLength(a2);
          c2 && (h2 = sjcl2.codec.base32.X);
          for (c2 = 0; f2.length * d2 < l2; )
            (f2 += h2.charAt((k2 ^ (a2[c2] >>> g2)) >>> e)),
              g2 < d2
                ? ((k2 = a2[c2] << (d2 - g2)), (g2 += e), c2++)
                : ((k2 <<= d2), (g2 -= d2));
          for (; f2.length & 7 && !b2; ) f2 += "=";
          return f2;
        },
        toBits: function (a2, b2) {
          a2 = a2.replace(/\s|=/g, "").toUpperCase();
          var c2 = sjcl2.codec.base32.BITS,
            d2 = sjcl2.codec.base32.BASE,
            e = sjcl2.codec.base32.REMAINING,
            f2 = [],
            g2,
            h2 = 0,
            k2 = sjcl2.codec.base32.B,
            l2 = 0,
            n,
            m2 = "base32";
          b2 && ((k2 = sjcl2.codec.base32.X), (m2 = "base32hex"));
          for (g2 = 0; g2 < a2.length; g2++) {
            n = k2.indexOf(a2.charAt(g2));
            if (0 > n) {
              if (!b2)
                try {
                  return sjcl2.codec.base32hex.toBits(a2);
                } catch (p2) {}
              throw new sjcl2.exception.invalid("this isn't " + m2 + "!");
            }
            h2 > e
              ? ((h2 -= e), f2.push(l2 ^ (n >>> h2)), (l2 = n << (c2 - h2)))
              : ((h2 += d2), (l2 ^= n << (c2 - h2)));
          }
          h2 & 56 && f2.push(sjcl2.bitArray.partial(h2 & 56, l2, 1));
          return f2;
        },
      };
      sjcl2.codec.base32hex = {
        fromBits: function (a2, b2) {
          return sjcl2.codec.base32.fromBits(a2, b2, 1);
        },
        toBits: function (a2) {
          return sjcl2.codec.base32.toBits(a2, 1);
        },
      };
      sjcl2.codec.base64 = {
        B: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        fromBits: function (a2, b2, c2) {
          var d2 = "",
            e = 0,
            f2 = sjcl2.codec.base64.B,
            g2 = 0,
            h2 = sjcl2.bitArray.bitLength(a2);
          c2 && (f2 = f2.substr(0, 62) + "-_");
          for (c2 = 0; 6 * d2.length < h2; )
            (d2 += f2.charAt((g2 ^ (a2[c2] >>> e)) >>> 26)),
              6 > e
                ? ((g2 = a2[c2] << (6 - e)), (e += 26), c2++)
                : ((g2 <<= 6), (e -= 6));
          for (; d2.length & 3 && !b2; ) d2 += "=";
          return d2;
        },
        toBits: function (a2, b2) {
          a2 = a2.replace(/\s|=/g, "");
          var c2 = [],
            d2,
            e = 0,
            f2 = sjcl2.codec.base64.B,
            g2 = 0,
            h2;
          b2 && (f2 = f2.substr(0, 62) + "-_");
          for (d2 = 0; d2 < a2.length; d2++) {
            h2 = f2.indexOf(a2.charAt(d2));
            if (0 > h2) throw new sjcl2.exception.invalid("this isn't base64!");
            26 < e
              ? ((e -= 26), c2.push(g2 ^ (h2 >>> e)), (g2 = h2 << (32 - e)))
              : ((e += 6), (g2 ^= h2 << (32 - e)));
          }
          e & 56 && c2.push(sjcl2.bitArray.partial(e & 56, g2, 1));
          return c2;
        },
      };
      sjcl2.codec.base64url = {
        fromBits: function (a2) {
          return sjcl2.codec.base64.fromBits(a2, 1, 1);
        },
        toBits: function (a2) {
          return sjcl2.codec.base64.toBits(a2, 1);
        },
      };
      sjcl2.hash.sha256 = function (a2) {
        this.b[0] || this.O();
        a2
          ? ((this.F = a2.F.slice(0)),
            (this.A = a2.A.slice(0)),
            (this.l = a2.l))
          : this.reset();
      };
      sjcl2.hash.sha256.hash = function (a2) {
        return new sjcl2.hash.sha256().update(a2).finalize();
      };
      sjcl2.hash.sha256.prototype = {
        blockSize: 512,
        reset: function () {
          this.F = this.Y.slice(0);
          this.A = [];
          this.l = 0;
          return this;
        },
        update: function (a2) {
          typeof a2 === "string" && (a2 = sjcl2.codec.utf8String.toBits(a2));
          var b2,
            c2 = (this.A = sjcl2.bitArray.concat(this.A, a2));
          b2 = this.l;
          a2 = this.l = b2 + sjcl2.bitArray.bitLength(a2);
          if (9007199254740991 < a2)
            throw new sjcl2.exception.invalid(
              "Cannot hash more than 2^53 - 1 bits"
            );
          if (typeof Uint32Array !== "undefined") {
            var d2 = new Uint32Array(c2),
              e = 0;
            for (b2 = 512 + b2 - ((512 + b2) & 511); b2 <= a2; b2 += 512)
              u2(this, d2.subarray(16 * e, 16 * (e + 1))), (e += 1);
            c2.splice(0, 16 * e);
          } else
            for (b2 = 512 + b2 - ((512 + b2) & 511); b2 <= a2; b2 += 512)
              u2(this, c2.splice(0, 16));
          return this;
        },
        finalize: function () {
          var a2,
            b2 = this.A,
            c2 = this.F,
            b2 = sjcl2.bitArray.concat(b2, [sjcl2.bitArray.partial(1, 1)]);
          for (a2 = b2.length + 2; a2 & 15; a2++) b2.push(0);
          b2.push(Math.floor(this.l / 4294967296));
          for (b2.push(this.l | 0); b2.length; ) u2(this, b2.splice(0, 16));
          this.reset();
          return c2;
        },
        Y: [],
        b: [],
        O: function () {
          function a2(a3) {
            return (4294967296 * (a3 - Math.floor(a3))) | 0;
          }
          for (var b2 = 0, c2 = 2, d2, e; 64 > b2; c2++) {
            e = true;
            for (d2 = 2; d2 * d2 <= c2; d2++)
              if (c2 % d2 === 0) {
                e = false;
                break;
              }
            e &&
              (8 > b2 && (this.Y[b2] = a2(Math.pow(c2, 0.5))),
              (this.b[b2] = a2(Math.pow(c2, 1 / 3))),
              b2++);
          }
        },
      };
      function u2(a2, b2) {
        var c2,
          d2,
          e,
          f2 = a2.F,
          g2 = a2.b,
          h2 = f2[0],
          k2 = f2[1],
          l2 = f2[2],
          n = f2[3],
          m2 = f2[4],
          p2 = f2[5],
          r = f2[6],
          q2 = f2[7];
        for (c2 = 0; 64 > c2; c2++)
          16 > c2
            ? (d2 = b2[c2])
            : ((d2 = b2[(c2 + 1) & 15]),
              (e = b2[(c2 + 14) & 15]),
              (d2 = b2[c2 & 15] =
                (((d2 >>> 7) ^
                  (d2 >>> 18) ^
                  (d2 >>> 3) ^
                  (d2 << 25) ^
                  (d2 << 14)) +
                  ((e >>> 17) ^
                    (e >>> 19) ^
                    (e >>> 10) ^
                    (e << 15) ^
                    (e << 13)) +
                  b2[c2 & 15] +
                  b2[(c2 + 9) & 15]) |
                0)),
            (d2 =
              d2 +
              q2 +
              ((m2 >>> 6) ^
                (m2 >>> 11) ^
                (m2 >>> 25) ^
                (m2 << 26) ^
                (m2 << 21) ^
                (m2 << 7)) +
              (r ^ (m2 & (p2 ^ r))) +
              g2[c2]),
            (q2 = r),
            (r = p2),
            (p2 = m2),
            (m2 = (n + d2) | 0),
            (n = l2),
            (l2 = k2),
            (k2 = h2),
            (h2 =
              (d2 +
                ((k2 & l2) ^ (n & (k2 ^ l2))) +
                ((k2 >>> 2) ^
                  (k2 >>> 13) ^
                  (k2 >>> 22) ^
                  (k2 << 30) ^
                  (k2 << 19) ^
                  (k2 << 10))) |
              0);
        f2[0] = (f2[0] + h2) | 0;
        f2[1] = (f2[1] + k2) | 0;
        f2[2] = (f2[2] + l2) | 0;
        f2[3] = (f2[3] + n) | 0;
        f2[4] = (f2[4] + m2) | 0;
        f2[5] = (f2[5] + p2) | 0;
        f2[6] = (f2[6] + r) | 0;
        f2[7] = (f2[7] + q2) | 0;
      }
      sjcl2.mode.ccm = {
        name: "ccm",
        G: [],
        listenProgress: function (a2) {
          sjcl2.mode.ccm.G.push(a2);
        },
        unListenProgress: function (a2) {
          a2 = sjcl2.mode.ccm.G.indexOf(a2);
          -1 < a2 && sjcl2.mode.ccm.G.splice(a2, 1);
        },
        fa: function (a2) {
          var b2 = sjcl2.mode.ccm.G.slice(),
            c2;
          for (c2 = 0; c2 < b2.length; c2 += 1) b2[c2](a2);
        },
        encrypt: function (a2, b2, c2, d2, e) {
          var f2,
            g2 = b2.slice(0),
            h2 = sjcl2.bitArray,
            k2 = h2.bitLength(c2) / 8,
            l2 = h2.bitLength(g2) / 8;
          e = e || 64;
          d2 = d2 || [];
          if (7 > k2)
            throw new sjcl2.exception.invalid(
              "ccm: iv must be at least 7 bytes"
            );
          for (f2 = 2; 4 > f2 && l2 >>> (8 * f2); f2++);
          f2 < 15 - k2 && (f2 = 15 - k2);
          c2 = h2.clamp(c2, 8 * (15 - f2));
          b2 = sjcl2.mode.ccm.V(a2, b2, c2, d2, e, f2);
          g2 = sjcl2.mode.ccm.C(a2, g2, c2, b2, e, f2);
          return h2.concat(g2.data, g2.tag);
        },
        decrypt: function (a2, b2, c2, d2, e) {
          e = e || 64;
          d2 = d2 || [];
          var f2 = sjcl2.bitArray,
            g2 = f2.bitLength(c2) / 8,
            h2 = f2.bitLength(b2),
            k2 = f2.clamp(b2, h2 - e),
            l2 = f2.bitSlice(b2, h2 - e),
            h2 = (h2 - e) / 8;
          if (7 > g2)
            throw new sjcl2.exception.invalid(
              "ccm: iv must be at least 7 bytes"
            );
          for (b2 = 2; 4 > b2 && h2 >>> (8 * b2); b2++);
          b2 < 15 - g2 && (b2 = 15 - g2);
          c2 = f2.clamp(c2, 8 * (15 - b2));
          k2 = sjcl2.mode.ccm.C(a2, k2, c2, l2, e, b2);
          a2 = sjcl2.mode.ccm.V(a2, k2.data, c2, d2, e, b2);
          if (!f2.equal(k2.tag, a2))
            throw new sjcl2.exception.corrupt("ccm: tag doesn't match");
          return k2.data;
        },
        na: function (a2, b2, c2, d2, e, f2) {
          var g2 = [],
            h2 = sjcl2.bitArray,
            k2 = h2.i;
          d2 = [
            h2.partial(8, (b2.length ? 64 : 0) | ((d2 - 2) << 2) | (f2 - 1)),
          ];
          d2 = h2.concat(d2, c2);
          d2[3] |= e;
          d2 = a2.encrypt(d2);
          if (b2.length)
            for (
              c2 = h2.bitLength(b2) / 8,
                65279 >= c2
                  ? (g2 = [h2.partial(16, c2)])
                  : 4294967295 >= c2 &&
                    (g2 = h2.concat([h2.partial(16, 65534)], [c2])),
                g2 = h2.concat(g2, b2),
                b2 = 0;
              b2 < g2.length;
              b2 += 4
            )
              d2 = a2.encrypt(k2(d2, g2.slice(b2, b2 + 4).concat([0, 0, 0])));
          return d2;
        },
        V: function (a2, b2, c2, d2, e, f2) {
          var g2 = sjcl2.bitArray,
            h2 = g2.i;
          e /= 8;
          if (e % 2 || 4 > e || 16 < e)
            throw new sjcl2.exception.invalid("ccm: invalid tag length");
          if (4294967295 < d2.length || 4294967295 < b2.length)
            throw new sjcl2.exception.bug(
              "ccm: can't deal with 4GiB or more data"
            );
          c2 = sjcl2.mode.ccm.na(a2, d2, c2, e, g2.bitLength(b2) / 8, f2);
          for (d2 = 0; d2 < b2.length; d2 += 4)
            c2 = a2.encrypt(h2(c2, b2.slice(d2, d2 + 4).concat([0, 0, 0])));
          return g2.clamp(c2, 8 * e);
        },
        C: function (a2, b2, c2, d2, e, f2) {
          var g2,
            h2 = sjcl2.bitArray;
          g2 = h2.i;
          var k2 = b2.length,
            l2 = h2.bitLength(b2),
            n = k2 / 50,
            m2 = n;
          c2 = h2
            .concat([h2.partial(8, f2 - 1)], c2)
            .concat([0, 0, 0])
            .slice(0, 4);
          d2 = h2.bitSlice(g2(d2, a2.encrypt(c2)), 0, e);
          if (!k2) return { tag: d2, data: [] };
          for (g2 = 0; g2 < k2; g2 += 4)
            g2 > n && (sjcl2.mode.ccm.fa(g2 / k2), (n += m2)),
              c2[3]++,
              (e = a2.encrypt(c2)),
              (b2[g2] ^= e[0]),
              (b2[g2 + 1] ^= e[1]),
              (b2[g2 + 2] ^= e[2]),
              (b2[g2 + 3] ^= e[3]);
          return { tag: d2, data: h2.clamp(b2, l2) };
        },
      };
      sjcl2.mode.ocb2 = {
        name: "ocb2",
        encrypt: function (a2, b2, c2, d2, e, f2) {
          if (sjcl2.bitArray.bitLength(c2) !== 128)
            throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
          var g2,
            h2 = sjcl2.mode.ocb2.S,
            k2 = sjcl2.bitArray,
            l2 = k2.i,
            n = [0, 0, 0, 0];
          c2 = h2(a2.encrypt(c2));
          var m2,
            p2 = [];
          d2 = d2 || [];
          e = e || 64;
          for (g2 = 0; g2 + 4 < b2.length; g2 += 4)
            (m2 = b2.slice(g2, g2 + 4)),
              (n = l2(n, m2)),
              (p2 = p2.concat(l2(c2, a2.encrypt(l2(c2, m2))))),
              (c2 = h2(c2));
          m2 = b2.slice(g2);
          b2 = k2.bitLength(m2);
          g2 = a2.encrypt(l2(c2, [0, 0, 0, b2]));
          m2 = k2.clamp(l2(m2.concat([0, 0, 0]), g2), b2);
          n = l2(n, l2(m2.concat([0, 0, 0]), g2));
          n = a2.encrypt(l2(n, l2(c2, h2(c2))));
          d2.length && (n = l2(n, f2 ? d2 : sjcl2.mode.ocb2.pmac(a2, d2)));
          return p2.concat(k2.concat(m2, k2.clamp(n, e)));
        },
        decrypt: function (a2, b2, c2, d2, e, f2) {
          if (sjcl2.bitArray.bitLength(c2) !== 128)
            throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
          e = e || 64;
          var g2 = sjcl2.mode.ocb2.S,
            h2 = sjcl2.bitArray,
            k2 = h2.i,
            l2 = [0, 0, 0, 0],
            n = g2(a2.encrypt(c2)),
            m2,
            p2,
            r = sjcl2.bitArray.bitLength(b2) - e,
            q2 = [];
          d2 = d2 || [];
          for (c2 = 0; c2 + 4 < r / 32; c2 += 4)
            (m2 = k2(n, a2.decrypt(k2(n, b2.slice(c2, c2 + 4))))),
              (l2 = k2(l2, m2)),
              (q2 = q2.concat(m2)),
              (n = g2(n));
          p2 = r - 32 * c2;
          m2 = a2.encrypt(k2(n, [0, 0, 0, p2]));
          m2 = k2(m2, h2.clamp(b2.slice(c2), p2).concat([0, 0, 0]));
          l2 = k2(l2, m2);
          l2 = a2.encrypt(k2(l2, k2(n, g2(n))));
          d2.length && (l2 = k2(l2, f2 ? d2 : sjcl2.mode.ocb2.pmac(a2, d2)));
          if (!h2.equal(h2.clamp(l2, e), h2.bitSlice(b2, r)))
            throw new sjcl2.exception.corrupt("ocb: tag doesn't match");
          return q2.concat(h2.clamp(m2, p2));
        },
        pmac: function (a2, b2) {
          var c2,
            d2 = sjcl2.mode.ocb2.S,
            e = sjcl2.bitArray,
            f2 = e.i,
            g2 = [0, 0, 0, 0],
            h2 = a2.encrypt([0, 0, 0, 0]),
            h2 = f2(h2, d2(d2(h2)));
          for (c2 = 0; c2 + 4 < b2.length; c2 += 4)
            (h2 = d2(h2)),
              (g2 = f2(g2, a2.encrypt(f2(h2, b2.slice(c2, c2 + 4)))));
          c2 = b2.slice(c2);
          128 > e.bitLength(c2) &&
            ((h2 = f2(h2, d2(h2))),
            (c2 = e.concat(c2, [-2147483648, 0, 0, 0])));
          g2 = f2(g2, c2);
          return a2.encrypt(f2(d2(f2(h2, d2(h2))), g2));
        },
        S: function (a2) {
          return [
            (a2[0] << 1) ^ (a2[1] >>> 31),
            (a2[1] << 1) ^ (a2[2] >>> 31),
            (a2[2] << 1) ^ (a2[3] >>> 31),
            (a2[3] << 1) ^ (135 * (a2[0] >>> 31)),
          ];
        },
      };
      sjcl2.mode.gcm = {
        name: "gcm",
        encrypt: function (a2, b2, c2, d2, e) {
          var f2 = b2.slice(0);
          b2 = sjcl2.bitArray;
          d2 = d2 || [];
          a2 = sjcl2.mode.gcm.C(true, a2, f2, d2, c2, e || 128);
          return b2.concat(a2.data, a2.tag);
        },
        decrypt: function (a2, b2, c2, d2, e) {
          var f2 = b2.slice(0),
            g2 = sjcl2.bitArray,
            h2 = g2.bitLength(f2);
          e = e || 128;
          d2 = d2 || [];
          e <= h2
            ? ((b2 = g2.bitSlice(f2, h2 - e)),
              (f2 = g2.bitSlice(f2, 0, h2 - e)))
            : ((b2 = f2), (f2 = []));
          a2 = sjcl2.mode.gcm.C(false, a2, f2, d2, c2, e);
          if (!g2.equal(a2.tag, b2))
            throw new sjcl2.exception.corrupt("gcm: tag doesn't match");
          return a2.data;
        },
        ka: function (a2, b2) {
          var c2,
            d2,
            e,
            f2,
            g2,
            h2 = sjcl2.bitArray.i;
          e = [0, 0, 0, 0];
          f2 = b2.slice(0);
          for (c2 = 0; 128 > c2; c2++) {
            (d2 = (a2[Math.floor(c2 / 32)] & (1 << (31 - (c2 % 32)))) !== 0) &&
              (e = h2(e, f2));
            g2 = (f2[3] & 1) !== 0;
            for (d2 = 3; 0 < d2; d2--)
              f2[d2] = (f2[d2] >>> 1) | ((f2[d2 - 1] & 1) << 31);
            f2[0] >>>= 1;
            g2 && (f2[0] ^= -520093696);
          }
          return e;
        },
        j: function (a2, b2, c2) {
          var d2,
            e = c2.length;
          b2 = b2.slice(0);
          for (d2 = 0; d2 < e; d2 += 4)
            (b2[0] ^= 4294967295 & c2[d2]),
              (b2[1] ^= 4294967295 & c2[d2 + 1]),
              (b2[2] ^= 4294967295 & c2[d2 + 2]),
              (b2[3] ^= 4294967295 & c2[d2 + 3]),
              (b2 = sjcl2.mode.gcm.ka(b2, a2));
          return b2;
        },
        C: function (a2, b2, c2, d2, e, f2) {
          var g2,
            h2,
            k2,
            l2,
            n,
            m2,
            p2,
            r,
            q2 = sjcl2.bitArray;
          m2 = c2.length;
          p2 = q2.bitLength(c2);
          r = q2.bitLength(d2);
          h2 = q2.bitLength(e);
          g2 = b2.encrypt([0, 0, 0, 0]);
          h2 === 96
            ? ((e = e.slice(0)), (e = q2.concat(e, [1])))
            : ((e = sjcl2.mode.gcm.j(g2, [0, 0, 0, 0], e)),
              (e = sjcl2.mode.gcm.j(g2, e, [
                0,
                0,
                Math.floor(h2 / 4294967296),
                h2 & 4294967295,
              ])));
          h2 = sjcl2.mode.gcm.j(g2, [0, 0, 0, 0], d2);
          n = e.slice(0);
          d2 = h2.slice(0);
          a2 || (d2 = sjcl2.mode.gcm.j(g2, h2, c2));
          for (l2 = 0; l2 < m2; l2 += 4)
            n[3]++,
              (k2 = b2.encrypt(n)),
              (c2[l2] ^= k2[0]),
              (c2[l2 + 1] ^= k2[1]),
              (c2[l2 + 2] ^= k2[2]),
              (c2[l2 + 3] ^= k2[3]);
          c2 = q2.clamp(c2, p2);
          a2 && (d2 = sjcl2.mode.gcm.j(g2, h2, c2));
          a2 = [
            Math.floor(r / 4294967296),
            r & 4294967295,
            Math.floor(p2 / 4294967296),
            p2 & 4294967295,
          ];
          d2 = sjcl2.mode.gcm.j(g2, d2, a2);
          k2 = b2.encrypt(e);
          d2[0] ^= k2[0];
          d2[1] ^= k2[1];
          d2[2] ^= k2[2];
          d2[3] ^= k2[3];
          return { tag: q2.bitSlice(d2, 0, f2), data: c2 };
        },
      };
      sjcl2.misc.hmac = function (a2, b2) {
        this.W = b2 = b2 || sjcl2.hash.sha256;
        var c2 = [[], []],
          d2,
          e = b2.prototype.blockSize / 32;
        this.w = [new b2(), new b2()];
        a2.length > e && (a2 = b2.hash(a2));
        for (d2 = 0; d2 < e; d2++)
          (c2[0][d2] = a2[d2] ^ 909522486), (c2[1][d2] = a2[d2] ^ 1549556828);
        this.w[0].update(c2[0]);
        this.w[1].update(c2[1]);
        this.R = new b2(this.w[0]);
      };
      sjcl2.misc.hmac.prototype.encrypt = sjcl2.misc.hmac.prototype.mac =
        function (a2) {
          if (this.aa)
            throw new sjcl2.exception.invalid(
              "encrypt on already updated hmac called!"
            );
          this.update(a2);
          return this.digest(a2);
        };
      sjcl2.misc.hmac.prototype.reset = function () {
        this.R = new this.W(this.w[0]);
        this.aa = false;
      };
      sjcl2.misc.hmac.prototype.update = function (a2) {
        this.aa = true;
        this.R.update(a2);
      };
      sjcl2.misc.hmac.prototype.digest = function () {
        var a2 = this.R.finalize(),
          a2 = new this.W(this.w[1]).update(a2).finalize();
        this.reset();
        return a2;
      };
      sjcl2.misc.pbkdf2 = function (a2, b2, c2, d2, e) {
        c2 = c2 || 1e4;
        if (0 > d2 || 0 > c2)
          throw new sjcl2.exception.invalid("invalid params to pbkdf2");
        typeof a2 === "string" && (a2 = sjcl2.codec.utf8String.toBits(a2));
        typeof b2 === "string" && (b2 = sjcl2.codec.utf8String.toBits(b2));
        e = e || sjcl2.misc.hmac;
        a2 = new e(a2);
        var f2,
          g2,
          h2,
          k2,
          l2 = [],
          n = sjcl2.bitArray;
        for (k2 = 1; 32 * l2.length < (d2 || 1); k2++) {
          e = f2 = a2.encrypt(n.concat(b2, [k2]));
          for (g2 = 1; g2 < c2; g2++)
            for (f2 = a2.encrypt(f2), h2 = 0; h2 < f2.length; h2++)
              e[h2] ^= f2[h2];
          l2 = l2.concat(e);
        }
        d2 && (l2 = n.clamp(l2, d2));
        return l2;
      };
      sjcl2.prng = function (a2) {
        this.c = [new sjcl2.hash.sha256()];
        this.m = [0];
        this.P = 0;
        this.H = {};
        this.N = 0;
        this.U = {};
        this.Z = this.f = this.o = this.ha = 0;
        this.b = [0, 0, 0, 0, 0, 0, 0, 0];
        this.h = [0, 0, 0, 0];
        this.L = void 0;
        this.M = a2;
        this.D = false;
        this.K = { progress: {}, seeded: {} };
        this.u = this.ga = 0;
        this.I = 1;
        this.J = 2;
        this.ca = 65536;
        this.T = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];
        this.da = 3e4;
        this.ba = 80;
      };
      sjcl2.prng.prototype = {
        randomWords: function (a2, b2) {
          var c2 = [],
            d2;
          d2 = this.isReady(b2);
          var e;
          if (d2 === this.u)
            throw new sjcl2.exception.notReady("generator isn't seeded");
          if (d2 & this.J) {
            d2 = !(d2 & this.I);
            e = [];
            var f2 = 0,
              g2;
            this.Z = e[0] = new Date().valueOf() + this.da;
            for (g2 = 0; 16 > g2; g2++)
              e.push((4294967296 * Math.random()) | 0);
            for (
              g2 = 0;
              g2 < this.c.length &&
              ((e = e.concat(this.c[g2].finalize())),
              (f2 += this.m[g2]),
              (this.m[g2] = 0),
              d2 || !(this.P & (1 << g2)));
              g2++
            );
            this.P >= 1 << this.c.length &&
              (this.c.push(new sjcl2.hash.sha256()), this.m.push(0));
            this.f -= f2;
            f2 > this.o && (this.o = f2);
            this.P++;
            this.b = sjcl2.hash.sha256.hash(this.b.concat(e));
            this.L = new sjcl2.cipher.aes(this.b);
            for (
              d2 = 0;
              4 > d2 && ((this.h[d2] = (this.h[d2] + 1) | 0), !this.h[d2]);
              d2++
            );
          }
          for (d2 = 0; d2 < a2; d2 += 4)
            (d2 + 1) % this.ca === 0 && y2(this),
              (e = z2(this)),
              c2.push(e[0], e[1], e[2], e[3]);
          y2(this);
          return c2.slice(0, a2);
        },
        setDefaultParanoia: function (a2, b2) {
          if (
            a2 === 0 &&
            b2 !==
              "Setting paranoia=0 will ruin your security; use it only for testing"
          )
            throw new sjcl2.exception.invalid(
              "Setting paranoia=0 will ruin your security; use it only for testing"
            );
          this.M = a2;
        },
        addEntropy: function (a2, b2, c2) {
          c2 = c2 || "user";
          var d2,
            e,
            f2 = new Date().valueOf(),
            g2 = this.H[c2],
            h2 = this.isReady(),
            k2 = 0;
          d2 = this.U[c2];
          d2 === void 0 && (d2 = this.U[c2] = this.ha++);
          g2 === void 0 && (g2 = this.H[c2] = 0);
          this.H[c2] = (this.H[c2] + 1) % this.c.length;
          switch (typeof a2) {
            case "number":
              b2 === void 0 && (b2 = 1);
              this.c[g2].update([d2, this.N++, 1, b2, f2, 1, a2 | 0]);
              break;
            case "object":
              c2 = Object.prototype.toString.call(a2);
              if (c2 === "[object Uint32Array]") {
                e = [];
                for (c2 = 0; c2 < a2.length; c2++) e.push(a2[c2]);
                a2 = e;
              } else
                for (
                  c2 !== "[object Array]" && (k2 = 1), c2 = 0;
                  c2 < a2.length && !k2;
                  c2++
                )
                  typeof a2[c2] !== "number" && (k2 = 1);
              if (!k2) {
                if (b2 === void 0)
                  for (c2 = b2 = 0; c2 < a2.length; c2++)
                    for (e = a2[c2]; 0 < e; ) b2++, (e = e >>> 1);
                this.c[g2].update(
                  [d2, this.N++, 2, b2, f2, a2.length].concat(a2)
                );
              }
              break;
            case "string":
              b2 === void 0 && (b2 = a2.length);
              this.c[g2].update([d2, this.N++, 3, b2, f2, a2.length]);
              this.c[g2].update(a2);
              break;
            default:
              k2 = 1;
          }
          if (k2)
            throw new sjcl2.exception.bug(
              "random: addEntropy only supports number, array of numbers or string"
            );
          this.m[g2] += b2;
          this.f += b2;
          h2 === this.u &&
            (this.isReady() !== this.u &&
              A2("seeded", Math.max(this.o, this.f)),
            A2("progress", this.getProgress()));
        },
        isReady: function (a2) {
          a2 = this.T[a2 !== void 0 ? a2 : this.M];
          return this.o && this.o >= a2
            ? this.m[0] > this.ba && new Date().valueOf() > this.Z
              ? this.J | this.I
              : this.I
            : this.f >= a2
            ? this.J | this.u
            : this.u;
        },
        getProgress: function (a2) {
          a2 = this.T[a2 ? a2 : this.M];
          return this.o >= a2 ? 1 : this.f > a2 ? 1 : this.f / a2;
        },
        startCollectors: function () {
          if (!this.D) {
            this.a = {
              loadTimeCollector: B2(this, this.ma),
              mouseCollector: B2(this, this.oa),
              keyboardCollector: B2(this, this.la),
              accelerometerCollector: B2(this, this.ea),
              touchCollector: B2(this, this.qa),
            };
            if (window.addEventListener)
              window.addEventListener("load", this.a.loadTimeCollector, false),
                window.addEventListener(
                  "mousemove",
                  this.a.mouseCollector,
                  false
                ),
                window.addEventListener(
                  "keypress",
                  this.a.keyboardCollector,
                  false
                ),
                window.addEventListener(
                  "devicemotion",
                  this.a.accelerometerCollector,
                  false
                ),
                window.addEventListener(
                  "touchmove",
                  this.a.touchCollector,
                  false
                );
            else if (document.attachEvent)
              document.attachEvent("onload", this.a.loadTimeCollector),
                document.attachEvent("onmousemove", this.a.mouseCollector),
                document.attachEvent("keypress", this.a.keyboardCollector);
            else throw new sjcl2.exception.bug("can't attach event");
            this.D = true;
          }
        },
        stopCollectors: function () {
          this.D &&
            (window.removeEventListener
              ? (window.removeEventListener(
                  "load",
                  this.a.loadTimeCollector,
                  false
                ),
                window.removeEventListener(
                  "mousemove",
                  this.a.mouseCollector,
                  false
                ),
                window.removeEventListener(
                  "keypress",
                  this.a.keyboardCollector,
                  false
                ),
                window.removeEventListener(
                  "devicemotion",
                  this.a.accelerometerCollector,
                  false
                ),
                window.removeEventListener(
                  "touchmove",
                  this.a.touchCollector,
                  false
                ))
              : document.detachEvent &&
                (document.detachEvent("onload", this.a.loadTimeCollector),
                document.detachEvent("onmousemove", this.a.mouseCollector),
                document.detachEvent("keypress", this.a.keyboardCollector)),
            (this.D = false));
        },
        addEventListener: function (a2, b2) {
          this.K[a2][this.ga++] = b2;
        },
        removeEventListener: function (a2, b2) {
          var c2,
            d2,
            e = this.K[a2],
            f2 = [];
          for (d2 in e) e.hasOwnProperty(d2) && e[d2] === b2 && f2.push(d2);
          for (c2 = 0; c2 < f2.length; c2++) (d2 = f2[c2]), delete e[d2];
        },
        la: function () {
          C2(this, 1);
        },
        oa: function (a2) {
          var b2, c2;
          try {
            (b2 = a2.x || a2.clientX || a2.offsetX || 0),
              (c2 = a2.y || a2.clientY || a2.offsetY || 0);
          } catch (d2) {
            c2 = b2 = 0;
          }
          b2 != 0 && c2 != 0 && this.addEntropy([b2, c2], 2, "mouse");
          C2(this, 0);
        },
        qa: function (a2) {
          a2 = a2.touches[0] || a2.changedTouches[0];
          this.addEntropy(
            [a2.pageX || a2.clientX, a2.pageY || a2.clientY],
            1,
            "touch"
          );
          C2(this, 0);
        },
        ma: function () {
          C2(this, 2);
        },
        ea: function (a2) {
          a2 =
            a2.accelerationIncludingGravity.x ||
            a2.accelerationIncludingGravity.y ||
            a2.accelerationIncludingGravity.z;
          if (window.orientation) {
            var b2 = window.orientation;
            typeof b2 === "number" && this.addEntropy(b2, 1, "accelerometer");
          }
          a2 && this.addEntropy(a2, 2, "accelerometer");
          C2(this, 0);
        },
      };
      function A2(a2, b2) {
        var c2,
          d2 = sjcl2.random.K[a2],
          e = [];
        for (c2 in d2) d2.hasOwnProperty(c2) && e.push(d2[c2]);
        for (c2 = 0; c2 < e.length; c2++) e[c2](b2);
      }
      function C2(a2, b2) {
        typeof window !== "undefined" &&
        window.performance &&
        typeof window.performance.now === "function"
          ? a2.addEntropy(window.performance.now(), b2, "loadtime")
          : a2.addEntropy(new Date().valueOf(), b2, "loadtime");
      }
      function y2(a2) {
        a2.b = z2(a2).concat(z2(a2));
        a2.L = new sjcl2.cipher.aes(a2.b);
      }
      function z2(a2) {
        for (
          var b2 = 0;
          4 > b2 && ((a2.h[b2] = (a2.h[b2] + 1) | 0), !a2.h[b2]);
          b2++
        );
        return a2.L.encrypt(a2.h);
      }
      function B2(a2, b2) {
        return function () {
          b2.apply(a2, arguments);
        };
      }
      sjcl2.random = new sjcl2.prng(6);
      a: try {
        if ((G2 = typeof module !== "undefined" && module.exports)) {
          try {
            H = __require("crypto");
          } catch (a2) {
            H = null;
          }
          G2 = E2 = H;
        }
        if (G2 && E2.randomBytes)
          (D2 = E2.randomBytes(128)),
            (D2 = new Uint32Array(new Uint8Array(D2).buffer)),
            sjcl2.random.addEntropy(D2, 1024, "crypto['randomBytes']");
        else if (
          typeof window !== "undefined" &&
          typeof Uint32Array !== "undefined"
        ) {
          F = new Uint32Array(32);
          if (window.crypto && window.crypto.getRandomValues)
            window.crypto.getRandomValues(F);
          else if (window.msCrypto && window.msCrypto.getRandomValues)
            window.msCrypto.getRandomValues(F);
          else break a;
          sjcl2.random.addEntropy(F, 1024, "crypto['getRandomValues']");
        }
      } catch (a2) {
        typeof window !== "undefined" &&
          window.console &&
          (console.log(
            "There was an error collecting entropy from the browser:"
          ),
          console.log(a2));
      }
      var D2;
      var E2;
      var F;
      var G2;
      var H;
      sjcl2.json = {
        defaults: {
          v: 1,
          iter: 1e4,
          ks: 128,
          ts: 64,
          mode: "ccm",
          adata: "",
          cipher: "aes",
        },
        ja: function (a2, b2, c2, d2) {
          c2 = c2 || {};
          d2 = d2 || {};
          var e = sjcl2.json,
            f2 = e.g({ iv: sjcl2.random.randomWords(4, 0) }, e.defaults),
            g2;
          e.g(f2, c2);
          c2 = f2.adata;
          typeof f2.salt === "string" &&
            (f2.salt = sjcl2.codec.base64.toBits(f2.salt));
          typeof f2.iv === "string" &&
            (f2.iv = sjcl2.codec.base64.toBits(f2.iv));
          if (
            !sjcl2.mode[f2.mode] ||
            !sjcl2.cipher[f2.cipher] ||
            (typeof a2 === "string" && 100 >= f2.iter) ||
            (f2.ts !== 64 && f2.ts !== 96 && f2.ts !== 128) ||
            (f2.ks !== 128 && f2.ks !== 192 && f2.ks !== 256) ||
            2 > f2.iv.length ||
            4 < f2.iv.length
          )
            throw new sjcl2.exception.invalid(
              "json encrypt: invalid parameters"
            );
          typeof a2 === "string"
            ? ((g2 = sjcl2.misc.cachedPbkdf2(a2, f2)),
              (a2 = g2.key.slice(0, f2.ks / 32)),
              (f2.salt = g2.salt))
            : sjcl2.ecc &&
              a2 instanceof sjcl2.ecc.elGamal.publicKey &&
              ((g2 = a2.kem()),
              (f2.kemtag = g2.tag),
              (a2 = g2.key.slice(0, f2.ks / 32)));
          typeof b2 === "string" && (b2 = sjcl2.codec.utf8String.toBits(b2));
          typeof c2 === "string" &&
            (f2.adata = c2 = sjcl2.codec.utf8String.toBits(c2));
          g2 = new sjcl2.cipher[f2.cipher](a2);
          e.g(d2, f2);
          d2.key = a2;
          f2.ct =
            f2.mode === "ccm" &&
            sjcl2.arrayBuffer &&
            sjcl2.arrayBuffer.ccm &&
            b2 instanceof ArrayBuffer
              ? sjcl2.arrayBuffer.ccm.encrypt(g2, b2, f2.iv, c2, f2.ts)
              : sjcl2.mode[f2.mode].encrypt(g2, b2, f2.iv, c2, f2.ts);
          return f2;
        },
        encrypt: function (a2, b2, c2, d2) {
          var e = sjcl2.json,
            f2 = e.ja.apply(e, arguments);
          return e.encode(f2);
        },
        ia: function (a2, b2, c2, d2) {
          c2 = c2 || {};
          d2 = d2 || {};
          var e = sjcl2.json;
          b2 = e.g(e.g(e.g({}, e.defaults), b2), c2, true);
          var f2, g2;
          f2 = b2.adata;
          typeof b2.salt === "string" &&
            (b2.salt = sjcl2.codec.base64.toBits(b2.salt));
          typeof b2.iv === "string" &&
            (b2.iv = sjcl2.codec.base64.toBits(b2.iv));
          if (
            !sjcl2.mode[b2.mode] ||
            !sjcl2.cipher[b2.cipher] ||
            (typeof a2 === "string" && 100 >= b2.iter) ||
            (b2.ts !== 64 && b2.ts !== 96 && b2.ts !== 128) ||
            (b2.ks !== 128 && b2.ks !== 192 && b2.ks !== 256) ||
            !b2.iv ||
            2 > b2.iv.length ||
            4 < b2.iv.length
          )
            throw new sjcl2.exception.invalid(
              "json decrypt: invalid parameters"
            );
          typeof a2 === "string"
            ? ((g2 = sjcl2.misc.cachedPbkdf2(a2, b2)),
              (a2 = g2.key.slice(0, b2.ks / 32)),
              (b2.salt = g2.salt))
            : sjcl2.ecc &&
              a2 instanceof sjcl2.ecc.elGamal.secretKey &&
              (a2 = a2
                .unkem(sjcl2.codec.base64.toBits(b2.kemtag))
                .slice(0, b2.ks / 32));
          typeof f2 === "string" && (f2 = sjcl2.codec.utf8String.toBits(f2));
          g2 = new sjcl2.cipher[b2.cipher](a2);
          f2 =
            b2.mode === "ccm" &&
            sjcl2.arrayBuffer &&
            sjcl2.arrayBuffer.ccm &&
            b2.ct instanceof ArrayBuffer
              ? sjcl2.arrayBuffer.ccm.decrypt(
                  g2,
                  b2.ct,
                  b2.iv,
                  b2.tag,
                  f2,
                  b2.ts
                )
              : sjcl2.mode[b2.mode].decrypt(g2, b2.ct, b2.iv, f2, b2.ts);
          e.g(d2, b2);
          d2.key = a2;
          return c2.raw === 1 ? f2 : sjcl2.codec.utf8String.fromBits(f2);
        },
        decrypt: function (a2, b2, c2, d2) {
          var e = sjcl2.json;
          return e.ia(a2, e.decode(b2), c2, d2);
        },
        encode: function (a2) {
          var b2,
            c2 = "{",
            d2 = "";
          for (b2 in a2)
            if (a2.hasOwnProperty(b2)) {
              if (!b2.match(/^[a-z0-9]+$/i))
                throw new sjcl2.exception.invalid(
                  "json encode: invalid property name"
                );
              c2 += d2 + '"' + b2 + '":';
              d2 = ",";
              switch (typeof a2[b2]) {
                case "number":
                case "boolean":
                  c2 += a2[b2];
                  break;
                case "string":
                  c2 += '"' + escape(a2[b2]) + '"';
                  break;
                case "object":
                  c2 += '"' + sjcl2.codec.base64.fromBits(a2[b2], 0) + '"';
                  break;
                default:
                  throw new sjcl2.exception.bug(
                    "json encode: unsupported type"
                  );
              }
            }
          return c2 + "}";
        },
        decode: function (a2) {
          a2 = a2.replace(/\s/g, "");
          if (!a2.match(/^\{.*\}$/))
            throw new sjcl2.exception.invalid("json decode: this isn't json!");
          a2 = a2.replace(/^\{|\}$/g, "").split(/,/);
          var b2 = {},
            c2,
            d2;
          for (c2 = 0; c2 < a2.length; c2++) {
            if (
              !(d2 = a2[c2].match(
                /^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i
              ))
            )
              throw new sjcl2.exception.invalid(
                "json decode: this isn't json!"
              );
            d2[3] != null
              ? (b2[d2[2]] = parseInt(d2[3], 10))
              : d2[4] != null
              ? (b2[d2[2]] = d2[2].match(/^(ct|adata|salt|iv)$/)
                  ? sjcl2.codec.base64.toBits(d2[4])
                  : unescape(d2[4]))
              : d2[5] != null && (b2[d2[2]] = d2[5] === "true");
          }
          return b2;
        },
        g: function (a2, b2, c2) {
          a2 === void 0 && (a2 = {});
          if (b2 === void 0) return a2;
          for (var d2 in b2)
            if (b2.hasOwnProperty(d2)) {
              if (c2 && a2[d2] !== void 0 && a2[d2] !== b2[d2])
                throw new sjcl2.exception.invalid(
                  "required parameter overridden"
                );
              a2[d2] = b2[d2];
            }
          return a2;
        },
        sa: function (a2, b2) {
          var c2 = {},
            d2;
          for (d2 in a2)
            a2.hasOwnProperty(d2) && a2[d2] !== b2[d2] && (c2[d2] = a2[d2]);
          return c2;
        },
        ra: function (a2, b2) {
          var c2 = {},
            d2;
          for (d2 = 0; d2 < b2.length; d2++)
            a2[b2[d2]] !== void 0 && (c2[b2[d2]] = a2[b2[d2]]);
          return c2;
        },
      };
      sjcl2.encrypt = sjcl2.json.encrypt;
      sjcl2.decrypt = sjcl2.json.decrypt;
      sjcl2.misc.pa = {};
      sjcl2.misc.cachedPbkdf2 = function (a2, b2) {
        var c2 = sjcl2.misc.pa,
          d2;
        b2 = b2 || {};
        d2 = b2.iter || 1e3;
        c2 = c2[a2] = c2[a2] || {};
        d2 = c2[d2] = c2[d2] || {
          firstSalt:
            b2.salt && b2.salt.length
              ? b2.salt.slice(0)
              : sjcl2.random.randomWords(2, 0),
        };
        c2 = b2.salt === void 0 ? d2.firstSalt : b2.salt;
        d2[c2] = d2[c2] || sjcl2.misc.pbkdf2(a2, c2, b2.iter);
        return { key: d2[c2].slice(0), salt: c2.slice(0) };
      };
      typeof module !== "undefined" &&
        module.exports &&
        (module.exports = sjcl2);
      typeof define === "function" &&
        define([], function () {
          return sjcl2;
        });
    },
  });

  // node_modules/blakejs/util.js
  var require_util2 = __commonJS({
    "node_modules/blakejs/util.js"(exports, module) {
      var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
      function normalizeInput(input) {
        let ret;
        if (input instanceof Uint8Array) {
          ret = input;
        } else if (input instanceof Buffer) {
          ret = new Uint8Array(input);
        } else if (typeof input === "string") {
          ret = new Uint8Array(Buffer.from(input, "utf8"));
        } else {
          throw new Error(ERROR_MSG_INPUT);
        }
        return ret;
      }
      function toHex2(bytes) {
        return Array.prototype.map
          .call(bytes, function (n) {
            return (n < 16 ? "0" : "") + n.toString(16);
          })
          .join("");
      }
      function uint32ToHex(val) {
        return (4294967296 + val).toString(16).substring(1);
      }
      function debugPrint(label, arr, size) {
        let msg = "\n" + label + " = ";
        for (let i = 0; i < arr.length; i += 2) {
          if (size === 32) {
            msg += uint32ToHex(arr[i]).toUpperCase();
            msg += " ";
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
          } else if (size === 64) {
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
            msg += uint32ToHex(arr[i]).toUpperCase();
          } else throw new Error("Invalid size " + size);
          if (i % 6 === 4) {
            msg += "\n" + new Array(label.length + 4).join(" ");
          } else if (i < arr.length - 2) {
            msg += " ";
          }
        }
        console.log(msg);
      }
      function testSpeed(hashFn, N3, M2) {
        let startMs = new Date().getTime();
        const input = new Uint8Array(N3);
        for (let i = 0; i < N3; i++) {
          input[i] = i % 256;
        }
        const genMs = new Date().getTime();
        console.log("Generated random input in " + (genMs - startMs) + "ms");
        startMs = genMs;
        for (let i = 0; i < M2; i++) {
          const hashHex = hashFn(input);
          const hashMs = new Date().getTime();
          const ms = hashMs - startMs;
          startMs = hashMs;
          console.log(
            "Hashed in " + ms + "ms: " + hashHex.substring(0, 20) + "..."
          );
          console.log(
            Math.round((N3 / (1 << 20) / (ms / 1e3)) * 100) / 100 +
              " MB PER SECOND"
          );
        }
      }
      module.exports = {
        normalizeInput,
        toHex: toHex2,
        debugPrint,
        testSpeed,
      };
    },
  });

  // node_modules/blakejs/blake2b.js
  var require_blake2b = __commonJS({
    "node_modules/blakejs/blake2b.js"(exports, module) {
      var util = require_util2();
      function ADD64AA(v3, a2, b2) {
        const o0 = v3[a2] + v3[b2];
        let o1 = v3[a2 + 1] + v3[b2 + 1];
        if (o0 >= 4294967296) {
          o1++;
        }
        v3[a2] = o0;
        v3[a2 + 1] = o1;
      }
      function ADD64AC(v3, a2, b0, b1) {
        let o0 = v3[a2] + b0;
        if (b0 < 0) {
          o0 += 4294967296;
        }
        let o1 = v3[a2 + 1] + b1;
        if (o0 >= 4294967296) {
          o1++;
        }
        v3[a2] = o0;
        v3[a2 + 1] = o1;
      }
      function B2B_GET32(arr, i) {
        return (
          arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
        );
      }
      function B2B_G(a2, b2, c2, d2, ix, iy) {
        const x0 = m2[ix];
        const x1 = m2[ix + 1];
        const y0 = m2[iy];
        const y1 = m2[iy + 1];
        ADD64AA(v2, a2, b2);
        ADD64AC(v2, a2, x0, x1);
        let xor0 = v2[d2] ^ v2[a2];
        let xor1 = v2[d2 + 1] ^ v2[a2 + 1];
        v2[d2] = xor1;
        v2[d2 + 1] = xor0;
        ADD64AA(v2, c2, d2);
        xor0 = v2[b2] ^ v2[c2];
        xor1 = v2[b2 + 1] ^ v2[c2 + 1];
        v2[b2] = (xor0 >>> 24) ^ (xor1 << 8);
        v2[b2 + 1] = (xor1 >>> 24) ^ (xor0 << 8);
        ADD64AA(v2, a2, b2);
        ADD64AC(v2, a2, y0, y1);
        xor0 = v2[d2] ^ v2[a2];
        xor1 = v2[d2 + 1] ^ v2[a2 + 1];
        v2[d2] = (xor0 >>> 16) ^ (xor1 << 16);
        v2[d2 + 1] = (xor1 >>> 16) ^ (xor0 << 16);
        ADD64AA(v2, c2, d2);
        xor0 = v2[b2] ^ v2[c2];
        xor1 = v2[b2 + 1] ^ v2[c2 + 1];
        v2[b2] = (xor1 >>> 31) ^ (xor0 << 1);
        v2[b2 + 1] = (xor0 >>> 31) ^ (xor1 << 1);
      }
      var BLAKE2B_IV32 = new Uint32Array([
        4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242,
        1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924,
        4215389547, 528734635, 327033209, 1541459225,
      ]);
      var SIGMA8 = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9,
        15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14,
        3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
        9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0,
        11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7,
        6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
        6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6,
        1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
        12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
      ];
      var SIGMA82 = new Uint8Array(
        SIGMA8.map(function (x2) {
          return x2 * 2;
        })
      );
      var v2 = new Uint32Array(32);
      var m2 = new Uint32Array(32);
      function blake2bCompress(ctx, last) {
        let i = 0;
        for (i = 0; i < 16; i++) {
          v2[i] = ctx.h[i];
          v2[i + 16] = BLAKE2B_IV32[i];
        }
        v2[24] = v2[24] ^ ctx.t;
        v2[25] = v2[25] ^ (ctx.t / 4294967296);
        if (last) {
          v2[28] = ~v2[28];
          v2[29] = ~v2[29];
        }
        for (i = 0; i < 32; i++) {
          m2[i] = B2B_GET32(ctx.b, 4 * i);
        }
        for (i = 0; i < 12; i++) {
          B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
          B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
          B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
          B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
          B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
          B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
          B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
          B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
        }
        for (i = 0; i < 16; i++) {
          ctx.h[i] = ctx.h[i] ^ v2[i] ^ v2[i + 16];
        }
      }
      function blake2bInit2(outlen, key2) {
        if (outlen === 0 || outlen > 64) {
          throw new Error("Illegal output length, expected 0 < length <= 64");
        }
        if (key2 && key2.length > 64) {
          throw new Error(
            "Illegal key, expected Uint8Array with 0 < length <= 64"
          );
        }
        const ctx = {
          b: new Uint8Array(128),
          h: new Uint32Array(16),
          t: 0,
          c: 0,
          outlen,
        };
        for (let i = 0; i < 16; i++) {
          ctx.h[i] = BLAKE2B_IV32[i];
        }
        const keylen = key2 ? key2.length : 0;
        ctx.h[0] ^= 16842752 ^ (keylen << 8) ^ outlen;
        if (key2) {
          blake2bUpdate2(ctx, key2);
          ctx.c = 128;
        }
        return ctx;
      }
      function blake2bUpdate2(ctx, input) {
        for (let i = 0; i < input.length; i++) {
          if (ctx.c === 128) {
            ctx.t += ctx.c;
            blake2bCompress(ctx, false);
            ctx.c = 0;
          }
          ctx.b[ctx.c++] = input[i];
        }
      }
      function blake2bFinal2(ctx) {
        ctx.t += ctx.c;
        while (ctx.c < 128) {
          ctx.b[ctx.c++] = 0;
        }
        blake2bCompress(ctx, true);
        const out = new Uint8Array(ctx.outlen);
        for (let i = 0; i < ctx.outlen; i++) {
          out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
        }
        return out;
      }
      function blake2b(input, key2, outlen) {
        outlen = outlen || 64;
        input = util.normalizeInput(input);
        const ctx = blake2bInit2(outlen, key2);
        blake2bUpdate2(ctx, input);
        return blake2bFinal2(ctx);
      }
      function blake2bHex(input, key2, outlen) {
        const output = blake2b(input, key2, outlen);
        return util.toHex(output);
      }
      module.exports = {
        blake2b,
        blake2bHex,
        blake2bInit: blake2bInit2,
        blake2bUpdate: blake2bUpdate2,
        blake2bFinal: blake2bFinal2,
      };
    },
  });

  // node_modules/blakejs/blake2s.js
  var require_blake2s = __commonJS({
    "node_modules/blakejs/blake2s.js"(exports, module) {
      var util = require_util2();
      function B2S_GET32(v3, i) {
        return v3[i] ^ (v3[i + 1] << 8) ^ (v3[i + 2] << 16) ^ (v3[i + 3] << 24);
      }
      function B2S_G(a2, b2, c2, d2, x2, y2) {
        v2[a2] = v2[a2] + v2[b2] + x2;
        v2[d2] = ROTR32(v2[d2] ^ v2[a2], 16);
        v2[c2] = v2[c2] + v2[d2];
        v2[b2] = ROTR32(v2[b2] ^ v2[c2], 12);
        v2[a2] = v2[a2] + v2[b2] + y2;
        v2[d2] = ROTR32(v2[d2] ^ v2[a2], 8);
        v2[c2] = v2[c2] + v2[d2];
        v2[b2] = ROTR32(v2[b2] ^ v2[c2], 7);
      }
      function ROTR32(x2, y2) {
        return (x2 >>> y2) ^ (x2 << (32 - y2));
      }
      var BLAKE2S_IV = new Uint32Array([
        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924,
        528734635, 1541459225,
      ]);
      var SIGMA = new Uint8Array([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9,
        15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14,
        3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
        9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0,
        11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7,
        6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
        6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6,
        1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
      ]);
      var v2 = new Uint32Array(16);
      var m2 = new Uint32Array(16);
      function blake2sCompress(ctx, last) {
        let i = 0;
        for (i = 0; i < 8; i++) {
          v2[i] = ctx.h[i];
          v2[i + 8] = BLAKE2S_IV[i];
        }
        v2[12] ^= ctx.t;
        v2[13] ^= ctx.t / 4294967296;
        if (last) {
          v2[14] = ~v2[14];
        }
        for (i = 0; i < 16; i++) {
          m2[i] = B2S_GET32(ctx.b, 4 * i);
        }
        for (i = 0; i < 10; i++) {
          B2S_G(0, 4, 8, 12, m2[SIGMA[i * 16 + 0]], m2[SIGMA[i * 16 + 1]]);
          B2S_G(1, 5, 9, 13, m2[SIGMA[i * 16 + 2]], m2[SIGMA[i * 16 + 3]]);
          B2S_G(2, 6, 10, 14, m2[SIGMA[i * 16 + 4]], m2[SIGMA[i * 16 + 5]]);
          B2S_G(3, 7, 11, 15, m2[SIGMA[i * 16 + 6]], m2[SIGMA[i * 16 + 7]]);
          B2S_G(0, 5, 10, 15, m2[SIGMA[i * 16 + 8]], m2[SIGMA[i * 16 + 9]]);
          B2S_G(1, 6, 11, 12, m2[SIGMA[i * 16 + 10]], m2[SIGMA[i * 16 + 11]]);
          B2S_G(2, 7, 8, 13, m2[SIGMA[i * 16 + 12]], m2[SIGMA[i * 16 + 13]]);
          B2S_G(3, 4, 9, 14, m2[SIGMA[i * 16 + 14]], m2[SIGMA[i * 16 + 15]]);
        }
        for (i = 0; i < 8; i++) {
          ctx.h[i] ^= v2[i] ^ v2[i + 8];
        }
      }
      function blake2sInit(outlen, key2) {
        if (!(outlen > 0 && outlen <= 32)) {
          throw new Error("Incorrect output length, should be in [1, 32]");
        }
        const keylen = key2 ? key2.length : 0;
        if (key2 && !(keylen > 0 && keylen <= 32)) {
          throw new Error("Incorrect key length, should be in [1, 32]");
        }
        const ctx = {
          h: new Uint32Array(BLAKE2S_IV),
          b: new Uint8Array(64),
          c: 0,
          t: 0,
          outlen,
        };
        ctx.h[0] ^= 16842752 ^ (keylen << 8) ^ outlen;
        if (keylen > 0) {
          blake2sUpdate(ctx, key2);
          ctx.c = 64;
        }
        return ctx;
      }
      function blake2sUpdate(ctx, input) {
        for (let i = 0; i < input.length; i++) {
          if (ctx.c === 64) {
            ctx.t += ctx.c;
            blake2sCompress(ctx, false);
            ctx.c = 0;
          }
          ctx.b[ctx.c++] = input[i];
        }
      }
      function blake2sFinal(ctx) {
        ctx.t += ctx.c;
        while (ctx.c < 64) {
          ctx.b[ctx.c++] = 0;
        }
        blake2sCompress(ctx, true);
        const out = new Uint8Array(ctx.outlen);
        for (let i = 0; i < ctx.outlen; i++) {
          out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 255;
        }
        return out;
      }
      function blake2s(input, key2, outlen) {
        outlen = outlen || 32;
        input = util.normalizeInput(input);
        const ctx = blake2sInit(outlen, key2);
        blake2sUpdate(ctx, input);
        return blake2sFinal(ctx);
      }
      function blake2sHex(input, key2, outlen) {
        const output = blake2s(input, key2, outlen);
        return util.toHex(output);
      }
      module.exports = {
        blake2s,
        blake2sHex,
        blake2sInit,
        blake2sUpdate,
        blake2sFinal,
      };
    },
  });

  // node_modules/blakejs/index.js
  var require_blakejs = __commonJS({
    "node_modules/blakejs/index.js"(exports, module) {
      var b2b = require_blake2b();
      var b2s = require_blake2s();
      module.exports = {
        blake2b: b2b.blake2b,
        blake2bHex: b2b.blake2bHex,
        blake2bInit: b2b.blake2bInit,
        blake2bUpdate: b2b.blake2bUpdate,
        blake2bFinal: b2b.blake2bFinal,
        blake2s: b2s.blake2s,
        blake2sHex: b2s.blake2sHex,
        blake2sInit: b2s.blake2sInit,
        blake2sUpdate: b2s.blake2sUpdate,
        blake2sFinal: b2s.blake2sFinal,
      };
    },
  });

  // node_modules/randombytes/index.js
  var require_randombytes = __commonJS({
    "node_modules/randombytes/index.js"(exports, module) {
      module.exports = __require("crypto").randomBytes;
    },
  });

  // node_modules/tweetnacl/nacl-fast.js
  var require_nacl_fast = __commonJS({
    "node_modules/tweetnacl/nacl-fast.js"(exports, module) {
      (function (nacl) {
        "use strict";
        var gf = function (init2) {
          var i,
            r = new Float64Array(16);
          if (init2) for (i = 0; i < init2.length; i++) r[i] = init2[i];
          return r;
        };
        var randombytes = function () {
          throw new Error("no PRNG");
        };
        var _0 = new Uint8Array(16);
        var _9 = new Uint8Array(32);
        _9[0] = 9;
        var gf0 = gf(),
          gf1 = gf([1]),
          _121665 = gf([56129, 1]),
          D2 = gf([
            30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585,
            16505, 36039, 65139, 11119, 27886, 20995,
          ]),
          D22 = gf([
            61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171,
            33010, 6542, 64743, 22239, 55772, 9222,
          ]),
          X = gf([
            54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412,
            64982, 57905, 49316, 21502, 52590, 14035, 8553,
          ]),
          Y = gf([
            26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214,
            26214, 26214, 26214, 26214, 26214, 26214, 26214,
          ]),
          I2 = gf([
            41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867,
            153, 11085, 57099, 20417, 9344, 11139,
          ]);
        function ts64(x2, i, h2, l2) {
          x2[i] = (h2 >> 24) & 255;
          x2[i + 1] = (h2 >> 16) & 255;
          x2[i + 2] = (h2 >> 8) & 255;
          x2[i + 3] = h2 & 255;
          x2[i + 4] = (l2 >> 24) & 255;
          x2[i + 5] = (l2 >> 16) & 255;
          x2[i + 6] = (l2 >> 8) & 255;
          x2[i + 7] = l2 & 255;
        }
        function vn(x2, xi, y2, yi, n) {
          var i,
            d2 = 0;
          for (i = 0; i < n; i++) d2 |= x2[xi + i] ^ y2[yi + i];
          return (1 & ((d2 - 1) >>> 8)) - 1;
        }
        function crypto_verify_16(x2, xi, y2, yi) {
          return vn(x2, xi, y2, yi, 16);
        }
        function crypto_verify_32(x2, xi, y2, yi) {
          return vn(x2, xi, y2, yi, 32);
        }
        function core_salsa20(o2, p2, k2, c2) {
          var j0 =
              (c2[0] & 255) |
              ((c2[1] & 255) << 8) |
              ((c2[2] & 255) << 16) |
              ((c2[3] & 255) << 24),
            j1 =
              (k2[0] & 255) |
              ((k2[1] & 255) << 8) |
              ((k2[2] & 255) << 16) |
              ((k2[3] & 255) << 24),
            j2 =
              (k2[4] & 255) |
              ((k2[5] & 255) << 8) |
              ((k2[6] & 255) << 16) |
              ((k2[7] & 255) << 24),
            j3 =
              (k2[8] & 255) |
              ((k2[9] & 255) << 8) |
              ((k2[10] & 255) << 16) |
              ((k2[11] & 255) << 24),
            j4 =
              (k2[12] & 255) |
              ((k2[13] & 255) << 8) |
              ((k2[14] & 255) << 16) |
              ((k2[15] & 255) << 24),
            j5 =
              (c2[4] & 255) |
              ((c2[5] & 255) << 8) |
              ((c2[6] & 255) << 16) |
              ((c2[7] & 255) << 24),
            j6 =
              (p2[0] & 255) |
              ((p2[1] & 255) << 8) |
              ((p2[2] & 255) << 16) |
              ((p2[3] & 255) << 24),
            j7 =
              (p2[4] & 255) |
              ((p2[5] & 255) << 8) |
              ((p2[6] & 255) << 16) |
              ((p2[7] & 255) << 24),
            j8 =
              (p2[8] & 255) |
              ((p2[9] & 255) << 8) |
              ((p2[10] & 255) << 16) |
              ((p2[11] & 255) << 24),
            j9 =
              (p2[12] & 255) |
              ((p2[13] & 255) << 8) |
              ((p2[14] & 255) << 16) |
              ((p2[15] & 255) << 24),
            j10 =
              (c2[8] & 255) |
              ((c2[9] & 255) << 8) |
              ((c2[10] & 255) << 16) |
              ((c2[11] & 255) << 24),
            j11 =
              (k2[16] & 255) |
              ((k2[17] & 255) << 8) |
              ((k2[18] & 255) << 16) |
              ((k2[19] & 255) << 24),
            j12 =
              (k2[20] & 255) |
              ((k2[21] & 255) << 8) |
              ((k2[22] & 255) << 16) |
              ((k2[23] & 255) << 24),
            j13 =
              (k2[24] & 255) |
              ((k2[25] & 255) << 8) |
              ((k2[26] & 255) << 16) |
              ((k2[27] & 255) << 24),
            j14 =
              (k2[28] & 255) |
              ((k2[29] & 255) << 8) |
              ((k2[30] & 255) << 16) |
              ((k2[31] & 255) << 24),
            j15 =
              (c2[12] & 255) |
              ((c2[13] & 255) << 8) |
              ((c2[14] & 255) << 16) |
              ((c2[15] & 255) << 24);
          var x0 = j0,
            x1 = j1,
            x2 = j2,
            x3 = j3,
            x4 = j4,
            x5 = j5,
            x6 = j6,
            x7 = j7,
            x8 = j8,
            x9 = j9,
            x10 = j10,
            x11 = j11,
            x12 = j12,
            x13 = j13,
            x14 = j14,
            x15 = j15,
            u2;
          for (var i = 0; i < 20; i += 2) {
            u2 = (x0 + x12) | 0;
            x4 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x4 + x0) | 0;
            x8 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x8 + x4) | 0;
            x12 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x12 + x8) | 0;
            x0 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x5 + x1) | 0;
            x9 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x9 + x5) | 0;
            x13 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x13 + x9) | 0;
            x1 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x1 + x13) | 0;
            x5 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x10 + x6) | 0;
            x14 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x14 + x10) | 0;
            x2 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x2 + x14) | 0;
            x6 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x6 + x2) | 0;
            x10 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x15 + x11) | 0;
            x3 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x3 + x15) | 0;
            x7 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x7 + x3) | 0;
            x11 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x11 + x7) | 0;
            x15 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x0 + x3) | 0;
            x1 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x1 + x0) | 0;
            x2 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x2 + x1) | 0;
            x3 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x3 + x2) | 0;
            x0 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x5 + x4) | 0;
            x6 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x6 + x5) | 0;
            x7 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x7 + x6) | 0;
            x4 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x4 + x7) | 0;
            x5 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x10 + x9) | 0;
            x11 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x11 + x10) | 0;
            x8 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x8 + x11) | 0;
            x9 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x9 + x8) | 0;
            x10 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x15 + x14) | 0;
            x12 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x12 + x15) | 0;
            x13 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x13 + x12) | 0;
            x14 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x14 + x13) | 0;
            x15 ^= (u2 << 18) | (u2 >>> (32 - 18));
          }
          x0 = (x0 + j0) | 0;
          x1 = (x1 + j1) | 0;
          x2 = (x2 + j2) | 0;
          x3 = (x3 + j3) | 0;
          x4 = (x4 + j4) | 0;
          x5 = (x5 + j5) | 0;
          x6 = (x6 + j6) | 0;
          x7 = (x7 + j7) | 0;
          x8 = (x8 + j8) | 0;
          x9 = (x9 + j9) | 0;
          x10 = (x10 + j10) | 0;
          x11 = (x11 + j11) | 0;
          x12 = (x12 + j12) | 0;
          x13 = (x13 + j13) | 0;
          x14 = (x14 + j14) | 0;
          x15 = (x15 + j15) | 0;
          o2[0] = (x0 >>> 0) & 255;
          o2[1] = (x0 >>> 8) & 255;
          o2[2] = (x0 >>> 16) & 255;
          o2[3] = (x0 >>> 24) & 255;
          o2[4] = (x1 >>> 0) & 255;
          o2[5] = (x1 >>> 8) & 255;
          o2[6] = (x1 >>> 16) & 255;
          o2[7] = (x1 >>> 24) & 255;
          o2[8] = (x2 >>> 0) & 255;
          o2[9] = (x2 >>> 8) & 255;
          o2[10] = (x2 >>> 16) & 255;
          o2[11] = (x2 >>> 24) & 255;
          o2[12] = (x3 >>> 0) & 255;
          o2[13] = (x3 >>> 8) & 255;
          o2[14] = (x3 >>> 16) & 255;
          o2[15] = (x3 >>> 24) & 255;
          o2[16] = (x4 >>> 0) & 255;
          o2[17] = (x4 >>> 8) & 255;
          o2[18] = (x4 >>> 16) & 255;
          o2[19] = (x4 >>> 24) & 255;
          o2[20] = (x5 >>> 0) & 255;
          o2[21] = (x5 >>> 8) & 255;
          o2[22] = (x5 >>> 16) & 255;
          o2[23] = (x5 >>> 24) & 255;
          o2[24] = (x6 >>> 0) & 255;
          o2[25] = (x6 >>> 8) & 255;
          o2[26] = (x6 >>> 16) & 255;
          o2[27] = (x6 >>> 24) & 255;
          o2[28] = (x7 >>> 0) & 255;
          o2[29] = (x7 >>> 8) & 255;
          o2[30] = (x7 >>> 16) & 255;
          o2[31] = (x7 >>> 24) & 255;
          o2[32] = (x8 >>> 0) & 255;
          o2[33] = (x8 >>> 8) & 255;
          o2[34] = (x8 >>> 16) & 255;
          o2[35] = (x8 >>> 24) & 255;
          o2[36] = (x9 >>> 0) & 255;
          o2[37] = (x9 >>> 8) & 255;
          o2[38] = (x9 >>> 16) & 255;
          o2[39] = (x9 >>> 24) & 255;
          o2[40] = (x10 >>> 0) & 255;
          o2[41] = (x10 >>> 8) & 255;
          o2[42] = (x10 >>> 16) & 255;
          o2[43] = (x10 >>> 24) & 255;
          o2[44] = (x11 >>> 0) & 255;
          o2[45] = (x11 >>> 8) & 255;
          o2[46] = (x11 >>> 16) & 255;
          o2[47] = (x11 >>> 24) & 255;
          o2[48] = (x12 >>> 0) & 255;
          o2[49] = (x12 >>> 8) & 255;
          o2[50] = (x12 >>> 16) & 255;
          o2[51] = (x12 >>> 24) & 255;
          o2[52] = (x13 >>> 0) & 255;
          o2[53] = (x13 >>> 8) & 255;
          o2[54] = (x13 >>> 16) & 255;
          o2[55] = (x13 >>> 24) & 255;
          o2[56] = (x14 >>> 0) & 255;
          o2[57] = (x14 >>> 8) & 255;
          o2[58] = (x14 >>> 16) & 255;
          o2[59] = (x14 >>> 24) & 255;
          o2[60] = (x15 >>> 0) & 255;
          o2[61] = (x15 >>> 8) & 255;
          o2[62] = (x15 >>> 16) & 255;
          o2[63] = (x15 >>> 24) & 255;
        }
        function core_hsalsa20(o2, p2, k2, c2) {
          var j0 =
              (c2[0] & 255) |
              ((c2[1] & 255) << 8) |
              ((c2[2] & 255) << 16) |
              ((c2[3] & 255) << 24),
            j1 =
              (k2[0] & 255) |
              ((k2[1] & 255) << 8) |
              ((k2[2] & 255) << 16) |
              ((k2[3] & 255) << 24),
            j2 =
              (k2[4] & 255) |
              ((k2[5] & 255) << 8) |
              ((k2[6] & 255) << 16) |
              ((k2[7] & 255) << 24),
            j3 =
              (k2[8] & 255) |
              ((k2[9] & 255) << 8) |
              ((k2[10] & 255) << 16) |
              ((k2[11] & 255) << 24),
            j4 =
              (k2[12] & 255) |
              ((k2[13] & 255) << 8) |
              ((k2[14] & 255) << 16) |
              ((k2[15] & 255) << 24),
            j5 =
              (c2[4] & 255) |
              ((c2[5] & 255) << 8) |
              ((c2[6] & 255) << 16) |
              ((c2[7] & 255) << 24),
            j6 =
              (p2[0] & 255) |
              ((p2[1] & 255) << 8) |
              ((p2[2] & 255) << 16) |
              ((p2[3] & 255) << 24),
            j7 =
              (p2[4] & 255) |
              ((p2[5] & 255) << 8) |
              ((p2[6] & 255) << 16) |
              ((p2[7] & 255) << 24),
            j8 =
              (p2[8] & 255) |
              ((p2[9] & 255) << 8) |
              ((p2[10] & 255) << 16) |
              ((p2[11] & 255) << 24),
            j9 =
              (p2[12] & 255) |
              ((p2[13] & 255) << 8) |
              ((p2[14] & 255) << 16) |
              ((p2[15] & 255) << 24),
            j10 =
              (c2[8] & 255) |
              ((c2[9] & 255) << 8) |
              ((c2[10] & 255) << 16) |
              ((c2[11] & 255) << 24),
            j11 =
              (k2[16] & 255) |
              ((k2[17] & 255) << 8) |
              ((k2[18] & 255) << 16) |
              ((k2[19] & 255) << 24),
            j12 =
              (k2[20] & 255) |
              ((k2[21] & 255) << 8) |
              ((k2[22] & 255) << 16) |
              ((k2[23] & 255) << 24),
            j13 =
              (k2[24] & 255) |
              ((k2[25] & 255) << 8) |
              ((k2[26] & 255) << 16) |
              ((k2[27] & 255) << 24),
            j14 =
              (k2[28] & 255) |
              ((k2[29] & 255) << 8) |
              ((k2[30] & 255) << 16) |
              ((k2[31] & 255) << 24),
            j15 =
              (c2[12] & 255) |
              ((c2[13] & 255) << 8) |
              ((c2[14] & 255) << 16) |
              ((c2[15] & 255) << 24);
          var x0 = j0,
            x1 = j1,
            x2 = j2,
            x3 = j3,
            x4 = j4,
            x5 = j5,
            x6 = j6,
            x7 = j7,
            x8 = j8,
            x9 = j9,
            x10 = j10,
            x11 = j11,
            x12 = j12,
            x13 = j13,
            x14 = j14,
            x15 = j15,
            u2;
          for (var i = 0; i < 20; i += 2) {
            u2 = (x0 + x12) | 0;
            x4 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x4 + x0) | 0;
            x8 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x8 + x4) | 0;
            x12 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x12 + x8) | 0;
            x0 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x5 + x1) | 0;
            x9 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x9 + x5) | 0;
            x13 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x13 + x9) | 0;
            x1 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x1 + x13) | 0;
            x5 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x10 + x6) | 0;
            x14 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x14 + x10) | 0;
            x2 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x2 + x14) | 0;
            x6 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x6 + x2) | 0;
            x10 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x15 + x11) | 0;
            x3 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x3 + x15) | 0;
            x7 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x7 + x3) | 0;
            x11 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x11 + x7) | 0;
            x15 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x0 + x3) | 0;
            x1 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x1 + x0) | 0;
            x2 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x2 + x1) | 0;
            x3 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x3 + x2) | 0;
            x0 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x5 + x4) | 0;
            x6 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x6 + x5) | 0;
            x7 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x7 + x6) | 0;
            x4 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x4 + x7) | 0;
            x5 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x10 + x9) | 0;
            x11 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x11 + x10) | 0;
            x8 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x8 + x11) | 0;
            x9 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x9 + x8) | 0;
            x10 ^= (u2 << 18) | (u2 >>> (32 - 18));
            u2 = (x15 + x14) | 0;
            x12 ^= (u2 << 7) | (u2 >>> (32 - 7));
            u2 = (x12 + x15) | 0;
            x13 ^= (u2 << 9) | (u2 >>> (32 - 9));
            u2 = (x13 + x12) | 0;
            x14 ^= (u2 << 13) | (u2 >>> (32 - 13));
            u2 = (x14 + x13) | 0;
            x15 ^= (u2 << 18) | (u2 >>> (32 - 18));
          }
          o2[0] = (x0 >>> 0) & 255;
          o2[1] = (x0 >>> 8) & 255;
          o2[2] = (x0 >>> 16) & 255;
          o2[3] = (x0 >>> 24) & 255;
          o2[4] = (x5 >>> 0) & 255;
          o2[5] = (x5 >>> 8) & 255;
          o2[6] = (x5 >>> 16) & 255;
          o2[7] = (x5 >>> 24) & 255;
          o2[8] = (x10 >>> 0) & 255;
          o2[9] = (x10 >>> 8) & 255;
          o2[10] = (x10 >>> 16) & 255;
          o2[11] = (x10 >>> 24) & 255;
          o2[12] = (x15 >>> 0) & 255;
          o2[13] = (x15 >>> 8) & 255;
          o2[14] = (x15 >>> 16) & 255;
          o2[15] = (x15 >>> 24) & 255;
          o2[16] = (x6 >>> 0) & 255;
          o2[17] = (x6 >>> 8) & 255;
          o2[18] = (x6 >>> 16) & 255;
          o2[19] = (x6 >>> 24) & 255;
          o2[20] = (x7 >>> 0) & 255;
          o2[21] = (x7 >>> 8) & 255;
          o2[22] = (x7 >>> 16) & 255;
          o2[23] = (x7 >>> 24) & 255;
          o2[24] = (x8 >>> 0) & 255;
          o2[25] = (x8 >>> 8) & 255;
          o2[26] = (x8 >>> 16) & 255;
          o2[27] = (x8 >>> 24) & 255;
          o2[28] = (x9 >>> 0) & 255;
          o2[29] = (x9 >>> 8) & 255;
          o2[30] = (x9 >>> 16) & 255;
          o2[31] = (x9 >>> 24) & 255;
        }
        function crypto_core_salsa20(out, inp, k2, c2) {
          core_salsa20(out, inp, k2, c2);
        }
        function crypto_core_hsalsa20(out, inp, k2, c2) {
          core_hsalsa20(out, inp, k2, c2);
        }
        var sigma = new Uint8Array([
          101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32,
          107,
        ]);
        function crypto_stream_salsa20_xor(c2, cpos, m2, mpos, b2, n, k2) {
          var z2 = new Uint8Array(16),
            x2 = new Uint8Array(64);
          var u2, i;
          for (i = 0; i < 16; i++) z2[i] = 0;
          for (i = 0; i < 8; i++) z2[i] = n[i];
          while (b2 >= 64) {
            crypto_core_salsa20(x2, z2, k2, sigma);
            for (i = 0; i < 64; i++) c2[cpos + i] = m2[mpos + i] ^ x2[i];
            u2 = 1;
            for (i = 8; i < 16; i++) {
              u2 = (u2 + (z2[i] & 255)) | 0;
              z2[i] = u2 & 255;
              u2 >>>= 8;
            }
            b2 -= 64;
            cpos += 64;
            mpos += 64;
          }
          if (b2 > 0) {
            crypto_core_salsa20(x2, z2, k2, sigma);
            for (i = 0; i < b2; i++) c2[cpos + i] = m2[mpos + i] ^ x2[i];
          }
          return 0;
        }
        function crypto_stream_salsa20(c2, cpos, b2, n, k2) {
          var z2 = new Uint8Array(16),
            x2 = new Uint8Array(64);
          var u2, i;
          for (i = 0; i < 16; i++) z2[i] = 0;
          for (i = 0; i < 8; i++) z2[i] = n[i];
          while (b2 >= 64) {
            crypto_core_salsa20(x2, z2, k2, sigma);
            for (i = 0; i < 64; i++) c2[cpos + i] = x2[i];
            u2 = 1;
            for (i = 8; i < 16; i++) {
              u2 = (u2 + (z2[i] & 255)) | 0;
              z2[i] = u2 & 255;
              u2 >>>= 8;
            }
            b2 -= 64;
            cpos += 64;
          }
          if (b2 > 0) {
            crypto_core_salsa20(x2, z2, k2, sigma);
            for (i = 0; i < b2; i++) c2[cpos + i] = x2[i];
          }
          return 0;
        }
        function crypto_stream(c2, cpos, d2, n, k2) {
          var s2 = new Uint8Array(32);
          crypto_core_hsalsa20(s2, n, k2, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
          return crypto_stream_salsa20(c2, cpos, d2, sn, s2);
        }
        function crypto_stream_xor(c2, cpos, m2, mpos, d2, n, k2) {
          var s2 = new Uint8Array(32);
          crypto_core_hsalsa20(s2, n, k2, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
          return crypto_stream_salsa20_xor(c2, cpos, m2, mpos, d2, sn, s2);
        }
        var poly1305 = function (key2) {
          this.buffer = new Uint8Array(16);
          this.r = new Uint16Array(10);
          this.h = new Uint16Array(10);
          this.pad = new Uint16Array(8);
          this.leftover = 0;
          this.fin = 0;
          var t0, t1, t2, t3, t4, t5, t6, t7;
          t0 = (key2[0] & 255) | ((key2[1] & 255) << 8);
          this.r[0] = t0 & 8191;
          t1 = (key2[2] & 255) | ((key2[3] & 255) << 8);
          this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 8191;
          t2 = (key2[4] & 255) | ((key2[5] & 255) << 8);
          this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 7939;
          t3 = (key2[6] & 255) | ((key2[7] & 255) << 8);
          this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 8191;
          t4 = (key2[8] & 255) | ((key2[9] & 255) << 8);
          this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 255;
          this.r[5] = (t4 >>> 1) & 8190;
          t5 = (key2[10] & 255) | ((key2[11] & 255) << 8);
          this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 8191;
          t6 = (key2[12] & 255) | ((key2[13] & 255) << 8);
          this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 8065;
          t7 = (key2[14] & 255) | ((key2[15] & 255) << 8);
          this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 8191;
          this.r[9] = (t7 >>> 5) & 127;
          this.pad[0] = (key2[16] & 255) | ((key2[17] & 255) << 8);
          this.pad[1] = (key2[18] & 255) | ((key2[19] & 255) << 8);
          this.pad[2] = (key2[20] & 255) | ((key2[21] & 255) << 8);
          this.pad[3] = (key2[22] & 255) | ((key2[23] & 255) << 8);
          this.pad[4] = (key2[24] & 255) | ((key2[25] & 255) << 8);
          this.pad[5] = (key2[26] & 255) | ((key2[27] & 255) << 8);
          this.pad[6] = (key2[28] & 255) | ((key2[29] & 255) << 8);
          this.pad[7] = (key2[30] & 255) | ((key2[31] & 255) << 8);
        };
        poly1305.prototype.blocks = function (m2, mpos, bytes) {
          var hibit = this.fin ? 0 : 1 << 11;
          var t0, t1, t2, t3, t4, t5, t6, t7, c2;
          var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
          var h0 = this.h[0],
            h1 = this.h[1],
            h2 = this.h[2],
            h3 = this.h[3],
            h4 = this.h[4],
            h5 = this.h[5],
            h6 = this.h[6],
            h7 = this.h[7],
            h8 = this.h[8],
            h9 = this.h[9];
          var r0 = this.r[0],
            r1 = this.r[1],
            r2 = this.r[2],
            r3 = this.r[3],
            r4 = this.r[4],
            r5 = this.r[5],
            r6 = this.r[6],
            r7 = this.r[7],
            r8 = this.r[8],
            r9 = this.r[9];
          while (bytes >= 16) {
            t0 = (m2[mpos + 0] & 255) | ((m2[mpos + 1] & 255) << 8);
            h0 += t0 & 8191;
            t1 = (m2[mpos + 2] & 255) | ((m2[mpos + 3] & 255) << 8);
            h1 += ((t0 >>> 13) | (t1 << 3)) & 8191;
            t2 = (m2[mpos + 4] & 255) | ((m2[mpos + 5] & 255) << 8);
            h2 += ((t1 >>> 10) | (t2 << 6)) & 8191;
            t3 = (m2[mpos + 6] & 255) | ((m2[mpos + 7] & 255) << 8);
            h3 += ((t2 >>> 7) | (t3 << 9)) & 8191;
            t4 = (m2[mpos + 8] & 255) | ((m2[mpos + 9] & 255) << 8);
            h4 += ((t3 >>> 4) | (t4 << 12)) & 8191;
            h5 += (t4 >>> 1) & 8191;
            t5 = (m2[mpos + 10] & 255) | ((m2[mpos + 11] & 255) << 8);
            h6 += ((t4 >>> 14) | (t5 << 2)) & 8191;
            t6 = (m2[mpos + 12] & 255) | ((m2[mpos + 13] & 255) << 8);
            h7 += ((t5 >>> 11) | (t6 << 5)) & 8191;
            t7 = (m2[mpos + 14] & 255) | ((m2[mpos + 15] & 255) << 8);
            h8 += ((t6 >>> 8) | (t7 << 8)) & 8191;
            h9 += (t7 >>> 5) | hibit;
            c2 = 0;
            d0 = c2;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c2 = d0 >>> 13;
            d0 &= 8191;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c2 += d0 >>> 13;
            d0 &= 8191;
            d1 = c2;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c2 = d1 >>> 13;
            d1 &= 8191;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c2 += d1 >>> 13;
            d1 &= 8191;
            d2 = c2;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c2 = d2 >>> 13;
            d2 &= 8191;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c2 += d2 >>> 13;
            d2 &= 8191;
            d3 = c2;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c2 = d3 >>> 13;
            d3 &= 8191;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c2 += d3 >>> 13;
            d3 &= 8191;
            d4 = c2;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c2 = d4 >>> 13;
            d4 &= 8191;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c2 += d4 >>> 13;
            d4 &= 8191;
            d5 = c2;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c2 = d5 >>> 13;
            d5 &= 8191;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c2 += d5 >>> 13;
            d5 &= 8191;
            d6 = c2;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c2 = d6 >>> 13;
            d6 &= 8191;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c2 += d6 >>> 13;
            d6 &= 8191;
            d7 = c2;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c2 = d7 >>> 13;
            d7 &= 8191;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c2 += d7 >>> 13;
            d7 &= 8191;
            d8 = c2;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c2 = d8 >>> 13;
            d8 &= 8191;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c2 += d8 >>> 13;
            d8 &= 8191;
            d9 = c2;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c2 = d9 >>> 13;
            d9 &= 8191;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c2 += d9 >>> 13;
            d9 &= 8191;
            c2 = ((c2 << 2) + c2) | 0;
            c2 = (c2 + d0) | 0;
            d0 = c2 & 8191;
            c2 = c2 >>> 13;
            d1 += c2;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
          }
          this.h[0] = h0;
          this.h[1] = h1;
          this.h[2] = h2;
          this.h[3] = h3;
          this.h[4] = h4;
          this.h[5] = h5;
          this.h[6] = h6;
          this.h[7] = h7;
          this.h[8] = h8;
          this.h[9] = h9;
        };
        poly1305.prototype.finish = function (mac, macpos) {
          var g2 = new Uint16Array(10);
          var c2, mask, f2, i;
          if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for (; i < 16; i++) this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
          }
          c2 = this.h[1] >>> 13;
          this.h[1] &= 8191;
          for (i = 2; i < 10; i++) {
            this.h[i] += c2;
            c2 = this.h[i] >>> 13;
            this.h[i] &= 8191;
          }
          this.h[0] += c2 * 5;
          c2 = this.h[0] >>> 13;
          this.h[0] &= 8191;
          this.h[1] += c2;
          c2 = this.h[1] >>> 13;
          this.h[1] &= 8191;
          this.h[2] += c2;
          g2[0] = this.h[0] + 5;
          c2 = g2[0] >>> 13;
          g2[0] &= 8191;
          for (i = 1; i < 10; i++) {
            g2[i] = this.h[i] + c2;
            c2 = g2[i] >>> 13;
            g2[i] &= 8191;
          }
          g2[9] -= 1 << 13;
          mask = (c2 ^ 1) - 1;
          for (i = 0; i < 10; i++) g2[i] &= mask;
          mask = ~mask;
          for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g2[i];
          this.h[0] = (this.h[0] | (this.h[1] << 13)) & 65535;
          this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 65535;
          this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 65535;
          this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 65535;
          this.h[4] =
            ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 65535;
          this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 65535;
          this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 65535;
          this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 65535;
          f2 = this.h[0] + this.pad[0];
          this.h[0] = f2 & 65535;
          for (i = 1; i < 8; i++) {
            f2 = (((this.h[i] + this.pad[i]) | 0) + (f2 >>> 16)) | 0;
            this.h[i] = f2 & 65535;
          }
          mac[macpos + 0] = (this.h[0] >>> 0) & 255;
          mac[macpos + 1] = (this.h[0] >>> 8) & 255;
          mac[macpos + 2] = (this.h[1] >>> 0) & 255;
          mac[macpos + 3] = (this.h[1] >>> 8) & 255;
          mac[macpos + 4] = (this.h[2] >>> 0) & 255;
          mac[macpos + 5] = (this.h[2] >>> 8) & 255;
          mac[macpos + 6] = (this.h[3] >>> 0) & 255;
          mac[macpos + 7] = (this.h[3] >>> 8) & 255;
          mac[macpos + 8] = (this.h[4] >>> 0) & 255;
          mac[macpos + 9] = (this.h[4] >>> 8) & 255;
          mac[macpos + 10] = (this.h[5] >>> 0) & 255;
          mac[macpos + 11] = (this.h[5] >>> 8) & 255;
          mac[macpos + 12] = (this.h[6] >>> 0) & 255;
          mac[macpos + 13] = (this.h[6] >>> 8) & 255;
          mac[macpos + 14] = (this.h[7] >>> 0) & 255;
          mac[macpos + 15] = (this.h[7] >>> 8) & 255;
        };
        poly1305.prototype.update = function (m2, mpos, bytes) {
          var i, want;
          if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes) want = bytes;
            for (i = 0; i < want; i++)
              this.buffer[this.leftover + i] = m2[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16) return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
          }
          if (bytes >= 16) {
            want = bytes - (bytes % 16);
            this.blocks(m2, mpos, want);
            mpos += want;
            bytes -= want;
          }
          if (bytes) {
            for (i = 0; i < bytes; i++)
              this.buffer[this.leftover + i] = m2[mpos + i];
            this.leftover += bytes;
          }
        };
        function crypto_onetimeauth(out, outpos, m2, mpos, n, k2) {
          var s2 = new poly1305(k2);
          s2.update(m2, mpos, n);
          s2.finish(out, outpos);
          return 0;
        }
        function crypto_onetimeauth_verify(h2, hpos, m2, mpos, n, k2) {
          var x2 = new Uint8Array(16);
          crypto_onetimeauth(x2, 0, m2, mpos, n, k2);
          return crypto_verify_16(h2, hpos, x2, 0);
        }
        function crypto_secretbox(c2, m2, d2, n, k2) {
          var i;
          if (d2 < 32) return -1;
          crypto_stream_xor(c2, 0, m2, 0, d2, n, k2);
          crypto_onetimeauth(c2, 16, c2, 32, d2 - 32, c2);
          for (i = 0; i < 16; i++) c2[i] = 0;
          return 0;
        }
        function crypto_secretbox_open(m2, c2, d2, n, k2) {
          var i;
          var x2 = new Uint8Array(32);
          if (d2 < 32) return -1;
          crypto_stream(x2, 0, 32, n, k2);
          if (crypto_onetimeauth_verify(c2, 16, c2, 32, d2 - 32, x2) !== 0)
            return -1;
          crypto_stream_xor(m2, 0, c2, 0, d2, n, k2);
          for (i = 0; i < 32; i++) m2[i] = 0;
          return 0;
        }
        function set25519(r, a2) {
          var i;
          for (i = 0; i < 16; i++) r[i] = a2[i] | 0;
        }
        function car25519(o2) {
          var i,
            v2,
            c2 = 1;
          for (i = 0; i < 16; i++) {
            v2 = o2[i] + c2 + 65535;
            c2 = Math.floor(v2 / 65536);
            o2[i] = v2 - c2 * 65536;
          }
          o2[0] += c2 - 1 + 37 * (c2 - 1);
        }
        function sel25519(p2, q2, b2) {
          var t2,
            c2 = ~(b2 - 1);
          for (var i = 0; i < 16; i++) {
            t2 = c2 & (p2[i] ^ q2[i]);
            p2[i] ^= t2;
            q2[i] ^= t2;
          }
        }
        function pack25519(o2, n) {
          var i, j2, b2;
          var m2 = gf(),
            t2 = gf();
          for (i = 0; i < 16; i++) t2[i] = n[i];
          car25519(t2);
          car25519(t2);
          car25519(t2);
          for (j2 = 0; j2 < 2; j2++) {
            m2[0] = t2[0] - 65517;
            for (i = 1; i < 15; i++) {
              m2[i] = t2[i] - 65535 - ((m2[i - 1] >> 16) & 1);
              m2[i - 1] &= 65535;
            }
            m2[15] = t2[15] - 32767 - ((m2[14] >> 16) & 1);
            b2 = (m2[15] >> 16) & 1;
            m2[14] &= 65535;
            sel25519(t2, m2, 1 - b2);
          }
          for (i = 0; i < 16; i++) {
            o2[2 * i] = t2[i] & 255;
            o2[2 * i + 1] = t2[i] >> 8;
          }
        }
        function neq25519(a2, b2) {
          var c2 = new Uint8Array(32),
            d2 = new Uint8Array(32);
          pack25519(c2, a2);
          pack25519(d2, b2);
          return crypto_verify_32(c2, 0, d2, 0);
        }
        function par25519(a2) {
          var d2 = new Uint8Array(32);
          pack25519(d2, a2);
          return d2[0] & 1;
        }
        function unpack25519(o2, n) {
          var i;
          for (i = 0; i < 16; i++) o2[i] = n[2 * i] + (n[2 * i + 1] << 8);
          o2[15] &= 32767;
        }
        function A2(o2, a2, b2) {
          for (var i = 0; i < 16; i++) o2[i] = a2[i] + b2[i];
        }
        function Z(o2, a2, b2) {
          for (var i = 0; i < 16; i++) o2[i] = a2[i] - b2[i];
        }
        function M2(o2, a2, b2) {
          var v2,
            c2,
            t0 = 0,
            t1 = 0,
            t2 = 0,
            t3 = 0,
            t4 = 0,
            t5 = 0,
            t6 = 0,
            t7 = 0,
            t8 = 0,
            t9 = 0,
            t10 = 0,
            t11 = 0,
            t12 = 0,
            t13 = 0,
            t14 = 0,
            t15 = 0,
            t16 = 0,
            t17 = 0,
            t18 = 0,
            t19 = 0,
            t20 = 0,
            t21 = 0,
            t22 = 0,
            t23 = 0,
            t24 = 0,
            t25 = 0,
            t26 = 0,
            t27 = 0,
            t28 = 0,
            t29 = 0,
            t30 = 0,
            b0 = b2[0],
            b1 = b2[1],
            b22 = b2[2],
            b3 = b2[3],
            b4 = b2[4],
            b5 = b2[5],
            b6 = b2[6],
            b7 = b2[7],
            b8 = b2[8],
            b9 = b2[9],
            b10 = b2[10],
            b11 = b2[11],
            b12 = b2[12],
            b13 = b2[13],
            b14 = b2[14],
            b15 = b2[15];
          v2 = a2[0];
          t0 += v2 * b0;
          t1 += v2 * b1;
          t2 += v2 * b22;
          t3 += v2 * b3;
          t4 += v2 * b4;
          t5 += v2 * b5;
          t6 += v2 * b6;
          t7 += v2 * b7;
          t8 += v2 * b8;
          t9 += v2 * b9;
          t10 += v2 * b10;
          t11 += v2 * b11;
          t12 += v2 * b12;
          t13 += v2 * b13;
          t14 += v2 * b14;
          t15 += v2 * b15;
          v2 = a2[1];
          t1 += v2 * b0;
          t2 += v2 * b1;
          t3 += v2 * b22;
          t4 += v2 * b3;
          t5 += v2 * b4;
          t6 += v2 * b5;
          t7 += v2 * b6;
          t8 += v2 * b7;
          t9 += v2 * b8;
          t10 += v2 * b9;
          t11 += v2 * b10;
          t12 += v2 * b11;
          t13 += v2 * b12;
          t14 += v2 * b13;
          t15 += v2 * b14;
          t16 += v2 * b15;
          v2 = a2[2];
          t2 += v2 * b0;
          t3 += v2 * b1;
          t4 += v2 * b22;
          t5 += v2 * b3;
          t6 += v2 * b4;
          t7 += v2 * b5;
          t8 += v2 * b6;
          t9 += v2 * b7;
          t10 += v2 * b8;
          t11 += v2 * b9;
          t12 += v2 * b10;
          t13 += v2 * b11;
          t14 += v2 * b12;
          t15 += v2 * b13;
          t16 += v2 * b14;
          t17 += v2 * b15;
          v2 = a2[3];
          t3 += v2 * b0;
          t4 += v2 * b1;
          t5 += v2 * b22;
          t6 += v2 * b3;
          t7 += v2 * b4;
          t8 += v2 * b5;
          t9 += v2 * b6;
          t10 += v2 * b7;
          t11 += v2 * b8;
          t12 += v2 * b9;
          t13 += v2 * b10;
          t14 += v2 * b11;
          t15 += v2 * b12;
          t16 += v2 * b13;
          t17 += v2 * b14;
          t18 += v2 * b15;
          v2 = a2[4];
          t4 += v2 * b0;
          t5 += v2 * b1;
          t6 += v2 * b22;
          t7 += v2 * b3;
          t8 += v2 * b4;
          t9 += v2 * b5;
          t10 += v2 * b6;
          t11 += v2 * b7;
          t12 += v2 * b8;
          t13 += v2 * b9;
          t14 += v2 * b10;
          t15 += v2 * b11;
          t16 += v2 * b12;
          t17 += v2 * b13;
          t18 += v2 * b14;
          t19 += v2 * b15;
          v2 = a2[5];
          t5 += v2 * b0;
          t6 += v2 * b1;
          t7 += v2 * b22;
          t8 += v2 * b3;
          t9 += v2 * b4;
          t10 += v2 * b5;
          t11 += v2 * b6;
          t12 += v2 * b7;
          t13 += v2 * b8;
          t14 += v2 * b9;
          t15 += v2 * b10;
          t16 += v2 * b11;
          t17 += v2 * b12;
          t18 += v2 * b13;
          t19 += v2 * b14;
          t20 += v2 * b15;
          v2 = a2[6];
          t6 += v2 * b0;
          t7 += v2 * b1;
          t8 += v2 * b22;
          t9 += v2 * b3;
          t10 += v2 * b4;
          t11 += v2 * b5;
          t12 += v2 * b6;
          t13 += v2 * b7;
          t14 += v2 * b8;
          t15 += v2 * b9;
          t16 += v2 * b10;
          t17 += v2 * b11;
          t18 += v2 * b12;
          t19 += v2 * b13;
          t20 += v2 * b14;
          t21 += v2 * b15;
          v2 = a2[7];
          t7 += v2 * b0;
          t8 += v2 * b1;
          t9 += v2 * b22;
          t10 += v2 * b3;
          t11 += v2 * b4;
          t12 += v2 * b5;
          t13 += v2 * b6;
          t14 += v2 * b7;
          t15 += v2 * b8;
          t16 += v2 * b9;
          t17 += v2 * b10;
          t18 += v2 * b11;
          t19 += v2 * b12;
          t20 += v2 * b13;
          t21 += v2 * b14;
          t22 += v2 * b15;
          v2 = a2[8];
          t8 += v2 * b0;
          t9 += v2 * b1;
          t10 += v2 * b22;
          t11 += v2 * b3;
          t12 += v2 * b4;
          t13 += v2 * b5;
          t14 += v2 * b6;
          t15 += v2 * b7;
          t16 += v2 * b8;
          t17 += v2 * b9;
          t18 += v2 * b10;
          t19 += v2 * b11;
          t20 += v2 * b12;
          t21 += v2 * b13;
          t22 += v2 * b14;
          t23 += v2 * b15;
          v2 = a2[9];
          t9 += v2 * b0;
          t10 += v2 * b1;
          t11 += v2 * b22;
          t12 += v2 * b3;
          t13 += v2 * b4;
          t14 += v2 * b5;
          t15 += v2 * b6;
          t16 += v2 * b7;
          t17 += v2 * b8;
          t18 += v2 * b9;
          t19 += v2 * b10;
          t20 += v2 * b11;
          t21 += v2 * b12;
          t22 += v2 * b13;
          t23 += v2 * b14;
          t24 += v2 * b15;
          v2 = a2[10];
          t10 += v2 * b0;
          t11 += v2 * b1;
          t12 += v2 * b22;
          t13 += v2 * b3;
          t14 += v2 * b4;
          t15 += v2 * b5;
          t16 += v2 * b6;
          t17 += v2 * b7;
          t18 += v2 * b8;
          t19 += v2 * b9;
          t20 += v2 * b10;
          t21 += v2 * b11;
          t22 += v2 * b12;
          t23 += v2 * b13;
          t24 += v2 * b14;
          t25 += v2 * b15;
          v2 = a2[11];
          t11 += v2 * b0;
          t12 += v2 * b1;
          t13 += v2 * b22;
          t14 += v2 * b3;
          t15 += v2 * b4;
          t16 += v2 * b5;
          t17 += v2 * b6;
          t18 += v2 * b7;
          t19 += v2 * b8;
          t20 += v2 * b9;
          t21 += v2 * b10;
          t22 += v2 * b11;
          t23 += v2 * b12;
          t24 += v2 * b13;
          t25 += v2 * b14;
          t26 += v2 * b15;
          v2 = a2[12];
          t12 += v2 * b0;
          t13 += v2 * b1;
          t14 += v2 * b22;
          t15 += v2 * b3;
          t16 += v2 * b4;
          t17 += v2 * b5;
          t18 += v2 * b6;
          t19 += v2 * b7;
          t20 += v2 * b8;
          t21 += v2 * b9;
          t22 += v2 * b10;
          t23 += v2 * b11;
          t24 += v2 * b12;
          t25 += v2 * b13;
          t26 += v2 * b14;
          t27 += v2 * b15;
          v2 = a2[13];
          t13 += v2 * b0;
          t14 += v2 * b1;
          t15 += v2 * b22;
          t16 += v2 * b3;
          t17 += v2 * b4;
          t18 += v2 * b5;
          t19 += v2 * b6;
          t20 += v2 * b7;
          t21 += v2 * b8;
          t22 += v2 * b9;
          t23 += v2 * b10;
          t24 += v2 * b11;
          t25 += v2 * b12;
          t26 += v2 * b13;
          t27 += v2 * b14;
          t28 += v2 * b15;
          v2 = a2[14];
          t14 += v2 * b0;
          t15 += v2 * b1;
          t16 += v2 * b22;
          t17 += v2 * b3;
          t18 += v2 * b4;
          t19 += v2 * b5;
          t20 += v2 * b6;
          t21 += v2 * b7;
          t22 += v2 * b8;
          t23 += v2 * b9;
          t24 += v2 * b10;
          t25 += v2 * b11;
          t26 += v2 * b12;
          t27 += v2 * b13;
          t28 += v2 * b14;
          t29 += v2 * b15;
          v2 = a2[15];
          t15 += v2 * b0;
          t16 += v2 * b1;
          t17 += v2 * b22;
          t18 += v2 * b3;
          t19 += v2 * b4;
          t20 += v2 * b5;
          t21 += v2 * b6;
          t22 += v2 * b7;
          t23 += v2 * b8;
          t24 += v2 * b9;
          t25 += v2 * b10;
          t26 += v2 * b11;
          t27 += v2 * b12;
          t28 += v2 * b13;
          t29 += v2 * b14;
          t30 += v2 * b15;
          t0 += 38 * t16;
          t1 += 38 * t17;
          t2 += 38 * t18;
          t3 += 38 * t19;
          t4 += 38 * t20;
          t5 += 38 * t21;
          t6 += 38 * t22;
          t7 += 38 * t23;
          t8 += 38 * t24;
          t9 += 38 * t25;
          t10 += 38 * t26;
          t11 += 38 * t27;
          t12 += 38 * t28;
          t13 += 38 * t29;
          t14 += 38 * t30;
          c2 = 1;
          v2 = t0 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t0 = v2 - c2 * 65536;
          v2 = t1 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t1 = v2 - c2 * 65536;
          v2 = t2 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t2 = v2 - c2 * 65536;
          v2 = t3 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t3 = v2 - c2 * 65536;
          v2 = t4 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t4 = v2 - c2 * 65536;
          v2 = t5 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t5 = v2 - c2 * 65536;
          v2 = t6 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t6 = v2 - c2 * 65536;
          v2 = t7 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t7 = v2 - c2 * 65536;
          v2 = t8 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t8 = v2 - c2 * 65536;
          v2 = t9 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t9 = v2 - c2 * 65536;
          v2 = t10 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t10 = v2 - c2 * 65536;
          v2 = t11 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t11 = v2 - c2 * 65536;
          v2 = t12 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t12 = v2 - c2 * 65536;
          v2 = t13 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t13 = v2 - c2 * 65536;
          v2 = t14 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t14 = v2 - c2 * 65536;
          v2 = t15 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t15 = v2 - c2 * 65536;
          t0 += c2 - 1 + 37 * (c2 - 1);
          c2 = 1;
          v2 = t0 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t0 = v2 - c2 * 65536;
          v2 = t1 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t1 = v2 - c2 * 65536;
          v2 = t2 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t2 = v2 - c2 * 65536;
          v2 = t3 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t3 = v2 - c2 * 65536;
          v2 = t4 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t4 = v2 - c2 * 65536;
          v2 = t5 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t5 = v2 - c2 * 65536;
          v2 = t6 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t6 = v2 - c2 * 65536;
          v2 = t7 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t7 = v2 - c2 * 65536;
          v2 = t8 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t8 = v2 - c2 * 65536;
          v2 = t9 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t9 = v2 - c2 * 65536;
          v2 = t10 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t10 = v2 - c2 * 65536;
          v2 = t11 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t11 = v2 - c2 * 65536;
          v2 = t12 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t12 = v2 - c2 * 65536;
          v2 = t13 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t13 = v2 - c2 * 65536;
          v2 = t14 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t14 = v2 - c2 * 65536;
          v2 = t15 + c2 + 65535;
          c2 = Math.floor(v2 / 65536);
          t15 = v2 - c2 * 65536;
          t0 += c2 - 1 + 37 * (c2 - 1);
          o2[0] = t0;
          o2[1] = t1;
          o2[2] = t2;
          o2[3] = t3;
          o2[4] = t4;
          o2[5] = t5;
          o2[6] = t6;
          o2[7] = t7;
          o2[8] = t8;
          o2[9] = t9;
          o2[10] = t10;
          o2[11] = t11;
          o2[12] = t12;
          o2[13] = t13;
          o2[14] = t14;
          o2[15] = t15;
        }
        function S2(o2, a2) {
          M2(o2, a2, a2);
        }
        function inv25519(o2, i) {
          var c2 = gf();
          var a2;
          for (a2 = 0; a2 < 16; a2++) c2[a2] = i[a2];
          for (a2 = 253; a2 >= 0; a2--) {
            S2(c2, c2);
            if (a2 !== 2 && a2 !== 4) M2(c2, c2, i);
          }
          for (a2 = 0; a2 < 16; a2++) o2[a2] = c2[a2];
        }
        function pow2523(o2, i) {
          var c2 = gf();
          var a2;
          for (a2 = 0; a2 < 16; a2++) c2[a2] = i[a2];
          for (a2 = 250; a2 >= 0; a2--) {
            S2(c2, c2);
            if (a2 !== 1) M2(c2, c2, i);
          }
          for (a2 = 0; a2 < 16; a2++) o2[a2] = c2[a2];
        }
        function crypto_scalarmult(q2, n, p2) {
          var z2 = new Uint8Array(32);
          var x2 = new Float64Array(80),
            r,
            i;
          var a2 = gf(),
            b2 = gf(),
            c2 = gf(),
            d2 = gf(),
            e = gf(),
            f2 = gf();
          for (i = 0; i < 31; i++) z2[i] = n[i];
          z2[31] = (n[31] & 127) | 64;
          z2[0] &= 248;
          unpack25519(x2, p2);
          for (i = 0; i < 16; i++) {
            b2[i] = x2[i];
            d2[i] = a2[i] = c2[i] = 0;
          }
          a2[0] = d2[0] = 1;
          for (i = 254; i >= 0; --i) {
            r = (z2[i >>> 3] >>> (i & 7)) & 1;
            sel25519(a2, b2, r);
            sel25519(c2, d2, r);
            A2(e, a2, c2);
            Z(a2, a2, c2);
            A2(c2, b2, d2);
            Z(b2, b2, d2);
            S2(d2, e);
            S2(f2, a2);
            M2(a2, c2, a2);
            M2(c2, b2, e);
            A2(e, a2, c2);
            Z(a2, a2, c2);
            S2(b2, a2);
            Z(c2, d2, f2);
            M2(a2, c2, _121665);
            A2(a2, a2, d2);
            M2(c2, c2, a2);
            M2(a2, d2, f2);
            M2(d2, b2, x2);
            S2(b2, e);
            sel25519(a2, b2, r);
            sel25519(c2, d2, r);
          }
          for (i = 0; i < 16; i++) {
            x2[i + 16] = a2[i];
            x2[i + 32] = c2[i];
            x2[i + 48] = b2[i];
            x2[i + 64] = d2[i];
          }
          var x32 = x2.subarray(32);
          var x16 = x2.subarray(16);
          inv25519(x32, x32);
          M2(x16, x16, x32);
          pack25519(q2, x16);
          return 0;
        }
        function crypto_scalarmult_base(q2, n) {
          return crypto_scalarmult(q2, n, _9);
        }
        function crypto_box_keypair(y2, x2) {
          randombytes(x2, 32);
          return crypto_scalarmult_base(y2, x2);
        }
        function crypto_box_beforenm(k2, y2, x2) {
          var s2 = new Uint8Array(32);
          crypto_scalarmult(s2, x2, y2);
          return crypto_core_hsalsa20(k2, _0, s2, sigma);
        }
        var crypto_box_afternm = crypto_secretbox;
        var crypto_box_open_afternm = crypto_secretbox_open;
        function crypto_box(c2, m2, d2, n, y2, x2) {
          var k2 = new Uint8Array(32);
          crypto_box_beforenm(k2, y2, x2);
          return crypto_box_afternm(c2, m2, d2, n, k2);
        }
        function crypto_box_open(m2, c2, d2, n, y2, x2) {
          var k2 = new Uint8Array(32);
          crypto_box_beforenm(k2, y2, x2);
          return crypto_box_open_afternm(m2, c2, d2, n, k2);
        }
        var K = [
          1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399,
          3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265,
          2453635748, 2937671579, 2870763221, 3664609560, 3624381080,
          2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987,
          3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103,
          633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774,
          944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983,
          1495990901, 1249150122, 1856431235, 1555081692, 3175218132,
          1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016,
          2952996808, 2566594879, 3210313671, 3203337956, 3336571891,
          1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895,
          168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372,
          1522805485, 1396182291, 2643833823, 1695183700, 2343527390,
          1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627,
          2730485921, 1290863460, 2820302411, 3158454273, 3259730800,
          3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804,
          1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734,
          3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877,
          3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063,
          2003034995, 1747873779, 3602036899, 1955562222, 1575990012,
          2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044,
          2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573,
          3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711,
          3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554,
          174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315,
          685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100,
          1126000580, 2618297676, 1288033470, 3409855158, 1501505948,
          4234509866, 1607167915, 987167468, 1816402316, 1246189591,
        ];
        function crypto_hashblocks_hl(hh, hl, m2, n) {
          var wh = new Int32Array(16),
            wl = new Int32Array(16),
            bh0,
            bh1,
            bh2,
            bh3,
            bh4,
            bh5,
            bh6,
            bh7,
            bl0,
            bl1,
            bl2,
            bl3,
            bl4,
            bl5,
            bl6,
            bl7,
            th,
            tl,
            i,
            j2,
            h2,
            l2,
            a2,
            b2,
            c2,
            d2;
          var ah0 = hh[0],
            ah1 = hh[1],
            ah2 = hh[2],
            ah3 = hh[3],
            ah4 = hh[4],
            ah5 = hh[5],
            ah6 = hh[6],
            ah7 = hh[7],
            al0 = hl[0],
            al1 = hl[1],
            al2 = hl[2],
            al3 = hl[3],
            al4 = hl[4],
            al5 = hl[5],
            al6 = hl[6],
            al7 = hl[7];
          var pos = 0;
          while (n >= 128) {
            for (i = 0; i < 16; i++) {
              j2 = 8 * i + pos;
              wh[i] =
                (m2[j2 + 0] << 24) |
                (m2[j2 + 1] << 16) |
                (m2[j2 + 2] << 8) |
                m2[j2 + 3];
              wl[i] =
                (m2[j2 + 4] << 24) |
                (m2[j2 + 5] << 16) |
                (m2[j2 + 6] << 8) |
                m2[j2 + 7];
            }
            for (i = 0; i < 80; i++) {
              bh0 = ah0;
              bh1 = ah1;
              bh2 = ah2;
              bh3 = ah3;
              bh4 = ah4;
              bh5 = ah5;
              bh6 = ah6;
              bh7 = ah7;
              bl0 = al0;
              bl1 = al1;
              bl2 = al2;
              bl3 = al3;
              bl4 = al4;
              bl5 = al5;
              bl6 = al6;
              bl7 = al7;
              h2 = ah7;
              l2 = al7;
              a2 = l2 & 65535;
              b2 = l2 >>> 16;
              c2 = h2 & 65535;
              d2 = h2 >>> 16;
              h2 =
                ((ah4 >>> 14) | (al4 << (32 - 14))) ^
                ((ah4 >>> 18) | (al4 << (32 - 18))) ^
                ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
              l2 =
                ((al4 >>> 14) | (ah4 << (32 - 14))) ^
                ((al4 >>> 18) | (ah4 << (32 - 18))) ^
                ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              h2 = (ah4 & ah5) ^ (~ah4 & ah6);
              l2 = (al4 & al5) ^ (~al4 & al6);
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              h2 = K[i * 2];
              l2 = K[i * 2 + 1];
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              h2 = wh[i % 16];
              l2 = wl[i % 16];
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              b2 += a2 >>> 16;
              c2 += b2 >>> 16;
              d2 += c2 >>> 16;
              th = (c2 & 65535) | (d2 << 16);
              tl = (a2 & 65535) | (b2 << 16);
              h2 = th;
              l2 = tl;
              a2 = l2 & 65535;
              b2 = l2 >>> 16;
              c2 = h2 & 65535;
              d2 = h2 >>> 16;
              h2 =
                ((ah0 >>> 28) | (al0 << (32 - 28))) ^
                ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^
                ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
              l2 =
                ((al0 >>> 28) | (ah0 << (32 - 28))) ^
                ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^
                ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              h2 = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
              l2 = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              b2 += a2 >>> 16;
              c2 += b2 >>> 16;
              d2 += c2 >>> 16;
              bh7 = (c2 & 65535) | (d2 << 16);
              bl7 = (a2 & 65535) | (b2 << 16);
              h2 = bh3;
              l2 = bl3;
              a2 = l2 & 65535;
              b2 = l2 >>> 16;
              c2 = h2 & 65535;
              d2 = h2 >>> 16;
              h2 = th;
              l2 = tl;
              a2 += l2 & 65535;
              b2 += l2 >>> 16;
              c2 += h2 & 65535;
              d2 += h2 >>> 16;
              b2 += a2 >>> 16;
              c2 += b2 >>> 16;
              d2 += c2 >>> 16;
              bh3 = (c2 & 65535) | (d2 << 16);
              bl3 = (a2 & 65535) | (b2 << 16);
              ah1 = bh0;
              ah2 = bh1;
              ah3 = bh2;
              ah4 = bh3;
              ah5 = bh4;
              ah6 = bh5;
              ah7 = bh6;
              ah0 = bh7;
              al1 = bl0;
              al2 = bl1;
              al3 = bl2;
              al4 = bl3;
              al5 = bl4;
              al6 = bl5;
              al7 = bl6;
              al0 = bl7;
              if (i % 16 === 15) {
                for (j2 = 0; j2 < 16; j2++) {
                  h2 = wh[j2];
                  l2 = wl[j2];
                  a2 = l2 & 65535;
                  b2 = l2 >>> 16;
                  c2 = h2 & 65535;
                  d2 = h2 >>> 16;
                  h2 = wh[(j2 + 9) % 16];
                  l2 = wl[(j2 + 9) % 16];
                  a2 += l2 & 65535;
                  b2 += l2 >>> 16;
                  c2 += h2 & 65535;
                  d2 += h2 >>> 16;
                  th = wh[(j2 + 1) % 16];
                  tl = wl[(j2 + 1) % 16];
                  h2 =
                    ((th >>> 1) | (tl << (32 - 1))) ^
                    ((th >>> 8) | (tl << (32 - 8))) ^
                    (th >>> 7);
                  l2 =
                    ((tl >>> 1) | (th << (32 - 1))) ^
                    ((tl >>> 8) | (th << (32 - 8))) ^
                    ((tl >>> 7) | (th << (32 - 7)));
                  a2 += l2 & 65535;
                  b2 += l2 >>> 16;
                  c2 += h2 & 65535;
                  d2 += h2 >>> 16;
                  th = wh[(j2 + 14) % 16];
                  tl = wl[(j2 + 14) % 16];
                  h2 =
                    ((th >>> 19) | (tl << (32 - 19))) ^
                    ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^
                    (th >>> 6);
                  l2 =
                    ((tl >>> 19) | (th << (32 - 19))) ^
                    ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^
                    ((tl >>> 6) | (th << (32 - 6)));
                  a2 += l2 & 65535;
                  b2 += l2 >>> 16;
                  c2 += h2 & 65535;
                  d2 += h2 >>> 16;
                  b2 += a2 >>> 16;
                  c2 += b2 >>> 16;
                  d2 += c2 >>> 16;
                  wh[j2] = (c2 & 65535) | (d2 << 16);
                  wl[j2] = (a2 & 65535) | (b2 << 16);
                }
              }
            }
            h2 = ah0;
            l2 = al0;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[0];
            l2 = hl[0];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[0] = ah0 = (c2 & 65535) | (d2 << 16);
            hl[0] = al0 = (a2 & 65535) | (b2 << 16);
            h2 = ah1;
            l2 = al1;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[1];
            l2 = hl[1];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[1] = ah1 = (c2 & 65535) | (d2 << 16);
            hl[1] = al1 = (a2 & 65535) | (b2 << 16);
            h2 = ah2;
            l2 = al2;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[2];
            l2 = hl[2];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[2] = ah2 = (c2 & 65535) | (d2 << 16);
            hl[2] = al2 = (a2 & 65535) | (b2 << 16);
            h2 = ah3;
            l2 = al3;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[3];
            l2 = hl[3];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[3] = ah3 = (c2 & 65535) | (d2 << 16);
            hl[3] = al3 = (a2 & 65535) | (b2 << 16);
            h2 = ah4;
            l2 = al4;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[4];
            l2 = hl[4];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[4] = ah4 = (c2 & 65535) | (d2 << 16);
            hl[4] = al4 = (a2 & 65535) | (b2 << 16);
            h2 = ah5;
            l2 = al5;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[5];
            l2 = hl[5];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[5] = ah5 = (c2 & 65535) | (d2 << 16);
            hl[5] = al5 = (a2 & 65535) | (b2 << 16);
            h2 = ah6;
            l2 = al6;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[6];
            l2 = hl[6];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[6] = ah6 = (c2 & 65535) | (d2 << 16);
            hl[6] = al6 = (a2 & 65535) | (b2 << 16);
            h2 = ah7;
            l2 = al7;
            a2 = l2 & 65535;
            b2 = l2 >>> 16;
            c2 = h2 & 65535;
            d2 = h2 >>> 16;
            h2 = hh[7];
            l2 = hl[7];
            a2 += l2 & 65535;
            b2 += l2 >>> 16;
            c2 += h2 & 65535;
            d2 += h2 >>> 16;
            b2 += a2 >>> 16;
            c2 += b2 >>> 16;
            d2 += c2 >>> 16;
            hh[7] = ah7 = (c2 & 65535) | (d2 << 16);
            hl[7] = al7 = (a2 & 65535) | (b2 << 16);
            pos += 128;
            n -= 128;
          }
          return n;
        }
        function crypto_hash(out, m2, n) {
          var hh = new Int32Array(8),
            hl = new Int32Array(8),
            x2 = new Uint8Array(256),
            i,
            b2 = n;
          hh[0] = 1779033703;
          hh[1] = 3144134277;
          hh[2] = 1013904242;
          hh[3] = 2773480762;
          hh[4] = 1359893119;
          hh[5] = 2600822924;
          hh[6] = 528734635;
          hh[7] = 1541459225;
          hl[0] = 4089235720;
          hl[1] = 2227873595;
          hl[2] = 4271175723;
          hl[3] = 1595750129;
          hl[4] = 2917565137;
          hl[5] = 725511199;
          hl[6] = 4215389547;
          hl[7] = 327033209;
          crypto_hashblocks_hl(hh, hl, m2, n);
          n %= 128;
          for (i = 0; i < n; i++) x2[i] = m2[b2 - n + i];
          x2[n] = 128;
          n = 256 - 128 * (n < 112 ? 1 : 0);
          x2[n - 9] = 0;
          ts64(x2, n - 8, (b2 / 536870912) | 0, b2 << 3);
          crypto_hashblocks_hl(hh, hl, x2, n);
          for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);
          return 0;
        }
        function add3(p2, q2) {
          var a2 = gf(),
            b2 = gf(),
            c2 = gf(),
            d2 = gf(),
            e = gf(),
            f2 = gf(),
            g2 = gf(),
            h2 = gf(),
            t2 = gf();
          Z(a2, p2[1], p2[0]);
          Z(t2, q2[1], q2[0]);
          M2(a2, a2, t2);
          A2(b2, p2[0], p2[1]);
          A2(t2, q2[0], q2[1]);
          M2(b2, b2, t2);
          M2(c2, p2[3], q2[3]);
          M2(c2, c2, D22);
          M2(d2, p2[2], q2[2]);
          A2(d2, d2, d2);
          Z(e, b2, a2);
          Z(f2, d2, c2);
          A2(g2, d2, c2);
          A2(h2, b2, a2);
          M2(p2[0], e, f2);
          M2(p2[1], h2, g2);
          M2(p2[2], g2, f2);
          M2(p2[3], e, h2);
        }
        function cswap(p2, q2, b2) {
          var i;
          for (i = 0; i < 4; i++) {
            sel25519(p2[i], q2[i], b2);
          }
        }
        function pack3(r, p2) {
          var tx = gf(),
            ty = gf(),
            zi = gf();
          inv25519(zi, p2[2]);
          M2(tx, p2[0], zi);
          M2(ty, p2[1], zi);
          pack25519(r, ty);
          r[31] ^= par25519(tx) << 7;
        }
        function scalarmult(p2, q2, s2) {
          var b2, i;
          set25519(p2[0], gf0);
          set25519(p2[1], gf1);
          set25519(p2[2], gf1);
          set25519(p2[3], gf0);
          for (i = 255; i >= 0; --i) {
            b2 = (s2[(i / 8) | 0] >> (i & 7)) & 1;
            cswap(p2, q2, b2);
            add3(q2, p2);
            add3(p2, p2);
            cswap(p2, q2, b2);
          }
        }
        function scalarbase(p2, s2) {
          var q2 = [gf(), gf(), gf(), gf()];
          set25519(q2[0], X);
          set25519(q2[1], Y);
          set25519(q2[2], gf1);
          M2(q2[3], X, Y);
          scalarmult(p2, q2, s2);
        }
        function crypto_sign_keypair(pk, sk, seeded) {
          var d2 = new Uint8Array(64);
          var p2 = [gf(), gf(), gf(), gf()];
          var i;
          if (!seeded) randombytes(sk, 32);
          crypto_hash(d2, sk, 32);
          d2[0] &= 248;
          d2[31] &= 127;
          d2[31] |= 64;
          scalarbase(p2, d2);
          pack3(pk, p2);
          for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
          return 0;
        }
        var L2 = new Float64Array([
          237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222,
          20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
        ]);
        function modL(r, x2) {
          var carry, i, j2, k2;
          for (i = 63; i >= 32; --i) {
            carry = 0;
            for (j2 = i - 32, k2 = i - 12; j2 < k2; ++j2) {
              x2[j2] += carry - 16 * x2[i] * L2[j2 - (i - 32)];
              carry = Math.floor((x2[j2] + 128) / 256);
              x2[j2] -= carry * 256;
            }
            x2[j2] += carry;
            x2[i] = 0;
          }
          carry = 0;
          for (j2 = 0; j2 < 32; j2++) {
            x2[j2] += carry - (x2[31] >> 4) * L2[j2];
            carry = x2[j2] >> 8;
            x2[j2] &= 255;
          }
          for (j2 = 0; j2 < 32; j2++) x2[j2] -= carry * L2[j2];
          for (i = 0; i < 32; i++) {
            x2[i + 1] += x2[i] >> 8;
            r[i] = x2[i] & 255;
          }
        }
        function reduce(r) {
          var x2 = new Float64Array(64),
            i;
          for (i = 0; i < 64; i++) x2[i] = r[i];
          for (i = 0; i < 64; i++) r[i] = 0;
          modL(r, x2);
        }
        function crypto_sign(sm, m2, n, sk) {
          var d2 = new Uint8Array(64),
            h2 = new Uint8Array(64),
            r = new Uint8Array(64);
          var i,
            j2,
            x2 = new Float64Array(64);
          var p2 = [gf(), gf(), gf(), gf()];
          crypto_hash(d2, sk, 32);
          d2[0] &= 248;
          d2[31] &= 127;
          d2[31] |= 64;
          var smlen = n + 64;
          for (i = 0; i < n; i++) sm[64 + i] = m2[i];
          for (i = 0; i < 32; i++) sm[32 + i] = d2[32 + i];
          crypto_hash(r, sm.subarray(32), n + 32);
          reduce(r);
          scalarbase(p2, r);
          pack3(sm, p2);
          for (i = 32; i < 64; i++) sm[i] = sk[i];
          crypto_hash(h2, sm, n + 64);
          reduce(h2);
          for (i = 0; i < 64; i++) x2[i] = 0;
          for (i = 0; i < 32; i++) x2[i] = r[i];
          for (i = 0; i < 32; i++) {
            for (j2 = 0; j2 < 32; j2++) {
              x2[i + j2] += h2[i] * d2[j2];
            }
          }
          modL(sm.subarray(32), x2);
          return smlen;
        }
        function unpackneg(r, p2) {
          var t2 = gf(),
            chk = gf(),
            num = gf(),
            den = gf(),
            den2 = gf(),
            den4 = gf(),
            den6 = gf();
          set25519(r[2], gf1);
          unpack25519(r[1], p2);
          S2(num, r[1]);
          M2(den, num, D2);
          Z(num, num, r[2]);
          A2(den, r[2], den);
          S2(den2, den);
          S2(den4, den2);
          M2(den6, den4, den2);
          M2(t2, den6, num);
          M2(t2, t2, den);
          pow2523(t2, t2);
          M2(t2, t2, num);
          M2(t2, t2, den);
          M2(t2, t2, den);
          M2(r[0], t2, den);
          S2(chk, r[0]);
          M2(chk, chk, den);
          if (neq25519(chk, num)) M2(r[0], r[0], I2);
          S2(chk, r[0]);
          M2(chk, chk, den);
          if (neq25519(chk, num)) return -1;
          if (par25519(r[0]) === p2[31] >> 7) Z(r[0], gf0, r[0]);
          M2(r[3], r[0], r[1]);
          return 0;
        }
        function crypto_sign_open(m2, sm, n, pk) {
          var i;
          var t2 = new Uint8Array(32),
            h2 = new Uint8Array(64);
          var p2 = [gf(), gf(), gf(), gf()],
            q2 = [gf(), gf(), gf(), gf()];
          if (n < 64) return -1;
          if (unpackneg(q2, pk)) return -1;
          for (i = 0; i < n; i++) m2[i] = sm[i];
          for (i = 0; i < 32; i++) m2[i + 32] = pk[i];
          crypto_hash(h2, m2, n);
          reduce(h2);
          scalarmult(p2, q2, h2);
          scalarbase(q2, sm.subarray(32));
          add3(p2, q2);
          pack3(t2, p2);
          n -= 64;
          if (crypto_verify_32(sm, 0, t2, 0)) {
            for (i = 0; i < n; i++) m2[i] = 0;
            return -1;
          }
          for (i = 0; i < n; i++) m2[i] = sm[i + 64];
          return n;
        }
        var crypto_secretbox_KEYBYTES = 32,
          crypto_secretbox_NONCEBYTES = 24,
          crypto_secretbox_ZEROBYTES = 32,
          crypto_secretbox_BOXZEROBYTES = 16,
          crypto_scalarmult_BYTES = 32,
          crypto_scalarmult_SCALARBYTES = 32,
          crypto_box_PUBLICKEYBYTES = 32,
          crypto_box_SECRETKEYBYTES = 32,
          crypto_box_BEFORENMBYTES = 32,
          crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
          crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
          crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
          crypto_sign_BYTES = 64,
          crypto_sign_PUBLICKEYBYTES = 32,
          crypto_sign_SECRETKEYBYTES = 64,
          crypto_sign_SEEDBYTES = 32,
          crypto_hash_BYTES = 64;
        nacl.lowlevel = {
          crypto_core_hsalsa20,
          crypto_stream_xor,
          crypto_stream,
          crypto_stream_salsa20_xor,
          crypto_stream_salsa20,
          crypto_onetimeauth,
          crypto_onetimeauth_verify,
          crypto_verify_16,
          crypto_verify_32,
          crypto_secretbox,
          crypto_secretbox_open,
          crypto_scalarmult,
          crypto_scalarmult_base,
          crypto_box_beforenm,
          crypto_box_afternm,
          crypto_box,
          crypto_box_open,
          crypto_box_keypair,
          crypto_hash,
          crypto_sign,
          crypto_sign_keypair,
          crypto_sign_open,
          crypto_secretbox_KEYBYTES,
          crypto_secretbox_NONCEBYTES,
          crypto_secretbox_ZEROBYTES,
          crypto_secretbox_BOXZEROBYTES,
          crypto_scalarmult_BYTES,
          crypto_scalarmult_SCALARBYTES,
          crypto_box_PUBLICKEYBYTES,
          crypto_box_SECRETKEYBYTES,
          crypto_box_BEFORENMBYTES,
          crypto_box_NONCEBYTES,
          crypto_box_ZEROBYTES,
          crypto_box_BOXZEROBYTES,
          crypto_sign_BYTES,
          crypto_sign_PUBLICKEYBYTES,
          crypto_sign_SECRETKEYBYTES,
          crypto_sign_SEEDBYTES,
          crypto_hash_BYTES,
          gf,
          D: D2,
          L: L2,
          pack25519,
          unpack25519,
          M: M2,
          A: A2,
          S: S2,
          Z,
          pow2523,
          add: add3,
          set25519,
          modL,
          scalarmult,
          scalarbase,
        };
        function checkLengths(k2, n) {
          if (k2.length !== crypto_secretbox_KEYBYTES)
            throw new Error("bad key size");
          if (n.length !== crypto_secretbox_NONCEBYTES)
            throw new Error("bad nonce size");
        }
        function checkBoxLengths(pk, sk) {
          if (pk.length !== crypto_box_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          if (sk.length !== crypto_box_SECRETKEYBYTES)
            throw new Error("bad secret key size");
        }
        function checkArrayTypes() {
          for (var i = 0; i < arguments.length; i++) {
            if (!(arguments[i] instanceof Uint8Array))
              throw new TypeError("unexpected type, use Uint8Array");
          }
        }
        function cleanup(arr) {
          for (var i = 0; i < arr.length; i++) arr[i] = 0;
        }
        nacl.randomBytes = function (n) {
          var b2 = new Uint8Array(n);
          randombytes(b2, n);
          return b2;
        };
        nacl.secretbox = function (msg, nonce, key2) {
          checkArrayTypes(msg, nonce, key2);
          checkLengths(key2, nonce);
          var m2 = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
          var c2 = new Uint8Array(m2.length);
          for (var i = 0; i < msg.length; i++)
            m2[i + crypto_secretbox_ZEROBYTES] = msg[i];
          crypto_secretbox(c2, m2, m2.length, nonce, key2);
          return c2.subarray(crypto_secretbox_BOXZEROBYTES);
        };
        nacl.secretbox.open = function (box, nonce, key2) {
          checkArrayTypes(box, nonce, key2);
          checkLengths(key2, nonce);
          var c2 = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
          var m2 = new Uint8Array(c2.length);
          for (var i = 0; i < box.length; i++)
            c2[i + crypto_secretbox_BOXZEROBYTES] = box[i];
          if (c2.length < 32) return null;
          if (crypto_secretbox_open(m2, c2, c2.length, nonce, key2) !== 0)
            return null;
          return m2.subarray(crypto_secretbox_ZEROBYTES);
        };
        nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
        nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
        nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
        nacl.scalarMult = function (n, p2) {
          checkArrayTypes(n, p2);
          if (n.length !== crypto_scalarmult_SCALARBYTES)
            throw new Error("bad n size");
          if (p2.length !== crypto_scalarmult_BYTES)
            throw new Error("bad p size");
          var q2 = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult(q2, n, p2);
          return q2;
        };
        nacl.scalarMult.base = function (n) {
          checkArrayTypes(n);
          if (n.length !== crypto_scalarmult_SCALARBYTES)
            throw new Error("bad n size");
          var q2 = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult_base(q2, n);
          return q2;
        };
        nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
        nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
        nacl.box = function (msg, nonce, publicKey, secretKey) {
          var k2 = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox(msg, nonce, k2);
        };
        nacl.box.before = function (publicKey, secretKey) {
          checkArrayTypes(publicKey, secretKey);
          checkBoxLengths(publicKey, secretKey);
          var k2 = new Uint8Array(crypto_box_BEFORENMBYTES);
          crypto_box_beforenm(k2, publicKey, secretKey);
          return k2;
        };
        nacl.box.after = nacl.secretbox;
        nacl.box.open = function (msg, nonce, publicKey, secretKey) {
          var k2 = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox.open(msg, nonce, k2);
        };
        nacl.box.open.after = nacl.secretbox.open;
        nacl.box.keyPair = function () {
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
          crypto_box_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.box.keyPair.fromSecretKey = function (secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_box_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          crypto_scalarmult_base(pk, secretKey);
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
        nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
        nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
        nacl.box.nonceLength = crypto_box_NONCEBYTES;
        nacl.box.overheadLength = nacl.secretbox.overheadLength;
        nacl.sign = function (msg, secretKey) {
          checkArrayTypes(msg, secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
          crypto_sign(signedMsg, msg, msg.length, secretKey);
          return signedMsg;
        };
        nacl.sign.open = function (signedMsg, publicKey) {
          checkArrayTypes(signedMsg, publicKey);
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var tmp = new Uint8Array(signedMsg.length);
          var mlen = crypto_sign_open(
            tmp,
            signedMsg,
            signedMsg.length,
            publicKey
          );
          if (mlen < 0) return null;
          var m2 = new Uint8Array(mlen);
          for (var i = 0; i < m2.length; i++) m2[i] = tmp[i];
          return m2;
        };
        nacl.sign.detached = function (msg, secretKey) {
          var signedMsg = nacl.sign(msg, secretKey);
          var sig = new Uint8Array(crypto_sign_BYTES);
          for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
          return sig;
        };
        nacl.sign.detached.verify = function (msg, sig, publicKey) {
          checkArrayTypes(msg, sig, publicKey);
          if (sig.length !== crypto_sign_BYTES)
            throw new Error("bad signature size");
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
          var m2 = new Uint8Array(crypto_sign_BYTES + msg.length);
          var i;
          for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
          for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
          return crypto_sign_open(m2, sm, sm.length, publicKey) >= 0;
        };
        nacl.sign.keyPair = function () {
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          crypto_sign_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.keyPair.fromSecretKey = function (secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.sign.keyPair.fromSeed = function (seed) {
          checkArrayTypes(seed);
          if (seed.length !== crypto_sign_SEEDBYTES)
            throw new Error("bad seed size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          for (var i = 0; i < 32; i++) sk[i] = seed[i];
          crypto_sign_keypair(pk, sk, true);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
        nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
        nacl.sign.seedLength = crypto_sign_SEEDBYTES;
        nacl.sign.signatureLength = crypto_sign_BYTES;
        nacl.hash = function (msg) {
          checkArrayTypes(msg);
          var h2 = new Uint8Array(crypto_hash_BYTES);
          crypto_hash(h2, msg, msg.length);
          return h2;
        };
        nacl.hash.hashLength = crypto_hash_BYTES;
        nacl.verify = function (x2, y2) {
          checkArrayTypes(x2, y2);
          if (x2.length === 0 || y2.length === 0) return false;
          if (x2.length !== y2.length) return false;
          return vn(x2, 0, y2, 0, x2.length) === 0 ? true : false;
        };
        nacl.setPRNG = function (fn) {
          randombytes = fn;
        };
        (function () {
          var crypto2 =
            typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
          if (crypto2 && crypto2.getRandomValues) {
            var QUOTA = 65536;
            nacl.setPRNG(function (x2, n) {
              var i,
                v2 = new Uint8Array(n);
              for (i = 0; i < n; i += QUOTA) {
                crypto2.getRandomValues(
                  v2.subarray(i, i + Math.min(n - i, QUOTA))
                );
              }
              for (i = 0; i < n; i++) x2[i] = v2[i];
              cleanup(v2);
            });
          } else if (typeof __require !== "undefined") {
            crypto2 = __require("crypto");
            if (crypto2 && crypto2.randomBytes) {
              nacl.setPRNG(function (x2, n) {
                var i,
                  v2 = crypto2.randomBytes(n);
                for (i = 0; i < n; i++) x2[i] = v2[i];
                cleanup(v2);
              });
            }
          }
        })();
      })(
        typeof module !== "undefined" && module.exports
          ? module.exports
          : (self.nacl = self.nacl || {})
      );
    },
  });

  // node_modules/base32-decode/index.js
  var require_base32_decode = __commonJS({
    "node_modules/base32-decode/index.js"(exports, module) {
      var RFC4648 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
      var RFC4648_HEX = "0123456789ABCDEFGHIJKLMNOPQRSTUV";
      var CROCKFORD = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
      function readChar(alphabet, char) {
        var idx = alphabet.indexOf(char);
        if (idx === -1) {
          throw new Error("Invalid character found: " + char);
        }
        return idx;
      }
      module.exports = function base32Decode2(input, variant) {
        var alphabet;
        switch (variant) {
          case "RFC3548":
          case "RFC4648":
            alphabet = RFC4648;
            input = input.replace(/=+$/, "");
            break;
          case "RFC4648-HEX":
            alphabet = RFC4648_HEX;
            input = input.replace(/=+$/, "");
            break;
          case "Crockford":
            alphabet = CROCKFORD;
            input = input
              .toUpperCase()
              .replace(/O/g, "0")
              .replace(/[IL]/g, "1");
            break;
          default:
            throw new Error("Unknown base32 variant: " + variant);
        }
        var length = input.length;
        var bits = 0;
        var value = 0;
        var index = 0;
        var output = new Uint8Array(((length * 5) / 8) | 0);
        for (var i = 0; i < length; i++) {
          value = (value << 5) | readChar(alphabet, input[i]);
          bits += 5;
          if (bits >= 8) {
            output[index++] = (value >>> (bits - 8)) & 255;
            bits -= 8;
          }
        }
        return output.buffer;
      };
    },
  });

  // node_modules/to-data-view/index.js
  var require_to_data_view = __commonJS({
    "node_modules/to-data-view/index.js"(exports, module) {
      module.exports = function toDataView(data) {
        if (
          data instanceof Int8Array ||
          data instanceof Uint8Array ||
          data instanceof Uint8ClampedArray
        ) {
          return new DataView(data.buffer, data.byteOffset, data.byteLength);
        }
        if (data instanceof ArrayBuffer) {
          return new DataView(data);
        }
        throw new TypeError(
          "Expected `data` to be an ArrayBuffer, Buffer, Int8Array, Uint8Array or Uint8ClampedArray"
        );
      };
    },
  });

  // node_modules/base32-encode/index.js
  var require_base32_encode = __commonJS({
    "node_modules/base32-encode/index.js"(exports, module) {
      var toDataView = require_to_data_view();
      var RFC4648 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
      var RFC4648_HEX = "0123456789ABCDEFGHIJKLMNOPQRSTUV";
      var CROCKFORD = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
      module.exports = function base32Encode2(data, variant, options) {
        options = options || {};
        var alphabet, defaultPadding;
        switch (variant) {
          case "RFC3548":
          case "RFC4648":
            alphabet = RFC4648;
            defaultPadding = true;
            break;
          case "RFC4648-HEX":
            alphabet = RFC4648_HEX;
            defaultPadding = true;
            break;
          case "Crockford":
            alphabet = CROCKFORD;
            defaultPadding = false;
            break;
          default:
            throw new Error("Unknown base32 variant: " + variant);
        }
        var padding2 =
          options.padding !== void 0 ? options.padding : defaultPadding;
        var view = toDataView(data);
        var bits = 0;
        var value = 0;
        var output = "";
        for (var i = 0; i < view.byteLength; i++) {
          value = (value << 8) | view.getUint8(i);
          bits += 8;
          while (bits >= 5) {
            output += alphabet[(value >>> (bits - 5)) & 31];
            bits -= 5;
          }
        }
        if (bits > 0) {
          output += alphabet[(value << (5 - bits)) & 31];
        }
        if (padding2) {
          while (output.length % 8 !== 0) {
            output += "=";
          }
        }
        return output;
      };
    },
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray3;
      exports.fromByteArray = fromByteArray2;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - (validLen % 4);
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }
      function toByteArray3(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 18) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 12) |
            (revLookup[b64.charCodeAt(i2 + 2)] << 6) |
            revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = (tmp >> 16) & 255;
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 2) |
            (revLookup[b64.charCodeAt(i2 + 1)] >> 4);
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp =
            (revLookup[b64.charCodeAt(i2)] << 10) |
            (revLookup[b64.charCodeAt(i2 + 1)] << 4) |
            (revLookup[b64.charCodeAt(i2 + 2)] >> 2);
          arr[curByte++] = (tmp >> 8) & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return (
          lookup[(num >> 18) & 63] +
          lookup[(num >> 12) & 63] +
          lookup[(num >> 6) & 63] +
          lookup[num & 63]
        );
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp =
            ((uint8[i2] << 16) & 16711680) +
            ((uint8[i2 + 1] << 8) & 65280) +
            (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray2(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (
          var i2 = 0, len22 = len2 - extraBytes;
          i2 < len22;
          i2 += maxChunkLength
        ) {
          parts.push(
            encodeChunk(
              uint8,
              i2,
              i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength
            )
          );
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 63] + "==");
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] +
              lookup[(tmp >> 4) & 63] +
              lookup[(tmp << 2) & 63] +
              "="
          );
        }
        return parts.join("");
      }
    },
  });

  // node_modules/@lumeweb/tld-enum/formats/js/tld-enum/desc.js
  var require_desc = __commonJS({
    "node_modules/@lumeweb/tld-enum/formats/js/tld-enum/desc.js"(
      exports,
      module
    ) {
      module.exports = {
        aaa: "American Automobile Association, Inc.",
        aarp: "AARP",
        abarth: "Fiat Chrysler Automobiles N.V.",
        abb: "ABB Ltd",
        abbott: "Abbott Laboratories, Inc.",
        abbvie: "AbbVie Inc.",
        abc: "Disney Enterprises, Inc.",
        able: "Able Inc.",
        abogado: "Top Level Domain Holdings Limited",
        abudhabi: "Abu Dhabi Systems and Information Centre",
        ac: "Ascension Island",
        academy: "Binky Moon, LLC",
        accenture: "Accenture plc",
        accountant: "dot Accountant Limited",
        accountants: "Binky Moon, LLC",
        aco: "ACO Severin Ahlmann GmbH & Co. KG",
        active: "Active Network, LLC",
        actor: "United TLD Holdco Ltd.",
        ad: "Andorra (Principality of)",
        adac: "Allgemeiner Deutscher Automobil-Club e.V. (ADAC)",
        ads: "Charleston Road Registry Inc.",
        adult: "ICM Registry AD LLC",
        ae: "United Arab Emirates",
        aeg: "Aktiebolaget Electrolux",
        aero: "Air-transport industry",
        aetna: "Aetna Life Insurance Company",
        af: "Afghanistan (Islamic Republic of)",
        afamilycompany: "Johnson Shareholdings, Inc.",
        afl: "Australian Football League",
        africa: "ZA Central Registry NPC trading as Registry.Africa",
        ag: "Antigua and Barbuda",
        agakhan: "Fondation Aga Khan (Aga Khan Foundation)",
        agency: "Binky Moon, LLC",
        ai: "Anguilla",
        aig: "American International Group, Inc.",
        aigo: "aigo Digital Technology Co,Ltd.",
        airbus: "Airbus S.A.S.",
        airforce: "United TLD Holdco Ltd.",
        airtel: "Bharti Airtel Limited",
        akdn: "Fondation Aga Khan (Aga Khan Foundation)",
        al: "Albania (Republic of)",
        alfaromeo: "Fiat Chrysler Automobiles N.V.",
        alibaba: "Alibaba Group Holding Limited",
        alipay: "Alibaba Group Holding Limited",
        allfinanz: "Allfinanz Deutsche Verm\xF6gensberatung Aktiengesellschaft",
        allstate: "Allstate Fire and Casualty Insurance Company",
        ally: "Ally Financial Inc.",
        alsace: "REGION GRAND EST",
        alstom: "ALSTOM",
        am: "Armenia (Republic of)",
        americanexpress:
          "American Express Travel Related Services Company, Inc.",
        americanfamily: "AmFam, Inc.",
        amex: "American Express Travel Related Services Company, Inc.",
        amfam: "AmFam, Inc.",
        amica: "Amica Mutual Insurance Company",
        amsterdam: "Gemeente Amsterdam",
        an: "Netherlands Antilles",
        analytics: "Campus IP LLC",
        android: "Charleston Road Registry Inc.",
        anquan: "QIHOO 360 TECHNOLOGY CO. LTD.",
        anz: "Australia and New Zealand Banking Group Limited",
        ao: "Angola (Republic of)",
        aol: "OATH Inc.",
        apartments: "Binky Moon, LLC",
        app: "Charleston Road Registry Inc.",
        apple: "Apple Inc.",
        aq: "Antarctica",
        aquarelle: "Aquarelle.com",
        ar: "Argentina (Argentine Republic)",
        arab: "League of Arab States",
        aramco: "Aramco Services Company",
        archi: "STARTING DOT LIMITED",
        army: "United TLD Holdco Ltd.",
        arpa: "Address and Routing Parameter Area",
        art: "UK Creative Ideas Limited",
        arte: "Association Relative \xE0 la T\xE9l\xE9vision Europ\xE9enne G.E.I.E.",
        as: "American Samoa",
        asda: "Wal-Mart Stores, Inc.",
        asia: "Organisations and individuals in the Asia-Pacific region",
        associates: "Binky Moon, LLC",
        at: "Austria (Republic of)",
        athleta: "The Gap, Inc.",
        attorney: "United TLD Holdco, Ltd",
        au: "Australia (Commonwealth of)",
        auction: "United TLD HoldCo, Ltd.",
        audi: "AUDI Aktiengesellschaft",
        audible: "Amazon Registry Services, Inc.",
        audio: "Uniregistry, Corp.",
        auspost: "Australian Postal Corporation",
        author: "Amazon Registry Services, Inc.",
        auto: "Cars Registry Limited",
        autos: "DERAutos, LLC",
        avianca: "Aerovias del Continente Americano S.A. Avianca",
        aw: "Aruba",
        aws: "Amazon Registry Services, Inc.",
        ax: "\xC5land Islands",
        axa: "AXA SA",
        az: "Azerbaijan (Republic of)",
        azure: "Microsoft Corporation",
        ba: "Bosnia and Herzegovina",
        baby: "Johnson & Johnson Services, Inc.",
        baidu: "Baidu, Inc.",
        banamex: "Citigroup Inc.",
        bananarepublic: "The Gap, Inc.",
        band: "United TLD Holdco, Ltd",
        bank: "fTLD Registry Services, LLC",
        bar: "Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable",
        barcelona: "Municipi de Barcelona",
        barclaycard: "Barclays Bank PLC",
        barclays: "Barclays Bank PLC",
        barefoot: "Gallo Vineyards, Inc.",
        bargains: "Binky Moon, LLC",
        baseball: "MLB Advanced Media DH, LLC",
        basketball: "F\xE9d\xE9ration Internationale de Basketball (FIBA)",
        bauhaus: "Werkhaus GmbH",
        bayern: "Bayern Connect GmbH",
        bb: "Barbados",
        bbc: "British Broadcasting Corporation",
        bbt: "BB&T Corporation",
        bbva: "BANCO BILBAO VIZCAYA ARGENTARIA, S.A.",
        bcg: "The Boston Consulting Group, Inc.",
        bcn: "Municipi de Barcelona",
        bd: "Bangladesh (People's Republic of)",
        be: "Belgium (Kingdom of)",
        beats: "Beats Electronics, LLC",
        beauty: "L'Or\xE9al",
        beer: "Top Level Domain Holdings Limited",
        bentley: "Bentley Motors Limited",
        berlin: "dotBERLIN GmbH & Co. KG",
        best: "BestTLD Pty Ltd",
        bestbuy: "BBY Solutions, Inc.",
        bet: "Afilias plc",
        bf: "Burkina Faso",
        bg: "Bulgaria (Republic of)",
        bh: "Bahrain (Kingdom of)",
        bharti: "Bharti Enterprises (Holding) Private Limited",
        bi: "Burundi (Republic of)",
        bible: "American Bible Society",
        bid: "dot Bid Limited",
        bike: "Binky Moon, LLC",
        bing: "Microsoft Corporation",
        bingo: "Binky Moon, LLC",
        bio: "STARTING DOT LIMITED",
        biz: "Business",
        bj: "Benin (Republic of)",
        bl: "Saint Barth\xE9lemy (Collectivity of) {unassigned - see also: .gp and .fr}",
        black: "Afilias plc",
        blackfriday: "Uniregistry, Corp.",
        blanco: "BLANCO GmbH + Co KG",
        blockbuster: "Dish DBS Corporation",
        blog: "Knock Knock WHOIS There, LLC",
        bloomberg: "Bloomberg IP Holdings LLC",
        blue: "Afilias plc",
        bm: "Bermuda",
        bms: "Bristol-Myers Squibb Company",
        bmw: "Bayerische Motoren Werke Aktiengesellschaft",
        bn: "Brunei (Nation of Brunei - the Abode of Peace) [Negara Brunei Darussalam]",
        bnl: "Banca Nazionale del Lavoro",
        bnpparibas: "BNP Paribas",
        bo: "Bolivia (Plurinational State of)",
        boats: "DERBoats, LLC",
        boehringer: "Boehringer Ingelheim International GmbH",
        bofa: "Bank of America Corporation",
        bom: "N\xFAcleo de Informa\xE7\xE3o e Coordena\xE7\xE3o do Ponto BR - NIC.br",
        bond: "Bond University Limited",
        boo: "Charleston Road Registry Inc.",
        book: "Amazon Registry Services, Inc.",
        booking: "Booking.com B.V.",
        boots: "Not assigned",
        bosch: "Robert Bosch GMBH",
        bostik: "Bostik SA",
        boston: "Boston TLD Management, LLC",
        bot: "Amazon Registry Services, Inc.",
        boutique: "Binky Moon, LLC",
        box: "NS1 Limited",
        bq: "Caribbean Netherlands [Bonaire - Sint Eustatius and Saba] {unassigned - see also: .an and .nl}",
        br: "Brazil (Federative Republic of)",
        bradesco: "Banco Bradesco S.A.",
        bridgestone: "Bridgestone Corporation",
        broadway: "Celebrate Broadway, Inc.",
        broker: "DOTBROKER REGISTRY LTD",
        brother: "Brother Industries, Ltd.",
        brussels: "DNS.be vzw",
        bs: "Bahamas (Commonwealth of the)",
        bt: "Bhutan (Kingdom of)",
        budapest: "Top Level Domain Holdings Limited",
        bugatti: "Bugatti International SA",
        build: "Plan Bee LLC",
        builders: "Binky Moon, LLC",
        business: "Binky Moon, LLC",
        buy: "Amazon Registry Services, INC",
        buzz: "DOTSTRATEGY CO.",
        bv: "Bouvet Island",
        bw: "Botswana (Republic of)",
        by: "Belarus (Republic of)",
        bz: "Belize",
        bzh: "Association www.bzh",
        ca: "Canada",
        cab: "Binky Moon, LLC",
        cafe: "Binky Moon, LLC",
        cal: "Charleston Road Registry Inc.",
        call: "Amazon Registry Services, Inc.",
        calvinklein: "PVH gTLD Holdings LLC",
        cam: "AC Webconnecting Holding B.V.",
        camera: "Binky Moon, LLC",
        camp: "Binky Moon, LLC",
        cancerresearch: "Australian Cancer Research Foundation",
        canon: "Canon Inc.",
        capetown: "ZA Central Registry NPC trading as ZA Central Registry",
        capital: "Binky Moon, LLC",
        capitalone: "Capital One Financial Corporation",
        car: "Cars Registry Limited",
        caravan: "Caravan International, Inc.",
        cards: "Binky Moon, LLC",
        care: "Binky Moon, LLC",
        career: "dotCareer LLC",
        careers: "Binky Moon, LLC",
        cars: "Cars Registry Limited",
        cartier: "Richemont DNS Inc.",
        casa: "Top Level Domain Holdings Limited",
        case: "CNH Industrial N.V.",
        caseih: "CNH Industrial N.V.",
        cash: "Binky Moon, LLC",
        casino: "Binky Moon, LLC",
        cat: "Catalan",
        catering: "Binky Moon, LLC",
        catholic:
          "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
        cba: "COMMONWEALTH BANK OF AUSTRALIA",
        cbn: "The Christian Broadcasting Network, Inc.",
        cbre: "CBRE, Inc.",
        cbs: "CBS Domains Inc.",
        cc: "Cocos (Keeling) Islands (Territory of the)",
        cd: "Congo (Democratic Republic of the) [Congo-Kinshasa]",
        ceb: "The Corporate Executive Board Company",
        center: "Binky Moon, LLC",
        ceo: "CEOTLD Pty Ltd",
        cern: 'European Organization for Nuclear Research ("CERN")',
        cf: "Central African Republic",
        cfa: "CFA Institute",
        cfd: "DOTCFD REGISTRY LTD",
        cg: "Congo (Republic of) [Congo-Brazzaville]",
        ch: "Switzerland (Swiss Confederation)",
        chanel: "Chanel International B.V.",
        channel: "Charleston Road Registry Inc.",
        charity: "Corn Lake, LLC",
        chase: "JPMorgan Chase Bank, National Association",
        chat: "Binky Moon, LLC",
        cheap: "Binky Moon, LLC",
        chintai: "CHINTAI Corporation",
        chloe: "Not assigned",
        christmas: "Uniregistry, Corp.",
        chrome: "Charleston Road Registry Inc.",
        chrysler: "FCA US LLC.",
        church: "Binky Moon, LLC",
        ci: "Ivory Coast (Republic of C\xF4te d'Ivoire)",
        cipriani: "Hotel Cipriani Srl",
        circle: "Amazon Registry Services, Inc.",
        cisco: "Cisco Technology, Inc.",
        citadel: "Citadel Domain LLC",
        citi: "Citigroup Inc.",
        citic: "CITIC Group Corporation",
        city: "Binky Moon, LLC",
        cityeats: "Lifestyle Domain Holdings, Inc.",
        ck: "Cook Islands",
        cl: "Chile (Republic of)",
        claims: "Binky Moon, LLC",
        cleaning: "Binky Moon, LLC",
        click: "Uniregistry, Corp.",
        clinic: "Binky Moon, LLC",
        clinique: "The Est\xE9e Lauder Companies Inc.",
        clothing: "Binky Moon, LLC",
        cloud: "ARUBA PEC S.p.A.",
        club: ".CLUB DOMAINS, LLC",
        clubmed: "Club M\xE9diterran\xE9e S.A.",
        cm: "Cameroon (Republic of)",
        cn: "China (People's Republic of)",
        co: "Colombia (Republic of)",
        coach: "Binky Moon, LLC",
        codes: "Binky Moon, LLC",
        coffee: "Binky Moon, LLC",
        college: "XYZ.COM LLC",
        cologne: "dotKoeln GmbH",
        com: "Commercial organizations",
        comcast: "Comcast IP Holdings I, LLC",
        commbank: "COMMONWEALTH BANK OF AUSTRALIA",
        community: "Binky Moon, LLC",
        company: "Binky Moon, LLC",
        compare: "iSelect Ltd",
        computer: "Binky Moon, LLC",
        comsec: "VeriSign, Inc.",
        condos: "Binky Moon, LLC",
        construction: "Binky Moon, LLC",
        consulting: "United TLD Holdco, LTD.",
        contact: "Top Level Spectrum, Inc.",
        contractors: "Binky Moon, LLC",
        cooking: "Top Level Domain Holdings Limited",
        cookingchannel: "Lifestyle Domain Holdings, Inc.",
        cool: "Binky Moon, LLC",
        coop: "Cooperatives",
        corsica: "Collectivit\xE9 Territoriale de Corse",
        country: "Top Level Domain Holdings Limited",
        coupon: "Amazon Registry Services, Inc.",
        coupons: "Binky Moon, LLC",
        courses: "OPEN UNIVERSITIES AUSTRALIA PTY LTD",
        cr: "Costa Rica (Republic of)",
        credit: "Binky Moon, LLC",
        creditcard: "Binky Moon, LLC",
        creditunion: "CUNA Performance Resources, LLC",
        cricket: "dot Cricket Limited",
        crown: "Crown Equipment Corporation",
        crs: "Federated Co-operatives Limited",
        cruise: "Viking River Cruises (Bermuda) Ltd.",
        cruises: "Binky Moon, LLC",
        csc: "Alliance-One Services, Inc.",
        cu: "Cuba (Republic of)",
        cuisinella: "SALM S.A.S.",
        cv: "Cape Verde (Republic of)",
        cw: "Cura\xE7ao (Country of)",
        cx: "Christmas Island (Territory of)",
        cy: "Cyprus (Republic of)",
        cymru: "Nominet UK",
        cyou: "Beijing Gamease Age Digital Technology Co., Ltd.",
        cz: "Czech Republic",
        dabur: "Dabur India Limited",
        dad: "Charleston Road Registry Inc.",
        dance: "United TLD Holdco Ltd.",
        data: "Dish DBS Corporation",
        date: "dot Date Limited",
        dating: "Binky Moon, LLC",
        datsun: "NISSAN MOTOR CO., LTD.",
        day: "Charleston Road Registry Inc.",
        dclk: "Charleston Road Registry Inc.",
        dds: "Minds + Machines Group Limited",
        de: "Germany (Federal Republic of)",
        deal: "Amazon Registry Services, Inc.",
        dealer: "Dealer Dot Com, Inc.",
        deals: "Binky Moon, LLC",
        degree: "United TLD Holdco, Ltd",
        delivery: "Binky Moon, LLC",
        dell: "Dell Inc.",
        deloitte: "Deloitte Touche Tohmatsu",
        delta: "Delta Air Lines, Inc.",
        democrat: "United TLD Holdco Ltd.",
        dental: "Binky Moon, LLC",
        dentist: "United TLD Holdco, Ltd",
        desi: "Desi Networks LLC",
        design: "Top Level Design, LLC",
        dev: "Charleston Road Registry Inc.",
        dhl: "Deutsche Post AG",
        diamonds: "Binky Moon, LLC",
        diet: "Uniregistry, Corp.",
        digital: "Binky Moon, LLC",
        direct: "Binky Moon, LLC",
        directory: "Binky Moon, LLC",
        discount: "Binky Moon, LLC",
        discover: "Discover Financial Services",
        dish: "Dish DBS Corporation",
        diy: "Lifestyle Domain Holdings, Inc.",
        dj: "Djibouti (Republic of)",
        dk: "Denmark (Kingdom of)",
        dm: "Dominica (Commonwealth of)",
        dnp: "Dai Nippon Printing Co., Ltd.",
        do: "Dominican Republic",
        docs: "Charleston Road Registry Inc.",
        doctor: "Binky Moon, LLC",
        dodge: "FCA US LLC.",
        dog: "Binky Moon, LLC",
        doha: "Communications Regulatory Authority (CRA)",
        domains: "Binky Moon, LLC",
        doosan: "Retired",
        dot: "Dish DBS Corporation",
        download: "dot Support Limited",
        drive: "Charleston Road Registry Inc.",
        dtv: "Dish DBS Corporation",
        dubai: "Dubai Smart Government Department",
        duck: "Johnson Shareholdings, Inc.",
        dunlop: "The Goodyear Tire & Rubber Company",
        duns: "The Dun & Bradstreet Corporation",
        dupont: "E. I. du Pont de Nemours and Company",
        durban: "ZA Central Registry NPC trading as ZA Central Registry",
        dvag: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
        dvr: "Hughes Satellite Systems Corporation",
        dz: "Algeria (People's Democratic Republic of)",
        earth: "Interlink Co., Ltd.",
        eat: "Charleston Road Registry Inc.",
        ec: "Ecuador (Republic of)",
        eco: "Big Room Inc.",
        edeka: "EDEKA Verband kaufm\xE4nnischer Genossenschaften e.V.",
        edu: "Educational establishments",
        education: "Binky Moon, LLC",
        ee: "Estonia (Republic of)",
        eg: "Egypt (Arab Republic of)",
        eh: "Western Sahara {reserved}",
        email: "Binky Moon, LLC",
        emerck: "Merck KGaA",
        energy: "Binky Moon, LLC",
        engineer: "United TLD Holdco Ltd.",
        engineering: "Binky Moon, LLC",
        enterprises: "Binky Moon, LLC",
        epost: "Deutsche Post AG",
        epson: "Seiko Epson Corporation",
        equipment: "Binky Moon, LLC",
        er: "Eritrea (State of)",
        ericsson: "Telefonaktiebolaget L M Ericsson",
        erni: "ERNI Group Holding AG",
        es: "Spain (Kingdom of)",
        esq: "Charleston Road Registry Inc.",
        estate: "Binky Moon, LLC",
        esurance: "Esurance Insurance Company",
        et: "Ethiopia (Federal Democratic Republic of)",
        etisalat:
          "Emirates Telecommunications Corporation (trading as Etisalat)",
        eu: "European Union",
        eurovision: "European Broadcasting Union (EBU)",
        eus: "Puntueus Fundazioa",
        events: "Binky Moon, LLC",
        everbank: "EverBank",
        exchange: "Binky Moon, LLC",
        expert: "Binky Moon, LLC",
        exposed: "Binky Moon, LLC",
        express: "Binky Moon, LLC",
        extraspace: "Extra Space Storage LLC",
        fage: "Fage International S.A.",
        fail: "Binky Moon, LLC",
        fairwinds: "FairWinds Partners, LLC",
        faith: "dot Faith Limited",
        family: "United TLD Holdco Ltd.",
        fan: "Asiamix Digital Ltd",
        fans: "Asiamix Digital Limited",
        farm: "Binky Moon, LLC",
        farmers: "Farmers Insurance Exchange",
        fashion: "Top Level Domain Holdings Limited",
        fast: "Amazon Registry Services, Inc.",
        fedex: "Federal Express Corporation",
        feedback: "Top Level Spectrum, Inc.",
        ferrari: "Fiat Chrysler Automobiles N.V.",
        ferrero: "Ferrero Trading Lux S.A.",
        fi: "Finland (Republic of)",
        fiat: "Fiat Chrysler Automobiles N.V.",
        fidelity: "Fidelity Brokerage Services LLC",
        fido: "Rogers Communications Canada Inc.",
        film: "Motion Picture Domain Registry Pty Ltd",
        final:
          "N\xFAcleo de Informa\xE7\xE3o e Coordena\xE7\xE3o do Ponto BR - NIC.br",
        finance: "Binky Moon, LLC",
        financial: "Binky Moon, LLC",
        fire: "Amazon Registry Services, Inc.",
        firestone: "Bridgestone Licensing Services, Inc.",
        firmdale: "Firmdale Holdings Limited",
        fish: "Binky Moon, LLC",
        fishing: "Top Level Domain Holdings Limited",
        fit: "Minds + Machines Group Limited",
        fitness: "Binky Moon, LLC",
        fj: "Fiji (Republic of)",
        fk: "Falkland Islands (Malvinas)",
        flickr: "Yahoo! Domain Services Inc.",
        flights: "Binky Moon, LLC",
        flir: "FLIR Systems, Inc.",
        florist: "Binky Moon, LLC",
        flowers: "Uniregistry, Corp.",
        flsmidth: "Retired",
        fly: "Charleston Road Registry Inc.",
        fm: "Micronesia (Federated States of)",
        fo: "Faroe Islands",
        foo: "Charleston Road Registry Inc.",
        food: "Lifestyle Domain Holdings, Inc.",
        foodnetwork: "Lifestyle Domain Holdings, Inc.",
        football: "Binky Moon, LLC",
        ford: "Ford Motor Company",
        forex: "DOTFOREX REGISTRY LTD",
        forsale: "United TLD Holdco, LLC",
        forum: "Fegistry, LLC",
        foundation: "Binky Moon, LLC",
        fox: "FOX Registry, LLC",
        fr: "France (French Republic)",
        free: "Amazon Registry Services, Inc.",
        fresenius: "Fresenius Immobilien-Verwaltungs-GmbH",
        frl: "FRLregistry B.V.",
        frogans: "OP3FT",
        frontdoor: "Lifestyle Domain Holdings, Inc.",
        frontier: "Frontier Communications Corporation",
        ftr: "Frontier Communications Corporation",
        fujitsu: "Fujitsu Limited",
        fujixerox: "Xerox DNHC LLC",
        fun: "DotSpace, Inc.",
        fund: "Binky Moon, LLC",
        furniture: "Binky Moon, LLC",
        futbol: "United TLD Holdco, Ltd.",
        fyi: "Binky Moon, LLC",
        ga: "Gabon (Gabonese Republic)",
        gal: "Asociaci\xF3n puntoGAL",
        gallery: "Binky Moon, LLC",
        gallo: "Gallo Vineyards, Inc.",
        gallup: "Gallup, Inc.",
        game: "Uniregistry, Corp.",
        games: "United TLD Holdco Ltd.",
        gap: "The Gap, Inc.",
        garden: "Top Level Domain Holdings Limited",
        gb: "United Kingdom (United Kingdom of Great Britain and Northern Ireland)",
        gbiz: "Charleston Road Registry Inc.",
        gd: "Grenada",
        gdn: 'Joint Stock Company "Navigation-information systems"',
        ge: "Georgia",
        gea: "GEA Group Aktiengesellschaft",
        gent: "Combell nv",
        genting: "Resorts World Inc. Pte. Ltd.",
        george: "Wal-Mart Stores, Inc.",
        gf: "French Guiana",
        gg: "Guernsey (Bailiwick of)",
        ggee: "GMO Internet, Inc.",
        gh: "Ghana (Republic of)",
        gi: "Gibraltar",
        gift: "Uniregistry, Corp.",
        gifts: "Binky Moon, LLC",
        gives: "United TLD Holdco Ltd.",
        giving: "Giving Limited",
        gl: "Greenland",
        glade: "Johnson Shareholdings, Inc.",
        glass: "Binky Moon, LLC",
        gle: "Charleston Road Registry Inc.",
        global: "Dot Global Domain Registry Limited",
        globo: "Globo Comunica\xE7\xE3o e Participa\xE7\xF5es S.A",
        gm: "Gambia (Republic of The)",
        gmail: "Charleston Road Registry Inc.",
        gmbh: "Binky Moon, LLC",
        gmo: "GMO Internet, Inc.",
        gmx: "1&1 Mail & Media GmbH",
        gn: "Guinea (Republic of)",
        godaddy: "Go Daddy East, LLC",
        gold: "Binky Moon, LLC",
        goldpoint: "YODOBASHI CAMERA CO.,LTD.",
        golf: "Binky Moon, LLC",
        goo: "NTT Resonant Inc.",
        goodhands: "Allstate Fire and Casualty Insurance Company",
        goodyear: "The Goodyear Tire & Rubber Company",
        goog: "Charleston Road Registry Inc.",
        google: "Charleston Road Registry Inc.",
        gop: "Republican State Leadership Committee, Inc.",
        got: "Amazon Registry Services, Inc.",
        gov: "US government",
        gp: "Guadeloupe",
        gq: "Equatorial Guinea (Republic of)",
        gr: "Greece (Hellenic Republic)",
        grainger: "Grainger Registry Services, LLC",
        graphics: "Binky Moon, LLC",
        gratis: "Binky Moon, LLC",
        green: "DotGreen Registry Limited",
        gripe: "Binky Moon, LLC",
        grocery: "Wal-Mart Stores, Inc.",
        group: "Binky Moon, LLC",
        gs: "South Georgia and the South Sandwich Islands",
        gt: "Guatemala (Republic of)",
        gu: "Guam",
        guardian: "The Guardian Life Insurance Company of America",
        gucci: "Guccio Gucci S.p.a.",
        guge: "Charleston Road Registry Inc.",
        guide: "Binky Moon, LLC",
        guitars: "Uniregistry, Corp.",
        guru: "Binky Moon, LLC",
        gw: "Guinea-Bissau (Republic of)",
        gy: "Guyana (Co-operative Republic of)",
        hair: "L'Oreal",
        hamburg: "Hamburg Top-Level-Domain GmbH",
        hangout: "Charleston Road Registry Inc.",
        haus: "United TLD Holdco, LTD.",
        hbo: "HBO Registry Services, Inc.",
        hdfc: "HOUSING DEVELOPMENT FINANCE CORPORATION LIMITED",
        hdfcbank: "HDFC Bank Limited",
        health: "DotHealth, LLC",
        healthcare: "Binky Moon, LLC",
        help: "Uniregistry, Corp.",
        helsinki: "City of Helsinki",
        here: "Charleston Road Registry Inc.",
        hermes: "Hermes International",
        hgtv: "Lifestyle Domain Holdings, Inc.",
        hiphop: "Uniregistry, Corp.",
        hisamitsu: "Hisamitsu Pharmaceutical Co.,Inc.",
        hitachi: "Hitachi, Ltd.",
        hiv: "Uniregistry, Corp.",
        hk: "Hong Kong (Hong Kong Special Administrative Region of the People's Republic of China)",
        hkt: "PCCW-HKT DataCom Services Limited",
        hm: "Heard Island and McDonald Islands",
        hn: "Honduras (Republic of)",
        hockey: "Binky Moon, LLC",
        holdings: "Binky Moon, LLC",
        holiday: "Binky Moon, LLC",
        homedepot: "Home Depot Product Authority, LLC",
        homegoods: "The TJX Companies, Inc.",
        homes: "DERHomes, LLC",
        homesense: "The TJX Companies, Inc.",
        honda: "Honda Motor Co., Ltd.",
        honeywell: "Honeywell GTLD LLC",
        horse: "Top Level Domain Holdings Limited",
        hospital: "Binky Moon, LLC",
        host: "DotHost Inc.",
        hosting: "Uniregistry, Corp.",
        hot: "Amazon Registry Services, Inc.",
        hoteles: "Travel Reservations SRL",
        hotels: "Booking.com B.V.",
        hotmail: "Microsoft Corporation",
        house: "Binky Moon, LLC",
        how: "Charleston Road Registry Inc.",
        hr: "Croatia (Republic of)",
        hsbc: "HSBC Global Services (UK) Limited",
        ht: "Haiti (Republic of)",
        htc: "Not assigned",
        hu: "Hungary",
        hughes: "Hughes Satellite Systems Corporation",
        hyatt: "Hyatt GTLD, L.L.C.",
        hyundai: "Hyundai Motor Company",
        ibm: "International Business Machines Corporation",
        icbc: "Industrial and Commercial Bank of China Limited",
        ice: "IntercontinentalExchange, Inc.",
        icu: "Shortdot SA",
        id: "Indonesia (Republic of)",
        ie: "Ireland (Republic of)",
        ieee: "IEEE Global LLC",
        ifm: "ifm electronic gmbh",
        iinet: "Retired",
        ikano: "Ikano S.A.",
        il: "Israel (State of)",
        im: "Isle of Man",
        imamat: "Fondation Aga Khan (Aga Khan Foundation)",
        imdb: "Amazon Registry Services, Inc.",
        immo: "Binky Moon, LLC",
        immobilien: "United TLD Holdco Ltd.",
        in: "India (Republic of)",
        industries: "Binky Moon, LLC",
        infiniti: "NISSAN MOTOR CO., LTD.",
        info: "Informational sites",
        ing: "Charleston Road Registry Inc.",
        ink: "Top Level Design, LLC",
        institute: "Binky Moon, LLC",
        insurance: "fTLD Registry Services LLC",
        insure: "Binky Moon, LLC",
        int: "International treaty-based organizations",
        intel: "Intel Corporation",
        international: "Binky Moon, LLC",
        intuit: "Intuit Administrative Services, Inc.",
        investments: "Binky Moon, LLC",
        io: "British Indian Ocean Territory",
        ipiranga: "Ipiranga Produtos de Petroleo S.A.",
        iq: "Iraq (Republic of)",
        ir: "Iran (Islamic Republic of)",
        irish: "Binky Moon, LLC",
        is: "Iceland",
        iselect: "iSelect Ltd",
        ismaili: "Fondation Aga Khan (Aga Khan Foundation)",
        ist: "Istanbul Metropolitan Municipality",
        istanbul: "Istanbul Metropolitan Municipality",
        it: "Italy (Italian Republic)",
        itau: "Itau Unibanco Holding S.A.",
        itv: "ITV Services Limited",
        iveco: "CNH Industrial N.V.",
        iwc: "Richemont DNS Inc.",
        jaguar: "Jaguar Land Rover Ltd",
        java: "Oracle Corporation",
        jcb: "JCB Co., Ltd.",
        jcp: "JCP Media, Inc.",
        je: "Jersey (Bailiwick of)",
        jeep: "FCA US LLC.",
        jetzt: "Binky Moon, LLC",
        jewelry: "Binky Moon, LLC",
        jio: "Affinity Names, Inc.",
        jlc: "Richemont DNS Inc.",
        jll: "Jones Lang LaSalle Incorporated",
        jm: "Jamaica (Commonwealth of)",
        jmp: "Matrix IP LLC",
        jnj: "Johnson & Johnson Services, Inc.",
        jo: "Jordan (Hashemite Kingdom of)",
        jobs: "Employment-related sites",
        joburg: "ZA Central Registry NPC trading as ZA Central Registry",
        jot: "Amazon Registry Services, Inc.",
        joy: "Amazon Registry Services, Inc.",
        jp: "Japan",
        jpmorgan: "JPMorgan Chase Bank, National Association",
        jprs: "Japan Registry Services Co., Ltd.",
        juegos: "Uniregistry, Corp.",
        juniper: "JUNIPER NETWORKS, INC.",
        kaufen: "United TLD Holdco Ltd.",
        kddi: "KDDI CORPORATION",
        ke: "Kenya (Republic of)",
        kerryhotels: "Kerry Trading Co. Limited",
        kerrylogistics: "Kerry Trading Co. Limited",
        kerryproperties: "Kerry Trading Co. Limited",
        kfh: "Kuwait Finance House",
        kg: "Kyrgyzstan (Kyrgyz Republic)",
        kh: "Cambodia (Kingdom of)",
        ki: "Kiribati (Republic of)",
        kia: "KIA MOTORS CORPORATION",
        kim: "Afilias plc",
        kinder: "Ferrero Trading Lux S.A.",
        kindle: "Amazon Registry Services, Inc.",
        kitchen: "Binky Moon, LLC",
        kiwi: "DOT KIWI LIMITED",
        km: "Comoros (Union of the)",
        kn: "Saint Kitts and Nevis (Federation of)",
        koeln: "dotKoeln GmbH",
        komatsu: "Komatsu Ltd.",
        kosher: "Kosher Marketing Assets LLC",
        kp: "Korea (Democratic People's Republic of) [North Korea]",
        kpmg: "KPMG International Cooperative (KPMG International Genossenschaft)",
        kpn: "Koninklijke KPN N.V.",
        kr: "Korea (Republic of) [South Korea]",
        krd: "KRG Department of Information Technology",
        kred: "KredTLD Pty Ltd",
        kuokgroup: "Kerry Trading Co. Limited",
        kw: "Kuwait (State of Kuwait)",
        ky: "Cayman Islands",
        kyoto: "Academic Institution: Kyoto Jyoho Gakuen",
        kz: "Kazakhstan (Republic of)",
        la: "Laos (Lao People's Democratic Republic)",
        lacaixa: "CAIXA D'ESTALVIS I PENSIONS DE BARCELONA",
        ladbrokes: "LADBROKES INTERNATIONAL PLC",
        lamborghini: "Automobili Lamborghini S.p.A.",
        lamer: "The Est\xE9e Lauder Companies Inc.",
        lancaster: "LANCASTER",
        lancia: "Fiat Chrysler Automobiles N.V.",
        lancome: "L'Or\xE9al",
        land: "Binky Moon, LLC",
        landrover: "Jaguar Land Rover Ltd",
        lanxess: "LANXESS Corporation",
        lasalle: "Jones Lang LaSalle Incorporated",
        lat: "ECOM-LAC Federaci\xF3n de Latinoam\xE9rica y el Caribe para Internet y el Comercio Electr\xF3nico",
        latino: "Dish DBS Corporation",
        latrobe: "La Trobe University",
        law: "Minds + Machines Group Limited",
        lawyer: "United TLD Holdco, Ltd",
        lb: "Lebanon (Lebanese Republic)",
        lc: "Saint Lucia",
        lds: "IRI Domain Management, LLC",
        lease: "Binky Moon, LLC",
        leclerc:
          "A.C.D. LEC Association des Centres Distributeurs Edouard Leclerc",
        lefrak: "LeFrak Organization, Inc.",
        legal: "Binky Moon, LLC",
        lego: "LEGO Juris A/S",
        lexus: "TOYOTA MOTOR CORPORATION",
        lgbt: "Afilias plc",
        li: "Liechtenstein (Principality of)",
        liaison: "Liaison Technologies, Incorporated",
        lidl: "Schwarz Domains und Services GmbH & Co. KG",
        life: "Binky Moon, LLC",
        lifeinsurance: "American Council of Life Insurers",
        lifestyle: "Lifestyle Domain Holdings, Inc.",
        lighting: "Binky Moon, LLC",
        like: "Amazon Registry Services, Inc.",
        lilly: "Eli Lilly and Company",
        limited: "Binky Moon, LLC",
        limo: "Binky Moon, LLC",
        lincoln: "Ford Motor Company",
        linde: "Linde Aktiengesellschaft",
        link: "Uniregistry, Corp.",
        lipsy: "Lipsy Ltd",
        live: "United TLD Holdco Ltd.",
        living: "Lifestyle Domain Holdings, Inc.",
        lixil: "LIXIL Group Corporation",
        lk: "Sri Lanka (Democratic Socialist Republic of)",
        llc: "Afilias plc",
        loan: "dot Loan Limited",
        loans: "Binky Moon, LLC",
        locker: "Dish DBS Corporation",
        locus: "Locus Analytics LLC",
        loft: "Annco, Inc.",
        lol: "Uniregistry, Corp.",
        london: "Dot London Domains Limited",
        lotte: "Lotte Holdings Co., Ltd.",
        lotto: "Afilias plc",
        love: "Merchant Law Group LLP",
        lpl: "LPL Holdings, Inc.",
        lplfinancial: "LPL Holdings, Inc.",
        lr: "Liberia (Republic of)",
        ls: "Lesotho (Kingdom of)",
        lt: "Lithuania (Republic of)",
        ltd: "Binky Moon, LLC",
        ltda: "InterNetX Corp.",
        lu: "Luxembourg (Grand Duchy of)",
        lundbeck: "H. Lundbeck A/S",
        lupin: "LUPIN LIMITED",
        luxe: "Top Level Domain Holdings Limited",
        luxury: "Luxury Partners LLC",
        lv: "Latvia (Republic of)",
        ly: "Libya",
        ma: "Morocco",
        macys: "Macys, Inc.",
        madrid: "Comunidad de Madrid",
        maif: "Mutuelle Assurance Instituteur France (MAIF)",
        maison: "Binky Moon, LLC",
        makeup: "L'Or\xE9al",
        man: "MAN SE",
        management: "Binky Moon, LLC",
        mango: "PUNTO FA S.L.",
        map: "Charleston Road Registry Inc.",
        market: "United TLD Holdco, Ltd",
        marketing: "Binky Moon, LLC",
        markets: "DOTMARKETS REGISTRY LTD",
        marriott: "Marriott Worldwide Corporation",
        marshalls: "The TJX Companies, Inc.",
        maserati: "Fiat Chrysler Automobiles N.V.",
        mattel: "Mattel Sites, Inc.",
        mba: "Binky Moon, LLC",
        mc: "Monaco (Principality of)",
        mcd: "Not assigned",
        mcdonalds: "Not assigned",
        mckinsey: "McKinsey Holdings, Inc.",
        md: "Moldova (Republic of)",
        me: "Montenegro",
        med: "Medistry LLC",
        media: "Binky Moon, LLC",
        meet: "Charleston Road Registry Inc.",
        melbourne:
          "The Crown in right of the State of Victoria, represented by its Department of State Development, Business and Innovation",
        meme: "Charleston Road Registry Inc.",
        memorial: "Dog Beach, LLC",
        men: "Exclusive Registry Limited",
        menu: "Wedding TLD2, LLC",
        meo: "Not assigned",
        merckmsd: "MSD Registry Holdings, Inc.",
        metlife: "MetLife Services and Solutions, LLC",
        mf: "Saint Martin (Collectivity of) {unassigned - see also: .gp and .fr}",
        mg: "Madagascar (Republic of)",
        mh: "Marshall Islands (Republic of the)",
        miami: "Top Level Domain Holdings Limited",
        microsoft: "Microsoft Corporation",
        mil: "US military",
        mini: "Bayerische Motoren Werke Aktiengesellschaft",
        mint: "Intuit Administrative Services, Inc.",
        mit: "Massachusetts Institute of Technology",
        mitsubishi: "Mitsubishi Corporation",
        mk: "Macedonia (Republic of)",
        ml: "Mali (Republic of)",
        mlb: "MLB Advanced Media DH, LLC",
        mls: "The Canadian Real Estate Association",
        mm: "Myanmar (Republic of the Union of) [Burma]",
        mma: "MMA IARD",
        mn: "Mongolia",
        mo: "Macau (Macau Special Administrative Region of the People's Republic of China) [Macao]",
        mobi: "Mobile",
        mobile: "Dish DBS Corporation",
        mobily: "GreenTech Consultancy Company W.L.L.",
        moda: "United TLD Holdco Ltd.",
        moe: "Interlink Co., Ltd.",
        moi: "Amazon Registry Services, Inc.",
        mom: "Uniregistry, Corp.",
        monash: "Monash University",
        money: "Binky Moon, LLC",
        monster: "Monster Worldwide, Inc.",
        montblanc: "Not assigned",
        mopar: "FCA US LLC.",
        mormon: 'IRI Domain Management, LLC ("Applicant")',
        mortgage: "United TLD Holdco, Ltd",
        moscow:
          "Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)",
        moto: "Motorola Trademark Holdings, LLC",
        motorcycles: "DERMotorcycles, LLC",
        mov: "Charleston Road Registry Inc.",
        movie: "Binky Moon, LLC",
        movistar: "Telef\xF3nica S.A.",
        mp: "Northern Mariana Islands (Commonwealth of the)",
        mq: "Martinique",
        mr: "Mauritania (Islamic Republic of)",
        ms: "Montserrat",
        msd: "MSD Registry Holdings, Inc.",
        mt: "Malta (Republic of)",
        mtn: "MTN Dubai Limited",
        mtpc: "Retired",
        mtr: "MTR Corporation Limited",
        mu: "Mauritius (Republic of)",
        museum: "Museums",
        mutual: "Northwestern Mutual MU TLD Registry, LLC",
        mutuelle: "Retired",
        mv: "Maldives (Republic of)",
        mw: "Malawi (Republic of)",
        mx: "Mexico (United Mexican States)",
        my: "Malaysia",
        mz: "Mozambique (Republic of)",
        na: "Namibia (Republic of)",
        nab: "National Australia Bank Limited",
        nadex: "Nadex Domains, Inc",
        nagoya: "GMO Registry, Inc.",
        name: "Individuals",
        nationwide: "Nationwide Mutual Insurance Company",
        natura: "NATURA COSM\xC9TICOS S.A.",
        navy: "United TLD Holdco Ltd.",
        nba: "NBA REGISTRY, LLC",
        nc: "New Caledonia",
        ne: "Niger (Republic of)",
        nec: "NEC Corporation",
        net: "Network",
        netbank: "COMMONWEALTH BANK OF AUSTRALIA",
        netflix: "Netflix, Inc.",
        network: "Binky Moon, LLC",
        neustar: "NeuStar, Inc.",
        new: "Charleston Road Registry Inc.",
        newholland: "CNH Industrial N.V.",
        news: "United TLD Holdco Ltd.",
        next: "Next plc",
        nextdirect: "Next plc",
        nexus: "Charleston Road Registry Inc.",
        nf: "Norfolk Island (Territory of)",
        nfl: "NFL Reg Ops LLC",
        ng: "Nigeria (Federal Republic of)",
        ngo: "Public Interest Registry",
        nhk: "Japan Broadcasting Corporation (NHK)",
        ni: "Nicaragua (Republic of)",
        nico: "DWANGO Co., Ltd.",
        nike: "NIKE, Inc.",
        nikon: "NIKON CORPORATION",
        ninja: "United TLD Holdco Ltd.",
        nissan: "NISSAN MOTOR CO., LTD.",
        nissay: "Nippon Life Insurance Company",
        nl: "Netherlands",
        no: "Norway (Kingdom of)",
        nokia: "Nokia Corporation",
        northwesternmutual: "Northwestern Mutual Registry, LLC",
        norton: "Symantec Corporation",
        now: "Amazon Registry Services, Inc.",
        nowruz: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
        nowtv: "Starbucks (HK) Limited",
        np: "Nepal (Federal Democratic Republic of)",
        nr: "Nauru (Republic of)",
        nra: "NRA Holdings Company, INC.",
        nrw: "Minds + Machines GmbH",
        ntt: "NIPPON TELEGRAPH AND TELEPHONE CORPORATION",
        nu: "Niue",
        nyc: "The City of New York by and through the New York City Department of Information Technology & Telecommunications",
        nz: "New Zealand",
        obi: "OBI Group Holding SE & Co. KGaA",
        observer: "Top Level Spectrum, Inc.",
        off: "Johnson Shareholdings, Inc.",
        office: "Microsoft Corporation",
        okinawa: "BRregistry, Inc.",
        olayan: "Crescent Holding GmbH",
        olayangroup: "Crescent Holding GmbH",
        oldnavy: "The Gap, Inc.",
        ollo: "Dish DBS Corporation",
        om: "Oman (Sultanate of)",
        omega: "The Swatch Group Ltd",
        one: "One.com A/S",
        ong: "Public Interest Registry",
        onl: "I-REGISTRY Ltd., Niederlassung Deutschland",
        online: "DotOnline Inc.",
        onyourside: "Nationwide Mutual Insurance Company",
        ooo: "INFIBEAM INCORPORATION LIMITED",
        open: "American Express Travel Related Services Company, Inc.",
        oracle: "Oracle Corporation",
        orange: "Orange Brand Services Limited",
        org: "Non-profit organizations",
        organic: "Afilias plc",
        orientexpress: "Retired",
        origins: "The Est\xE9e Lauder Companies Inc.",
        osaka: "Osaka Registry Co., Ltd.",
        otsuka: "Otsuka Holdings Co., Ltd.",
        ott: "Dish DBS Corporation",
        ovh: "OVH SAS",
        pa: "Panama (Republic of)",
        page: "Charleston Road Registry Inc.",
        pamperedchef: "Not assigned",
        panasonic: "Panasonic Corporation",
        panerai: "Richemont DNS Inc.",
        paris: "City of Paris",
        pars: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
        partners: "Binky Moon, LLC",
        parts: "Binky Moon, LLC",
        party: "Blue Sky Registry Limited",
        passagens: "Travel Reservations SRL",
        pay: "Amazon Registry Services, Inc.",
        pccw: "PCCW Enterprises Limited",
        pe: "Peru (Republic of)",
        pet: "Afilias plc",
        pf: "French Polynesia and Clipperton Island",
        pfizer: "Pfizer Inc.",
        pg: "Papua New Guinea (Independent State of)",
        ph: "Philippines (Republic of the)",
        pharmacy: "National Association of Boards of Pharmacy",
        phd: "Charleston Road Registry Inc.",
        philips: "Koninklijke Philips N.V.",
        phone: "Dish DBS Corporation",
        photo: "Uniregistry, Corp.",
        photography: "Binky Moon, LLC",
        photos: "Binky Moon, LLC",
        physio: "PhysBiz Pty Ltd",
        piaget: "Richemont DNS Inc.",
        pics: "Uniregistry, Corp.",
        pictet: "Pictet Europe S.A.",
        pictures: "Binky Moon, LLC",
        pid: "Top Level Spectrum, Inc.",
        pin: "Amazon Registry Services, Inc.",
        ping: "Ping Registry Provider, Inc.",
        pink: "Afilias plc",
        pioneer: "Pioneer Corporation",
        pizza: "Binky Moon, LLC",
        pk: "Pakistan (Islamic Republic of)",
        pl: "Poland (Republic of)",
        place: "Binky Moon, LLC",
        play: "Charleston Road Registry Inc.",
        playstation: "Sony Computer Entertainment Inc.",
        plumbing: "Binky Moon, LLC",
        plus: "Binky Moon, LLC",
        pm: "Saint Pierre and Miquelon",
        pn: "Pitcairn Islands (Pitcairn - Henderson - Ducie and Oeno Islands)",
        pnc: "PNC Domain Co., LLC",
        pohl: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
        poker: "Afilias plc",
        politie: "Politie Nederland",
        porn: "ICM Registry PN LLC",
        post: "Universal Postal Union",
        pr: "Puerto Rico (Commonwealth of)",
        pramerica: "Prudential Financial, Inc.",
        praxi: "Praxi S.p.A.",
        press: "DotPress Inc.",
        prime: "Amazon Registry Services, Inc.",
        pro: "Profession",
        prod: "Charleston Road Registry Inc.",
        productions: "Binky Moon, LLC",
        prof: "Charleston Road Registry Inc.",
        progressive: "Progressive Casualty Insurance Company",
        promo: "Afilias plc",
        properties: "Binky Moon, LLC",
        property: "Uniregistry, Corp.",
        protection: "XYZ.COM LLC",
        pru: "Prudential Financial, Inc.",
        prudential: "Prudential Financial, Inc.",
        ps: "Palestine (State of)",
        pt: "Portugal (Portuguese Republic)",
        pub: "United TLD Holdco Ltd.",
        pw: "Palau (Republic of)",
        pwc: "PricewaterhouseCoopers LLP",
        py: "Paraguay (Republic of)",
        qa: "Qatar (State of)",
        qpon: "dotCOOL, Inc.",
        quebec: "PointQu\xE9bec Inc",
        quest: "Quest ION Limited",
        qvc: "QVC, Inc.",
        racing: "Premier Registry Limited",
        radio: "European Broadcasting Union (EBU)",
        raid: "Johnson Shareholdings, Inc.",
        re: "R\xE9union",
        read: "Amazon Registry Services, Inc.",
        realestate: "dotRealEstate LLC",
        realtor: "Real Estate Domains LLC",
        realty: "Fegistry, LLC",
        recipes: "Binky Moon, LLC",
        red: "Afilias plc",
        redstone: "Redstone Haute Couture Co., Ltd.",
        redumbrella: "Travelers TLD, LLC",
        rehab: "United TLD Holdco Ltd.",
        reise: "Binky Moon, LLC",
        reisen: "Binky Moon, LLC",
        reit: "National Association of Real Estate Investment Trusts, Inc.",
        reliance: "Reliance Industries Limited",
        ren: "Beijing Qianxiang Wangjing Technology Development Co., Ltd.",
        rent: "XYZ.COM LLC",
        rentals: "Binky Moon, LLC",
        repair: "Binky Moon, LLC",
        report: "Binky Moon, LLC",
        republican: "United TLD Holdco Ltd.",
        rest: "Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable",
        restaurant: "Binky Moon, LLC",
        review: "dot Review Limited",
        reviews: "United TLD Holdco, Ltd.",
        rexroth: "Robert Bosch GMBH",
        rich: "I-REGISTRY Ltd., Niederlassung Deutschland",
        richardli: "Pacific Century Asset Management (HK) Limited",
        ricoh: "Ricoh Company, Ltd.",
        rightathome: "Johnson Shareholdings, Inc.",
        ril: "Reliance Industries Limited",
        rio: "Empresa Municipal de Inform\xE1tica SA - IPLANRIO",
        rip: "United TLD Holdco Ltd.",
        rmit: "Royal Melbourne Institute of Technology",
        ro: "Romania",
        rocher: "Ferrero Trading Lux S.A.",
        rocks: "United TLD Holdco, LTD.",
        rodeo: "Top Level Domain Holdings Limited",
        rogers: "Rogers Communications Canada Inc.",
        room: "Amazon Registry Services, Inc.",
        rs: "Serbia (Republic of)",
        rsvp: "Charleston Road Registry Inc.",
        ru: "Russia (Russian Federation)",
        rugby: "World Rugby Strategic Developments Limited",
        ruhr: "regiodot GmbH & Co. KG",
        run: "Binky Moon, LLC",
        rw: "Rwanda (Republic of)",
        rwe: "RWE AG",
        ryukyu: "BRregistry, Inc.",
        sa: "Saudi Arabia (Kingdom of)",
        saarland: "dotSaarland GmbH",
        safe: "Amazon Registry Services, Inc.",
        safety: "Safety Registry Services, LLC.",
        sakura: "SAKURA Internet Inc.",
        sale: "United TLD Holdco, Ltd",
        salon: "Binky Moon, LLC",
        samsclub: "Wal-Mart Stores, Inc.",
        samsung: "SAMSUNG SDS CO., LTD",
        sandvik: "Sandvik AB",
        sandvikcoromant: "Sandvik AB",
        sanofi: "Sanofi",
        sap: "SAP AG",
        sapo: "Not assigned",
        sarl: "Binky Moon, LLC",
        sas: "Research IP LLC",
        save: "Amazon Registry Services, Inc.",
        saxo: "Saxo Bank A/S",
        sb: "Solomon Islands",
        sbi: "STATE BANK OF INDIA",
        sbs: "SPECIAL BROADCASTING SERVICE CORPORATION",
        sc: "Seychelles (Republic of)",
        sca: "SVENSKA CELLULOSA AKTIEBOLAGET SCA (publ)",
        scb: 'The Siam Commercial Bank Public Company Limited ("SCB")',
        schaeffler: "Schaeffler Technologies AG & Co. KG",
        schmidt: "SALM S.A.S.",
        scholarships: "Scholarships.com, LLC",
        school: "Binky Moon, LLC",
        schule: "Binky Moon, LLC",
        schwarz: "Schwarz Domains und Services GmbH & Co. KG",
        science: "dot Science Limited",
        scjohnson: "Johnson Shareholdings, Inc.",
        scor: "SCOR SE",
        scot: "Dot Scot Registry Limited",
        sd: "Sudan (Republic of)",
        se: "Sweden (Kingdom of)",
        search: "Charleston Road Registry Inc.",
        seat: "SEAT, S.A. (Sociedad Unipersonal)",
        secure: "Amazon Registry Services, Inc.",
        security: "XYZ.COM LLC",
        seek: "Seek Limited",
        select: "iSelect Ltd",
        sener: "Sener Ingenier\xEDa y Sistemas, S.A.",
        services: "Binky Moon, LLC",
        ses: "SES",
        seven: "Seven West Media Ltd",
        sew: "SEW-EURODRIVE GmbH & Co KG",
        sex: "ICM Registry SX LLC",
        sexy: "Uniregistry, Corp.",
        sfr: "Societe Francaise du Radiotelephone - SFR",
        sg: "Singapore (Republic of)",
        sh: "Saint Helena",
        shangrila: "Shangri\u2010La International Hotel Management Limited",
        sharp: "Sharp Corporation",
        shaw: "Shaw Cablesystems G.P.",
        shell: "Shell Information Technology International Inc",
        shia: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
        shiksha: "Afilias plc",
        shoes: "Binky Moon, LLC",
        shop: "GMO Registry, Inc.",
        shopping: "Binky Moon, LLC",
        shouji: "QIHOO 360 TECHNOLOGY CO. LTD.",
        show: "Binky Moon, LLC",
        showtime: "CBS Domains Inc.",
        shriram: "Shriram Capital Ltd.",
        si: "Slovenia (Republic of)",
        silk: "Amazon Registry Services, Inc.",
        sina: "Sina Corporation",
        singles: "Binky Moon, LLC",
        site: "DotSite Inc.",
        sj: "Svalbard and Jan Mayen {not in use - see also: .no}",
        sk: "Slovakia (Slovak Republic)",
        ski: "STARTING DOT LIMITED",
        skin: "L'Or\xE9al",
        sky: "Sky International AG",
        skype: "Microsoft Corporation",
        sl: "Sierra Leone (Republic of)",
        sling: "Hughes Satellite Systems Corporation",
        sm: "San Marino (Republic of)",
        smart: "Smart Communications, Inc. (SMART)",
        smile: "Amazon Registry Services, Inc.",
        sn: "Senegal (Republic of)",
        sncf: "SNCF (Soci\xE9t\xE9 Nationale des Chemins de fer Francais)",
        so: "Somalia (Federal Republic of)",
        soccer: "Binky Moon, LLC",
        social: "United TLD Holdco Ltd.",
        softbank: "SoftBank Group Corp.",
        software: "United TLD Holdco, Ltd",
        sohu: "Sohu.com Limited",
        solar: "Binky Moon, LLC",
        solutions: "Binky Moon, LLC",
        song: "Amazon Registry Services, Inc.",
        sony: "Sony Corporation",
        soy: "Charleston Road Registry Inc.",
        space: "DotSpace Inc.",
        spiegel: "SPIEGEL-Verlag Rudolf Augstein GmbH & Co. KG",
        sport: "Global Association of International Sports Federations (GAISF)",
        spot: "Amazon Registry Services, Inc.",
        spreadbetting: "DOTSPREADBETTING REGISTRY LTD",
        sr: "Suriname (Republic of)",
        srl: "InterNetX Corp.",
        srt: "FCA US LLC.",
        ss: "South Sudan (Republic of)",
        st: "S\xE3o Tom\xE9 and Pr\xEDncipe (Democratic Republic of)",
        stada: "STADA Arzneimittel AG",
        staples: "Staples, Inc.",
        star: "Star India Private Limited",
        starhub: "StarHub Limited",
        statebank: "STATE BANK OF INDIA",
        statefarm: "State Farm Mutual Automobile Insurance Company",
        statoil: "Statoil ASA",
        stc: "Saudi Telecom Company",
        stcgroup: "Saudi Telecom Company",
        stockholm: "Stockholms kommun",
        storage: "XYZ.COM LLC",
        store: "DotStore Inc.",
        stream: "dot Stream Limited",
        studio: "United TLD Holdco Ltd.",
        study: "OPEN UNIVERSITIES AUSTRALIA PTY LTD",
        style: "Binky Moon, LLC",
        su: "Soviet Union (Union of Soviet Socialist Republics)",
        sucks: "Vox Populi Registry Ltd.",
        supplies: "Binky Moon, LLC",
        supply: "Binky Moon, LLC",
        support: "Binky Moon, LLC",
        surf: "Top Level Domain Holdings Limited",
        surgery: "Binky Moon, LLC",
        suzuki: "SUZUKI MOTOR CORPORATION",
        sv: "El Salvador (Republic of)",
        swatch: "The Swatch Group Ltd",
        swiftcover: "Swiftcover Insurance Services Limited",
        swiss: "Swiss Confederation",
        sx: "Sint Maarten",
        sy: "Syria (Syrian Arab Republic)",
        sydney: "State of New South Wales, Department of Premier and Cabinet",
        symantec: "Symantec Corporation",
        systems: "Binky Moon, LLC",
        sz: "Swaziland (Kingdom of)",
        tab: "Tabcorp Holdings Limited",
        taipei: "Taipei City Government",
        talk: "Amazon Registry Services, Inc.",
        taobao: "Alibaba Group Holding Limited",
        target: "Target Domain Holdings, LLC",
        tatamotors: "Tata Motors Ltd",
        tatar:
          'Limited Liability Company "Coordination Center of Regional Domain of Tatarstan Republic"',
        tattoo: "Uniregistry, Corp.",
        tax: "Binky Moon, LLC",
        taxi: "Binky Moon, LLC",
        tc: "Turks and Caicos Islands",
        tci: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
        td: "Chad (Republic of)",
        tdk: "TDK Corporation",
        team: "Binky Moon, LLC",
        tech: "Dot Tech LLC",
        technology: "Binky Moon, LLC",
        tel: "Telephone",
        telecity: "TelecityGroup International Limited",
        telefonica: "Telef\xF3nica S.A.",
        temasek: "Temasek Holdings (Private) Limited",
        tennis: "Binky Moon, LLC",
        teva: "Teva Pharmaceutical Industries Limited",
        tf: "French Southern and Antarctic Lands (Territory of the)",
        tg: "Togo (Togolese Republic)",
        th: "Thailand (Kingdom of)",
        thd: "Home Depot Product Authority, LLC",
        theater: "Binky Moon, LLC",
        theatre: "XYZ.COM LLC",
        tiaa: "Teachers Insurance and Annuity Association of America",
        tickets: "Accent Media Limited",
        tienda: "Binky Moon, LLC",
        tiffany: "Tiffany and Company",
        tips: "Binky Moon, LLC",
        tires: "Binky Moon, LLC",
        tirol: "punkt Tirol GmbH",
        tj: "Tajikistan (Republic of)",
        tjmaxx: "The TJX Companies, Inc.",
        tjx: "The TJX Companies, Inc.",
        tk: "Tokelau",
        tkmaxx: "The TJX Companies, Inc.",
        tl: "Timor-Leste (Democratic Republic of) [East Timor]",
        tm: "Turkmenistan",
        tmall: "Alibaba Group Holding Limited",
        tn: "Tunisia (Republic of)",
        to: "Tonga (Kingdom of)",
        today: "Binky Moon, LLC",
        tokyo: "GMO Registry, Inc.",
        tools: "Binky Moon, LLC",
        top: "Jiangsu Bangning Science & Technology Co.,Ltd.",
        toray: "Toray Industries, Inc.",
        toshiba: "TOSHIBA Corporation",
        total: "Total SA",
        tours: "Binky Moon, LLC",
        town: "Binky Moon, LLC",
        toyota: "TOYOTA MOTOR CORPORATION",
        toys: "Binky Moon, LLC",
        tp: "Timor-Leste (Democratic Republic of) [East Timor] {being phased out - also see: .tl}",
        tr: "Turkey (Republic of)",
        trade: "Elite Registry Limited",
        trading: "DOTTRADING REGISTRY LTD",
        training: "Binky Moon, LLC",
        travel: "Travel",
        travelchannel: "Lifestyle Domain Holdings, Inc.",
        travelers: "Travelers TLD, LLC",
        travelersinsurance: "Travelers TLD, LLC",
        trust: "Artemis Internet Inc",
        trv: "Travelers TLD, LLC",
        tt: "Trinidad and Tobago (Republic of)",
        tube: "Latin American Telecom LLC",
        tui: "TUI AG",
        tunes: "Amazon Registry Services, Inc.",
        tushu: "Amazon Registry Services, Inc.",
        tv: "Tuvalu",
        tvs: "T V SUNDRAM IYENGAR  & SONS PRIVATE LIMITED",
        tw: "Taiwan (Republic of China)",
        tz: "Tanzania (United Republic of)",
        ua: "Ukraine",
        ubank: "National Australia Bank Limited",
        ubs: "UBS AG",
        uconnect: "FCA US LLC.",
        ug: "Uganda (Republic of)",
        uk: "United Kingdom (United Kingdom of Great Britain and Northern Ireland)",
        um: "United States Minor Outlying Islands {formerly - retired 2010 - see also: .us}",
        unicom: "China United Network Communications Corporation Limited",
        university: "Binky Moon, LLC",
        uno: "Dot Latin LLC",
        uol: "UBN INTERNET LTDA.",
        ups: "UPS Market Driver, Inc.",
        us: "United States of America and United States Minor Outlying Islands",
        uy: "Uruguay (Oriental Republic of)",
        uz: "Uzbekistan (Republic of)",
        va: "Vatican City (Vatican City State)",
        vacations: "Binky Moon, LLC",
        vana: "Lifestyle Domain Holdings, Inc.",
        vanguard: "The Vanguard Group, Inc.",
        vc: "Saint Vincent and the Grenadines",
        ve: "Venezuela (Bolivarian Republic of)",
        vegas: "Dot Vegas, Inc.",
        ventures: "Binky Moon, LLC",
        verisign: "VeriSign, Inc.",
        versicherung: "TLD-BOX Registrydienstleistungen GmbH",
        vet: "United TLD Holdco, Ltd",
        vg: "British Virgin Islands (Virgin Islands)",
        vi: "United States Virgin Islands (United States Virgin Islands)",
        viajes: "Binky Moon, LLC",
        video: "United TLD Holdco, Ltd",
        vig: "VIENNA INSURANCE GROUP AG Wiener Versicherung Gruppe",
        viking: "Viking River Cruises (Bermuda) Ltd.",
        villas: "Binky Moon, LLC",
        vin: "Binky Moon, LLC",
        vip: "Minds + Machines Group Limited",
        virgin: "Virgin Enterprises Limited",
        visa: "Visa Worldwide Pte. Limited",
        vision: "Binky Moon, LLC",
        vista: "Vistaprint Limited",
        vistaprint: "Vistaprint Limited",
        viva: "Saudi Telecom Company",
        vivo: "Telefonica Brasil S.A.",
        vlaanderen: "DNS.be vzw",
        vn: "Vietnam (Socialist Republic of)",
        vodka: "Top Level Domain Holdings Limited",
        volkswagen: "Volkswagen Group of America Inc.",
        volvo: "Volvo Holding Sverige Aktiebolag",
        vote: "Monolith Registry LLC",
        voting: "Valuetainment Corp.",
        voto: "Monolith Registry LLC",
        voyage: "Binky Moon, LLC",
        vu: "Vanuatu (Republic of)",
        vuelos: "Travel Reservations SRL",
        wales: "Nominet UK",
        walmart: "Wal-Mart Stores, Inc.",
        walter: "Sandvik AB",
        wang: "Zodiac Wang Limited",
        wanggou: "Amazon Registry Services, Inc.",
        warman: "Weir Group IP Limited",
        watch: "Binky Moon, LLC",
        watches: "Richemont DNS Inc.",
        weather: "International Business Machines Corporation",
        weatherchannel: "International Business Machines Corporation",
        webcam: "dot Webcam Limited",
        weber: "Saint-Gobain Weber SA",
        website: "DotWebsite Inc.",
        wed: "Emergency Back-End Registry Operator Program - ICANN",
        wedding: "Top Level Domain Holdings Limited",
        weibo: "Sina Corporation",
        weir: "Weir Group IP Limited",
        wf: "Wallis and Futuna (Territory of the Wallis and Futuna Islands)",
        whoswho: "Who's Who Registry",
        wien: "punkt.wien GmbH",
        wiki: "Top Level Design, LLC",
        williamhill: "William Hill Organization Limited",
        win: "First Registry Limited",
        windows: "Microsoft Corporation",
        wine: "Binky Moon, LLC",
        winners: "The TJX Companies, Inc.",
        wme: "William Morris Endeavor Entertainment, LLC",
        wolterskluwer: "Wolters Kluwer N.V.",
        woodside: "Woodside Petroleum Limited",
        work: "Top Level Domain Holdings Limited",
        works: "Binky Moon, LLC",
        world: "Binky Moon, LLC",
        wow: "Amazon Registry Services, Inc.",
        ws: "Samoa (Independent State of)",
        wtc: "World Trade Centers Association, Inc.",
        wtf: "Binky Moon, LLC",
        xbox: "Microsoft Corporation",
        xerox: "Xerox DNHC LLC",
        xfinity: "Comcast IP Holdings I, LLC",
        xihuan: "QIHOO 360 TECHNOLOGY CO. LTD.",
        xin: "Elegant Leader Limited",
        "\u6D4B\u8BD5": "Internet Assigned Numbers Authority",
        "\u0915\u0949\u092E": "VeriSign Sarl",
        "\u092A\u0930\u0940\u0915\u094D\u0937\u093E":
          "Internet Assigned Numbers Authority",
        "\u30BB\u30FC\u30EB": "Amazon Registry Services, Inc.",
        "\u4F5B\u5C71": "Guangzhou YU Wei Information Technology Co., Ltd.",
        "\u0CAD\u0CBE\u0CB0\u0CA4": "National Internet eXchange of India",
        "\u6148\u5584": "Excellent First Limited",
        "\u96C6\u56E2": "Eagle Horizon Limited",
        "\u5728\u7EBF": "TLD REGISTRY LIMITED",
        "\uD55C\uAD6D": "KISA (Korea Internet & Security Agency)",
        "\u0B2D\u0B3E\u0B30\u0B24": "National Internet eXchange of India",
        "\u5927\u4F17\u6C7D\u8F66": "Volkswagen (China) Investment Co., Ltd.",
        "\u70B9\u770B": "VeriSign Sarl",
        "\u0E04\u0E2D\u0E21": "VeriSign Sarl",
        "\u09AD\u09BE\u09F0\u09A4": "National Internet eXchange of India",
        "\u09AD\u09BE\u09B0\u09A4": "National Internet Exchange of India",
        "\u516B\u5366": "Zodiac Gemini Ltd",
        "\u200F\u0645\u0648\u0642\u0639\u200E":
          "Suhub Electronic Establishment",
        "\u09AC\u09BE\u0982\u09B2\u09BE":
          "Posts and Telecommunications Division",
        "\u516C\u76CA": "China Organizational Name Administration Center",
        "\u516C\u53F8":
          "Computer Network Information Center of Chinese Academy of Sciences \uFF08China Internet Network Information Center\uFF09",
        "\u9999\u683C\u91CC\u62C9":
          "Shangri\u2010La International Hotel Management Limited",
        "\u7F51\u7AD9": "Global Website TLD Asia Limited",
        "\u79FB\u52A8": "Afilias plc",
        "\u6211\u7231\u4F60": "Tycoon Treasure Limited",
        "\u043C\u043E\u0441\u043A\u0432\u0430":
          "Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)",
        "\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435":
          "Internet Assigned Numbers Authority",
        "\u049B\u0430\u0437": "Association of IT Companies of Kazakhstan",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A":
          "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
        "\u043E\u043D\u043B\u0430\u0439\u043D": "CORE Association",
        "\u0441\u0430\u0439\u0442": "CORE Association",
        "\u8054\u901A":
          "China United Network Communications Corporation Limited",
        "\u0441\u0440\u0431":
          "Serbian National Internet Domain Registry (RNIDS)",
        "\u0431\u0433": "Imena.BG AD",
        "\u0431\u0435\u043B": "Reliable Software, Ltd.",
        "\u200F\u05E7\u05D5\u05DD\u200E": "VeriSign Sarl",
        "\u65F6\u5C1A": "RISE VICTORY LIMITED",
        "\u5FAE\u535A": "Sina Corporation",
        "\uD14C\uC2A4\uD2B8": "Internet Assigned Numbers Authority",
        "\u6DE1\u9A6C\u9521": "Temasek Holdings (Private) Limited",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3":
          "Amazon Registry Services, Inc.",
        "\u043E\u0440\u0433": "Public Interest Registry",
        "\u0928\u0947\u091F": "VeriSign Sarl",
        "\u30B9\u30C8\u30A2": "Amazon Registry Services, Inc.",
        "\uC0BC\uC131": "SAMSUNG SDS CO., LTD",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD":
          "Singapore Network Information Centre (SGNIC) Pte Ltd",
        "\u5546\u6807":
          "HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED",
        "\u5546\u5E97": "Binky Moon, LLC",
        "\u5546\u57CE": "Zodiac Aquarius Limited",
        "\u0434\u0435\u0442\u0438":
          "The Foundation for Network Initiatives \u201CThe Smart Internet\u201D",
        "\u043C\u043A\u0434": "Macedonian Academic Research Network Skopje",
        "\u200F\u05D8\u05E2\u05E1\u05D8\u200E":
          "Internet Assigned Numbers Authority",
        "\u0435\u044E": "EURid vzw/asbl",
        "\u30DD\u30A4\u30F3\u30C8": "Amazon Registry Services, Inc.",
        "\u65B0\u95FB": "Guangzhou YU Wei Information and Technology Co.,Ltd",
        "\u5DE5\u884C": "Industrial and Commercial Bank of China Limited",
        "\u5BB6\u96FB": "Amazon Registry Services, Inc.",
        "\u200F\u0643\u0648\u0645\u200E": "VeriSign Sarl",
        "\u4E2D\u6587\u7F51": "TLD REGISTRY LIMITED",
        "\u4E2D\u4FE1": "CITIC Group Corporation",
        "\u4E2D\u56FD": "China Internet Network Information Center (CNNIC)",
        "\u4E2D\u570B": "China Internet Network Information Center (CNNIC)",
        "\u5A31\u4E50": "Binky Moon, LLC",
        "\u8C37\u6B4C": "Charleston Road Registry Inc.",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D": "National Internet Exchange of India",
        "\u0DBD\u0D82\u0D9A\u0DCF": "LK Domain Registry",
        "\u96FB\u8A0A\u76C8\u79D1": "PCCW Enterprises Limited",
        "\u8D2D\u7269": "Minds + Machines Group Limited",
        "\u6E2C\u8A66": "Internet Assigned Numbers Authority",
        "\u30AF\u30E9\u30A6\u30C9": "Amazon Registry Services, Inc.",
        "\u0AAD\u0ABE\u0AB0\u0AA4": "National Internet Exchange of India",
        "\u901A\u8CA9": "Amazon Registry Services, Inc.",
        "\u092D\u093E\u0930\u0924\u092E\u094D":
          "National Internet eXchange of India",
        "\u092D\u093E\u0930\u0924": "National Internet Exchange of India",
        "\u092D\u093E\u0930\u094B\u0924": "National Internet eXchange of India",
        "\u200F\u0622\u0632\u0645\u0627\u06CC\u0634\u06CC\u200E":
          "Internet Assigned Numbers Authority",
        "\u0BAA\u0BB0\u0BBF\u0B9F\u0BCD\u0B9A\u0BC8":
          "Internet Assigned Numbers Authority",
        "\u7F51\u5E97": "Zodiac Taurus Ltd.",
        "\u0938\u0902\u0917\u0920\u0928": "Public Interest Registry",
        "\u9910\u5385":
          "HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED",
        "\u7F51\u7EDC":
          "Computer Network Information Center of Chinese Academy of Sciences \uFF08China Internet Network Information Center\uFF09",
        "\u043A\u043E\u043C": "VeriSign Sarl",
        "\u0443\u043A\u0440":
          "Ukrainian Network Information Centre (UANIC), Inc.",
        "\u9999\u6E2F": "Hong Kong Internet Registration Corporation Ltd.",
        "\u8BFA\u57FA\u4E9A": "Nokia Corporation",
        "\u98DF\u54C1": "Amazon Registry Services, Inc.",
        "\u03B4\u03BF\u03BA\u03B9\u03BC\u03AE":
          "Internet Assigned Numbers Authority",
        "\u98DE\u5229\u6D66": "Koninklijke Philips N.V.",
        "\u200F\u0625\u062E\u062A\u0628\u0627\u0631\u200E":
          "Internet Assigned Numbers Authority",
        "\u53F0\u6E7E": "Taiwan Network Information Center (TWNIC)",
        "\u53F0\u7063": "Taiwan Network Information Center (TWNIC)",
        "\u624B\u8868": "Richemont DNS Inc.",
        "\u624B\u673A": "Beijing RITT-Net Technology Development Co., Ltd",
        "\u043C\u043E\u043D": "Datacom Co.,Ltd",
        "\u200F\u0627\u0644\u062C\u0632\u0627\u0626\u0631\u200E": "CERIST",
        "\u200F\u0639\u0645\u0627\u0646\u200E":
          "Telecommunications Regulatory Authority (TRA)",
        "\u200F\u0627\u0631\u0627\u0645\u0643\u0648\u200E":
          "Aramco Services Company",
        "\u200F\u0627\u06CC\u0631\u0627\u0646\u200E":
          "Institute for Research in Fundamental Sciences (IPM)",
        "\u200F\u0627\u0644\u0639\u0644\u064A\u0627\u0646\u200E":
          "Crescent Holding GmbH",
        "\u200F\u0627\u062A\u0635\u0627\u0644\u0627\u062A\u200E":
          "Emirates Telecommunications Corporation (trading as Etisalat)",
        "\u200F\u0627\u0645\u0627\u0631\u0627\u062A\u200E":
          "Telecommunications Regulatory Authority (TRA)",
        "\u200F\u0628\u0627\u0632\u0627\u0631\u200E": "CORE Association",
        "\u200F\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627\u200E":
          "Not assigned",
        "\u200F\u067E\u0627\u06A9\u0633\u062A\u0627\u0646\u200E":
          "National Telecommunication Corporation",
        "\u200F\u0627\u0644\u0627\u0631\u062F\u0646\u200E":
          "National Information Technology Center (NITC)",
        "\u200F\u0645\u0648\u0628\u0627\u064A\u0644\u064A\u200E":
          "GreenTech Consultancy Company W.L.L.",
        "\u200F\u0628\u0627\u0631\u062A\u200E":
          "National Internet eXchange of India",
        "\u200F\u0628\u06BE\u0627\u0631\u062A\u200E":
          "National Internet Exchange of India",
        "\u200F\u0627\u0644\u0645\u063A\u0631\u0628\u200E":
          "Agence Nationale de R\xE9glementation des T\xE9l\xE9communications (ANRT)",
        "\u200F\u0627\u0628\u0648\u0638\u0628\u064A\u200E":
          "Abu Dhabi Systems and Information Centre",
        "\u200F\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629\u200E":
          "Communications and Information Technology Commission",
        "\u200F\u0680\u0627\u0631\u062A\u200E":
          "National Internet eXchange of India",
        "\u200F\u0643\u0627\u062B\u0648\u0644\u064A\u0643\u200E":
          "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
        "\u200F\u0633\u0648\u062F\u0627\u0646\u200E": "Sudan Internet Society",
        "\u200F\u0647\u0645\u0631\u0627\u0647\u200E":
          "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
        "\u200F\u0639\u0631\u0627\u0642\u200E":
          "Communications and Media Commission (CMC)",
        "\u200F\u0645\u0644\u064A\u0633\u064A\u0627\u200E": "MYNIC Berhad",
        "\u6FB3\u9580": "Macao Post and Telecommunications Bureau (CTT)",
        "\uB2F7\uCEF4": "VeriSign Sarl",
        "\u653F\u5E9C": "Net-Chinese Co., Ltd.",
        "\u200F\u0634\u0628\u0643\u0629\u200E":
          "International Domain Registry Pty. Ltd.",
        "\u200F\u0628\u064A\u062A\u0643\u200E": "Kuwait Finance House",
        "\u200F\u0639\u0631\u0628\u200E": "League of Arab States",
        "\u10D2\u10D4": "Information Technologies Development Center (ITDC)",
        "\u673A\u6784": "Public Interest Registry",
        "\u7EC4\u7EC7\u673A\u6784": "Public Interest Registry",
        "\u5065\u5EB7": "Stable Tone Limited",
        "\u0E44\u0E17\u0E22": "Thai Network Information Center Foundation",
        "\u200F\u0633\u0648\u0631\u064A\u0629\u200E":
          "National Agency for Network Services (NANS)",
        "\u62DB\u8058": "Dot Trademark TLD Holding Company Limited",
        "\u0440\u0443\u0441": "Rusnames Limited",
        "\u0440\u0444": "Coordination Center for TLD RU",
        "\u73E0\u5B9D": "Richemont DNS Inc.",
        "\u200F\u062A\u0648\u0646\u0633\u200E": "Agence Tunisienne d'Internet",
        "\u5927\u62FF": "VeriSign Sarl",
        "\u307F\u3093\u306A": "Charleston Road Registry Inc.",
        "\u30B0\u30FC\u30B0\u30EB": "Charleston Road Registry Inc.",
        "\u03B5\u03BB": "ICS-FORTH GR",
        "\u4E16\u754C": "Stable Tone Limited",
        "\u66F8\u7C4D": "Amazon Registry Services, Inc.",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02": "National Internet eXchange of India",
        "\u0A2D\u0A3E\u0A30\u0A24": "National Internet Exchange of India",
        "\u7F51\u5740": "KNET Co., Ltd",
        "\uB2F7\uB137": "VeriSign Sarl",
        "\u30B3\u30E0": "VeriSign Sarl",
        "\u5929\u4E3B\u6559":
          "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
        "\u6E38\u620F": "Binky Moon, LLC",
        "verm\xF6gensberater":
          "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
        "verm\xF6gensberatung":
          "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
        "\u4F01\u4E1A": "Binky Moon, LLC",
        "\u4FE1\u606F": "Beijing Tele-info Network Technology Co., Ltd.",
        "\u5609\u91CC\u5927\u9152\u5E97": "Kerry Trading Co. Limited",
        "\u5609\u91CC": "Kerry Trading Co. Limited",
        "\u200F\u0645\u0635\u0631\u200E":
          "National Telecommunication Regulatory Authority - NTRA",
        "\u200F\u0642\u0637\u0631\u200E": "Communications Regulatory Authority",
        "\u5E7F\u4E1C": "Guangzhou YU Wei Information Technology Co., Ltd.",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8": "LK Domain Registry",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE":
          "National Internet Exchange of India",
        "\u0570\u0561\u0575":
          '"Internet Society" Non-governmental Organization',
        "\u65B0\u52A0\u5761":
          "Singapore Network Information Centre (SGNIC) Pte Ltd",
        "\u200F\u0641\u0644\u0633\u0637\u064A\u0646\u200E":
          "Ministry of Telecom & Information Technology (MTIT)",
        "\u30C6\u30B9\u30C8": "Internet Assigned Numbers Authority",
        "\u653F\u52A1": "China Organizational Name Administration Center",
        xperia: "Sony Mobile Communications AB",
        xxx: "Adult entertainment",
        xyz: "XYZ.COM LLC",
        yachts: "DERYachts, LLC",
        yahoo: "Yahoo! Domain Services Inc.",
        yamaxun: "Amazon Registry Services, Inc.",
        yandex: "YANDEX, LLC",
        ye: "Yemen (Republic of)",
        yodobashi: "YODOBASHI CAMERA CO.,LTD.",
        yoga: "Top Level Domain Holdings Limited",
        yokohama: "GMO Registry, Inc.",
        you: "Amazon Registry Services, Inc.",
        youtube: "Charleston Road Registry Inc.",
        yt: "Mayotte (Department of)",
        yun: "QIHOO 360 TECHNOLOGY CO. LTD.",
        za: "South Africa (Republic of)",
        zappos: "Amazon Registry Services, Inc.",
        zara: "Industria de Dise\xF1o Textil, S.A. (INDITEX, S.A.)",
        zero: "Amazon Registry Services, Inc.",
        zip: "Charleston Road Registry Inc.",
        zippo: "Zadco Company",
        zm: "Zambia (Republic of)",
        zone: "Binky Moon, LLC",
        zuerich: "Kanton Z\xFCrich (Canton of Zurich)",
        zw: "Zimbabwe (Republic of)",
      };
    },
  });

  // node_modules/@lumeweb/tld-enum/formats/js/tld-enum/info.js
  var require_info = __commonJS({
    "node_modules/@lumeweb/tld-enum/formats/js/tld-enum/info.js"(
      exports,
      module
    ) {
      module.exports = [
        {
          domain: "aaa",
          description: "American Automobile Association, Inc.",
          type: "generic",
        },
        {
          domain: "aarp",
          description: "AARP",
          type: "generic",
        },
        {
          domain: "abarth",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "abb",
          description: "ABB Ltd",
          type: "generic",
        },
        {
          domain: "abbott",
          description: "Abbott Laboratories, Inc.",
          type: "generic",
        },
        {
          domain: "abbvie",
          description: "AbbVie Inc.",
          type: "generic",
        },
        {
          domain: "abc",
          description: "Disney Enterprises, Inc.",
          type: "generic",
        },
        {
          domain: "able",
          description: "Able Inc.",
          type: "generic",
        },
        {
          domain: "abogado",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "abudhabi",
          description: "Abu Dhabi Systems and Information Centre",
          type: "generic",
        },
        {
          domain: "ac",
          description: "Ascension Island",
          type: "country-code",
        },
        {
          domain: "academy",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "accenture",
          description: "Accenture plc",
          type: "generic",
        },
        {
          domain: "accountant",
          description: "dot Accountant Limited",
          type: "generic",
        },
        {
          domain: "accountants",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "aco",
          description: "ACO Severin Ahlmann GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "active",
          description: "Active Network, LLC",
          type: "generic",
        },
        {
          domain: "actor",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "ad",
          description: "Andorra (Principality of)",
          type: "country-code",
        },
        {
          domain: "adac",
          description: "Allgemeiner Deutscher Automobil-Club e.V. (ADAC)",
          type: "generic",
        },
        {
          domain: "ads",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "adult",
          description: "ICM Registry AD LLC",
          type: "generic",
        },
        {
          domain: "ae",
          description: "United Arab Emirates",
          type: "country-code",
        },
        {
          domain: "aeg",
          description: "Aktiebolaget Electrolux",
          type: "generic",
        },
        {
          domain: "aero",
          description: "Air-transport industry",
          type: "sponsored",
        },
        {
          domain: "aetna",
          description: "Aetna Life Insurance Company",
          type: "generic",
        },
        {
          domain: "af",
          description: "Afghanistan (Islamic Republic of)",
          type: "country-code",
        },
        {
          domain: "afamilycompany",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "afl",
          description: "Australian Football League",
          type: "generic",
        },
        {
          domain: "africa",
          description: "ZA Central Registry NPC trading as Registry.Africa",
          type: "generic",
        },
        {
          domain: "ag",
          description: "Antigua and Barbuda",
          type: "country-code",
        },
        {
          domain: "agakhan",
          description: "Fondation Aga Khan (Aga Khan Foundation)",
          type: "generic",
        },
        {
          domain: "agency",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ai",
          description: "Anguilla",
          type: "country-code",
        },
        {
          domain: "aig",
          description: "American International Group, Inc.",
          type: "generic",
        },
        {
          domain: "aigo",
          description: "aigo Digital Technology Co,Ltd.",
          type: "generic",
        },
        {
          domain: "airbus",
          description: "Airbus S.A.S.",
          type: "generic",
        },
        {
          domain: "airforce",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "airtel",
          description: "Bharti Airtel Limited",
          type: "generic",
        },
        {
          domain: "akdn",
          description: "Fondation Aga Khan (Aga Khan Foundation)",
          type: "generic",
        },
        {
          domain: "al",
          description: "Albania (Republic of)",
          type: "country-code",
        },
        {
          domain: "alfaromeo",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "alibaba",
          description: "Alibaba Group Holding Limited",
          type: "generic",
        },
        {
          domain: "alipay",
          description: "Alibaba Group Holding Limited",
          type: "generic",
        },
        {
          domain: "allfinanz",
          description:
            "Allfinanz Deutsche Verm\xF6gensberatung Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "allstate",
          description: "Allstate Fire and Casualty Insurance Company",
          type: "generic",
        },
        {
          domain: "ally",
          description: "Ally Financial Inc.",
          type: "generic",
        },
        {
          domain: "alsace",
          description: "REGION GRAND EST",
          type: "generic",
        },
        {
          domain: "alstom",
          description: "ALSTOM",
          type: "generic",
        },
        {
          domain: "am",
          description: "Armenia (Republic of)",
          type: "country-code",
        },
        {
          domain: "americanexpress",
          description: "American Express Travel Related Services Company, Inc.",
          type: "generic",
        },
        {
          domain: "americanfamily",
          description: "AmFam, Inc.",
          type: "generic",
        },
        {
          domain: "amex",
          description: "American Express Travel Related Services Company, Inc.",
          type: "generic",
        },
        {
          domain: "amfam",
          description: "AmFam, Inc.",
          type: "generic",
        },
        {
          domain: "amica",
          description: "Amica Mutual Insurance Company",
          type: "generic",
        },
        {
          domain: "amsterdam",
          description: "Gemeente Amsterdam",
          type: "generic",
        },
        {
          domain: "an",
          description: "Netherlands Antilles",
          type: "country-code",
        },
        {
          domain: "analytics",
          description: "Campus IP LLC",
          type: "generic",
        },
        {
          domain: "android",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "anquan",
          description: "QIHOO 360 TECHNOLOGY CO. LTD.",
          type: "generic",
        },
        {
          domain: "anz",
          description: "Australia and New Zealand Banking Group Limited",
          type: "generic",
        },
        {
          domain: "ao",
          description: "Angola (Republic of)",
          type: "country-code",
        },
        {
          domain: "aol",
          description: "OATH Inc.",
          type: "generic",
        },
        {
          domain: "apartments",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "app",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "apple",
          description: "Apple Inc.",
          type: "generic",
        },
        {
          domain: "aq",
          description: "Antarctica",
          type: "country-code",
        },
        {
          domain: "aquarelle",
          description: "Aquarelle.com",
          type: "generic",
        },
        {
          domain: "ar",
          description: "Argentina (Argentine Republic)",
          type: "country-code",
        },
        {
          domain: "arab",
          description: "League of Arab States",
          type: "generic",
        },
        {
          domain: "aramco",
          description: "Aramco Services Company",
          type: "generic",
        },
        {
          domain: "archi",
          description: "STARTING DOT LIMITED",
          type: "generic",
        },
        {
          domain: "army",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "arpa",
          description: "Address and Routing Parameter Area",
          type: "infrastructure",
        },
        {
          domain: "art",
          description: "UK Creative Ideas Limited",
          type: "generic",
        },
        {
          domain: "arte",
          description:
            "Association Relative \xE0 la T\xE9l\xE9vision Europ\xE9enne G.E.I.E.",
          type: "generic",
        },
        {
          domain: "as",
          description: "American Samoa",
          type: "country-code",
        },
        {
          domain: "asda",
          description: "Wal-Mart Stores, Inc.",
          type: "generic",
        },
        {
          domain: "asia",
          description:
            "Organisations and individuals in the Asia-Pacific region",
          type: "sponsored",
        },
        {
          domain: "associates",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "at",
          description: "Austria (Republic of)",
          type: "country-code",
        },
        {
          domain: "athleta",
          description: "The Gap, Inc.",
          type: "generic",
        },
        {
          domain: "attorney",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "au",
          description: "Australia (Commonwealth of)",
          type: "country-code",
        },
        {
          domain: "auction",
          description: "United TLD HoldCo, Ltd.",
          type: "generic",
        },
        {
          domain: "audi",
          description: "AUDI Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "audible",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "audio",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "auspost",
          description: "Australian Postal Corporation",
          type: "generic",
        },
        {
          domain: "author",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "auto",
          description: "Cars Registry Limited",
          type: "generic",
        },
        {
          domain: "autos",
          description: "DERAutos, LLC",
          type: "generic",
        },
        {
          domain: "avianca",
          description: "Aerovias del Continente Americano S.A. Avianca",
          type: "generic",
        },
        {
          domain: "aw",
          description: "Aruba",
          type: "country-code",
        },
        {
          domain: "aws",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "ax",
          description: "\xC5land Islands",
          type: "country-code",
        },
        {
          domain: "axa",
          description: "AXA SA",
          type: "generic",
        },
        {
          domain: "az",
          description: "Azerbaijan (Republic of)",
          type: "country-code",
        },
        {
          domain: "azure",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "ba",
          description: "Bosnia and Herzegovina",
          type: "country-code",
        },
        {
          domain: "baby",
          description: "Johnson & Johnson Services, Inc.",
          type: "generic",
        },
        {
          domain: "baidu",
          description: "Baidu, Inc.",
          type: "generic",
        },
        {
          domain: "banamex",
          description: "Citigroup Inc.",
          type: "generic",
        },
        {
          domain: "bananarepublic",
          description: "The Gap, Inc.",
          type: "generic",
        },
        {
          domain: "band",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "bank",
          description: "fTLD Registry Services, LLC",
          type: "generic",
        },
        {
          domain: "bar",
          description:
            "Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable",
          type: "generic",
        },
        {
          domain: "barcelona",
          description: "Municipi de Barcelona",
          type: "generic",
        },
        {
          domain: "barclaycard",
          description: "Barclays Bank PLC",
          type: "generic",
        },
        {
          domain: "barclays",
          description: "Barclays Bank PLC",
          type: "generic",
        },
        {
          domain: "barefoot",
          description: "Gallo Vineyards, Inc.",
          type: "generic",
        },
        {
          domain: "bargains",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "baseball",
          description: "MLB Advanced Media DH, LLC",
          type: "generic",
        },
        {
          domain: "basketball",
          description: "F\xE9d\xE9ration Internationale de Basketball (FIBA)",
          type: "generic",
        },
        {
          domain: "bauhaus",
          description: "Werkhaus GmbH",
          type: "generic",
        },
        {
          domain: "bayern",
          description: "Bayern Connect GmbH",
          type: "generic",
        },
        {
          domain: "bb",
          description: "Barbados",
          type: "country-code",
        },
        {
          domain: "bbc",
          description: "British Broadcasting Corporation",
          type: "generic",
        },
        {
          domain: "bbt",
          description: "BB&T Corporation",
          type: "generic",
        },
        {
          domain: "bbva",
          description: "BANCO BILBAO VIZCAYA ARGENTARIA, S.A.",
          type: "generic",
        },
        {
          domain: "bcg",
          description: "The Boston Consulting Group, Inc.",
          type: "generic",
        },
        {
          domain: "bcn",
          description: "Municipi de Barcelona",
          type: "generic",
        },
        {
          domain: "bd",
          description: "Bangladesh (People's Republic of)",
          type: "country-code",
        },
        {
          domain: "be",
          description: "Belgium (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "beats",
          description: "Beats Electronics, LLC",
          type: "generic",
        },
        {
          domain: "beauty",
          description: "L'Or\xE9al",
          type: "generic",
        },
        {
          domain: "beer",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "bentley",
          description: "Bentley Motors Limited",
          type: "generic",
        },
        {
          domain: "berlin",
          description: "dotBERLIN GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "best",
          description: "BestTLD Pty Ltd",
          type: "generic",
        },
        {
          domain: "bestbuy",
          description: "BBY Solutions, Inc.",
          type: "generic",
        },
        {
          domain: "bet",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "bf",
          description: "Burkina Faso",
          type: "country-code",
        },
        {
          domain: "bg",
          description: "Bulgaria (Republic of)",
          type: "country-code",
        },
        {
          domain: "bh",
          description: "Bahrain (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "bharti",
          description: "Bharti Enterprises (Holding) Private Limited",
          type: "generic",
        },
        {
          domain: "bi",
          description: "Burundi (Republic of)",
          type: "country-code",
        },
        {
          domain: "bible",
          description: "American Bible Society",
          type: "generic",
        },
        {
          domain: "bid",
          description: "dot Bid Limited",
          type: "generic",
        },
        {
          domain: "bike",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "bing",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "bingo",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "bio",
          description: "STARTING DOT LIMITED",
          type: "generic",
        },
        {
          domain: "biz",
          description: "Business",
          type: "generic-restricted",
        },
        {
          domain: "bj",
          description: "Benin (Republic of)",
          type: "country-code",
        },
        {
          domain: "bl",
          description:
            "Saint Barth\xE9lemy (Collectivity of) {unassigned - see also: .gp and .fr}",
          type: "country-code",
        },
        {
          domain: "black",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "blackfriday",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "blanco",
          description: "BLANCO GmbH + Co KG",
          type: "generic",
        },
        {
          domain: "blockbuster",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "blog",
          description: "Knock Knock WHOIS There, LLC",
          type: "generic",
        },
        {
          domain: "bloomberg",
          description: "Bloomberg IP Holdings LLC",
          type: "generic",
        },
        {
          domain: "blue",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "bm",
          description: "Bermuda",
          type: "country-code",
        },
        {
          domain: "bms",
          description: "Bristol-Myers Squibb Company",
          type: "generic",
        },
        {
          domain: "bmw",
          description: "Bayerische Motoren Werke Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "bn",
          description:
            "Brunei (Nation of Brunei - the Abode of Peace) [Negara Brunei Darussalam]",
          type: "country-code",
        },
        {
          domain: "bnl",
          description: "Banca Nazionale del Lavoro",
          type: "generic",
        },
        {
          domain: "bnpparibas",
          description: "BNP Paribas",
          type: "generic",
        },
        {
          domain: "bo",
          description: "Bolivia (Plurinational State of)",
          type: "country-code",
        },
        {
          domain: "boats",
          description: "DERBoats, LLC",
          type: "generic",
        },
        {
          domain: "boehringer",
          description: "Boehringer Ingelheim International GmbH",
          type: "generic",
        },
        {
          domain: "bofa",
          description: "Bank of America Corporation",
          type: "generic",
        },
        {
          domain: "bom",
          description:
            "N\xFAcleo de Informa\xE7\xE3o e Coordena\xE7\xE3o do Ponto BR - NIC.br",
          type: "generic",
        },
        {
          domain: "bond",
          description: "Bond University Limited",
          type: "generic",
        },
        {
          domain: "boo",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "book",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "booking",
          description: "Booking.com B.V.",
          type: "generic",
        },
        {
          domain: "boots",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "bosch",
          description: "Robert Bosch GMBH",
          type: "generic",
        },
        {
          domain: "bostik",
          description: "Bostik SA",
          type: "generic",
        },
        {
          domain: "boston",
          description: "Boston TLD Management, LLC",
          type: "generic",
        },
        {
          domain: "bot",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "boutique",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "box",
          description: "NS1 Limited",
          type: "generic",
        },
        {
          domain: "bq",
          description:
            "Caribbean Netherlands [Bonaire - Sint Eustatius and Saba] {unassigned - see also: .an and .nl}",
          type: "country-code",
        },
        {
          domain: "br",
          description: "Brazil (Federative Republic of)",
          type: "country-code",
        },
        {
          domain: "bradesco",
          description: "Banco Bradesco S.A.",
          type: "generic",
        },
        {
          domain: "bridgestone",
          description: "Bridgestone Corporation",
          type: "generic",
        },
        {
          domain: "broadway",
          description: "Celebrate Broadway, Inc.",
          type: "generic",
        },
        {
          domain: "broker",
          description: "DOTBROKER REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "brother",
          description: "Brother Industries, Ltd.",
          type: "generic",
        },
        {
          domain: "brussels",
          description: "DNS.be vzw",
          type: "generic",
        },
        {
          domain: "bs",
          description: "Bahamas (Commonwealth of the)",
          type: "country-code",
        },
        {
          domain: "bt",
          description: "Bhutan (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "budapest",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "bugatti",
          description: "Bugatti International SA",
          type: "generic",
        },
        {
          domain: "build",
          description: "Plan Bee LLC",
          type: "generic",
        },
        {
          domain: "builders",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "business",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "buy",
          description: "Amazon Registry Services, INC",
          type: "generic",
        },
        {
          domain: "buzz",
          description: "DOTSTRATEGY CO.",
          type: "generic",
        },
        {
          domain: "bv",
          description: "Bouvet Island",
          type: "country-code",
        },
        {
          domain: "bw",
          description: "Botswana (Republic of)",
          type: "country-code",
        },
        {
          domain: "by",
          description: "Belarus (Republic of)",
          type: "country-code",
        },
        {
          domain: "bz",
          description: "Belize",
          type: "country-code",
        },
        {
          domain: "bzh",
          description: "Association www.bzh",
          type: "generic",
        },
        {
          domain: "ca",
          description: "Canada",
          type: "country-code",
        },
        {
          domain: "cab",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cafe",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cal",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "call",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "calvinklein",
          description: "PVH gTLD Holdings LLC",
          type: "generic",
        },
        {
          domain: "cam",
          description: "AC Webconnecting Holding B.V.",
          type: "generic",
        },
        {
          domain: "camera",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "camp",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cancerresearch",
          description: "Australian Cancer Research Foundation",
          type: "generic",
        },
        {
          domain: "canon",
          description: "Canon Inc.",
          type: "generic",
        },
        {
          domain: "capetown",
          description: "ZA Central Registry NPC trading as ZA Central Registry",
          type: "generic",
        },
        {
          domain: "capital",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "capitalone",
          description: "Capital One Financial Corporation",
          type: "generic",
        },
        {
          domain: "car",
          description: "Cars Registry Limited",
          type: "generic",
        },
        {
          domain: "caravan",
          description: "Caravan International, Inc.",
          type: "generic",
        },
        {
          domain: "cards",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "care",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "career",
          description: "dotCareer LLC",
          type: "generic",
        },
        {
          domain: "careers",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cars",
          description: "Cars Registry Limited",
          type: "generic",
        },
        {
          domain: "cartier",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "casa",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "case",
          description: "CNH Industrial N.V.",
          type: "generic",
        },
        {
          domain: "caseih",
          description: "CNH Industrial N.V.",
          type: "generic",
        },
        {
          domain: "cash",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "casino",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cat",
          description: "Catalan",
          type: "sponsored",
        },
        {
          domain: "catering",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "catholic",
          description:
            "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
          type: "generic",
        },
        {
          domain: "cba",
          description: "COMMONWEALTH BANK OF AUSTRALIA",
          type: "generic",
        },
        {
          domain: "cbn",
          description: "The Christian Broadcasting Network, Inc.",
          type: "generic",
        },
        {
          domain: "cbre",
          description: "CBRE, Inc.",
          type: "generic",
        },
        {
          domain: "cbs",
          description: "CBS Domains Inc.",
          type: "generic",
        },
        {
          domain: "cc",
          description: "Cocos (Keeling) Islands (Territory of the)",
          type: "country-code",
        },
        {
          domain: "cd",
          description: "Congo (Democratic Republic of the) [Congo-Kinshasa]",
          type: "country-code",
        },
        {
          domain: "ceb",
          description: "The Corporate Executive Board Company",
          type: "generic",
        },
        {
          domain: "center",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ceo",
          description: "CEOTLD Pty Ltd",
          type: "generic",
        },
        {
          domain: "cern",
          description: 'European Organization for Nuclear Research ("CERN")',
          type: "generic",
        },
        {
          domain: "cf",
          description: "Central African Republic",
          type: "country-code",
        },
        {
          domain: "cfa",
          description: "CFA Institute",
          type: "generic",
        },
        {
          domain: "cfd",
          description: "DOTCFD REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "cg",
          description: "Congo (Republic of) [Congo-Brazzaville]",
          type: "country-code",
        },
        {
          domain: "ch",
          description: "Switzerland (Swiss Confederation)",
          type: "country-code",
        },
        {
          domain: "chanel",
          description: "Chanel International B.V.",
          type: "generic",
        },
        {
          domain: "channel",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "charity",
          description: "Corn Lake, LLC",
          type: "generic",
        },
        {
          domain: "chase",
          description: "JPMorgan Chase Bank, National Association",
          type: "generic",
        },
        {
          domain: "chat",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cheap",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "chintai",
          description: "CHINTAI Corporation",
          type: "generic",
        },
        {
          domain: "chloe",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "christmas",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "chrome",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "chrysler",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "church",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ci",
          description: "Ivory Coast (Republic of C\xF4te d'Ivoire)",
          type: "country-code",
        },
        {
          domain: "cipriani",
          description: "Hotel Cipriani Srl",
          type: "generic",
        },
        {
          domain: "circle",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "cisco",
          description: "Cisco Technology, Inc.",
          type: "generic",
        },
        {
          domain: "citadel",
          description: "Citadel Domain LLC",
          type: "generic",
        },
        {
          domain: "citi",
          description: "Citigroup Inc.",
          type: "generic",
        },
        {
          domain: "citic",
          description: "CITIC Group Corporation",
          type: "generic",
        },
        {
          domain: "city",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cityeats",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "ck",
          description: "Cook Islands",
          type: "country-code",
        },
        {
          domain: "cl",
          description: "Chile (Republic of)",
          type: "country-code",
        },
        {
          domain: "claims",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cleaning",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "click",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "clinic",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "clinique",
          description: "The Est\xE9e Lauder Companies Inc.",
          type: "generic",
        },
        {
          domain: "clothing",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cloud",
          description: "ARUBA PEC S.p.A.",
          type: "generic",
        },
        {
          domain: "club",
          description: ".CLUB DOMAINS, LLC",
          type: "generic",
        },
        {
          domain: "clubmed",
          description: "Club M\xE9diterran\xE9e S.A.",
          type: "generic",
        },
        {
          domain: "cm",
          description: "Cameroon (Republic of)",
          type: "country-code",
        },
        {
          domain: "cn",
          description: "China (People's Republic of)",
          type: "country-code",
        },
        {
          domain: "co",
          description: "Colombia (Republic of)",
          type: "country-code",
        },
        {
          domain: "coach",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "codes",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "coffee",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "college",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "cologne",
          description: "dotKoeln GmbH",
          type: "generic",
        },
        {
          domain: "com",
          description: "Commercial organizations",
          type: "generic",
        },
        {
          domain: "comcast",
          description: "Comcast IP Holdings I, LLC",
          type: "generic",
        },
        {
          domain: "commbank",
          description: "COMMONWEALTH BANK OF AUSTRALIA",
          type: "generic",
        },
        {
          domain: "community",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "company",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "compare",
          description: "iSelect Ltd",
          type: "generic",
        },
        {
          domain: "computer",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "comsec",
          description: "VeriSign, Inc.",
          type: "generic",
        },
        {
          domain: "condos",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "construction",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "consulting",
          description: "United TLD Holdco, LTD.",
          type: "generic",
        },
        {
          domain: "contact",
          description: "Top Level Spectrum, Inc.",
          type: "generic",
        },
        {
          domain: "contractors",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "cooking",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "cookingchannel",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "cool",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "coop",
          description: "Cooperatives",
          type: "sponsored",
        },
        {
          domain: "corsica",
          description: "Collectivit\xE9 Territoriale de Corse",
          type: "generic",
        },
        {
          domain: "country",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "coupon",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "coupons",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "courses",
          description: "OPEN UNIVERSITIES AUSTRALIA PTY LTD",
          type: "generic",
        },
        {
          domain: "cr",
          description: "Costa Rica (Republic of)",
          type: "country-code",
        },
        {
          domain: "credit",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "creditcard",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "creditunion",
          description: "CUNA Performance Resources, LLC",
          type: "generic",
        },
        {
          domain: "cricket",
          description: "dot Cricket Limited",
          type: "generic",
        },
        {
          domain: "crown",
          description: "Crown Equipment Corporation",
          type: "generic",
        },
        {
          domain: "crs",
          description: "Federated Co-operatives Limited",
          type: "generic",
        },
        {
          domain: "cruise",
          description: "Viking River Cruises (Bermuda) Ltd.",
          type: "generic",
        },
        {
          domain: "cruises",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "csc",
          description: "Alliance-One Services, Inc.",
          type: "generic",
        },
        {
          domain: "cu",
          description: "Cuba (Republic of)",
          type: "country-code",
        },
        {
          domain: "cuisinella",
          description: "SALM S.A.S.",
          type: "generic",
        },
        {
          domain: "cv",
          description: "Cape Verde (Republic of)",
          type: "country-code",
        },
        {
          domain: "cw",
          description: "Cura\xE7ao (Country of)",
          type: "country-code",
        },
        {
          domain: "cx",
          description: "Christmas Island (Territory of)",
          type: "country-code",
        },
        {
          domain: "cy",
          description: "Cyprus (Republic of)",
          type: "country-code",
        },
        {
          domain: "cymru",
          description: "Nominet UK",
          type: "generic",
        },
        {
          domain: "cyou",
          description: "Beijing Gamease Age Digital Technology Co., Ltd.",
          type: "generic",
        },
        {
          domain: "cz",
          description: "Czech Republic",
          type: "country-code",
        },
        {
          domain: "dabur",
          description: "Dabur India Limited",
          type: "generic",
        },
        {
          domain: "dad",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "dance",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "data",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "date",
          description: "dot Date Limited",
          type: "generic",
        },
        {
          domain: "dating",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "datsun",
          description: "NISSAN MOTOR CO., LTD.",
          type: "generic",
        },
        {
          domain: "day",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "dclk",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "dds",
          description: "Minds + Machines Group Limited",
          type: "generic",
        },
        {
          domain: "de",
          description: "Germany (Federal Republic of)",
          type: "country-code",
        },
        {
          domain: "deal",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "dealer",
          description: "Dealer Dot Com, Inc.",
          type: "generic",
        },
        {
          domain: "deals",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "degree",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "delivery",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "dell",
          description: "Dell Inc.",
          type: "generic",
        },
        {
          domain: "deloitte",
          description: "Deloitte Touche Tohmatsu",
          type: "generic",
        },
        {
          domain: "delta",
          description: "Delta Air Lines, Inc.",
          type: "generic",
        },
        {
          domain: "democrat",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "dental",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "dentist",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "desi",
          description: "Desi Networks LLC",
          type: "generic",
        },
        {
          domain: "design",
          description: "Top Level Design, LLC",
          type: "generic",
        },
        {
          domain: "dev",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "dhl",
          description: "Deutsche Post AG",
          type: "generic",
        },
        {
          domain: "diamonds",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "diet",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "digital",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "direct",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "directory",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "discount",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "discover",
          description: "Discover Financial Services",
          type: "generic",
        },
        {
          domain: "dish",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "diy",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "dj",
          description: "Djibouti (Republic of)",
          type: "country-code",
        },
        {
          domain: "dk",
          description: "Denmark (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "dm",
          description: "Dominica (Commonwealth of)",
          type: "country-code",
        },
        {
          domain: "dnp",
          description: "Dai Nippon Printing Co., Ltd.",
          type: "generic",
        },
        {
          domain: "do",
          description: "Dominican Republic",
          type: "country-code",
        },
        {
          domain: "docs",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "doctor",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "dodge",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "dog",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "doha",
          description: "Communications Regulatory Authority (CRA)",
          type: "generic",
        },
        {
          domain: "domains",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "doosan",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "dot",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "download",
          description: "dot Support Limited",
          type: "generic",
        },
        {
          domain: "drive",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "dtv",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "dubai",
          description: "Dubai Smart Government Department",
          type: "generic",
        },
        {
          domain: "duck",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "dunlop",
          description: "The Goodyear Tire & Rubber Company",
          type: "generic",
        },
        {
          domain: "duns",
          description: "The Dun & Bradstreet Corporation",
          type: "generic",
        },
        {
          domain: "dupont",
          description: "E. I. du Pont de Nemours and Company",
          type: "generic",
        },
        {
          domain: "durban",
          description: "ZA Central Registry NPC trading as ZA Central Registry",
          type: "generic",
        },
        {
          domain: "dvag",
          description: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
          type: "generic",
        },
        {
          domain: "dvr",
          description: "Hughes Satellite Systems Corporation",
          type: "generic",
        },
        {
          domain: "dz",
          description: "Algeria (People's Democratic Republic of)",
          type: "country-code",
        },
        {
          domain: "earth",
          description: "Interlink Co., Ltd.",
          type: "generic",
        },
        {
          domain: "eat",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "ec",
          description: "Ecuador (Republic of)",
          type: "country-code",
        },
        {
          domain: "eco",
          description: "Big Room Inc.",
          type: "generic",
        },
        {
          domain: "edeka",
          description: "EDEKA Verband kaufm\xE4nnischer Genossenschaften e.V.",
          type: "generic",
        },
        {
          domain: "edu",
          description: "Educational establishments",
          type: "sponsored",
        },
        {
          domain: "education",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ee",
          description: "Estonia (Republic of)",
          type: "country-code",
        },
        {
          domain: "eg",
          description: "Egypt (Arab Republic of)",
          type: "country-code",
        },
        {
          domain: "eh",
          description: "Western Sahara {reserved}",
          type: "country-code",
        },
        {
          domain: "email",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "emerck",
          description: "Merck KGaA",
          type: "generic",
        },
        {
          domain: "energy",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "engineer",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "engineering",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "enterprises",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "epost",
          description: "Deutsche Post AG",
          type: "generic",
        },
        {
          domain: "epson",
          description: "Seiko Epson Corporation",
          type: "generic",
        },
        {
          domain: "equipment",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "er",
          description: "Eritrea (State of)",
          type: "country-code",
        },
        {
          domain: "ericsson",
          description: "Telefonaktiebolaget L M Ericsson",
          type: "generic",
        },
        {
          domain: "erni",
          description: "ERNI Group Holding AG",
          type: "generic",
        },
        {
          domain: "es",
          description: "Spain (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "esq",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "estate",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "esurance",
          description: "Esurance Insurance Company",
          type: "generic",
        },
        {
          domain: "et",
          description: "Ethiopia (Federal Democratic Republic of)",
          type: "country-code",
        },
        {
          domain: "etisalat",
          description:
            "Emirates Telecommunications Corporation (trading as Etisalat)",
          type: "generic",
        },
        {
          domain: "eu",
          description: "European Union",
          type: "country-code",
        },
        {
          domain: "eurovision",
          description: "European Broadcasting Union (EBU)",
          type: "generic",
        },
        {
          domain: "eus",
          description: "Puntueus Fundazioa",
          type: "generic",
        },
        {
          domain: "events",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "everbank",
          description: "EverBank",
          type: "generic",
        },
        {
          domain: "exchange",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "expert",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "exposed",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "express",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "extraspace",
          description: "Extra Space Storage LLC",
          type: "generic",
        },
        {
          domain: "fage",
          description: "Fage International S.A.",
          type: "generic",
        },
        {
          domain: "fail",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "fairwinds",
          description: "FairWinds Partners, LLC",
          type: "generic",
        },
        {
          domain: "faith",
          description: "dot Faith Limited",
          type: "generic",
        },
        {
          domain: "family",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "fan",
          description: "Asiamix Digital Ltd",
          type: "generic",
        },
        {
          domain: "fans",
          description: "Asiamix Digital Limited",
          type: "generic",
        },
        {
          domain: "farm",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "farmers",
          description: "Farmers Insurance Exchange",
          type: "generic",
        },
        {
          domain: "fashion",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "fast",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "fedex",
          description: "Federal Express Corporation",
          type: "generic",
        },
        {
          domain: "feedback",
          description: "Top Level Spectrum, Inc.",
          type: "generic",
        },
        {
          domain: "ferrari",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "ferrero",
          description: "Ferrero Trading Lux S.A.",
          type: "generic",
        },
        {
          domain: "fi",
          description: "Finland (Republic of)",
          type: "country-code",
        },
        {
          domain: "fiat",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "fidelity",
          description: "Fidelity Brokerage Services LLC",
          type: "generic",
        },
        {
          domain: "fido",
          description: "Rogers Communications Canada Inc.",
          type: "generic",
        },
        {
          domain: "film",
          description: "Motion Picture Domain Registry Pty Ltd",
          type: "generic",
        },
        {
          domain: "final",
          description:
            "N\xFAcleo de Informa\xE7\xE3o e Coordena\xE7\xE3o do Ponto BR - NIC.br",
          type: "generic",
        },
        {
          domain: "finance",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "financial",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "fire",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "firestone",
          description: "Bridgestone Licensing Services, Inc.",
          type: "generic",
        },
        {
          domain: "firmdale",
          description: "Firmdale Holdings Limited",
          type: "generic",
        },
        {
          domain: "fish",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "fishing",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "fit",
          description: "Minds + Machines Group Limited",
          type: "generic",
        },
        {
          domain: "fitness",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "fj",
          description: "Fiji (Republic of)",
          type: "country-code",
        },
        {
          domain: "fk",
          description: "Falkland Islands (Malvinas)",
          type: "country-code",
        },
        {
          domain: "flickr",
          description: "Yahoo! Domain Services Inc.",
          type: "generic",
        },
        {
          domain: "flights",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "flir",
          description: "FLIR Systems, Inc.",
          type: "generic",
        },
        {
          domain: "florist",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "flowers",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "flsmidth",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "fly",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "fm",
          description: "Micronesia (Federated States of)",
          type: "country-code",
        },
        {
          domain: "fo",
          description: "Faroe Islands",
          type: "country-code",
        },
        {
          domain: "foo",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "food",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "foodnetwork",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "football",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ford",
          description: "Ford Motor Company",
          type: "generic",
        },
        {
          domain: "forex",
          description: "DOTFOREX REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "forsale",
          description: "United TLD Holdco, LLC",
          type: "generic",
        },
        {
          domain: "forum",
          description: "Fegistry, LLC",
          type: "generic",
        },
        {
          domain: "foundation",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "fox",
          description: "FOX Registry, LLC",
          type: "generic",
        },
        {
          domain: "fr",
          description: "France (French Republic)",
          type: "country-code",
        },
        {
          domain: "free",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "fresenius",
          description: "Fresenius Immobilien-Verwaltungs-GmbH",
          type: "generic",
        },
        {
          domain: "frl",
          description: "FRLregistry B.V.",
          type: "generic",
        },
        {
          domain: "frogans",
          description: "OP3FT",
          type: "generic",
        },
        {
          domain: "frontdoor",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "frontier",
          description: "Frontier Communications Corporation",
          type: "generic",
        },
        {
          domain: "ftr",
          description: "Frontier Communications Corporation",
          type: "generic",
        },
        {
          domain: "fujitsu",
          description: "Fujitsu Limited",
          type: "generic",
        },
        {
          domain: "fujixerox",
          description: "Xerox DNHC LLC",
          type: "generic",
        },
        {
          domain: "fun",
          description: "DotSpace, Inc.",
          type: "generic",
        },
        {
          domain: "fund",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "furniture",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "futbol",
          description: "United TLD Holdco, Ltd.",
          type: "generic",
        },
        {
          domain: "fyi",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ga",
          description: "Gabon (Gabonese Republic)",
          type: "country-code",
        },
        {
          domain: "gal",
          description: "Asociaci\xF3n puntoGAL",
          type: "generic",
        },
        {
          domain: "gallery",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gallo",
          description: "Gallo Vineyards, Inc.",
          type: "generic",
        },
        {
          domain: "gallup",
          description: "Gallup, Inc.",
          type: "generic",
        },
        {
          domain: "game",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "games",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "gap",
          description: "The Gap, Inc.",
          type: "generic",
        },
        {
          domain: "garden",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "gb",
          description:
            "United Kingdom (United Kingdom of Great Britain and Northern Ireland)",
          type: "country-code",
        },
        {
          domain: "gbiz",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "gd",
          description: "Grenada",
          type: "country-code",
        },
        {
          domain: "gdn",
          description: 'Joint Stock Company "Navigation-information systems"',
          type: "generic",
        },
        {
          domain: "ge",
          description: "Georgia",
          type: "country-code",
        },
        {
          domain: "gea",
          description: "GEA Group Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "gent",
          description: "Combell nv",
          type: "generic",
        },
        {
          domain: "genting",
          description: "Resorts World Inc. Pte. Ltd.",
          type: "generic",
        },
        {
          domain: "george",
          description: "Wal-Mart Stores, Inc.",
          type: "generic",
        },
        {
          domain: "gf",
          description: "French Guiana",
          type: "country-code",
        },
        {
          domain: "gg",
          description: "Guernsey (Bailiwick of)",
          type: "country-code",
        },
        {
          domain: "ggee",
          description: "GMO Internet, Inc.",
          type: "generic",
        },
        {
          domain: "gh",
          description: "Ghana (Republic of)",
          type: "country-code",
        },
        {
          domain: "gi",
          description: "Gibraltar",
          type: "country-code",
        },
        {
          domain: "gift",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "gifts",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gives",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "giving",
          description: "Giving Limited",
          type: "generic",
        },
        {
          domain: "gl",
          description: "Greenland",
          type: "country-code",
        },
        {
          domain: "glade",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "glass",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gle",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "global",
          description: "Dot Global Domain Registry Limited",
          type: "generic",
        },
        {
          domain: "globo",
          description: "Globo Comunica\xE7\xE3o e Participa\xE7\xF5es S.A",
          type: "generic",
        },
        {
          domain: "gm",
          description: "Gambia (Republic of The)",
          type: "country-code",
        },
        {
          domain: "gmail",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "gmbh",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gmo",
          description: "GMO Internet, Inc.",
          type: "generic",
        },
        {
          domain: "gmx",
          description: "1&1 Mail & Media GmbH",
          type: "generic",
        },
        {
          domain: "gn",
          description: "Guinea (Republic of)",
          type: "country-code",
        },
        {
          domain: "godaddy",
          description: "Go Daddy East, LLC",
          type: "generic",
        },
        {
          domain: "gold",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "goldpoint",
          description: "YODOBASHI CAMERA CO.,LTD.",
          type: "generic",
        },
        {
          domain: "golf",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "goo",
          description: "NTT Resonant Inc.",
          type: "generic",
        },
        {
          domain: "goodhands",
          description: "Allstate Fire and Casualty Insurance Company",
          type: "generic",
        },
        {
          domain: "goodyear",
          description: "The Goodyear Tire & Rubber Company",
          type: "generic",
        },
        {
          domain: "goog",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "google",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "gop",
          description: "Republican State Leadership Committee, Inc.",
          type: "generic",
        },
        {
          domain: "got",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "gov",
          description: "US government",
          type: "sponsored",
        },
        {
          domain: "gp",
          description: "Guadeloupe",
          type: "country-code",
        },
        {
          domain: "gq",
          description: "Equatorial Guinea (Republic of)",
          type: "country-code",
        },
        {
          domain: "gr",
          description: "Greece (Hellenic Republic)",
          type: "country-code",
        },
        {
          domain: "grainger",
          description: "Grainger Registry Services, LLC",
          type: "generic",
        },
        {
          domain: "graphics",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gratis",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "green",
          description: "DotGreen Registry Limited",
          type: "generic",
        },
        {
          domain: "gripe",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "grocery",
          description: "Wal-Mart Stores, Inc.",
          type: "generic",
        },
        {
          domain: "group",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gs",
          description: "South Georgia and the South Sandwich Islands",
          type: "country-code",
        },
        {
          domain: "gt",
          description: "Guatemala (Republic of)",
          type: "country-code",
        },
        {
          domain: "gu",
          description: "Guam",
          type: "country-code",
        },
        {
          domain: "guardian",
          description: "The Guardian Life Insurance Company of America",
          type: "generic",
        },
        {
          domain: "gucci",
          description: "Guccio Gucci S.p.a.",
          type: "generic",
        },
        {
          domain: "guge",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "guide",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "guitars",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "guru",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "gw",
          description: "Guinea-Bissau (Republic of)",
          type: "country-code",
        },
        {
          domain: "gy",
          description: "Guyana (Co-operative Republic of)",
          type: "country-code",
        },
        {
          domain: "hair",
          description: "L'Oreal",
          type: "generic",
        },
        {
          domain: "hamburg",
          description: "Hamburg Top-Level-Domain GmbH",
          type: "generic",
        },
        {
          domain: "hangout",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "haus",
          description: "United TLD Holdco, LTD.",
          type: "generic",
        },
        {
          domain: "hbo",
          description: "HBO Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "hdfc",
          description: "HOUSING DEVELOPMENT FINANCE CORPORATION LIMITED",
          type: "generic",
        },
        {
          domain: "hdfcbank",
          description: "HDFC Bank Limited",
          type: "generic",
        },
        {
          domain: "health",
          description: "DotHealth, LLC",
          type: "generic",
        },
        {
          domain: "healthcare",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "help",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "helsinki",
          description: "City of Helsinki",
          type: "generic",
        },
        {
          domain: "here",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "hermes",
          description: "Hermes International",
          type: "generic",
        },
        {
          domain: "hgtv",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "hiphop",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "hisamitsu",
          description: "Hisamitsu Pharmaceutical Co.,Inc.",
          type: "generic",
        },
        {
          domain: "hitachi",
          description: "Hitachi, Ltd.",
          type: "generic",
        },
        {
          domain: "hiv",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "hk",
          description:
            "Hong Kong (Hong Kong Special Administrative Region of the People's Republic of China)",
          type: "country-code",
        },
        {
          domain: "hkt",
          description: "PCCW-HKT DataCom Services Limited",
          type: "generic",
        },
        {
          domain: "hm",
          description: "Heard Island and McDonald Islands",
          type: "country-code",
        },
        {
          domain: "hn",
          description: "Honduras (Republic of)",
          type: "country-code",
        },
        {
          domain: "hockey",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "holdings",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "holiday",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "homedepot",
          description: "Home Depot Product Authority, LLC",
          type: "generic",
        },
        {
          domain: "homegoods",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "homes",
          description: "DERHomes, LLC",
          type: "generic",
        },
        {
          domain: "homesense",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "honda",
          description: "Honda Motor Co., Ltd.",
          type: "generic",
        },
        {
          domain: "honeywell",
          description: "Honeywell GTLD LLC",
          type: "generic",
        },
        {
          domain: "horse",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "hospital",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "host",
          description: "DotHost Inc.",
          type: "generic",
        },
        {
          domain: "hosting",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "hot",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "hoteles",
          description: "Travel Reservations SRL",
          type: "generic",
        },
        {
          domain: "hotels",
          description: "Booking.com B.V.",
          type: "generic",
        },
        {
          domain: "hotmail",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "house",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "how",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "hr",
          description: "Croatia (Republic of)",
          type: "country-code",
        },
        {
          domain: "hsbc",
          description: "HSBC Global Services (UK) Limited",
          type: "generic",
        },
        {
          domain: "ht",
          description: "Haiti (Republic of)",
          type: "country-code",
        },
        {
          domain: "htc",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "hu",
          description: "Hungary",
          type: "country-code",
        },
        {
          domain: "hughes",
          description: "Hughes Satellite Systems Corporation",
          type: "generic",
        },
        {
          domain: "hyatt",
          description: "Hyatt GTLD, L.L.C.",
          type: "generic",
        },
        {
          domain: "hyundai",
          description: "Hyundai Motor Company",
          type: "generic",
        },
        {
          domain: "ibm",
          description: "International Business Machines Corporation",
          type: "generic",
        },
        {
          domain: "icbc",
          description: "Industrial and Commercial Bank of China Limited",
          type: "generic",
        },
        {
          domain: "ice",
          description: "IntercontinentalExchange, Inc.",
          type: "generic",
        },
        {
          domain: "icu",
          description: "Shortdot SA",
          type: "generic",
        },
        {
          domain: "id",
          description: "Indonesia (Republic of)",
          type: "country-code",
        },
        {
          domain: "ie",
          description: "Ireland (Republic of)",
          type: "country-code",
        },
        {
          domain: "ieee",
          description: "IEEE Global LLC",
          type: "generic",
        },
        {
          domain: "ifm",
          description: "ifm electronic gmbh",
          type: "generic",
        },
        {
          domain: "iinet",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "ikano",
          description: "Ikano S.A.",
          type: "generic",
        },
        {
          domain: "il",
          description: "Israel (State of)",
          type: "country-code",
        },
        {
          domain: "im",
          description: "Isle of Man",
          type: "country-code",
        },
        {
          domain: "imamat",
          description: "Fondation Aga Khan (Aga Khan Foundation)",
          type: "generic",
        },
        {
          domain: "imdb",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "immo",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "immobilien",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "in",
          description: "India (Republic of)",
          type: "country-code",
        },
        {
          domain: "industries",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "infiniti",
          description: "NISSAN MOTOR CO., LTD.",
          type: "generic",
        },
        {
          domain: "info",
          description: "Informational sites",
          type: "generic",
        },
        {
          domain: "ing",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "ink",
          description: "Top Level Design, LLC",
          type: "generic",
        },
        {
          domain: "institute",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "insurance",
          description: "fTLD Registry Services LLC",
          type: "generic",
        },
        {
          domain: "insure",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "int",
          description: "International treaty-based organizations",
          type: "sponsored",
        },
        {
          domain: "intel",
          description: "Intel Corporation",
          type: "generic",
        },
        {
          domain: "international",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "intuit",
          description: "Intuit Administrative Services, Inc.",
          type: "generic",
        },
        {
          domain: "investments",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "io",
          description: "British Indian Ocean Territory",
          type: "country-code",
        },
        {
          domain: "ipiranga",
          description: "Ipiranga Produtos de Petroleo S.A.",
          type: "generic",
        },
        {
          domain: "iq",
          description: "Iraq (Republic of)",
          type: "country-code",
        },
        {
          domain: "ir",
          description: "Iran (Islamic Republic of)",
          type: "country-code",
        },
        {
          domain: "irish",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "is",
          description: "Iceland",
          type: "country-code",
        },
        {
          domain: "iselect",
          description: "iSelect Ltd",
          type: "generic",
        },
        {
          domain: "ismaili",
          description: "Fondation Aga Khan (Aga Khan Foundation)",
          type: "generic",
        },
        {
          domain: "ist",
          description: "Istanbul Metropolitan Municipality",
          type: "generic",
        },
        {
          domain: "istanbul",
          description: "Istanbul Metropolitan Municipality",
          type: "generic",
        },
        {
          domain: "it",
          description: "Italy (Italian Republic)",
          type: "country-code",
        },
        {
          domain: "itau",
          description: "Itau Unibanco Holding S.A.",
          type: "generic",
        },
        {
          domain: "itv",
          description: "ITV Services Limited",
          type: "generic",
        },
        {
          domain: "iveco",
          description: "CNH Industrial N.V.",
          type: "generic",
        },
        {
          domain: "iwc",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "jaguar",
          description: "Jaguar Land Rover Ltd",
          type: "generic",
        },
        {
          domain: "java",
          description: "Oracle Corporation",
          type: "generic",
        },
        {
          domain: "jcb",
          description: "JCB Co., Ltd.",
          type: "generic",
        },
        {
          domain: "jcp",
          description: "JCP Media, Inc.",
          type: "generic",
        },
        {
          domain: "je",
          description: "Jersey (Bailiwick of)",
          type: "country-code",
        },
        {
          domain: "jeep",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "jetzt",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "jewelry",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "jio",
          description: "Affinity Names, Inc.",
          type: "generic",
        },
        {
          domain: "jlc",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "jll",
          description: "Jones Lang LaSalle Incorporated",
          type: "generic",
        },
        {
          domain: "jm",
          description: "Jamaica (Commonwealth of)",
          type: "country-code",
        },
        {
          domain: "jmp",
          description: "Matrix IP LLC",
          type: "generic",
        },
        {
          domain: "jnj",
          description: "Johnson & Johnson Services, Inc.",
          type: "generic",
        },
        {
          domain: "jo",
          description: "Jordan (Hashemite Kingdom of)",
          type: "country-code",
        },
        {
          domain: "jobs",
          description: "Employment-related sites",
          type: "sponsored",
        },
        {
          domain: "joburg",
          description: "ZA Central Registry NPC trading as ZA Central Registry",
          type: "generic",
        },
        {
          domain: "jot",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "joy",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "jp",
          description: "Japan",
          type: "country-code",
        },
        {
          domain: "jpmorgan",
          description: "JPMorgan Chase Bank, National Association",
          type: "generic",
        },
        {
          domain: "jprs",
          description: "Japan Registry Services Co., Ltd.",
          type: "generic",
        },
        {
          domain: "juegos",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "juniper",
          description: "JUNIPER NETWORKS, INC.",
          type: "generic",
        },
        {
          domain: "kaufen",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "kddi",
          description: "KDDI CORPORATION",
          type: "generic",
        },
        {
          domain: "ke",
          description: "Kenya (Republic of)",
          type: "country-code",
        },
        {
          domain: "kerryhotels",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "kerrylogistics",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "kerryproperties",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "kfh",
          description: "Kuwait Finance House",
          type: "generic",
        },
        {
          domain: "kg",
          description: "Kyrgyzstan (Kyrgyz Republic)",
          type: "country-code",
        },
        {
          domain: "kh",
          description: "Cambodia (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "ki",
          description: "Kiribati (Republic of)",
          type: "country-code",
        },
        {
          domain: "kia",
          description: "KIA MOTORS CORPORATION",
          type: "generic",
        },
        {
          domain: "kim",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "kinder",
          description: "Ferrero Trading Lux S.A.",
          type: "generic",
        },
        {
          domain: "kindle",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "kitchen",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "kiwi",
          description: "DOT KIWI LIMITED",
          type: "generic",
        },
        {
          domain: "km",
          description: "Comoros (Union of the)",
          type: "country-code",
        },
        {
          domain: "kn",
          description: "Saint Kitts and Nevis (Federation of)",
          type: "country-code",
        },
        {
          domain: "koeln",
          description: "dotKoeln GmbH",
          type: "generic",
        },
        {
          domain: "komatsu",
          description: "Komatsu Ltd.",
          type: "generic",
        },
        {
          domain: "kosher",
          description: "Kosher Marketing Assets LLC",
          type: "generic",
        },
        {
          domain: "kp",
          description: "Korea (Democratic People's Republic of) [North Korea]",
          type: "country-code",
        },
        {
          domain: "kpmg",
          description:
            "KPMG International Cooperative (KPMG International Genossenschaft)",
          type: "generic",
        },
        {
          domain: "kpn",
          description: "Koninklijke KPN N.V.",
          type: "generic",
        },
        {
          domain: "kr",
          description: "Korea (Republic of) [South Korea]",
          type: "country-code",
        },
        {
          domain: "krd",
          description: "KRG Department of Information Technology",
          type: "generic",
        },
        {
          domain: "kred",
          description: "KredTLD Pty Ltd",
          type: "generic",
        },
        {
          domain: "kuokgroup",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "kw",
          description: "Kuwait (State of Kuwait)",
          type: "country-code",
        },
        {
          domain: "ky",
          description: "Cayman Islands",
          type: "country-code",
        },
        {
          domain: "kyoto",
          description: "Academic Institution: Kyoto Jyoho Gakuen",
          type: "generic",
        },
        {
          domain: "kz",
          description: "Kazakhstan (Republic of)",
          type: "country-code",
        },
        {
          domain: "la",
          description: "Laos (Lao People's Democratic Republic)",
          type: "country-code",
        },
        {
          domain: "lacaixa",
          description: "CAIXA D'ESTALVIS I PENSIONS DE BARCELONA",
          type: "generic",
        },
        {
          domain: "ladbrokes",
          description: "LADBROKES INTERNATIONAL PLC",
          type: "generic",
        },
        {
          domain: "lamborghini",
          description: "Automobili Lamborghini S.p.A.",
          type: "generic",
        },
        {
          domain: "lamer",
          description: "The Est\xE9e Lauder Companies Inc.",
          type: "generic",
        },
        {
          domain: "lancaster",
          description: "LANCASTER",
          type: "generic",
        },
        {
          domain: "lancia",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "lancome",
          description: "L'Or\xE9al",
          type: "generic",
        },
        {
          domain: "land",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "landrover",
          description: "Jaguar Land Rover Ltd",
          type: "generic",
        },
        {
          domain: "lanxess",
          description: "LANXESS Corporation",
          type: "generic",
        },
        {
          domain: "lasalle",
          description: "Jones Lang LaSalle Incorporated",
          type: "generic",
        },
        {
          domain: "lat",
          description:
            "ECOM-LAC Federaci\xF3n de Latinoam\xE9rica y el Caribe para Internet y el Comercio Electr\xF3nico",
          type: "generic",
        },
        {
          domain: "latino",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "latrobe",
          description: "La Trobe University",
          type: "generic",
        },
        {
          domain: "law",
          description: "Minds + Machines Group Limited",
          type: "generic",
        },
        {
          domain: "lawyer",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "lb",
          description: "Lebanon (Lebanese Republic)",
          type: "country-code",
        },
        {
          domain: "lc",
          description: "Saint Lucia",
          type: "country-code",
        },
        {
          domain: "lds",
          description: "IRI Domain Management, LLC",
          type: "generic",
        },
        {
          domain: "lease",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "leclerc",
          description:
            "A.C.D. LEC Association des Centres Distributeurs Edouard Leclerc",
          type: "generic",
        },
        {
          domain: "lefrak",
          description: "LeFrak Organization, Inc.",
          type: "generic",
        },
        {
          domain: "legal",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "lego",
          description: "LEGO Juris A/S",
          type: "generic",
        },
        {
          domain: "lexus",
          description: "TOYOTA MOTOR CORPORATION",
          type: "generic",
        },
        {
          domain: "lgbt",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "li",
          description: "Liechtenstein (Principality of)",
          type: "country-code",
        },
        {
          domain: "liaison",
          description: "Liaison Technologies, Incorporated",
          type: "generic",
        },
        {
          domain: "lidl",
          description: "Schwarz Domains und Services GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "life",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "lifeinsurance",
          description: "American Council of Life Insurers",
          type: "generic",
        },
        {
          domain: "lifestyle",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "lighting",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "like",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "lilly",
          description: "Eli Lilly and Company",
          type: "generic",
        },
        {
          domain: "limited",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "limo",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "lincoln",
          description: "Ford Motor Company",
          type: "generic",
        },
        {
          domain: "linde",
          description: "Linde Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "link",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "lipsy",
          description: "Lipsy Ltd",
          type: "generic",
        },
        {
          domain: "live",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "living",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "lixil",
          description: "LIXIL Group Corporation",
          type: "generic",
        },
        {
          domain: "lk",
          description: "Sri Lanka (Democratic Socialist Republic of)",
          type: "country-code",
        },
        {
          domain: "llc",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "loan",
          description: "dot Loan Limited",
          type: "generic",
        },
        {
          domain: "loans",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "locker",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "locus",
          description: "Locus Analytics LLC",
          type: "generic",
        },
        {
          domain: "loft",
          description: "Annco, Inc.",
          type: "generic",
        },
        {
          domain: "lol",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "london",
          description: "Dot London Domains Limited",
          type: "generic",
        },
        {
          domain: "lotte",
          description: "Lotte Holdings Co., Ltd.",
          type: "generic",
        },
        {
          domain: "lotto",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "love",
          description: "Merchant Law Group LLP",
          type: "generic",
        },
        {
          domain: "lpl",
          description: "LPL Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "lplfinancial",
          description: "LPL Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "lr",
          description: "Liberia (Republic of)",
          type: "country-code",
        },
        {
          domain: "ls",
          description: "Lesotho (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "lt",
          description: "Lithuania (Republic of)",
          type: "country-code",
        },
        {
          domain: "ltd",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ltda",
          description: "InterNetX Corp.",
          type: "generic",
        },
        {
          domain: "lu",
          description: "Luxembourg (Grand Duchy of)",
          type: "country-code",
        },
        {
          domain: "lundbeck",
          description: "H. Lundbeck A/S",
          type: "generic",
        },
        {
          domain: "lupin",
          description: "LUPIN LIMITED",
          type: "generic",
        },
        {
          domain: "luxe",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "luxury",
          description: "Luxury Partners LLC",
          type: "generic",
        },
        {
          domain: "lv",
          description: "Latvia (Republic of)",
          type: "country-code",
        },
        {
          domain: "ly",
          description: "Libya",
          type: "country-code",
        },
        {
          domain: "ma",
          description: "Morocco",
          type: "country-code",
        },
        {
          domain: "macys",
          description: "Macys, Inc.",
          type: "generic",
        },
        {
          domain: "madrid",
          description: "Comunidad de Madrid",
          type: "generic",
        },
        {
          domain: "maif",
          description: "Mutuelle Assurance Instituteur France (MAIF)",
          type: "generic",
        },
        {
          domain: "maison",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "makeup",
          description: "L'Or\xE9al",
          type: "generic",
        },
        {
          domain: "man",
          description: "MAN SE",
          type: "generic",
        },
        {
          domain: "management",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "mango",
          description: "PUNTO FA S.L.",
          type: "generic",
        },
        {
          domain: "map",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "market",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "marketing",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "markets",
          description: "DOTMARKETS REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "marriott",
          description: "Marriott Worldwide Corporation",
          type: "generic",
        },
        {
          domain: "marshalls",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "maserati",
          description: "Fiat Chrysler Automobiles N.V.",
          type: "generic",
        },
        {
          domain: "mattel",
          description: "Mattel Sites, Inc.",
          type: "generic",
        },
        {
          domain: "mba",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "mc",
          description: "Monaco (Principality of)",
          type: "country-code",
        },
        {
          domain: "mcd",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "mcdonalds",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "mckinsey",
          description: "McKinsey Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "md",
          description: "Moldova (Republic of)",
          type: "country-code",
        },
        {
          domain: "me",
          description: "Montenegro",
          type: "country-code",
        },
        {
          domain: "med",
          description: "Medistry LLC",
          type: "generic",
        },
        {
          domain: "media",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "meet",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "melbourne",
          description:
            "The Crown in right of the State of Victoria, represented by its Department of State Development, Business and Innovation",
          type: "generic",
        },
        {
          domain: "meme",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "memorial",
          description: "Dog Beach, LLC",
          type: "generic",
        },
        {
          domain: "men",
          description: "Exclusive Registry Limited",
          type: "generic",
        },
        {
          domain: "menu",
          description: "Wedding TLD2, LLC",
          type: "generic",
        },
        {
          domain: "meo",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "merckmsd",
          description: "MSD Registry Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "metlife",
          description: "MetLife Services and Solutions, LLC",
          type: "generic",
        },
        {
          domain: "mf",
          description:
            "Saint Martin (Collectivity of) {unassigned - see also: .gp and .fr}",
          type: "country-code",
        },
        {
          domain: "mg",
          description: "Madagascar (Republic of)",
          type: "country-code",
        },
        {
          domain: "mh",
          description: "Marshall Islands (Republic of the)",
          type: "country-code",
        },
        {
          domain: "miami",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "microsoft",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "mil",
          description: "US military",
          type: "sponsored",
        },
        {
          domain: "mini",
          description: "Bayerische Motoren Werke Aktiengesellschaft",
          type: "generic",
        },
        {
          domain: "mint",
          description: "Intuit Administrative Services, Inc.",
          type: "generic",
        },
        {
          domain: "mit",
          description: "Massachusetts Institute of Technology",
          type: "generic",
        },
        {
          domain: "mitsubishi",
          description: "Mitsubishi Corporation",
          type: "generic",
        },
        {
          domain: "mk",
          description: "Macedonia (Republic of)",
          type: "country-code",
        },
        {
          domain: "ml",
          description: "Mali (Republic of)",
          type: "country-code",
        },
        {
          domain: "mlb",
          description: "MLB Advanced Media DH, LLC",
          type: "generic",
        },
        {
          domain: "mls",
          description: "The Canadian Real Estate Association",
          type: "generic",
        },
        {
          domain: "mm",
          description: "Myanmar (Republic of the Union of) [Burma]",
          type: "country-code",
        },
        {
          domain: "mma",
          description: "MMA IARD",
          type: "generic",
        },
        {
          domain: "mn",
          description: "Mongolia",
          type: "country-code",
        },
        {
          domain: "mo",
          description:
            "Macau (Macau Special Administrative Region of the People's Republic of China) [Macao]",
          type: "country-code",
        },
        {
          domain: "mobi",
          description: "Mobile",
          type: "generic",
        },
        {
          domain: "mobile",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "mobily",
          description: "GreenTech Consultancy Company W.L.L.",
          type: "generic",
        },
        {
          domain: "moda",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "moe",
          description: "Interlink Co., Ltd.",
          type: "generic",
        },
        {
          domain: "moi",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "mom",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "monash",
          description: "Monash University",
          type: "generic",
        },
        {
          domain: "money",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "monster",
          description: "Monster Worldwide, Inc.",
          type: "generic",
        },
        {
          domain: "montblanc",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "mopar",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "mormon",
          description: 'IRI Domain Management, LLC ("Applicant")',
          type: "generic",
        },
        {
          domain: "mortgage",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "moscow",
          description:
            "Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)",
          type: "generic",
        },
        {
          domain: "moto",
          description: "Motorola Trademark Holdings, LLC",
          type: "generic",
        },
        {
          domain: "motorcycles",
          description: "DERMotorcycles, LLC",
          type: "generic",
        },
        {
          domain: "mov",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "movie",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "movistar",
          description: "Telef\xF3nica S.A.",
          type: "generic",
        },
        {
          domain: "mp",
          description: "Northern Mariana Islands (Commonwealth of the)",
          type: "country-code",
        },
        {
          domain: "mq",
          description: "Martinique",
          type: "country-code",
        },
        {
          domain: "mr",
          description: "Mauritania (Islamic Republic of)",
          type: "country-code",
        },
        {
          domain: "ms",
          description: "Montserrat",
          type: "country-code",
        },
        {
          domain: "msd",
          description: "MSD Registry Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "mt",
          description: "Malta (Republic of)",
          type: "country-code",
        },
        {
          domain: "mtn",
          description: "MTN Dubai Limited",
          type: "generic",
        },
        {
          domain: "mtpc",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "mtr",
          description: "MTR Corporation Limited",
          type: "generic",
        },
        {
          domain: "mu",
          description: "Mauritius (Republic of)",
          type: "country-code",
        },
        {
          domain: "museum",
          description: "Museums",
          type: "sponsored",
        },
        {
          domain: "mutual",
          description: "Northwestern Mutual MU TLD Registry, LLC",
          type: "generic",
        },
        {
          domain: "mutuelle",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "mv",
          description: "Maldives (Republic of)",
          type: "country-code",
        },
        {
          domain: "mw",
          description: "Malawi (Republic of)",
          type: "country-code",
        },
        {
          domain: "mx",
          description: "Mexico (United Mexican States)",
          type: "country-code",
        },
        {
          domain: "my",
          description: "Malaysia",
          type: "country-code",
        },
        {
          domain: "mz",
          description: "Mozambique (Republic of)",
          type: "country-code",
        },
        {
          domain: "na",
          description: "Namibia (Republic of)",
          type: "country-code",
        },
        {
          domain: "nab",
          description: "National Australia Bank Limited",
          type: "generic",
        },
        {
          domain: "nadex",
          description: "Nadex Domains, Inc",
          type: "generic",
        },
        {
          domain: "nagoya",
          description: "GMO Registry, Inc.",
          type: "generic",
        },
        {
          domain: "name",
          description: "Individuals",
          type: "generic-restricted",
        },
        {
          domain: "nationwide",
          description: "Nationwide Mutual Insurance Company",
          type: "generic",
        },
        {
          domain: "natura",
          description: "NATURA COSM\xC9TICOS S.A.",
          type: "generic",
        },
        {
          domain: "navy",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "nba",
          description: "NBA REGISTRY, LLC",
          type: "generic",
        },
        {
          domain: "nc",
          description: "New Caledonia",
          type: "country-code",
        },
        {
          domain: "ne",
          description: "Niger (Republic of)",
          type: "country-code",
        },
        {
          domain: "nec",
          description: "NEC Corporation",
          type: "generic",
        },
        {
          domain: "net",
          description: "Network",
          type: "generic",
        },
        {
          domain: "netbank",
          description: "COMMONWEALTH BANK OF AUSTRALIA",
          type: "generic",
        },
        {
          domain: "netflix",
          description: "Netflix, Inc.",
          type: "generic",
        },
        {
          domain: "network",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "neustar",
          description: "NeuStar, Inc.",
          type: "generic",
        },
        {
          domain: "new",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "newholland",
          description: "CNH Industrial N.V.",
          type: "generic",
        },
        {
          domain: "news",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "next",
          description: "Next plc",
          type: "generic",
        },
        {
          domain: "nextdirect",
          description: "Next plc",
          type: "generic",
        },
        {
          domain: "nexus",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "nf",
          description: "Norfolk Island (Territory of)",
          type: "country-code",
        },
        {
          domain: "nfl",
          description: "NFL Reg Ops LLC",
          type: "generic",
        },
        {
          domain: "ng",
          description: "Nigeria (Federal Republic of)",
          type: "country-code",
        },
        {
          domain: "ngo",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "nhk",
          description: "Japan Broadcasting Corporation (NHK)",
          type: "generic",
        },
        {
          domain: "ni",
          description: "Nicaragua (Republic of)",
          type: "country-code",
        },
        {
          domain: "nico",
          description: "DWANGO Co., Ltd.",
          type: "generic",
        },
        {
          domain: "nike",
          description: "NIKE, Inc.",
          type: "generic",
        },
        {
          domain: "nikon",
          description: "NIKON CORPORATION",
          type: "generic",
        },
        {
          domain: "ninja",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "nissan",
          description: "NISSAN MOTOR CO., LTD.",
          type: "generic",
        },
        {
          domain: "nissay",
          description: "Nippon Life Insurance Company",
          type: "generic",
        },
        {
          domain: "nl",
          description: "Netherlands",
          type: "country-code",
        },
        {
          domain: "no",
          description: "Norway (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "nokia",
          description: "Nokia Corporation",
          type: "generic",
        },
        {
          domain: "northwesternmutual",
          description: "Northwestern Mutual Registry, LLC",
          type: "generic",
        },
        {
          domain: "norton",
          description: "Symantec Corporation",
          type: "generic",
        },
        {
          domain: "now",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "nowruz",
          description: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
          type: "generic",
        },
        {
          domain: "nowtv",
          description: "Starbucks (HK) Limited",
          type: "generic",
        },
        {
          domain: "np",
          description: "Nepal (Federal Democratic Republic of)",
          type: "country-code",
        },
        {
          domain: "nr",
          description: "Nauru (Republic of)",
          type: "country-code",
        },
        {
          domain: "nra",
          description: "NRA Holdings Company, INC.",
          type: "generic",
        },
        {
          domain: "nrw",
          description: "Minds + Machines GmbH",
          type: "generic",
        },
        {
          domain: "ntt",
          description: "NIPPON TELEGRAPH AND TELEPHONE CORPORATION",
          type: "generic",
        },
        {
          domain: "nu",
          description: "Niue",
          type: "country-code",
        },
        {
          domain: "nyc",
          description:
            "The City of New York by and through the New York City Department of Information Technology & Telecommunications",
          type: "generic",
        },
        {
          domain: "nz",
          description: "New Zealand",
          type: "country-code",
        },
        {
          domain: "obi",
          description: "OBI Group Holding SE & Co. KGaA",
          type: "generic",
        },
        {
          domain: "observer",
          description: "Top Level Spectrum, Inc.",
          type: "generic",
        },
        {
          domain: "off",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "office",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "okinawa",
          description: "BRregistry, Inc.",
          type: "generic",
        },
        {
          domain: "olayan",
          description: "Crescent Holding GmbH",
          type: "generic",
        },
        {
          domain: "olayangroup",
          description: "Crescent Holding GmbH",
          type: "generic",
        },
        {
          domain: "oldnavy",
          description: "The Gap, Inc.",
          type: "generic",
        },
        {
          domain: "ollo",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "om",
          description: "Oman (Sultanate of)",
          type: "country-code",
        },
        {
          domain: "omega",
          description: "The Swatch Group Ltd",
          type: "generic",
        },
        {
          domain: "one",
          description: "One.com A/S",
          type: "generic",
        },
        {
          domain: "ong",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "onl",
          description: "I-REGISTRY Ltd., Niederlassung Deutschland",
          type: "generic",
        },
        {
          domain: "online",
          description: "DotOnline Inc.",
          type: "generic",
        },
        {
          domain: "onyourside",
          description: "Nationwide Mutual Insurance Company",
          type: "generic",
        },
        {
          domain: "ooo",
          description: "INFIBEAM INCORPORATION LIMITED",
          type: "generic",
        },
        {
          domain: "open",
          description: "American Express Travel Related Services Company, Inc.",
          type: "generic",
        },
        {
          domain: "oracle",
          description: "Oracle Corporation",
          type: "generic",
        },
        {
          domain: "orange",
          description: "Orange Brand Services Limited",
          type: "generic",
        },
        {
          domain: "org",
          description: "Non-profit organizations",
          type: "generic",
        },
        {
          domain: "organic",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "orientexpress",
          description: "Retired",
          type: "generic",
        },
        {
          domain: "origins",
          description: "The Est\xE9e Lauder Companies Inc.",
          type: "generic",
        },
        {
          domain: "osaka",
          description: "Osaka Registry Co., Ltd.",
          type: "generic",
        },
        {
          domain: "otsuka",
          description: "Otsuka Holdings Co., Ltd.",
          type: "generic",
        },
        {
          domain: "ott",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "ovh",
          description: "OVH SAS",
          type: "generic",
        },
        {
          domain: "pa",
          description: "Panama (Republic of)",
          type: "country-code",
        },
        {
          domain: "page",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "pamperedchef",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "panasonic",
          description: "Panasonic Corporation",
          type: "generic",
        },
        {
          domain: "panerai",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "paris",
          description: "City of Paris",
          type: "generic",
        },
        {
          domain: "pars",
          description: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
          type: "generic",
        },
        {
          domain: "partners",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "parts",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "party",
          description: "Blue Sky Registry Limited",
          type: "generic",
        },
        {
          domain: "passagens",
          description: "Travel Reservations SRL",
          type: "generic",
        },
        {
          domain: "pay",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "pccw",
          description: "PCCW Enterprises Limited",
          type: "generic",
        },
        {
          domain: "pe",
          description: "Peru (Republic of)",
          type: "country-code",
        },
        {
          domain: "pet",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "pf",
          description: "French Polynesia and Clipperton Island",
          type: "country-code",
        },
        {
          domain: "pfizer",
          description: "Pfizer Inc.",
          type: "generic",
        },
        {
          domain: "pg",
          description: "Papua New Guinea (Independent State of)",
          type: "country-code",
        },
        {
          domain: "ph",
          description: "Philippines (Republic of the)",
          type: "country-code",
        },
        {
          domain: "pharmacy",
          description: "National Association of Boards of Pharmacy",
          type: "generic",
        },
        {
          domain: "phd",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "philips",
          description: "Koninklijke Philips N.V.",
          type: "generic",
        },
        {
          domain: "phone",
          description: "Dish DBS Corporation",
          type: "generic",
        },
        {
          domain: "photo",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "photography",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "photos",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "physio",
          description: "PhysBiz Pty Ltd",
          type: "generic",
        },
        {
          domain: "piaget",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "pics",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "pictet",
          description: "Pictet Europe S.A.",
          type: "generic",
        },
        {
          domain: "pictures",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "pid",
          description: "Top Level Spectrum, Inc.",
          type: "generic",
        },
        {
          domain: "pin",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "ping",
          description: "Ping Registry Provider, Inc.",
          type: "generic",
        },
        {
          domain: "pink",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "pioneer",
          description: "Pioneer Corporation",
          type: "generic",
        },
        {
          domain: "pizza",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "pk",
          description: "Pakistan (Islamic Republic of)",
          type: "country-code",
        },
        {
          domain: "pl",
          description: "Poland (Republic of)",
          type: "country-code",
        },
        {
          domain: "place",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "play",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "playstation",
          description: "Sony Computer Entertainment Inc.",
          type: "generic",
        },
        {
          domain: "plumbing",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "plus",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "pm",
          description: "Saint Pierre and Miquelon",
          type: "country-code",
        },
        {
          domain: "pn",
          description:
            "Pitcairn Islands (Pitcairn - Henderson - Ducie and Oeno Islands)",
          type: "country-code",
        },
        {
          domain: "pnc",
          description: "PNC Domain Co., LLC",
          type: "generic",
        },
        {
          domain: "pohl",
          description: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
          type: "generic",
        },
        {
          domain: "poker",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "politie",
          description: "Politie Nederland",
          type: "generic",
        },
        {
          domain: "porn",
          description: "ICM Registry PN LLC",
          type: "generic",
        },
        {
          domain: "post",
          description: "Universal Postal Union",
          type: "sponsored",
        },
        {
          domain: "pr",
          description: "Puerto Rico (Commonwealth of)",
          type: "country-code",
        },
        {
          domain: "pramerica",
          description: "Prudential Financial, Inc.",
          type: "generic",
        },
        {
          domain: "praxi",
          description: "Praxi S.p.A.",
          type: "generic",
        },
        {
          domain: "press",
          description: "DotPress Inc.",
          type: "generic",
        },
        {
          domain: "prime",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "pro",
          description: "Profession",
          type: "generic-restricted",
        },
        {
          domain: "prod",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "productions",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "prof",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "progressive",
          description: "Progressive Casualty Insurance Company",
          type: "generic",
        },
        {
          domain: "promo",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "properties",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "property",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "protection",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "pru",
          description: "Prudential Financial, Inc.",
          type: "generic",
        },
        {
          domain: "prudential",
          description: "Prudential Financial, Inc.",
          type: "generic",
        },
        {
          domain: "ps",
          description: "Palestine (State of)",
          type: "country-code",
        },
        {
          domain: "pt",
          description: "Portugal (Portuguese Republic)",
          type: "country-code",
        },
        {
          domain: "pub",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "pw",
          description: "Palau (Republic of)",
          type: "country-code",
        },
        {
          domain: "pwc",
          description: "PricewaterhouseCoopers LLP",
          type: "generic",
        },
        {
          domain: "py",
          description: "Paraguay (Republic of)",
          type: "country-code",
        },
        {
          domain: "qa",
          description: "Qatar (State of)",
          type: "country-code",
        },
        {
          domain: "qpon",
          description: "dotCOOL, Inc.",
          type: "generic",
        },
        {
          domain: "quebec",
          description: "PointQu\xE9bec Inc",
          type: "generic",
        },
        {
          domain: "quest",
          description: "Quest ION Limited",
          type: "generic",
        },
        {
          domain: "qvc",
          description: "QVC, Inc.",
          type: "generic",
        },
        {
          domain: "racing",
          description: "Premier Registry Limited",
          type: "generic",
        },
        {
          domain: "radio",
          description: "European Broadcasting Union (EBU)",
          type: "generic",
        },
        {
          domain: "raid",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "re",
          description: "R\xE9union",
          type: "country-code",
        },
        {
          domain: "read",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "realestate",
          description: "dotRealEstate LLC",
          type: "generic",
        },
        {
          domain: "realtor",
          description: "Real Estate Domains LLC",
          type: "generic",
        },
        {
          domain: "realty",
          description: "Fegistry, LLC",
          type: "generic",
        },
        {
          domain: "recipes",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "red",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "redstone",
          description: "Redstone Haute Couture Co., Ltd.",
          type: "generic",
        },
        {
          domain: "redumbrella",
          description: "Travelers TLD, LLC",
          type: "generic",
        },
        {
          domain: "rehab",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "reise",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "reisen",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "reit",
          description:
            "National Association of Real Estate Investment Trusts, Inc.",
          type: "generic",
        },
        {
          domain: "reliance",
          description: "Reliance Industries Limited",
          type: "generic",
        },
        {
          domain: "ren",
          description:
            "Beijing Qianxiang Wangjing Technology Development Co., Ltd.",
          type: "generic",
        },
        {
          domain: "rent",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "rentals",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "repair",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "report",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "republican",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "rest",
          description:
            "Punto 2012 Sociedad Anonima Promotora de Inversion de Capital Variable",
          type: "generic",
        },
        {
          domain: "restaurant",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "review",
          description: "dot Review Limited",
          type: "generic",
        },
        {
          domain: "reviews",
          description: "United TLD Holdco, Ltd.",
          type: "generic",
        },
        {
          domain: "rexroth",
          description: "Robert Bosch GMBH",
          type: "generic",
        },
        {
          domain: "rich",
          description: "I-REGISTRY Ltd., Niederlassung Deutschland",
          type: "generic",
        },
        {
          domain: "richardli",
          description: "Pacific Century Asset Management (HK) Limited",
          type: "generic",
        },
        {
          domain: "ricoh",
          description: "Ricoh Company, Ltd.",
          type: "generic",
        },
        {
          domain: "rightathome",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "ril",
          description: "Reliance Industries Limited",
          type: "generic",
        },
        {
          domain: "rio",
          description: "Empresa Municipal de Inform\xE1tica SA - IPLANRIO",
          type: "generic",
        },
        {
          domain: "rip",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "rmit",
          description: "Royal Melbourne Institute of Technology",
          type: "generic",
        },
        {
          domain: "ro",
          description: "Romania",
          type: "country-code",
        },
        {
          domain: "rocher",
          description: "Ferrero Trading Lux S.A.",
          type: "generic",
        },
        {
          domain: "rocks",
          description: "United TLD Holdco, LTD.",
          type: "generic",
        },
        {
          domain: "rodeo",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "rogers",
          description: "Rogers Communications Canada Inc.",
          type: "generic",
        },
        {
          domain: "room",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "rs",
          description: "Serbia (Republic of)",
          type: "country-code",
        },
        {
          domain: "rsvp",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "ru",
          description: "Russia (Russian Federation)",
          type: "country-code",
        },
        {
          domain: "rugby",
          description: "World Rugby Strategic Developments Limited",
          type: "generic",
        },
        {
          domain: "ruhr",
          description: "regiodot GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "run",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "rw",
          description: "Rwanda (Republic of)",
          type: "country-code",
        },
        {
          domain: "rwe",
          description: "RWE AG",
          type: "generic",
        },
        {
          domain: "ryukyu",
          description: "BRregistry, Inc.",
          type: "generic",
        },
        {
          domain: "sa",
          description: "Saudi Arabia (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "saarland",
          description: "dotSaarland GmbH",
          type: "generic",
        },
        {
          domain: "safe",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "safety",
          description: "Safety Registry Services, LLC.",
          type: "generic",
        },
        {
          domain: "sakura",
          description: "SAKURA Internet Inc.",
          type: "generic",
        },
        {
          domain: "sale",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "salon",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "samsclub",
          description: "Wal-Mart Stores, Inc.",
          type: "generic",
        },
        {
          domain: "samsung",
          description: "SAMSUNG SDS CO., LTD",
          type: "generic",
        },
        {
          domain: "sandvik",
          description: "Sandvik AB",
          type: "generic",
        },
        {
          domain: "sandvikcoromant",
          description: "Sandvik AB",
          type: "generic",
        },
        {
          domain: "sanofi",
          description: "Sanofi",
          type: "generic",
        },
        {
          domain: "sap",
          description: "SAP AG",
          type: "generic",
        },
        {
          domain: "sapo",
          description: "Not assigned",
          type: "generic",
        },
        {
          domain: "sarl",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "sas",
          description: "Research IP LLC",
          type: "generic",
        },
        {
          domain: "save",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "saxo",
          description: "Saxo Bank A/S",
          type: "generic",
        },
        {
          domain: "sb",
          description: "Solomon Islands",
          type: "country-code",
        },
        {
          domain: "sbi",
          description: "STATE BANK OF INDIA",
          type: "generic",
        },
        {
          domain: "sbs",
          description: "SPECIAL BROADCASTING SERVICE CORPORATION",
          type: "generic",
        },
        {
          domain: "sc",
          description: "Seychelles (Republic of)",
          type: "country-code",
        },
        {
          domain: "sca",
          description: "SVENSKA CELLULOSA AKTIEBOLAGET SCA (publ)",
          type: "generic",
        },
        {
          domain: "scb",
          description:
            'The Siam Commercial Bank Public Company Limited ("SCB")',
          type: "generic",
        },
        {
          domain: "schaeffler",
          description: "Schaeffler Technologies AG & Co. KG",
          type: "generic",
        },
        {
          domain: "schmidt",
          description: "SALM S.A.S.",
          type: "generic",
        },
        {
          domain: "scholarships",
          description: "Scholarships.com, LLC",
          type: "generic",
        },
        {
          domain: "school",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "schule",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "schwarz",
          description: "Schwarz Domains und Services GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "science",
          description: "dot Science Limited",
          type: "generic",
        },
        {
          domain: "scjohnson",
          description: "Johnson Shareholdings, Inc.",
          type: "generic",
        },
        {
          domain: "scor",
          description: "SCOR SE",
          type: "generic",
        },
        {
          domain: "scot",
          description: "Dot Scot Registry Limited",
          type: "generic",
        },
        {
          domain: "sd",
          description: "Sudan (Republic of)",
          type: "country-code",
        },
        {
          domain: "se",
          description: "Sweden (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "search",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "seat",
          description: "SEAT, S.A. (Sociedad Unipersonal)",
          type: "generic",
        },
        {
          domain: "secure",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "security",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "seek",
          description: "Seek Limited",
          type: "generic",
        },
        {
          domain: "select",
          description: "iSelect Ltd",
          type: "generic",
        },
        {
          domain: "sener",
          description: "Sener Ingenier\xEDa y Sistemas, S.A.",
          type: "generic",
        },
        {
          domain: "services",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "ses",
          description: "SES",
          type: "generic",
        },
        {
          domain: "seven",
          description: "Seven West Media Ltd",
          type: "generic",
        },
        {
          domain: "sew",
          description: "SEW-EURODRIVE GmbH & Co KG",
          type: "generic",
        },
        {
          domain: "sex",
          description: "ICM Registry SX LLC",
          type: "generic",
        },
        {
          domain: "sexy",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "sfr",
          description: "Societe Francaise du Radiotelephone - SFR",
          type: "generic",
        },
        {
          domain: "sg",
          description: "Singapore (Republic of)",
          type: "country-code",
        },
        {
          domain: "sh",
          description: "Saint Helena",
          type: "country-code",
        },
        {
          domain: "shangrila",
          description: "Shangri\u2010La International Hotel Management Limited",
          type: "generic",
        },
        {
          domain: "sharp",
          description: "Sharp Corporation",
          type: "generic",
        },
        {
          domain: "shaw",
          description: "Shaw Cablesystems G.P.",
          type: "generic",
        },
        {
          domain: "shell",
          description: "Shell Information Technology International Inc",
          type: "generic",
        },
        {
          domain: "shia",
          description: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
          type: "generic",
        },
        {
          domain: "shiksha",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "shoes",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "shop",
          description: "GMO Registry, Inc.",
          type: "generic",
        },
        {
          domain: "shopping",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "shouji",
          description: "QIHOO 360 TECHNOLOGY CO. LTD.",
          type: "generic",
        },
        {
          domain: "show",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "showtime",
          description: "CBS Domains Inc.",
          type: "generic",
        },
        {
          domain: "shriram",
          description: "Shriram Capital Ltd.",
          type: "generic",
        },
        {
          domain: "si",
          description: "Slovenia (Republic of)",
          type: "country-code",
        },
        {
          domain: "silk",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "sina",
          description: "Sina Corporation",
          type: "generic",
        },
        {
          domain: "singles",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "site",
          description: "DotSite Inc.",
          type: "generic",
        },
        {
          domain: "sj",
          description: "Svalbard and Jan Mayen {not in use - see also: .no}",
          type: "country-code",
        },
        {
          domain: "sk",
          description: "Slovakia (Slovak Republic)",
          type: "country-code",
        },
        {
          domain: "ski",
          description: "STARTING DOT LIMITED",
          type: "generic",
        },
        {
          domain: "skin",
          description: "L'Or\xE9al",
          type: "generic",
        },
        {
          domain: "sky",
          description: "Sky International AG",
          type: "generic",
        },
        {
          domain: "skype",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "sl",
          description: "Sierra Leone (Republic of)",
          type: "country-code",
        },
        {
          domain: "sling",
          description: "Hughes Satellite Systems Corporation",
          type: "generic",
        },
        {
          domain: "sm",
          description: "San Marino (Republic of)",
          type: "country-code",
        },
        {
          domain: "smart",
          description: "Smart Communications, Inc. (SMART)",
          type: "generic",
        },
        {
          domain: "smile",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "sn",
          description: "Senegal (Republic of)",
          type: "country-code",
        },
        {
          domain: "sncf",
          description:
            "SNCF (Soci\xE9t\xE9 Nationale des Chemins de fer Francais)",
          type: "generic",
        },
        {
          domain: "so",
          description: "Somalia (Federal Republic of)",
          type: "country-code",
        },
        {
          domain: "soccer",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "social",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "softbank",
          description: "SoftBank Group Corp.",
          type: "generic",
        },
        {
          domain: "software",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "sohu",
          description: "Sohu.com Limited",
          type: "generic",
        },
        {
          domain: "solar",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "solutions",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "song",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "sony",
          description: "Sony Corporation",
          type: "generic",
        },
        {
          domain: "soy",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "space",
          description: "DotSpace Inc.",
          type: "generic",
        },
        {
          domain: "spiegel",
          description: "SPIEGEL-Verlag Rudolf Augstein GmbH & Co. KG",
          type: "generic",
        },
        {
          domain: "sport",
          description:
            "Global Association of International Sports Federations (GAISF)",
          type: "generic",
        },
        {
          domain: "spot",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "spreadbetting",
          description: "DOTSPREADBETTING REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "sr",
          description: "Suriname (Republic of)",
          type: "country-code",
        },
        {
          domain: "srl",
          description: "InterNetX Corp.",
          type: "generic",
        },
        {
          domain: "srt",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "ss",
          description: "South Sudan (Republic of)",
          type: "country-code",
        },
        {
          domain: "st",
          description:
            "S\xE3o Tom\xE9 and Pr\xEDncipe (Democratic Republic of)",
          type: "country-code",
        },
        {
          domain: "stada",
          description: "STADA Arzneimittel AG",
          type: "generic",
        },
        {
          domain: "staples",
          description: "Staples, Inc.",
          type: "generic",
        },
        {
          domain: "star",
          description: "Star India Private Limited",
          type: "generic",
        },
        {
          domain: "starhub",
          description: "StarHub Limited",
          type: "generic",
        },
        {
          domain: "statebank",
          description: "STATE BANK OF INDIA",
          type: "generic",
        },
        {
          domain: "statefarm",
          description: "State Farm Mutual Automobile Insurance Company",
          type: "generic",
        },
        {
          domain: "statoil",
          description: "Statoil ASA",
          type: "generic",
        },
        {
          domain: "stc",
          description: "Saudi Telecom Company",
          type: "generic",
        },
        {
          domain: "stcgroup",
          description: "Saudi Telecom Company",
          type: "generic",
        },
        {
          domain: "stockholm",
          description: "Stockholms kommun",
          type: "generic",
        },
        {
          domain: "storage",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "store",
          description: "DotStore Inc.",
          type: "generic",
        },
        {
          domain: "stream",
          description: "dot Stream Limited",
          type: "generic",
        },
        {
          domain: "studio",
          description: "United TLD Holdco Ltd.",
          type: "generic",
        },
        {
          domain: "study",
          description: "OPEN UNIVERSITIES AUSTRALIA PTY LTD",
          type: "generic",
        },
        {
          domain: "style",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "su",
          description: "Soviet Union (Union of Soviet Socialist Republics)",
          type: "country-code",
        },
        {
          domain: "sucks",
          description: "Vox Populi Registry Ltd.",
          type: "generic",
        },
        {
          domain: "supplies",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "supply",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "support",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "surf",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "surgery",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "suzuki",
          description: "SUZUKI MOTOR CORPORATION",
          type: "generic",
        },
        {
          domain: "sv",
          description: "El Salvador (Republic of)",
          type: "country-code",
        },
        {
          domain: "swatch",
          description: "The Swatch Group Ltd",
          type: "generic",
        },
        {
          domain: "swiftcover",
          description: "Swiftcover Insurance Services Limited",
          type: "generic",
        },
        {
          domain: "swiss",
          description: "Swiss Confederation",
          type: "generic",
        },
        {
          domain: "sx",
          description: "Sint Maarten",
          type: "country-code",
        },
        {
          domain: "sy",
          description: "Syria (Syrian Arab Republic)",
          type: "country-code",
        },
        {
          domain: "sydney",
          description:
            "State of New South Wales, Department of Premier and Cabinet",
          type: "generic",
        },
        {
          domain: "symantec",
          description: "Symantec Corporation",
          type: "generic",
        },
        {
          domain: "systems",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "sz",
          description: "Swaziland (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "tab",
          description: "Tabcorp Holdings Limited",
          type: "generic",
        },
        {
          domain: "taipei",
          description: "Taipei City Government",
          type: "generic",
        },
        {
          domain: "talk",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "taobao",
          description: "Alibaba Group Holding Limited",
          type: "generic",
        },
        {
          domain: "target",
          description: "Target Domain Holdings, LLC",
          type: "generic",
        },
        {
          domain: "tatamotors",
          description: "Tata Motors Ltd",
          type: "generic",
        },
        {
          domain: "tatar",
          description:
            'Limited Liability Company "Coordination Center of Regional Domain of Tatarstan Republic"',
          type: "generic",
        },
        {
          domain: "tattoo",
          description: "Uniregistry, Corp.",
          type: "generic",
        },
        {
          domain: "tax",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "taxi",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tc",
          description: "Turks and Caicos Islands",
          type: "country-code",
        },
        {
          domain: "tci",
          description: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
          type: "generic",
        },
        {
          domain: "td",
          description: "Chad (Republic of)",
          type: "country-code",
        },
        {
          domain: "tdk",
          description: "TDK Corporation",
          type: "generic",
        },
        {
          domain: "team",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tech",
          description: "Dot Tech LLC",
          type: "generic",
        },
        {
          domain: "technology",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tel",
          description: "Telephone",
          type: "sponsored",
        },
        {
          domain: "telecity",
          description: "TelecityGroup International Limited",
          type: "generic",
        },
        {
          domain: "telefonica",
          description: "Telef\xF3nica S.A.",
          type: "generic",
        },
        {
          domain: "temasek",
          description: "Temasek Holdings (Private) Limited",
          type: "generic",
        },
        {
          domain: "tennis",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "teva",
          description: "Teva Pharmaceutical Industries Limited",
          type: "generic",
        },
        {
          domain: "tf",
          description: "French Southern and Antarctic Lands (Territory of the)",
          type: "country-code",
        },
        {
          domain: "tg",
          description: "Togo (Togolese Republic)",
          type: "country-code",
        },
        {
          domain: "th",
          description: "Thailand (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "thd",
          description: "Home Depot Product Authority, LLC",
          type: "generic",
        },
        {
          domain: "theater",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "theatre",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "tiaa",
          description: "Teachers Insurance and Annuity Association of America",
          type: "generic",
        },
        {
          domain: "tickets",
          description: "Accent Media Limited",
          type: "generic",
        },
        {
          domain: "tienda",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tiffany",
          description: "Tiffany and Company",
          type: "generic",
        },
        {
          domain: "tips",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tires",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tirol",
          description: "punkt Tirol GmbH",
          type: "generic",
        },
        {
          domain: "tj",
          description: "Tajikistan (Republic of)",
          type: "country-code",
        },
        {
          domain: "tjmaxx",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "tjx",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "tk",
          description: "Tokelau",
          type: "country-code",
        },
        {
          domain: "tkmaxx",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "tl",
          description: "Timor-Leste (Democratic Republic of) [East Timor]",
          type: "country-code",
        },
        {
          domain: "tm",
          description: "Turkmenistan",
          type: "country-code",
        },
        {
          domain: "tmall",
          description: "Alibaba Group Holding Limited",
          type: "generic",
        },
        {
          domain: "tn",
          description: "Tunisia (Republic of)",
          type: "country-code",
        },
        {
          domain: "to",
          description: "Tonga (Kingdom of)",
          type: "country-code",
        },
        {
          domain: "today",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tokyo",
          description: "GMO Registry, Inc.",
          type: "generic",
        },
        {
          domain: "tools",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "top",
          description: "Jiangsu Bangning Science & Technology Co.,Ltd.",
          type: "generic",
        },
        {
          domain: "toray",
          description: "Toray Industries, Inc.",
          type: "generic",
        },
        {
          domain: "toshiba",
          description: "TOSHIBA Corporation",
          type: "generic",
        },
        {
          domain: "total",
          description: "Total SA",
          type: "generic",
        },
        {
          domain: "tours",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "town",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "toyota",
          description: "TOYOTA MOTOR CORPORATION",
          type: "generic",
        },
        {
          domain: "toys",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "tp",
          description:
            "Timor-Leste (Democratic Republic of) [East Timor] {being phased out - also see: .tl}",
          type: "country-code",
        },
        {
          domain: "tr",
          description: "Turkey (Republic of)",
          type: "country-code",
        },
        {
          domain: "trade",
          description: "Elite Registry Limited",
          type: "generic",
        },
        {
          domain: "trading",
          description: "DOTTRADING REGISTRY LTD",
          type: "generic",
        },
        {
          domain: "training",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "travel",
          description: "Travel",
          type: "sponsored",
        },
        {
          domain: "travelchannel",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "travelers",
          description: "Travelers TLD, LLC",
          type: "generic",
        },
        {
          domain: "travelersinsurance",
          description: "Travelers TLD, LLC",
          type: "generic",
        },
        {
          domain: "trust",
          description: "Artemis Internet Inc",
          type: "generic",
        },
        {
          domain: "trv",
          description: "Travelers TLD, LLC",
          type: "generic",
        },
        {
          domain: "tt",
          description: "Trinidad and Tobago (Republic of)",
          type: "country-code",
        },
        {
          domain: "tube",
          description: "Latin American Telecom LLC",
          type: "generic",
        },
        {
          domain: "tui",
          description: "TUI AG",
          type: "generic",
        },
        {
          domain: "tunes",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "tushu",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "tv",
          description: "Tuvalu",
          type: "country-code",
        },
        {
          domain: "tvs",
          description: "T V SUNDRAM IYENGAR  & SONS PRIVATE LIMITED",
          type: "generic",
        },
        {
          domain: "tw",
          description: "Taiwan (Republic of China)",
          type: "country-code",
        },
        {
          domain: "tz",
          description: "Tanzania (United Republic of)",
          type: "country-code",
        },
        {
          domain: "ua",
          description: "Ukraine",
          type: "country-code",
        },
        {
          domain: "ubank",
          description: "National Australia Bank Limited",
          type: "generic",
        },
        {
          domain: "ubs",
          description: "UBS AG",
          type: "generic",
        },
        {
          domain: "uconnect",
          description: "FCA US LLC.",
          type: "generic",
        },
        {
          domain: "ug",
          description: "Uganda (Republic of)",
          type: "country-code",
        },
        {
          domain: "uk",
          description:
            "United Kingdom (United Kingdom of Great Britain and Northern Ireland)",
          type: "country-code",
        },
        {
          domain: "um",
          description:
            "United States Minor Outlying Islands {formerly - retired 2010 - see also: .us}",
          type: "country-code",
        },
        {
          domain: "unicom",
          description:
            "China United Network Communications Corporation Limited",
          type: "generic",
        },
        {
          domain: "university",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "uno",
          description: "Dot Latin LLC",
          type: "generic",
        },
        {
          domain: "uol",
          description: "UBN INTERNET LTDA.",
          type: "generic",
        },
        {
          domain: "ups",
          description: "UPS Market Driver, Inc.",
          type: "generic",
        },
        {
          domain: "us",
          description:
            "United States of America and United States Minor Outlying Islands",
          type: "country-code",
        },
        {
          domain: "uy",
          description: "Uruguay (Oriental Republic of)",
          type: "country-code",
        },
        {
          domain: "uz",
          description: "Uzbekistan (Republic of)",
          type: "country-code",
        },
        {
          domain: "va",
          description: "Vatican City (Vatican City State)",
          type: "country-code",
        },
        {
          domain: "vacations",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "vana",
          description: "Lifestyle Domain Holdings, Inc.",
          type: "generic",
        },
        {
          domain: "vanguard",
          description: "The Vanguard Group, Inc.",
          type: "generic",
        },
        {
          domain: "vc",
          description: "Saint Vincent and the Grenadines",
          type: "country-code",
        },
        {
          domain: "ve",
          description: "Venezuela (Bolivarian Republic of)",
          type: "country-code",
        },
        {
          domain: "vegas",
          description: "Dot Vegas, Inc.",
          type: "generic",
        },
        {
          domain: "ventures",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "verisign",
          description: "VeriSign, Inc.",
          type: "generic",
        },
        {
          domain: "versicherung",
          description: "TLD-BOX Registrydienstleistungen GmbH",
          type: "generic",
        },
        {
          domain: "vet",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "vg",
          description: "British Virgin Islands (Virgin Islands)",
          type: "country-code",
        },
        {
          domain: "vi",
          description:
            "United States Virgin Islands (United States Virgin Islands)",
          type: "country-code",
        },
        {
          domain: "viajes",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "video",
          description: "United TLD Holdco, Ltd",
          type: "generic",
        },
        {
          domain: "vig",
          description: "VIENNA INSURANCE GROUP AG Wiener Versicherung Gruppe",
          type: "generic",
        },
        {
          domain: "viking",
          description: "Viking River Cruises (Bermuda) Ltd.",
          type: "generic",
        },
        {
          domain: "villas",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "vin",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "vip",
          description: "Minds + Machines Group Limited",
          type: "generic",
        },
        {
          domain: "virgin",
          description: "Virgin Enterprises Limited",
          type: "generic",
        },
        {
          domain: "visa",
          description: "Visa Worldwide Pte. Limited",
          type: "generic",
        },
        {
          domain: "vision",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "vista",
          description: "Vistaprint Limited",
          type: "generic",
        },
        {
          domain: "vistaprint",
          description: "Vistaprint Limited",
          type: "generic",
        },
        {
          domain: "viva",
          description: "Saudi Telecom Company",
          type: "generic",
        },
        {
          domain: "vivo",
          description: "Telefonica Brasil S.A.",
          type: "generic",
        },
        {
          domain: "vlaanderen",
          description: "DNS.be vzw",
          type: "generic",
        },
        {
          domain: "vn",
          description: "Vietnam (Socialist Republic of)",
          type: "country-code",
        },
        {
          domain: "vodka",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "volkswagen",
          description: "Volkswagen Group of America Inc.",
          type: "generic",
        },
        {
          domain: "volvo",
          description: "Volvo Holding Sverige Aktiebolag",
          type: "generic",
        },
        {
          domain: "vote",
          description: "Monolith Registry LLC",
          type: "generic",
        },
        {
          domain: "voting",
          description: "Valuetainment Corp.",
          type: "generic",
        },
        {
          domain: "voto",
          description: "Monolith Registry LLC",
          type: "generic",
        },
        {
          domain: "voyage",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "vu",
          description: "Vanuatu (Republic of)",
          type: "country-code",
        },
        {
          domain: "vuelos",
          description: "Travel Reservations SRL",
          type: "generic",
        },
        {
          domain: "wales",
          description: "Nominet UK",
          type: "generic",
        },
        {
          domain: "walmart",
          description: "Wal-Mart Stores, Inc.",
          type: "generic",
        },
        {
          domain: "walter",
          description: "Sandvik AB",
          type: "generic",
        },
        {
          domain: "wang",
          description: "Zodiac Wang Limited",
          type: "generic",
        },
        {
          domain: "wanggou",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "warman",
          description: "Weir Group IP Limited",
          type: "generic",
        },
        {
          domain: "watch",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "watches",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "weather",
          description: "International Business Machines Corporation",
          type: "generic",
        },
        {
          domain: "weatherchannel",
          description: "International Business Machines Corporation",
          type: "generic",
        },
        {
          domain: "webcam",
          description: "dot Webcam Limited",
          type: "generic",
        },
        {
          domain: "weber",
          description: "Saint-Gobain Weber SA",
          type: "generic",
        },
        {
          domain: "website",
          description: "DotWebsite Inc.",
          type: "generic",
        },
        {
          domain: "wed",
          description: "Emergency Back-End Registry Operator Program - ICANN",
          type: "generic",
        },
        {
          domain: "wedding",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "weibo",
          description: "Sina Corporation",
          type: "generic",
        },
        {
          domain: "weir",
          description: "Weir Group IP Limited",
          type: "generic",
        },
        {
          domain: "wf",
          description:
            "Wallis and Futuna (Territory of the Wallis and Futuna Islands)",
          type: "country-code",
        },
        {
          domain: "whoswho",
          description: "Who's Who Registry",
          type: "generic",
        },
        {
          domain: "wien",
          description: "punkt.wien GmbH",
          type: "generic",
        },
        {
          domain: "wiki",
          description: "Top Level Design, LLC",
          type: "generic",
        },
        {
          domain: "williamhill",
          description: "William Hill Organization Limited",
          type: "generic",
        },
        {
          domain: "win",
          description: "First Registry Limited",
          type: "generic",
        },
        {
          domain: "windows",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "wine",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "winners",
          description: "The TJX Companies, Inc.",
          type: "generic",
        },
        {
          domain: "wme",
          description: "William Morris Endeavor Entertainment, LLC",
          type: "generic",
        },
        {
          domain: "wolterskluwer",
          description: "Wolters Kluwer N.V.",
          type: "generic",
        },
        {
          domain: "woodside",
          description: "Woodside Petroleum Limited",
          type: "generic",
        },
        {
          domain: "work",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "works",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "world",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "wow",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "ws",
          description: "Samoa (Independent State of)",
          type: "country-code",
        },
        {
          domain: "wtc",
          description: "World Trade Centers Association, Inc.",
          type: "generic",
        },
        {
          domain: "wtf",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "xbox",
          description: "Microsoft Corporation",
          type: "generic",
        },
        {
          domain: "xerox",
          description: "Xerox DNHC LLC",
          type: "generic",
        },
        {
          domain: "xfinity",
          description: "Comcast IP Holdings I, LLC",
          type: "generic",
        },
        {
          domain: "xihuan",
          description: "QIHOO 360 TECHNOLOGY CO. LTD.",
          type: "generic",
        },
        {
          domain: "xin",
          description: "Elegant Leader Limited",
          type: "generic",
        },
        {
          domain: "\u6D4B\u8BD5",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u0915\u0949\u092E",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u092A\u0930\u0940\u0915\u094D\u0937\u093E",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u30BB\u30FC\u30EB",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u4F5B\u5C71",
          description: "Guangzhou YU Wei Information Technology Co., Ltd.",
          type: "generic",
        },
        {
          domain: "\u0CAD\u0CBE\u0CB0\u0CA4",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u6148\u5584",
          description: "Excellent First Limited",
          type: "generic",
        },
        {
          domain: "\u96C6\u56E2",
          description: "Eagle Horizon Limited",
          type: "generic",
        },
        {
          domain: "\u5728\u7EBF",
          description: "TLD REGISTRY LIMITED",
          type: "generic",
        },
        {
          domain: "\uD55C\uAD6D",
          description: "KISA (Korea Internet & Security Agency)",
          type: "country-code",
        },
        {
          domain: "\u0B2D\u0B3E\u0B30\u0B24",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u5927\u4F17\u6C7D\u8F66",
          description: "Volkswagen (China) Investment Co., Ltd.",
          type: "generic",
        },
        {
          domain: "\u70B9\u770B",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u0E04\u0E2D\u0E21",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u09AD\u09BE\u09F0\u09A4",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u09AD\u09BE\u09B0\u09A4",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u516B\u5366",
          description: "Zodiac Gemini Ltd",
          type: "generic",
        },
        {
          domain: "\u200F\u0645\u0648\u0642\u0639\u200E",
          description: "Suhub Electronic Establishment",
          type: "generic",
        },
        {
          domain: "\u09AC\u09BE\u0982\u09B2\u09BE",
          description: "Posts and Telecommunications Division",
          type: "country-code",
        },
        {
          domain: "\u516C\u76CA",
          description: "China Organizational Name Administration Center",
          type: "generic",
        },
        {
          domain: "\u516C\u53F8",
          description:
            "Computer Network Information Center of Chinese Academy of Sciences \uFF08China Internet Network Information Center\uFF09",
          type: "generic",
        },
        {
          domain: "\u9999\u683C\u91CC\u62C9",
          description: "Shangri\u2010La International Hotel Management Limited",
          type: "generic",
        },
        {
          domain: "\u7F51\u7AD9",
          description: "Global Website TLD Asia Limited",
          type: "generic",
        },
        {
          domain: "\u79FB\u52A8",
          description: "Afilias plc",
          type: "generic",
        },
        {
          domain: "\u6211\u7231\u4F60",
          description: "Tycoon Treasure Limited",
          type: "generic",
        },
        {
          domain: "\u043C\u043E\u0441\u043A\u0432\u0430",
          description:
            "Foundation for Assistance for Internet Technologies and Infrastructure Development (FAITID)",
          type: "generic",
        },
        {
          domain: "\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u049B\u0430\u0437",
          description: "Association of IT Companies of Kazakhstan",
          type: "country-code",
        },
        {
          domain: "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
          description:
            "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
          type: "generic",
        },
        {
          domain: "\u043E\u043D\u043B\u0430\u0439\u043D",
          description: "CORE Association",
          type: "generic",
        },
        {
          domain: "\u0441\u0430\u0439\u0442",
          description: "CORE Association",
          type: "generic",
        },
        {
          domain: "\u8054\u901A",
          description:
            "China United Network Communications Corporation Limited",
          type: "generic",
        },
        {
          domain: "\u0441\u0440\u0431",
          description: "Serbian National Internet Domain Registry (RNIDS)",
          type: "country-code",
        },
        {
          domain: "\u0431\u0433",
          description: "Imena.BG AD",
          type: "country-code",
        },
        {
          domain: "\u0431\u0435\u043B",
          description: "Reliable Software, Ltd.",
          type: "country-code",
        },
        {
          domain: "\u200F\u05E7\u05D5\u05DD\u200E",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u65F6\u5C1A",
          description: "RISE VICTORY LIMITED",
          type: "generic",
        },
        {
          domain: "\u5FAE\u535A",
          description: "Sina Corporation",
          type: "generic",
        },
        {
          domain: "\uD14C\uC2A4\uD2B8",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u6DE1\u9A6C\u9521",
          description: "Temasek Holdings (Private) Limited",
          type: "generic",
        },
        {
          domain: "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u043E\u0440\u0433",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "\u0928\u0947\u091F",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u30B9\u30C8\u30A2",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\uC0BC\uC131",
          description: "SAMSUNG SDS CO., LTD",
          type: "generic",
        },
        {
          domain:
            "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
          description: "Singapore Network Information Centre (SGNIC) Pte Ltd",
          type: "country-code",
        },
        {
          domain: "\u5546\u6807",
          description:
            "HU YI GLOBAL INFORMATION RESOURCES(HOLDING) COMPANY.HONGKONG LIMITED",
          type: "generic",
        },
        {
          domain: "\u5546\u5E97",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "\u5546\u57CE",
          description: "Zodiac Aquarius Limited",
          type: "generic",
        },
        {
          domain: "\u0434\u0435\u0442\u0438",
          description:
            "The Foundation for Network Initiatives \u201CThe Smart Internet\u201D",
          type: "generic",
        },
        {
          domain: "\u043C\u043A\u0434",
          description: "Macedonian Academic Research Network Skopje",
          type: "country-code",
        },
        {
          domain: "\u200F\u05D8\u05E2\u05E1\u05D8\u200E",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u0435\u044E",
          description: "EURid vzw/asbl",
          type: "country-code",
        },
        {
          domain: "\u30DD\u30A4\u30F3\u30C8",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u65B0\u95FB",
          description: "Guangzhou YU Wei Information and Technology Co.,Ltd",
          type: "generic",
        },
        {
          domain: "\u5DE5\u884C",
          description: "Industrial and Commercial Bank of China Limited",
          type: "generic",
        },
        {
          domain: "\u5BB6\u96FB",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u200F\u0643\u0648\u0645\u200E",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u4E2D\u6587\u7F51",
          description: "TLD REGISTRY LIMITED",
          type: "generic",
        },
        {
          domain: "\u4E2D\u4FE1",
          description: "CITIC Group Corporation",
          type: "generic",
        },
        {
          domain: "\u4E2D\u56FD",
          description: "China Internet Network Information Center (CNNIC)",
          type: "country-code",
        },
        {
          domain: "\u4E2D\u570B",
          description: "China Internet Network Information Center (CNNIC)",
          type: "country-code",
        },
        {
          domain: "\u5A31\u4E50",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "\u8C37\u6B4C",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u0DBD\u0D82\u0D9A\u0DCF",
          description: "LK Domain Registry",
          type: "country-code",
        },
        {
          domain: "\u96FB\u8A0A\u76C8\u79D1",
          description: "PCCW Enterprises Limited",
          type: "generic",
        },
        {
          domain: "\u8D2D\u7269",
          description: "Minds + Machines Group Limited",
          type: "generic",
        },
        {
          domain: "\u6E2C\u8A66",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u30AF\u30E9\u30A6\u30C9",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u0AAD\u0ABE\u0AB0\u0AA4",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u901A\u8CA9",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u092D\u093E\u0930\u0924\u092E\u094D",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u092D\u093E\u0930\u0924",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u092D\u093E\u0930\u094B\u0924",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u200F\u0622\u0632\u0645\u0627\u06CC\u0634\u06CC\u200E",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u0BAA\u0BB0\u0BBF\u0B9F\u0BCD\u0B9A\u0BC8",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u7F51\u5E97",
          description: "Zodiac Taurus Ltd.",
          type: "generic",
        },
        {
          domain: "\u0938\u0902\u0917\u0920\u0928",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "\u9910\u5385",
          description:
            "HU YI GLOBAL INFORMATION RESOURCES (HOLDING) COMPANY. HONGKONG LIMITED",
          type: "generic",
        },
        {
          domain: "\u7F51\u7EDC",
          description:
            "Computer Network Information Center of Chinese Academy of Sciences \uFF08China Internet Network Information Center\uFF09",
          type: "generic",
        },
        {
          domain: "\u043A\u043E\u043C",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u0443\u043A\u0440",
          description: "Ukrainian Network Information Centre (UANIC), Inc.",
          type: "country-code",
        },
        {
          domain: "\u9999\u6E2F",
          description: "Hong Kong Internet Registration Corporation Ltd.",
          type: "country-code",
        },
        {
          domain: "\u8BFA\u57FA\u4E9A",
          description: "Nokia Corporation",
          type: "generic",
        },
        {
          domain: "\u98DF\u54C1",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u03B4\u03BF\u03BA\u03B9\u03BC\u03AE",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u98DE\u5229\u6D66",
          description: "Koninklijke Philips N.V.",
          type: "generic",
        },
        {
          domain: "\u200F\u0625\u062E\u062A\u0628\u0627\u0631\u200E",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u53F0\u6E7E",
          description: "Taiwan Network Information Center (TWNIC)",
          type: "country-code",
        },
        {
          domain: "\u53F0\u7063",
          description: "Taiwan Network Information Center (TWNIC)",
          type: "country-code",
        },
        {
          domain: "\u624B\u8868",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "\u624B\u673A",
          description: "Beijing RITT-Net Technology Development Co., Ltd",
          type: "generic",
        },
        {
          domain: "\u043C\u043E\u043D",
          description: "Datacom Co.,Ltd",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0644\u062C\u0632\u0627\u0626\u0631\u200E",
          description: "CERIST",
          type: "country-code",
        },
        {
          domain: "\u200F\u0639\u0645\u0627\u0646\u200E",
          description: "Telecommunications Regulatory Authority (TRA)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0631\u0627\u0645\u0643\u0648\u200E",
          description: "Aramco Services Company",
          type: "generic",
        },
        {
          domain: "\u200F\u0627\u06CC\u0631\u0627\u0646\u200E",
          description: "Institute for Research in Fundamental Sciences (IPM)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0644\u0639\u0644\u064A\u0627\u0646\u200E",
          description: "Crescent Holding GmbH",
          type: "generic",
        },
        {
          domain: "\u200F\u0627\u062A\u0635\u0627\u0644\u0627\u062A\u200E",
          description:
            "Emirates Telecommunications Corporation (trading as Etisalat)",
          type: "generic",
        },
        {
          domain: "\u200F\u0627\u0645\u0627\u0631\u0627\u062A\u200E",
          description: "Telecommunications Regulatory Authority (TRA)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0628\u0627\u0632\u0627\u0631\u200E",
          description: "CORE Association",
          type: "generic",
        },
        {
          domain:
            "\u200F\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627\u200E",
          description: "Not assigned",
          type: "country-code",
        },
        {
          domain: "\u200F\u067E\u0627\u06A9\u0633\u062A\u0627\u0646\u200E",
          description: "National Telecommunication Corporation",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0644\u0627\u0631\u062F\u0646\u200E",
          description: "National Information Technology Center (NITC)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0645\u0648\u0628\u0627\u064A\u0644\u064A\u200E",
          description: "GreenTech Consultancy Company W.L.L.",
          type: "generic",
        },
        {
          domain: "\u200F\u0628\u0627\u0631\u062A\u200E",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u200F\u0628\u06BE\u0627\u0631\u062A\u200E",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0644\u0645\u063A\u0631\u0628\u200E",
          description:
            "Agence Nationale de R\xE9glementation des T\xE9l\xE9communications (ANRT)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0627\u0628\u0648\u0638\u0628\u064A\u200E",
          description: "Abu Dhabi Systems and Information Centre",
          type: "generic",
        },
        {
          domain:
            "\u200F\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629\u200E",
          description: "Communications and Information Technology Commission",
          type: "country-code",
        },
        {
          domain: "\u200F\u0680\u0627\u0631\u062A\u200E",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u200F\u0643\u0627\u062B\u0648\u0644\u064A\u0643\u200E",
          description:
            "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
          type: "generic",
        },
        {
          domain: "\u200F\u0633\u0648\u062F\u0627\u0646\u200E",
          description: "Sudan Internet Society",
          type: "country-code",
        },
        {
          domain: "\u200F\u0647\u0645\u0631\u0627\u0647\u200E",
          description: "Asia Green IT System Bilgisayar San. ve Tic. Ltd. Sti.",
          type: "generic",
        },
        {
          domain: "\u200F\u0639\u0631\u0627\u0642\u200E",
          description: "Communications and Media Commission (CMC)",
          type: "country-code",
        },
        {
          domain: "\u200F\u0645\u0644\u064A\u0633\u064A\u0627\u200E",
          description: "MYNIC Berhad",
          type: "country-code",
        },
        {
          domain: "\u6FB3\u9580",
          description: "Macao Post and Telecommunications Bureau (CTT)",
          type: "country-code",
        },
        {
          domain: "\uB2F7\uCEF4",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u653F\u5E9C",
          description: "Net-Chinese Co., Ltd.",
          type: "generic",
        },
        {
          domain: "\u200F\u0634\u0628\u0643\u0629\u200E",
          description: "International Domain Registry Pty. Ltd.",
          type: "generic",
        },
        {
          domain: "\u200F\u0628\u064A\u062A\u0643\u200E",
          description: "Kuwait Finance House",
          type: "generic",
        },
        {
          domain: "\u200F\u0639\u0631\u0628\u200E",
          description: "League of Arab States",
          type: "generic",
        },
        {
          domain: "\u10D2\u10D4",
          description: "Information Technologies Development Center (ITDC)",
          type: "country-code",
        },
        {
          domain: "\u673A\u6784",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "\u7EC4\u7EC7\u673A\u6784",
          description: "Public Interest Registry",
          type: "generic",
        },
        {
          domain: "\u5065\u5EB7",
          description: "Stable Tone Limited",
          type: "generic",
        },
        {
          domain: "\u0E44\u0E17\u0E22",
          description: "Thai Network Information Center Foundation",
          type: "country-code",
        },
        {
          domain: "\u200F\u0633\u0648\u0631\u064A\u0629\u200E",
          description: "National Agency for Network Services (NANS)",
          type: "country-code",
        },
        {
          domain: "\u62DB\u8058",
          description: "Dot Trademark TLD Holding Company Limited",
          type: "generic",
        },
        {
          domain: "\u0440\u0443\u0441",
          description: "Rusnames Limited",
          type: "generic",
        },
        {
          domain: "\u0440\u0444",
          description: "Coordination Center for TLD RU",
          type: "country-code",
        },
        {
          domain: "\u73E0\u5B9D",
          description: "Richemont DNS Inc.",
          type: "generic",
        },
        {
          domain: "\u200F\u062A\u0648\u0646\u0633\u200E",
          description: "Agence Tunisienne d'Internet",
          type: "country-code",
        },
        {
          domain: "\u5927\u62FF",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u307F\u3093\u306A",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "\u30B0\u30FC\u30B0\u30EB",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "\u03B5\u03BB",
          description: "ICS-FORTH GR",
          type: "country-code",
        },
        {
          domain: "\u4E16\u754C",
          description: "Stable Tone Limited",
          type: "generic",
        },
        {
          domain: "\u66F8\u7C4D",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
          description: "National Internet eXchange of India",
          type: "country-code",
        },
        {
          domain: "\u0A2D\u0A3E\u0A30\u0A24",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u7F51\u5740",
          description: "KNET Co., Ltd",
          type: "generic",
        },
        {
          domain: "\uB2F7\uB137",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u30B3\u30E0",
          description: "VeriSign Sarl",
          type: "generic",
        },
        {
          domain: "\u5929\u4E3B\u6559",
          description:
            "Pontificium Consilium de Comunicationibus Socialibus (PCCS) (Pontifical Council for Social Communication)",
          type: "generic",
        },
        {
          domain: "\u6E38\u620F",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "verm\xF6gensberater",
          description: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
          type: "generic",
        },
        {
          domain: "verm\xF6gensberatung",
          description: "Deutsche Verm\xF6gensberatung Aktiengesellschaft DVAG",
          type: "generic",
        },
        {
          domain: "\u4F01\u4E1A",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "\u4FE1\u606F",
          description: "Beijing Tele-info Network Technology Co., Ltd.",
          type: "generic",
        },
        {
          domain: "\u5609\u91CC\u5927\u9152\u5E97",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "\u5609\u91CC",
          description: "Kerry Trading Co. Limited",
          type: "generic",
        },
        {
          domain: "\u200F\u0645\u0635\u0631\u200E",
          description: "National Telecommunication Regulatory Authority - NTRA",
          type: "country-code",
        },
        {
          domain: "\u200F\u0642\u0637\u0631\u200E",
          description: "Communications Regulatory Authority",
          type: "country-code",
        },
        {
          domain: "\u5E7F\u4E1C",
          description: "Guangzhou YU Wei Information Technology Co., Ltd.",
          type: "generic",
        },
        {
          domain: "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
          description: "LK Domain Registry",
          type: "country-code",
        },
        {
          domain: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
          description: "National Internet Exchange of India",
          type: "country-code",
        },
        {
          domain: "\u0570\u0561\u0575",
          description: '"Internet Society" Non-governmental Organization',
          type: "country-code",
        },
        {
          domain: "\u65B0\u52A0\u5761",
          description: "Singapore Network Information Centre (SGNIC) Pte Ltd",
          type: "country-code",
        },
        {
          domain: "\u200F\u0641\u0644\u0633\u0637\u064A\u0646\u200E",
          description: "Ministry of Telecom & Information Technology (MTIT)",
          type: "country-code",
        },
        {
          domain: "\u30C6\u30B9\u30C8",
          description: "Internet Assigned Numbers Authority",
          type: "test",
        },
        {
          domain: "\u653F\u52A1",
          description: "China Organizational Name Administration Center",
          type: "generic",
        },
        {
          domain: "xperia",
          description: "Sony Mobile Communications AB",
          type: "generic",
        },
        {
          domain: "xxx",
          description: "Adult entertainment",
          type: "sponsored",
        },
        {
          domain: "xyz",
          description: "XYZ.COM LLC",
          type: "generic",
        },
        {
          domain: "yachts",
          description: "DERYachts, LLC",
          type: "generic",
        },
        {
          domain: "yahoo",
          description: "Yahoo! Domain Services Inc.",
          type: "generic",
        },
        {
          domain: "yamaxun",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "yandex",
          description: "YANDEX, LLC",
          type: "generic",
        },
        {
          domain: "ye",
          description: "Yemen (Republic of)",
          type: "country-code",
        },
        {
          domain: "yodobashi",
          description: "YODOBASHI CAMERA CO.,LTD.",
          type: "generic",
        },
        {
          domain: "yoga",
          description: "Top Level Domain Holdings Limited",
          type: "generic",
        },
        {
          domain: "yokohama",
          description: "GMO Registry, Inc.",
          type: "generic",
        },
        {
          domain: "you",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "youtube",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "yt",
          description: "Mayotte (Department of)",
          type: "country-code",
        },
        {
          domain: "yun",
          description: "QIHOO 360 TECHNOLOGY CO. LTD.",
          type: "generic",
        },
        {
          domain: "za",
          description: "South Africa (Republic of)",
          type: "country-code",
        },
        {
          domain: "zappos",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "zara",
          description: "Industria de Dise\xF1o Textil, S.A. (INDITEX, S.A.)",
          type: "generic",
        },
        {
          domain: "zero",
          description: "Amazon Registry Services, Inc.",
          type: "generic",
        },
        {
          domain: "zip",
          description: "Charleston Road Registry Inc.",
          type: "generic",
        },
        {
          domain: "zippo",
          description: "Zadco Company",
          type: "generic",
        },
        {
          domain: "zm",
          description: "Zambia (Republic of)",
          type: "country-code",
        },
        {
          domain: "zone",
          description: "Binky Moon, LLC",
          type: "generic",
        },
        {
          domain: "zuerich",
          description: "Kanton Z\xFCrich (Canton of Zurich)",
          type: "generic",
        },
        {
          domain: "zw",
          description: "Zimbabwe (Republic of)",
          type: "country-code",
        },
      ];
    },
  });

  // node_modules/@lumeweb/tld-enum/formats/js/tld-enum/list.js
  var require_list = __commonJS({
    "node_modules/@lumeweb/tld-enum/formats/js/tld-enum/list.js"(
      exports,
      module
    ) {
      module.exports = [
        "aaa",
        "aarp",
        "abarth",
        "abb",
        "abbott",
        "abbvie",
        "abc",
        "able",
        "abogado",
        "abudhabi",
        "ac",
        "academy",
        "accenture",
        "accountant",
        "accountants",
        "aco",
        "active",
        "actor",
        "ad",
        "adac",
        "ads",
        "adult",
        "ae",
        "aeg",
        "aero",
        "aetna",
        "af",
        "afamilycompany",
        "afl",
        "africa",
        "ag",
        "agakhan",
        "agency",
        "ai",
        "aig",
        "aigo",
        "airbus",
        "airforce",
        "airtel",
        "akdn",
        "al",
        "alfaromeo",
        "alibaba",
        "alipay",
        "allfinanz",
        "allstate",
        "ally",
        "alsace",
        "alstom",
        "am",
        "americanexpress",
        "americanfamily",
        "amex",
        "amfam",
        "amica",
        "amsterdam",
        "an",
        "analytics",
        "android",
        "anquan",
        "anz",
        "ao",
        "aol",
        "apartments",
        "app",
        "apple",
        "aq",
        "aquarelle",
        "ar",
        "arab",
        "aramco",
        "archi",
        "army",
        "arpa",
        "art",
        "arte",
        "as",
        "asda",
        "asia",
        "associates",
        "at",
        "athleta",
        "attorney",
        "au",
        "auction",
        "audi",
        "audible",
        "audio",
        "auspost",
        "author",
        "auto",
        "autos",
        "avianca",
        "aw",
        "aws",
        "ax",
        "axa",
        "az",
        "azure",
        "ba",
        "baby",
        "baidu",
        "banamex",
        "bananarepublic",
        "band",
        "bank",
        "bar",
        "barcelona",
        "barclaycard",
        "barclays",
        "barefoot",
        "bargains",
        "baseball",
        "basketball",
        "bauhaus",
        "bayern",
        "bb",
        "bbc",
        "bbt",
        "bbva",
        "bcg",
        "bcn",
        "bd",
        "be",
        "beats",
        "beauty",
        "beer",
        "bentley",
        "berlin",
        "best",
        "bestbuy",
        "bet",
        "bf",
        "bg",
        "bh",
        "bharti",
        "bi",
        "bible",
        "bid",
        "bike",
        "bing",
        "bingo",
        "bio",
        "biz",
        "bj",
        "bl",
        "black",
        "blackfriday",
        "blanco",
        "blockbuster",
        "blog",
        "bloomberg",
        "blue",
        "bm",
        "bms",
        "bmw",
        "bn",
        "bnl",
        "bnpparibas",
        "bo",
        "boats",
        "boehringer",
        "bofa",
        "bom",
        "bond",
        "boo",
        "book",
        "booking",
        "boots",
        "bosch",
        "bostik",
        "boston",
        "bot",
        "boutique",
        "box",
        "bq",
        "br",
        "bradesco",
        "bridgestone",
        "broadway",
        "broker",
        "brother",
        "brussels",
        "bs",
        "bt",
        "budapest",
        "bugatti",
        "build",
        "builders",
        "business",
        "buy",
        "buzz",
        "bv",
        "bw",
        "by",
        "bz",
        "bzh",
        "ca",
        "cab",
        "cafe",
        "cal",
        "call",
        "calvinklein",
        "cam",
        "camera",
        "camp",
        "cancerresearch",
        "canon",
        "capetown",
        "capital",
        "capitalone",
        "car",
        "caravan",
        "cards",
        "care",
        "career",
        "careers",
        "cars",
        "cartier",
        "casa",
        "case",
        "caseih",
        "cash",
        "casino",
        "cat",
        "catering",
        "catholic",
        "cba",
        "cbn",
        "cbre",
        "cbs",
        "cc",
        "cd",
        "ceb",
        "center",
        "ceo",
        "cern",
        "cf",
        "cfa",
        "cfd",
        "cg",
        "ch",
        "chanel",
        "channel",
        "charity",
        "chase",
        "chat",
        "cheap",
        "chintai",
        "chloe",
        "christmas",
        "chrome",
        "chrysler",
        "church",
        "ci",
        "cipriani",
        "circle",
        "cisco",
        "citadel",
        "citi",
        "citic",
        "city",
        "cityeats",
        "ck",
        "cl",
        "claims",
        "cleaning",
        "click",
        "clinic",
        "clinique",
        "clothing",
        "cloud",
        "club",
        "clubmed",
        "cm",
        "cn",
        "co",
        "coach",
        "codes",
        "coffee",
        "college",
        "cologne",
        "com",
        "comcast",
        "commbank",
        "community",
        "company",
        "compare",
        "computer",
        "comsec",
        "condos",
        "construction",
        "consulting",
        "contact",
        "contractors",
        "cooking",
        "cookingchannel",
        "cool",
        "coop",
        "corsica",
        "country",
        "coupon",
        "coupons",
        "courses",
        "cr",
        "credit",
        "creditcard",
        "creditunion",
        "cricket",
        "crown",
        "crs",
        "cruise",
        "cruises",
        "csc",
        "cu",
        "cuisinella",
        "cv",
        "cw",
        "cx",
        "cy",
        "cymru",
        "cyou",
        "cz",
        "dabur",
        "dad",
        "dance",
        "data",
        "date",
        "dating",
        "datsun",
        "day",
        "dclk",
        "dds",
        "de",
        "deal",
        "dealer",
        "deals",
        "degree",
        "delivery",
        "dell",
        "deloitte",
        "delta",
        "democrat",
        "dental",
        "dentist",
        "desi",
        "design",
        "dev",
        "dhl",
        "diamonds",
        "diet",
        "digital",
        "direct",
        "directory",
        "discount",
        "discover",
        "dish",
        "diy",
        "dj",
        "dk",
        "dm",
        "dnp",
        "do",
        "docs",
        "doctor",
        "dodge",
        "dog",
        "doha",
        "domains",
        "doosan",
        "dot",
        "download",
        "drive",
        "dtv",
        "dubai",
        "duck",
        "dunlop",
        "duns",
        "dupont",
        "durban",
        "dvag",
        "dvr",
        "dz",
        "earth",
        "eat",
        "ec",
        "eco",
        "edeka",
        "edu",
        "education",
        "ee",
        "eg",
        "eh",
        "email",
        "emerck",
        "energy",
        "engineer",
        "engineering",
        "enterprises",
        "epost",
        "epson",
        "equipment",
        "er",
        "ericsson",
        "erni",
        "es",
        "esq",
        "estate",
        "esurance",
        "et",
        "etisalat",
        "eu",
        "eurovision",
        "eus",
        "events",
        "everbank",
        "exchange",
        "expert",
        "exposed",
        "express",
        "extraspace",
        "fage",
        "fail",
        "fairwinds",
        "faith",
        "family",
        "fan",
        "fans",
        "farm",
        "farmers",
        "fashion",
        "fast",
        "fedex",
        "feedback",
        "ferrari",
        "ferrero",
        "fi",
        "fiat",
        "fidelity",
        "fido",
        "film",
        "final",
        "finance",
        "financial",
        "fire",
        "firestone",
        "firmdale",
        "fish",
        "fishing",
        "fit",
        "fitness",
        "fj",
        "fk",
        "flickr",
        "flights",
        "flir",
        "florist",
        "flowers",
        "flsmidth",
        "fly",
        "fm",
        "fo",
        "foo",
        "food",
        "foodnetwork",
        "football",
        "ford",
        "forex",
        "forsale",
        "forum",
        "foundation",
        "fox",
        "fr",
        "free",
        "fresenius",
        "frl",
        "frogans",
        "frontdoor",
        "frontier",
        "ftr",
        "fujitsu",
        "fujixerox",
        "fun",
        "fund",
        "furniture",
        "futbol",
        "fyi",
        "ga",
        "gal",
        "gallery",
        "gallo",
        "gallup",
        "game",
        "games",
        "gap",
        "garden",
        "gb",
        "gbiz",
        "gd",
        "gdn",
        "ge",
        "gea",
        "gent",
        "genting",
        "george",
        "gf",
        "gg",
        "ggee",
        "gh",
        "gi",
        "gift",
        "gifts",
        "gives",
        "giving",
        "gl",
        "glade",
        "glass",
        "gle",
        "global",
        "globo",
        "gm",
        "gmail",
        "gmbh",
        "gmo",
        "gmx",
        "gn",
        "godaddy",
        "gold",
        "goldpoint",
        "golf",
        "goo",
        "goodhands",
        "goodyear",
        "goog",
        "google",
        "gop",
        "got",
        "gov",
        "gp",
        "gq",
        "gr",
        "grainger",
        "graphics",
        "gratis",
        "green",
        "gripe",
        "grocery",
        "group",
        "gs",
        "gt",
        "gu",
        "guardian",
        "gucci",
        "guge",
        "guide",
        "guitars",
        "guru",
        "gw",
        "gy",
        "hair",
        "hamburg",
        "hangout",
        "haus",
        "hbo",
        "hdfc",
        "hdfcbank",
        "health",
        "healthcare",
        "help",
        "helsinki",
        "here",
        "hermes",
        "hgtv",
        "hiphop",
        "hisamitsu",
        "hitachi",
        "hiv",
        "hk",
        "hkt",
        "hm",
        "hn",
        "hockey",
        "holdings",
        "holiday",
        "homedepot",
        "homegoods",
        "homes",
        "homesense",
        "honda",
        "honeywell",
        "horse",
        "hospital",
        "host",
        "hosting",
        "hot",
        "hoteles",
        "hotels",
        "hotmail",
        "house",
        "how",
        "hr",
        "hsbc",
        "ht",
        "htc",
        "hu",
        "hughes",
        "hyatt",
        "hyundai",
        "ibm",
        "icbc",
        "ice",
        "icu",
        "id",
        "ie",
        "ieee",
        "ifm",
        "iinet",
        "ikano",
        "il",
        "im",
        "imamat",
        "imdb",
        "immo",
        "immobilien",
        "in",
        "industries",
        "infiniti",
        "info",
        "ing",
        "ink",
        "institute",
        "insurance",
        "insure",
        "int",
        "intel",
        "international",
        "intuit",
        "investments",
        "io",
        "ipiranga",
        "iq",
        "ir",
        "irish",
        "is",
        "iselect",
        "ismaili",
        "ist",
        "istanbul",
        "it",
        "itau",
        "itv",
        "iveco",
        "iwc",
        "jaguar",
        "java",
        "jcb",
        "jcp",
        "je",
        "jeep",
        "jetzt",
        "jewelry",
        "jio",
        "jlc",
        "jll",
        "jm",
        "jmp",
        "jnj",
        "jo",
        "jobs",
        "joburg",
        "jot",
        "joy",
        "jp",
        "jpmorgan",
        "jprs",
        "juegos",
        "juniper",
        "kaufen",
        "kddi",
        "ke",
        "kerryhotels",
        "kerrylogistics",
        "kerryproperties",
        "kfh",
        "kg",
        "kh",
        "ki",
        "kia",
        "kim",
        "kinder",
        "kindle",
        "kitchen",
        "kiwi",
        "km",
        "kn",
        "koeln",
        "komatsu",
        "kosher",
        "kp",
        "kpmg",
        "kpn",
        "kr",
        "krd",
        "kred",
        "kuokgroup",
        "kw",
        "ky",
        "kyoto",
        "kz",
        "la",
        "lacaixa",
        "ladbrokes",
        "lamborghini",
        "lamer",
        "lancaster",
        "lancia",
        "lancome",
        "land",
        "landrover",
        "lanxess",
        "lasalle",
        "lat",
        "latino",
        "latrobe",
        "law",
        "lawyer",
        "lb",
        "lc",
        "lds",
        "lease",
        "leclerc",
        "lefrak",
        "legal",
        "lego",
        "lexus",
        "lgbt",
        "li",
        "liaison",
        "lidl",
        "life",
        "lifeinsurance",
        "lifestyle",
        "lighting",
        "like",
        "lilly",
        "limited",
        "limo",
        "lincoln",
        "linde",
        "link",
        "lipsy",
        "live",
        "living",
        "lixil",
        "lk",
        "llc",
        "loan",
        "loans",
        "locker",
        "locus",
        "loft",
        "lol",
        "london",
        "lotte",
        "lotto",
        "love",
        "lpl",
        "lplfinancial",
        "lr",
        "ls",
        "lt",
        "ltd",
        "ltda",
        "lu",
        "lundbeck",
        "lupin",
        "luxe",
        "luxury",
        "lv",
        "ly",
        "ma",
        "macys",
        "madrid",
        "maif",
        "maison",
        "makeup",
        "man",
        "management",
        "mango",
        "map",
        "market",
        "marketing",
        "markets",
        "marriott",
        "marshalls",
        "maserati",
        "mattel",
        "mba",
        "mc",
        "mcd",
        "mcdonalds",
        "mckinsey",
        "md",
        "me",
        "med",
        "media",
        "meet",
        "melbourne",
        "meme",
        "memorial",
        "men",
        "menu",
        "meo",
        "merckmsd",
        "metlife",
        "mf",
        "mg",
        "mh",
        "miami",
        "microsoft",
        "mil",
        "mini",
        "mint",
        "mit",
        "mitsubishi",
        "mk",
        "ml",
        "mlb",
        "mls",
        "mm",
        "mma",
        "mn",
        "mo",
        "mobi",
        "mobile",
        "mobily",
        "moda",
        "moe",
        "moi",
        "mom",
        "monash",
        "money",
        "monster",
        "montblanc",
        "mopar",
        "mormon",
        "mortgage",
        "moscow",
        "moto",
        "motorcycles",
        "mov",
        "movie",
        "movistar",
        "mp",
        "mq",
        "mr",
        "ms",
        "msd",
        "mt",
        "mtn",
        "mtpc",
        "mtr",
        "mu",
        "museum",
        "mutual",
        "mutuelle",
        "mv",
        "mw",
        "mx",
        "my",
        "mz",
        "na",
        "nab",
        "nadex",
        "nagoya",
        "name",
        "nationwide",
        "natura",
        "navy",
        "nba",
        "nc",
        "ne",
        "nec",
        "net",
        "netbank",
        "netflix",
        "network",
        "neustar",
        "new",
        "newholland",
        "news",
        "next",
        "nextdirect",
        "nexus",
        "nf",
        "nfl",
        "ng",
        "ngo",
        "nhk",
        "ni",
        "nico",
        "nike",
        "nikon",
        "ninja",
        "nissan",
        "nissay",
        "nl",
        "no",
        "nokia",
        "northwesternmutual",
        "norton",
        "now",
        "nowruz",
        "nowtv",
        "np",
        "nr",
        "nra",
        "nrw",
        "ntt",
        "nu",
        "nyc",
        "nz",
        "obi",
        "observer",
        "off",
        "office",
        "okinawa",
        "olayan",
        "olayangroup",
        "oldnavy",
        "ollo",
        "om",
        "omega",
        "one",
        "ong",
        "onl",
        "online",
        "onyourside",
        "ooo",
        "open",
        "oracle",
        "orange",
        "org",
        "organic",
        "orientexpress",
        "origins",
        "osaka",
        "otsuka",
        "ott",
        "ovh",
        "pa",
        "page",
        "pamperedchef",
        "panasonic",
        "panerai",
        "paris",
        "pars",
        "partners",
        "parts",
        "party",
        "passagens",
        "pay",
        "pccw",
        "pe",
        "pet",
        "pf",
        "pfizer",
        "pg",
        "ph",
        "pharmacy",
        "phd",
        "philips",
        "phone",
        "photo",
        "photography",
        "photos",
        "physio",
        "piaget",
        "pics",
        "pictet",
        "pictures",
        "pid",
        "pin",
        "ping",
        "pink",
        "pioneer",
        "pizza",
        "pk",
        "pl",
        "place",
        "play",
        "playstation",
        "plumbing",
        "plus",
        "pm",
        "pn",
        "pnc",
        "pohl",
        "poker",
        "politie",
        "porn",
        "post",
        "pr",
        "pramerica",
        "praxi",
        "press",
        "prime",
        "pro",
        "prod",
        "productions",
        "prof",
        "progressive",
        "promo",
        "properties",
        "property",
        "protection",
        "pru",
        "prudential",
        "ps",
        "pt",
        "pub",
        "pw",
        "pwc",
        "py",
        "qa",
        "qpon",
        "quebec",
        "quest",
        "qvc",
        "racing",
        "radio",
        "raid",
        "re",
        "read",
        "realestate",
        "realtor",
        "realty",
        "recipes",
        "red",
        "redstone",
        "redumbrella",
        "rehab",
        "reise",
        "reisen",
        "reit",
        "reliance",
        "ren",
        "rent",
        "rentals",
        "repair",
        "report",
        "republican",
        "rest",
        "restaurant",
        "review",
        "reviews",
        "rexroth",
        "rich",
        "richardli",
        "ricoh",
        "rightathome",
        "ril",
        "rio",
        "rip",
        "rmit",
        "ro",
        "rocher",
        "rocks",
        "rodeo",
        "rogers",
        "room",
        "rs",
        "rsvp",
        "ru",
        "rugby",
        "ruhr",
        "run",
        "rw",
        "rwe",
        "ryukyu",
        "sa",
        "saarland",
        "safe",
        "safety",
        "sakura",
        "sale",
        "salon",
        "samsclub",
        "samsung",
        "sandvik",
        "sandvikcoromant",
        "sanofi",
        "sap",
        "sapo",
        "sarl",
        "sas",
        "save",
        "saxo",
        "sb",
        "sbi",
        "sbs",
        "sc",
        "sca",
        "scb",
        "schaeffler",
        "schmidt",
        "scholarships",
        "school",
        "schule",
        "schwarz",
        "science",
        "scjohnson",
        "scor",
        "scot",
        "sd",
        "se",
        "search",
        "seat",
        "secure",
        "security",
        "seek",
        "select",
        "sener",
        "services",
        "ses",
        "seven",
        "sew",
        "sex",
        "sexy",
        "sfr",
        "sg",
        "sh",
        "shangrila",
        "sharp",
        "shaw",
        "shell",
        "shia",
        "shiksha",
        "shoes",
        "shop",
        "shopping",
        "shouji",
        "show",
        "showtime",
        "shriram",
        "si",
        "silk",
        "sina",
        "singles",
        "site",
        "sj",
        "sk",
        "ski",
        "skin",
        "sky",
        "skype",
        "sl",
        "sling",
        "sm",
        "smart",
        "smile",
        "sn",
        "sncf",
        "so",
        "soccer",
        "social",
        "softbank",
        "software",
        "sohu",
        "solar",
        "solutions",
        "song",
        "sony",
        "soy",
        "space",
        "spiegel",
        "sport",
        "spot",
        "spreadbetting",
        "sr",
        "srl",
        "srt",
        "ss",
        "st",
        "stada",
        "staples",
        "star",
        "starhub",
        "statebank",
        "statefarm",
        "statoil",
        "stc",
        "stcgroup",
        "stockholm",
        "storage",
        "store",
        "stream",
        "studio",
        "study",
        "style",
        "su",
        "sucks",
        "supplies",
        "supply",
        "support",
        "surf",
        "surgery",
        "suzuki",
        "sv",
        "swatch",
        "swiftcover",
        "swiss",
        "sx",
        "sy",
        "sydney",
        "symantec",
        "systems",
        "sz",
        "tab",
        "taipei",
        "talk",
        "taobao",
        "target",
        "tatamotors",
        "tatar",
        "tattoo",
        "tax",
        "taxi",
        "tc",
        "tci",
        "td",
        "tdk",
        "team",
        "tech",
        "technology",
        "tel",
        "telecity",
        "telefonica",
        "temasek",
        "tennis",
        "teva",
        "tf",
        "tg",
        "th",
        "thd",
        "theater",
        "theatre",
        "tiaa",
        "tickets",
        "tienda",
        "tiffany",
        "tips",
        "tires",
        "tirol",
        "tj",
        "tjmaxx",
        "tjx",
        "tk",
        "tkmaxx",
        "tl",
        "tm",
        "tmall",
        "tn",
        "to",
        "today",
        "tokyo",
        "tools",
        "top",
        "toray",
        "toshiba",
        "total",
        "tours",
        "town",
        "toyota",
        "toys",
        "tp",
        "tr",
        "trade",
        "trading",
        "training",
        "travel",
        "travelchannel",
        "travelers",
        "travelersinsurance",
        "trust",
        "trv",
        "tt",
        "tube",
        "tui",
        "tunes",
        "tushu",
        "tv",
        "tvs",
        "tw",
        "tz",
        "ua",
        "ubank",
        "ubs",
        "uconnect",
        "ug",
        "uk",
        "um",
        "unicom",
        "university",
        "uno",
        "uol",
        "ups",
        "us",
        "uy",
        "uz",
        "va",
        "vacations",
        "vana",
        "vanguard",
        "vc",
        "ve",
        "vegas",
        "ventures",
        "verisign",
        "versicherung",
        "vet",
        "vg",
        "vi",
        "viajes",
        "video",
        "vig",
        "viking",
        "villas",
        "vin",
        "vip",
        "virgin",
        "visa",
        "vision",
        "vista",
        "vistaprint",
        "viva",
        "vivo",
        "vlaanderen",
        "vn",
        "vodka",
        "volkswagen",
        "volvo",
        "vote",
        "voting",
        "voto",
        "voyage",
        "vu",
        "vuelos",
        "wales",
        "walmart",
        "walter",
        "wang",
        "wanggou",
        "warman",
        "watch",
        "watches",
        "weather",
        "weatherchannel",
        "webcam",
        "weber",
        "website",
        "wed",
        "wedding",
        "weibo",
        "weir",
        "wf",
        "whoswho",
        "wien",
        "wiki",
        "williamhill",
        "win",
        "windows",
        "wine",
        "winners",
        "wme",
        "wolterskluwer",
        "woodside",
        "work",
        "works",
        "world",
        "wow",
        "ws",
        "wtc",
        "wtf",
        "xbox",
        "xerox",
        "xfinity",
        "xihuan",
        "xin",
        "\u6D4B\u8BD5",
        "\u0915\u0949\u092E",
        "\u092A\u0930\u0940\u0915\u094D\u0937\u093E",
        "\u30BB\u30FC\u30EB",
        "\u4F5B\u5C71",
        "\u0CAD\u0CBE\u0CB0\u0CA4",
        "\u6148\u5584",
        "\u96C6\u56E2",
        "\u5728\u7EBF",
        "\uD55C\uAD6D",
        "\u0B2D\u0B3E\u0B30\u0B24",
        "\u5927\u4F17\u6C7D\u8F66",
        "\u70B9\u770B",
        "\u0E04\u0E2D\u0E21",
        "\u09AD\u09BE\u09F0\u09A4",
        "\u09AD\u09BE\u09B0\u09A4",
        "\u516B\u5366",
        "\u200F\u0645\u0648\u0642\u0639\u200E",
        "\u09AC\u09BE\u0982\u09B2\u09BE",
        "\u516C\u76CA",
        "\u516C\u53F8",
        "\u9999\u683C\u91CC\u62C9",
        "\u7F51\u7AD9",
        "\u79FB\u52A8",
        "\u6211\u7231\u4F60",
        "\u043C\u043E\u0441\u043A\u0432\u0430",
        "\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435",
        "\u049B\u0430\u0437",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
        "\u043E\u043D\u043B\u0430\u0439\u043D",
        "\u0441\u0430\u0439\u0442",
        "\u8054\u901A",
        "\u0441\u0440\u0431",
        "\u0431\u0433",
        "\u0431\u0435\u043B",
        "\u200F\u05E7\u05D5\u05DD\u200E",
        "\u65F6\u5C1A",
        "\u5FAE\u535A",
        "\uD14C\uC2A4\uD2B8",
        "\u6DE1\u9A6C\u9521",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
        "\u043E\u0440\u0433",
        "\u0928\u0947\u091F",
        "\u30B9\u30C8\u30A2",
        "\uC0BC\uC131",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
        "\u5546\u6807",
        "\u5546\u5E97",
        "\u5546\u57CE",
        "\u0434\u0435\u0442\u0438",
        "\u043C\u043A\u0434",
        "\u200F\u05D8\u05E2\u05E1\u05D8\u200E",
        "\u0435\u044E",
        "\u30DD\u30A4\u30F3\u30C8",
        "\u65B0\u95FB",
        "\u5DE5\u884C",
        "\u5BB6\u96FB",
        "\u200F\u0643\u0648\u0645\u200E",
        "\u4E2D\u6587\u7F51",
        "\u4E2D\u4FE1",
        "\u4E2D\u56FD",
        "\u4E2D\u570B",
        "\u5A31\u4E50",
        "\u8C37\u6B4C",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
        "\u0DBD\u0D82\u0D9A\u0DCF",
        "\u96FB\u8A0A\u76C8\u79D1",
        "\u8D2D\u7269",
        "\u6E2C\u8A66",
        "\u30AF\u30E9\u30A6\u30C9",
        "\u0AAD\u0ABE\u0AB0\u0AA4",
        "\u901A\u8CA9",
        "\u092D\u093E\u0930\u0924\u092E\u094D",
        "\u092D\u093E\u0930\u0924",
        "\u092D\u093E\u0930\u094B\u0924",
        "\u200F\u0622\u0632\u0645\u0627\u06CC\u0634\u06CC\u200E",
        "\u0BAA\u0BB0\u0BBF\u0B9F\u0BCD\u0B9A\u0BC8",
        "\u7F51\u5E97",
        "\u0938\u0902\u0917\u0920\u0928",
        "\u9910\u5385",
        "\u7F51\u7EDC",
        "\u043A\u043E\u043C",
        "\u0443\u043A\u0440",
        "\u9999\u6E2F",
        "\u8BFA\u57FA\u4E9A",
        "\u98DF\u54C1",
        "\u03B4\u03BF\u03BA\u03B9\u03BC\u03AE",
        "\u98DE\u5229\u6D66",
        "\u200F\u0625\u062E\u062A\u0628\u0627\u0631\u200E",
        "\u53F0\u6E7E",
        "\u53F0\u7063",
        "\u624B\u8868",
        "\u624B\u673A",
        "\u043C\u043E\u043D",
        "\u200F\u0627\u0644\u062C\u0632\u0627\u0626\u0631\u200E",
        "\u200F\u0639\u0645\u0627\u0646\u200E",
        "\u200F\u0627\u0631\u0627\u0645\u0643\u0648\u200E",
        "\u200F\u0627\u06CC\u0631\u0627\u0646\u200E",
        "\u200F\u0627\u0644\u0639\u0644\u064A\u0627\u0646\u200E",
        "\u200F\u0627\u062A\u0635\u0627\u0644\u0627\u062A\u200E",
        "\u200F\u0627\u0645\u0627\u0631\u0627\u062A\u200E",
        "\u200F\u0628\u0627\u0632\u0627\u0631\u200E",
        "\u200F\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627\u200E",
        "\u200F\u067E\u0627\u06A9\u0633\u062A\u0627\u0646\u200E",
        "\u200F\u0627\u0644\u0627\u0631\u062F\u0646\u200E",
        "\u200F\u0645\u0648\u0628\u0627\u064A\u0644\u064A\u200E",
        "\u200F\u0628\u0627\u0631\u062A\u200E",
        "\u200F\u0628\u06BE\u0627\u0631\u062A\u200E",
        "\u200F\u0627\u0644\u0645\u063A\u0631\u0628\u200E",
        "\u200F\u0627\u0628\u0648\u0638\u0628\u064A\u200E",
        "\u200F\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629\u200E",
        "\u200F\u0680\u0627\u0631\u062A\u200E",
        "\u200F\u0643\u0627\u062B\u0648\u0644\u064A\u0643\u200E",
        "\u200F\u0633\u0648\u062F\u0627\u0646\u200E",
        "\u200F\u0647\u0645\u0631\u0627\u0647\u200E",
        "\u200F\u0639\u0631\u0627\u0642\u200E",
        "\u200F\u0645\u0644\u064A\u0633\u064A\u0627\u200E",
        "\u6FB3\u9580",
        "\uB2F7\uCEF4",
        "\u653F\u5E9C",
        "\u200F\u0634\u0628\u0643\u0629\u200E",
        "\u200F\u0628\u064A\u062A\u0643\u200E",
        "\u200F\u0639\u0631\u0628\u200E",
        "\u10D2\u10D4",
        "\u673A\u6784",
        "\u7EC4\u7EC7\u673A\u6784",
        "\u5065\u5EB7",
        "\u0E44\u0E17\u0E22",
        "\u200F\u0633\u0648\u0631\u064A\u0629\u200E",
        "\u62DB\u8058",
        "\u0440\u0443\u0441",
        "\u0440\u0444",
        "\u73E0\u5B9D",
        "\u200F\u062A\u0648\u0646\u0633\u200E",
        "\u5927\u62FF",
        "\u307F\u3093\u306A",
        "\u30B0\u30FC\u30B0\u30EB",
        "\u03B5\u03BB",
        "\u4E16\u754C",
        "\u66F8\u7C4D",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
        "\u0A2D\u0A3E\u0A30\u0A24",
        "\u7F51\u5740",
        "\uB2F7\uB137",
        "\u30B3\u30E0",
        "\u5929\u4E3B\u6559",
        "\u6E38\u620F",
        "verm\xF6gensberater",
        "verm\xF6gensberatung",
        "\u4F01\u4E1A",
        "\u4FE1\u606F",
        "\u5609\u91CC\u5927\u9152\u5E97",
        "\u5609\u91CC",
        "\u200F\u0645\u0635\u0631\u200E",
        "\u200F\u0642\u0637\u0631\u200E",
        "\u5E7F\u4E1C",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
        "\u0570\u0561\u0575",
        "\u65B0\u52A0\u5761",
        "\u200F\u0641\u0644\u0633\u0637\u064A\u0646\u200E",
        "\u30C6\u30B9\u30C8",
        "\u653F\u52A1",
        "xperia",
        "xxx",
        "xyz",
        "yachts",
        "yahoo",
        "yamaxun",
        "yandex",
        "ye",
        "yodobashi",
        "yoga",
        "yokohama",
        "you",
        "youtube",
        "yt",
        "yun",
        "za",
        "zappos",
        "zara",
        "zero",
        "zip",
        "zippo",
        "zm",
        "zone",
        "zuerich",
        "zw",
      ];
    },
  });

  // node_modules/@lumeweb/tld-enum/formats/js/tld-enum/type.js
  var require_type = __commonJS({
    "node_modules/@lumeweb/tld-enum/formats/js/tld-enum/type.js"(
      exports,
      module
    ) {
      module.exports = {
        aaa: "generic",
        aarp: "generic",
        abarth: "generic",
        abb: "generic",
        abbott: "generic",
        abbvie: "generic",
        abc: "generic",
        able: "generic",
        abogado: "generic",
        abudhabi: "generic",
        ac: "country-code",
        academy: "generic",
        accenture: "generic",
        accountant: "generic",
        accountants: "generic",
        aco: "generic",
        active: "generic",
        actor: "generic",
        ad: "country-code",
        adac: "generic",
        ads: "generic",
        adult: "generic",
        ae: "country-code",
        aeg: "generic",
        aero: "sponsored",
        aetna: "generic",
        af: "country-code",
        afamilycompany: "generic",
        afl: "generic",
        africa: "generic",
        ag: "country-code",
        agakhan: "generic",
        agency: "generic",
        ai: "country-code",
        aig: "generic",
        aigo: "generic",
        airbus: "generic",
        airforce: "generic",
        airtel: "generic",
        akdn: "generic",
        al: "country-code",
        alfaromeo: "generic",
        alibaba: "generic",
        alipay: "generic",
        allfinanz: "generic",
        allstate: "generic",
        ally: "generic",
        alsace: "generic",
        alstom: "generic",
        am: "country-code",
        americanexpress: "generic",
        americanfamily: "generic",
        amex: "generic",
        amfam: "generic",
        amica: "generic",
        amsterdam: "generic",
        an: "country-code",
        analytics: "generic",
        android: "generic",
        anquan: "generic",
        anz: "generic",
        ao: "country-code",
        aol: "generic",
        apartments: "generic",
        app: "generic",
        apple: "generic",
        aq: "country-code",
        aquarelle: "generic",
        ar: "country-code",
        arab: "generic",
        aramco: "generic",
        archi: "generic",
        army: "generic",
        arpa: "infrastructure",
        art: "generic",
        arte: "generic",
        as: "country-code",
        asda: "generic",
        asia: "sponsored",
        associates: "generic",
        at: "country-code",
        athleta: "generic",
        attorney: "generic",
        au: "country-code",
        auction: "generic",
        audi: "generic",
        audible: "generic",
        audio: "generic",
        auspost: "generic",
        author: "generic",
        auto: "generic",
        autos: "generic",
        avianca: "generic",
        aw: "country-code",
        aws: "generic",
        ax: "country-code",
        axa: "generic",
        az: "country-code",
        azure: "generic",
        ba: "country-code",
        baby: "generic",
        baidu: "generic",
        banamex: "generic",
        bananarepublic: "generic",
        band: "generic",
        bank: "generic",
        bar: "generic",
        barcelona: "generic",
        barclaycard: "generic",
        barclays: "generic",
        barefoot: "generic",
        bargains: "generic",
        baseball: "generic",
        basketball: "generic",
        bauhaus: "generic",
        bayern: "generic",
        bb: "country-code",
        bbc: "generic",
        bbt: "generic",
        bbva: "generic",
        bcg: "generic",
        bcn: "generic",
        bd: "country-code",
        be: "country-code",
        beats: "generic",
        beauty: "generic",
        beer: "generic",
        bentley: "generic",
        berlin: "generic",
        best: "generic",
        bestbuy: "generic",
        bet: "generic",
        bf: "country-code",
        bg: "country-code",
        bh: "country-code",
        bharti: "generic",
        bi: "country-code",
        bible: "generic",
        bid: "generic",
        bike: "generic",
        bing: "generic",
        bingo: "generic",
        bio: "generic",
        biz: "generic-restricted",
        bj: "country-code",
        bl: "country-code",
        black: "generic",
        blackfriday: "generic",
        blanco: "generic",
        blockbuster: "generic",
        blog: "generic",
        bloomberg: "generic",
        blue: "generic",
        bm: "country-code",
        bms: "generic",
        bmw: "generic",
        bn: "country-code",
        bnl: "generic",
        bnpparibas: "generic",
        bo: "country-code",
        boats: "generic",
        boehringer: "generic",
        bofa: "generic",
        bom: "generic",
        bond: "generic",
        boo: "generic",
        book: "generic",
        booking: "generic",
        boots: "generic",
        bosch: "generic",
        bostik: "generic",
        boston: "generic",
        bot: "generic",
        boutique: "generic",
        box: "generic",
        bq: "country-code",
        br: "country-code",
        bradesco: "generic",
        bridgestone: "generic",
        broadway: "generic",
        broker: "generic",
        brother: "generic",
        brussels: "generic",
        bs: "country-code",
        bt: "country-code",
        budapest: "generic",
        bugatti: "generic",
        build: "generic",
        builders: "generic",
        business: "generic",
        buy: "generic",
        buzz: "generic",
        bv: "country-code",
        bw: "country-code",
        by: "country-code",
        bz: "country-code",
        bzh: "generic",
        ca: "country-code",
        cab: "generic",
        cafe: "generic",
        cal: "generic",
        call: "generic",
        calvinklein: "generic",
        cam: "generic",
        camera: "generic",
        camp: "generic",
        cancerresearch: "generic",
        canon: "generic",
        capetown: "generic",
        capital: "generic",
        capitalone: "generic",
        car: "generic",
        caravan: "generic",
        cards: "generic",
        care: "generic",
        career: "generic",
        careers: "generic",
        cars: "generic",
        cartier: "generic",
        casa: "generic",
        case: "generic",
        caseih: "generic",
        cash: "generic",
        casino: "generic",
        cat: "sponsored",
        catering: "generic",
        catholic: "generic",
        cba: "generic",
        cbn: "generic",
        cbre: "generic",
        cbs: "generic",
        cc: "country-code",
        cd: "country-code",
        ceb: "generic",
        center: "generic",
        ceo: "generic",
        cern: "generic",
        cf: "country-code",
        cfa: "generic",
        cfd: "generic",
        cg: "country-code",
        ch: "country-code",
        chanel: "generic",
        channel: "generic",
        charity: "generic",
        chase: "generic",
        chat: "generic",
        cheap: "generic",
        chintai: "generic",
        chloe: "generic",
        christmas: "generic",
        chrome: "generic",
        chrysler: "generic",
        church: "generic",
        ci: "country-code",
        cipriani: "generic",
        circle: "generic",
        cisco: "generic",
        citadel: "generic",
        citi: "generic",
        citic: "generic",
        city: "generic",
        cityeats: "generic",
        ck: "country-code",
        cl: "country-code",
        claims: "generic",
        cleaning: "generic",
        click: "generic",
        clinic: "generic",
        clinique: "generic",
        clothing: "generic",
        cloud: "generic",
        club: "generic",
        clubmed: "generic",
        cm: "country-code",
        cn: "country-code",
        co: "country-code",
        coach: "generic",
        codes: "generic",
        coffee: "generic",
        college: "generic",
        cologne: "generic",
        com: "generic",
        comcast: "generic",
        commbank: "generic",
        community: "generic",
        company: "generic",
        compare: "generic",
        computer: "generic",
        comsec: "generic",
        condos: "generic",
        construction: "generic",
        consulting: "generic",
        contact: "generic",
        contractors: "generic",
        cooking: "generic",
        cookingchannel: "generic",
        cool: "generic",
        coop: "sponsored",
        corsica: "generic",
        country: "generic",
        coupon: "generic",
        coupons: "generic",
        courses: "generic",
        cr: "country-code",
        credit: "generic",
        creditcard: "generic",
        creditunion: "generic",
        cricket: "generic",
        crown: "generic",
        crs: "generic",
        cruise: "generic",
        cruises: "generic",
        csc: "generic",
        cu: "country-code",
        cuisinella: "generic",
        cv: "country-code",
        cw: "country-code",
        cx: "country-code",
        cy: "country-code",
        cymru: "generic",
        cyou: "generic",
        cz: "country-code",
        dabur: "generic",
        dad: "generic",
        dance: "generic",
        data: "generic",
        date: "generic",
        dating: "generic",
        datsun: "generic",
        day: "generic",
        dclk: "generic",
        dds: "generic",
        de: "country-code",
        deal: "generic",
        dealer: "generic",
        deals: "generic",
        degree: "generic",
        delivery: "generic",
        dell: "generic",
        deloitte: "generic",
        delta: "generic",
        democrat: "generic",
        dental: "generic",
        dentist: "generic",
        desi: "generic",
        design: "generic",
        dev: "generic",
        dhl: "generic",
        diamonds: "generic",
        diet: "generic",
        digital: "generic",
        direct: "generic",
        directory: "generic",
        discount: "generic",
        discover: "generic",
        dish: "generic",
        diy: "generic",
        dj: "country-code",
        dk: "country-code",
        dm: "country-code",
        dnp: "generic",
        do: "country-code",
        docs: "generic",
        doctor: "generic",
        dodge: "generic",
        dog: "generic",
        doha: "generic",
        domains: "generic",
        doosan: "generic",
        dot: "generic",
        download: "generic",
        drive: "generic",
        dtv: "generic",
        dubai: "generic",
        duck: "generic",
        dunlop: "generic",
        duns: "generic",
        dupont: "generic",
        durban: "generic",
        dvag: "generic",
        dvr: "generic",
        dz: "country-code",
        earth: "generic",
        eat: "generic",
        ec: "country-code",
        eco: "generic",
        edeka: "generic",
        edu: "sponsored",
        education: "generic",
        ee: "country-code",
        eg: "country-code",
        eh: "country-code",
        email: "generic",
        emerck: "generic",
        energy: "generic",
        engineer: "generic",
        engineering: "generic",
        enterprises: "generic",
        epost: "generic",
        epson: "generic",
        equipment: "generic",
        er: "country-code",
        ericsson: "generic",
        erni: "generic",
        es: "country-code",
        esq: "generic",
        estate: "generic",
        esurance: "generic",
        et: "country-code",
        etisalat: "generic",
        eu: "country-code",
        eurovision: "generic",
        eus: "generic",
        events: "generic",
        everbank: "generic",
        exchange: "generic",
        expert: "generic",
        exposed: "generic",
        express: "generic",
        extraspace: "generic",
        fage: "generic",
        fail: "generic",
        fairwinds: "generic",
        faith: "generic",
        family: "generic",
        fan: "generic",
        fans: "generic",
        farm: "generic",
        farmers: "generic",
        fashion: "generic",
        fast: "generic",
        fedex: "generic",
        feedback: "generic",
        ferrari: "generic",
        ferrero: "generic",
        fi: "country-code",
        fiat: "generic",
        fidelity: "generic",
        fido: "generic",
        film: "generic",
        final: "generic",
        finance: "generic",
        financial: "generic",
        fire: "generic",
        firestone: "generic",
        firmdale: "generic",
        fish: "generic",
        fishing: "generic",
        fit: "generic",
        fitness: "generic",
        fj: "country-code",
        fk: "country-code",
        flickr: "generic",
        flights: "generic",
        flir: "generic",
        florist: "generic",
        flowers: "generic",
        flsmidth: "generic",
        fly: "generic",
        fm: "country-code",
        fo: "country-code",
        foo: "generic",
        food: "generic",
        foodnetwork: "generic",
        football: "generic",
        ford: "generic",
        forex: "generic",
        forsale: "generic",
        forum: "generic",
        foundation: "generic",
        fox: "generic",
        fr: "country-code",
        free: "generic",
        fresenius: "generic",
        frl: "generic",
        frogans: "generic",
        frontdoor: "generic",
        frontier: "generic",
        ftr: "generic",
        fujitsu: "generic",
        fujixerox: "generic",
        fun: "generic",
        fund: "generic",
        furniture: "generic",
        futbol: "generic",
        fyi: "generic",
        ga: "country-code",
        gal: "generic",
        gallery: "generic",
        gallo: "generic",
        gallup: "generic",
        game: "generic",
        games: "generic",
        gap: "generic",
        garden: "generic",
        gb: "country-code",
        gbiz: "generic",
        gd: "country-code",
        gdn: "generic",
        ge: "country-code",
        gea: "generic",
        gent: "generic",
        genting: "generic",
        george: "generic",
        gf: "country-code",
        gg: "country-code",
        ggee: "generic",
        gh: "country-code",
        gi: "country-code",
        gift: "generic",
        gifts: "generic",
        gives: "generic",
        giving: "generic",
        gl: "country-code",
        glade: "generic",
        glass: "generic",
        gle: "generic",
        global: "generic",
        globo: "generic",
        gm: "country-code",
        gmail: "generic",
        gmbh: "generic",
        gmo: "generic",
        gmx: "generic",
        gn: "country-code",
        godaddy: "generic",
        gold: "generic",
        goldpoint: "generic",
        golf: "generic",
        goo: "generic",
        goodhands: "generic",
        goodyear: "generic",
        goog: "generic",
        google: "generic",
        gop: "generic",
        got: "generic",
        gov: "sponsored",
        gp: "country-code",
        gq: "country-code",
        gr: "country-code",
        grainger: "generic",
        graphics: "generic",
        gratis: "generic",
        green: "generic",
        gripe: "generic",
        grocery: "generic",
        group: "generic",
        gs: "country-code",
        gt: "country-code",
        gu: "country-code",
        guardian: "generic",
        gucci: "generic",
        guge: "generic",
        guide: "generic",
        guitars: "generic",
        guru: "generic",
        gw: "country-code",
        gy: "country-code",
        hair: "generic",
        hamburg: "generic",
        hangout: "generic",
        haus: "generic",
        hbo: "generic",
        hdfc: "generic",
        hdfcbank: "generic",
        health: "generic",
        healthcare: "generic",
        help: "generic",
        helsinki: "generic",
        here: "generic",
        hermes: "generic",
        hgtv: "generic",
        hiphop: "generic",
        hisamitsu: "generic",
        hitachi: "generic",
        hiv: "generic",
        hk: "country-code",
        hkt: "generic",
        hm: "country-code",
        hn: "country-code",
        hockey: "generic",
        holdings: "generic",
        holiday: "generic",
        homedepot: "generic",
        homegoods: "generic",
        homes: "generic",
        homesense: "generic",
        honda: "generic",
        honeywell: "generic",
        horse: "generic",
        hospital: "generic",
        host: "generic",
        hosting: "generic",
        hot: "generic",
        hoteles: "generic",
        hotels: "generic",
        hotmail: "generic",
        house: "generic",
        how: "generic",
        hr: "country-code",
        hsbc: "generic",
        ht: "country-code",
        htc: "generic",
        hu: "country-code",
        hughes: "generic",
        hyatt: "generic",
        hyundai: "generic",
        ibm: "generic",
        icbc: "generic",
        ice: "generic",
        icu: "generic",
        id: "country-code",
        ie: "country-code",
        ieee: "generic",
        ifm: "generic",
        iinet: "generic",
        ikano: "generic",
        il: "country-code",
        im: "country-code",
        imamat: "generic",
        imdb: "generic",
        immo: "generic",
        immobilien: "generic",
        in: "country-code",
        industries: "generic",
        infiniti: "generic",
        info: "generic",
        ing: "generic",
        ink: "generic",
        institute: "generic",
        insurance: "generic",
        insure: "generic",
        int: "sponsored",
        intel: "generic",
        international: "generic",
        intuit: "generic",
        investments: "generic",
        io: "country-code",
        ipiranga: "generic",
        iq: "country-code",
        ir: "country-code",
        irish: "generic",
        is: "country-code",
        iselect: "generic",
        ismaili: "generic",
        ist: "generic",
        istanbul: "generic",
        it: "country-code",
        itau: "generic",
        itv: "generic",
        iveco: "generic",
        iwc: "generic",
        jaguar: "generic",
        java: "generic",
        jcb: "generic",
        jcp: "generic",
        je: "country-code",
        jeep: "generic",
        jetzt: "generic",
        jewelry: "generic",
        jio: "generic",
        jlc: "generic",
        jll: "generic",
        jm: "country-code",
        jmp: "generic",
        jnj: "generic",
        jo: "country-code",
        jobs: "sponsored",
        joburg: "generic",
        jot: "generic",
        joy: "generic",
        jp: "country-code",
        jpmorgan: "generic",
        jprs: "generic",
        juegos: "generic",
        juniper: "generic",
        kaufen: "generic",
        kddi: "generic",
        ke: "country-code",
        kerryhotels: "generic",
        kerrylogistics: "generic",
        kerryproperties: "generic",
        kfh: "generic",
        kg: "country-code",
        kh: "country-code",
        ki: "country-code",
        kia: "generic",
        kim: "generic",
        kinder: "generic",
        kindle: "generic",
        kitchen: "generic",
        kiwi: "generic",
        km: "country-code",
        kn: "country-code",
        koeln: "generic",
        komatsu: "generic",
        kosher: "generic",
        kp: "country-code",
        kpmg: "generic",
        kpn: "generic",
        kr: "country-code",
        krd: "generic",
        kred: "generic",
        kuokgroup: "generic",
        kw: "country-code",
        ky: "country-code",
        kyoto: "generic",
        kz: "country-code",
        la: "country-code",
        lacaixa: "generic",
        ladbrokes: "generic",
        lamborghini: "generic",
        lamer: "generic",
        lancaster: "generic",
        lancia: "generic",
        lancome: "generic",
        land: "generic",
        landrover: "generic",
        lanxess: "generic",
        lasalle: "generic",
        lat: "generic",
        latino: "generic",
        latrobe: "generic",
        law: "generic",
        lawyer: "generic",
        lb: "country-code",
        lc: "country-code",
        lds: "generic",
        lease: "generic",
        leclerc: "generic",
        lefrak: "generic",
        legal: "generic",
        lego: "generic",
        lexus: "generic",
        lgbt: "generic",
        li: "country-code",
        liaison: "generic",
        lidl: "generic",
        life: "generic",
        lifeinsurance: "generic",
        lifestyle: "generic",
        lighting: "generic",
        like: "generic",
        lilly: "generic",
        limited: "generic",
        limo: "generic",
        lincoln: "generic",
        linde: "generic",
        link: "generic",
        lipsy: "generic",
        live: "generic",
        living: "generic",
        lixil: "generic",
        lk: "country-code",
        llc: "generic",
        loan: "generic",
        loans: "generic",
        locker: "generic",
        locus: "generic",
        loft: "generic",
        lol: "generic",
        london: "generic",
        lotte: "generic",
        lotto: "generic",
        love: "generic",
        lpl: "generic",
        lplfinancial: "generic",
        lr: "country-code",
        ls: "country-code",
        lt: "country-code",
        ltd: "generic",
        ltda: "generic",
        lu: "country-code",
        lundbeck: "generic",
        lupin: "generic",
        luxe: "generic",
        luxury: "generic",
        lv: "country-code",
        ly: "country-code",
        ma: "country-code",
        macys: "generic",
        madrid: "generic",
        maif: "generic",
        maison: "generic",
        makeup: "generic",
        man: "generic",
        management: "generic",
        mango: "generic",
        map: "generic",
        market: "generic",
        marketing: "generic",
        markets: "generic",
        marriott: "generic",
        marshalls: "generic",
        maserati: "generic",
        mattel: "generic",
        mba: "generic",
        mc: "country-code",
        mcd: "generic",
        mcdonalds: "generic",
        mckinsey: "generic",
        md: "country-code",
        me: "country-code",
        med: "generic",
        media: "generic",
        meet: "generic",
        melbourne: "generic",
        meme: "generic",
        memorial: "generic",
        men: "generic",
        menu: "generic",
        meo: "generic",
        merckmsd: "generic",
        metlife: "generic",
        mf: "country-code",
        mg: "country-code",
        mh: "country-code",
        miami: "generic",
        microsoft: "generic",
        mil: "sponsored",
        mini: "generic",
        mint: "generic",
        mit: "generic",
        mitsubishi: "generic",
        mk: "country-code",
        ml: "country-code",
        mlb: "generic",
        mls: "generic",
        mm: "country-code",
        mma: "generic",
        mn: "country-code",
        mo: "country-code",
        mobi: "generic",
        mobile: "generic",
        mobily: "generic",
        moda: "generic",
        moe: "generic",
        moi: "generic",
        mom: "generic",
        monash: "generic",
        money: "generic",
        monster: "generic",
        montblanc: "generic",
        mopar: "generic",
        mormon: "generic",
        mortgage: "generic",
        moscow: "generic",
        moto: "generic",
        motorcycles: "generic",
        mov: "generic",
        movie: "generic",
        movistar: "generic",
        mp: "country-code",
        mq: "country-code",
        mr: "country-code",
        ms: "country-code",
        msd: "generic",
        mt: "country-code",
        mtn: "generic",
        mtpc: "generic",
        mtr: "generic",
        mu: "country-code",
        museum: "sponsored",
        mutual: "generic",
        mutuelle: "generic",
        mv: "country-code",
        mw: "country-code",
        mx: "country-code",
        my: "country-code",
        mz: "country-code",
        na: "country-code",
        nab: "generic",
        nadex: "generic",
        nagoya: "generic",
        name: "generic-restricted",
        nationwide: "generic",
        natura: "generic",
        navy: "generic",
        nba: "generic",
        nc: "country-code",
        ne: "country-code",
        nec: "generic",
        net: "generic",
        netbank: "generic",
        netflix: "generic",
        network: "generic",
        neustar: "generic",
        new: "generic",
        newholland: "generic",
        news: "generic",
        next: "generic",
        nextdirect: "generic",
        nexus: "generic",
        nf: "country-code",
        nfl: "generic",
        ng: "country-code",
        ngo: "generic",
        nhk: "generic",
        ni: "country-code",
        nico: "generic",
        nike: "generic",
        nikon: "generic",
        ninja: "generic",
        nissan: "generic",
        nissay: "generic",
        nl: "country-code",
        no: "country-code",
        nokia: "generic",
        northwesternmutual: "generic",
        norton: "generic",
        now: "generic",
        nowruz: "generic",
        nowtv: "generic",
        np: "country-code",
        nr: "country-code",
        nra: "generic",
        nrw: "generic",
        ntt: "generic",
        nu: "country-code",
        nyc: "generic",
        nz: "country-code",
        obi: "generic",
        observer: "generic",
        off: "generic",
        office: "generic",
        okinawa: "generic",
        olayan: "generic",
        olayangroup: "generic",
        oldnavy: "generic",
        ollo: "generic",
        om: "country-code",
        omega: "generic",
        one: "generic",
        ong: "generic",
        onl: "generic",
        online: "generic",
        onyourside: "generic",
        ooo: "generic",
        open: "generic",
        oracle: "generic",
        orange: "generic",
        org: "generic",
        organic: "generic",
        orientexpress: "generic",
        origins: "generic",
        osaka: "generic",
        otsuka: "generic",
        ott: "generic",
        ovh: "generic",
        pa: "country-code",
        page: "generic",
        pamperedchef: "generic",
        panasonic: "generic",
        panerai: "generic",
        paris: "generic",
        pars: "generic",
        partners: "generic",
        parts: "generic",
        party: "generic",
        passagens: "generic",
        pay: "generic",
        pccw: "generic",
        pe: "country-code",
        pet: "generic",
        pf: "country-code",
        pfizer: "generic",
        pg: "country-code",
        ph: "country-code",
        pharmacy: "generic",
        phd: "generic",
        philips: "generic",
        phone: "generic",
        photo: "generic",
        photography: "generic",
        photos: "generic",
        physio: "generic",
        piaget: "generic",
        pics: "generic",
        pictet: "generic",
        pictures: "generic",
        pid: "generic",
        pin: "generic",
        ping: "generic",
        pink: "generic",
        pioneer: "generic",
        pizza: "generic",
        pk: "country-code",
        pl: "country-code",
        place: "generic",
        play: "generic",
        playstation: "generic",
        plumbing: "generic",
        plus: "generic",
        pm: "country-code",
        pn: "country-code",
        pnc: "generic",
        pohl: "generic",
        poker: "generic",
        politie: "generic",
        porn: "generic",
        post: "sponsored",
        pr: "country-code",
        pramerica: "generic",
        praxi: "generic",
        press: "generic",
        prime: "generic",
        pro: "generic-restricted",
        prod: "generic",
        productions: "generic",
        prof: "generic",
        progressive: "generic",
        promo: "generic",
        properties: "generic",
        property: "generic",
        protection: "generic",
        pru: "generic",
        prudential: "generic",
        ps: "country-code",
        pt: "country-code",
        pub: "generic",
        pw: "country-code",
        pwc: "generic",
        py: "country-code",
        qa: "country-code",
        qpon: "generic",
        quebec: "generic",
        quest: "generic",
        qvc: "generic",
        racing: "generic",
        radio: "generic",
        raid: "generic",
        re: "country-code",
        read: "generic",
        realestate: "generic",
        realtor: "generic",
        realty: "generic",
        recipes: "generic",
        red: "generic",
        redstone: "generic",
        redumbrella: "generic",
        rehab: "generic",
        reise: "generic",
        reisen: "generic",
        reit: "generic",
        reliance: "generic",
        ren: "generic",
        rent: "generic",
        rentals: "generic",
        repair: "generic",
        report: "generic",
        republican: "generic",
        rest: "generic",
        restaurant: "generic",
        review: "generic",
        reviews: "generic",
        rexroth: "generic",
        rich: "generic",
        richardli: "generic",
        ricoh: "generic",
        rightathome: "generic",
        ril: "generic",
        rio: "generic",
        rip: "generic",
        rmit: "generic",
        ro: "country-code",
        rocher: "generic",
        rocks: "generic",
        rodeo: "generic",
        rogers: "generic",
        room: "generic",
        rs: "country-code",
        rsvp: "generic",
        ru: "country-code",
        rugby: "generic",
        ruhr: "generic",
        run: "generic",
        rw: "country-code",
        rwe: "generic",
        ryukyu: "generic",
        sa: "country-code",
        saarland: "generic",
        safe: "generic",
        safety: "generic",
        sakura: "generic",
        sale: "generic",
        salon: "generic",
        samsclub: "generic",
        samsung: "generic",
        sandvik: "generic",
        sandvikcoromant: "generic",
        sanofi: "generic",
        sap: "generic",
        sapo: "generic",
        sarl: "generic",
        sas: "generic",
        save: "generic",
        saxo: "generic",
        sb: "country-code",
        sbi: "generic",
        sbs: "generic",
        sc: "country-code",
        sca: "generic",
        scb: "generic",
        schaeffler: "generic",
        schmidt: "generic",
        scholarships: "generic",
        school: "generic",
        schule: "generic",
        schwarz: "generic",
        science: "generic",
        scjohnson: "generic",
        scor: "generic",
        scot: "generic",
        sd: "country-code",
        se: "country-code",
        search: "generic",
        seat: "generic",
        secure: "generic",
        security: "generic",
        seek: "generic",
        select: "generic",
        sener: "generic",
        services: "generic",
        ses: "generic",
        seven: "generic",
        sew: "generic",
        sex: "generic",
        sexy: "generic",
        sfr: "generic",
        sg: "country-code",
        sh: "country-code",
        shangrila: "generic",
        sharp: "generic",
        shaw: "generic",
        shell: "generic",
        shia: "generic",
        shiksha: "generic",
        shoes: "generic",
        shop: "generic",
        shopping: "generic",
        shouji: "generic",
        show: "generic",
        showtime: "generic",
        shriram: "generic",
        si: "country-code",
        silk: "generic",
        sina: "generic",
        singles: "generic",
        site: "generic",
        sj: "country-code",
        sk: "country-code",
        ski: "generic",
        skin: "generic",
        sky: "generic",
        skype: "generic",
        sl: "country-code",
        sling: "generic",
        sm: "country-code",
        smart: "generic",
        smile: "generic",
        sn: "country-code",
        sncf: "generic",
        so: "country-code",
        soccer: "generic",
        social: "generic",
        softbank: "generic",
        software: "generic",
        sohu: "generic",
        solar: "generic",
        solutions: "generic",
        song: "generic",
        sony: "generic",
        soy: "generic",
        space: "generic",
        spiegel: "generic",
        sport: "generic",
        spot: "generic",
        spreadbetting: "generic",
        sr: "country-code",
        srl: "generic",
        srt: "generic",
        ss: "country-code",
        st: "country-code",
        stada: "generic",
        staples: "generic",
        star: "generic",
        starhub: "generic",
        statebank: "generic",
        statefarm: "generic",
        statoil: "generic",
        stc: "generic",
        stcgroup: "generic",
        stockholm: "generic",
        storage: "generic",
        store: "generic",
        stream: "generic",
        studio: "generic",
        study: "generic",
        style: "generic",
        su: "country-code",
        sucks: "generic",
        supplies: "generic",
        supply: "generic",
        support: "generic",
        surf: "generic",
        surgery: "generic",
        suzuki: "generic",
        sv: "country-code",
        swatch: "generic",
        swiftcover: "generic",
        swiss: "generic",
        sx: "country-code",
        sy: "country-code",
        sydney: "generic",
        symantec: "generic",
        systems: "generic",
        sz: "country-code",
        tab: "generic",
        taipei: "generic",
        talk: "generic",
        taobao: "generic",
        target: "generic",
        tatamotors: "generic",
        tatar: "generic",
        tattoo: "generic",
        tax: "generic",
        taxi: "generic",
        tc: "country-code",
        tci: "generic",
        td: "country-code",
        tdk: "generic",
        team: "generic",
        tech: "generic",
        technology: "generic",
        tel: "sponsored",
        telecity: "generic",
        telefonica: "generic",
        temasek: "generic",
        tennis: "generic",
        teva: "generic",
        tf: "country-code",
        tg: "country-code",
        th: "country-code",
        thd: "generic",
        theater: "generic",
        theatre: "generic",
        tiaa: "generic",
        tickets: "generic",
        tienda: "generic",
        tiffany: "generic",
        tips: "generic",
        tires: "generic",
        tirol: "generic",
        tj: "country-code",
        tjmaxx: "generic",
        tjx: "generic",
        tk: "country-code",
        tkmaxx: "generic",
        tl: "country-code",
        tm: "country-code",
        tmall: "generic",
        tn: "country-code",
        to: "country-code",
        today: "generic",
        tokyo: "generic",
        tools: "generic",
        top: "generic",
        toray: "generic",
        toshiba: "generic",
        total: "generic",
        tours: "generic",
        town: "generic",
        toyota: "generic",
        toys: "generic",
        tp: "country-code",
        tr: "country-code",
        trade: "generic",
        trading: "generic",
        training: "generic",
        travel: "sponsored",
        travelchannel: "generic",
        travelers: "generic",
        travelersinsurance: "generic",
        trust: "generic",
        trv: "generic",
        tt: "country-code",
        tube: "generic",
        tui: "generic",
        tunes: "generic",
        tushu: "generic",
        tv: "country-code",
        tvs: "generic",
        tw: "country-code",
        tz: "country-code",
        ua: "country-code",
        ubank: "generic",
        ubs: "generic",
        uconnect: "generic",
        ug: "country-code",
        uk: "country-code",
        um: "country-code",
        unicom: "generic",
        university: "generic",
        uno: "generic",
        uol: "generic",
        ups: "generic",
        us: "country-code",
        uy: "country-code",
        uz: "country-code",
        va: "country-code",
        vacations: "generic",
        vana: "generic",
        vanguard: "generic",
        vc: "country-code",
        ve: "country-code",
        vegas: "generic",
        ventures: "generic",
        verisign: "generic",
        versicherung: "generic",
        vet: "generic",
        vg: "country-code",
        vi: "country-code",
        viajes: "generic",
        video: "generic",
        vig: "generic",
        viking: "generic",
        villas: "generic",
        vin: "generic",
        vip: "generic",
        virgin: "generic",
        visa: "generic",
        vision: "generic",
        vista: "generic",
        vistaprint: "generic",
        viva: "generic",
        vivo: "generic",
        vlaanderen: "generic",
        vn: "country-code",
        vodka: "generic",
        volkswagen: "generic",
        volvo: "generic",
        vote: "generic",
        voting: "generic",
        voto: "generic",
        voyage: "generic",
        vu: "country-code",
        vuelos: "generic",
        wales: "generic",
        walmart: "generic",
        walter: "generic",
        wang: "generic",
        wanggou: "generic",
        warman: "generic",
        watch: "generic",
        watches: "generic",
        weather: "generic",
        weatherchannel: "generic",
        webcam: "generic",
        weber: "generic",
        website: "generic",
        wed: "generic",
        wedding: "generic",
        weibo: "generic",
        weir: "generic",
        wf: "country-code",
        whoswho: "generic",
        wien: "generic",
        wiki: "generic",
        williamhill: "generic",
        win: "generic",
        windows: "generic",
        wine: "generic",
        winners: "generic",
        wme: "generic",
        wolterskluwer: "generic",
        woodside: "generic",
        work: "generic",
        works: "generic",
        world: "generic",
        wow: "generic",
        ws: "country-code",
        wtc: "generic",
        wtf: "generic",
        xbox: "generic",
        xerox: "generic",
        xfinity: "generic",
        xihuan: "generic",
        xin: "generic",
        "\u6D4B\u8BD5": "test",
        "\u0915\u0949\u092E": "generic",
        "\u092A\u0930\u0940\u0915\u094D\u0937\u093E": "test",
        "\u30BB\u30FC\u30EB": "generic",
        "\u4F5B\u5C71": "generic",
        "\u0CAD\u0CBE\u0CB0\u0CA4": "country-code",
        "\u6148\u5584": "generic",
        "\u96C6\u56E2": "generic",
        "\u5728\u7EBF": "generic",
        "\uD55C\uAD6D": "country-code",
        "\u0B2D\u0B3E\u0B30\u0B24": "country-code",
        "\u5927\u4F17\u6C7D\u8F66": "generic",
        "\u70B9\u770B": "generic",
        "\u0E04\u0E2D\u0E21": "generic",
        "\u09AD\u09BE\u09F0\u09A4": "country-code",
        "\u09AD\u09BE\u09B0\u09A4": "country-code",
        "\u516B\u5366": "generic",
        "\u200F\u0645\u0648\u0642\u0639\u200E": "generic",
        "\u09AC\u09BE\u0982\u09B2\u09BE": "country-code",
        "\u516C\u76CA": "generic",
        "\u516C\u53F8": "generic",
        "\u9999\u683C\u91CC\u62C9": "generic",
        "\u7F51\u7AD9": "generic",
        "\u79FB\u52A8": "generic",
        "\u6211\u7231\u4F60": "generic",
        "\u043C\u043E\u0441\u043A\u0432\u0430": "generic",
        "\u0438\u0441\u043F\u044B\u0442\u0430\u043D\u0438\u0435": "test",
        "\u049B\u0430\u0437": "country-code",
        "\u043A\u0430\u0442\u043E\u043B\u0438\u043A": "generic",
        "\u043E\u043D\u043B\u0430\u0439\u043D": "generic",
        "\u0441\u0430\u0439\u0442": "generic",
        "\u8054\u901A": "generic",
        "\u0441\u0440\u0431": "country-code",
        "\u0431\u0433": "country-code",
        "\u0431\u0435\u043B": "country-code",
        "\u200F\u05E7\u05D5\u05DD\u200E": "generic",
        "\u65F6\u5C1A": "generic",
        "\u5FAE\u535A": "generic",
        "\uD14C\uC2A4\uD2B8": "test",
        "\u6DE1\u9A6C\u9521": "generic",
        "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3": "generic",
        "\u043E\u0440\u0433": "generic",
        "\u0928\u0947\u091F": "generic",
        "\u30B9\u30C8\u30A2": "generic",
        "\uC0BC\uC131": "generic",
        "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD":
          "country-code",
        "\u5546\u6807": "generic",
        "\u5546\u5E97": "generic",
        "\u5546\u57CE": "generic",
        "\u0434\u0435\u0442\u0438": "generic",
        "\u043C\u043A\u0434": "country-code",
        "\u200F\u05D8\u05E2\u05E1\u05D8\u200E": "test",
        "\u0435\u044E": "country-code",
        "\u30DD\u30A4\u30F3\u30C8": "generic",
        "\u65B0\u95FB": "generic",
        "\u5DE5\u884C": "generic",
        "\u5BB6\u96FB": "generic",
        "\u200F\u0643\u0648\u0645\u200E": "generic",
        "\u4E2D\u6587\u7F51": "generic",
        "\u4E2D\u4FE1": "generic",
        "\u4E2D\u56FD": "country-code",
        "\u4E2D\u570B": "country-code",
        "\u5A31\u4E50": "generic",
        "\u8C37\u6B4C": "generic",
        "\u0C2D\u0C3E\u0C30\u0C24\u0C4D": "country-code",
        "\u0DBD\u0D82\u0D9A\u0DCF": "country-code",
        "\u96FB\u8A0A\u76C8\u79D1": "generic",
        "\u8D2D\u7269": "generic",
        "\u6E2C\u8A66": "test",
        "\u30AF\u30E9\u30A6\u30C9": "generic",
        "\u0AAD\u0ABE\u0AB0\u0AA4": "country-code",
        "\u901A\u8CA9": "generic",
        "\u092D\u093E\u0930\u0924\u092E\u094D": "country-code",
        "\u092D\u093E\u0930\u0924": "country-code",
        "\u092D\u093E\u0930\u094B\u0924": "country-code",
        "\u200F\u0622\u0632\u0645\u0627\u06CC\u0634\u06CC\u200E": "test",
        "\u0BAA\u0BB0\u0BBF\u0B9F\u0BCD\u0B9A\u0BC8": "test",
        "\u7F51\u5E97": "generic",
        "\u0938\u0902\u0917\u0920\u0928": "generic",
        "\u9910\u5385": "generic",
        "\u7F51\u7EDC": "generic",
        "\u043A\u043E\u043C": "generic",
        "\u0443\u043A\u0440": "country-code",
        "\u9999\u6E2F": "country-code",
        "\u8BFA\u57FA\u4E9A": "generic",
        "\u98DF\u54C1": "generic",
        "\u03B4\u03BF\u03BA\u03B9\u03BC\u03AE": "test",
        "\u98DE\u5229\u6D66": "generic",
        "\u200F\u0625\u062E\u062A\u0628\u0627\u0631\u200E": "test",
        "\u53F0\u6E7E": "country-code",
        "\u53F0\u7063": "country-code",
        "\u624B\u8868": "generic",
        "\u624B\u673A": "generic",
        "\u043C\u043E\u043D": "country-code",
        "\u200F\u0627\u0644\u062C\u0632\u0627\u0626\u0631\u200E":
          "country-code",
        "\u200F\u0639\u0645\u0627\u0646\u200E": "country-code",
        "\u200F\u0627\u0631\u0627\u0645\u0643\u0648\u200E": "generic",
        "\u200F\u0627\u06CC\u0631\u0627\u0646\u200E": "country-code",
        "\u200F\u0627\u0644\u0639\u0644\u064A\u0627\u0646\u200E": "generic",
        "\u200F\u0627\u062A\u0635\u0627\u0644\u0627\u062A\u200E": "generic",
        "\u200F\u0627\u0645\u0627\u0631\u0627\u062A\u200E": "country-code",
        "\u200F\u0628\u0627\u0632\u0627\u0631\u200E": "generic",
        "\u200F\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627\u200E":
          "country-code",
        "\u200F\u067E\u0627\u06A9\u0633\u062A\u0627\u0646\u200E":
          "country-code",
        "\u200F\u0627\u0644\u0627\u0631\u062F\u0646\u200E": "country-code",
        "\u200F\u0645\u0648\u0628\u0627\u064A\u0644\u064A\u200E": "generic",
        "\u200F\u0628\u0627\u0631\u062A\u200E": "country-code",
        "\u200F\u0628\u06BE\u0627\u0631\u062A\u200E": "country-code",
        "\u200F\u0627\u0644\u0645\u063A\u0631\u0628\u200E": "country-code",
        "\u200F\u0627\u0628\u0648\u0638\u0628\u064A\u200E": "generic",
        "\u200F\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629\u200E":
          "country-code",
        "\u200F\u0680\u0627\u0631\u062A\u200E": "country-code",
        "\u200F\u0643\u0627\u062B\u0648\u0644\u064A\u0643\u200E": "generic",
        "\u200F\u0633\u0648\u062F\u0627\u0646\u200E": "country-code",
        "\u200F\u0647\u0645\u0631\u0627\u0647\u200E": "generic",
        "\u200F\u0639\u0631\u0627\u0642\u200E": "country-code",
        "\u200F\u0645\u0644\u064A\u0633\u064A\u0627\u200E": "country-code",
        "\u6FB3\u9580": "country-code",
        "\uB2F7\uCEF4": "generic",
        "\u653F\u5E9C": "generic",
        "\u200F\u0634\u0628\u0643\u0629\u200E": "generic",
        "\u200F\u0628\u064A\u062A\u0643\u200E": "generic",
        "\u200F\u0639\u0631\u0628\u200E": "generic",
        "\u10D2\u10D4": "country-code",
        "\u673A\u6784": "generic",
        "\u7EC4\u7EC7\u673A\u6784": "generic",
        "\u5065\u5EB7": "generic",
        "\u0E44\u0E17\u0E22": "country-code",
        "\u200F\u0633\u0648\u0631\u064A\u0629\u200E": "country-code",
        "\u62DB\u8058": "generic",
        "\u0440\u0443\u0441": "generic",
        "\u0440\u0444": "country-code",
        "\u73E0\u5B9D": "generic",
        "\u200F\u062A\u0648\u0646\u0633\u200E": "country-code",
        "\u5927\u62FF": "generic",
        "\u307F\u3093\u306A": "generic",
        "\u30B0\u30FC\u30B0\u30EB": "generic",
        "\u03B5\u03BB": "country-code",
        "\u4E16\u754C": "generic",
        "\u66F8\u7C4D": "generic",
        "\u0D2D\u0D3E\u0D30\u0D24\u0D02": "country-code",
        "\u0A2D\u0A3E\u0A30\u0A24": "country-code",
        "\u7F51\u5740": "generic",
        "\uB2F7\uB137": "generic",
        "\u30B3\u30E0": "generic",
        "\u5929\u4E3B\u6559": "generic",
        "\u6E38\u620F": "generic",
        "verm\xF6gensberater": "generic",
        "verm\xF6gensberatung": "generic",
        "\u4F01\u4E1A": "generic",
        "\u4FE1\u606F": "generic",
        "\u5609\u91CC\u5927\u9152\u5E97": "generic",
        "\u5609\u91CC": "generic",
        "\u200F\u0645\u0635\u0631\u200E": "country-code",
        "\u200F\u0642\u0637\u0631\u200E": "country-code",
        "\u5E7F\u4E1C": "generic",
        "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8": "country-code",
        "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE": "country-code",
        "\u0570\u0561\u0575": "country-code",
        "\u65B0\u52A0\u5761": "country-code",
        "\u200F\u0641\u0644\u0633\u0637\u064A\u0646\u200E": "country-code",
        "\u30C6\u30B9\u30C8": "test",
        "\u653F\u52A1": "generic",
        xperia: "generic",
        xxx: "sponsored",
        xyz: "generic",
        yachts: "generic",
        yahoo: "generic",
        yamaxun: "generic",
        yandex: "generic",
        ye: "country-code",
        yodobashi: "generic",
        yoga: "generic",
        yokohama: "generic",
        you: "generic",
        youtube: "generic",
        yt: "country-code",
        yun: "generic",
        za: "country-code",
        zappos: "generic",
        zara: "generic",
        zero: "generic",
        zip: "generic",
        zippo: "generic",
        zm: "country-code",
        zone: "generic",
        zuerich: "generic",
        zw: "country-code",
      };
    },
  });

  // node_modules/@lumeweb/tld-enum/formats/js/tld-enum/index.js
  var require_tld_enum = __commonJS({
    "node_modules/@lumeweb/tld-enum/formats/js/tld-enum/index.js"(
      exports,
      module
    ) {
      module.exports = {
        desc: require_desc(),
        info: require_info(),
        list: require_list(),
        type: require_type(),
      };
    },
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(
      exports,
      module
    ) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule
          ? obj
          : {
              default: obj,
            };
      }
      (module.exports = _interopRequireDefault),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/regenerator-runtime/runtime.js
  var require_runtime = __commonJS({
    "node_modules/regenerator-runtime/runtime.js"(exports, module) {
      var runtime = (function (exports2) {
        "use strict";
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined2;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define2(obj, key2, value) {
          Object.defineProperty(obj, key2, {
            value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
          return obj[key2];
        }
        try {
          define2({}, "");
        } catch (err) {
          define2 = function (obj, key2, value) {
            return (obj[key2] = value);
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator =
            outerFn && outerFn.prototype instanceof Generator
              ? outerFn
              : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context);
          return generator;
        }
        exports2.wrap = wrap;
        function tryCatch(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {}
        function GeneratorFunction() {}
        function GeneratorFunctionPrototype() {}
        var IteratorPrototype = {};
        define2(IteratorPrototype, iteratorSymbol, function () {
          return this;
        });
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype =
          getProto && getProto(getProto(values([])));
        if (
          NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)
        ) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp =
          (GeneratorFunctionPrototype.prototype =
          Generator.prototype =
            Object.create(IteratorPrototype));
        GeneratorFunction.prototype = GeneratorFunctionPrototype;
        define2(Gp, "constructor", GeneratorFunctionPrototype);
        define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
        GeneratorFunction.displayName = define2(
          GeneratorFunctionPrototype,
          toStringTagSymbol,
          "GeneratorFunction"
        );
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            define2(prototype, method, function (arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports2.isGeneratorFunction = function (genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor
            ? ctor === GeneratorFunction ||
                (ctor.displayName || ctor.name) === "GeneratorFunction"
            : false;
        };
        exports2.mark = function (genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define2(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports2.awrap = function (arg) {
          return { __await: arg };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve2, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;
              if (
                value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")
              ) {
                return PromiseImpl.resolve(value.__await).then(
                  function (value2) {
                    invoke("next", value2, resolve2, reject);
                  },
                  function (err) {
                    invoke("throw", err, resolve2, reject);
                  }
                );
              }
              return PromiseImpl.resolve(value).then(
                function (unwrapped) {
                  result.value = unwrapped;
                  resolve2(result);
                },
                function (error) {
                  return invoke("throw", error, resolve2, reject);
                }
              );
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function (resolve2, reject) {
                invoke(method, arg, resolve2, reject);
              });
            }
            return (previousPromise = previousPromise
              ? previousPromise.then(
                  callInvokeWithMethodAndArg,
                  callInvokeWithMethodAndArg
                )
              : callInvokeWithMethodAndArg());
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        define2(AsyncIterator.prototype, asyncIteratorSymbol, function () {
          return this;
        });
        exports2.AsyncIterator = AsyncIterator;
        exports2.async = function (
          innerFn,
          outerFn,
          self2,
          tryLocsList,
          PromiseImpl
        ) {
          if (PromiseImpl === void 0) PromiseImpl = Promise;
          var iter = new AsyncIterator(
            wrap(innerFn, outerFn, self2, tryLocsList),
            PromiseImpl
          );
          return exports2.isGeneratorFunction(outerFn)
            ? iter
            : iter.next().then(function (result) {
                return result.done ? result.value : iter.next();
              });
        };
        function makeInvokeMethod(innerFn, self2, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }
              if (context.method === "next") {
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }
                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }
              state = GenStateExecuting;
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                state = context.done
                  ? GenStateCompleted
                  : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context.done,
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted;
                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];
          if (method === undefined2) {
            context.delegate = null;
            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                context.method = "return";
                context.arg = undefined2;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context.method = "throw";
              context.arg = new TypeError(
                "The iterator does not provide a 'throw' method"
              );
            }
            return ContinueSentinel;
          }
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined2;
            }
          } else {
            return info;
          }
          context.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define2(Gp, toStringTagSymbol, "Generator");
        define2(Gp, iteratorSymbol, function () {
          return this;
        });
        define2(Gp, "toString", function () {
          return "[object Generator]";
        });
        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports2.keys = function (object) {
          var keys = [];
          for (var key2 in object) {
            keys.push(key2);
          }
          keys.reverse();
          return function next() {
            while (keys.length) {
              var key3 = keys.pop();
              if (key3 in object) {
                next.value = key3;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i = -1,
                next = function next2() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next2.value = iterable[i];
                      next2.done = false;
                      return next2;
                    }
                  }
                  next2.value = undefined2;
                  next2.done = true;
                  return next2;
                };
              return (next.next = next);
            }
          }
          return { next: doneResult };
        }
        exports2.values = values;
        function doneResult() {
          return { value: undefined2, done: true };
        }
        Context.prototype = {
          constructor: Context,
          reset: function (skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined2;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined2;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name2 in this) {
                if (
                  name2.charAt(0) === "t" &&
                  hasOwn.call(this, name2) &&
                  !isNaN(+name2.slice(1))
                ) {
                  this[name2] = undefined2;
                }
              }
            }
          },
          stop: function () {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function (exception) {
            if (this.done) {
              throw exception;
            }
            var context = this;
            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              if (caught) {
                context.method = "next";
                context.arg = undefined2;
              }
              return !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function (type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (
                entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc
              ) {
                var finallyEntry = entry;
                break;
              }
            }
            if (
              finallyEntry &&
              (type === "break" || type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc
            ) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function (record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function (finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          catch: function (tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function (iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc,
            };
            if (this.method === "next") {
              this.arg = undefined2;
            }
            return ContinueSentinel;
          },
        };
        return exports2;
      })(typeof module === "object" ? module.exports : {});
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        if (typeof globalThis === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    },
  });

  // node_modules/@babel/runtime/regenerator/index.js
  var require_regenerator = __commonJS({
    "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
      module.exports = require_runtime();
    },
  });

  // node_modules/@babel/runtime/helpers/arrayWithHoles.js
  var require_arrayWithHoles = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }
      (module.exports = _arrayWithHoles),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
  var require_iterableToArrayLimit = __commonJS({
    "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(
      exports,
      module
    ) {
      function _iterableToArrayLimit(arr, i) {
        var _i =
          arr == null
            ? null
            : (typeof Symbol !== "undefined" && arr[Symbol.iterator]) ||
              arr["@@iterator"];
        if (_i == null) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }
        return _arr;
      }
      (module.exports = _iterableToArrayLimit),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/arrayLikeToArray.js
  var require_arrayLikeToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      (module.exports = _arrayLikeToArray),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
  var require_unsupportedIterableToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(
      exports,
      module
    ) {
      var arrayLikeToArray = require_arrayLikeToArray();
      function _unsupportedIterableToArray(o2, minLen) {
        if (!o2) return;
        if (typeof o2 === "string") return arrayLikeToArray(o2, minLen);
        var n = Object.prototype.toString.call(o2).slice(8, -1);
        if (n === "Object" && o2.constructor) n = o2.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o2);
        if (
          n === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
        )
          return arrayLikeToArray(o2, minLen);
      }
      (module.exports = _unsupportedIterableToArray),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/nonIterableRest.js
  var require_nonIterableRest = __commonJS({
    "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
      function _nonIterableRest() {
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }
      (module.exports = _nonIterableRest),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/slicedToArray.js
  var require_slicedToArray = __commonJS({
    "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
      var arrayWithHoles = require_arrayWithHoles();
      var iterableToArrayLimit = require_iterableToArrayLimit();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableRest = require_nonIterableRest();
      function _slicedToArray(arr, i) {
        return (
          arrayWithHoles(arr) ||
          iterableToArrayLimit(arr, i) ||
          unsupportedIterableToArray(arr, i) ||
          nonIterableRest()
        );
      }
      (module.exports = _slicedToArray),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/classCallCheck.js
  var require_classCallCheck = __commonJS({
    "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
      function _classCallCheck11(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      (module.exports = _classCallCheck11),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/createClass.js
  var require_createClass = __commonJS({
    "node_modules/@babel/runtime/helpers/createClass.js"(exports, module) {
      function _defineProperties10(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass10(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties10(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties10(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false,
        });
        return Constructor;
      }
      (module.exports = _createClass10),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/@babel/runtime/helpers/asyncToGenerator.js
  var require_asyncToGenerator = __commonJS({
    "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module) {
      function asyncGeneratorStep(
        gen,
        resolve2,
        reject,
        _next,
        _throw,
        key2,
        arg
      ) {
        try {
          var info = gen[key2](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve2(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function () {
          var self2 = this,
            args = arguments;
          return new Promise(function (resolve2, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(
                gen,
                resolve2,
                reject,
                _next,
                _throw,
                "next",
                value
              );
            }
            function _throw(err) {
              asyncGeneratorStep(
                gen,
                resolve2,
                reject,
                _next,
                _throw,
                "throw",
                err
              );
            }
            _next(void 0);
          });
        };
      }
      (module.exports = _asyncToGenerator),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports, module) {
      (function (module2, exports2) {
        "use strict";
        function assert3(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN3(number, base2, endian) {
          if (BN3.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN3;
        } else {
          exports2.BN = BN3;
        }
        BN3.BN = BN3;
        BN3.wordSize = 26;
        var Buffer4;
        try {
          if (
            typeof window !== "undefined" &&
            typeof window.Buffer !== "undefined"
          ) {
            Buffer4 = window.Buffer;
          } else {
            Buffer4 = __require("buffer").Buffer;
          }
        } catch (e) {}
        BN3.isBN = function isBN(num) {
          if (num instanceof BN3) {
            return true;
          }
          return (
            num !== null &&
            typeof num === "object" &&
            num.constructor.wordSize === BN3.wordSize &&
            Array.isArray(num.words)
          );
        };
        BN3.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };
        BN3.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };
        BN3.prototype._init = function init2(number, base2, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base2, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert3(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base2 === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN3.prototype._initNumber = function _initNumber(
          number,
          base2,
          endian
        ) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [number & 67108863, (number / 67108864) & 67108863];
            this.length = 2;
          } else {
            assert3(number < 9007199254740992);
            this.words = [number & 67108863, (number / 67108864) & 67108863, 1];
            this.length = 3;
          }
          if (endian !== "le") return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN3.prototype._initArray = function _initArray(number, base2, endian) {
          assert3(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j2, w2;
          var off = 0;
          if (endian === "be") {
            for (i = number.length - 1, j2 = 0; i >= 0; i -= 3) {
              w2 = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
              this.words[j2] |= (w2 << off) & 67108863;
              this.words[j2 + 1] = (w2 >>> (26 - off)) & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j2++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j2 = 0; i < number.length; i += 3) {
              w2 = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
              this.words[j2] |= (w2 << off) & 67108863;
              this.words[j2 + 1] = (w2 >>> (26 - off)) & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j2++;
              }
            }
          }
          return this.strip();
        };
        function parseHex4Bits(string, index) {
          var c2 = string.charCodeAt(index);
          if (c2 >= 65 && c2 <= 70) {
            return c2 - 55;
          } else if (c2 >= 97 && c2 <= 102) {
            return c2 - 87;
          } else {
            return (c2 - 48) & 15;
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN3.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off = 0;
          var j2 = 0;
          var w2;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w2 = parseHexByte(number, start, i) << off;
              this.words[j2] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j2 += 1;
                this.words[j2] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (
              i = parseLength % 2 === 0 ? start + 1 : start;
              i < number.length;
              i += 2
            ) {
              w2 = parseHexByte(number, start, i) << off;
              this.words[j2] |= w2 & 67108863;
              if (off >= 18) {
                off -= 18;
                j2 += 1;
                this.words[j2] |= w2 >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this.strip();
        };
        function parseBase(str, start, end, mul3) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c2 = str.charCodeAt(i) - 48;
            r *= mul3;
            if (c2 >= 49) {
              r += c2 - 49 + 10;
            } else if (c2 >= 17) {
              r += c2 - 17 + 10;
            } else {
              r += c2;
            }
          }
          return r;
        }
        BN3.prototype._parseBase = function _parseBase(number, base2, start) {
          this.words = [0];
          this.length = 1;
          for (
            var limbLen = 0, limbPow = 1;
            limbPow <= 67108863;
            limbPow *= base2
          ) {
            limbLen++;
          }
          limbLen--;
          limbPow = (limbPow / base2) | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base2);
            for (i = 0; i < mod; i++) {
              pow *= base2;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this.strip();
        };
        BN3.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN3.prototype.clone = function clone() {
          var r = new BN3(null);
          this.copy(r);
          return r;
        };
        BN3.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN3.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN3.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN3.prototype.inspect = function inspect4() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros2 = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000",
        ];
        var groupSizes = [
          0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5,
          5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        ];
        var groupBases = [
          0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607,
          16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536,
          11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101,
          5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368,
          20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875,
          60466176,
        ];
        BN3.prototype.toString = function toString(base2, padding2) {
          base2 = base2 || 10;
          padding2 = padding2 | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w2 = this.words[i];
              var word = (((w2 << off) | carry) & 16777215).toString(16);
              carry = (w2 >>> (24 - off)) & 16777215;
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros2[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c2 = this.clone();
            c2.negative = 0;
            while (!c2.isZero()) {
              var r = c2.modn(groupBase).toString(base2);
              c2 = c2.idivn(groupBase);
              if (!c2.isZero()) {
                out = zeros2[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding2 !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert3(false, "Base should be between 2 and 36");
        };
        BN3.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert3(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN3.prototype.toJSON = function toJSON2() {
          return this.toString(16);
        };
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          assert3(typeof Buffer4 !== "undefined");
          return this.toArrayLike(Buffer4, endian, length);
        };
        BN3.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN3.prototype.toArrayLike = function toArrayLike(
          ArrayType,
          endian,
          length
        ) {
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert3(
            byteLength <= reqLength,
            "byte array longer than desired length"
          );
          assert3(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b2, i;
          var q2 = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength; i++) {
              res[i] = 0;
            }
            for (i = 0; !q2.isZero(); i++) {
              b2 = q2.andln(255);
              q2.iushrn(8);
              res[reqLength - i - 1] = b2;
            }
          } else {
            for (i = 0; !q2.isZero(); i++) {
              b2 = q2.andln(255);
              q2.iushrn(8);
              res[i] = b2;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN3.prototype._countBits = function _countBits(w2) {
            return 32 - Math.clz32(w2);
          };
        } else {
          BN3.prototype._countBits = function _countBits(w2) {
            var t2 = w2;
            var r = 0;
            if (t2 >= 4096) {
              r += 13;
              t2 >>>= 13;
            }
            if (t2 >= 64) {
              r += 7;
              t2 >>>= 7;
            }
            if (t2 >= 8) {
              r += 4;
              t2 >>>= 4;
            }
            if (t2 >= 2) {
              r += 2;
              t2 >>>= 2;
            }
            return r + t2;
          };
        }
        BN3.prototype._zeroBits = function _zeroBits(w2) {
          if (w2 === 0) return 26;
          var t2 = w2;
          var r = 0;
          if ((t2 & 8191) === 0) {
            r += 13;
            t2 >>>= 13;
          }
          if ((t2 & 127) === 0) {
            r += 7;
            t2 >>>= 7;
          }
          if ((t2 & 15) === 0) {
            r += 4;
            t2 >>>= 4;
          }
          if ((t2 & 3) === 0) {
            r += 2;
            t2 >>>= 2;
          }
          if ((t2 & 1) === 0) {
            r++;
          }
          return r;
        };
        BN3.prototype.bitLength = function bitLength() {
          var w2 = this.words[this.length - 1];
          var hi = this._countBits(w2);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w2 = new Array(num.bitLength());
          for (var bit = 0; bit < w2.length; bit++) {
            var off = (bit / 26) | 0;
            var wbit = bit % 26;
            w2[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
          }
          return w2;
        }
        BN3.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b2 = this._zeroBits(this.words[i]);
            r += b2;
            if (b2 !== 26) break;
          }
          return r;
        };
        BN3.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN3.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN3.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN3.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN3.prototype.neg = function neg3() {
          return this.clone().ineg();
        };
        BN3.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN3.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN3.prototype.ior = function ior(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN3.prototype.or = function or2(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN3.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN3.prototype.iuand = function iuand(num) {
          var b2;
          if (this.length > num.length) {
            b2 = num;
          } else {
            b2 = this;
          }
          for (var i = 0; i < b2.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b2.length;
          return this.strip();
        };
        BN3.prototype.iand = function iand(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN3.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN3.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN3.prototype.iuxor = function iuxor(num) {
          var a2;
          var b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          for (var i = 0; i < b2.length; i++) {
            this.words[i] = a2.words[i] ^ b2.words[i];
          }
          if (this !== a2) {
            for (; i < a2.length; i++) {
              this.words[i] = a2.words[i];
            }
          }
          this.length = a2.length;
          return this.strip();
        };
        BN3.prototype.ixor = function ixor(num) {
          assert3((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN3.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN3.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN3.prototype.inotn = function inotn(width) {
          assert3(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & (67108863 >> (26 - bitsLeft));
          }
          return this.strip();
        };
        BN3.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN3.prototype.setn = function setn(bit, val) {
          assert3(typeof bit === "number" && bit >= 0);
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | (1 << wbit);
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN3.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a2, b2;
          if (this.length > num.length) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i = 0; i < b2.length; i++) {
            r = (a2.words[i] | 0) + (b2.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a2.length; i++) {
            r = (a2.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a2.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a2 !== this) {
            for (; i < a2.length; i++) {
              this.words[i] = a2.words[i];
            }
          }
          return this;
        };
        BN3.prototype.add = function add3(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length) return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN3.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a2, b2;
          if (cmp > 0) {
            a2 = this;
            b2 = num;
          } else {
            a2 = num;
            b2 = this;
          }
          var carry = 0;
          for (var i = 0; i < b2.length; i++) {
            r = (a2.words[i] | 0) - (b2.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a2.length; i++) {
            r = (a2.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a2.length && a2 !== this) {
            for (; i < a2.length; i++) {
              this.words[i] = a2.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a2 !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN3.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = (self2.length + num.length) | 0;
          out.length = len;
          len = (len - 1) | 0;
          var a2 = self2.words[0] | 0;
          var b2 = num.words[0] | 0;
          var r = a2 * b2;
          var lo = r & 67108863;
          var carry = (r / 67108864) | 0;
          out.words[0] = lo;
          for (var k2 = 1; k2 < len; k2++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k2, num.length - 1);
            for (
              var j2 = Math.max(0, k2 - self2.length + 1);
              j2 <= maxJ;
              j2++
            ) {
              var i = (k2 - j2) | 0;
              a2 = self2.words[i] | 0;
              b2 = num.words[j2] | 0;
              r = a2 * b2 + rword;
              ncarry += (r / 67108864) | 0;
              rword = r & 67108863;
            }
            out.words[k2] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k2] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a2 = self2.words;
          var b2 = num.words;
          var o2 = out.words;
          var c2 = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a2[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a2[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a22 = a2[2] | 0;
          var al2 = a22 & 8191;
          var ah2 = a22 >>> 13;
          var a3 = a2[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a2[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a2[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a2[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a2[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a2[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a2[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b2[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b2[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b22 = b2[2] | 0;
          var bl2 = b22 & 8191;
          var bh2 = b22 >>> 13;
          var b3 = b2[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b2[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b2[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b2[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b2[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b2[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b2[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = (mid + Math.imul(ah0, bl0)) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = (mid + Math.imul(ah1, bl0)) | 0;
          hi = Math.imul(ah1, bh0);
          lo = (lo + Math.imul(al0, bl1)) | 0;
          mid = (mid + Math.imul(al0, bh1)) | 0;
          mid = (mid + Math.imul(ah0, bl1)) | 0;
          hi = (hi + Math.imul(ah0, bh1)) | 0;
          var w1 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = (mid + Math.imul(ah2, bl0)) | 0;
          hi = Math.imul(ah2, bh0);
          lo = (lo + Math.imul(al1, bl1)) | 0;
          mid = (mid + Math.imul(al1, bh1)) | 0;
          mid = (mid + Math.imul(ah1, bl1)) | 0;
          hi = (hi + Math.imul(ah1, bh1)) | 0;
          lo = (lo + Math.imul(al0, bl2)) | 0;
          mid = (mid + Math.imul(al0, bh2)) | 0;
          mid = (mid + Math.imul(ah0, bl2)) | 0;
          hi = (hi + Math.imul(ah0, bh2)) | 0;
          var w2 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = (mid + Math.imul(ah3, bl0)) | 0;
          hi = Math.imul(ah3, bh0);
          lo = (lo + Math.imul(al2, bl1)) | 0;
          mid = (mid + Math.imul(al2, bh1)) | 0;
          mid = (mid + Math.imul(ah2, bl1)) | 0;
          hi = (hi + Math.imul(ah2, bh1)) | 0;
          lo = (lo + Math.imul(al1, bl2)) | 0;
          mid = (mid + Math.imul(al1, bh2)) | 0;
          mid = (mid + Math.imul(ah1, bl2)) | 0;
          hi = (hi + Math.imul(ah1, bh2)) | 0;
          lo = (lo + Math.imul(al0, bl3)) | 0;
          mid = (mid + Math.imul(al0, bh3)) | 0;
          mid = (mid + Math.imul(ah0, bl3)) | 0;
          hi = (hi + Math.imul(ah0, bh3)) | 0;
          var w3 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = (mid + Math.imul(ah4, bl0)) | 0;
          hi = Math.imul(ah4, bh0);
          lo = (lo + Math.imul(al3, bl1)) | 0;
          mid = (mid + Math.imul(al3, bh1)) | 0;
          mid = (mid + Math.imul(ah3, bl1)) | 0;
          hi = (hi + Math.imul(ah3, bh1)) | 0;
          lo = (lo + Math.imul(al2, bl2)) | 0;
          mid = (mid + Math.imul(al2, bh2)) | 0;
          mid = (mid + Math.imul(ah2, bl2)) | 0;
          hi = (hi + Math.imul(ah2, bh2)) | 0;
          lo = (lo + Math.imul(al1, bl3)) | 0;
          mid = (mid + Math.imul(al1, bh3)) | 0;
          mid = (mid + Math.imul(ah1, bl3)) | 0;
          hi = (hi + Math.imul(ah1, bh3)) | 0;
          lo = (lo + Math.imul(al0, bl4)) | 0;
          mid = (mid + Math.imul(al0, bh4)) | 0;
          mid = (mid + Math.imul(ah0, bl4)) | 0;
          hi = (hi + Math.imul(ah0, bh4)) | 0;
          var w4 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = (mid + Math.imul(ah5, bl0)) | 0;
          hi = Math.imul(ah5, bh0);
          lo = (lo + Math.imul(al4, bl1)) | 0;
          mid = (mid + Math.imul(al4, bh1)) | 0;
          mid = (mid + Math.imul(ah4, bl1)) | 0;
          hi = (hi + Math.imul(ah4, bh1)) | 0;
          lo = (lo + Math.imul(al3, bl2)) | 0;
          mid = (mid + Math.imul(al3, bh2)) | 0;
          mid = (mid + Math.imul(ah3, bl2)) | 0;
          hi = (hi + Math.imul(ah3, bh2)) | 0;
          lo = (lo + Math.imul(al2, bl3)) | 0;
          mid = (mid + Math.imul(al2, bh3)) | 0;
          mid = (mid + Math.imul(ah2, bl3)) | 0;
          hi = (hi + Math.imul(ah2, bh3)) | 0;
          lo = (lo + Math.imul(al1, bl4)) | 0;
          mid = (mid + Math.imul(al1, bh4)) | 0;
          mid = (mid + Math.imul(ah1, bl4)) | 0;
          hi = (hi + Math.imul(ah1, bh4)) | 0;
          lo = (lo + Math.imul(al0, bl5)) | 0;
          mid = (mid + Math.imul(al0, bh5)) | 0;
          mid = (mid + Math.imul(ah0, bl5)) | 0;
          hi = (hi + Math.imul(ah0, bh5)) | 0;
          var w5 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = (mid + Math.imul(ah6, bl0)) | 0;
          hi = Math.imul(ah6, bh0);
          lo = (lo + Math.imul(al5, bl1)) | 0;
          mid = (mid + Math.imul(al5, bh1)) | 0;
          mid = (mid + Math.imul(ah5, bl1)) | 0;
          hi = (hi + Math.imul(ah5, bh1)) | 0;
          lo = (lo + Math.imul(al4, bl2)) | 0;
          mid = (mid + Math.imul(al4, bh2)) | 0;
          mid = (mid + Math.imul(ah4, bl2)) | 0;
          hi = (hi + Math.imul(ah4, bh2)) | 0;
          lo = (lo + Math.imul(al3, bl3)) | 0;
          mid = (mid + Math.imul(al3, bh3)) | 0;
          mid = (mid + Math.imul(ah3, bl3)) | 0;
          hi = (hi + Math.imul(ah3, bh3)) | 0;
          lo = (lo + Math.imul(al2, bl4)) | 0;
          mid = (mid + Math.imul(al2, bh4)) | 0;
          mid = (mid + Math.imul(ah2, bl4)) | 0;
          hi = (hi + Math.imul(ah2, bh4)) | 0;
          lo = (lo + Math.imul(al1, bl5)) | 0;
          mid = (mid + Math.imul(al1, bh5)) | 0;
          mid = (mid + Math.imul(ah1, bl5)) | 0;
          hi = (hi + Math.imul(ah1, bh5)) | 0;
          lo = (lo + Math.imul(al0, bl6)) | 0;
          mid = (mid + Math.imul(al0, bh6)) | 0;
          mid = (mid + Math.imul(ah0, bl6)) | 0;
          hi = (hi + Math.imul(ah0, bh6)) | 0;
          var w6 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = (mid + Math.imul(ah7, bl0)) | 0;
          hi = Math.imul(ah7, bh0);
          lo = (lo + Math.imul(al6, bl1)) | 0;
          mid = (mid + Math.imul(al6, bh1)) | 0;
          mid = (mid + Math.imul(ah6, bl1)) | 0;
          hi = (hi + Math.imul(ah6, bh1)) | 0;
          lo = (lo + Math.imul(al5, bl2)) | 0;
          mid = (mid + Math.imul(al5, bh2)) | 0;
          mid = (mid + Math.imul(ah5, bl2)) | 0;
          hi = (hi + Math.imul(ah5, bh2)) | 0;
          lo = (lo + Math.imul(al4, bl3)) | 0;
          mid = (mid + Math.imul(al4, bh3)) | 0;
          mid = (mid + Math.imul(ah4, bl3)) | 0;
          hi = (hi + Math.imul(ah4, bh3)) | 0;
          lo = (lo + Math.imul(al3, bl4)) | 0;
          mid = (mid + Math.imul(al3, bh4)) | 0;
          mid = (mid + Math.imul(ah3, bl4)) | 0;
          hi = (hi + Math.imul(ah3, bh4)) | 0;
          lo = (lo + Math.imul(al2, bl5)) | 0;
          mid = (mid + Math.imul(al2, bh5)) | 0;
          mid = (mid + Math.imul(ah2, bl5)) | 0;
          hi = (hi + Math.imul(ah2, bh5)) | 0;
          lo = (lo + Math.imul(al1, bl6)) | 0;
          mid = (mid + Math.imul(al1, bh6)) | 0;
          mid = (mid + Math.imul(ah1, bl6)) | 0;
          hi = (hi + Math.imul(ah1, bh6)) | 0;
          lo = (lo + Math.imul(al0, bl7)) | 0;
          mid = (mid + Math.imul(al0, bh7)) | 0;
          mid = (mid + Math.imul(ah0, bl7)) | 0;
          hi = (hi + Math.imul(ah0, bh7)) | 0;
          var w7 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = (mid + Math.imul(ah8, bl0)) | 0;
          hi = Math.imul(ah8, bh0);
          lo = (lo + Math.imul(al7, bl1)) | 0;
          mid = (mid + Math.imul(al7, bh1)) | 0;
          mid = (mid + Math.imul(ah7, bl1)) | 0;
          hi = (hi + Math.imul(ah7, bh1)) | 0;
          lo = (lo + Math.imul(al6, bl2)) | 0;
          mid = (mid + Math.imul(al6, bh2)) | 0;
          mid = (mid + Math.imul(ah6, bl2)) | 0;
          hi = (hi + Math.imul(ah6, bh2)) | 0;
          lo = (lo + Math.imul(al5, bl3)) | 0;
          mid = (mid + Math.imul(al5, bh3)) | 0;
          mid = (mid + Math.imul(ah5, bl3)) | 0;
          hi = (hi + Math.imul(ah5, bh3)) | 0;
          lo = (lo + Math.imul(al4, bl4)) | 0;
          mid = (mid + Math.imul(al4, bh4)) | 0;
          mid = (mid + Math.imul(ah4, bl4)) | 0;
          hi = (hi + Math.imul(ah4, bh4)) | 0;
          lo = (lo + Math.imul(al3, bl5)) | 0;
          mid = (mid + Math.imul(al3, bh5)) | 0;
          mid = (mid + Math.imul(ah3, bl5)) | 0;
          hi = (hi + Math.imul(ah3, bh5)) | 0;
          lo = (lo + Math.imul(al2, bl6)) | 0;
          mid = (mid + Math.imul(al2, bh6)) | 0;
          mid = (mid + Math.imul(ah2, bl6)) | 0;
          hi = (hi + Math.imul(ah2, bh6)) | 0;
          lo = (lo + Math.imul(al1, bl7)) | 0;
          mid = (mid + Math.imul(al1, bh7)) | 0;
          mid = (mid + Math.imul(ah1, bl7)) | 0;
          hi = (hi + Math.imul(ah1, bh7)) | 0;
          lo = (lo + Math.imul(al0, bl8)) | 0;
          mid = (mid + Math.imul(al0, bh8)) | 0;
          mid = (mid + Math.imul(ah0, bl8)) | 0;
          hi = (hi + Math.imul(ah0, bh8)) | 0;
          var w8 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = (mid + Math.imul(ah9, bl0)) | 0;
          hi = Math.imul(ah9, bh0);
          lo = (lo + Math.imul(al8, bl1)) | 0;
          mid = (mid + Math.imul(al8, bh1)) | 0;
          mid = (mid + Math.imul(ah8, bl1)) | 0;
          hi = (hi + Math.imul(ah8, bh1)) | 0;
          lo = (lo + Math.imul(al7, bl2)) | 0;
          mid = (mid + Math.imul(al7, bh2)) | 0;
          mid = (mid + Math.imul(ah7, bl2)) | 0;
          hi = (hi + Math.imul(ah7, bh2)) | 0;
          lo = (lo + Math.imul(al6, bl3)) | 0;
          mid = (mid + Math.imul(al6, bh3)) | 0;
          mid = (mid + Math.imul(ah6, bl3)) | 0;
          hi = (hi + Math.imul(ah6, bh3)) | 0;
          lo = (lo + Math.imul(al5, bl4)) | 0;
          mid = (mid + Math.imul(al5, bh4)) | 0;
          mid = (mid + Math.imul(ah5, bl4)) | 0;
          hi = (hi + Math.imul(ah5, bh4)) | 0;
          lo = (lo + Math.imul(al4, bl5)) | 0;
          mid = (mid + Math.imul(al4, bh5)) | 0;
          mid = (mid + Math.imul(ah4, bl5)) | 0;
          hi = (hi + Math.imul(ah4, bh5)) | 0;
          lo = (lo + Math.imul(al3, bl6)) | 0;
          mid = (mid + Math.imul(al3, bh6)) | 0;
          mid = (mid + Math.imul(ah3, bl6)) | 0;
          hi = (hi + Math.imul(ah3, bh6)) | 0;
          lo = (lo + Math.imul(al2, bl7)) | 0;
          mid = (mid + Math.imul(al2, bh7)) | 0;
          mid = (mid + Math.imul(ah2, bl7)) | 0;
          hi = (hi + Math.imul(ah2, bh7)) | 0;
          lo = (lo + Math.imul(al1, bl8)) | 0;
          mid = (mid + Math.imul(al1, bh8)) | 0;
          mid = (mid + Math.imul(ah1, bl8)) | 0;
          hi = (hi + Math.imul(ah1, bh8)) | 0;
          lo = (lo + Math.imul(al0, bl9)) | 0;
          mid = (mid + Math.imul(al0, bh9)) | 0;
          mid = (mid + Math.imul(ah0, bl9)) | 0;
          hi = (hi + Math.imul(ah0, bh9)) | 0;
          var w9 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = (mid + Math.imul(ah9, bl1)) | 0;
          hi = Math.imul(ah9, bh1);
          lo = (lo + Math.imul(al8, bl2)) | 0;
          mid = (mid + Math.imul(al8, bh2)) | 0;
          mid = (mid + Math.imul(ah8, bl2)) | 0;
          hi = (hi + Math.imul(ah8, bh2)) | 0;
          lo = (lo + Math.imul(al7, bl3)) | 0;
          mid = (mid + Math.imul(al7, bh3)) | 0;
          mid = (mid + Math.imul(ah7, bl3)) | 0;
          hi = (hi + Math.imul(ah7, bh3)) | 0;
          lo = (lo + Math.imul(al6, bl4)) | 0;
          mid = (mid + Math.imul(al6, bh4)) | 0;
          mid = (mid + Math.imul(ah6, bl4)) | 0;
          hi = (hi + Math.imul(ah6, bh4)) | 0;
          lo = (lo + Math.imul(al5, bl5)) | 0;
          mid = (mid + Math.imul(al5, bh5)) | 0;
          mid = (mid + Math.imul(ah5, bl5)) | 0;
          hi = (hi + Math.imul(ah5, bh5)) | 0;
          lo = (lo + Math.imul(al4, bl6)) | 0;
          mid = (mid + Math.imul(al4, bh6)) | 0;
          mid = (mid + Math.imul(ah4, bl6)) | 0;
          hi = (hi + Math.imul(ah4, bh6)) | 0;
          lo = (lo + Math.imul(al3, bl7)) | 0;
          mid = (mid + Math.imul(al3, bh7)) | 0;
          mid = (mid + Math.imul(ah3, bl7)) | 0;
          hi = (hi + Math.imul(ah3, bh7)) | 0;
          lo = (lo + Math.imul(al2, bl8)) | 0;
          mid = (mid + Math.imul(al2, bh8)) | 0;
          mid = (mid + Math.imul(ah2, bl8)) | 0;
          hi = (hi + Math.imul(ah2, bh8)) | 0;
          lo = (lo + Math.imul(al1, bl9)) | 0;
          mid = (mid + Math.imul(al1, bh9)) | 0;
          mid = (mid + Math.imul(ah1, bl9)) | 0;
          hi = (hi + Math.imul(ah1, bh9)) | 0;
          var w10 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = (mid + Math.imul(ah9, bl2)) | 0;
          hi = Math.imul(ah9, bh2);
          lo = (lo + Math.imul(al8, bl3)) | 0;
          mid = (mid + Math.imul(al8, bh3)) | 0;
          mid = (mid + Math.imul(ah8, bl3)) | 0;
          hi = (hi + Math.imul(ah8, bh3)) | 0;
          lo = (lo + Math.imul(al7, bl4)) | 0;
          mid = (mid + Math.imul(al7, bh4)) | 0;
          mid = (mid + Math.imul(ah7, bl4)) | 0;
          hi = (hi + Math.imul(ah7, bh4)) | 0;
          lo = (lo + Math.imul(al6, bl5)) | 0;
          mid = (mid + Math.imul(al6, bh5)) | 0;
          mid = (mid + Math.imul(ah6, bl5)) | 0;
          hi = (hi + Math.imul(ah6, bh5)) | 0;
          lo = (lo + Math.imul(al5, bl6)) | 0;
          mid = (mid + Math.imul(al5, bh6)) | 0;
          mid = (mid + Math.imul(ah5, bl6)) | 0;
          hi = (hi + Math.imul(ah5, bh6)) | 0;
          lo = (lo + Math.imul(al4, bl7)) | 0;
          mid = (mid + Math.imul(al4, bh7)) | 0;
          mid = (mid + Math.imul(ah4, bl7)) | 0;
          hi = (hi + Math.imul(ah4, bh7)) | 0;
          lo = (lo + Math.imul(al3, bl8)) | 0;
          mid = (mid + Math.imul(al3, bh8)) | 0;
          mid = (mid + Math.imul(ah3, bl8)) | 0;
          hi = (hi + Math.imul(ah3, bh8)) | 0;
          lo = (lo + Math.imul(al2, bl9)) | 0;
          mid = (mid + Math.imul(al2, bh9)) | 0;
          mid = (mid + Math.imul(ah2, bl9)) | 0;
          hi = (hi + Math.imul(ah2, bh9)) | 0;
          var w11 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = (mid + Math.imul(ah9, bl3)) | 0;
          hi = Math.imul(ah9, bh3);
          lo = (lo + Math.imul(al8, bl4)) | 0;
          mid = (mid + Math.imul(al8, bh4)) | 0;
          mid = (mid + Math.imul(ah8, bl4)) | 0;
          hi = (hi + Math.imul(ah8, bh4)) | 0;
          lo = (lo + Math.imul(al7, bl5)) | 0;
          mid = (mid + Math.imul(al7, bh5)) | 0;
          mid = (mid + Math.imul(ah7, bl5)) | 0;
          hi = (hi + Math.imul(ah7, bh5)) | 0;
          lo = (lo + Math.imul(al6, bl6)) | 0;
          mid = (mid + Math.imul(al6, bh6)) | 0;
          mid = (mid + Math.imul(ah6, bl6)) | 0;
          hi = (hi + Math.imul(ah6, bh6)) | 0;
          lo = (lo + Math.imul(al5, bl7)) | 0;
          mid = (mid + Math.imul(al5, bh7)) | 0;
          mid = (mid + Math.imul(ah5, bl7)) | 0;
          hi = (hi + Math.imul(ah5, bh7)) | 0;
          lo = (lo + Math.imul(al4, bl8)) | 0;
          mid = (mid + Math.imul(al4, bh8)) | 0;
          mid = (mid + Math.imul(ah4, bl8)) | 0;
          hi = (hi + Math.imul(ah4, bh8)) | 0;
          lo = (lo + Math.imul(al3, bl9)) | 0;
          mid = (mid + Math.imul(al3, bh9)) | 0;
          mid = (mid + Math.imul(ah3, bl9)) | 0;
          hi = (hi + Math.imul(ah3, bh9)) | 0;
          var w12 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = (mid + Math.imul(ah9, bl4)) | 0;
          hi = Math.imul(ah9, bh4);
          lo = (lo + Math.imul(al8, bl5)) | 0;
          mid = (mid + Math.imul(al8, bh5)) | 0;
          mid = (mid + Math.imul(ah8, bl5)) | 0;
          hi = (hi + Math.imul(ah8, bh5)) | 0;
          lo = (lo + Math.imul(al7, bl6)) | 0;
          mid = (mid + Math.imul(al7, bh6)) | 0;
          mid = (mid + Math.imul(ah7, bl6)) | 0;
          hi = (hi + Math.imul(ah7, bh6)) | 0;
          lo = (lo + Math.imul(al6, bl7)) | 0;
          mid = (mid + Math.imul(al6, bh7)) | 0;
          mid = (mid + Math.imul(ah6, bl7)) | 0;
          hi = (hi + Math.imul(ah6, bh7)) | 0;
          lo = (lo + Math.imul(al5, bl8)) | 0;
          mid = (mid + Math.imul(al5, bh8)) | 0;
          mid = (mid + Math.imul(ah5, bl8)) | 0;
          hi = (hi + Math.imul(ah5, bh8)) | 0;
          lo = (lo + Math.imul(al4, bl9)) | 0;
          mid = (mid + Math.imul(al4, bh9)) | 0;
          mid = (mid + Math.imul(ah4, bl9)) | 0;
          hi = (hi + Math.imul(ah4, bh9)) | 0;
          var w13 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = (mid + Math.imul(ah9, bl5)) | 0;
          hi = Math.imul(ah9, bh5);
          lo = (lo + Math.imul(al8, bl6)) | 0;
          mid = (mid + Math.imul(al8, bh6)) | 0;
          mid = (mid + Math.imul(ah8, bl6)) | 0;
          hi = (hi + Math.imul(ah8, bh6)) | 0;
          lo = (lo + Math.imul(al7, bl7)) | 0;
          mid = (mid + Math.imul(al7, bh7)) | 0;
          mid = (mid + Math.imul(ah7, bl7)) | 0;
          hi = (hi + Math.imul(ah7, bh7)) | 0;
          lo = (lo + Math.imul(al6, bl8)) | 0;
          mid = (mid + Math.imul(al6, bh8)) | 0;
          mid = (mid + Math.imul(ah6, bl8)) | 0;
          hi = (hi + Math.imul(ah6, bh8)) | 0;
          lo = (lo + Math.imul(al5, bl9)) | 0;
          mid = (mid + Math.imul(al5, bh9)) | 0;
          mid = (mid + Math.imul(ah5, bl9)) | 0;
          hi = (hi + Math.imul(ah5, bh9)) | 0;
          var w14 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = (mid + Math.imul(ah9, bl6)) | 0;
          hi = Math.imul(ah9, bh6);
          lo = (lo + Math.imul(al8, bl7)) | 0;
          mid = (mid + Math.imul(al8, bh7)) | 0;
          mid = (mid + Math.imul(ah8, bl7)) | 0;
          hi = (hi + Math.imul(ah8, bh7)) | 0;
          lo = (lo + Math.imul(al7, bl8)) | 0;
          mid = (mid + Math.imul(al7, bh8)) | 0;
          mid = (mid + Math.imul(ah7, bl8)) | 0;
          hi = (hi + Math.imul(ah7, bh8)) | 0;
          lo = (lo + Math.imul(al6, bl9)) | 0;
          mid = (mid + Math.imul(al6, bh9)) | 0;
          mid = (mid + Math.imul(ah6, bl9)) | 0;
          hi = (hi + Math.imul(ah6, bh9)) | 0;
          var w15 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = (mid + Math.imul(ah9, bl7)) | 0;
          hi = Math.imul(ah9, bh7);
          lo = (lo + Math.imul(al8, bl8)) | 0;
          mid = (mid + Math.imul(al8, bh8)) | 0;
          mid = (mid + Math.imul(ah8, bl8)) | 0;
          hi = (hi + Math.imul(ah8, bh8)) | 0;
          lo = (lo + Math.imul(al7, bl9)) | 0;
          mid = (mid + Math.imul(al7, bh9)) | 0;
          mid = (mid + Math.imul(ah7, bl9)) | 0;
          hi = (hi + Math.imul(ah7, bh9)) | 0;
          var w16 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = (mid + Math.imul(ah9, bl8)) | 0;
          hi = Math.imul(ah9, bh8);
          lo = (lo + Math.imul(al8, bl9)) | 0;
          mid = (mid + Math.imul(al8, bh9)) | 0;
          mid = (mid + Math.imul(ah8, bl9)) | 0;
          hi = (hi + Math.imul(ah8, bh9)) | 0;
          var w17 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = (mid + Math.imul(ah9, bl9)) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (((c2 + lo) | 0) + ((mid & 8191) << 13)) | 0;
          c2 = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
          w18 &= 67108863;
          o2[0] = w0;
          o2[1] = w1;
          o2[2] = w2;
          o2[3] = w3;
          o2[4] = w4;
          o2[5] = w5;
          o2[6] = w6;
          o2[7] = w7;
          o2[8] = w8;
          o2[9] = w9;
          o2[10] = w10;
          o2[11] = w11;
          o2[12] = w12;
          o2[13] = w13;
          o2[14] = w14;
          o2[15] = w15;
          o2[16] = w16;
          o2[17] = w17;
          o2[18] = w18;
          if (c2 !== 0) {
            o2[19] = c2;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k2 = 0; k2 < out.length - 1; k2++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k2, num.length - 1);
            for (
              var j2 = Math.max(0, k2 - self2.length + 1);
              j2 <= maxJ;
              j2++
            ) {
              var i = k2 - j2;
              var a2 = self2.words[i] | 0;
              var b2 = num.words[j2] | 0;
              var r = a2 * b2;
              var lo = r & 67108863;
              ncarry = (ncarry + ((r / 67108864) | 0)) | 0;
              lo = (lo + rword) | 0;
              rword = lo & 67108863;
              ncarry = (ncarry + (lo >>> 26)) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k2] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k2] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN3.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x2, y2) {
          this.x = x2;
          this.y = y2;
        }
        FFTM.prototype.makeRBT = function makeRBT(N3) {
          var t2 = new Array(N3);
          var l2 = BN3.prototype._countBits(N3) - 1;
          for (var i = 0; i < N3; i++) {
            t2[i] = this.revBin(i, l2, N3);
          }
          return t2;
        };
        FFTM.prototype.revBin = function revBin(x2, l2, N3) {
          if (x2 === 0 || x2 === N3 - 1) return x2;
          var rb = 0;
          for (var i = 0; i < l2; i++) {
            rb |= (x2 & 1) << (l2 - i - 1);
            x2 >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(
          rbt,
          rws,
          iws,
          rtws,
          itws,
          N3
        ) {
          for (var i = 0; i < N3; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(
          rws,
          iws,
          rtws,
          itws,
          N3,
          rbt
        ) {
          this.permute(rbt, rws, iws, rtws, itws, N3);
          for (var s2 = 1; s2 < N3; s2 <<= 1) {
            var l2 = s2 << 1;
            var rtwdf = Math.cos((2 * Math.PI) / l2);
            var itwdf = Math.sin((2 * Math.PI) / l2);
            for (var p2 = 0; p2 < N3; p2 += l2) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j2 = 0; j2 < s2; j2++) {
                var re = rtws[p2 + j2];
                var ie = itws[p2 + j2];
                var ro = rtws[p2 + j2 + s2];
                var io = itws[p2 + j2 + s2];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p2 + j2] = re + ro;
                itws[p2 + j2] = ie + io;
                rtws[p2 + j2 + s2] = re - ro;
                itws[p2 + j2 + s2] = ie - io;
                if (j2 !== l2) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m2) {
          var N3 = Math.max(m2, n) | 1;
          var odd = N3 & 1;
          var i = 0;
          for (N3 = (N3 / 2) | 0; N3; N3 = N3 >>> 1) {
            i++;
          }
          return 1 << (i + 1 + odd);
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
          if (N3 <= 1) return;
          for (var i = 0; i < N3 / 2; i++) {
            var t2 = rws[i];
            rws[i] = rws[N3 - i - 1];
            rws[N3 - i - 1] = t2;
            t2 = iws[i];
            iws[i] = -iws[N3 - i - 1];
            iws[N3 - i - 1] = -t2;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N3) {
          var carry = 0;
          for (var i = 0; i < N3 / 2; i++) {
            var w2 =
              Math.round(ws[2 * i + 1] / N3) * 8192 +
              Math.round(ws[2 * i] / N3) +
              carry;
            ws[i] = w2 & 67108863;
            if (w2 < 67108864) {
              carry = 0;
            } else {
              carry = (w2 / 67108864) | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N3) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N3; ++i) {
            rws[i] = 0;
          }
          assert3(carry === 0);
          assert3((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N3) {
          var ph = new Array(N3);
          for (var i = 0; i < N3; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x2, y2, out) {
          var N3 = 2 * this.guessLen13b(x2.length, y2.length);
          var rbt = this.makeRBT(N3);
          var _2 = this.stub(N3);
          var rws = new Array(N3);
          var rwst = new Array(N3);
          var iwst = new Array(N3);
          var nrws = new Array(N3);
          var nrwst = new Array(N3);
          var niwst = new Array(N3);
          var rmws = out.words;
          rmws.length = N3;
          this.convert13b(x2.words, x2.length, rws, N3);
          this.convert13b(y2.words, y2.length, nrws, N3);
          this.transform(rws, _2, rwst, iwst, N3, rbt);
          this.transform(nrws, _2, nrwst, niwst, N3, rbt);
          for (var i = 0; i < N3; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N3);
          this.transform(rwst, iwst, rmws, _2, N3, rbt);
          this.conjugate(rmws, _2, N3);
          this.normalize13b(rmws, N3);
          out.negative = x2.negative ^ y2.negative;
          out.length = x2.length + y2.length;
          return out.strip();
        };
        BN3.prototype.mul = function mul3(num) {
          var out = new BN3(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN3.prototype.mulf = function mulf(num) {
          var out = new BN3(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN3.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN3.prototype.imuln = function imuln(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w2 = (this.words[i] | 0) * num;
            var lo = (w2 & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += (w2 / 67108864) | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN3.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN3.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN3.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN3.prototype.pow = function pow(num) {
          var w2 = toBitArray(num);
          if (w2.length === 0) return new BN3(1);
          var res = this;
          for (var i = 0; i < w2.length; i++, res = res.sqr()) {
            if (w2[i] !== 0) break;
          }
          if (++i < w2.length) {
            for (var q2 = res.sqr(); i < w2.length; i++, q2 = q2.sqr()) {
              if (w2[i] === 0) continue;
              res = res.mul(q2);
            }
          }
          return res;
        };
        BN3.prototype.iushln = function iushln(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s2 = (bits - r) / 26;
          var carryMask = (67108863 >>> (26 - r)) << (26 - r);
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c2 = ((this.words[i] | 0) - newCarry) << r;
              this.words[i] = c2 | carry;
              carry = newCarry >>> (26 - r);
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s2 !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s2] = this.words[i];
            }
            for (i = 0; i < s2; i++) {
              this.words[i] = 0;
            }
            this.length += s2;
          }
          return this.strip();
        };
        BN3.prototype.ishln = function ishln(bits) {
          assert3(this.negative === 0);
          return this.iushln(bits);
        };
        BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert3(typeof bits === "number" && bits >= 0);
          var h2;
          if (hint) {
            h2 = (hint - (hint % 26)) / 26;
          } else {
            h2 = 0;
          }
          var r = bits % 26;
          var s2 = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ ((67108863 >>> r) << r);
          var maskedWords = extended;
          h2 -= s2;
          h2 = Math.max(0, h2);
          if (maskedWords) {
            for (var i = 0; i < s2; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s2;
          }
          if (s2 === 0) {
          } else if (this.length > s2) {
            this.length -= s2;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s2];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h2); i--) {
            var word = this.words[i] | 0;
            this.words[i] = (carry << (26 - r)) | (word >>> r);
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert3(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN3.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN3.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN3.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN3.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN3.prototype.testn = function testn(bit) {
          assert3(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s2 = (bit - r) / 26;
          var q2 = 1 << r;
          if (this.length <= s2) return false;
          var w2 = this.words[s2];
          return !!(w2 & q2);
        };
        BN3.prototype.imaskn = function imaskn(bits) {
          assert3(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s2 = (bits - r) / 26;
          assert3(
            this.negative === 0,
            "imaskn works only with positive numbers"
          );
          if (this.length <= s2) {
            return this;
          }
          if (r !== 0) {
            s2++;
          }
          this.length = Math.min(s2, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ ((67108863 >>> r) << r);
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN3.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN3.prototype.iaddn = function iaddn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN3.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN3.prototype.isubn = function isubn(num) {
          assert3(typeof num === "number");
          assert3(num < 67108864);
          if (num < 0) return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN3.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN3.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN3.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN3.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w2;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w2 = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul3;
            w2 -= right & 67108863;
            carry = (w2 >> 26) - ((right / 67108864) | 0);
            this.words[i + shift] = w2 & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w2 = (this.words[i + shift] | 0) + carry;
            carry = w2 >> 26;
            this.words[i + shift] = w2 & 67108863;
          }
          if (carry === 0) return this.strip();
          assert3(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w2 = -(this.words[i] | 0) + carry;
            carry = w2 >> 26;
            this.words[i] = w2 & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN3.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a2 = this.clone();
          var b2 = num;
          var bhi = b2.words[b2.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b2 = b2.ushln(shift);
            a2.iushln(shift);
            bhi = b2.words[b2.length - 1] | 0;
          }
          var m2 = a2.length - b2.length;
          var q2;
          if (mode !== "mod") {
            q2 = new BN3(null);
            q2.length = m2 + 1;
            q2.words = new Array(q2.length);
            for (var i = 0; i < q2.length; i++) {
              q2.words[i] = 0;
            }
          }
          var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
          if (diff.negative === 0) {
            a2 = diff;
            if (q2) {
              q2.words[m2] = 1;
            }
          }
          for (var j2 = m2 - 1; j2 >= 0; j2--) {
            var qj =
              (a2.words[b2.length + j2] | 0) * 67108864 +
              (a2.words[b2.length + j2 - 1] | 0);
            qj = Math.min((qj / bhi) | 0, 67108863);
            a2._ishlnsubmul(b2, qj, j2);
            while (a2.negative !== 0) {
              qj--;
              a2.negative = 0;
              a2._ishlnsubmul(b2, 1, j2);
              if (!a2.isZero()) {
                a2.negative ^= 1;
              }
            }
            if (q2) {
              q2.words[j2] = qj;
            }
          }
          if (q2) {
            q2.strip();
          }
          a2.strip();
          if (mode !== "div" && shift !== 0) {
            a2.iushrn(shift);
          }
          return {
            div: q2 || null,
            mod: a2,
          };
        };
        BN3.prototype.divmod = function divmod(num, mode, positive) {
          assert3(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN3(0),
              mod: new BN3(0),
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod,
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod,
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod,
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN3(0),
              mod: this,
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null,
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN3(this.modn(num.words[0])),
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN3(this.modn(num.words[0])),
            };
          }
          return this._wordDiv(num, mode);
        };
        BN3.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN3.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN3.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN3.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero()) return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN3.prototype.modn = function modn(num) {
          assert3(num <= 67108863);
          var p2 = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p2 * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN3.prototype.idivn = function idivn(num) {
          assert3(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w2 = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = (w2 / num) | 0;
            carry = w2 % num;
          }
          return this.strip();
        };
        BN3.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN3.prototype.egcd = function egcd(p2) {
          assert3(p2.negative === 0);
          assert3(!p2.isZero());
          var x2 = this;
          var y2 = p2.clone();
          if (x2.negative !== 0) {
            x2 = x2.umod(p2);
          } else {
            x2 = x2.clone();
          }
          var A2 = new BN3(1);
          var B2 = new BN3(0);
          var C2 = new BN3(0);
          var D2 = new BN3(1);
          var g2 = 0;
          while (x2.isEven() && y2.isEven()) {
            x2.iushrn(1);
            y2.iushrn(1);
            ++g2;
          }
          var yp = y2.clone();
          var xp = x2.clone();
          while (!x2.isZero()) {
            for (
              var i = 0, im = 1;
              (x2.words[0] & im) === 0 && i < 26;
              ++i, im <<= 1
            );
            if (i > 0) {
              x2.iushrn(i);
              while (i-- > 0) {
                if (A2.isOdd() || B2.isOdd()) {
                  A2.iadd(yp);
                  B2.isub(xp);
                }
                A2.iushrn(1);
                B2.iushrn(1);
              }
            }
            for (
              var j2 = 0, jm = 1;
              (y2.words[0] & jm) === 0 && j2 < 26;
              ++j2, jm <<= 1
            );
            if (j2 > 0) {
              y2.iushrn(j2);
              while (j2-- > 0) {
                if (C2.isOdd() || D2.isOdd()) {
                  C2.iadd(yp);
                  D2.isub(xp);
                }
                C2.iushrn(1);
                D2.iushrn(1);
              }
            }
            if (x2.cmp(y2) >= 0) {
              x2.isub(y2);
              A2.isub(C2);
              B2.isub(D2);
            } else {
              y2.isub(x2);
              C2.isub(A2);
              D2.isub(B2);
            }
          }
          return {
            a: C2,
            b: D2,
            gcd: y2.iushln(g2),
          };
        };
        BN3.prototype._invmp = function _invmp(p2) {
          assert3(p2.negative === 0);
          assert3(!p2.isZero());
          var a2 = this;
          var b2 = p2.clone();
          if (a2.negative !== 0) {
            a2 = a2.umod(p2);
          } else {
            a2 = a2.clone();
          }
          var x1 = new BN3(1);
          var x2 = new BN3(0);
          var delta = b2.clone();
          while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
            for (
              var i = 0, im = 1;
              (a2.words[0] & im) === 0 && i < 26;
              ++i, im <<= 1
            );
            if (i > 0) {
              a2.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (
              var j2 = 0, jm = 1;
              (b2.words[0] & jm) === 0 && j2 < 26;
              ++j2, jm <<= 1
            );
            if (j2 > 0) {
              b2.iushrn(j2);
              while (j2-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a2.cmp(b2) >= 0) {
              a2.isub(b2);
              x1.isub(x2);
            } else {
              b2.isub(a2);
              x2.isub(x1);
            }
          }
          var res;
          if (a2.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p2);
          }
          return res;
        };
        BN3.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();
          var a2 = this.clone();
          var b2 = num.clone();
          a2.negative = 0;
          b2.negative = 0;
          for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
            a2.iushrn(1);
            b2.iushrn(1);
          }
          do {
            while (a2.isEven()) {
              a2.iushrn(1);
            }
            while (b2.isEven()) {
              b2.iushrn(1);
            }
            var r = a2.cmp(b2);
            if (r < 0) {
              var t2 = a2;
              a2 = b2;
              b2 = t2;
            } else if (r === 0 || b2.cmpn(1) === 0) {
              break;
            }
            a2.isub(b2);
          } while (true);
          return b2.iushln(shift);
        };
        BN3.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN3.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN3.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN3.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN3.prototype.bincn = function bincn(bit) {
          assert3(typeof bit === "number");
          var r = bit % 26;
          var s2 = (bit - r) / 26;
          var q2 = 1 << r;
          if (this.length <= s2) {
            this._expand(s2 + 1);
            this.words[s2] |= q2;
            return this;
          }
          var carry = q2;
          for (var i = s2; carry !== 0 && i < this.length; i++) {
            var w2 = this.words[i] | 0;
            w2 += carry;
            carry = w2 >>> 26;
            w2 &= 67108863;
            this.words[i] = w2;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN3.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN3.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert3(num <= 67108863, "Number is too big");
            var w2 = this.words[0] | 0;
            res = w2 === num ? 0 : w2 < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN3.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };
        BN3.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a2 = this.words[i] | 0;
            var b2 = num.words[i] | 0;
            if (a2 === b2) continue;
            if (a2 < b2) {
              res = -1;
            } else if (a2 > b2) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN3.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN3.prototype.gt = function gt2(num) {
          return this.cmp(num) === 1;
        };
        BN3.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN3.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN3.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN3.prototype.lt = function lt2(num) {
          return this.cmp(num) === -1;
        };
        BN3.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN3.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN3.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN3.prototype.eq = function eq4(num) {
          return this.cmp(num) === 0;
        };
        BN3.red = function red(num) {
          return new Red(num);
        };
        BN3.prototype.toRed = function toRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          assert3(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN3.prototype.fromRed = function fromRed() {
          assert3(
            this.red,
            "fromRed works only with numbers in reduction context"
          );
          return this.red.convertFrom(this);
        };
        BN3.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN3.prototype.forceRed = function forceRed(ctx) {
          assert3(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN3.prototype.redAdd = function redAdd(num) {
          assert3(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN3.prototype.redIAdd = function redIAdd(num) {
          assert3(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN3.prototype.redSub = function redSub(num) {
          assert3(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN3.prototype.redISub = function redISub(num) {
          assert3(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN3.prototype.redShl = function redShl(num) {
          assert3(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN3.prototype.redMul = function redMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN3.prototype.redIMul = function redIMul(num) {
          assert3(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN3.prototype.redSqr = function redSqr() {
          assert3(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN3.prototype.redISqr = function redISqr() {
          assert3(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN3.prototype.redSqrt = function redSqrt() {
          assert3(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN3.prototype.redInvm = function redInvm() {
          assert3(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN3.prototype.redNeg = function redNeg() {
          assert3(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN3.prototype.redPow = function redPow(num) {
          assert3(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null,
        };
        function MPrime(name2, p2) {
          this.name = name2;
          this.p = new BN3(p2, 16);
          this.n = this.p.bitLength();
          this.k = new BN3(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN3(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w2 = num.words[i] | 0;
            lo += w2 * 977;
            num.words[i] = lo & 67108863;
            lo = w2 * 64 + ((lo / 67108864) | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN3._prime = function prime(name2) {
          if (primes[name2]) return primes[name2];
          var prime2;
          if (name2 === "k256") {
            prime2 = new K256();
          } else if (name2 === "p224") {
            prime2 = new P224();
          } else if (name2 === "p192") {
            prime2 = new P192();
          } else if (name2 === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name2);
          }
          primes[name2] = prime2;
          return prime2;
        };
        function Red(m2) {
          if (typeof m2 === "string") {
            var prime = BN3._prime(m2);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert3(m2.gtn(1), "modulus must be greater than 1");
            this.m = m2;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a2) {
          assert3(a2.negative === 0, "red works only with positives");
          assert3(a2.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a2, b2) {
          assert3(
            (a2.negative | b2.negative) === 0,
            "red works only with positives"
          );
          assert3(
            a2.red && a2.red === b2.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a2) {
          if (this.prime) return this.prime.ireduce(a2)._forceRed(this);
          return a2.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg3(a2) {
          if (a2.isZero()) {
            return a2.clone();
          }
          return this.m.sub(a2)._forceRed(this);
        };
        Red.prototype.add = function add3(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.add(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.iadd(b2);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.sub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a2, b2) {
          this._verify2(a2, b2);
          var res = a2.isub(b2);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a2, num) {
          this._verify1(a2);
          return this.imod(a2.ushln(num));
        };
        Red.prototype.imul = function imul(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.imul(b2));
        };
        Red.prototype.mul = function mul3(a2, b2) {
          this._verify2(a2, b2);
          return this.imod(a2.mul(b2));
        };
        Red.prototype.isqr = function isqr(a2) {
          return this.imul(a2, a2.clone());
        };
        Red.prototype.sqr = function sqr(a2) {
          return this.mul(a2, a2);
        };
        Red.prototype.sqrt = function sqrt(a2) {
          if (a2.isZero()) return a2.clone();
          var mod3 = this.m.andln(3);
          assert3(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN3(1)).iushrn(2);
            return this.pow(a2, pow);
          }
          var q2 = this.m.subn(1);
          var s2 = 0;
          while (!q2.isZero() && q2.andln(1) === 0) {
            s2++;
            q2.iushrn(1);
          }
          assert3(!q2.isZero());
          var one = new BN3(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z2 = this.m.bitLength();
          z2 = new BN3(2 * z2 * z2).toRed(this);
          while (this.pow(z2, lpow).cmp(nOne) !== 0) {
            z2.redIAdd(nOne);
          }
          var c2 = this.pow(z2, q2);
          var r = this.pow(a2, q2.addn(1).iushrn(1));
          var t2 = this.pow(a2, q2);
          var m2 = s2;
          while (t2.cmp(one) !== 0) {
            var tmp = t2;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert3(i < m2);
            var b2 = this.pow(c2, new BN3(1).iushln(m2 - i - 1));
            r = r.redMul(b2);
            c2 = b2.redSqr();
            t2 = t2.redMul(c2);
            m2 = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a2) {
          var inv = a2._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a2, num) {
          if (num.isZero()) return new BN3(1).toRed(this);
          if (num.cmpn(1) === 0) return a2.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN3(1).toRed(this);
          wnd[1] = a2;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a2);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j2 = start - 1; j2 >= 0; j2--) {
              var bit = (word >> j2) & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j2 !== 0)) continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN3.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m2) {
          Red.call(this, m2);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - (this.shift % 26);
          }
          this.r = new BN3(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a2, b2) {
          if (a2.isZero() || b2.isZero()) {
            a2.words[0] = 0;
            a2.length = 1;
            return a2;
          }
          var t2 = a2.imul(b2);
          var c2 = t2
            .maskn(this.shift)
            .mul(this.minv)
            .imaskn(this.shift)
            .mul(this.m);
          var u2 = t2.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul3(a2, b2) {
          if (a2.isZero() || b2.isZero()) return new BN3(0)._forceRed(this);
          var t2 = a2.mul(b2);
          var c2 = t2
            .maskn(this.shift)
            .mul(this.minv)
            .imaskn(this.shift)
            .mul(this.m);
          var u2 = t2.isub(c2).iushrn(this.shift);
          var res = u2;
          if (u2.cmp(this.m) >= 0) {
            res = u2.isub(this.m);
          } else if (u2.cmpn(0) < 0) {
            res = u2.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a2) {
          var res = this.imod(a2._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    },
  });

  // node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version;
  var init_version = __esm({
    "node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors,
    _censorErrors,
    LogLevels,
    _logLevel,
    _globalLogger,
    _normalizeError,
    LogLevel,
    ErrorCode,
    HEX,
    Logger;
  var init_lib = __esm({
    "node_modules/@ethersproject/bignumber/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version();
      _permanentCensorErrors = false;
      _censorErrors = false;
      LogLevels = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel = LogLevels["default"];
      _globalLogger = null;
      _normalizeError = _checkNormalize();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel || (LogLevel = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode || (ErrorCode = {}));
      HEX = "0123456789abcdef";
      Logger = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel > LogLevels[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX[value[i] >> 4];
                  hex += HEX[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger) {
            _globalLogger = new Logger(version);
          }
          return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
            Logger.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel = level;
        }
        static from(version89) {
          return new Logger(version89);
        }
      };
      Logger.errors = ErrorCode;
      Logger.levels = LogLevel;
    },
  });

  // node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version2;
  var init_version2 = __esm({
    "node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version2 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable(value) {
    return !!value.toHexString;
  }
  function addSlice(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
  }
  function isInteger(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      value = value.toHexString();
    }
    if (isHexString2(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice(new Uint8Array(result));
    }
    if (isBytes(value)) {
      return addSlice(new Uint8Array(value));
    }
    return logger.throwArgumentError("invalid arrayify value", "value", value);
  }
  function isHexString2(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      return value.toHexString();
    }
    if (isHexString2(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters[(v2 & 240) >> 4] + HexCharacters[v2 & 15];
      }
      return result;
    }
    return logger.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString2(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  var logger, HexCharacters;
  var init_lib2 = __esm({
    "node_modules/@ethersproject/bignumber/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib();
      init_version2();
      logger = new Logger(version2);
      HexCharacters = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/bignumber/lib.esm/_version.js
  var version3;
  var init_version3 = __esm({
    "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
      version3 = "bignumber/5.5.0";
    },
  });

  // node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
  function isBigNumberish(value) {
    return (
      value != null &&
      (BigNumber.isBigNumber(value) ||
        (typeof value === "number" && value % 1 === 0) ||
        (typeof value === "string" && !!value.match(/^-?[0-9]+$/)) ||
        isHexString2(value) ||
        typeof value === "bigint" ||
        isBytes(value))
    );
  }
  function toHex(value) {
    if (typeof value !== "string") {
      return toHex(value.toString(16));
    }
    if (value[0] === "-") {
      value = value.substring(1);
      if (value[0] === "-") {
        logger2.throwArgumentError("invalid hex", "value", value);
      }
      value = toHex(value);
      if (value === "0x00") {
        return value;
      }
      return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (value === "0x") {
      return "0x00";
    }
    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }
    return value;
  }
  function toBigNumber(value) {
    return BigNumber.from(toHex(value));
  }
  function toBN(value) {
    const hex = BigNumber.from(value).toHexString();
    if (hex[0] === "-") {
      return new BN("-" + hex.substring(3), 16);
    }
    return new BN(hex.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
    const params = { fault, operation };
    if (value != null) {
      params.value = value;
    }
    return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
    return new BN(value, 36).toString(16);
  }
  function _base16To36(value) {
    return new BN(value, 16).toString(36);
  }
  var import_bn,
    BN,
    logger2,
    _constructorGuard,
    MAX_SAFE,
    _warnedToStringRadix,
    BigNumber;
  var init_bignumber = __esm({
    "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
      "use strict";
      import_bn = __toESM(require_bn());
      init_lib2();
      init_lib();
      init_version3();
      BN = import_bn.default.BN;
      logger2 = new Logger(version3);
      _constructorGuard = {};
      MAX_SAFE = 9007199254740991;
      _warnedToStringRadix = false;
      BigNumber = class {
        constructor(constructorGuard, hex) {
          logger2.checkNew(new.target, BigNumber);
          if (constructorGuard !== _constructorGuard) {
            logger2.throwError(
              "cannot call constructor directly; use BigNumber.from",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new (BigNumber)",
              }
            );
          }
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
        }
        fromTwos(value) {
          return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
          return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
          if (this._hex[0] === "-") {
            return BigNumber.from(this._hex.substring(1));
          }
          return this;
        }
        add(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
          const o2 = BigNumber.from(other);
          if (o2.isZero()) {
            throwFault("division by zero", "div");
          }
          return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
          const value = toBN(other);
          if (value.isNeg()) {
            throwFault("cannot modulo negative values", "mod");
          }
          return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
          const value = toBN(other);
          if (value.isNeg()) {
            throwFault("cannot raise to negative values", "pow");
          }
          return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("cannot 'and' negative values", "and");
          }
          return toBigNumber(toBN(this).and(value));
        }
        or(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("cannot 'or' negative values", "or");
          }
          return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("cannot 'xor' negative values", "xor");
          }
          return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
          if (this.isNegative() || value < 0) {
            throwFault("cannot mask negative values", "mask");
          }
          return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
          if (this.isNegative() || value < 0) {
            throwFault("cannot shift negative values", "shl");
          }
          return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
          if (this.isNegative() || value < 0) {
            throwFault("cannot shift negative values", "shr");
          }
          return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
          return toBN(this).eq(toBN(other));
        }
        lt(other) {
          return toBN(this).lt(toBN(other));
        }
        lte(other) {
          return toBN(this).lte(toBN(other));
        }
        gt(other) {
          return toBN(this).gt(toBN(other));
        }
        gte(other) {
          return toBN(this).gte(toBN(other));
        }
        isNegative() {
          return this._hex[0] === "-";
        }
        isZero() {
          return toBN(this).isZero();
        }
        toNumber() {
          try {
            return toBN(this).toNumber();
          } catch (error) {
            throwFault("overflow", "toNumber", this.toString());
          }
          return null;
        }
        toBigInt() {
          try {
            return BigInt(this.toString());
          } catch (e) {}
          return logger2.throwError(
            "this platform does not support BigInt",
            Logger.errors.UNSUPPORTED_OPERATION,
            {
              value: this.toString(),
            }
          );
        }
        toString() {
          if (arguments.length > 0) {
            if (arguments[0] === 10) {
              if (!_warnedToStringRadix) {
                _warnedToStringRadix = true;
                logger2.warn(
                  "BigNumber.toString does not accept any parameters; base-10 is assumed"
                );
              }
            } else if (arguments[0] === 16) {
              logger2.throwError(
                "BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",
                Logger.errors.UNEXPECTED_ARGUMENT,
                {}
              );
            } else {
              logger2.throwError(
                "BigNumber.toString does not accept parameters",
                Logger.errors.UNEXPECTED_ARGUMENT,
                {}
              );
            }
          }
          return toBN(this).toString(10);
        }
        toHexString() {
          return this._hex;
        }
        toJSON(key2) {
          return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
          if (value instanceof BigNumber) {
            return value;
          }
          if (typeof value === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) {
              return new BigNumber(_constructorGuard, toHex(value));
            }
            if (value.match(/^-?[0-9]+$/)) {
              return new BigNumber(_constructorGuard, toHex(new BN(value)));
            }
            return logger2.throwArgumentError(
              "invalid BigNumber string",
              "value",
              value
            );
          }
          if (typeof value === "number") {
            if (value % 1) {
              throwFault("underflow", "BigNumber.from", value);
            }
            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
              throwFault("overflow", "BigNumber.from", value);
            }
            return BigNumber.from(String(value));
          }
          const anyValue = value;
          if (typeof anyValue === "bigint") {
            return BigNumber.from(anyValue.toString());
          }
          if (isBytes(anyValue)) {
            return BigNumber.from(hexlify(anyValue));
          }
          if (anyValue) {
            if (anyValue.toHexString) {
              const hex = anyValue.toHexString();
              if (typeof hex === "string") {
                return BigNumber.from(hex);
              }
            } else {
              let hex = anyValue._hex;
              if (hex == null && anyValue.type === "BigNumber") {
                hex = anyValue.hex;
              }
              if (typeof hex === "string") {
                if (
                  isHexString2(hex) ||
                  (hex[0] === "-" && isHexString2(hex.substring(1)))
                ) {
                  return BigNumber.from(hex);
                }
              }
            }
          }
          return logger2.throwArgumentError(
            "invalid BigNumber value",
            "value",
            value
          );
        }
        static isBigNumber(value) {
          return !!(value && value._isBigNumber);
        }
      };
    },
  });

  // node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
  function throwFault2(message, fault, operation, value) {
    const params = { fault, operation };
    if (value !== void 0) {
      params.value = value;
    }
    return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
  }
  function getMultiplier(decimals) {
    if (typeof decimals !== "number") {
      try {
        decimals = BigNumber.from(decimals).toNumber();
      } catch (e) {}
    }
    if (
      typeof decimals === "number" &&
      decimals >= 0 &&
      decimals <= 256 &&
      !(decimals % 1)
    ) {
      return "1" + zeros.substring(0, decimals);
    }
    return logger3.throwArgumentError(
      "invalid decimal size",
      "decimals",
      decimals
    );
  }
  function formatFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    value = BigNumber.from(value);
    const negative = value.lt(Zero);
    if (negative) {
      value = value.mul(NegativeOne);
    }
    let fraction = value.mod(multiplier).toString();
    while (fraction.length < multiplier.length - 1) {
      fraction = "0" + fraction;
    }
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const whole = value.div(multiplier).toString();
    if (multiplier.length === 1) {
      value = whole;
    } else {
      value = whole + "." + fraction;
    }
    if (negative) {
      value = "-" + value;
    }
    return value;
  }
  function parseFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
      logger3.throwArgumentError("invalid decimal value", "value", value);
    }
    const negative = value.substring(0, 1) === "-";
    if (negative) {
      value = value.substring(1);
    }
    if (value === ".") {
      logger3.throwArgumentError("missing value", "value", value);
    }
    const comps = value.split(".");
    if (comps.length > 2) {
      logger3.throwArgumentError("too many decimal points", "value", value);
    }
    let whole = comps[0],
      fraction = comps[1];
    if (!whole) {
      whole = "0";
    }
    if (!fraction) {
      fraction = "0";
    }
    while (fraction[fraction.length - 1] === "0") {
      fraction = fraction.substring(0, fraction.length - 1);
    }
    if (fraction.length > multiplier.length - 1) {
      throwFault2(
        "fractional component exceeds decimals",
        "underflow",
        "parseFixed"
      );
    }
    if (fraction === "") {
      fraction = "0";
    }
    while (fraction.length < multiplier.length - 1) {
      fraction += "0";
    }
    const wholeValue = BigNumber.from(whole);
    const fractionValue = BigNumber.from(fraction);
    let wei = wholeValue.mul(multiplier).add(fractionValue);
    if (negative) {
      wei = wei.mul(NegativeOne);
    }
    return wei;
  }
  var logger3,
    _constructorGuard2,
    Zero,
    NegativeOne,
    zeros,
    FixedFormat,
    FixedNumber,
    ONE,
    BUMP;
  var init_fixednumber = __esm({
    "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
      "use strict";
      init_lib2();
      init_lib();
      init_version3();
      init_bignumber();
      logger3 = new Logger(version3);
      _constructorGuard2 = {};
      Zero = BigNumber.from(0);
      NegativeOne = BigNumber.from(-1);
      zeros = "0";
      while (zeros.length < 256) {
        zeros += zeros;
      }
      FixedFormat = class {
        constructor(constructorGuard, signed, width, decimals) {
          if (constructorGuard !== _constructorGuard2) {
            logger3.throwError(
              "cannot use FixedFormat constructor; use FixedFormat.from",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new FixedFormat",
              }
            );
          }
          this.signed = signed;
          this.width = width;
          this.decimals = decimals;
          this.name =
            (signed ? "" : "u") +
            "fixed" +
            String(width) +
            "x" +
            String(decimals);
          this._multiplier = getMultiplier(decimals);
          Object.freeze(this);
        }
        static from(value) {
          if (value instanceof FixedFormat) {
            return value;
          }
          if (typeof value === "number") {
            value = `fixed128x${value}`;
          }
          let signed = true;
          let width = 128;
          let decimals = 18;
          if (typeof value === "string") {
            if (value === "fixed") {
            } else if (value === "ufixed") {
              signed = false;
            } else {
              const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
              if (!match) {
                logger3.throwArgumentError(
                  "invalid fixed format",
                  "format",
                  value
                );
              }
              signed = match[1] !== "u";
              width = parseInt(match[2]);
              decimals = parseInt(match[3]);
            }
          } else if (value) {
            const check = (key2, type, defaultValue) => {
              if (value[key2] == null) {
                return defaultValue;
              }
              if (typeof value[key2] !== type) {
                logger3.throwArgumentError(
                  "invalid fixed format (" + key2 + " not " + type + ")",
                  "format." + key2,
                  value[key2]
                );
              }
              return value[key2];
            };
            signed = check("signed", "boolean", signed);
            width = check("width", "number", width);
            decimals = check("decimals", "number", decimals);
          }
          if (width % 8) {
            logger3.throwArgumentError(
              "invalid fixed format width (not byte aligned)",
              "format.width",
              width
            );
          }
          if (decimals > 80) {
            logger3.throwArgumentError(
              "invalid fixed format (decimals too large)",
              "format.decimals",
              decimals
            );
          }
          return new FixedFormat(_constructorGuard2, signed, width, decimals);
        }
      };
      FixedNumber = class {
        constructor(constructorGuard, hex, value, format) {
          logger3.checkNew(new.target, FixedNumber);
          if (constructorGuard !== _constructorGuard2) {
            logger3.throwError(
              "cannot use FixedNumber constructor; use FixedNumber.from",
              Logger.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new FixedFormat",
              }
            );
          }
          this.format = format;
          this._hex = hex;
          this._value = value;
          this._isFixedNumber = true;
          Object.freeze(this);
        }
        _checkFormat(other) {
          if (this.format.name !== other.format.name) {
            logger3.throwArgumentError(
              "incompatible format; use fixedNumber.toFormat",
              "other",
              other
            );
          }
        }
        addUnsafe(other) {
          this._checkFormat(other);
          const a2 = parseFixed(this._value, this.format.decimals);
          const b2 = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(
            a2.add(b2),
            this.format.decimals,
            this.format
          );
        }
        subUnsafe(other) {
          this._checkFormat(other);
          const a2 = parseFixed(this._value, this.format.decimals);
          const b2 = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(
            a2.sub(b2),
            this.format.decimals,
            this.format
          );
        }
        mulUnsafe(other) {
          this._checkFormat(other);
          const a2 = parseFixed(this._value, this.format.decimals);
          const b2 = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(
            a2.mul(b2).div(this.format._multiplier),
            this.format.decimals,
            this.format
          );
        }
        divUnsafe(other) {
          this._checkFormat(other);
          const a2 = parseFixed(this._value, this.format.decimals);
          const b2 = parseFixed(other._value, other.format.decimals);
          return FixedNumber.fromValue(
            a2.mul(this.format._multiplier).div(b2),
            this.format.decimals,
            this.format
          );
        }
        floor() {
          const comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (this.isNegative() && hasFraction) {
            result = result.subUnsafe(ONE.toFormat(result.format));
          }
          return result;
        }
        ceiling() {
          const comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          let result = FixedNumber.from(comps[0], this.format);
          const hasFraction = !comps[1].match(/^(0*)$/);
          if (!this.isNegative() && hasFraction) {
            result = result.addUnsafe(ONE.toFormat(result.format));
          }
          return result;
        }
        round(decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          const comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          if (decimals < 0 || decimals > 80 || decimals % 1) {
            logger3.throwArgumentError(
              "invalid decimal count",
              "decimals",
              decimals
            );
          }
          if (comps[1].length <= decimals) {
            return this;
          }
          const factor = FixedNumber.from(
            "1" + zeros.substring(0, decimals),
            this.format
          );
          const bump = BUMP.toFormat(this.format);
          return this.mulUnsafe(factor)
            .addUnsafe(bump)
            .floor()
            .divUnsafe(factor);
        }
        isZero() {
          return this._value === "0.0" || this._value === "0";
        }
        isNegative() {
          return this._value[0] === "-";
        }
        toString() {
          return this._value;
        }
        toHexString(width) {
          if (width == null) {
            return this._hex;
          }
          if (width % 8) {
            logger3.throwArgumentError("invalid byte width", "width", width);
          }
          const hex = BigNumber.from(this._hex)
            .fromTwos(this.format.width)
            .toTwos(width)
            .toHexString();
          return hexZeroPad(hex, width / 8);
        }
        toUnsafeFloat() {
          return parseFloat(this.toString());
        }
        toFormat(format) {
          return FixedNumber.fromString(this._value, format);
        }
        static fromValue(value, decimals, format) {
          if (format == null && decimals != null && !isBigNumberish(decimals)) {
            format = decimals;
            decimals = null;
          }
          if (decimals == null) {
            decimals = 0;
          }
          if (format == null) {
            format = "fixed";
          }
          return FixedNumber.fromString(
            formatFixed(value, decimals),
            FixedFormat.from(format)
          );
        }
        static fromString(value, format) {
          if (format == null) {
            format = "fixed";
          }
          const fixedFormat = FixedFormat.from(format);
          const numeric = parseFixed(value, fixedFormat.decimals);
          if (!fixedFormat.signed && numeric.lt(Zero)) {
            throwFault2(
              "unsigned value cannot be negative",
              "overflow",
              "value",
              value
            );
          }
          let hex = null;
          if (fixedFormat.signed) {
            hex = numeric.toTwos(fixedFormat.width).toHexString();
          } else {
            hex = numeric.toHexString();
            hex = hexZeroPad(hex, fixedFormat.width / 8);
          }
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
        }
        static fromBytes(value, format) {
          if (format == null) {
            format = "fixed";
          }
          const fixedFormat = FixedFormat.from(format);
          if (arrayify(value).length > fixedFormat.width / 8) {
            throw new Error("overflow");
          }
          let numeric = BigNumber.from(value);
          if (fixedFormat.signed) {
            numeric = numeric.fromTwos(fixedFormat.width);
          }
          const hex = numeric
            .toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width)
            .toHexString();
          const decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
        }
        static from(value, format) {
          if (typeof value === "string") {
            return FixedNumber.fromString(value, format);
          }
          if (isBytes(value)) {
            return FixedNumber.fromBytes(value, format);
          }
          try {
            return FixedNumber.fromValue(value, 0, format);
          } catch (error) {
            if (error.code !== Logger.errors.INVALID_ARGUMENT) {
              throw error;
            }
          }
          return logger3.throwArgumentError(
            "invalid FixedNumber value",
            "value",
            value
          );
        }
        static isFixedNumber(value) {
          return !!(value && value._isFixedNumber);
        }
      };
      ONE = FixedNumber.from(1);
      BUMP = FixedNumber.from("0.5");
    },
  });

  // node_modules/@ethersproject/bignumber/lib.esm/index.js
  var init_lib3 = __esm({
    "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
      init_bignumber();
      init_fixednumber();
      init_bignumber();
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version4;
  var init_version4 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version4 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize2() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors2,
    _censorErrors2,
    LogLevels2,
    _logLevel2,
    _globalLogger2,
    _normalizeError2,
    LogLevel2,
    ErrorCode2,
    HEX2,
    Logger2;
  var init_lib4 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version4();
      _permanentCensorErrors2 = false;
      _censorErrors2 = false;
      LogLevels2 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel2 = LogLevels2["default"];
      _globalLogger2 = null;
      _normalizeError2 = _checkNormalize2();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel2 || (LogLevel2 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode2 || (ErrorCode2 = {}));
      HEX2 = "0123456789abcdef";
      Logger2 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels2[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel2 > LogLevels2[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger2.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger2.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger2.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors2) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger2.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX2[value[i] >> 4];
                  hex += HEX2[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger2.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError2) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError2,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger2.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger2.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger2.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger2.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger2.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger2) {
            _globalLogger2 = new Logger2(version4);
          }
          return _globalLogger2;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors2) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors2 = !!censorship;
          _permanentCensorErrors2 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels2[logLevel.toLowerCase()];
          if (level == null) {
            Logger2.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel2 = level;
        }
        static from(version89) {
          return new Logger2(version89);
        }
      };
      Logger2.errors = ErrorCode2;
      Logger2.levels = LogLevel2;
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version5;
  var init_version5 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version5 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function getStatic(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function _isFrozen(object) {
    if (object === void 0 || object === null || opaque[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen(value)) {
          return false;
        }
      }
      return true;
    }
    return logger4.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly(result, key2, deepCopy(value));
      }
      return result;
    }
    return logger4.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy(object) {
    return _deepCopy(object);
  }
  var logger4, opaque, Description;
  var init_lib5 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib4();
      init_version5();
      logger4 = new Logger2(version5);
      opaque = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
      Description = class {
        constructor(info) {
          for (const key2 in info) {
            this[key2] = deepCopy(info[key2]);
          }
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/_version.js
  var version6;
  var init_version6 = __esm({
    "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
      version6 = "abi/5.5.0";
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/fragments.js
  function checkModifier(type, name2) {
    if (type === "bytes" || type === "string") {
      if (ModifiersBytes[name2]) {
        return true;
      }
    } else if (type === "address") {
      if (name2 === "payable") {
        return true;
      }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
      if (ModifiersNest[name2]) {
        return true;
      }
    }
    if (ModifiersBytes[name2] || name2 === "payable") {
      logger5.throwArgumentError("invalid modifier", "name", name2);
    }
    return false;
  }
  function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
      logger5.throwArgumentError(
        `unexpected character at position ${i}`,
        "param",
        param
      );
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
      let node2 = {
        type: "",
        name: "",
        parent: parent2,
        state: { allowType: true },
      };
      if (allowIndexed) {
        node2.indexed = false;
      }
      return node2;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node = parent;
    for (let i = 0; i < param.length; i++) {
      let c2 = param[i];
      switch (c2) {
        case "(":
          if (node.state.allowType && node.type === "") {
            node.type = "tuple";
          } else if (!node.state.allowParams) {
            throwError(i);
          }
          node.state.allowType = false;
          node.type = verifyType(node.type);
          node.components = [newNode(node)];
          node = node.components[0];
          break;
        case ")":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let child = node;
          node = node.parent;
          if (!node) {
            throwError(i);
          }
          delete child.parent;
          node.state.allowParams = false;
          node.state.allowName = true;
          node.state.allowArray = true;
          break;
        case ",":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let sibling = newNode(node.parent);
          node.parent.components.push(sibling);
          delete node.parent;
          node = sibling;
          break;
        case " ":
          if (node.state.allowType) {
            if (node.type !== "") {
              node.type = verifyType(node.type);
              delete node.state.allowType;
              node.state.allowName = true;
              node.state.allowParams = true;
            }
          }
          if (node.state.allowName) {
            if (node.name !== "") {
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }
                if (node.indexed) {
                  throwError(i);
                }
                node.indexed = true;
                node.name = "";
              } else if (checkModifier(node.type, node.name)) {
                node.name = "";
              } else {
                node.state.allowName = false;
              }
            }
          }
          break;
        case "[":
          if (!node.state.allowArray) {
            throwError(i);
          }
          node.type += c2;
          node.state.allowArray = false;
          node.state.allowName = false;
          node.state.readArray = true;
          break;
        case "]":
          if (!node.state.readArray) {
            throwError(i);
          }
          node.type += c2;
          node.state.readArray = false;
          node.state.allowArray = true;
          node.state.allowName = true;
          break;
        default:
          if (node.state.allowType) {
            node.type += c2;
            node.state.allowParams = true;
            node.state.allowArray = true;
          } else if (node.state.allowName) {
            node.name += c2;
            delete node.state.allowArray;
          } else if (node.state.readArray) {
            node.type += c2;
          } else {
            throwError(i);
          }
      }
    }
    if (node.parent) {
      logger5.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }
      if (node.indexed) {
        throwError(originalParam.length - 7);
      }
      node.indexed = true;
      node.name = "";
    } else if (checkModifier(node.type, node.name)) {
      node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
  }
  function populate(object, params) {
    for (let key2 in params) {
      defineReadOnly(object, key2, params[key2]);
    }
  }
  function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) =>
      ParamType.fromString(param, allowIndex)
    );
  }
  function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger5.throwArgumentError(
          "invalid human-readable ABI signature",
          "value",
          value
        );
      }
      if (!comps[1].match(/^[0-9]+$/)) {
        logger5.throwArgumentError(
          "invalid human-readable ABI signature gas",
          "value",
          value
        );
      }
      params.gas = BigNumber.from(comps[1]);
      return comps[0];
    }
    return value;
  }
  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;
        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;
        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;
        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;
        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;
        case "external":
        case "public":
        case "":
          break;
        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }
  function verifyState(value) {
    let result = {
      constant: false,
      payable: true,
      stateMutability: "payable",
    };
    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant =
        result.stateMutability === "view" || result.stateMutability === "pure";
      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger5.throwArgumentError(
            "cannot have constant function with mutability " +
              result.stateMutability,
            "value",
            value
          );
        }
      }
      result.payable = result.stateMutability === "payable";
      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger5.throwArgumentError(
            "cannot have payable function with mutability " +
              result.stateMutability,
            "value",
            value
          );
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;
      if (
        value.constant == null &&
        !result.payable &&
        value.type !== "constructor"
      ) {
        logger5.throwArgumentError(
          "unable to determine stateMutability",
          "value",
          value
        );
      }
      result.constant = !!value.constant;
      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }
      if (result.payable && result.constant) {
        logger5.throwArgumentError(
          "cannot have constant payable function",
          "value",
          value
        );
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger5.throwArgumentError(
        "unable to determine stateMutability",
        "value",
        value
      );
    }
    return result;
  }
  function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") {
      logger5.throwArgumentError(
        `cannot specify user defined ${sig} error`,
        "fragment",
        fragment
      );
    }
    return fragment;
  }
  function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
      type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
      type = "int256" + type.substring(3);
    }
    return type;
  }
  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger5.throwArgumentError(
        `invalid identifier "${value}"`,
        "value",
        value
      );
    }
    return value;
  }
  function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
      let c2 = value[offset];
      if (c2 === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c2;
        if (c2 === "(") {
          depth++;
        } else if (c2 === ")") {
          depth--;
          if (depth === -1) {
            logger5.throwArgumentError(
              "unbalanced parenthesis",
              "value",
              value
            );
          }
        }
      }
    }
    if (accum) {
      result.push(accum);
    }
    return result;
  }
  var logger5,
    _constructorGuard3,
    ModifiersBytes,
    ModifiersNest,
    FormatTypes,
    paramTypeArray,
    ParamType,
    Fragment,
    EventFragment,
    ConstructorFragment,
    FunctionFragment,
    ErrorFragment,
    regexIdentifier,
    regexParen;
  var init_fragments = __esm({
    "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
      "use strict";
      init_lib3();
      init_lib5();
      init_lib4();
      init_version6();
      logger5 = new Logger2(version6);
      _constructorGuard3 = {};
      ModifiersBytes = { calldata: true, memory: true, storage: true };
      ModifiersNest = { calldata: true, memory: true };
      FormatTypes = Object.freeze({
        sighash: "sighash",
        minimal: "minimal",
        full: "full",
        json: "json",
      });
      paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
      ParamType = class {
        constructor(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard3) {
            logger5.throwError(
              "use fromString",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new ParamType()",
              }
            );
          }
          populate(this, params);
          let match = this.type.match(paramTypeArray);
          if (match) {
            populate(this, {
              arrayLength: parseInt(match[2] || "-1"),
              arrayChildren: ParamType.fromObject({
                type: match[1],
                components: this.components,
              }),
              baseType: "array",
            });
          } else {
            populate(this, {
              arrayLength: null,
              arrayChildren: null,
              baseType: this.components != null ? "tuple" : this.type,
            });
          }
          this._isParamType = true;
          Object.freeze(this);
        }
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger5.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            let result2 = {
              type: this.baseType === "tuple" ? "tuple" : this.type,
              name: this.name || void 0,
            };
            if (typeof this.indexed === "boolean") {
              result2.indexed = this.indexed;
            }
            if (this.components) {
              result2.components = this.components.map((comp) =>
                JSON.parse(comp.format(format))
              );
            }
            return JSON.stringify(result2);
          }
          let result = "";
          if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result +=
              "[" +
              (this.arrayLength < 0 ? "" : String(this.arrayLength)) +
              "]";
          } else {
            if (this.baseType === "tuple") {
              if (format !== FormatTypes.sighash) {
                result += this.type;
              }
              result +=
                "(" +
                this.components
                  .map((comp) => comp.format(format))
                  .join(format === FormatTypes.full ? ", " : ",") +
                ")";
            } else {
              result += this.type;
            }
          }
          if (format !== FormatTypes.sighash) {
            if (this.indexed === true) {
              result += " indexed";
            }
            if (format === FormatTypes.full && this.name) {
              result += " " + this.name;
            }
          }
          return result;
        }
        static from(value, allowIndexed) {
          if (typeof value === "string") {
            return ParamType.fromString(value, allowIndexed);
          }
          return ParamType.fromObject(value);
        }
        static fromObject(value) {
          if (ParamType.isParamType(value)) {
            return value;
          }
          return new ParamType(_constructorGuard3, {
            name: value.name || null,
            type: verifyType(value.type),
            indexed: value.indexed == null ? null : !!value.indexed,
            components: value.components
              ? value.components.map(ParamType.fromObject)
              : null,
          });
        }
        static fromString(value, allowIndexed) {
          function ParamTypify(node) {
            return ParamType.fromObject({
              name: node.name,
              type: node.type,
              indexed: node.indexed,
              components: node.components,
            });
          }
          return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
          return !!(value != null && value._isParamType);
        }
      };
      Fragment = class {
        constructor(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard3) {
            logger5.throwError(
              "use a static from method",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new Fragment()",
              }
            );
          }
          populate(this, params);
          this._isFragment = true;
          Object.freeze(this);
        }
        static from(value) {
          if (Fragment.isFragment(value)) {
            return value;
          }
          if (typeof value === "string") {
            return Fragment.fromString(value);
          }
          return Fragment.fromObject(value);
        }
        static fromObject(value) {
          if (Fragment.isFragment(value)) {
            return value;
          }
          switch (value.type) {
            case "function":
              return FunctionFragment.fromObject(value);
            case "event":
              return EventFragment.fromObject(value);
            case "constructor":
              return ConstructorFragment.fromObject(value);
            case "error":
              return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
              return null;
          }
          return logger5.throwArgumentError(
            "invalid fragment object",
            "value",
            value
          );
        }
        static fromString(value) {
          value = value.replace(/\s/g, " ");
          value = value
            .replace(/\(/g, " (")
            .replace(/\)/g, ") ")
            .replace(/\s+/g, " ");
          value = value.trim();
          if (value.split(" ")[0] === "event") {
            return EventFragment.fromString(value.substring(5).trim());
          } else if (value.split(" ")[0] === "function") {
            return FunctionFragment.fromString(value.substring(8).trim());
          } else if (value.split("(")[0].trim() === "constructor") {
            return ConstructorFragment.fromString(value.trim());
          } else if (value.split(" ")[0] === "error") {
            return ErrorFragment.fromString(value.substring(5).trim());
          }
          return logger5.throwArgumentError(
            "unsupported fragment",
            "value",
            value
          );
        }
        static isFragment(value) {
          return !!(value && value._isFragment);
        }
      };
      EventFragment = class extends Fragment {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger5.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "event",
              anonymous: this.anonymous,
              name: this.name,
              inputs: this.inputs.map((input) =>
                JSON.parse(input.format(format))
              ),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "event ";
          }
          result +=
            this.name +
            "(" +
            this.inputs
              .map((input) => input.format(format))
              .join(format === FormatTypes.full ? ", " : ",") +
            ") ";
          if (format !== FormatTypes.sighash) {
            if (this.anonymous) {
              result += "anonymous ";
            }
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return EventFragment.fromString(value);
          }
          return EventFragment.fromObject(value);
        }
        static fromObject(value) {
          if (EventFragment.isEventFragment(value)) {
            return value;
          }
          if (value.type !== "event") {
            logger5.throwArgumentError("invalid event object", "value", value);
          }
          const params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            type: "event",
          };
          return new EventFragment(_constructorGuard3, params);
        }
        static fromString(value) {
          let match = value.match(regexParen);
          if (!match) {
            logger5.throwArgumentError("invalid event string", "value", value);
          }
          let anonymous = false;
          match[3].split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
              case "anonymous":
                anonymous = true;
                break;
              case "":
                break;
              default:
                logger5.warn("unknown modifier: " + modifier);
            }
          });
          return EventFragment.fromObject({
            name: match[1].trim(),
            anonymous,
            inputs: parseParams(match[2], true),
            type: "event",
          });
        }
        static isEventFragment(value) {
          return value && value._isFragment && value.type === "event";
        }
      };
      ConstructorFragment = class extends Fragment {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger5.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "constructor",
              stateMutability:
                this.stateMutability !== "nonpayable"
                  ? this.stateMutability
                  : void 0,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : void 0,
              inputs: this.inputs.map((input) =>
                JSON.parse(input.format(format))
              ),
            });
          }
          if (format === FormatTypes.sighash) {
            logger5.throwError(
              "cannot format a constructor for sighash",
              Logger2.errors.UNSUPPORTED_OPERATION,
              {
                operation: "format(sighash)",
              }
            );
          }
          let result =
            "constructor(" +
            this.inputs
              .map((input) => input.format(format))
              .join(format === FormatTypes.full ? ", " : ",") +
            ") ";
          if (this.stateMutability && this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return ConstructorFragment.fromString(value);
          }
          return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
          if (ConstructorFragment.isConstructorFragment(value)) {
            return value;
          }
          if (value.type !== "constructor") {
            logger5.throwArgumentError(
              "invalid constructor object",
              "value",
              value
            );
          }
          let state = verifyState(value);
          if (state.constant) {
            logger5.throwArgumentError(
              "constructor cannot be constant",
              "value",
              value
            );
          }
          const params = {
            name: null,
            type: value.type,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null,
          };
          return new ConstructorFragment(_constructorGuard3, params);
        }
        static fromString(value) {
          let params = { type: "constructor" };
          value = parseGas(value, params);
          let parens = value.match(regexParen);
          if (!parens || parens[1].trim() !== "constructor") {
            logger5.throwArgumentError(
              "invalid constructor string",
              "value",
              value
            );
          }
          params.inputs = parseParams(parens[2].trim(), false);
          parseModifiers(parens[3].trim(), params);
          return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
          return value && value._isFragment && value.type === "constructor";
        }
      };
      FunctionFragment = class extends ConstructorFragment {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger5.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "function",
              name: this.name,
              constant: this.constant,
              stateMutability:
                this.stateMutability !== "nonpayable"
                  ? this.stateMutability
                  : void 0,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : void 0,
              inputs: this.inputs.map((input) =>
                JSON.parse(input.format(format))
              ),
              outputs: this.outputs.map((output) =>
                JSON.parse(output.format(format))
              ),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "function ";
          }
          result +=
            this.name +
            "(" +
            this.inputs
              .map((input) => input.format(format))
              .join(format === FormatTypes.full ? ", " : ",") +
            ") ";
          if (format !== FormatTypes.sighash) {
            if (this.stateMutability) {
              if (this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
              }
            } else if (this.constant) {
              result += "view ";
            }
            if (this.outputs && this.outputs.length) {
              result +=
                "returns (" +
                this.outputs.map((output) => output.format(format)).join(", ") +
                ") ";
            }
            if (this.gas != null) {
              result += "@" + this.gas.toString() + " ";
            }
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return FunctionFragment.fromString(value);
          }
          return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
          if (FunctionFragment.isFunctionFragment(value)) {
            return value;
          }
          if (value.type !== "function") {
            logger5.throwArgumentError(
              "invalid function object",
              "value",
              value
            );
          }
          let state = verifyState(value);
          const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            outputs: value.outputs
              ? value.outputs.map(ParamType.fromObject)
              : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null,
          };
          return new FunctionFragment(_constructorGuard3, params);
        }
        static fromString(value) {
          let params = { type: "function" };
          value = parseGas(value, params);
          let comps = value.split(" returns ");
          if (comps.length > 2) {
            logger5.throwArgumentError(
              "invalid function string",
              "value",
              value
            );
          }
          let parens = comps[0].match(regexParen);
          if (!parens) {
            logger5.throwArgumentError(
              "invalid function signature",
              "value",
              value
            );
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          parseModifiers(parens[3].trim(), params);
          if (comps.length > 1) {
            let returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") {
              logger5.throwArgumentError("unexpected tokens", "value", value);
            }
            params.outputs = parseParams(returns[2], false);
          } else {
            params.outputs = [];
          }
          return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
          return value && value._isFragment && value.type === "function";
        }
      };
      ErrorFragment = class extends Fragment {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger5.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "error",
              name: this.name,
              inputs: this.inputs.map((input) =>
                JSON.parse(input.format(format))
              ),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "error ";
          }
          result +=
            this.name +
            "(" +
            this.inputs
              .map((input) => input.format(format))
              .join(format === FormatTypes.full ? ", " : ",") +
            ") ";
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return ErrorFragment.fromString(value);
          }
          return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
          if (ErrorFragment.isErrorFragment(value)) {
            return value;
          }
          if (value.type !== "error") {
            logger5.throwArgumentError("invalid error object", "value", value);
          }
          const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          };
          return checkForbidden(new ErrorFragment(_constructorGuard3, params));
        }
        static fromString(value) {
          let params = { type: "error" };
          let parens = value.match(regexParen);
          if (!parens) {
            logger5.throwArgumentError(
              "invalid error signature",
              "value",
              value
            );
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
          return value && value._isFragment && value.type === "error";
        }
      };
      regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
      regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version7;
  var init_version7 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version7 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/abi/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable2(value) {
    return !!value.toHexString;
  }
  function addSlice2(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice2(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger2(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes2(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger2(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger2(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify2(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger6.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice2(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable2(value)) {
      value = value.toHexString();
    }
    if (isHexString3(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger6.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice2(new Uint8Array(result));
    }
    if (isBytes2(value)) {
      return addSlice2(new Uint8Array(value));
    }
    return logger6.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
    const objects = items.map((item) => arrayify2(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice2(result);
  }
  function isHexString3(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify2(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger6.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters2[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable2(value)) {
      return value.toHexString();
    }
    if (isHexString3(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger6.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes2(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters2[(v2 & 240) >> 4] + HexCharacters2[v2 & 15];
      }
      return result;
    }
    return logger6.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify2(data);
    } else if (!isHexString3(data) || data.length % 2) {
      logger6.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify2(item).substring(2);
    });
    return result;
  }
  function hexZeroPad2(value, length) {
    if (typeof value !== "string") {
      value = hexlify2(value);
    } else if (!isHexString3(value)) {
      logger6.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger6.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  var logger6, HexCharacters2;
  var init_lib6 = __esm({
    "node_modules/@ethersproject/abi/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib4();
      init_version7();
      logger6 = new Logger2(version7);
      HexCharacters2 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
  function checkResultErrors(result) {
    const errors = [];
    const checkErrors = function (path3, object) {
      if (!Array.isArray(object)) {
        return;
      }
      for (let key2 in object) {
        const childPath = path3.slice();
        childPath.push(key2);
        try {
          checkErrors(childPath, object[key2]);
        } catch (error) {
          errors.push({ path: childPath, error });
        }
      }
    };
    checkErrors([], result);
    return errors;
  }
  var logger7, Coder, Writer, Reader;
  var init_abstract_coder = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
      "use strict";
      init_lib6();
      init_lib3();
      init_lib5();
      init_lib4();
      init_version6();
      logger7 = new Logger2(version6);
      Coder = class {
        constructor(name2, type, localName, dynamic) {
          this.name = name2;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
        }
        _throwError(message, value) {
          logger7.throwArgumentError(message, this.localName, value);
        }
      };
      Writer = class {
        constructor(wordSize) {
          defineReadOnly(this, "wordSize", wordSize || 32);
          this._data = [];
          this._dataLength = 0;
          this._padding = new Uint8Array(wordSize);
        }
        get data() {
          return hexConcat(this._data);
        }
        get length() {
          return this._dataLength;
        }
        _writeData(data) {
          this._data.push(data);
          this._dataLength += data.length;
          return data.length;
        }
        appendWriter(writer) {
          return this._writeData(concat(writer._data));
        }
        writeBytes(value) {
          let bytes = arrayify2(value);
          const paddingOffset = bytes.length % this.wordSize;
          if (paddingOffset) {
            bytes = concat([bytes, this._padding.slice(paddingOffset)]);
          }
          return this._writeData(bytes);
        }
        _getValue(value) {
          let bytes = arrayify2(BigNumber.from(value));
          if (bytes.length > this.wordSize) {
            logger7.throwError(
              "value out-of-bounds",
              Logger2.errors.BUFFER_OVERRUN,
              {
                length: this.wordSize,
                offset: bytes.length,
              }
            );
          }
          if (bytes.length % this.wordSize) {
            bytes = concat([
              this._padding.slice(bytes.length % this.wordSize),
              bytes,
            ]);
          }
          return bytes;
        }
        writeValue(value) {
          return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
          const offset = this._data.length;
          this._data.push(this._padding);
          this._dataLength += this.wordSize;
          return (value) => {
            this._data[offset] = this._getValue(value);
          };
        }
      };
      Reader = class {
        constructor(data, wordSize, coerceFunc, allowLoose) {
          defineReadOnly(this, "_data", arrayify2(data));
          defineReadOnly(this, "wordSize", wordSize || 32);
          defineReadOnly(this, "_coerceFunc", coerceFunc);
          defineReadOnly(this, "allowLoose", allowLoose);
          this._offset = 0;
        }
        get data() {
          return hexlify2(this._data);
        }
        get consumed() {
          return this._offset;
        }
        static coerce(name2, value) {
          let match = name2.match("^u?int([0-9]+)$");
          if (match && parseInt(match[1]) <= 48) {
            value = value.toNumber();
          }
          return value;
        }
        coerce(name2, value) {
          if (this._coerceFunc) {
            return this._coerceFunc(name2, value);
          }
          return Reader.coerce(name2, value);
        }
        _peekBytes(offset, length, loose) {
          let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
          if (this._offset + alignedLength > this._data.length) {
            if (
              this.allowLoose &&
              loose &&
              this._offset + length <= this._data.length
            ) {
              alignedLength = length;
            } else {
              logger7.throwError(
                "data out-of-bounds",
                Logger2.errors.BUFFER_OVERRUN,
                {
                  length: this._data.length,
                  offset: this._offset + alignedLength,
                }
              );
            }
          }
          return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
          return new Reader(
            this._data.slice(this._offset + offset),
            this.wordSize,
            this._coerceFunc,
            this.allowLoose
          );
        }
        readBytes(length, loose) {
          let bytes = this._peekBytes(0, length, !!loose);
          this._offset += bytes.length;
          return bytes.slice(0, length);
        }
        readValue() {
          return BigNumber.from(this.readBytes(this.wordSize));
        }
      };
    },
  });

  // node_modules/@ethersproject/address/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version8;
  var init_version8 = __esm({
    "node_modules/@ethersproject/address/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version8 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/address/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize3() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors3,
    _censorErrors3,
    LogLevels3,
    _logLevel3,
    _globalLogger3,
    _normalizeError3,
    LogLevel3,
    ErrorCode3,
    HEX3,
    Logger3;
  var init_lib7 = __esm({
    "node_modules/@ethersproject/address/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version8();
      _permanentCensorErrors3 = false;
      _censorErrors3 = false;
      LogLevels3 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel3 = LogLevels3["default"];
      _globalLogger3 = null;
      _normalizeError3 = _checkNormalize3();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel3 || (LogLevel3 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode3 || (ErrorCode3 = {}));
      HEX3 = "0123456789abcdef";
      Logger3 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels3[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel3 > LogLevels3[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger3.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger3.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger3.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors3) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger3.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX3[value[i] >> 4];
                  hex += HEX3[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger3.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError3) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger3.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError3,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger3.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger3.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger3.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger3.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger3.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger3.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger3.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger3) {
            _globalLogger3 = new Logger3(version8);
          }
          return _globalLogger3;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger3.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors3) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger3.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors3 = !!censorship;
          _permanentCensorErrors3 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels3[logLevel.toLowerCase()];
          if (level == null) {
            Logger3.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel3 = level;
        }
        static from(version89) {
          return new Logger3(version89);
        }
      };
      Logger3.errors = ErrorCode3;
      Logger3.levels = LogLevel3;
    },
  });

  // node_modules/@ethersproject/address/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version9;
  var init_version9 = __esm({
    "node_modules/@ethersproject/address/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version9 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/address/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable3(value) {
    return !!value.toHexString;
  }
  function addSlice3(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice3(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger3(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes3(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger3(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger3(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify3(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger8.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice3(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable3(value)) {
      value = value.toHexString();
    }
    if (isHexString4(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger8.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice3(new Uint8Array(result));
    }
    if (isBytes3(value)) {
      return addSlice3(new Uint8Array(value));
    }
    return logger8.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat2(items) {
    const objects = items.map((item) => arrayify3(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice3(result);
  }
  function stripZeros(value) {
    let result = arrayify3(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function isHexString4(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify3(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger8.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters3[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable3(value)) {
      return value.toHexString();
    }
    if (isHexString4(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger8.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes3(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters3[(v2 & 240) >> 4] + HexCharacters3[v2 & 15];
      }
      return result;
    }
    return logger8.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data) {
    if (typeof data !== "string") {
      data = hexlify3(data);
    } else if (!isHexString4(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice2(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify3(data);
    } else if (!isHexString4(data) || data.length % 2) {
      logger8.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  var logger8, HexCharacters3;
  var init_lib8 = __esm({
    "node_modules/@ethersproject/address/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib7();
      init_version9();
      logger8 = new Logger3(version9);
      HexCharacters3 = "0123456789abcdef";
    },
  });

  // node_modules/js-sha3/src/sha3.js
  var require_sha3 = __commonJS({
    "node_modules/js-sha3/src/sha3.js"(exports, module) {
      (function () {
        "use strict";
        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root = WINDOW ? window : {};
        if (root.JS_SHA3_NO_WINDOW) {
          WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS =
          !root.JS_SHA3_NO_NODE_JS &&
          typeof process === "object" &&
          process.versions &&
          process.versions.node;
        if (NODE_JS) {
          root = global;
        } else if (WEB_WORKER) {
          root = self;
        }
        var COMMON_JS =
          !root.JS_SHA3_NO_COMMON_JS &&
          typeof module === "object" &&
          module.exports;
        var AMD = typeof define === "function" && define.amd;
        var ARRAY_BUFFER =
          !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0,
          2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136,
          0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648,
          32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128,
          2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648,
          32896, 2147483648, 2147483649, 0, 2147516424, 2147483648,
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
        var CSHAKE_BYTEPAD = {
          128: 168,
          256: 136,
        };
        if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
          Array.isArray = function (obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
          };
        }
        if (
          ARRAY_BUFFER &&
          (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)
        ) {
          ArrayBuffer.isView = function (obj) {
            return (
              typeof obj === "object" &&
              obj.buffer &&
              obj.buffer.constructor === ArrayBuffer
            );
          };
        }
        var createOutputMethod = function (bits2, padding2, outputType) {
          return function (message) {
            return new Keccak(bits2, padding2, bits2)
              .update(message)
              [outputType]();
          };
        };
        var createShakeOutputMethod = function (bits2, padding2, outputType) {
          return function (message, outputBits) {
            return new Keccak(bits2, padding2, outputBits)
              .update(message)
              [outputType]();
          };
        };
        var createCshakeOutputMethod = function (bits2, padding2, outputType) {
          return function (message, outputBits, n, s2) {
            return methods["cshake" + bits2]
              .update(message, outputBits, n, s2)
              [outputType]();
          };
        };
        var createKmacOutputMethod = function (bits2, padding2, outputType) {
          return function (key2, message, outputBits, s2) {
            return methods["kmac" + bits2]
              .update(key2, message, outputBits, s2)
              [outputType]();
          };
        };
        var createOutputMethods = function (
          method,
          createMethod2,
          bits2,
          padding2
        ) {
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createMethod2(bits2, padding2, type);
          }
          return method;
        };
        var createMethod = function (bits2, padding2) {
          var method = createOutputMethod(bits2, padding2, "hex");
          method.create = function () {
            return new Keccak(bits2, padding2, bits2);
          };
          method.update = function (message) {
            return method.create().update(message);
          };
          return createOutputMethods(
            method,
            createOutputMethod,
            bits2,
            padding2
          );
        };
        var createShakeMethod = function (bits2, padding2) {
          var method = createShakeOutputMethod(bits2, padding2, "hex");
          method.create = function (outputBits) {
            return new Keccak(bits2, padding2, outputBits);
          };
          method.update = function (message, outputBits) {
            return method.create(outputBits).update(message);
          };
          return createOutputMethods(
            method,
            createShakeOutputMethod,
            bits2,
            padding2
          );
        };
        var createCshakeMethod = function (bits2, padding2) {
          var w2 = CSHAKE_BYTEPAD[bits2];
          var method = createCshakeOutputMethod(bits2, padding2, "hex");
          method.create = function (outputBits, n, s2) {
            if (!n && !s2) {
              return methods["shake" + bits2].create(outputBits);
            } else {
              return new Keccak(bits2, padding2, outputBits).bytepad(
                [n, s2],
                w2
              );
            }
          };
          method.update = function (message, outputBits, n, s2) {
            return method.create(outputBits, n, s2).update(message);
          };
          return createOutputMethods(
            method,
            createCshakeOutputMethod,
            bits2,
            padding2
          );
        };
        var createKmacMethod = function (bits2, padding2) {
          var w2 = CSHAKE_BYTEPAD[bits2];
          var method = createKmacOutputMethod(bits2, padding2, "hex");
          method.create = function (key2, outputBits, s2) {
            return new Kmac(bits2, padding2, outputBits)
              .bytepad(["KMAC", s2], w2)
              .bytepad([key2], w2);
          };
          method.update = function (key2, message, outputBits, s2) {
            return method.create(key2, outputBits, s2).update(message);
          };
          return createOutputMethods(
            method,
            createKmacOutputMethod,
            bits2,
            padding2
          );
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod },
          {
            name: "shake",
            padding: SHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createShakeMethod,
          },
          {
            name: "cshake",
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createCshakeMethod,
          },
          {
            name: "kmac",
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createKmacMethod,
          },
        ];
        var methods = {},
          methodNames = [];
        for (var i = 0; i < algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j2 = 0; j2 < bits.length; ++j2) {
            var methodName = algorithm.name + "_" + bits[j2];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(
              bits[j2],
              algorithm.padding
            );
            if (algorithm.name !== "sha3") {
              var newMethodName = algorithm.name + bits[j2];
              methodNames.push(newMethodName);
              methods[newMethodName] = methods[methodName];
            }
          }
        }
        function Keccak(bits2, padding2, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding2;
          this.outputBits = outputBits;
          this.reset = true;
          this.finalized = false;
          this.block = 0;
          this.start = 0;
          this.blockCount = (1600 - (bits2 << 1)) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for (var i2 = 0; i2 < 50; ++i2) {
            this.s[i2] = 0;
          }
        }
        Keccak.prototype.update = function (message) {
          if (this.finalized) {
            throw new Error(FINALIZE_ERROR);
          }
          var notString,
            type = typeof message;
          if (type !== "string") {
            if (type === "object") {
              if (message === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                message = new Uint8Array(message);
              } else if (!Array.isArray(message)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var blocks = this.blocks,
            byteCount = this.byteCount,
            length = message.length,
            blockCount = this.blockCount,
            index = 0,
            s2 = this.s,
            i2,
            code;
          while (index < length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i2 = 1; i2 < blockCount + 1; ++i2) {
                blocks[i2] = 0;
              }
            }
            if (notString) {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
              }
            } else {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks[i2 >> 2] |= (192 | (code >> 6)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks[i2 >> 2] |= (224 | (code >> 12)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 6) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                } else {
                  code =
                    65536 +
                    (((code & 1023) << 10) |
                      (message.charCodeAt(++index) & 1023));
                  blocks[i2 >> 2] |= (240 | (code >> 18)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 12) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 6) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                }
              }
            }
            this.lastByteIndex = i2;
            if (i2 >= byteCount) {
              this.start = i2 - byteCount;
              this.block = blocks[blockCount];
              for (i2 = 0; i2 < blockCount; ++i2) {
                s2[i2] ^= blocks[i2];
              }
              f2(s2);
              this.reset = true;
            } else {
              this.start = i2;
            }
          }
          return this;
        };
        Keccak.prototype.encode = function (x2, right) {
          var o2 = x2 & 255,
            n = 1;
          var bytes = [o2];
          x2 = x2 >> 8;
          o2 = x2 & 255;
          while (o2 > 0) {
            bytes.unshift(o2);
            x2 = x2 >> 8;
            o2 = x2 & 255;
            ++n;
          }
          if (right) {
            bytes.push(n);
          } else {
            bytes.unshift(n);
          }
          this.update(bytes);
          return bytes.length;
        };
        Keccak.prototype.encodeString = function (str) {
          var notString,
            type = typeof str;
          if (type !== "string") {
            if (type === "object") {
              if (str === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                str = new Uint8Array(str);
              } else if (!Array.isArray(str)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var bytes = 0,
            length = str.length;
          if (notString) {
            bytes = length;
          } else {
            for (var i2 = 0; i2 < str.length; ++i2) {
              var code = str.charCodeAt(i2);
              if (code < 128) {
                bytes += 1;
              } else if (code < 2048) {
                bytes += 2;
              } else if (code < 55296 || code >= 57344) {
                bytes += 3;
              } else {
                code =
                  65536 +
                  (((code & 1023) << 10) | (str.charCodeAt(++i2) & 1023));
                bytes += 4;
              }
            }
          }
          bytes += this.encode(bytes * 8);
          this.update(str);
          return bytes;
        };
        Keccak.prototype.bytepad = function (strs, w2) {
          var bytes = this.encode(w2);
          for (var i2 = 0; i2 < strs.length; ++i2) {
            bytes += this.encodeString(strs[i2]);
          }
          var paddingBytes = w2 - (bytes % w2);
          var zeros2 = [];
          zeros2.length = paddingBytes;
          this.update(zeros2);
          return this;
        };
        Keccak.prototype.finalize = function () {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          var blocks = this.blocks,
            i2 = this.lastByteIndex,
            blockCount = this.blockCount,
            s2 = this.s;
          blocks[i2 >> 2] |= this.padding[i2 & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i2 = 0; i2 < blockCount; ++i2) {
            s2[i2] ^= blocks[i2];
          }
          f2(s2);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var hex = "",
            block;
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              block = s2[i2];
              hex +=
                HEX_CHARS[(block >> 4) & 15] +
                HEX_CHARS[block & 15] +
                HEX_CHARS[(block >> 12) & 15] +
                HEX_CHARS[(block >> 8) & 15] +
                HEX_CHARS[(block >> 20) & 15] +
                HEX_CHARS[(block >> 16) & 15] +
                HEX_CHARS[(block >> 28) & 15] +
                HEX_CHARS[(block >> 24) & 15];
            }
            if (j3 % blockCount === 0) {
              f2(s2);
              i2 = 0;
            }
          }
          if (extraBytes) {
            block = s2[i2];
            hex += HEX_CHARS[(block >> 4) & 15] + HEX_CHARS[block & 15];
            if (extraBytes > 1) {
              hex +=
                HEX_CHARS[(block >> 12) & 15] + HEX_CHARS[(block >> 8) & 15];
            }
            if (extraBytes > 2) {
              hex +=
                HEX_CHARS[(block >> 20) & 15] + HEX_CHARS[(block >> 16) & 15];
            }
          }
          return hex;
        };
        Keccak.prototype.arrayBuffer = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) {
            buffer = new ArrayBuffer((outputBlocks + 1) << 2);
          } else {
            buffer = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer);
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              array[j3] = s2[i2];
            }
            if (j3 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            array[i2] = s2[i2];
            buffer = buffer.slice(0, bytes);
          }
          return buffer;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var array = [],
            offset,
            block;
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              offset = j3 << 2;
              block = s2[i2];
              array[offset] = block & 255;
              array[offset + 1] = (block >> 8) & 255;
              array[offset + 2] = (block >> 16) & 255;
              array[offset + 3] = (block >> 24) & 255;
            }
            if (j3 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            offset = j3 << 2;
            block = s2[i2];
            array[offset] = block & 255;
            if (extraBytes > 1) {
              array[offset + 1] = (block >> 8) & 255;
            }
            if (extraBytes > 2) {
              array[offset + 2] = (block >> 16) & 255;
            }
          }
          return array;
        };
        function Kmac(bits2, padding2, outputBits) {
          Keccak.call(this, bits2, padding2, outputBits);
        }
        Kmac.prototype = new Keccak();
        Kmac.prototype.finalize = function () {
          this.encode(this.outputBits, true);
          return Keccak.prototype.finalize.call(this);
        };
        var f2 = function (s2) {
          var h2,
            l2,
            n,
            c0,
            c1,
            c2,
            c3,
            c4,
            c5,
            c6,
            c7,
            c8,
            c9,
            b0,
            b1,
            b2,
            b3,
            b4,
            b5,
            b6,
            b7,
            b8,
            b9,
            b10,
            b11,
            b12,
            b13,
            b14,
            b15,
            b16,
            b17,
            b18,
            b19,
            b20,
            b21,
            b22,
            b23,
            b24,
            b25,
            b26,
            b27,
            b28,
            b29,
            b30,
            b31,
            b32,
            b33,
            b34,
            b35,
            b36,
            b37,
            b38,
            b39,
            b40,
            b41,
            b42,
            b43,
            b44,
            b45,
            b46,
            b47,
            b48,
            b49;
          for (n = 0; n < 48; n += 2) {
            c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
            c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
            c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
            c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
            c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
            c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
            c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
            c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
            c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
            c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
            h2 = c8 ^ ((c2 << 1) | (c3 >>> 31));
            l2 = c9 ^ ((c3 << 1) | (c2 >>> 31));
            s2[0] ^= h2;
            s2[1] ^= l2;
            s2[10] ^= h2;
            s2[11] ^= l2;
            s2[20] ^= h2;
            s2[21] ^= l2;
            s2[30] ^= h2;
            s2[31] ^= l2;
            s2[40] ^= h2;
            s2[41] ^= l2;
            h2 = c0 ^ ((c4 << 1) | (c5 >>> 31));
            l2 = c1 ^ ((c5 << 1) | (c4 >>> 31));
            s2[2] ^= h2;
            s2[3] ^= l2;
            s2[12] ^= h2;
            s2[13] ^= l2;
            s2[22] ^= h2;
            s2[23] ^= l2;
            s2[32] ^= h2;
            s2[33] ^= l2;
            s2[42] ^= h2;
            s2[43] ^= l2;
            h2 = c2 ^ ((c6 << 1) | (c7 >>> 31));
            l2 = c3 ^ ((c7 << 1) | (c6 >>> 31));
            s2[4] ^= h2;
            s2[5] ^= l2;
            s2[14] ^= h2;
            s2[15] ^= l2;
            s2[24] ^= h2;
            s2[25] ^= l2;
            s2[34] ^= h2;
            s2[35] ^= l2;
            s2[44] ^= h2;
            s2[45] ^= l2;
            h2 = c4 ^ ((c8 << 1) | (c9 >>> 31));
            l2 = c5 ^ ((c9 << 1) | (c8 >>> 31));
            s2[6] ^= h2;
            s2[7] ^= l2;
            s2[16] ^= h2;
            s2[17] ^= l2;
            s2[26] ^= h2;
            s2[27] ^= l2;
            s2[36] ^= h2;
            s2[37] ^= l2;
            s2[46] ^= h2;
            s2[47] ^= l2;
            h2 = c6 ^ ((c0 << 1) | (c1 >>> 31));
            l2 = c7 ^ ((c1 << 1) | (c0 >>> 31));
            s2[8] ^= h2;
            s2[9] ^= l2;
            s2[18] ^= h2;
            s2[19] ^= l2;
            s2[28] ^= h2;
            s2[29] ^= l2;
            s2[38] ^= h2;
            s2[39] ^= l2;
            s2[48] ^= h2;
            s2[49] ^= l2;
            b0 = s2[0];
            b1 = s2[1];
            b32 = (s2[11] << 4) | (s2[10] >>> 28);
            b33 = (s2[10] << 4) | (s2[11] >>> 28);
            b14 = (s2[20] << 3) | (s2[21] >>> 29);
            b15 = (s2[21] << 3) | (s2[20] >>> 29);
            b46 = (s2[31] << 9) | (s2[30] >>> 23);
            b47 = (s2[30] << 9) | (s2[31] >>> 23);
            b28 = (s2[40] << 18) | (s2[41] >>> 14);
            b29 = (s2[41] << 18) | (s2[40] >>> 14);
            b20 = (s2[2] << 1) | (s2[3] >>> 31);
            b21 = (s2[3] << 1) | (s2[2] >>> 31);
            b2 = (s2[13] << 12) | (s2[12] >>> 20);
            b3 = (s2[12] << 12) | (s2[13] >>> 20);
            b34 = (s2[22] << 10) | (s2[23] >>> 22);
            b35 = (s2[23] << 10) | (s2[22] >>> 22);
            b16 = (s2[33] << 13) | (s2[32] >>> 19);
            b17 = (s2[32] << 13) | (s2[33] >>> 19);
            b48 = (s2[42] << 2) | (s2[43] >>> 30);
            b49 = (s2[43] << 2) | (s2[42] >>> 30);
            b40 = (s2[5] << 30) | (s2[4] >>> 2);
            b41 = (s2[4] << 30) | (s2[5] >>> 2);
            b22 = (s2[14] << 6) | (s2[15] >>> 26);
            b23 = (s2[15] << 6) | (s2[14] >>> 26);
            b4 = (s2[25] << 11) | (s2[24] >>> 21);
            b5 = (s2[24] << 11) | (s2[25] >>> 21);
            b36 = (s2[34] << 15) | (s2[35] >>> 17);
            b37 = (s2[35] << 15) | (s2[34] >>> 17);
            b18 = (s2[45] << 29) | (s2[44] >>> 3);
            b19 = (s2[44] << 29) | (s2[45] >>> 3);
            b10 = (s2[6] << 28) | (s2[7] >>> 4);
            b11 = (s2[7] << 28) | (s2[6] >>> 4);
            b42 = (s2[17] << 23) | (s2[16] >>> 9);
            b43 = (s2[16] << 23) | (s2[17] >>> 9);
            b24 = (s2[26] << 25) | (s2[27] >>> 7);
            b25 = (s2[27] << 25) | (s2[26] >>> 7);
            b6 = (s2[36] << 21) | (s2[37] >>> 11);
            b7 = (s2[37] << 21) | (s2[36] >>> 11);
            b38 = (s2[47] << 24) | (s2[46] >>> 8);
            b39 = (s2[46] << 24) | (s2[47] >>> 8);
            b30 = (s2[8] << 27) | (s2[9] >>> 5);
            b31 = (s2[9] << 27) | (s2[8] >>> 5);
            b12 = (s2[18] << 20) | (s2[19] >>> 12);
            b13 = (s2[19] << 20) | (s2[18] >>> 12);
            b44 = (s2[29] << 7) | (s2[28] >>> 25);
            b45 = (s2[28] << 7) | (s2[29] >>> 25);
            b26 = (s2[38] << 8) | (s2[39] >>> 24);
            b27 = (s2[39] << 8) | (s2[38] >>> 24);
            b8 = (s2[48] << 14) | (s2[49] >>> 18);
            b9 = (s2[49] << 14) | (s2[48] >>> 18);
            s2[0] = b0 ^ (~b2 & b4);
            s2[1] = b1 ^ (~b3 & b5);
            s2[10] = b10 ^ (~b12 & b14);
            s2[11] = b11 ^ (~b13 & b15);
            s2[20] = b20 ^ (~b22 & b24);
            s2[21] = b21 ^ (~b23 & b25);
            s2[30] = b30 ^ (~b32 & b34);
            s2[31] = b31 ^ (~b33 & b35);
            s2[40] = b40 ^ (~b42 & b44);
            s2[41] = b41 ^ (~b43 & b45);
            s2[2] = b2 ^ (~b4 & b6);
            s2[3] = b3 ^ (~b5 & b7);
            s2[12] = b12 ^ (~b14 & b16);
            s2[13] = b13 ^ (~b15 & b17);
            s2[22] = b22 ^ (~b24 & b26);
            s2[23] = b23 ^ (~b25 & b27);
            s2[32] = b32 ^ (~b34 & b36);
            s2[33] = b33 ^ (~b35 & b37);
            s2[42] = b42 ^ (~b44 & b46);
            s2[43] = b43 ^ (~b45 & b47);
            s2[4] = b4 ^ (~b6 & b8);
            s2[5] = b5 ^ (~b7 & b9);
            s2[14] = b14 ^ (~b16 & b18);
            s2[15] = b15 ^ (~b17 & b19);
            s2[24] = b24 ^ (~b26 & b28);
            s2[25] = b25 ^ (~b27 & b29);
            s2[34] = b34 ^ (~b36 & b38);
            s2[35] = b35 ^ (~b37 & b39);
            s2[44] = b44 ^ (~b46 & b48);
            s2[45] = b45 ^ (~b47 & b49);
            s2[6] = b6 ^ (~b8 & b0);
            s2[7] = b7 ^ (~b9 & b1);
            s2[16] = b16 ^ (~b18 & b10);
            s2[17] = b17 ^ (~b19 & b11);
            s2[26] = b26 ^ (~b28 & b20);
            s2[27] = b27 ^ (~b29 & b21);
            s2[36] = b36 ^ (~b38 & b30);
            s2[37] = b37 ^ (~b39 & b31);
            s2[46] = b46 ^ (~b48 & b40);
            s2[47] = b47 ^ (~b49 & b41);
            s2[8] = b8 ^ (~b0 & b2);
            s2[9] = b9 ^ (~b1 & b3);
            s2[18] = b18 ^ (~b10 & b12);
            s2[19] = b19 ^ (~b11 & b13);
            s2[28] = b28 ^ (~b20 & b22);
            s2[29] = b29 ^ (~b21 & b23);
            s2[38] = b38 ^ (~b30 & b32);
            s2[39] = b39 ^ (~b31 & b33);
            s2[48] = b48 ^ (~b40 & b42);
            s2[49] = b49 ^ (~b41 & b43);
            s2[0] ^= RC[n];
            s2[1] ^= RC[n + 1];
          }
        };
        if (COMMON_JS) {
          module.exports = methods;
        } else {
          for (i = 0; i < methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
          if (AMD) {
            define(function () {
              return methods;
            });
          }
        }
      })();
    },
  });

  // node_modules/@ethersproject/keccak256/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version10;
  var init_version10 = __esm({
    "node_modules/@ethersproject/keccak256/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version10 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/keccak256/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize4() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors4,
    _censorErrors4,
    LogLevels4,
    _logLevel4,
    _globalLogger4,
    _normalizeError4,
    LogLevel4,
    ErrorCode4,
    HEX4,
    Logger4;
  var init_lib9 = __esm({
    "node_modules/@ethersproject/keccak256/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version10();
      _permanentCensorErrors4 = false;
      _censorErrors4 = false;
      LogLevels4 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel4 = LogLevels4["default"];
      _globalLogger4 = null;
      _normalizeError4 = _checkNormalize4();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel4 || (LogLevel4 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode4 || (ErrorCode4 = {}));
      HEX4 = "0123456789abcdef";
      Logger4 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels4[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel4 > LogLevels4[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger4.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger4.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger4.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors4) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger4.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX4[value[i] >> 4];
                  hex += HEX4[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger4.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError4) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger4.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError4,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger4.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger4.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger4.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger4.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger4.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger4.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger4.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger4) {
            _globalLogger4 = new Logger4(version10);
          }
          return _globalLogger4;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger4.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors4) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger4.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors4 = !!censorship;
          _permanentCensorErrors4 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels4[logLevel.toLowerCase()];
          if (level == null) {
            Logger4.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel4 = level;
        }
        static from(version89) {
          return new Logger4(version89);
        }
      };
      Logger4.errors = ErrorCode4;
      Logger4.levels = LogLevel4;
    },
  });

  // node_modules/@ethersproject/keccak256/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version11;
  var init_version11 = __esm({
    "node_modules/@ethersproject/keccak256/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version11 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/keccak256/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable4(value) {
    return !!value.toHexString;
  }
  function addSlice4(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice4(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger4(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes4(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger4(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger4(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify4(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger9.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice4(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable4(value)) {
      value = value.toHexString();
    }
    if (isHexString5(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger9.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice4(new Uint8Array(result));
    }
    if (isBytes4(value)) {
      return addSlice4(new Uint8Array(value));
    }
    return logger9.throwArgumentError("invalid arrayify value", "value", value);
  }
  function isHexString5(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var logger9;
  var init_lib10 = __esm({
    "node_modules/@ethersproject/keccak256/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib9();
      init_version11();
      logger9 = new Logger4(version11);
    },
  });

  // node_modules/@ethersproject/keccak256/lib.esm/index.js
  function keccak256(data) {
    return "0x" + import_js_sha3.default.keccak_256(arrayify4(data));
  }
  var import_js_sha3;
  var init_lib11 = __esm({
    "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
      "use strict";
      import_js_sha3 = __toESM(require_sha3());
      init_lib10();
    },
  });

  // node_modules/@ethersproject/rlp/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version12;
  var init_version12 = __esm({
    "node_modules/@ethersproject/rlp/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version12 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/rlp/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize5() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors5,
    _censorErrors5,
    LogLevels5,
    _logLevel5,
    _globalLogger5,
    _normalizeError5,
    LogLevel5,
    ErrorCode5,
    HEX5,
    Logger5;
  var init_lib12 = __esm({
    "node_modules/@ethersproject/rlp/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version12();
      _permanentCensorErrors5 = false;
      _censorErrors5 = false;
      LogLevels5 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel5 = LogLevels5["default"];
      _globalLogger5 = null;
      _normalizeError5 = _checkNormalize5();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel5 || (LogLevel5 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode5 || (ErrorCode5 = {}));
      HEX5 = "0123456789abcdef";
      Logger5 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels5[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel5 > LogLevels5[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger5.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger5.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger5.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors5) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger5.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX5[value[i] >> 4];
                  hex += HEX5[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger5.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError5) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger5.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError5,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger5.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger5.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger5.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger5.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger5.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger5.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger5.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger5) {
            _globalLogger5 = new Logger5(version12);
          }
          return _globalLogger5;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger5.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors5) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger5.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors5 = !!censorship;
          _permanentCensorErrors5 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels5[logLevel.toLowerCase()];
          if (level == null) {
            Logger5.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel5 = level;
        }
        static from(version89) {
          return new Logger5(version89);
        }
      };
      Logger5.errors = ErrorCode5;
      Logger5.levels = LogLevel5;
    },
  });

  // node_modules/@ethersproject/rlp/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version13;
  var init_version13 = __esm({
    "node_modules/@ethersproject/rlp/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version13 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/rlp/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable5(value) {
    return !!value.toHexString;
  }
  function addSlice5(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice5(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike(value) {
    return (isHexString6(value) && !(value.length % 2)) || isBytes5(value);
  }
  function isInteger5(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes5(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger5(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger5(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify5(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger10.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice5(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable5(value)) {
      value = value.toHexString();
    }
    if (isHexString6(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger10.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice5(new Uint8Array(result));
    }
    if (isBytes5(value)) {
      return addSlice5(new Uint8Array(value));
    }
    return logger10.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString6(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify4(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger10.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters4[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable5(value)) {
      return value.toHexString();
    }
    if (isHexString6(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger10.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes5(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters4[(v2 & 240) >> 4] + HexCharacters4[v2 & 15];
      }
      return result;
    }
    return logger10.throwArgumentError("invalid hexlify value", "value", value);
  }
  var logger10, HexCharacters4;
  var init_lib13 = __esm({
    "node_modules/@ethersproject/rlp/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib12();
      init_version13();
      logger10 = new Logger5(version13);
      HexCharacters4 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/rlp/lib.esm/_version.js
  var version14;
  var init_version14 = __esm({
    "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
      version14 = "rlp/5.5.0";
    },
  });

  // node_modules/@ethersproject/rlp/lib.esm/index.js
  var lib_exports = {};
  __export(lib_exports, {
    decode: () => decode,
    encode: () => encode,
  });
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
      result = result * 256 + data[offset + i];
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function (child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
      logger11.throwArgumentError(
        "RLP object must be BytesLike",
        "object",
        object
      );
    }
    const data = Array.prototype.slice.call(arrayify5(object));
    if (data.length === 1 && data[0] <= 127) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(128 + data.length);
      return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(183 + length.length);
    return length.concat(data);
  }
  function encode(object) {
    return hexlify4(_encode(object));
  }
  function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode(data, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      if (childOffset > offset + 1 + length) {
        logger11.throwError(
          "child data too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data, offset) {
    if (data.length === 0) {
      logger11.throwError("data too short", Logger5.errors.BUFFER_OVERRUN, {});
    }
    if (data[offset] >= 248) {
      const lengthLength = data[offset] - 247;
      if (offset + 1 + lengthLength > data.length) {
        logger11.throwError(
          "data short segment too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger11.throwError(
          "data long segment too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      return _decodeChildren(
        data,
        offset,
        offset + 1 + lengthLength,
        lengthLength + length
      );
    } else if (data[offset] >= 192) {
      const length = data[offset] - 192;
      if (offset + 1 + length > data.length) {
        logger11.throwError(
          "data array too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 184) {
      const lengthLength = data[offset] - 183;
      if (offset + 1 + lengthLength > data.length) {
        logger11.throwError(
          "data array too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      const length = unarrayifyInteger(data, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data.length) {
        logger11.throwError(
          "data array too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      const result = hexlify4(
        data.slice(
          offset + 1 + lengthLength,
          offset + 1 + lengthLength + length
        )
      );
      return { consumed: 1 + lengthLength + length, result };
    } else if (data[offset] >= 128) {
      const length = data[offset] - 128;
      if (offset + 1 + length > data.length) {
        logger11.throwError(
          "data too short",
          Logger5.errors.BUFFER_OVERRUN,
          {}
        );
      }
      const result = hexlify4(data.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlify4(data[offset]) };
  }
  function decode(data) {
    const bytes = arrayify5(data);
    const decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) {
      logger11.throwArgumentError("invalid rlp data", "data", data);
    }
    return decoded.result;
  }
  var logger11;
  var init_lib14 = __esm({
    "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
      "use strict";
      init_lib13();
      init_lib12();
      init_version14();
      logger11 = new Logger5(version14);
    },
  });

  // node_modules/@ethersproject/address/lib.esm/_version.js
  var version15;
  var init_version15 = __esm({
    "node_modules/@ethersproject/address/lib.esm/_version.js"() {
      version15 = "address/5.5.0";
    },
  });

  // node_modules/@ethersproject/address/lib.esm/index.js
  function getChecksumAddress(address) {
    if (!isHexString4(address, 20)) {
      logger12.throwArgumentError("invalid address", "address", address);
    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = arrayify3(keccak256(expanded));
    for (let i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }
      if ((hashed[i >> 1] & 15) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  function log10(x2) {
    if (Math.log10) {
      return Math.log10(x2);
    }
    return Math.log(x2) / Math.LN10;
  }
  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address
      .split("")
      .map((c2) => {
        return ibanLookup[c2];
      })
      .join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = (parseInt(block, 10) % 97) + expanded.substring(block.length);
    }
    let checksum = String(98 - (parseInt(expanded, 10) % 97));
    while (checksum.length < 2) {
      checksum = "0" + checksum;
    }
    return checksum;
  }
  function getAddress(address) {
    let result = null;
    if (typeof address !== "string") {
      logger12.throwArgumentError("invalid address", "address", address);
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address.substring(0, 2) !== "0x") {
        address = "0x" + address;
      }
      result = getChecksumAddress(address);
      if (
        address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) &&
        result !== address
      ) {
        logger12.throwArgumentError("bad address checksum", "address", address);
      }
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address.substring(2, 4) !== ibanChecksum(address)) {
        logger12.throwArgumentError("bad icap checksum", "address", address);
      }
      result = _base36To16(address.substring(4));
      while (result.length < 40) {
        result = "0" + result;
      }
      result = getChecksumAddress("0x" + result);
    } else {
      logger12.throwArgumentError("invalid address", "address", address);
    }
    return result;
  }
  function isAddress(address) {
    try {
      getAddress(address);
      return true;
    } catch (error) {}
    return false;
  }
  function getIcapAddress(address) {
    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    while (base36.length < 30) {
      base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  function getContractAddress(transaction) {
    let from = null;
    try {
      from = getAddress(transaction.from);
    } catch (error) {
      logger12.throwArgumentError(
        "missing from address",
        "transaction",
        transaction
      );
    }
    const nonce = stripZeros(
      arrayify3(BigNumber.from(transaction.nonce).toHexString())
    );
    return getAddress(hexDataSlice2(keccak256(encode([from, nonce])), 12));
  }
  function getCreate2Address(from, salt, initCodeHash) {
    if (hexDataLength(salt) !== 32) {
      logger12.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }
    if (hexDataLength(initCodeHash) !== 32) {
      logger12.throwArgumentError(
        "initCodeHash must be 32 bytes",
        "initCodeHash",
        initCodeHash
      );
    }
    return getAddress(
      hexDataSlice2(
        keccak256(concat2(["0xff", getAddress(from), salt, initCodeHash])),
        12
      )
    );
  }
  var logger12, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
  var init_lib15 = __esm({
    "node_modules/@ethersproject/address/lib.esm/index.js"() {
      "use strict";
      init_lib8();
      init_lib3();
      init_lib11();
      init_lib14();
      init_lib7();
      init_version15();
      logger12 = new Logger3(version15);
      MAX_SAFE_INTEGER = 9007199254740991;
      ibanLookup = {};
      for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
      }
      for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
      }
      safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/address.js
  var AddressCoder;
  var init_address = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
      "use strict";
      init_lib15();
      init_lib6();
      init_abstract_coder();
      AddressCoder = class extends Coder {
        constructor(localName) {
          super("address", "address", localName, false);
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
          try {
            value = getAddress(value);
          } catch (error) {
            this._throwError(error.message, value);
          }
          return writer.writeValue(value);
        }
        decode(reader) {
          return getAddress(hexZeroPad2(reader.readValue().toHexString(), 20));
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
  var AnonymousCoder;
  var init_anonymous = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
      "use strict";
      init_abstract_coder();
      AnonymousCoder = class extends Coder {
        constructor(coder) {
          super(coder.name, coder.type, void 0, coder.dynamic);
          this.coder = coder;
        }
        defaultValue() {
          return this.coder.defaultValue();
        }
        encode(writer, value) {
          return this.coder.encode(writer, value);
        }
        decode(reader) {
          return this.coder.decode(reader);
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/array.js
  function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name2 = coder.localName;
        if (!name2) {
          logger13.throwError(
            "cannot encode object for signature with missing names",
            Logger2.errors.INVALID_ARGUMENT,
            {
              argument: "values",
              coder,
              value: values,
            }
          );
        }
        if (unique[name2]) {
          logger13.throwError(
            "cannot encode object for signature with duplicate names",
            Logger2.errors.INVALID_ARGUMENT,
            {
              argument: "values",
              coder,
              value: values,
            }
          );
        }
        unique[name2] = true;
        return values[name2];
      });
    } else {
      logger13.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
      logger13.throwArgumentError(
        "types/value length mismatch",
        "tuple",
        values
      );
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readValue();
        let offsetReader = baseReader.subReader(offset.toNumber());
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (error.code === Logger2.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (error.code === Logger2.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value != void 0) {
        values.push(value);
      }
    });
    const uniqueNames = coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    coders.forEach((coder, index) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      const value = values[index];
      if (value instanceof Error) {
        Object.defineProperty(values, name2, {
          enumerable: true,
          get: () => {
            throw value;
          },
        });
      } else {
        values[name2] = value;
      }
    });
    for (let i = 0; i < values.length; i++) {
      const value = values[i];
      if (value instanceof Error) {
        Object.defineProperty(values, i, {
          enumerable: true,
          get: () => {
            throw value;
          },
        });
      }
    }
    return Object.freeze(values);
  }
  var logger13, ArrayCoder;
  var init_array = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
      "use strict";
      init_lib4();
      init_version6();
      init_abstract_coder();
      init_anonymous();
      logger13 = new Logger2(version6);
      ArrayCoder = class extends Coder {
        constructor(coder, length, localName) {
          const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
          const dynamic = length === -1 || coder.dynamic;
          super("array", type, localName, dynamic);
          this.coder = coder;
          this.length = length;
        }
        defaultValue() {
          const defaultChild = this.coder.defaultValue();
          const result = [];
          for (let i = 0; i < this.length; i++) {
            result.push(defaultChild);
          }
          return result;
        }
        encode(writer, value) {
          if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
          }
          let count = this.length;
          if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
          }
          logger13.checkArgumentCount(
            value.length,
            count,
            "coder array" + (this.localName ? " " + this.localName : "")
          );
          let coders = [];
          for (let i = 0; i < value.length; i++) {
            coders.push(this.coder);
          }
          return pack(writer, coders, value);
        }
        decode(reader) {
          let count = this.length;
          if (count === -1) {
            count = reader.readValue().toNumber();
            if (count * 32 > reader._data.length) {
              logger13.throwError(
                "insufficient data length",
                Logger2.errors.BUFFER_OVERRUN,
                {
                  length: reader._data.length,
                  count,
                }
              );
            }
          }
          let coders = [];
          for (let i = 0; i < count; i++) {
            coders.push(new AnonymousCoder(this.coder));
          }
          return reader.coerce(this.name, unpack(reader, coders));
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
  var BooleanCoder;
  var init_boolean = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
      "use strict";
      init_abstract_coder();
      BooleanCoder = class extends Coder {
        constructor(localName) {
          super("bool", "bool", localName, false);
        }
        defaultValue() {
          return false;
        }
        encode(writer, value) {
          return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
          return reader.coerce(this.type, !reader.readValue().isZero());
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
  var DynamicBytesCoder, BytesCoder;
  var init_bytes = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
      "use strict";
      init_lib6();
      init_abstract_coder();
      DynamicBytesCoder = class extends Coder {
        constructor(type, localName) {
          super(type, type, localName, true);
        }
        defaultValue() {
          return "0x";
        }
        encode(writer, value) {
          value = arrayify2(value);
          let length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
        }
        decode(reader) {
          return reader.readBytes(reader.readValue().toNumber(), true);
        }
      };
      BytesCoder = class extends DynamicBytesCoder {
        constructor(localName) {
          super("bytes", localName);
        }
        decode(reader) {
          return reader.coerce(this.name, hexlify2(super.decode(reader)));
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
  var FixedBytesCoder;
  var init_fixed_bytes = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
      "use strict";
      init_lib6();
      init_abstract_coder();
      FixedBytesCoder = class extends Coder {
        constructor(size, localName) {
          let name2 = "bytes" + String(size);
          super(name2, name2, localName, false);
          this.size = size;
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(
            0,
            2 + this.size * 2
          );
        }
        encode(writer, value) {
          let data = arrayify2(value);
          if (data.length !== this.size) {
            this._throwError("incorrect data length", value);
          }
          return writer.writeBytes(data);
        }
        decode(reader) {
          return reader.coerce(
            this.name,
            hexlify2(reader.readBytes(this.size))
          );
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/null.js
  var NullCoder;
  var init_null = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
      "use strict";
      init_abstract_coder();
      NullCoder = class extends Coder {
        constructor(localName) {
          super("null", "", localName, false);
        }
        defaultValue() {
          return null;
        }
        encode(writer, value) {
          if (value != null) {
            this._throwError("not null", value);
          }
          return writer.writeBytes([]);
        }
        decode(reader) {
          reader.readBytes(0);
          return reader.coerce(this.name, null);
        }
      };
    },
  });

  // node_modules/@ethersproject/constants/lib.esm/addresses.js
  var AddressZero;
  var init_addresses = __esm({
    "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
      AddressZero = "0x0000000000000000000000000000000000000000";
    },
  });

  // node_modules/@ethersproject/constants/lib.esm/bignumbers.js
  var NegativeOne2,
    Zero2,
    One,
    Two,
    WeiPerEther,
    MaxUint256,
    MinInt256,
    MaxInt256;
  var init_bignumbers = __esm({
    "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
      init_lib3();
      NegativeOne2 = /* @__PURE__ */ BigNumber.from(-1);
      Zero2 = /* @__PURE__ */ BigNumber.from(0);
      One = /* @__PURE__ */ BigNumber.from(1);
      Two = /* @__PURE__ */ BigNumber.from(2);
      WeiPerEther = /* @__PURE__ */ BigNumber.from("1000000000000000000");
      MaxUint256 = /* @__PURE__ */ BigNumber.from(
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
      MinInt256 = /* @__PURE__ */ BigNumber.from(
        "-0x8000000000000000000000000000000000000000000000000000000000000000"
      );
      MaxInt256 = /* @__PURE__ */ BigNumber.from(
        "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
    },
  });

  // node_modules/@ethersproject/constants/lib.esm/hashes.js
  var HashZero;
  var init_hashes = __esm({
    "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
      HashZero =
        "0x0000000000000000000000000000000000000000000000000000000000000000";
    },
  });

  // node_modules/@ethersproject/constants/lib.esm/strings.js
  var EtherSymbol;
  var init_strings = __esm({
    "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
      EtherSymbol = "\u039E";
    },
  });

  // node_modules/@ethersproject/constants/lib.esm/index.js
  var lib_exports2 = {};
  __export(lib_exports2, {
    AddressZero: () => AddressZero,
    EtherSymbol: () => EtherSymbol,
    HashZero: () => HashZero,
    MaxInt256: () => MaxInt256,
    MaxUint256: () => MaxUint256,
    MinInt256: () => MinInt256,
    NegativeOne: () => NegativeOne2,
    One: () => One,
    Two: () => Two,
    WeiPerEther: () => WeiPerEther,
    Zero: () => Zero2,
  });
  var init_lib16 = __esm({
    "node_modules/@ethersproject/constants/lib.esm/index.js"() {
      "use strict";
      init_addresses();
      init_bignumbers();
      init_hashes();
      init_strings();
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/number.js
  var NumberCoder;
  var init_number = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
      "use strict";
      init_lib3();
      init_lib16();
      init_abstract_coder();
      NumberCoder = class extends Coder {
        constructor(size, signed, localName) {
          const name2 = (signed ? "int" : "uint") + size * 8;
          super(name2, name2, localName, false);
          this.size = size;
          this.signed = signed;
        }
        defaultValue() {
          return 0;
        }
        encode(writer, value) {
          let v2 = BigNumber.from(value);
          let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
          if (this.signed) {
            let bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v2.gt(bounds) || v2.lt(bounds.add(One).mul(NegativeOne2))) {
              this._throwError("value out-of-bounds", value);
            }
          } else if (v2.lt(Zero2) || v2.gt(maxUintValue.mask(this.size * 8))) {
            this._throwError("value out-of-bounds", value);
          }
          v2 = v2.toTwos(this.size * 8).mask(this.size * 8);
          if (this.signed) {
            v2 = v2.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
          }
          return writer.writeValue(v2);
        }
        decode(reader) {
          let value = reader.readValue().mask(this.size * 8);
          if (this.signed) {
            value = value.fromTwos(this.size * 8);
          }
          return reader.coerce(this.name, value);
        }
      };
    },
  });

  // node_modules/@ethersproject/strings/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version16;
  var init_version16 = __esm({
    "node_modules/@ethersproject/strings/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version16 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/strings/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize6() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors6,
    _censorErrors6,
    LogLevels6,
    _logLevel6,
    _globalLogger6,
    _normalizeError6,
    LogLevel6,
    ErrorCode6,
    HEX6,
    Logger6;
  var init_lib17 = __esm({
    "node_modules/@ethersproject/strings/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version16();
      _permanentCensorErrors6 = false;
      _censorErrors6 = false;
      LogLevels6 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel6 = LogLevels6["default"];
      _globalLogger6 = null;
      _normalizeError6 = _checkNormalize6();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel6 || (LogLevel6 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode6 || (ErrorCode6 = {}));
      HEX6 = "0123456789abcdef";
      Logger6 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels6[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel6 > LogLevels6[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger6.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger6.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger6.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors6) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger6.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX6[value[i] >> 4];
                  hex += HEX6[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger6.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError6) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger6.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError6,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger6.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger6.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger6.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger6.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger6.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger6.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger6.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger6) {
            _globalLogger6 = new Logger6(version16);
          }
          return _globalLogger6;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger6.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors6) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger6.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors6 = !!censorship;
          _permanentCensorErrors6 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels6[logLevel.toLowerCase()];
          if (level == null) {
            Logger6.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel6 = level;
        }
        static from(version89) {
          return new Logger6(version89);
        }
      };
      Logger6.errors = ErrorCode6;
      Logger6.levels = LogLevel6;
    },
  });

  // node_modules/@ethersproject/strings/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version17;
  var init_version17 = __esm({
    "node_modules/@ethersproject/strings/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version17 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/strings/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable6(value) {
    return !!value.toHexString;
  }
  function addSlice6(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice6(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger6(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes6(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger6(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger6(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify6(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger14.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice6(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable6(value)) {
      value = value.toHexString();
    }
    if (isHexString7(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger14.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice6(new Uint8Array(result));
    }
    if (isBytes6(value)) {
      return addSlice6(new Uint8Array(value));
    }
    return logger14.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat3(items) {
    const objects = items.map((item) => arrayify6(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice6(result);
  }
  function isHexString7(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify5(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger14.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters5[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable6(value)) {
      return value.toHexString();
    }
    if (isHexString7(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger14.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes6(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters5[(v2 & 240) >> 4] + HexCharacters5[v2 & 15];
      }
      return result;
    }
    return logger14.throwArgumentError("invalid hexlify value", "value", value);
  }
  var logger14, HexCharacters5;
  var init_lib18 = __esm({
    "node_modules/@ethersproject/strings/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib17();
      init_version17();
      logger14 = new Logger6(version17);
      HexCharacters5 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/strings/lib.esm/_version.js
  var version18;
  var init_version18 = __esm({
    "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
      version18 = "strings/5.5.0";
    },
  });

  // node_modules/@ethersproject/strings/lib.esm/utf8.js
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return logger15.throwArgumentError(
      `invalid codepoint at offset ${offset}; ${reason}`,
      "bytes",
      bytes
    );
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    if (
      reason === Utf8ErrorReason.BAD_PREFIX ||
      reason === Utf8ErrorReason.UNEXPECTED_CONTINUE
    ) {
      let i = 0;
      for (let o2 = offset + 1; o2 < bytes.length; o2++) {
        if (bytes[o2] >> 6 !== 2) {
          break;
        }
        i++;
      }
      return i;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output.push(badCodepoint);
      return 0;
    }
    output.push(65533);
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }
  function getUtf8CodePoints(bytes, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    bytes = arrayify6(bytes);
    const result = [];
    let i = 0;
    while (i < bytes.length) {
      const c2 = bytes[i++];
      if (c2 >> 7 === 0) {
        result.push(c2);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c2 & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c2 & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c2 & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c2 & 192) === 128) {
          i += onError(
            Utf8ErrorReason.UNEXPECTED_CONTINUE,
            i - 1,
            bytes,
            result
          );
        } else {
          i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
        }
        continue;
      }
      if (i - 1 + extraLength >= bytes.length) {
        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
        continue;
      }
      let res = c2 & ((1 << (8 - extraLength - 1)) - 1);
      for (let j2 = 0; j2 < extraLength; j2++) {
        let nextChar = bytes[i];
        if ((nextChar & 192) != 128) {
          i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
          res = null;
          break;
        }
        res = (res << 6) | (nextChar & 63);
        i++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i += onError(
          Utf8ErrorReason.OUT_OF_RANGE,
          i - 1 - extraLength,
          bytes,
          result,
          res
        );
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i += onError(
          Utf8ErrorReason.UTF16_SURROGATE,
          i - 1 - extraLength,
          bytes,
          result,
          res
        );
        continue;
      }
      if (res <= overlongMask) {
        i += onError(
          Utf8ErrorReason.OVERLONG,
          i - 1 - extraLength,
          bytes,
          result,
          res
        );
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
      logger15.checkNormalize();
      str = str.normalize(form);
    }
    let result = [];
    for (let i = 0; i < str.length; i++) {
      const c2 = str.charCodeAt(i);
      if (c2 < 128) {
        result.push(c2);
      } else if (c2 < 2048) {
        result.push((c2 >> 6) | 192);
        result.push((c2 & 63) | 128);
      } else if ((c2 & 64512) == 55296) {
        i++;
        const c22 = str.charCodeAt(i);
        if (i >= str.length || (c22 & 64512) !== 56320) {
          throw new Error("invalid utf-8 string");
        }
        const pair = 65536 + ((c2 & 1023) << 10) + (c22 & 1023);
        result.push((pair >> 18) | 240);
        result.push(((pair >> 12) & 63) | 128);
        result.push(((pair >> 6) & 63) | 128);
        result.push((pair & 63) | 128);
      } else {
        result.push((c2 >> 12) | 224);
        result.push(((c2 >> 6) & 63) | 128);
        result.push((c2 & 63) | 128);
      }
    }
    return arrayify6(result);
  }
  function escapeChar(value) {
    const hex = "0000" + value.toString(16);
    return "\\u" + hex.substring(hex.length - 4);
  }
  function _toEscapedUtf8String(bytes, onError) {
    return (
      '"' +
      getUtf8CodePoints(bytes, onError)
        .map((codePoint) => {
          if (codePoint < 256) {
            switch (codePoint) {
              case 8:
                return "\\b";
              case 9:
                return "\\t";
              case 10:
                return "\\n";
              case 13:
                return "\\r";
              case 34:
                return '\\"';
              case 92:
                return "\\\\";
            }
            if (codePoint >= 32 && codePoint < 127) {
              return String.fromCharCode(codePoint);
            }
          }
          if (codePoint <= 65535) {
            return escapeChar(codePoint);
          }
          codePoint -= 65536;
          return (
            escapeChar(((codePoint >> 10) & 1023) + 55296) +
            escapeChar((codePoint & 1023) + 56320)
          );
        })
        .join("") +
      '"'
    );
  }
  function _toUtf8String(codePoints) {
    return codePoints
      .map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode(
          ((codePoint >> 10) & 1023) + 55296,
          (codePoint & 1023) + 56320
        );
      })
      .join("");
  }
  function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }
  function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  var logger15, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
  var init_utf8 = __esm({
    "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
      "use strict";
      init_lib18();
      init_lib17();
      init_version18();
      logger15 = new Logger6(version18);
      (function (UnicodeNormalizationForm2) {
        UnicodeNormalizationForm2["current"] = "";
        UnicodeNormalizationForm2["NFC"] = "NFC";
        UnicodeNormalizationForm2["NFD"] = "NFD";
        UnicodeNormalizationForm2["NFKC"] = "NFKC";
        UnicodeNormalizationForm2["NFKD"] = "NFKD";
      })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
      (function (Utf8ErrorReason2) {
        Utf8ErrorReason2["UNEXPECTED_CONTINUE"] =
          "unexpected continuation byte";
        Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
        Utf8ErrorReason2["OVERRUN"] = "string overrun";
        Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
        Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
        Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
        Utf8ErrorReason2["OVERLONG"] = "overlong representation";
      })(Utf8ErrorReason || (Utf8ErrorReason = {}));
      Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc,
      });
    },
  });

  // node_modules/@ethersproject/strings/lib.esm/bytes32.js
  function formatBytes32String(text) {
    const bytes = toUtf8Bytes(text);
    if (bytes.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }
    return hexlify5(concat3([bytes, HashZero]).slice(0, 32));
  }
  function parseBytes32String(bytes) {
    const data = arrayify6(bytes);
    if (data.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while (data[length - 1] === 0) {
      length--;
    }
    return toUtf8String(data.slice(0, length));
  }
  var init_bytes32 = __esm({
    "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
      "use strict";
      init_lib16();
      init_lib18();
      init_utf8();
    },
  });

  // node_modules/@ethersproject/strings/lib.esm/idna.js
  function bytes2(data) {
    if (data.length % 4 !== 0) {
      throw new Error("bad data");
    }
    let result = [];
    for (let i = 0; i < data.length; i += 4) {
      result.push(parseInt(data.substring(i, i + 4), 16));
    }
    return result;
  }
  function createTable(data, func) {
    if (!func) {
      func = function (value) {
        return [parseInt(value, 16)];
      };
    }
    let lo = 0;
    let result = {};
    data.split(",").forEach((pair) => {
      let comps = pair.split(":");
      lo += parseInt(comps[0], 16);
      result[lo] = func(comps[1]);
    });
    return result;
  }
  function createRangeTable(data) {
    let hi = 0;
    return data.split(",").map((v2) => {
      let comps = v2.split("-");
      if (comps.length === 1) {
        comps[1] = "0";
      } else if (comps[1] === "") {
        comps[1] = "1";
      }
      let lo = hi + parseInt(comps[0], 16);
      hi = parseInt(comps[1], 16);
      return { l: lo, h: hi };
    });
  }
  function matchMap(value, ranges) {
    let lo = 0;
    for (let i = 0; i < ranges.length; i++) {
      let range = ranges[i];
      lo += range.l;
      if (
        value >= lo &&
        value <= lo + range.h &&
        (value - lo) % (range.d || 1) === 0
      ) {
        if (range.e && range.e.indexOf(value - lo) !== -1) {
          continue;
        }
        return range;
      }
    }
    return null;
  }
  function flatten(values) {
    return values.reduce((accum, value) => {
      value.forEach((value2) => {
        accum.push(value2);
      });
      return accum;
    }, []);
  }
  function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
  }
  function _nameprepTableB2(codepoint) {
    let range = matchMap(codepoint, Table_B_2_ranges);
    if (range) {
      return [codepoint + range.s];
    }
    let codes = Table_B_2_lut_abs[codepoint];
    if (codes) {
      return codes;
    }
    let shift = Table_B_2_lut_rel[codepoint];
    if (shift) {
      return [codepoint + shift[0]];
    }
    let complex = Table_B_2_complex[codepoint];
    if (complex) {
      return complex;
    }
    return null;
  }
  function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
  }
  function nameprep(value) {
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
      return value.toLowerCase();
    }
    let codes = toUtf8CodePoints(value);
    codes = flatten(
      codes.map((code) => {
        if (Table_B_1_flags.indexOf(code) >= 0) {
          return [];
        }
        if (code >= 65024 && code <= 65039) {
          return [];
        }
        let codesTableB2 = _nameprepTableB2(code);
        if (codesTableB2) {
          return codesTableB2;
        }
        return [code];
      })
    );
    codes = toUtf8CodePoints(
      _toUtf8String(codes),
      UnicodeNormalizationForm.NFKC
    );
    codes.forEach((code) => {
      if (_nameprepTableC(code)) {
        throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
      }
    });
    codes.forEach((code) => {
      if (_nameprepTableA1(code)) {
        throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
      }
    });
    let name2 = _toUtf8String(codes);
    if (
      name2.substring(0, 1) === "-" ||
      name2.substring(2, 4) === "--" ||
      name2.substring(name2.length - 1) === "-"
    ) {
      throw new Error("invalid hyphen");
    }
    if (name2.length > 63) {
      throw new Error("too long");
    }
    return name2;
  }
  var Table_A_1_ranges,
    Table_B_1_flags,
    Table_B_2_ranges,
    Table_B_2_lut_abs,
    Table_B_2_lut_rel,
    Table_B_2_complex,
    Table_C_ranges;
  var init_idna = __esm({
    "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
      "use strict";
      init_utf8();
      Table_A_1_ranges = createRangeTable(
        "221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"
      );
      Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff"
        .split(",")
        .map((v2) => parseInt(v2, 16));
      Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 },
      ];
      Table_B_2_lut_abs = createTable(
        "b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"
      );
      Table_B_2_lut_rel = createTable(
        "179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"
      );
      Table_B_2_complex = createTable(
        "df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",
        bytes2
      );
      Table_C_ranges = createRangeTable(
        "80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001"
      );
    },
  });

  // node_modules/@ethersproject/strings/lib.esm/index.js
  var init_lib19 = __esm({
    "node_modules/@ethersproject/strings/lib.esm/index.js"() {
      "use strict";
      init_bytes32();
      init_idna();
      init_utf8();
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/string.js
  var StringCoder;
  var init_string = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
      "use strict";
      init_lib19();
      init_bytes();
      StringCoder = class extends DynamicBytesCoder {
        constructor(localName) {
          super("string", localName);
        }
        defaultValue() {
          return "";
        }
        encode(writer, value) {
          return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
          return toUtf8String(super.decode(reader));
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
  var TupleCoder;
  var init_tuple = __esm({
    "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
      "use strict";
      init_abstract_coder();
      init_array();
      TupleCoder = class extends Coder {
        constructor(coders, localName) {
          let dynamic = false;
          const types = [];
          coders.forEach((coder) => {
            if (coder.dynamic) {
              dynamic = true;
            }
            types.push(coder.type);
          });
          const type = "tuple(" + types.join(",") + ")";
          super("tuple", type, localName, dynamic);
          this.coders = coders;
        }
        defaultValue() {
          const values = [];
          this.coders.forEach((coder) => {
            values.push(coder.defaultValue());
          });
          const uniqueNames = this.coders.reduce((accum, coder) => {
            const name2 = coder.localName;
            if (name2) {
              if (!accum[name2]) {
                accum[name2] = 0;
              }
              accum[name2]++;
            }
            return accum;
          }, {});
          this.coders.forEach((coder, index) => {
            let name2 = coder.localName;
            if (!name2 || uniqueNames[name2] !== 1) {
              return;
            }
            if (name2 === "length") {
              name2 = "_length";
            }
            if (values[name2] != null) {
              return;
            }
            values[name2] = values[index];
          });
          return Object.freeze(values);
        }
        encode(writer, value) {
          return pack(writer, this.coders, value);
        }
        decode(reader) {
          return reader.coerce(this.name, unpack(reader, this.coders));
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/abi-coder.js
  var logger16, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
  var init_abi_coder = __esm({
    "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
      "use strict";
      init_lib6();
      init_lib5();
      init_lib4();
      init_version6();
      init_abstract_coder();
      init_address();
      init_array();
      init_boolean();
      init_bytes();
      init_fixed_bytes();
      init_null();
      init_number();
      init_string();
      init_tuple();
      init_fragments();
      logger16 = new Logger2(version6);
      paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
      paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
      AbiCoder = class {
        constructor(coerceFunc) {
          logger16.checkNew(new.target, AbiCoder);
          defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
          switch (param.baseType) {
            case "address":
              return new AddressCoder(param.name);
            case "bool":
              return new BooleanCoder(param.name);
            case "string":
              return new StringCoder(param.name);
            case "bytes":
              return new BytesCoder(param.name);
            case "array":
              return new ArrayCoder(
                this._getCoder(param.arrayChildren),
                param.arrayLength,
                param.name
              );
            case "tuple":
              return new TupleCoder(
                (param.components || []).map((component) => {
                  return this._getCoder(component);
                }),
                param.name
              );
            case "":
              return new NullCoder(param.name);
          }
          let match = param.type.match(paramTypeNumber);
          if (match) {
            let size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || size % 8 !== 0) {
              logger16.throwArgumentError(
                "invalid " + match[1] + " bit length",
                "param",
                param
              );
            }
            return new NumberCoder(size / 8, match[1] === "int", param.name);
          }
          match = param.type.match(paramTypeBytes);
          if (match) {
            let size = parseInt(match[1]);
            if (size === 0 || size > 32) {
              logger16.throwArgumentError(
                "invalid bytes length",
                "param",
                param
              );
            }
            return new FixedBytesCoder(size, param.name);
          }
          return logger16.throwArgumentError(
            "invalid type",
            "type",
            param.type
          );
        }
        _getWordSize() {
          return 32;
        }
        _getReader(data, allowLoose) {
          return new Reader(
            data,
            this._getWordSize(),
            this.coerceFunc,
            allowLoose
          );
        }
        _getWriter() {
          return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
          const coders = types.map((type) =>
            this._getCoder(ParamType.from(type))
          );
          const coder = new TupleCoder(coders, "_");
          return coder.defaultValue();
        }
        encode(types, values) {
          if (types.length !== values.length) {
            logger16.throwError(
              "types/values length mismatch",
              Logger2.errors.INVALID_ARGUMENT,
              {
                count: { types: types.length, values: values.length },
                value: { types, values },
              }
            );
          }
          const coders = types.map((type) =>
            this._getCoder(ParamType.from(type))
          );
          const coder = new TupleCoder(coders, "_");
          const writer = this._getWriter();
          coder.encode(writer, values);
          return writer.data;
        }
        decode(types, data, loose) {
          const coders = types.map((type) =>
            this._getCoder(ParamType.from(type))
          );
          const coder = new TupleCoder(coders, "_");
          return coder.decode(this._getReader(arrayify2(data), loose));
        }
      };
      defaultAbiCoder = new AbiCoder();
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/id.js
  function id(text) {
    return keccak256(toUtf8Bytes(text));
  }
  var init_id = __esm({
    "node_modules/@ethersproject/hash/lib.esm/id.js"() {
      init_lib11();
      init_lib19();
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version19;
  var init_version19 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version19 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize7() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors7,
    _censorErrors7,
    LogLevels7,
    _logLevel7,
    _globalLogger7,
    _normalizeError7,
    LogLevel7,
    ErrorCode7,
    HEX7,
    Logger7;
  var init_lib20 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version19();
      _permanentCensorErrors7 = false;
      _censorErrors7 = false;
      LogLevels7 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel7 = LogLevels7["default"];
      _globalLogger7 = null;
      _normalizeError7 = _checkNormalize7();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel7 || (LogLevel7 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode7 || (ErrorCode7 = {}));
      HEX7 = "0123456789abcdef";
      Logger7 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels7[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel7 > LogLevels7[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger7.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger7.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger7.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors7) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger7.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX7[value[i] >> 4];
                  hex += HEX7[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger7.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError7) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger7.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError7,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger7.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger7.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger7.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger7.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger7.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger7.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger7.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger7) {
            _globalLogger7 = new Logger7(version19);
          }
          return _globalLogger7;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger7.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors7) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger7.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors7 = !!censorship;
          _permanentCensorErrors7 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels7[logLevel.toLowerCase()];
          if (level == null) {
            Logger7.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel7 = level;
        }
        static from(version89) {
          return new Logger7(version89);
        }
      };
      Logger7.errors = ErrorCode7;
      Logger7.levels = LogLevel7;
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version20;
  var init_version20 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version20 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable7(value) {
    return !!value.toHexString;
  }
  function addSlice7(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice7(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger7(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes7(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger7(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger7(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify7(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger17.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice7(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable7(value)) {
      value = value.toHexString();
    }
    if (isHexString8(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger17.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice7(new Uint8Array(result));
    }
    if (isBytes7(value)) {
      return addSlice7(new Uint8Array(value));
    }
    return logger17.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat4(items) {
    const objects = items.map((item) => arrayify7(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice7(result);
  }
  function isHexString8(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify6(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger17.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters6[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable7(value)) {
      return value.toHexString();
    }
    if (isHexString8(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger17.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes7(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters6[(v2 & 240) >> 4] + HexCharacters6[v2 & 15];
      }
      return result;
    }
    return logger17.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexConcat2(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify6(item).substring(2);
    });
    return result;
  }
  function hexZeroPad3(value, length) {
    if (typeof value !== "string") {
      value = hexlify6(value);
    } else if (!isHexString8(value)) {
      logger17.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger17.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  var logger17, HexCharacters6;
  var init_lib21 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib20();
      init_version20();
      logger17 = new Logger7(version20);
      HexCharacters6 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/_version.js
  var version21;
  var init_version21 = __esm({
    "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
      version21 = "hash/5.5.0";
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/namehash.js
  function isValidName(name2) {
    try {
      const comps = name2.split(".");
      for (let i = 0; i < comps.length; i++) {
        if (nameprep(comps[i]).length === 0) {
          throw new Error("empty");
        }
      }
      return true;
    } catch (error) {}
    return false;
  }
  function namehash(name2) {
    if (typeof name2 !== "string") {
      logger18.throwArgumentError(
        "invalid ENS name; not a string",
        "name",
        name2
      );
    }
    let current = name2;
    let result = Zeros;
    while (current.length) {
      const partition = current.match(Partition);
      if (partition == null || partition[2] === "") {
        logger18.throwArgumentError(
          "invalid ENS address; missing component",
          "name",
          name2
        );
      }
      const label = toUtf8Bytes(nameprep(partition[3]));
      result = keccak256(concat4([result, keccak256(label)]));
      current = partition[2] || "";
    }
    return hexlify6(result);
  }
  var logger18, Zeros, Partition;
  var init_namehash = __esm({
    "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
      init_lib21();
      init_lib19();
      init_lib11();
      init_lib20();
      init_version21();
      logger18 = new Logger7(version21);
      Zeros = new Uint8Array(32);
      Zeros.fill(0);
      Partition = new RegExp("^((.*)\\.)?([^.]+)$");
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/message.js
  function hashMessage(message) {
    if (typeof message === "string") {
      message = toUtf8Bytes(message);
    }
    return keccak256(
      concat4([
        toUtf8Bytes(messagePrefix),
        toUtf8Bytes(String(message.length)),
        message,
      ])
    );
  }
  var messagePrefix;
  var init_message = __esm({
    "node_modules/@ethersproject/hash/lib.esm/message.js"() {
      init_lib21();
      init_lib11();
      init_lib19();
      messagePrefix = "Ethereum Signed Message:\n";
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version22;
  var init_version22 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version22 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/hash/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly2(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function shallowCopy(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  function _isFrozen2(object) {
    if (object === void 0 || object === null || opaque2[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen2(value)) {
          return false;
        }
      }
      return true;
    }
    return logger19.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy2(object) {
    if (_isFrozen2(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy2(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly2(result, key2, deepCopy2(value));
      }
      return result;
    }
    return logger19.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy2(object) {
    return _deepCopy2(object);
  }
  var logger19, opaque2;
  var init_lib22 = __esm({
    "node_modules/@ethersproject/hash/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib20();
      init_version22();
      logger19 = new Logger7(version22);
      opaque2 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/typed-data.js
  function hexPadRight(value) {
    const bytes = arrayify7(value);
    const padOffset = bytes.length % 32;
    if (padOffset) {
      return hexConcat2([bytes, padding.slice(padOffset)]);
    }
    return hexlify6(bytes);
  }
  function checkString(key2) {
    return function (value) {
      if (typeof value !== "string") {
        logger20.throwArgumentError(
          `invalid domain value for ${JSON.stringify(key2)}`,
          `domain.${key2}`,
          value
        );
      }
      return value;
    };
  }
  function getBaseEncoder(type) {
    {
      const match = type.match(/^(u?)int(\d*)$/);
      if (match) {
        const signed = match[1] === "";
        const width = parseInt(match[2] || "256");
        if (
          width % 8 !== 0 ||
          width > 256 ||
          (match[2] && match[2] !== String(width))
        ) {
          logger20.throwArgumentError("invalid numeric width", "type", type);
        }
        const boundsUpper = MaxUint2562.mask(signed ? width - 1 : width);
        const boundsLower = signed
          ? boundsUpper.add(One2).mul(NegativeOne3)
          : Zero3;
        return function (value) {
          const v2 = BigNumber.from(value);
          if (v2.lt(boundsLower) || v2.gt(boundsUpper)) {
            logger20.throwArgumentError(
              `value out-of-bounds for ${type}`,
              "value",
              value
            );
          }
          return hexZeroPad3(v2.toTwos(256).toHexString(), 32);
        };
      }
    }
    {
      const match = type.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        if (width === 0 || width > 32 || match[1] !== String(width)) {
          logger20.throwArgumentError("invalid bytes width", "type", type);
        }
        return function (value) {
          const bytes = arrayify7(value);
          if (bytes.length !== width) {
            logger20.throwArgumentError(
              `invalid length for ${type}`,
              "value",
              value
            );
          }
          return hexPadRight(value);
        };
      }
    }
    switch (type) {
      case "address":
        return function (value) {
          return hexZeroPad3(getAddress(value), 32);
        };
      case "bool":
        return function (value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function (value) {
          return keccak256(value);
        };
      case "string":
        return function (value) {
          return id(value);
        };
    }
    return null;
  }
  function encodeType(name2, fields) {
    return `${name2}(${fields
      .map(({ name: name3, type }) => type + " " + name3)
      .join(",")})`;
  }
  var __awaiter2,
    logger20,
    padding,
    NegativeOne3,
    Zero3,
    One2,
    MaxUint2562,
    hexTrue,
    hexFalse,
    domainFieldTypes,
    domainFieldNames,
    domainChecks,
    TypedDataEncoder;
  var init_typed_data = __esm({
    "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
      init_lib15();
      init_lib3();
      init_lib21();
      init_lib11();
      init_lib22();
      init_lib20();
      init_version21();
      init_id();
      __awaiter2 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger20 = new Logger7(version21);
      padding = new Uint8Array(32);
      padding.fill(0);
      NegativeOne3 = BigNumber.from(-1);
      Zero3 = BigNumber.from(0);
      One2 = BigNumber.from(1);
      MaxUint2562 = BigNumber.from(
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
      hexTrue = hexZeroPad3(One2.toHexString(), 32);
      hexFalse = hexZeroPad3(Zero3.toHexString(), 32);
      domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32",
      };
      domainFieldNames = [
        "name",
        "version",
        "chainId",
        "verifyingContract",
        "salt",
      ];
      domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
          try {
            return BigNumber.from(value).toString();
          } catch (error) {}
          return logger20.throwArgumentError(
            `invalid domain value for "chainId"`,
            "domain.chainId",
            value
          );
        },
        verifyingContract: function (value) {
          try {
            return getAddress(value).toLowerCase();
          } catch (error) {}
          return logger20.throwArgumentError(
            `invalid domain value "verifyingContract"`,
            "domain.verifyingContract",
            value
          );
        },
        salt: function (value) {
          try {
            const bytes = arrayify7(value);
            if (bytes.length !== 32) {
              throw new Error("bad length");
            }
            return hexlify6(bytes);
          } catch (error) {}
          return logger20.throwArgumentError(
            `invalid domain value "salt"`,
            "domain.salt",
            value
          );
        },
      };
      TypedDataEncoder = class {
        constructor(types) {
          defineReadOnly2(this, "types", Object.freeze(deepCopy2(types)));
          defineReadOnly2(this, "_encoderCache", {});
          defineReadOnly2(this, "_types", {});
          const links = {};
          const parents = {};
          const subtypes = {};
          Object.keys(types).forEach((type) => {
            links[type] = {};
            parents[type] = [];
            subtypes[type] = {};
          });
          for (const name2 in types) {
            const uniqueNames = {};
            types[name2].forEach((field) => {
              if (uniqueNames[field.name]) {
                logger20.throwArgumentError(
                  `duplicate variable name ${JSON.stringify(
                    field.name
                  )} in ${JSON.stringify(name2)}`,
                  "types",
                  types
                );
              }
              uniqueNames[field.name] = true;
              const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
              if (baseType === name2) {
                logger20.throwArgumentError(
                  `circular type reference to ${JSON.stringify(baseType)}`,
                  "types",
                  types
                );
              }
              const encoder = getBaseEncoder(baseType);
              if (encoder) {
                return;
              }
              if (!parents[baseType]) {
                logger20.throwArgumentError(
                  `unknown type ${JSON.stringify(baseType)}`,
                  "types",
                  types
                );
              }
              parents[baseType].push(name2);
              links[name2][baseType] = true;
            });
          }
          const primaryTypes = Object.keys(parents).filter(
            (n) => parents[n].length === 0
          );
          if (primaryTypes.length === 0) {
            logger20.throwArgumentError("missing primary type", "types", types);
          } else if (primaryTypes.length > 1) {
            logger20.throwArgumentError(
              `ambiguous primary types or unused types: ${primaryTypes
                .map((t2) => JSON.stringify(t2))
                .join(", ")}`,
              "types",
              types
            );
          }
          defineReadOnly2(this, "primaryType", primaryTypes[0]);
          function checkCircular(type, found) {
            if (found[type]) {
              logger20.throwArgumentError(
                `circular type reference to ${JSON.stringify(type)}`,
                "types",
                types
              );
            }
            found[type] = true;
            Object.keys(links[type]).forEach((child) => {
              if (!parents[child]) {
                return;
              }
              checkCircular(child, found);
              Object.keys(found).forEach((subtype) => {
                subtypes[subtype][child] = true;
              });
            });
            delete found[type];
          }
          checkCircular(this.primaryType, {});
          for (const name2 in subtypes) {
            const st2 = Object.keys(subtypes[name2]);
            st2.sort();
            this._types[name2] =
              encodeType(name2, types[name2]) +
              st2.map((t2) => encodeType(t2, types[t2])).join("");
          }
        }
        getEncoder(type) {
          let encoder = this._encoderCache[type];
          if (!encoder) {
            encoder = this._encoderCache[type] = this._getEncoder(type);
          }
          return encoder;
        }
        _getEncoder(type) {
          {
            const encoder = getBaseEncoder(type);
            if (encoder) {
              return encoder;
            }
          }
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
            const subtype = match[1];
            const subEncoder = this.getEncoder(subtype);
            const length = parseInt(match[3]);
            return (value) => {
              if (length >= 0 && value.length !== length) {
                logger20.throwArgumentError(
                  "array length mismatch; expected length ${ arrayLength }",
                  "value",
                  value
                );
              }
              let result = value.map(subEncoder);
              if (this._types[subtype]) {
                result = result.map(keccak256);
              }
              return keccak256(hexConcat2(result));
            };
          }
          const fields = this.types[type];
          if (fields) {
            const encodedType = id(this._types[type]);
            return (value) => {
              const values = fields.map(({ name: name2, type: type2 }) => {
                const result = this.getEncoder(type2)(value[name2]);
                if (this._types[type2]) {
                  return keccak256(result);
                }
                return result;
              });
              values.unshift(encodedType);
              return hexConcat2(values);
            };
          }
          return logger20.throwArgumentError(
            `unknown type: ${type}`,
            "type",
            type
          );
        }
        encodeType(name2) {
          const result = this._types[name2];
          if (!result) {
            logger20.throwArgumentError(
              `unknown type: ${JSON.stringify(name2)}`,
              "name",
              name2
            );
          }
          return result;
        }
        encodeData(type, value) {
          return this.getEncoder(type)(value);
        }
        hashStruct(name2, value) {
          return keccak256(this.encodeData(name2, value));
        }
        encode(value) {
          return this.encodeData(this.primaryType, value);
        }
        hash(value) {
          return this.hashStruct(this.primaryType, value);
        }
        _visit(type, value, callback) {
          {
            const encoder = getBaseEncoder(type);
            if (encoder) {
              return callback(type, value);
            }
          }
          const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
            const subtype = match[1];
            const length = parseInt(match[3]);
            if (length >= 0 && value.length !== length) {
              logger20.throwArgumentError(
                "array length mismatch; expected length ${ arrayLength }",
                "value",
                value
              );
            }
            return value.map((v2) => this._visit(subtype, v2, callback));
          }
          const fields = this.types[type];
          if (fields) {
            return fields.reduce((accum, { name: name2, type: type2 }) => {
              accum[name2] = this._visit(type2, value[name2], callback);
              return accum;
            }, {});
          }
          return logger20.throwArgumentError(
            `unknown type: ${type}`,
            "type",
            type
          );
        }
        visit(value, callback) {
          return this._visit(this.primaryType, value, callback);
        }
        static from(types) {
          return new TypedDataEncoder(types);
        }
        static getPrimaryType(types) {
          return TypedDataEncoder.from(types).primaryType;
        }
        static hashStruct(name2, types, value) {
          return TypedDataEncoder.from(types).hashStruct(name2, value);
        }
        static hashDomain(domain) {
          const domainFields = [];
          for (const name2 in domain) {
            const type = domainFieldTypes[name2];
            if (!type) {
              logger20.throwArgumentError(
                `invalid typed-data domain key: ${JSON.stringify(name2)}`,
                "domain",
                domain
              );
            }
            domainFields.push({ name: name2, type });
          }
          domainFields.sort((a2, b2) => {
            return (
              domainFieldNames.indexOf(a2.name) -
              domainFieldNames.indexOf(b2.name)
            );
          });
          return TypedDataEncoder.hashStruct(
            "EIP712Domain",
            { EIP712Domain: domainFields },
            domain
          );
        }
        static encode(domain, types, value) {
          return hexConcat2([
            "0x1901",
            TypedDataEncoder.hashDomain(domain),
            TypedDataEncoder.from(types).hash(value),
          ]);
        }
        static hash(domain, types, value) {
          return keccak256(TypedDataEncoder.encode(domain, types, value));
        }
        static resolveNames(domain, types, value, resolveName2) {
          return __awaiter2(this, void 0, void 0, function* () {
            domain = shallowCopy(domain);
            const ensCache = {};
            if (
              domain.verifyingContract &&
              !isHexString8(domain.verifyingContract, 20)
            ) {
              ensCache[domain.verifyingContract] = "0x";
            }
            const encoder = TypedDataEncoder.from(types);
            encoder.visit(value, (type, value2) => {
              if (type === "address" && !isHexString8(value2, 20)) {
                ensCache[value2] = "0x";
              }
              return value2;
            });
            for (const name2 in ensCache) {
              ensCache[name2] = yield resolveName2(name2);
            }
            if (
              domain.verifyingContract &&
              ensCache[domain.verifyingContract]
            ) {
              domain.verifyingContract = ensCache[domain.verifyingContract];
            }
            value = encoder.visit(value, (type, value2) => {
              if (type === "address" && ensCache[value2]) {
                return ensCache[value2];
              }
              return value2;
            });
            return { domain, value };
          });
        }
        static getPayload(domain, types, value) {
          TypedDataEncoder.hashDomain(domain);
          const domainValues = {};
          const domainTypes = [];
          domainFieldNames.forEach((name2) => {
            const value2 = domain[name2];
            if (value2 == null) {
              return;
            }
            domainValues[name2] = domainChecks[name2](value2);
            domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
          });
          const encoder = TypedDataEncoder.from(types);
          const typesWithDomain = shallowCopy(types);
          if (typesWithDomain.EIP712Domain) {
            logger20.throwArgumentError(
              "types must not contain EIP712Domain type",
              "types.EIP712Domain",
              types
            );
          } else {
            typesWithDomain.EIP712Domain = domainTypes;
          }
          encoder.encode(value);
          return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value, (type, value2) => {
              if (type.match(/^bytes(\d*)/)) {
                return hexlify6(arrayify7(value2));
              }
              if (type.match(/^u?int/)) {
                return BigNumber.from(value2).toString();
              }
              switch (type) {
                case "address":
                  return value2.toLowerCase();
                case "bool":
                  return !!value2;
                case "string":
                  if (typeof value2 !== "string") {
                    logger20.throwArgumentError(
                      `invalid string`,
                      "value",
                      value2
                    );
                  }
                  return value2;
              }
              return logger20.throwArgumentError(
                "unsupported type",
                "type",
                type
              );
            }),
          };
        }
      };
    },
  });

  // node_modules/@ethersproject/hash/lib.esm/index.js
  var init_lib23 = __esm({
    "node_modules/@ethersproject/hash/lib.esm/index.js"() {
      "use strict";
      init_id();
      init_namehash();
      init_message();
      init_typed_data();
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/interface.js
  function wrapAccessError(property, error) {
    const wrap = new Error(
      `deferred error during ABI decoding triggered accessing ${property}`
    );
    wrap.error = error;
    return wrap;
  }
  var logger21,
    LogDescription,
    TransactionDescription,
    ErrorDescription,
    Indexed,
    BuiltinErrors,
    Interface;
  var init_interface = __esm({
    "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
      "use strict";
      init_lib15();
      init_lib3();
      init_lib6();
      init_lib23();
      init_lib11();
      init_lib5();
      init_abi_coder();
      init_abstract_coder();
      init_fragments();
      init_lib4();
      init_version6();
      logger21 = new Logger2(version6);
      LogDescription = class extends Description {};
      TransactionDescription = class extends Description {};
      ErrorDescription = class extends Description {};
      Indexed = class extends Description {
        static isIndexed(value) {
          return !!(value && value._isIndexed);
        }
      };
      BuiltinErrors = {
        "0x08c379a0": {
          signature: "Error(string)",
          name: "Error",
          inputs: ["string"],
          reason: true,
        },
        "0x4e487b71": {
          signature: "Panic(uint256)",
          name: "Panic",
          inputs: ["uint256"],
        },
      };
      Interface = class {
        constructor(fragments) {
          logger21.checkNew(new.target, Interface);
          let abi = [];
          if (typeof fragments === "string") {
            abi = JSON.parse(fragments);
          } else {
            abi = fragments;
          }
          defineReadOnly(
            this,
            "fragments",
            abi
              .map((fragment) => {
                return Fragment.from(fragment);
              })
              .filter((fragment) => fragment != null)
          );
          defineReadOnly(
            this,
            "_abiCoder",
            getStatic(new.target, "getAbiCoder")()
          );
          defineReadOnly(this, "functions", {});
          defineReadOnly(this, "errors", {});
          defineReadOnly(this, "events", {});
          defineReadOnly(this, "structs", {});
          this.fragments.forEach((fragment) => {
            let bucket = null;
            switch (fragment.type) {
              case "constructor":
                if (this.deploy) {
                  logger21.warn("duplicate definition - constructor");
                  return;
                }
                defineReadOnly(this, "deploy", fragment);
                return;
              case "function":
                bucket = this.functions;
                break;
              case "event":
                bucket = this.events;
                break;
              case "error":
                bucket = this.errors;
                break;
              default:
                return;
            }
            let signature2 = fragment.format();
            if (bucket[signature2]) {
              logger21.warn("duplicate definition - " + signature2);
              return;
            }
            bucket[signature2] = fragment;
          });
          if (!this.deploy) {
            defineReadOnly(
              this,
              "deploy",
              ConstructorFragment.from({
                payable: false,
                type: "constructor",
              })
            );
          }
          defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
          if (!format) {
            format = FormatTypes.full;
          }
          if (format === FormatTypes.sighash) {
            logger21.throwArgumentError(
              "interface does not support formatting sighash",
              "format",
              format
            );
          }
          const abi = this.fragments.map((fragment) => fragment.format(format));
          if (format === FormatTypes.json) {
            return JSON.stringify(abi.map((j2) => JSON.parse(j2)));
          }
          return abi;
        }
        static getAbiCoder() {
          return defaultAbiCoder;
        }
        static getAddress(address) {
          return getAddress(address);
        }
        static getSighash(fragment) {
          return hexDataSlice(id(fragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
          return id(eventFragment.format());
        }
        getFunction(nameOrSignatureOrSighash) {
          if (isHexString3(nameOrSignatureOrSighash)) {
            for (const name2 in this.functions) {
              if (nameOrSignatureOrSighash === this.getSighash(name2)) {
                return this.functions[name2];
              }
            }
            logger21.throwArgumentError(
              "no matching function",
              "sighash",
              nameOrSignatureOrSighash
            );
          }
          if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name2 = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.functions).filter(
              (f2) => f2.split("(")[0] === name2
            );
            if (matching.length === 0) {
              logger21.throwArgumentError(
                "no matching function",
                "name",
                name2
              );
            } else if (matching.length > 1) {
              logger21.throwArgumentError(
                "multiple matching functions",
                "name",
                name2
              );
            }
            return this.functions[matching[0]];
          }
          const result =
            this.functions[
              FunctionFragment.fromString(nameOrSignatureOrSighash).format()
            ];
          if (!result) {
            logger21.throwArgumentError(
              "no matching function",
              "signature",
              nameOrSignatureOrSighash
            );
          }
          return result;
        }
        getEvent(nameOrSignatureOrTopic) {
          if (isHexString3(nameOrSignatureOrTopic)) {
            const topichash = nameOrSignatureOrTopic.toLowerCase();
            for (const name2 in this.events) {
              if (topichash === this.getEventTopic(name2)) {
                return this.events[name2];
              }
            }
            logger21.throwArgumentError(
              "no matching event",
              "topichash",
              topichash
            );
          }
          if (nameOrSignatureOrTopic.indexOf("(") === -1) {
            const name2 = nameOrSignatureOrTopic.trim();
            const matching = Object.keys(this.events).filter(
              (f2) => f2.split("(")[0] === name2
            );
            if (matching.length === 0) {
              logger21.throwArgumentError("no matching event", "name", name2);
            } else if (matching.length > 1) {
              logger21.throwArgumentError(
                "multiple matching events",
                "name",
                name2
              );
            }
            return this.events[matching[0]];
          }
          const result =
            this.events[
              EventFragment.fromString(nameOrSignatureOrTopic).format()
            ];
          if (!result) {
            logger21.throwArgumentError(
              "no matching event",
              "signature",
              nameOrSignatureOrTopic
            );
          }
          return result;
        }
        getError(nameOrSignatureOrSighash) {
          if (isHexString3(nameOrSignatureOrSighash)) {
            const getSighash = getStatic(this.constructor, "getSighash");
            for (const name2 in this.errors) {
              const error = this.errors[name2];
              if (nameOrSignatureOrSighash === getSighash(error)) {
                return this.errors[name2];
              }
            }
            logger21.throwArgumentError(
              "no matching error",
              "sighash",
              nameOrSignatureOrSighash
            );
          }
          if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name2 = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.errors).filter(
              (f2) => f2.split("(")[0] === name2
            );
            if (matching.length === 0) {
              logger21.throwArgumentError("no matching error", "name", name2);
            } else if (matching.length > 1) {
              logger21.throwArgumentError(
                "multiple matching errors",
                "name",
                name2
              );
            }
            return this.errors[matching[0]];
          }
          const result =
            this.errors[
              FunctionFragment.fromString(nameOrSignatureOrSighash).format()
            ];
          if (!result) {
            logger21.throwArgumentError(
              "no matching error",
              "signature",
              nameOrSignatureOrSighash
            );
          }
          return result;
        }
        getSighash(fragment) {
          if (typeof fragment === "string") {
            try {
              fragment = this.getFunction(fragment);
            } catch (error) {
              try {
                fragment = this.getError(fragment);
              } catch (_2) {
                throw error;
              }
            }
          }
          return getStatic(this.constructor, "getSighash")(fragment);
        }
        getEventTopic(eventFragment) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
          return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
          return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
          return this._encodeParams(this.deploy.inputs, values || []);
        }
        decodeErrorResult(fragment, data) {
          if (typeof fragment === "string") {
            fragment = this.getError(fragment);
          }
          const bytes = arrayify2(data);
          if (hexlify2(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
            logger21.throwArgumentError(
              `data signature does not match error ${fragment.name}.`,
              "data",
              hexlify2(bytes)
            );
          }
          return this._decodeParams(fragment.inputs, bytes.slice(4));
        }
        encodeErrorResult(fragment, values) {
          if (typeof fragment === "string") {
            fragment = this.getError(fragment);
          }
          return hexlify2(
            concat([
              this.getSighash(fragment),
              this._encodeParams(fragment.inputs, values || []),
            ])
          );
        }
        decodeFunctionData(functionFragment, data) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          const bytes = arrayify2(data);
          if (
            hexlify2(bytes.slice(0, 4)) !== this.getSighash(functionFragment)
          ) {
            logger21.throwArgumentError(
              `data signature does not match function ${functionFragment.name}.`,
              "data",
              hexlify2(bytes)
            );
          }
          return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        encodeFunctionData(functionFragment, values) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          return hexlify2(
            concat([
              this.getSighash(functionFragment),
              this._encodeParams(functionFragment.inputs, values || []),
            ])
          );
        }
        decodeFunctionResult(functionFragment, data) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          let bytes = arrayify2(data);
          let reason = null;
          let errorArgs = null;
          let errorName = null;
          let errorSignature = null;
          switch (bytes.length % this._abiCoder._getWordSize()) {
            case 0:
              try {
                return this._abiCoder.decode(functionFragment.outputs, bytes);
              } catch (error) {}
              break;
            case 4: {
              const selector = hexlify2(bytes.slice(0, 4));
              const builtin = BuiltinErrors[selector];
              if (builtin) {
                errorArgs = this._abiCoder.decode(
                  builtin.inputs,
                  bytes.slice(4)
                );
                errorName = builtin.name;
                errorSignature = builtin.signature;
                if (builtin.reason) {
                  reason = errorArgs[0];
                }
              } else {
                try {
                  const error = this.getError(selector);
                  errorArgs = this._abiCoder.decode(
                    error.inputs,
                    bytes.slice(4)
                  );
                  errorName = error.name;
                  errorSignature = error.format();
                } catch (error) {
                  console.log(error);
                }
              }
              break;
            }
          }
          return logger21.throwError(
            "call revert exception",
            Logger2.errors.CALL_EXCEPTION,
            {
              method: functionFragment.format(),
              errorArgs,
              errorName,
              errorSignature,
              reason,
            }
          );
        }
        encodeFunctionResult(functionFragment, values) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          return hexlify2(
            this._abiCoder.encode(functionFragment.outputs, values || [])
          );
        }
        encodeFilterTopics(eventFragment, values) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          if (values.length > eventFragment.inputs.length) {
            logger21.throwError(
              "too many arguments for " + eventFragment.format(),
              Logger2.errors.UNEXPECTED_ARGUMENT,
              {
                argument: "values",
                value: values,
              }
            );
          }
          let topics = [];
          if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
          }
          const encodeTopic = (param, value) => {
            if (param.type === "string") {
              return id(value);
            } else if (param.type === "bytes") {
              return keccak256(hexlify2(value));
            }
            if (param.type === "address") {
              this._abiCoder.encode(["address"], [value]);
            }
            return hexZeroPad2(hexlify2(value), 32);
          };
          values.forEach((value, index) => {
            let param = eventFragment.inputs[index];
            if (!param.indexed) {
              if (value != null) {
                logger21.throwArgumentError(
                  "cannot filter non-indexed parameters; must be null",
                  "contract." + param.name,
                  value
                );
              }
              return;
            }
            if (value == null) {
              topics.push(null);
            } else if (
              param.baseType === "array" ||
              param.baseType === "tuple"
            ) {
              logger21.throwArgumentError(
                "filtering with tuples or arrays not supported",
                "contract." + param.name,
                value
              );
            } else if (Array.isArray(value)) {
              topics.push(value.map((value2) => encodeTopic(param, value2)));
            } else {
              topics.push(encodeTopic(param, value));
            }
          });
          while (topics.length && topics[topics.length - 1] === null) {
            topics.pop();
          }
          return topics;
        }
        encodeEventLog(eventFragment, values) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          const topics = [];
          const dataTypes = [];
          const dataValues = [];
          if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
          }
          if (values.length !== eventFragment.inputs.length) {
            logger21.throwArgumentError(
              "event arguments/values mismatch",
              "values",
              values
            );
          }
          eventFragment.inputs.forEach((param, index) => {
            const value = values[index];
            if (param.indexed) {
              if (param.type === "string") {
                topics.push(id(value));
              } else if (param.type === "bytes") {
                topics.push(keccak256(value));
              } else if (
                param.baseType === "tuple" ||
                param.baseType === "array"
              ) {
                throw new Error("not implemented");
              } else {
                topics.push(this._abiCoder.encode([param.type], [value]));
              }
            } else {
              dataTypes.push(param);
              dataValues.push(value);
            }
          });
          return {
            data: this._abiCoder.encode(dataTypes, dataValues),
            topics,
          };
        }
        decodeEventLog(eventFragment, data, topics) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          if (topics != null && !eventFragment.anonymous) {
            let topicHash = this.getEventTopic(eventFragment);
            if (
              !isHexString3(topics[0], 32) ||
              topics[0].toLowerCase() !== topicHash
            ) {
              logger21.throwError(
                "fragment/topic mismatch",
                Logger2.errors.INVALID_ARGUMENT,
                { argument: "topics[0]", expected: topicHash, value: topics[0] }
              );
            }
            topics = topics.slice(1);
          }
          let indexed = [];
          let nonIndexed = [];
          let dynamic = [];
          eventFragment.inputs.forEach((param, index) => {
            if (param.indexed) {
              if (
                param.type === "string" ||
                param.type === "bytes" ||
                param.baseType === "tuple" ||
                param.baseType === "array"
              ) {
                indexed.push(
                  ParamType.fromObject({ type: "bytes32", name: param.name })
                );
                dynamic.push(true);
              } else {
                indexed.push(param);
                dynamic.push(false);
              }
            } else {
              nonIndexed.push(param);
              dynamic.push(false);
            }
          });
          let resultIndexed =
            topics != null
              ? this._abiCoder.decode(indexed, concat(topics))
              : null;
          let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
          let result = [];
          let nonIndexedIndex = 0,
            indexedIndex = 0;
          eventFragment.inputs.forEach((param, index) => {
            if (param.indexed) {
              if (resultIndexed == null) {
                result[index] = new Indexed({ _isIndexed: true, hash: null });
              } else if (dynamic[index]) {
                result[index] = new Indexed({
                  _isIndexed: true,
                  hash: resultIndexed[indexedIndex++],
                });
              } else {
                try {
                  result[index] = resultIndexed[indexedIndex++];
                } catch (error) {
                  result[index] = error;
                }
              }
            } else {
              try {
                result[index] = resultNonIndexed[nonIndexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
            if (param.name && result[param.name] == null) {
              const value = result[index];
              if (value instanceof Error) {
                Object.defineProperty(result, param.name, {
                  enumerable: true,
                  get: () => {
                    throw wrapAccessError(
                      `property ${JSON.stringify(param.name)}`,
                      value
                    );
                  },
                });
              } else {
                result[param.name] = value;
              }
            }
          });
          for (let i = 0; i < result.length; i++) {
            const value = result[i];
            if (value instanceof Error) {
              Object.defineProperty(result, i, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`index ${i}`, value);
                },
              });
            }
          }
          return Object.freeze(result);
        }
        parseTransaction(tx) {
          let fragment = this.getFunction(
            tx.data.substring(0, 10).toLowerCase()
          );
          if (!fragment) {
            return null;
          }
          return new TransactionDescription({
            args: this._abiCoder.decode(
              fragment.inputs,
              "0x" + tx.data.substring(10)
            ),
            functionFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
            value: BigNumber.from(tx.value || "0"),
          });
        }
        parseLog(log2) {
          let fragment = this.getEvent(log2.topics[0]);
          if (!fragment || fragment.anonymous) {
            return null;
          }
          return new LogDescription({
            eventFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            topic: this.getEventTopic(fragment),
            args: this.decodeEventLog(fragment, log2.data, log2.topics),
          });
        }
        parseError(data) {
          const hexData = hexlify2(data);
          let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
          if (!fragment) {
            return null;
          }
          return new ErrorDescription({
            args: this._abiCoder.decode(
              fragment.inputs,
              "0x" + hexData.substring(10)
            ),
            errorFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
          });
        }
        static isInterface(value) {
          return !!(value && value._isInterface);
        }
      };
    },
  });

  // node_modules/@ethersproject/abi/lib.esm/index.js
  var init_lib24 = __esm({
    "node_modules/@ethersproject/abi/lib.esm/index.js"() {
      "use strict";
      init_fragments();
      init_abi_coder();
      init_interface();
    },
  });

  // node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version23;
  var init_version23 = __esm({
    "node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version23 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize8() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors8,
    _censorErrors8,
    LogLevels8,
    _logLevel8,
    _globalLogger8,
    _normalizeError8,
    LogLevel8,
    ErrorCode8,
    HEX8,
    Logger8;
  var init_lib25 = __esm({
    "node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version23();
      _permanentCensorErrors8 = false;
      _censorErrors8 = false;
      LogLevels8 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel8 = LogLevels8["default"];
      _globalLogger8 = null;
      _normalizeError8 = _checkNormalize8();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel8 || (LogLevel8 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode8 || (ErrorCode8 = {}));
      HEX8 = "0123456789abcdef";
      Logger8 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels8[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel8 > LogLevels8[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger8.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger8.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger8.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors8) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger8.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX8[value[i] >> 4];
                  hex += HEX8[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger8.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError8) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger8.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError8,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger8.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger8.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger8.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger8.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger8.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger8.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger8.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger8) {
            _globalLogger8 = new Logger8(version23);
          }
          return _globalLogger8;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger8.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors8) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger8.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors8 = !!censorship;
          _permanentCensorErrors8 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels8[logLevel.toLowerCase()];
          if (level == null) {
            Logger8.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel8 = level;
        }
        static from(version89) {
          return new Logger8(version89);
        }
      };
      Logger8.errors = ErrorCode8;
      Logger8.levels = LogLevel8;
    },
  });

  // node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version24;
  var init_version24 = __esm({
    "node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version24 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly3(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function resolveProperties(object) {
    return __awaiter3(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function _isFrozen3(object) {
    if (object === void 0 || object === null || opaque3[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen3(value)) {
          return false;
        }
      }
      return true;
    }
    return logger22.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy3(object) {
    if (_isFrozen3(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy3(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly3(result, key2, deepCopy3(value));
      }
      return result;
    }
    return logger22.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy3(object) {
    return _deepCopy3(object);
  }
  var __awaiter3, logger22, opaque3, Description2;
  var init_lib26 = __esm({
    "node_modules/@ethersproject/abstract-provider/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib25();
      init_version24();
      __awaiter3 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger22 = new Logger8(version24);
      opaque3 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
      Description2 = class {
        constructor(info) {
          for (const key2 in info) {
            this[key2] = deepCopy3(info[key2]);
          }
        }
      };
    },
  });

  // node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
  var version25;
  var init_version25 = __esm({
    "node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"() {
      version25 = "abstract-provider/5.5.1";
    },
  });

  // node_modules/@ethersproject/abstract-provider/lib.esm/index.js
  var __awaiter4, logger23, ForkEvent, Provider;
  var init_lib27 = __esm({
    "node_modules/@ethersproject/abstract-provider/lib.esm/index.js"() {
      "use strict";
      init_lib3();
      init_lib26();
      init_lib25();
      init_version25();
      __awaiter4 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger23 = new Logger8(version25);
      ForkEvent = class extends Description2 {
        static isForkEvent(value) {
          return !!(value && value._isForkEvent);
        }
      };
      Provider = class {
        constructor() {
          logger23.checkAbstract(new.target, Provider);
          defineReadOnly3(this, "_isProvider", true);
        }
        getFeeData() {
          return __awaiter4(this, void 0, void 0, function* () {
            const { block, gasPrice } = yield resolveProperties({
              block: this.getBlock("latest"),
              gasPrice: this.getGasPrice().catch((error) => {
                return null;
              }),
            });
            let maxFeePerGas = null,
              maxPriorityFeePerGas = null;
            if (block && block.baseFeePerGas) {
              maxPriorityFeePerGas = BigNumber.from("2500000000");
              maxFeePerGas = block.baseFeePerGas
                .mul(2)
                .add(maxPriorityFeePerGas);
            }
            return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
          });
        }
        addListener(eventName, listener) {
          return this.on(eventName, listener);
        }
        removeListener(eventName, listener) {
          return this.off(eventName, listener);
        }
        static isProvider(value) {
          return !!(value && value._isProvider);
        }
      };
    },
  });

  // node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version26;
  var init_version26 = __esm({
    "node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version26 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize9() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors9,
    _censorErrors9,
    LogLevels9,
    _logLevel9,
    _globalLogger9,
    _normalizeError9,
    LogLevel9,
    ErrorCode9,
    HEX9,
    Logger9;
  var init_lib28 = __esm({
    "node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version26();
      _permanentCensorErrors9 = false;
      _censorErrors9 = false;
      LogLevels9 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel9 = LogLevels9["default"];
      _globalLogger9 = null;
      _normalizeError9 = _checkNormalize9();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel9 || (LogLevel9 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode9 || (ErrorCode9 = {}));
      HEX9 = "0123456789abcdef";
      Logger9 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels9[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel9 > LogLevels9[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger9.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger9.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger9.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors9) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger9.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX9[value[i] >> 4];
                  hex += HEX9[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger9.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError9) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger9.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError9,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger9.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger9.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger9.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger9.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger9.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger9.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger9.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger9) {
            _globalLogger9 = new Logger9(version26);
          }
          return _globalLogger9;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger9.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors9) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger9.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors9 = !!censorship;
          _permanentCensorErrors9 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels9[logLevel.toLowerCase()];
          if (level == null) {
            Logger9.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel9 = level;
        }
        static from(version89) {
          return new Logger9(version89);
        }
      };
      Logger9.errors = ErrorCode9;
      Logger9.levels = LogLevel9;
    },
  });

  // node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version27;
  var init_version27 = __esm({
    "node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version27 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly4(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function resolveProperties2(object) {
    return __awaiter5(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function shallowCopy2(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  var __awaiter5, logger24;
  var init_lib29 = __esm({
    "node_modules/@ethersproject/abstract-signer/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib28();
      init_version27();
      __awaiter5 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger24 = new Logger9(version27);
    },
  });

  // node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
  var version28;
  var init_version28 = __esm({
    "node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"() {
      version28 = "abstract-signer/5.5.0";
    },
  });

  // node_modules/@ethersproject/abstract-signer/lib.esm/index.js
  var __awaiter6,
    logger25,
    allowedTransactionKeys,
    forwardErrors,
    Signer,
    VoidSigner;
  var init_lib30 = __esm({
    "node_modules/@ethersproject/abstract-signer/lib.esm/index.js"() {
      "use strict";
      init_lib29();
      init_lib28();
      init_version28();
      __awaiter6 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger25 = new Logger9(version28);
      allowedTransactionKeys = [
        "accessList",
        "chainId",
        "customData",
        "data",
        "from",
        "gasLimit",
        "gasPrice",
        "maxFeePerGas",
        "maxPriorityFeePerGas",
        "nonce",
        "to",
        "type",
        "value",
      ];
      forwardErrors = [
        Logger9.errors.INSUFFICIENT_FUNDS,
        Logger9.errors.NONCE_EXPIRED,
        Logger9.errors.REPLACEMENT_UNDERPRICED,
      ];
      Signer = class {
        constructor() {
          logger25.checkAbstract(new.target, Signer);
          defineReadOnly4(this, "_isSigner", true);
        }
        getBalance(blockTag) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("getBalance");
            return yield this.provider.getBalance(this.getAddress(), blockTag);
          });
        }
        getTransactionCount(blockTag) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("getTransactionCount");
            return yield this.provider.getTransactionCount(
              this.getAddress(),
              blockTag
            );
          });
        }
        estimateGas(transaction) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("estimateGas");
            const tx = yield resolveProperties2(
              this.checkTransaction(transaction)
            );
            return yield this.provider.estimateGas(tx);
          });
        }
        call(transaction, blockTag) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("call");
            const tx = yield resolveProperties2(
              this.checkTransaction(transaction)
            );
            return yield this.provider.call(tx, blockTag);
          });
        }
        sendTransaction(transaction) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("sendTransaction");
            const tx = yield this.populateTransaction(transaction);
            const signedTx = yield this.signTransaction(tx);
            return yield this.provider.sendTransaction(signedTx);
          });
        }
        getChainId() {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("getChainId");
            const network = yield this.provider.getNetwork();
            return network.chainId;
          });
        }
        getGasPrice() {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("getGasPrice");
            return yield this.provider.getGasPrice();
          });
        }
        getFeeData() {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("getFeeData");
            return yield this.provider.getFeeData();
          });
        }
        resolveName(name2) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._checkProvider("resolveName");
            return yield this.provider.resolveName(name2);
          });
        }
        checkTransaction(transaction) {
          for (const key2 in transaction) {
            if (allowedTransactionKeys.indexOf(key2) === -1) {
              logger25.throwArgumentError(
                "invalid transaction key: " + key2,
                "transaction",
                transaction
              );
            }
          }
          const tx = shallowCopy2(transaction);
          if (tx.from == null) {
            tx.from = this.getAddress();
          } else {
            tx.from = Promise.all([
              Promise.resolve(tx.from),
              this.getAddress(),
            ]).then((result) => {
              if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                logger25.throwArgumentError(
                  "from address mismatch",
                  "transaction",
                  transaction
                );
              }
              return result[0];
            });
          }
          return tx;
        }
        populateTransaction(transaction) {
          return __awaiter6(this, void 0, void 0, function* () {
            const tx = yield resolveProperties2(
              this.checkTransaction(transaction)
            );
            if (tx.to != null) {
              tx.to = Promise.resolve(tx.to).then((to) =>
                __awaiter6(this, void 0, void 0, function* () {
                  if (to == null) {
                    return null;
                  }
                  const address = yield this.resolveName(to);
                  if (address == null) {
                    logger25.throwArgumentError(
                      "provided ENS name resolves to null",
                      "tx.to",
                      to
                    );
                  }
                  return address;
                })
              );
              tx.to.catch((error) => {});
            }
            const hasEip1559 =
              tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
              logger25.throwArgumentError(
                "eip-1559 transaction do not support gasPrice",
                "transaction",
                transaction
              );
            } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
              logger25.throwArgumentError(
                "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas",
                "transaction",
                transaction
              );
            }
            if (
              (tx.type === 2 || tx.type == null) &&
              tx.maxFeePerGas != null &&
              tx.maxPriorityFeePerGas != null
            ) {
              tx.type = 2;
            } else if (tx.type === 0 || tx.type === 1) {
              if (tx.gasPrice == null) {
                tx.gasPrice = this.getGasPrice();
              }
            } else {
              const feeData = yield this.getFeeData();
              if (tx.type == null) {
                if (
                  feeData.maxFeePerGas != null &&
                  feeData.maxPriorityFeePerGas != null
                ) {
                  tx.type = 2;
                  if (tx.gasPrice != null) {
                    const gasPrice = tx.gasPrice;
                    delete tx.gasPrice;
                    tx.maxFeePerGas = gasPrice;
                    tx.maxPriorityFeePerGas = gasPrice;
                  } else {
                    if (tx.maxFeePerGas == null) {
                      tx.maxFeePerGas = feeData.maxFeePerGas;
                    }
                    if (tx.maxPriorityFeePerGas == null) {
                      tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                    }
                  }
                } else if (feeData.gasPrice != null) {
                  if (hasEip1559) {
                    logger25.throwError(
                      "network does not support EIP-1559",
                      Logger9.errors.UNSUPPORTED_OPERATION,
                      {
                        operation: "populateTransaction",
                      }
                    );
                  }
                  if (tx.gasPrice == null) {
                    tx.gasPrice = feeData.gasPrice;
                  }
                  tx.type = 0;
                } else {
                  logger25.throwError(
                    "failed to get consistent fee data",
                    Logger9.errors.UNSUPPORTED_OPERATION,
                    {
                      operation: "signer.getFeeData",
                    }
                  );
                }
              } else if (tx.type === 2) {
                if (tx.maxFeePerGas == null) {
                  tx.maxFeePerGas = feeData.maxFeePerGas;
                }
                if (tx.maxPriorityFeePerGas == null) {
                  tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
              }
            }
            if (tx.nonce == null) {
              tx.nonce = this.getTransactionCount("pending");
            }
            if (tx.gasLimit == null) {
              tx.gasLimit = this.estimateGas(tx).catch((error) => {
                if (forwardErrors.indexOf(error.code) >= 0) {
                  throw error;
                }
                return logger25.throwError(
                  "cannot estimate gas; transaction may fail or may require manual gas limit",
                  Logger9.errors.UNPREDICTABLE_GAS_LIMIT,
                  {
                    error,
                    tx,
                  }
                );
              });
            }
            if (tx.chainId == null) {
              tx.chainId = this.getChainId();
            } else {
              tx.chainId = Promise.all([
                Promise.resolve(tx.chainId),
                this.getChainId(),
              ]).then((results) => {
                if (results[1] !== 0 && results[0] !== results[1]) {
                  logger25.throwArgumentError(
                    "chainId address mismatch",
                    "transaction",
                    transaction
                  );
                }
                return results[0];
              });
            }
            return yield resolveProperties2(tx);
          });
        }
        _checkProvider(operation) {
          if (!this.provider) {
            logger25.throwError(
              "missing provider",
              Logger9.errors.UNSUPPORTED_OPERATION,
              {
                operation: operation || "_checkProvider",
              }
            );
          }
        }
        static isSigner(value) {
          return !!(value && value._isSigner);
        }
      };
      VoidSigner = class extends Signer {
        constructor(address, provider) {
          logger25.checkNew(new.target, VoidSigner);
          super();
          defineReadOnly4(this, "address", address);
          defineReadOnly4(this, "provider", provider || null);
        }
        getAddress() {
          return Promise.resolve(this.address);
        }
        _fail(message, operation) {
          return Promise.resolve().then(() => {
            logger25.throwError(message, Logger9.errors.UNSUPPORTED_OPERATION, {
              operation,
            });
          });
        }
        signMessage(message) {
          return this._fail("VoidSigner cannot sign messages", "signMessage");
        }
        signTransaction(transaction) {
          return this._fail(
            "VoidSigner cannot sign transactions",
            "signTransaction"
          );
        }
        _signTypedData(domain, types, value) {
          return this._fail(
            "VoidSigner cannot sign typed data",
            "signTypedData"
          );
        }
        connect(provider) {
          return new VoidSigner(this.address, provider);
        }
      };
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version29;
  var init_version29 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version29 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize10() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors10,
    _censorErrors10,
    LogLevels10,
    _logLevel10,
    _globalLogger10,
    _normalizeError10,
    LogLevel10,
    ErrorCode10,
    HEX10,
    Logger10;
  var init_lib31 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version29();
      _permanentCensorErrors10 = false;
      _censorErrors10 = false;
      LogLevels10 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel10 = LogLevels10["default"];
      _globalLogger10 = null;
      _normalizeError10 = _checkNormalize10();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel10 || (LogLevel10 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode10 || (ErrorCode10 = {}));
      HEX10 = "0123456789abcdef";
      Logger10 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels10[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel10 > LogLevels10[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger10.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger10.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger10.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors10) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger10.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX10[value[i] >> 4];
                  hex += HEX10[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger10.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError10) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger10.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError10,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger10.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger10.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger10.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger10.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger10.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger10.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger10.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger10) {
            _globalLogger10 = new Logger10(version29);
          }
          return _globalLogger10;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger10.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors10) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger10.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors10 = !!censorship;
          _permanentCensorErrors10 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels10[logLevel.toLowerCase()];
          if (level == null) {
            Logger10.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel10 = level;
        }
        static from(version89) {
          return new Logger10(version89);
        }
      };
      Logger10.errors = ErrorCode10;
      Logger10.levels = LogLevel10;
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version30;
  var init_version30 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version30 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable8(value) {
    return !!value.toHexString;
  }
  function addSlice8(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice8(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger8(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes8(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger8(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger8(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify8(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger26.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice8(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable8(value)) {
      value = value.toHexString();
    }
    if (isHexString9(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger26.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice8(new Uint8Array(result));
    }
    if (isBytes8(value)) {
      return addSlice8(new Uint8Array(value));
    }
    return logger26.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat5(items) {
    const objects = items.map((item) => arrayify8(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice8(result);
  }
  function isHexString9(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify7(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger26.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters7[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable8(value)) {
      return value.toHexString();
    }
    if (isHexString9(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger26.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes8(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters7[(v2 & 240) >> 4] + HexCharacters7[v2 & 15];
      }
      return result;
    }
    return logger26.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength2(data) {
    if (typeof data !== "string") {
      data = hexlify7(data);
    } else if (!isHexString9(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  var logger26, HexCharacters7;
  var init_lib32 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib31();
      init_version30();
      logger26 = new Logger10(version30);
      HexCharacters7 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version31;
  var init_version31 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version31 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly5(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function getStatic2(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function resolveProperties3(object) {
    return __awaiter7(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function shallowCopy3(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  function _isFrozen4(object) {
    if (object === void 0 || object === null || opaque4[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen4(value)) {
          return false;
        }
      }
      return true;
    }
    return logger27.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy4(object) {
    if (_isFrozen4(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy4(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly5(result, key2, deepCopy4(value));
      }
      return result;
    }
    return logger27.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy4(object) {
    return _deepCopy4(object);
  }
  var __awaiter7, logger27, opaque4;
  var init_lib33 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib31();
      init_version31();
      __awaiter7 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger27 = new Logger10(version31);
      opaque4 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
    },
  });

  // node_modules/minimalistic-assert/index.js
  var require_minimalistic_assert = __commonJS({
    "node_modules/minimalistic-assert/index.js"(exports, module) {
      module.exports = assert3;
      function assert3(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      assert3.equal = function assertEqual2(l2, r, msg) {
        if (l2 != r)
          throw new Error(msg || "Assertion failed: " + l2 + " != " + r);
      };
    },
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    },
  });

  // node_modules/inherits/inherits.js
  var require_inherits = __commonJS({
    "node_modules/inherits/inherits.js"(exports, module) {
      try {
        util = __require("util");
        if (typeof util.inherits !== "function") throw "";
        module.exports = util.inherits;
      } catch (e) {
        module.exports = require_inherits_browser();
      }
      var util;
    },
  });

  // node_modules/hash.js/lib/hash/utils.js
  var require_utils3 = __commonJS({
    "node_modules/hash.js/lib/hash/utils.js"(exports) {
      "use strict";
      var assert3 = require_minimalistic_assert();
      var inherits = require_inherits();
      exports.inherits = inherits;
      function isSurrogatePair(msg, i) {
        if ((msg.charCodeAt(i) & 64512) !== 55296) {
          return false;
        }
        if (i < 0 || i + 1 >= msg.length) {
          return false;
        }
        return (msg.charCodeAt(i + 1) & 64512) === 56320;
      }
      function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg === "string") {
          if (!enc) {
            var p2 = 0;
            for (var i = 0; i < msg.length; i++) {
              var c2 = msg.charCodeAt(i);
              if (c2 < 128) {
                res[p2++] = c2;
              } else if (c2 < 2048) {
                res[p2++] = (c2 >> 6) | 192;
                res[p2++] = (c2 & 63) | 128;
              } else if (isSurrogatePair(msg, i)) {
                c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                res[p2++] = (c2 >> 18) | 240;
                res[p2++] = ((c2 >> 12) & 63) | 128;
                res[p2++] = ((c2 >> 6) & 63) | 128;
                res[p2++] = (c2 & 63) | 128;
              } else {
                res[p2++] = (c2 >> 12) | 224;
                res[p2++] = ((c2 >> 6) & 63) | 128;
                res[p2++] = (c2 & 63) | 128;
              }
            }
          } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
        } else {
          for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
        }
        return res;
      }
      exports.toArray = toArray;
      function toHex2(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
        return res;
      }
      exports.toHex = toHex2;
      function htonl(w2) {
        var res =
          (w2 >>> 24) |
          ((w2 >>> 8) & 65280) |
          ((w2 << 8) & 16711680) |
          ((w2 & 255) << 24);
        return res >>> 0;
      }
      exports.htonl = htonl;
      function toHex32(msg, endian) {
        var res = "";
        for (var i = 0; i < msg.length; i++) {
          var w2 = msg[i];
          if (endian === "little") w2 = htonl(w2);
          res += zero8(w2.toString(16));
        }
        return res;
      }
      exports.toHex32 = toHex32;
      function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
      }
      exports.zero2 = zero2;
      function zero8(word) {
        if (word.length === 7) return "0" + word;
        else if (word.length === 6) return "00" + word;
        else if (word.length === 5) return "000" + word;
        else if (word.length === 4) return "0000" + word;
        else if (word.length === 3) return "00000" + word;
        else if (word.length === 2) return "000000" + word;
        else if (word.length === 1) return "0000000" + word;
        else return word;
      }
      exports.zero8 = zero8;
      function join32(msg, start, end, endian) {
        var len = end - start;
        assert3(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i = 0, k2 = start; i < res.length; i++, k2 += 4) {
          var w2;
          if (endian === "big")
            w2 =
              (msg[k2] << 24) |
              (msg[k2 + 1] << 16) |
              (msg[k2 + 2] << 8) |
              msg[k2 + 3];
          else
            w2 =
              (msg[k2 + 3] << 24) |
              (msg[k2 + 2] << 16) |
              (msg[k2 + 1] << 8) |
              msg[k2];
          res[i] = w2 >>> 0;
        }
        return res;
      }
      exports.join32 = join32;
      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i = 0, k2 = 0; i < msg.length; i++, k2 += 4) {
          var m2 = msg[i];
          if (endian === "big") {
            res[k2] = m2 >>> 24;
            res[k2 + 1] = (m2 >>> 16) & 255;
            res[k2 + 2] = (m2 >>> 8) & 255;
            res[k2 + 3] = m2 & 255;
          } else {
            res[k2 + 3] = m2 >>> 24;
            res[k2 + 2] = (m2 >>> 16) & 255;
            res[k2 + 1] = (m2 >>> 8) & 255;
            res[k2] = m2 & 255;
          }
        }
        return res;
      }
      exports.split32 = split32;
      function rotr32(w2, b2) {
        return (w2 >>> b2) | (w2 << (32 - b2));
      }
      exports.rotr32 = rotr32;
      function rotl32(w2, b2) {
        return (w2 << b2) | (w2 >>> (32 - b2));
      }
      exports.rotl32 = rotl32;
      function sum32(a2, b2) {
        return (a2 + b2) >>> 0;
      }
      exports.sum32 = sum32;
      function sum32_3(a2, b2, c2) {
        return (a2 + b2 + c2) >>> 0;
      }
      exports.sum32_3 = sum32_3;
      function sum32_4(a2, b2, c2, d2) {
        return (a2 + b2 + c2 + d2) >>> 0;
      }
      exports.sum32_4 = sum32_4;
      function sum32_5(a2, b2, c2, d2, e) {
        return (a2 + b2 + c2 + d2 + e) >>> 0;
      }
      exports.sum32_5 = sum32_5;
      function sum64(buf, pos, ah, al) {
        var bh = buf[pos];
        var bl = buf[pos + 1];
        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf[pos] = hi >>> 0;
        buf[pos + 1] = lo;
      }
      exports.sum64 = sum64;
      function sum64_hi(ah, al, bh, bl) {
        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      exports.sum64_hi = sum64_hi;
      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      exports.sum64_lo = sum64_lo;
      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;
        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      exports.sum64_4_hi = sum64_4_hi;
      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      exports.sum64_4_lo = sum64_4_lo;
      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = (lo + el) >>> 0;
        carry += lo < el ? 1 : 0;
        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      exports.sum64_5_hi = sum64_5_hi;
      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;
        return lo >>> 0;
      }
      exports.sum64_5_lo = sum64_5_lo;
      function rotr64_hi(ah, al, num) {
        var r = (al << (32 - num)) | (ah >>> num);
        return r >>> 0;
      }
      exports.rotr64_hi = rotr64_hi;
      function rotr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.rotr64_lo = rotr64_lo;
      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      exports.shr64_hi = shr64_hi;
      function shr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.shr64_lo = shr64_lo;
    },
  });

  // node_modules/hash.js/lib/hash/common.js
  var require_common2 = __commonJS({
    "node_modules/hash.js/lib/hash/common.js"(exports) {
      "use strict";
      var utils = require_utils3();
      var assert3 = require_minimalistic_assert();
      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = "big";
        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      exports.BlockHash = BlockHash;
      BlockHash.prototype.update = function update2(msg, enc) {
        msg = utils.toArray(msg, enc);
        if (!this.pending) this.pending = msg;
        else this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;
        if (this.pending.length >= this._delta8) {
          msg = this.pending;
          var r = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r, msg.length);
          if (this.pending.length === 0) this.pending = null;
          msg = utils.join32(msg, 0, msg.length - r, this.endian);
          for (var i = 0; i < msg.length; i += this._delta32)
            this._update(msg, i, i + this._delta32);
        }
        return this;
      };
      BlockHash.prototype.digest = function digest(enc) {
        this.update(this._pad());
        assert3(this.pending === null);
        return this._digest(enc);
      };
      BlockHash.prototype._pad = function pad() {
        var len = this.pendingTotal;
        var bytes = this._delta8;
        var k2 = bytes - ((len + this.padLength) % bytes);
        var res = new Array(k2 + this.padLength);
        res[0] = 128;
        for (var i = 1; i < k2; i++) res[i] = 0;
        len <<= 3;
        if (this.endian === "big") {
          for (var t2 = 8; t2 < this.padLength; t2++) res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = (len >>> 24) & 255;
          res[i++] = (len >>> 16) & 255;
          res[i++] = (len >>> 8) & 255;
          res[i++] = len & 255;
        } else {
          res[i++] = len & 255;
          res[i++] = (len >>> 8) & 255;
          res[i++] = (len >>> 16) & 255;
          res[i++] = (len >>> 24) & 255;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          for (t2 = 8; t2 < this.padLength; t2++) res[i++] = 0;
        }
        return res;
      };
    },
  });

  // node_modules/hash.js/lib/hash/sha/common.js
  var require_common3 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
      "use strict";
      var utils = require_utils3();
      var rotr32 = utils.rotr32;
      function ft_1(s2, x2, y2, z2) {
        if (s2 === 0) return ch32(x2, y2, z2);
        if (s2 === 1 || s2 === 3) return p32(x2, y2, z2);
        if (s2 === 2) return maj32(x2, y2, z2);
      }
      exports.ft_1 = ft_1;
      function ch32(x2, y2, z2) {
        return (x2 & y2) ^ (~x2 & z2);
      }
      exports.ch32 = ch32;
      function maj32(x2, y2, z2) {
        return (x2 & y2) ^ (x2 & z2) ^ (y2 & z2);
      }
      exports.maj32 = maj32;
      function p32(x2, y2, z2) {
        return x2 ^ y2 ^ z2;
      }
      exports.p32 = p32;
      function s0_256(x2) {
        return rotr32(x2, 2) ^ rotr32(x2, 13) ^ rotr32(x2, 22);
      }
      exports.s0_256 = s0_256;
      function s1_256(x2) {
        return rotr32(x2, 6) ^ rotr32(x2, 11) ^ rotr32(x2, 25);
      }
      exports.s1_256 = s1_256;
      function g0_256(x2) {
        return rotr32(x2, 7) ^ rotr32(x2, 18) ^ (x2 >>> 3);
      }
      exports.g0_256 = g0_256;
      function g1_256(x2) {
        return rotr32(x2, 17) ^ rotr32(x2, 19) ^ (x2 >>> 10);
      }
      exports.g1_256 = g1_256;
    },
  });

  // node_modules/hash.js/lib/hash/sha/1.js
  var require__ = __commonJS({
    "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var common = require_common2();
      var shaCommon = require_common3();
      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_5 = utils.sum32_5;
      var ft_1 = shaCommon.ft_1;
      var BlockHash = common.BlockHash;
      var sha1_K = [1518500249, 1859775393, 2400959708, 3395469782];
      function SHA1() {
        if (!(this instanceof SHA1)) return new SHA1();
        BlockHash.call(this);
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        this.W = new Array(80);
      }
      utils.inherits(SHA1, BlockHash);
      module.exports = SHA1;
      SHA1.blockSize = 512;
      SHA1.outSize = 160;
      SHA1.hmacStrength = 80;
      SHA1.padLength = 64;
      SHA1.prototype._update = function _update(msg, start) {
        var W = this.W;
        for (var i = 0; i < 16; i++) W[i] = msg[start + i];
        for (; i < W.length; i++)
          W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
        var a2 = this.h[0];
        var b2 = this.h[1];
        var c2 = this.h[2];
        var d2 = this.h[3];
        var e = this.h[4];
        for (i = 0; i < W.length; i++) {
          var s2 = ~~(i / 20);
          var t2 = sum32_5(
            rotl32(a2, 5),
            ft_1(s2, b2, c2, d2),
            e,
            W[i],
            sha1_K[s2]
          );
          e = d2;
          d2 = c2;
          c2 = rotl32(b2, 30);
          b2 = a2;
          a2 = t2;
        }
        this.h[0] = sum32(this.h[0], a2);
        this.h[1] = sum32(this.h[1], b2);
        this.h[2] = sum32(this.h[2], c2);
        this.h[3] = sum32(this.h[3], d2);
        this.h[4] = sum32(this.h[4], e);
      };
      SHA1.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };
    },
  });

  // node_modules/hash.js/lib/hash/sha/256.js
  var require__2 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var common = require_common2();
      var shaCommon = require_common3();
      var assert3 = require_minimalistic_assert();
      var sum32 = utils.sum32;
      var sum32_4 = utils.sum32_4;
      var sum32_5 = utils.sum32_5;
      var ch32 = shaCommon.ch32;
      var maj32 = shaCommon.maj32;
      var s0_256 = shaCommon.s0_256;
      var s1_256 = shaCommon.s1_256;
      var g0_256 = shaCommon.g0_256;
      var g1_256 = shaCommon.g1_256;
      var BlockHash = common.BlockHash;
      var sha256_K = [
        1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993,
        2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987,
        1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774,
        264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,
        2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711,
        113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
        1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
        3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344,
        430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
        1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424,
        2428436474, 2756734187, 3204031479, 3329325298,
      ];
      function SHA256() {
        if (!(this instanceof SHA256)) return new SHA256();
        BlockHash.call(this);
        this.h = [
          1779033703, 3144134277, 1013904242, 2773480762, 1359893119,
          2600822924, 528734635, 1541459225,
        ];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils.inherits(SHA256, BlockHash);
      module.exports = SHA256;
      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;
      SHA256.prototype._update = function _update(msg, start) {
        var W = this.W;
        for (var i = 0; i < 16; i++) W[i] = msg[start + i];
        for (; i < W.length; i++)
          W[i] = sum32_4(
            g1_256(W[i - 2]),
            W[i - 7],
            g0_256(W[i - 15]),
            W[i - 16]
          );
        var a2 = this.h[0];
        var b2 = this.h[1];
        var c2 = this.h[2];
        var d2 = this.h[3];
        var e = this.h[4];
        var f2 = this.h[5];
        var g2 = this.h[6];
        var h2 = this.h[7];
        assert3(this.k.length === W.length);
        for (i = 0; i < W.length; i++) {
          var T1 = sum32_5(h2, s1_256(e), ch32(e, f2, g2), this.k[i], W[i]);
          var T2 = sum32(s0_256(a2), maj32(a2, b2, c2));
          h2 = g2;
          g2 = f2;
          f2 = e;
          e = sum32(d2, T1);
          d2 = c2;
          c2 = b2;
          b2 = a2;
          a2 = sum32(T1, T2);
        }
        this.h[0] = sum32(this.h[0], a2);
        this.h[1] = sum32(this.h[1], b2);
        this.h[2] = sum32(this.h[2], c2);
        this.h[3] = sum32(this.h[3], d2);
        this.h[4] = sum32(this.h[4], e);
        this.h[5] = sum32(this.h[5], f2);
        this.h[6] = sum32(this.h[6], g2);
        this.h[7] = sum32(this.h[7], h2);
      };
      SHA256.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };
    },
  });

  // node_modules/hash.js/lib/hash/sha/224.js
  var require__3 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var SHA256 = require__2();
      function SHA224() {
        if (!(this instanceof SHA224)) return new SHA224();
        SHA256.call(this);
        this.h = [
          3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025,
          1694076839, 3204075428,
        ];
      }
      utils.inherits(SHA224, SHA256);
      module.exports = SHA224;
      SHA224.blockSize = 512;
      SHA224.outSize = 224;
      SHA224.hmacStrength = 192;
      SHA224.padLength = 64;
      SHA224.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
        else return utils.split32(this.h.slice(0, 7), "big");
      };
    },
  });

  // node_modules/hash.js/lib/hash/sha/512.js
  var require__4 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var common = require_common2();
      var assert3 = require_minimalistic_assert();
      var rotr64_hi = utils.rotr64_hi;
      var rotr64_lo = utils.rotr64_lo;
      var shr64_hi = utils.shr64_hi;
      var shr64_lo = utils.shr64_lo;
      var sum64 = utils.sum64;
      var sum64_hi = utils.sum64_hi;
      var sum64_lo = utils.sum64_lo;
      var sum64_4_hi = utils.sum64_4_hi;
      var sum64_4_lo = utils.sum64_4_lo;
      var sum64_5_hi = utils.sum64_5_hi;
      var sum64_5_lo = utils.sum64_5_lo;
      var BlockHash = common.BlockHash;
      var sha512_K = [
        1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399,
        3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265,
        2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394,
        310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994,
        1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317,
        3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139,
        264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901,
        1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837,
        2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879,
        3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901,
        113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964,
        773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823,
        1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142,
        2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273,
        3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344,
        3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720,
        430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593,
        883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403,
        1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012,
        2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044,
        2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573,
        3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711,
        3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554,
        174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315,
        685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100,
        1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866,
        1607167915, 987167468, 1816402316, 1246189591,
      ];
      function SHA512() {
        if (!(this instanceof SHA512)) return new SHA512();
        BlockHash.call(this);
        this.h = [
          1779033703, 4089235720, 3144134277, 2227873595, 1013904242,
          4271175723, 2773480762, 1595750129, 1359893119, 2917565137,
          2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209,
        ];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils.inherits(SHA512, BlockHash);
      module.exports = SHA512;
      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;
      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W = this.W;
        for (var i = 0; i < 32; i++) W[i] = msg[start + i];
        for (; i < W.length; i += 2) {
          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
          var c1_hi = W[i - 14];
          var c1_lo = W[i - 13];
          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
          var c3_hi = W[i - 32];
          var c3_lo = W[i - 31];
          W[i] = sum64_4_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
          W[i + 1] = sum64_4_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo
          );
        }
      };
      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);
        var W = this.W;
        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];
        assert3(this.k.length === W.length);
        for (var i = 0; i < W.length; i += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i];
          var c3_lo = this.k[i + 1];
          var c4_hi = W[i];
          var c4_lo = W[i + 1];
          var T1_hi = sum64_5_hi(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          var T1_lo = sum64_5_lo(
            c0_hi,
            c0_lo,
            c1_hi,
            c1_lo,
            c2_hi,
            c2_lo,
            c3_hi,
            c3_lo,
            c4_hi,
            c4_lo
          );
          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
        }
        sum64(this.h, 0, ah, al);
        sum64(this.h, 2, bh, bl);
        sum64(this.h, 4, ch, cl);
        sum64(this.h, 6, dh, dl);
        sum64(this.h, 8, eh, el);
        sum64(this.h, 10, fh, fl);
        sum64(this.h, 12, gh, gl);
        sum64(this.h, 14, hh, hl);
      };
      SHA512.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };
      function ch64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ (~xh & zh);
        if (r < 0) r += 4294967296;
        return r;
      }
      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ (~xl & zl);
        if (r < 0) r += 4294967296;
        return r;
      }
      function maj64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
        if (r < 0) r += 4294967296;
        return r;
      }
      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
        if (r < 0) r += 4294967296;
        return r;
      }
      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 28);
        var c1_hi = rotr64_hi(xl, xh, 2);
        var c2_hi = rotr64_hi(xl, xh, 7);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 4294967296;
        return r;
      }
      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 28);
        var c1_lo = rotr64_lo(xl, xh, 2);
        var c2_lo = rotr64_lo(xl, xh, 7);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 4294967296;
        return r;
      }
      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 14);
        var c1_hi = rotr64_hi(xh, xl, 18);
        var c2_hi = rotr64_hi(xl, xh, 9);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 4294967296;
        return r;
      }
      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 14);
        var c1_lo = rotr64_lo(xh, xl, 18);
        var c2_lo = rotr64_lo(xl, xh, 9);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 4294967296;
        return r;
      }
      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 1);
        var c1_hi = rotr64_hi(xh, xl, 8);
        var c2_hi = shr64_hi(xh, xl, 7);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 4294967296;
        return r;
      }
      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 1);
        var c1_lo = rotr64_lo(xh, xl, 8);
        var c2_lo = shr64_lo(xh, xl, 7);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 4294967296;
        return r;
      }
      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 19);
        var c1_hi = rotr64_hi(xl, xh, 29);
        var c2_hi = shr64_hi(xh, xl, 6);
        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 4294967296;
        return r;
      }
      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 19);
        var c1_lo = rotr64_lo(xl, xh, 29);
        var c2_lo = shr64_lo(xh, xl, 6);
        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 4294967296;
        return r;
      }
    },
  });

  // node_modules/hash.js/lib/hash/sha/384.js
  var require__5 = __commonJS({
    "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var SHA512 = require__4();
      function SHA384() {
        if (!(this instanceof SHA384)) return new SHA384();
        SHA512.call(this);
        this.h = [
          3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999,
          355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025,
          3675008525, 1694076839, 1203062813, 3204075428,
        ];
      }
      utils.inherits(SHA384, SHA512);
      module.exports = SHA384;
      SHA384.blockSize = 1024;
      SHA384.outSize = 384;
      SHA384.hmacStrength = 192;
      SHA384.padLength = 128;
      SHA384.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
        else return utils.split32(this.h.slice(0, 12), "big");
      };
    },
  });

  // node_modules/hash.js/lib/hash/sha.js
  var require_sha = __commonJS({
    "node_modules/hash.js/lib/hash/sha.js"(exports) {
      "use strict";
      exports.sha1 = require__();
      exports.sha224 = require__3();
      exports.sha256 = require__2();
      exports.sha384 = require__5();
      exports.sha512 = require__4();
    },
  });

  // node_modules/hash.js/lib/hash/ripemd.js
  var require_ripemd = __commonJS({
    "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
      "use strict";
      var utils = require_utils3();
      var common = require_common2();
      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_3 = utils.sum32_3;
      var sum32_4 = utils.sum32_4;
      var BlockHash = common.BlockHash;
      function RIPEMD160() {
        if (!(this instanceof RIPEMD160)) return new RIPEMD160();
        BlockHash.call(this);
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        this.endian = "little";
      }
      utils.inherits(RIPEMD160, BlockHash);
      exports.ripemd160 = RIPEMD160;
      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;
      RIPEMD160.prototype._update = function update2(msg, start) {
        var A2 = this.h[0];
        var B2 = this.h[1];
        var C2 = this.h[2];
        var D2 = this.h[3];
        var E2 = this.h[4];
        var Ah = A2;
        var Bh = B2;
        var Ch = C2;
        var Dh = D2;
        var Eh = E2;
        for (var j2 = 0; j2 < 80; j2++) {
          var T2 = sum32(
            rotl32(
              sum32_4(A2, f2(j2, B2, C2, D2), msg[r[j2] + start], K(j2)),
              s2[j2]
            ),
            E2
          );
          A2 = E2;
          E2 = D2;
          D2 = rotl32(C2, 10);
          C2 = B2;
          B2 = T2;
          T2 = sum32(
            rotl32(
              sum32_4(Ah, f2(79 - j2, Bh, Ch, Dh), msg[rh[j2] + start], Kh(j2)),
              sh[j2]
            ),
            Eh
          );
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T2;
        }
        T2 = sum32_3(this.h[1], C2, Dh);
        this.h[1] = sum32_3(this.h[2], D2, Eh);
        this.h[2] = sum32_3(this.h[3], E2, Ah);
        this.h[3] = sum32_3(this.h[4], A2, Bh);
        this.h[4] = sum32_3(this.h[0], B2, Ch);
        this.h[0] = T2;
      };
      RIPEMD160.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "little");
        else return utils.split32(this.h, "little");
      };
      function f2(j2, x2, y2, z2) {
        if (j2 <= 15) return x2 ^ y2 ^ z2;
        else if (j2 <= 31) return (x2 & y2) | (~x2 & z2);
        else if (j2 <= 47) return (x2 | ~y2) ^ z2;
        else if (j2 <= 63) return (x2 & z2) | (y2 & ~z2);
        else return x2 ^ (y2 | ~z2);
      }
      function K(j2) {
        if (j2 <= 15) return 0;
        else if (j2 <= 31) return 1518500249;
        else if (j2 <= 47) return 1859775393;
        else if (j2 <= 63) return 2400959708;
        else return 2840853838;
      }
      function Kh(j2) {
        if (j2 <= 15) return 1352829926;
        else if (j2 <= 31) return 1548603684;
        else if (j2 <= 47) return 1836072691;
        else if (j2 <= 63) return 2053994217;
        else return 0;
      }
      var r = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10,
        6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0,
        6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
      ];
      var rh = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0,
        13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8,
        12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10,
        14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
      ];
      var s2 = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11,
        9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14,
        8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6,
        5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
      ];
      var sh = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7,
        12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12,
        13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12,
        5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
      ];
    },
  });

  // node_modules/hash.js/lib/hash/hmac.js
  var require_hmac = __commonJS({
    "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
      "use strict";
      var utils = require_utils3();
      var assert3 = require_minimalistic_assert();
      function Hmac(hash4, key2, enc) {
        if (!(this instanceof Hmac)) return new Hmac(hash4, key2, enc);
        this.Hash = hash4;
        this.blockSize = hash4.blockSize / 8;
        this.outSize = hash4.outSize / 8;
        this.inner = null;
        this.outer = null;
        this._init(utils.toArray(key2, enc));
      }
      module.exports = Hmac;
      Hmac.prototype._init = function init2(key2) {
        if (key2.length > this.blockSize)
          key2 = new this.Hash().update(key2).digest();
        assert3(key2.length <= this.blockSize);
        for (var i = key2.length; i < this.blockSize; i++) key2.push(0);
        for (i = 0; i < key2.length; i++) key2[i] ^= 54;
        this.inner = new this.Hash().update(key2);
        for (i = 0; i < key2.length; i++) key2[i] ^= 106;
        this.outer = new this.Hash().update(key2);
      };
      Hmac.prototype.update = function update2(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };
      Hmac.prototype.digest = function digest(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };
    },
  });

  // node_modules/hash.js/lib/hash.js
  var require_hash = __commonJS({
    "node_modules/hash.js/lib/hash.js"(exports) {
      var hash4 = exports;
      hash4.utils = require_utils3();
      hash4.common = require_common2();
      hash4.sha = require_sha();
      hash4.ripemd = require_ripemd();
      hash4.hmac = require_hmac();
      hash4.sha1 = hash4.sha.sha1;
      hash4.sha256 = hash4.sha.sha256;
      hash4.sha224 = hash4.sha.sha224;
      hash4.sha384 = hash4.sha.sha384;
      hash4.sha512 = hash4.sha.sha512;
      hash4.ripemd160 = hash4.ripemd.ripemd160;
    },
  });

  // node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
  function createCommonjsModule(fn, basedir, module) {
    return (
      (module = {
        path: basedir,
        exports: {},
        require: function (path3, base2) {
          return commonjsRequire(
            path3,
            base2 === void 0 || base2 === null ? module.path : base2
          );
        },
      }),
      fn(module, module.exports),
      module.exports
    );
  }
  function commonjsRequire() {
    throw new Error(
      "Dynamic requires are not currently supported by @rollup/plugin-commonjs"
    );
  }
  function assert2(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
  }
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new import_bn2.default(conf.p, 16);
    this.red = conf.prime
      ? import_bn2.default.red(conf.prime)
      : import_bn2.default.mont(this.p);
    this.zero = new import_bn2.default(0).toRed(this.red);
    this.one = new import_bn2.default(1).toRed(this.red);
    this.two = new import_bn2.default(2).toRed(this.red);
    this.n = conf.n && new import_bn2.default(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
    this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  function Point(curve, x2, y2, isRed) {
    base.BasePoint.call(this, curve, "affine");
    if (x2 === null && y2 === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new import_bn2.default(x2, 16);
      this.y = new import_bn2.default(y2, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  function JPoint(curve, x2, y2, z2) {
    base.BasePoint.call(this, curve, "jacobian");
    if (x2 === null && y2 === null && z2 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new import_bn2.default(0);
    } else {
      this.x = new import_bn2.default(x2, 16);
      this.y = new import_bn2.default(y2, 16);
      this.z = new import_bn2.default(z2, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
  }
  function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new import_bn2.default(options.r, 16);
    this.s = new import_bn2.default(options.s, 16);
    if (options.recoveryParam === void 0) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
  }
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p2) {
    var initial = buf[p2.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i = 0, off = p2.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p2.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 255);
    }
    arr.push(len);
  }
  function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    if (typeof options === "string") {
      assert$5(
        Object.prototype.hasOwnProperty.call(curves_1, options),
        "Unknown curve " + options
      );
      options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve) options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var import_bn2,
    import_hash2,
    minimalisticAssert,
    utils_1,
    utils_1$1,
    getNAF,
    getJSF,
    assert$1,
    base,
    inherits_browser,
    assert$2,
    short_1,
    curve_1,
    curves_1,
    hmacDrbg,
    assert$3,
    key,
    assert$4,
    signature,
    rand,
    assert$5,
    ec,
    elliptic_1,
    EC$1;
  var init_elliptic = __esm({
    "node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
      import_bn2 = __toESM(require_bn());
      import_hash2 = __toESM(require_hash());
      minimalisticAssert = assert2;
      assert2.equal = function assertEqual(l2, r, msg) {
        if (l2 != r)
          throw new Error(msg || "Assertion failed: " + l2 + " != " + r);
      };
      utils_1 = createCommonjsModule(function (module, exports) {
        "use strict";
        var utils = exports;
        function toArray(msg, enc) {
          if (Array.isArray(msg)) return msg.slice();
          if (!msg) return [];
          var res = [];
          if (typeof msg !== "string") {
            for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            return res;
          }
          if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (var i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else {
            for (var i = 0; i < msg.length; i++) {
              var c2 = msg.charCodeAt(i);
              var hi = c2 >> 8;
              var lo = c2 & 255;
              if (hi) res.push(hi, lo);
              else res.push(lo);
            }
          }
          return res;
        }
        utils.toArray = toArray;
        function zero2(word) {
          if (word.length === 1) return "0" + word;
          else return word;
        }
        utils.zero2 = zero2;
        function toHex2(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        utils.toHex = toHex2;
        utils.encode = function encode4(arr, enc) {
          if (enc === "hex") return toHex2(arr);
          else return arr;
        };
      });
      utils_1$1 = createCommonjsModule(function (module, exports) {
        "use strict";
        var utils = exports;
        utils.assert = minimalisticAssert;
        utils.toArray = utils_1.toArray;
        utils.zero2 = utils_1.zero2;
        utils.toHex = utils_1.toHex;
        utils.encode = utils_1.encode;
        function getNAF2(num, w2, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);
          var ws = 1 << (w2 + 1);
          var k2 = num.clone();
          for (var i = 0; i < naf.length; i++) {
            var z2;
            var mod = k2.andln(ws - 1);
            if (k2.isOdd()) {
              if (mod > (ws >> 1) - 1) z2 = (ws >> 1) - mod;
              else z2 = mod;
              k2.isubn(z2);
            } else {
              z2 = 0;
            }
            naf[i] = z2;
            k2.iushrn(1);
          }
          return naf;
        }
        utils.getNAF = getNAF2;
        function getJSF2(k1, k2) {
          var jsf = [[], []];
          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          var m8;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            var m14 = (k1.andln(3) + d1) & 3;
            var m24 = (k2.andln(3) + d2) & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              m8 = (k1.andln(7) + d1) & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
              else u1 = m14;
            }
            jsf[0].push(u1);
            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              m8 = (k2.andln(7) + d2) & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
              else u2 = m24;
            }
            jsf[1].push(u2);
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }
          return jsf;
        }
        utils.getJSF = getJSF2;
        function cachedProperty(obj, name2, computer) {
          var key2 = "_" + name2;
          obj.prototype[name2] = function cachedProperty2() {
            return this[key2] !== void 0
              ? this[key2]
              : (this[key2] = computer.call(this));
          };
        }
        utils.cachedProperty = cachedProperty;
        function parseBytes(bytes) {
          return typeof bytes === "string"
            ? utils.toArray(bytes, "hex")
            : bytes;
        }
        utils.parseBytes = parseBytes;
        function intFromLE(bytes) {
          return new import_bn2.default(bytes, "hex", "le");
        }
        utils.intFromLE = intFromLE;
      });
      getNAF = utils_1$1.getNAF;
      getJSF = utils_1$1.getJSF;
      assert$1 = utils_1$1.assert;
      base = BaseCurve;
      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype.validate = function validate() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k2) {
        assert$1(p2.precomputed);
        var doubles = p2._getDoubles();
        var naf = getNAF(k2, 1, this._bitLength);
        var I2 = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
        I2 /= 3;
        var repr = [];
        var j2;
        var nafW;
        for (j2 = 0; j2 < naf.length; j2 += doubles.step) {
          nafW = 0;
          for (var l2 = j2 + doubles.step - 1; l2 >= j2; l2--)
            nafW = (nafW << 1) + naf[l2];
          repr.push(nafW);
        }
        var a2 = this.jpoint(null, null, null);
        var b2 = this.jpoint(null, null, null);
        for (var i = I2; i > 0; i--) {
          for (j2 = 0; j2 < repr.length; j2++) {
            nafW = repr[j2];
            if (nafW === i) b2 = b2.mixedAdd(doubles.points[j2]);
            else if (nafW === -i) b2 = b2.mixedAdd(doubles.points[j2].neg());
          }
          a2 = a2.add(b2);
        }
        return a2.toP();
      };
      BaseCurve.prototype._wnafMul = function _wnafMul(p2, k2) {
        var w2 = 4;
        var nafPoints = p2._getNAFPoints(w2);
        w2 = nafPoints.wnd;
        var wnd = nafPoints.points;
        var naf = getNAF(k2, w2, this._bitLength);
        var acc = this.jpoint(null, null, null);
        for (var i = naf.length - 1; i >= 0; i--) {
          for (var l2 = 0; i >= 0 && naf[i] === 0; i--) l2++;
          if (i >= 0) l2++;
          acc = acc.dblp(l2);
          if (i < 0) break;
          var z2 = naf[i];
          assert$1(z2 !== 0);
          if (p2.type === "affine") {
            if (z2 > 0) acc = acc.mixedAdd(wnd[(z2 - 1) >> 1]);
            else acc = acc.mixedAdd(wnd[(-z2 - 1) >> 1].neg());
          } else {
            if (z2 > 0) acc = acc.add(wnd[(z2 - 1) >> 1]);
            else acc = acc.add(wnd[(-z2 - 1) >> 1].neg());
          }
        }
        return p2.type === "affine" ? acc.toP() : acc;
      };
      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(
        defW,
        points,
        coeffs,
        len,
        jacobianResult
      ) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;
        var max = 0;
        var i;
        var j2;
        var p2;
        for (i = 0; i < len; i++) {
          p2 = points[i];
          var nafPoints = p2._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
        }
        for (i = len - 1; i >= 1; i -= 2) {
          var a2 = i - 1;
          var b2 = i;
          if (wndWidth[a2] !== 1 || wndWidth[b2] !== 1) {
            naf[a2] = getNAF(coeffs[a2], wndWidth[a2], this._bitLength);
            naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);
            max = Math.max(naf[a2].length, max);
            max = Math.max(naf[b2].length, max);
            continue;
          }
          var comb = [points[a2], null, null, points[b2]];
          if (points[a2].y.cmp(points[b2].y) === 0) {
            comb[1] = points[a2].add(points[b2]);
            comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
          } else if (points[a2].y.cmp(points[b2].y.redNeg()) === 0) {
            comb[1] = points[a2].toJ().mixedAdd(points[b2]);
            comb[2] = points[a2].add(points[b2].neg());
          } else {
            comb[1] = points[a2].toJ().mixedAdd(points[b2]);
            comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
          }
          var index = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
          var jsf = getJSF(coeffs[a2], coeffs[b2]);
          max = Math.max(jsf[0].length, max);
          naf[a2] = new Array(max);
          naf[b2] = new Array(max);
          for (j2 = 0; j2 < max; j2++) {
            var ja = jsf[0][j2] | 0;
            var jb = jsf[1][j2] | 0;
            naf[a2][j2] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b2][j2] = 0;
            wnd[a2] = comb;
          }
        }
        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (i = max; i >= 0; i--) {
          var k2 = 0;
          while (i >= 0) {
            var zero = true;
            for (j2 = 0; j2 < len; j2++) {
              tmp[j2] = naf[j2][i] | 0;
              if (tmp[j2] !== 0) zero = false;
            }
            if (!zero) break;
            k2++;
            i--;
          }
          if (i >= 0) k2++;
          acc = acc.dblp(k2);
          if (i < 0) break;
          for (j2 = 0; j2 < len; j2++) {
            var z2 = tmp[j2];
            p2;
            if (z2 === 0) continue;
            else if (z2 > 0) p2 = wnd[j2][(z2 - 1) >> 1];
            else if (z2 < 0) p2 = wnd[j2][(-z2 - 1) >> 1].neg();
            if (p2.type === "affine") acc = acc.mixedAdd(p2);
            else acc = acc.add(p2);
          }
        }
        for (i = 0; i < len; i++) wnd[i] = null;
        if (jacobianResult) return acc;
        else return acc.toP();
      };
      BaseCurve.BasePoint = BasePoint;
      BasePoint.prototype.eq = function eq() {
        throw new Error("Not implemented");
      };
      BasePoint.prototype.validate = function validate2() {
        return this.curve.validate(this);
      };
      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils_1$1.toArray(bytes, enc);
        var len = this.p.byteLength();
        if (
          (bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) &&
          bytes.length - 1 === 2 * len
        ) {
          if (bytes[0] === 6) assert$1(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 7) assert$1(bytes[bytes.length - 1] % 2 === 1);
          var res = this.point(
            bytes.slice(1, 1 + len),
            bytes.slice(1 + len, 1 + 2 * len)
          );
          return res;
        } else if (
          (bytes[0] === 2 || bytes[0] === 3) &&
          bytes.length - 1 === len
        ) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
        }
        throw new Error("Unknown point format");
      };
      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };
      BasePoint.prototype._encode = function _encode2(compact) {
        var len = this.curve.p.byteLength();
        var x2 = this.getX().toArray("be", len);
        if (compact) return [this.getY().isEven() ? 2 : 3].concat(x2);
        return [4].concat(x2, this.getY().toArray("be", len));
      };
      BasePoint.prototype.encode = function encode2(enc, compact) {
        return utils_1$1.encode(this._encode(compact), enc);
      };
      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed) return this;
        var precomputed = {
          doubles: null,
          naf: null,
          beta: null,
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;
        return this;
      };
      BasePoint.prototype._hasDoubles = function _hasDoubles(k2) {
        if (!this.precomputed) return false;
        var doubles = this.precomputed.doubles;
        if (!doubles) return false;
        return (
          doubles.points.length >=
          Math.ceil((k2.bitLength() + 1) / doubles.step)
        );
      };
      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles)
          return this.precomputed.doubles;
        var doubles = [this];
        var acc = this;
        for (var i = 0; i < power; i += step) {
          for (var j2 = 0; j2 < step; j2++) acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step,
          points: doubles,
        };
      };
      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf)
          return this.precomputed.naf;
        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl3 = max === 1 ? null : this.dbl();
        for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl3);
        return {
          wnd,
          points: res,
        };
      };
      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };
      BasePoint.prototype.dblp = function dblp(k2) {
        var r = this;
        for (var i = 0; i < k2; i++) r = r.dbl();
        return r;
      };
      inherits_browser = createCommonjsModule(function (module) {
        if (typeof Object.create === "function") {
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              });
            }
          };
        } else {
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      });
      assert$2 = utils_1$1.assert;
      inherits_browser(ShortCurve, base);
      short_1 = ShortCurve;
      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new import_bn2.default(conf.lambda, 16);
        } else {
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function (vec) {
            return {
              a: new import_bn2.default(vec.a, 16),
              b: new import_bn2.default(vec.b, 16),
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }
        return {
          beta,
          lambda,
          basis,
        };
      };
      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        var red = num === this.p ? this.red : import_bn2.default.mont(num);
        var tinv = new import_bn2.default(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();
        var s2 = new import_bn2.default(3)
          .toRed(red)
          .redNeg()
          .redSqrt()
          .redMul(tinv);
        var l1 = ntinv.redAdd(s2).fromRed();
        var l2 = ntinv.redSub(s2).fromRed();
        return [l1, l2];
      };
      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
        var u2 = lambda;
        var v2 = this.n.clone();
        var x1 = new import_bn2.default(1);
        var y1 = new import_bn2.default(0);
        var x2 = new import_bn2.default(0);
        var y2 = new import_bn2.default(1);
        var a0;
        var b0;
        var a1;
        var b1;
        var a2;
        var b2;
        var prevR;
        var i = 0;
        var r;
        var x3;
        while (u2.cmpn(0) !== 0) {
          var q2 = v2.div(u2);
          r = v2.sub(q2.mul(u2));
          x3 = x2.sub(q2.mul(x1));
          var y3 = y2.sub(q2.mul(y1));
          if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x3;
          } else if (a1 && ++i === 2) {
            break;
          }
          prevR = r;
          v2 = u2;
          u2 = r;
          x2 = x1;
          x1 = x3;
          y2 = y1;
          y1 = y3;
        }
        a2 = r.neg();
        b2 = x3;
        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }
        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 },
        ];
      };
      ShortCurve.prototype._endoSplit = function _endoSplit(k2) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];
        var c1 = v2.b.mul(k2).divRound(this.n);
        var c2 = v1.b.neg().mul(k2).divRound(this.n);
        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);
        var k1 = k2.sub(p1).sub(p2);
        var k22 = q1.add(q2).neg();
        return { k1, k2: k22 };
      };
      ShortCurve.prototype.pointFromX = function pointFromX(x2, odd) {
        x2 = new import_bn2.default(x2, 16);
        if (!x2.red) x2 = x2.toRed(this.red);
        var y2 = x2
          .redSqr()
          .redMul(x2)
          .redIAdd(x2.redMul(this.a))
          .redIAdd(this.b);
        var y3 = y2.redSqrt();
        if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y3.fromRed().isOdd();
        if ((odd && !isOdd) || (!odd && isOdd)) y3 = y3.redNeg();
        return this.point(x2, y3);
      };
      ShortCurve.prototype.validate = function validate3(point3) {
        if (point3.inf) return true;
        var x2 = point3.x;
        var y2 = point3.y;
        var ax = this.a.redMul(x2);
        var rhs = x2.redSqr().redMul(x2).redIAdd(ax).redIAdd(this.b);
        return y2.redSqr().redISub(rhs).cmpn(0) === 0;
      };
      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(
        points,
        coeffs,
        jacobianResult
      ) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p2 = points[i];
          var beta = p2._getBeta();
          if (split.k1.negative) {
            split.k1.ineg();
            p2 = p2.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }
          npoints[i * 2] = p2;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
        for (var j2 = 0; j2 < i * 2; j2++) {
          npoints[j2] = null;
          ncoeffs[j2] = null;
        }
        return res;
      };
      inherits_browser(Point, base.BasePoint);
      ShortCurve.prototype.point = function point2(x2, y2, isRed) {
        return new Point(this, x2, y2, isRed);
      };
      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };
      Point.prototype._getBeta = function _getBeta2() {
        if (!this.curve.endo) return;
        var pre = this.precomputed;
        if (pre && pre.beta) return pre.beta;
        var beta = this.curve.point(
          this.x.redMul(this.curve.endo.beta),
          this.y
        );
        if (pre) {
          var curve = this.curve;
          var endoMul = function (p2) {
            return curve.point(p2.x.redMul(curve.endo.beta), p2.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul),
            },
          };
        }
        return beta;
      };
      Point.prototype.toJSON = function toJSON() {
        if (!this.precomputed) return [this.x, this.y];
        return [
          this.x,
          this.y,
          this.precomputed && {
            doubles: this.precomputed.doubles && {
              step: this.precomputed.doubles.step,
              points: this.precomputed.doubles.points.slice(1),
            },
            naf: this.precomputed.naf && {
              wnd: this.precomputed.naf.wnd,
              points: this.precomputed.naf.points.slice(1),
            },
          },
        ];
      };
      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === "string") obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2]) return res;
        function obj2point(obj2) {
          return curve.point(obj2[0], obj2[1], red);
        }
        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point)),
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point)),
          },
        };
        return res;
      };
      Point.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC Point Infinity>";
        return (
          "<EC Point x: " +
          this.x.fromRed().toString(16, 2) +
          " y: " +
          this.y.fromRed().toString(16, 2) +
          ">"
        );
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };
      Point.prototype.add = function add(p2) {
        if (this.inf) return p2;
        if (p2.inf) return this;
        if (this.eq(p2)) return this.dbl();
        if (this.neg().eq(p2)) return this.curve.point(null, null);
        if (this.x.cmp(p2.x) === 0) return this.curve.point(null, null);
        var c2 = this.y.redSub(p2.y);
        if (c2.cmpn(0) !== 0) c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
        var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
        var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.dbl = function dbl() {
        if (this.inf) return this;
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
        var a2 = this.curve.a;
        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a2).redMul(dyinv);
        var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };
      Point.prototype.mul = function mul(k2) {
        k2 = new import_bn2.default(k2, 16);
        if (this.isInfinity()) return this;
        else if (this._hasDoubles(k2)) return this.curve._fixedNafMul(this, k2);
        else if (this.curve.endo)
          return this.curve._endoWnafMulAdd([this], [k2]);
        else return this.curve._wnafMul(this, k2);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs, true);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };
      Point.prototype.eq = function eq2(p2) {
        return (
          this === p2 ||
          (this.inf === p2.inf &&
            (this.inf || (this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0)))
        );
      };
      Point.prototype.neg = function neg(_precompute) {
        if (this.inf) return this;
        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function (p2) {
            return p2.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate),
            },
          };
        }
        return res;
      };
      Point.prototype.toJ = function toJ() {
        if (this.inf) return this.curve.jpoint(null, null, null);
        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };
      inherits_browser(JPoint, base.BasePoint);
      ShortCurve.prototype.jpoint = function jpoint(x2, y2, z2) {
        return new JPoint(this, x2, y2, z2);
      };
      JPoint.prototype.toP = function toP() {
        if (this.isInfinity()) return this.curve.point(null, null);
        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);
        return this.curve.point(ax, ay);
      };
      JPoint.prototype.neg = function neg2() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };
      JPoint.prototype.add = function add2(p2) {
        if (this.isInfinity()) return p2;
        if (p2.isInfinity()) return this;
        var pz2 = p2.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p2.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p2.z));
        var s2 = p2.y.redMul(z2.redMul(this.z));
        var h2 = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h2.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }
        var h22 = h2.redSqr();
        var h3 = h22.redMul(h2);
        var v2 = u1.redMul(h22);
        var nx = r.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
        var ny = r.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p2.z).redMul(h2);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mixedAdd = function mixedAdd(p2) {
        if (this.isInfinity()) return p2.toJ();
        if (p2.isInfinity()) return this;
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p2.x.redMul(z2);
        var s1 = this.y;
        var s2 = p2.y.redMul(z2).redMul(this.z);
        var h2 = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h2.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }
        var h22 = h2.redSqr();
        var h3 = h22.redMul(h2);
        var v2 = u1.redMul(h22);
        var nx = r.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
        var ny = r.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h2);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.dblp = function dblp2(pow) {
        if (pow === 0) return this;
        if (this.isInfinity()) return this;
        if (!pow) return this.dbl();
        var i;
        if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for (i = 0; i < pow; i++) r = r.dbl();
          return r;
        }
        var a2 = this.curve.a;
        var tinv = this.curve.tinv;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jyd = jy.redAdd(jy);
        for (i = 0; i < pow; i++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
          var t1 = jx.redMul(jyd2);
          var nx = c2.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c2.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
          jx = nx;
          jz = nz;
          jyd = dny;
        }
        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };
      JPoint.prototype.dbl = function dbl2() {
        if (this.isInfinity()) return this;
        if (this.curve.zeroA) return this._zeroDbl();
        else if (this.curve.threeA) return this._threeDbl();
        else return this._dbl();
      };
      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m2 = xx.redAdd(xx).redIAdd(xx);
          var t2 = m2.redSqr().redISub(s2).redISub(s2);
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          nx = t2;
          ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var a2 = this.x.redSqr();
          var b2 = this.y.redSqr();
          var c2 = b2.redSqr();
          var d2 = this.x.redAdd(b2).redSqr().redISub(a2).redISub(c2);
          d2 = d2.redIAdd(d2);
          var e = a2.redAdd(a2).redIAdd(a2);
          var f2 = e.redSqr();
          var c8 = c2.redIAdd(c2);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);
          nx = f2.redISub(d2).redISub(d2);
          ny = e.redMul(d2.redISub(nx)).redISub(c8);
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          var t2 = m2.redSqr().redISub(s2).redISub(s2);
          nx = t2;
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var delta = this.z.redSqr();
          var gamma = this.y.redSqr();
          var beta = this.x.redMul(gamma);
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._dbl = function _dbl() {
        var a2 = this.curve.a;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();
        var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c2.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c2.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA) return this.dbl().add(this);
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var zz = this.z.redSqr();
        var yyyy = yy.redSqr();
        var m2 = xx.redAdd(xx).redIAdd(xx);
        var mm = m2.redSqr();
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        var ee = e.redSqr();
        var t2 = yyyy.redIAdd(yyyy);
        t2 = t2.redIAdd(t2);
        t2 = t2.redIAdd(t2);
        t2 = t2.redIAdd(t2);
        var u2 = m2.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
        var yyu4 = yy.redMul(u2);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        var ny = this.y.redMul(u2.redMul(t2.redISub(u2)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mul = function mul2(k2, kbase) {
        k2 = new import_bn2.default(k2, kbase);
        return this.curve._wnafMul(this, k2);
      };
      JPoint.prototype.eq = function eq3(p2) {
        if (p2.type === "affine") return this.eq(p2.toJ());
        if (this === p2) return true;
        var z2 = this.z.redSqr();
        var pz2 = p2.z.redSqr();
        if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
          return false;
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p2.z);
        return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
      };
      JPoint.prototype.eqXToP = function eqXToP(x2) {
        var zs = this.z.redSqr();
        var rx = x2.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0) return true;
        var xc = x2.clone();
        var t2 = this.curve.redN.redMul(zs);
        for (;;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0) return false;
          rx.redIAdd(t2);
          if (this.x.cmp(rx) === 0) return true;
        }
      };
      JPoint.prototype.inspect = function inspect2() {
        if (this.isInfinity()) return "<EC JPoint Infinity>";
        return (
          "<EC JPoint x: " +
          this.x.toString(16, 2) +
          " y: " +
          this.y.toString(16, 2) +
          " z: " +
          this.z.toString(16, 2) +
          ">"
        );
      };
      JPoint.prototype.isInfinity = function isInfinity2() {
        return this.z.cmpn(0) === 0;
      };
      curve_1 = createCommonjsModule(function (module, exports) {
        "use strict";
        var curve = exports;
        curve.base = base;
        curve.short = short_1;
        curve.mont = null;
        curve.edwards = null;
      });
      curves_1 = createCommonjsModule(function (module, exports) {
        "use strict";
        var curves = exports;
        var assert3 = utils_1$1.assert;
        function PresetCurve(options) {
          if (options.type === "short") this.curve = new curve_1.short(options);
          else if (options.type === "edwards")
            this.curve = new curve_1.edwards(options);
          else this.curve = new curve_1.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;
          assert3(this.g.validate(), "Invalid curve");
          assert3(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        curves.PresetCurve = PresetCurve;
        function defineCurve(name2, options) {
          Object.defineProperty(curves, name2, {
            configurable: true,
            enumerable: true,
            get: function () {
              var curve = new PresetCurve(options);
              Object.defineProperty(curves, name2, {
                configurable: true,
                enumerable: true,
                value: curve,
              });
              return curve;
            },
          });
        }
        defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: import_hash2.default.sha256,
          gRed: false,
          g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811",
          ],
        });
        defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: import_hash2.default.sha256,
          gRed: false,
          g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34",
          ],
        });
        defineCurve("p256", {
          type: "short",
          prime: null,
          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: import_hash2.default.sha256,
          gRed: false,
          g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
          ],
        });
        defineCurve("p384", {
          type: "short",
          prime: null,
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: import_hash2.default.sha384,
          gRed: false,
          g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
          ],
        });
        defineCurve("p521", {
          type: "short",
          prime: null,
          p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
          a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
          b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: import_hash2.default.sha512,
          gRed: false,
          g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650",
          ],
        });
        defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: import_hash2.default.sha256,
          gRed: false,
          g: ["9"],
        });
        defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: import_hash2.default.sha256,
          gRed: false,
          g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            "6666666666666666666666666666666666666666666666666666666666666658",
          ],
        });
        var pre;
        try {
          pre = null.crash();
        } catch (e) {
          pre = void 0;
        }
        defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: import_hash2.default.sha256,
          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda:
            "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
            {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3",
            },
            {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15",
            },
          ],
          gRed: false,
          g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre,
          ],
        });
      });
      hmacDrbg = HmacDRBG;
      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);
        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0;
          this.V[i] = 1;
        }
        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 281474976710656;
      };
      HmacDRBG.prototype._hmac = function hmac() {
        return new import_hash2.default.hmac(this.hash, this.K);
      };
      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac().update(this.V).update([0]);
        if (seed) kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed) return;
        this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
        this.V = this._hmac().update(this.V).digest();
      };
      HmacDRBG.prototype.reseed = function reseed(
        entropy,
        entropyEnc,
        add3,
        addEnc
      ) {
        if (typeof entropyEnc !== "string") {
          addEnc = add3;
          add3 = entropyEnc;
          entropyEnc = null;
        }
        entropy = utils_1.toArray(entropy, entropyEnc);
        add3 = utils_1.toArray(add3, addEnc);
        minimalisticAssert(
          entropy.length >= this.minEntropy / 8,
          "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
        );
        this._update(entropy.concat(add3 || []));
        this._reseed = 1;
      };
      HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
        if (this._reseed > this.reseedInterval)
          throw new Error("Reseed is required");
        if (typeof enc !== "string") {
          addEnc = add3;
          add3 = enc;
          enc = null;
        }
        if (add3) {
          add3 = utils_1.toArray(add3, addEnc || "hex");
          this._update(add3);
        }
        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }
        var res = temp.slice(0, len);
        this._update(add3);
        this._reseed++;
        return utils_1.encode(res, enc);
      };
      assert$3 = utils_1$1.assert;
      key = KeyPair;
      KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
        if (pub instanceof KeyPair) return pub;
        return new KeyPair(ec2, {
          pub,
          pubEnc: enc,
        });
      };
      KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
        if (priv instanceof KeyPair) return priv;
        return new KeyPair(ec2, {
          priv,
          privEnc: enc,
        });
      };
      KeyPair.prototype.validate = function validate4() {
        var pub = this.getPublic();
        if (pub.isInfinity())
          return { result: false, reason: "Invalid public key" };
        if (!pub.validate())
          return { result: false, reason: "Public key is not a point" };
        if (!pub.mul(this.ec.curve.n).isInfinity())
          return { result: false, reason: "Public key * N != O" };
        return { result: true, reason: null };
      };
      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }
        if (!this.pub) this.pub = this.ec.g.mul(this.priv);
        if (!enc) return this.pub;
        return this.pub.encode(enc, compact);
      };
      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex") return this.priv.toString(16, 2);
        else return this.priv;
      };
      KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
        this.priv = new import_bn2.default(key2, enc || 16);
        this.priv = this.priv.umod(this.ec.curve.n);
      };
      KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
        if (key2.x || key2.y) {
          if (this.ec.curve.type === "mont") {
            assert$3(key2.x, "Need x coordinate");
          } else if (
            this.ec.curve.type === "short" ||
            this.ec.curve.type === "edwards"
          ) {
            assert$3(key2.x && key2.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key2.x, key2.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key2, enc);
      };
      KeyPair.prototype.derive = function derive(pub) {
        if (!pub.validate()) {
          assert$3(pub.validate(), "public point not validated");
        }
        return pub.mul(this.priv).getX();
      };
      KeyPair.prototype.sign = function sign5(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };
      KeyPair.prototype.verify = function verify(msg, signature2) {
        return this.ec.verify(msg, signature2, this);
      };
      KeyPair.prototype.inspect = function inspect3() {
        return (
          "<Key priv: " +
          (this.priv && this.priv.toString(16, 2)) +
          " pub: " +
          (this.pub && this.pub.inspect()) +
          " >"
        );
      };
      assert$4 = utils_1$1.assert;
      signature = Signature;
      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils_1$1.toArray(data, enc);
        var p2 = new Position();
        if (data[p2.place++] !== 48) {
          return false;
        }
        var len = getLength(data, p2);
        if (len === false) {
          return false;
        }
        if (len + p2.place !== data.length) {
          return false;
        }
        if (data[p2.place++] !== 2) {
          return false;
        }
        var rlen = getLength(data, p2);
        if (rlen === false) {
          return false;
        }
        var r = data.slice(p2.place, rlen + p2.place);
        p2.place += rlen;
        if (data[p2.place++] !== 2) {
          return false;
        }
        var slen = getLength(data, p2);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p2.place) {
          return false;
        }
        var s2 = data.slice(p2.place, slen + p2.place);
        if (r[0] === 0) {
          if (r[1] & 128) {
            r = r.slice(1);
          } else {
            return false;
          }
        }
        if (s2[0] === 0) {
          if (s2[1] & 128) {
            s2 = s2.slice(1);
          } else {
            return false;
          }
        }
        this.r = new import_bn2.default(r);
        this.s = new import_bn2.default(s2);
        this.recoveryParam = null;
        return true;
      };
      Signature.prototype.toDER = function toDER(enc) {
        var r = this.r.toArray();
        var s2 = this.s.toArray();
        if (r[0] & 128) r = [0].concat(r);
        if (s2[0] & 128) s2 = [0].concat(s2);
        r = rmPadding(r);
        s2 = rmPadding(s2);
        while (!s2[0] && !(s2[1] & 128)) {
          s2 = s2.slice(1);
        }
        var arr = [2];
        constructLength(arr, r.length);
        arr = arr.concat(r);
        arr.push(2);
        constructLength(arr, s2.length);
        var backHalf = arr.concat(s2);
        var res = [48];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils_1$1.encode(res, enc);
      };
      rand = function () {
        throw new Error("unsupported");
      };
      assert$5 = utils_1$1.assert;
      ec = EC;
      EC.prototype.keyPair = function keyPair(options) {
        return new key(this, options);
      };
      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return key.fromPrivate(this, priv, enc);
      };
      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return key.fromPublic(this, pub, enc);
      };
      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options) options = {};
        var drbg = new hmacDrbg({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: (options.entropy && options.entropyEnc) || "utf8",
          nonce: this.n.toArray(),
        });
        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new import_bn2.default(2));
        for (;;) {
          var priv = new import_bn2.default(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0) continue;
          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        }
      };
      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0) msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
        else return msg;
      };
      EC.prototype.sign = function sign6(msg, key2, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options) options = {};
        key2 = this.keyFromPrivate(key2, enc);
        msg = this._truncateToN(new import_bn2.default(msg, 16));
        var bytes = this.n.byteLength();
        var bkey = key2.getPrivate().toArray("be", bytes);
        var nonce = msg.toArray("be", bytes);
        var drbg = new hmacDrbg({
          hash: this.hash,
          entropy: bkey,
          nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
        });
        var ns1 = this.n.sub(new import_bn2.default(1));
        for (var iter = 0; ; iter++) {
          var k2 = options.k
            ? options.k(iter)
            : new import_bn2.default(drbg.generate(this.n.byteLength()));
          k2 = this._truncateToN(k2, true);
          if (k2.cmpn(1) <= 0 || k2.cmp(ns1) >= 0) continue;
          var kp = this.g.mul(k2);
          if (kp.isInfinity()) continue;
          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0) continue;
          var s2 = k2.invm(this.n).mul(r.mul(key2.getPrivate()).iadd(msg));
          s2 = s2.umod(this.n);
          if (s2.cmpn(0) === 0) continue;
          var recoveryParam =
            (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
          if (options.canonical && s2.cmp(this.nh) > 0) {
            s2 = this.n.sub(s2);
            recoveryParam ^= 1;
          }
          return new signature({ r, s: s2, recoveryParam });
        }
      };
      EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
        msg = this._truncateToN(new import_bn2.default(msg, 16));
        key2 = this.keyFromPublic(key2, enc);
        signature$1 = new signature(signature$1, "hex");
        var r = signature$1.r;
        var s2 = signature$1.s;
        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
        if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0) return false;
        var sinv = s2.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r).umod(this.n);
        var p2;
        if (!this.curve._maxwellTrick) {
          p2 = this.g.mulAdd(u1, key2.getPublic(), u2);
          if (p2.isInfinity()) return false;
          return p2.getX().umod(this.n).cmp(r) === 0;
        }
        p2 = this.g.jmulAdd(u1, key2.getPublic(), u2);
        if (p2.isInfinity()) return false;
        return p2.eqXToP(r);
      };
      EC.prototype.recoverPubKey = function (msg, signature$1, j2, enc) {
        assert$5((3 & j2) === j2, "The recovery param is more than two bits");
        signature$1 = new signature(signature$1, enc);
        var n = this.n;
        var e = new import_bn2.default(msg);
        var r = signature$1.r;
        var s2 = signature$1.s;
        var isYOdd = j2 & 1;
        var isSecondKey = j2 >> 1;
        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
          throw new Error("Unable to find sencond key candinate");
        if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
        else r = this.curve.pointFromX(r, isYOdd);
        var rInv = signature$1.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s22 = s2.mul(rInv).umod(n);
        return this.g.mulAdd(s1, r, s22);
      };
      EC.prototype.getKeyRecoveryParam = function (e, signature$1, Q2, enc) {
        signature$1 = new signature(signature$1, enc);
        if (signature$1.recoveryParam !== null)
          return signature$1.recoveryParam;
        for (var i = 0; i < 4; i++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature$1, i);
          } catch (e2) {
            continue;
          }
          if (Qprime.eq(Q2)) return i;
        }
        throw new Error("Unable to find valid recovery factor");
      };
      elliptic_1 = createCommonjsModule(function (module, exports) {
        "use strict";
        var elliptic = exports;
        elliptic.version = { version: "6.5.4" }.version;
        elliptic.utils = utils_1$1;
        elliptic.rand = function () {
          throw new Error("unsupported");
        };
        elliptic.curve = curve_1;
        elliptic.curves = curves_1;
        elliptic.ec = ec;
        elliptic.eddsa = null;
      });
      EC$1 = elliptic_1.ec;
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version32;
  var init_version32 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version32 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize11() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors11,
    _censorErrors11,
    LogLevels11,
    _logLevel11,
    _globalLogger11,
    _normalizeError11,
    LogLevel11,
    ErrorCode11,
    HEX11,
    Logger11;
  var init_lib34 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version32();
      _permanentCensorErrors11 = false;
      _censorErrors11 = false;
      LogLevels11 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel11 = LogLevels11["default"];
      _globalLogger11 = null;
      _normalizeError11 = _checkNormalize11();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel11 || (LogLevel11 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode11 || (ErrorCode11 = {}));
      HEX11 = "0123456789abcdef";
      Logger11 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels11[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel11 > LogLevels11[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger11.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger11.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger11.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors11) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger11.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX11[value[i] >> 4];
                  hex += HEX11[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger11.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError11) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger11.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError11,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger11.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger11.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger11.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger11.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger11.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger11.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger11.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger11) {
            _globalLogger11 = new Logger11(version32);
          }
          return _globalLogger11;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger11.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors11) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger11.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors11 = !!censorship;
          _permanentCensorErrors11 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels11[logLevel.toLowerCase()];
          if (level == null) {
            Logger11.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel11 = level;
        }
        static from(version89) {
          return new Logger11(version89);
        }
      };
      Logger11.errors = ErrorCode11;
      Logger11.levels = LogLevel11;
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version33;
  var init_version33 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version33 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable9(value) {
    return !!value.toHexString;
  }
  function addSlice9(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice9(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike2(value) {
    return (isHexString10(value) && !(value.length % 2)) || isBytes9(value);
  }
  function isInteger9(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes9(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger9(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger9(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify9(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger28.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice9(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable9(value)) {
      value = value.toHexString();
    }
    if (isHexString10(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger28.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice9(new Uint8Array(result));
    }
    if (isBytes9(value)) {
      return addSlice9(new Uint8Array(value));
    }
    return logger28.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function zeroPad(value, length) {
    value = arrayify9(value);
    if (value.length > length) {
      logger28.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice9(result);
  }
  function isHexString10(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify8(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger28.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters8[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable9(value)) {
      return value.toHexString();
    }
    if (isHexString10(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger28.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes9(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters8[(v2 & 240) >> 4] + HexCharacters8[v2 & 15];
      }
      return result;
    }
    return logger28.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexZeroPad4(value, length) {
    if (typeof value !== "string") {
      value = hexlify8(value);
    } else if (!isHexString10(value)) {
      logger28.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger28.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
    };
    if (isBytesLike2(signature2)) {
      const bytes = arrayify9(signature2);
      if (bytes.length !== 65) {
        logger28.throwArgumentError(
          "invalid signature string; must be 65 bytes",
          "signature",
          signature2
        );
      }
      result.r = hexlify8(bytes.slice(0, 32));
      result.s = hexlify8(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger28.throwArgumentError(
            "signature invalid v byte",
            "signature",
            signature2
          );
        }
      }
      result.recoveryParam = 1 - (result.v % 2);
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify8(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad(arrayify9(result._vs), 32);
        result._vs = hexlify8(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger28.throwArgumentError(
            "signature recoveryParam mismatch _vs",
            "signature",
            signature2
          );
        }
        vs2[0] &= 127;
        const s2 = hexlify8(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger28.throwArgumentError(
            "signature v mismatch _vs",
            "signature",
            signature2
          );
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger28.throwArgumentError(
            "signature missing v and recoveryParam",
            "signature",
            signature2
          );
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - (result.v % 2);
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId =
            result.v === 0 || result.v === 1 ? result.v : 1 - (result.v % 2);
          if (result.recoveryParam !== recId) {
            logger28.throwArgumentError(
              "signature recoveryParam mismatch v",
              "signature",
              signature2
            );
          }
        }
      }
      if (result.r == null || !isHexString10(result.r)) {
        logger28.throwArgumentError(
          "signature missing or invalid r",
          "signature",
          signature2
        );
      } else {
        result.r = hexZeroPad4(result.r, 32);
      }
      if (result.s == null || !isHexString10(result.s)) {
        logger28.throwArgumentError(
          "signature missing or invalid s",
          "signature",
          signature2
        );
      } else {
        result.s = hexZeroPad4(result.s, 32);
      }
      const vs = arrayify9(result.s);
      if (vs[0] >= 128) {
        logger28.throwArgumentError(
          "signature s out of range",
          "signature",
          signature2
        );
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify8(vs);
      if (result._vs) {
        if (!isHexString10(result._vs)) {
          logger28.throwArgumentError(
            "signature invalid _vs",
            "signature",
            signature2
          );
        }
        result._vs = hexZeroPad4(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger28.throwArgumentError(
          "signature _vs mismatch v and s",
          "signature",
          signature2
        );
      }
    }
    return result;
  }
  var logger28, HexCharacters8;
  var init_lib35 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib34();
      init_version33();
      logger28 = new Logger11(version33);
      HexCharacters8 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version34;
  var init_version34 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version34 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/signing-key/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly6(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  var logger29;
  var init_lib36 = __esm({
    "node_modules/@ethersproject/signing-key/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib34();
      init_version34();
      logger29 = new Logger11(version34);
    },
  });

  // node_modules/@ethersproject/signing-key/lib.esm/_version.js
  var version35;
  var init_version35 = __esm({
    "node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
      version35 = "signing-key/5.5.0";
    },
  });

  // node_modules/@ethersproject/signing-key/lib.esm/index.js
  function getCurve() {
    if (!_curve) {
      _curve = new EC$1("secp256k1");
    }
    return _curve;
  }
  function recoverPublicKey(digest, signature2) {
    const sig = splitSignature(signature2);
    const rs = { r: arrayify9(sig.r), s: arrayify9(sig.s) };
    return (
      "0x" +
      getCurve()
        .recoverPubKey(arrayify9(digest), rs, sig.recoveryParam)
        .encode("hex", false)
    );
  }
  function computePublicKey(key2, compressed) {
    const bytes = arrayify9(key2);
    if (bytes.length === 32) {
      const signingKey = new SigningKey(bytes);
      if (compressed) {
        return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
      }
      return signingKey.publicKey;
    } else if (bytes.length === 33) {
      if (compressed) {
        return hexlify8(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    } else if (bytes.length === 65) {
      if (!compressed) {
        return hexlify8(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }
    return logger30.throwArgumentError(
      "invalid public or private key",
      "key",
      "[REDACTED]"
    );
  }
  var logger30, _curve, SigningKey;
  var init_lib37 = __esm({
    "node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
      "use strict";
      init_elliptic();
      init_lib35();
      init_lib36();
      init_lib34();
      init_version35();
      logger30 = new Logger11(version35);
      _curve = null;
      SigningKey = class {
        constructor(privateKey) {
          defineReadOnly6(this, "curve", "secp256k1");
          defineReadOnly6(this, "privateKey", hexlify8(privateKey));
          const keyPair2 = getCurve().keyFromPrivate(
            arrayify9(this.privateKey)
          );
          defineReadOnly6(
            this,
            "publicKey",
            "0x" + keyPair2.getPublic(false, "hex")
          );
          defineReadOnly6(
            this,
            "compressedPublicKey",
            "0x" + keyPair2.getPublic(true, "hex")
          );
          defineReadOnly6(this, "_isSigningKey", true);
        }
        _addPoint(other) {
          const p0 = getCurve().keyFromPublic(arrayify9(this.publicKey));
          const p1 = getCurve().keyFromPublic(arrayify9(other));
          return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
          const keyPair2 = getCurve().keyFromPrivate(
            arrayify9(this.privateKey)
          );
          const digestBytes = arrayify9(digest);
          if (digestBytes.length !== 32) {
            logger30.throwArgumentError("bad digest length", "digest", digest);
          }
          const signature2 = keyPair2.sign(digestBytes, { canonical: true });
          return splitSignature({
            recoveryParam: signature2.recoveryParam,
            r: hexZeroPad4("0x" + signature2.r.toString(16), 32),
            s: hexZeroPad4("0x" + signature2.s.toString(16), 32),
          });
        }
        computeSharedSecret(otherKey) {
          const keyPair2 = getCurve().keyFromPrivate(
            arrayify9(this.privateKey)
          );
          const otherKeyPair = getCurve().keyFromPublic(
            arrayify9(computePublicKey(otherKey))
          );
          return hexZeroPad4(
            "0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16),
            32
          );
        }
        static isSigningKey(value) {
          return !!(value && value._isSigningKey);
        }
      };
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version36;
  var init_version36 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version36 = "transactions/5.5.0";
    },
  });

  // node_modules/@ethersproject/contracts/node_modules/@ethersproject/transactions/lib.esm/index.js
  function accessSetify(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength2(storageKey) !== 32) {
          logger31.throwArgumentError(
            "invalid access list storageKey",
            `accessList[${addr}:${index}]`,
            storageKey
          );
        }
        return storageKey.toLowerCase();
      }),
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger31.throwArgumentError(
              "access list expected to be [ address, storageKeys[] ]",
              `value[${index}]`,
              set
            );
          }
          return accessSetify(set[0], set[1]);
        }
        return accessSetify(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a2, b2) => a2.address.localeCompare(b2.address));
    return result;
  }
  var logger31, TransactionTypes;
  var init_lib38 = __esm({
    "node_modules/@ethersproject/contracts/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib32();
      init_lib31();
      init_version36();
      logger31 = new Logger10(version36);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes || (TransactionTypes = {}));
    },
  });

  // node_modules/@ethersproject/contracts/lib.esm/_version.js
  var version37;
  var init_version37 = __esm({
    "node_modules/@ethersproject/contracts/lib.esm/_version.js"() {
      version37 = "contracts/5.5.0";
    },
  });

  // node_modules/@ethersproject/contracts/lib.esm/index.js
  function resolveName(resolver2, nameOrPromise) {
    return __awaiter8(this, void 0, void 0, function* () {
      const name2 = yield nameOrPromise;
      if (typeof name2 !== "string") {
        logger32.throwArgumentError(
          "invalid address or ENS name",
          "name",
          name2
        );
      }
      try {
        return getAddress(name2);
      } catch (error) {}
      if (!resolver2) {
        logger32.throwError(
          "a provider or signer is needed to resolve ENS names",
          Logger10.errors.UNSUPPORTED_OPERATION,
          {
            operation: "resolveName",
          }
        );
      }
      const address = yield resolver2.resolveName(name2);
      if (address == null) {
        logger32.throwArgumentError(
          "resolver or addr is not configured for ENS name",
          "name",
          name2
        );
      }
      return address;
    });
  }
  function resolveAddresses(resolver2, value, paramType) {
    return __awaiter8(this, void 0, void 0, function* () {
      if (Array.isArray(paramType)) {
        return yield Promise.all(
          paramType.map((paramType2, index) => {
            return resolveAddresses(
              resolver2,
              Array.isArray(value) ? value[index] : value[paramType2.name],
              paramType2
            );
          })
        );
      }
      if (paramType.type === "address") {
        return yield resolveName(resolver2, value);
      }
      if (paramType.type === "tuple") {
        return yield resolveAddresses(resolver2, value, paramType.components);
      }
      if (paramType.baseType === "array") {
        if (!Array.isArray(value)) {
          return Promise.reject(
            logger32.makeError(
              "invalid value for array",
              Logger10.errors.INVALID_ARGUMENT,
              {
                argument: "value",
                value,
              }
            )
          );
        }
        return yield Promise.all(
          value.map((v2) =>
            resolveAddresses(resolver2, v2, paramType.arrayChildren)
          )
        );
      }
      return value;
    });
  }
  function populateTransaction(contract, fragment, args) {
    return __awaiter8(this, void 0, void 0, function* () {
      let overrides = {};
      if (
        args.length === fragment.inputs.length + 1 &&
        typeof args[args.length - 1] === "object"
      ) {
        overrides = shallowCopy3(args.pop());
      }
      logger32.checkArgumentCount(
        args.length,
        fragment.inputs.length,
        "passed to contract"
      );
      if (contract.signer) {
        if (overrides.from) {
          overrides.from = resolveProperties3({
            override: resolveName(contract.signer, overrides.from),
            signer: contract.signer.getAddress(),
          }).then((check) =>
            __awaiter8(this, void 0, void 0, function* () {
              if (getAddress(check.signer) !== check.override) {
                logger32.throwError(
                  "Contract with a Signer cannot override from",
                  Logger10.errors.UNSUPPORTED_OPERATION,
                  {
                    operation: "overrides.from",
                  }
                );
              }
              return check.override;
            })
          );
        } else {
          overrides.from = contract.signer.getAddress();
        }
      } else if (overrides.from) {
        overrides.from = resolveName(contract.provider, overrides.from);
      }
      const resolved = yield resolveProperties3({
        args: resolveAddresses(
          contract.signer || contract.provider,
          args,
          fragment.inputs
        ),
        address: contract.resolvedAddress,
        overrides: resolveProperties3(overrides) || {},
      });
      const data = contract.interface.encodeFunctionData(
        fragment,
        resolved.args
      );
      const tx = {
        data,
        to: resolved.address,
      };
      const ro = resolved.overrides;
      if (ro.nonce != null) {
        tx.nonce = BigNumber.from(ro.nonce).toNumber();
      }
      if (ro.gasLimit != null) {
        tx.gasLimit = BigNumber.from(ro.gasLimit);
      }
      if (ro.gasPrice != null) {
        tx.gasPrice = BigNumber.from(ro.gasPrice);
      }
      if (ro.maxFeePerGas != null) {
        tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
      }
      if (ro.maxPriorityFeePerGas != null) {
        tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
      }
      if (ro.from != null) {
        tx.from = ro.from;
      }
      if (ro.type != null) {
        tx.type = ro.type;
      }
      if (ro.accessList != null) {
        tx.accessList = accessListify(ro.accessList);
      }
      if (tx.gasLimit == null && fragment.gas != null) {
        let intrinsic = 21e3;
        const bytes = arrayify8(data);
        for (let i = 0; i < bytes.length; i++) {
          intrinsic += 4;
          if (bytes[i]) {
            intrinsic += 64;
          }
        }
        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
      }
      if (ro.value) {
        const roValue = BigNumber.from(ro.value);
        if (!roValue.isZero() && !fragment.payable) {
          logger32.throwError(
            "non-payable method cannot override value",
            Logger10.errors.UNSUPPORTED_OPERATION,
            {
              operation: "overrides.value",
              value: overrides.value,
            }
          );
        }
        tx.value = roValue;
      }
      if (ro.customData) {
        tx.customData = shallowCopy3(ro.customData);
      }
      delete overrides.nonce;
      delete overrides.gasLimit;
      delete overrides.gasPrice;
      delete overrides.from;
      delete overrides.value;
      delete overrides.type;
      delete overrides.accessList;
      delete overrides.maxFeePerGas;
      delete overrides.maxPriorityFeePerGas;
      delete overrides.customData;
      const leftovers = Object.keys(overrides).filter(
        (key2) => overrides[key2] != null
      );
      if (leftovers.length) {
        logger32.throwError(
          `cannot override ${leftovers
            .map((l2) => JSON.stringify(l2))
            .join(",")}`,
          Logger10.errors.UNSUPPORTED_OPERATION,
          {
            operation: "overrides",
            overrides: leftovers,
          }
        );
      }
      return tx;
    });
  }
  function buildPopulate(contract, fragment) {
    return function (...args) {
      return populateTransaction(contract, fragment, args);
    };
  }
  function buildEstimate(contract, fragment) {
    const signerOrProvider = contract.signer || contract.provider;
    return function (...args) {
      return __awaiter8(this, void 0, void 0, function* () {
        if (!signerOrProvider) {
          logger32.throwError(
            "estimate require a provider or signer",
            Logger10.errors.UNSUPPORTED_OPERATION,
            {
              operation: "estimateGas",
            }
          );
        }
        const tx = yield populateTransaction(contract, fragment, args);
        return yield signerOrProvider.estimateGas(tx);
      });
    };
  }
  function addContractWait(contract, tx) {
    const wait = tx.wait.bind(tx);
    tx.wait = (confirmations) => {
      return wait(confirmations).then((receipt) => {
        receipt.events = receipt.logs.map((log2) => {
          let event = deepCopy4(log2);
          let parsed = null;
          try {
            parsed = contract.interface.parseLog(log2);
          } catch (e) {}
          if (parsed) {
            event.args = parsed.args;
            event.decode = (data, topics) => {
              return contract.interface.decodeEventLog(
                parsed.eventFragment,
                data,
                topics
              );
            };
            event.event = parsed.name;
            event.eventSignature = parsed.signature;
          }
          event.removeListener = () => {
            return contract.provider;
          };
          event.getBlock = () => {
            return contract.provider.getBlock(receipt.blockHash);
          };
          event.getTransaction = () => {
            return contract.provider.getTransaction(receipt.transactionHash);
          };
          event.getTransactionReceipt = () => {
            return Promise.resolve(receipt);
          };
          return event;
        });
        return receipt;
      });
    };
  }
  function buildCall(contract, fragment, collapseSimple) {
    const signerOrProvider = contract.signer || contract.provider;
    return function (...args) {
      return __awaiter8(this, void 0, void 0, function* () {
        let blockTag = void 0;
        if (
          args.length === fragment.inputs.length + 1 &&
          typeof args[args.length - 1] === "object"
        ) {
          const overrides = shallowCopy3(args.pop());
          if (overrides.blockTag != null) {
            blockTag = yield overrides.blockTag;
          }
          delete overrides.blockTag;
          args.push(overrides);
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed(blockTag);
        }
        const tx = yield populateTransaction(contract, fragment, args);
        const result = yield signerOrProvider.call(tx, blockTag);
        try {
          let value = contract.interface.decodeFunctionResult(fragment, result);
          if (collapseSimple && fragment.outputs.length === 1) {
            value = value[0];
          }
          return value;
        } catch (error) {
          if (error.code === Logger10.errors.CALL_EXCEPTION) {
            error.address = contract.address;
            error.args = args;
            error.transaction = tx;
          }
          throw error;
        }
      });
    };
  }
  function buildSend(contract, fragment) {
    return function (...args) {
      return __awaiter8(this, void 0, void 0, function* () {
        if (!contract.signer) {
          logger32.throwError(
            "sending a transaction requires a signer",
            Logger10.errors.UNSUPPORTED_OPERATION,
            {
              operation: "sendTransaction",
            }
          );
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed();
        }
        const txRequest = yield populateTransaction(contract, fragment, args);
        const tx = yield contract.signer.sendTransaction(txRequest);
        addContractWait(contract, tx);
        return tx;
      });
    };
  }
  function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) {
      return buildCall(contract, fragment, collapseSimple);
    }
    return buildSend(contract, fragment);
  }
  function getEventTag(filter) {
    if (
      filter.address &&
      (filter.topics == null || filter.topics.length === 0)
    ) {
      return "*";
    }
    return (
      (filter.address || "*") +
      "@" +
      (filter.topics
        ? filter.topics
            .map((topic) => {
              if (Array.isArray(topic)) {
                return topic.join("|");
              }
              return topic;
            })
            .join(":")
        : "")
    );
  }
  var __awaiter8,
    logger32,
    allowedTransactionKeys2,
    RunningEvent,
    ErrorRunningEvent,
    FragmentRunningEvent,
    WildcardRunningEvent,
    BaseContract,
    Contract,
    ContractFactory;
  var init_lib39 = __esm({
    "node_modules/@ethersproject/contracts/lib.esm/index.js"() {
      "use strict";
      init_lib24();
      init_lib27();
      init_lib30();
      init_lib15();
      init_lib3();
      init_lib32();
      init_lib33();
      init_lib38();
      init_lib31();
      init_version37();
      __awaiter8 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger32 = new Logger10(version37);
      allowedTransactionKeys2 = {
        chainId: true,
        data: true,
        from: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        value: true,
        type: true,
        accessList: true,
        maxFeePerGas: true,
        maxPriorityFeePerGas: true,
        customData: true,
      };
      RunningEvent = class {
        constructor(tag, filter) {
          defineReadOnly5(this, "tag", tag);
          defineReadOnly5(this, "filter", filter);
          this._listeners = [];
        }
        addListener(listener, once) {
          this._listeners.push({ listener, once });
        }
        removeListener(listener) {
          let done = false;
          this._listeners = this._listeners.filter((item) => {
            if (done || item.listener !== listener) {
              return true;
            }
            done = true;
            return false;
          });
        }
        removeAllListeners() {
          this._listeners = [];
        }
        listeners() {
          return this._listeners.map((i) => i.listener);
        }
        listenerCount() {
          return this._listeners.length;
        }
        run(args) {
          const listenerCount = this.listenerCount();
          this._listeners = this._listeners.filter((item) => {
            const argsCopy = args.slice();
            setTimeout(() => {
              item.listener.apply(this, argsCopy);
            }, 0);
            return !item.once;
          });
          return listenerCount;
        }
        prepareEvent(event) {}
        getEmit(event) {
          return [event];
        }
      };
      ErrorRunningEvent = class extends RunningEvent {
        constructor() {
          super("error", null);
        }
      };
      FragmentRunningEvent = class extends RunningEvent {
        constructor(address, contractInterface, fragment, topics) {
          const filter = {
            address,
          };
          let topic = contractInterface.getEventTopic(fragment);
          if (topics) {
            if (topic !== topics[0]) {
              logger32.throwArgumentError("topic mismatch", "topics", topics);
            }
            filter.topics = topics.slice();
          } else {
            filter.topics = [topic];
          }
          super(getEventTag(filter), filter);
          defineReadOnly5(this, "address", address);
          defineReadOnly5(this, "interface", contractInterface);
          defineReadOnly5(this, "fragment", fragment);
        }
        prepareEvent(event) {
          super.prepareEvent(event);
          event.event = this.fragment.name;
          event.eventSignature = this.fragment.format();
          event.decode = (data, topics) => {
            return this.interface.decodeEventLog(this.fragment, data, topics);
          };
          try {
            event.args = this.interface.decodeEventLog(
              this.fragment,
              event.data,
              event.topics
            );
          } catch (error) {
            event.args = null;
            event.decodeError = error;
          }
        }
        getEmit(event) {
          const errors = checkResultErrors(event.args);
          if (errors.length) {
            throw errors[0].error;
          }
          const args = (event.args || []).slice();
          args.push(event);
          return args;
        }
      };
      WildcardRunningEvent = class extends RunningEvent {
        constructor(address, contractInterface) {
          super("*", { address });
          defineReadOnly5(this, "address", address);
          defineReadOnly5(this, "interface", contractInterface);
        }
        prepareEvent(event) {
          super.prepareEvent(event);
          try {
            const parsed = this.interface.parseLog(event);
            event.event = parsed.name;
            event.eventSignature = parsed.signature;
            event.decode = (data, topics) => {
              return this.interface.decodeEventLog(
                parsed.eventFragment,
                data,
                topics
              );
            };
            event.args = parsed.args;
          } catch (error) {}
        }
      };
      BaseContract = class {
        constructor(addressOrName, contractInterface, signerOrProvider) {
          logger32.checkNew(new.target, Contract);
          defineReadOnly5(
            this,
            "interface",
            getStatic2(new.target, "getInterface")(contractInterface)
          );
          if (signerOrProvider == null) {
            defineReadOnly5(this, "provider", null);
            defineReadOnly5(this, "signer", null);
          } else if (Signer.isSigner(signerOrProvider)) {
            defineReadOnly5(
              this,
              "provider",
              signerOrProvider.provider || null
            );
            defineReadOnly5(this, "signer", signerOrProvider);
          } else if (Provider.isProvider(signerOrProvider)) {
            defineReadOnly5(this, "provider", signerOrProvider);
            defineReadOnly5(this, "signer", null);
          } else {
            logger32.throwArgumentError(
              "invalid signer or provider",
              "signerOrProvider",
              signerOrProvider
            );
          }
          defineReadOnly5(this, "callStatic", {});
          defineReadOnly5(this, "estimateGas", {});
          defineReadOnly5(this, "functions", {});
          defineReadOnly5(this, "populateTransaction", {});
          defineReadOnly5(this, "filters", {});
          {
            const uniqueFilters = {};
            Object.keys(this.interface.events).forEach((eventSignature) => {
              const event = this.interface.events[eventSignature];
              defineReadOnly5(this.filters, eventSignature, (...args) => {
                return {
                  address: this.address,
                  topics: this.interface.encodeFilterTopics(event, args),
                };
              });
              if (!uniqueFilters[event.name]) {
                uniqueFilters[event.name] = [];
              }
              uniqueFilters[event.name].push(eventSignature);
            });
            Object.keys(uniqueFilters).forEach((name2) => {
              const filters = uniqueFilters[name2];
              if (filters.length === 1) {
                defineReadOnly5(this.filters, name2, this.filters[filters[0]]);
              } else {
                logger32.warn(
                  `Duplicate definition of ${name2} (${filters.join(", ")})`
                );
              }
            });
          }
          defineReadOnly5(this, "_runningEvents", {});
          defineReadOnly5(this, "_wrappedEmits", {});
          if (addressOrName == null) {
            logger32.throwArgumentError(
              "invalid contract address or ENS name",
              "addressOrName",
              addressOrName
            );
          }
          defineReadOnly5(this, "address", addressOrName);
          if (this.provider) {
            defineReadOnly5(
              this,
              "resolvedAddress",
              resolveName(this.provider, addressOrName)
            );
          } else {
            try {
              defineReadOnly5(
                this,
                "resolvedAddress",
                Promise.resolve(getAddress(addressOrName))
              );
            } catch (error) {
              logger32.throwError(
                "provider is required to use ENS name as contract address",
                Logger10.errors.UNSUPPORTED_OPERATION,
                {
                  operation: "new Contract",
                }
              );
            }
          }
          const uniqueNames = {};
          const uniqueSignatures = {};
          Object.keys(this.interface.functions).forEach((signature2) => {
            const fragment = this.interface.functions[signature2];
            if (uniqueSignatures[signature2]) {
              logger32.warn(
                `Duplicate ABI entry for ${JSON.stringify(signature2)}`
              );
              return;
            }
            uniqueSignatures[signature2] = true;
            {
              const name2 = fragment.name;
              if (!uniqueNames[`%${name2}`]) {
                uniqueNames[`%${name2}`] = [];
              }
              uniqueNames[`%${name2}`].push(signature2);
            }
            if (this[signature2] == null) {
              defineReadOnly5(
                this,
                signature2,
                buildDefault(this, fragment, true)
              );
            }
            if (this.functions[signature2] == null) {
              defineReadOnly5(
                this.functions,
                signature2,
                buildDefault(this, fragment, false)
              );
            }
            if (this.callStatic[signature2] == null) {
              defineReadOnly5(
                this.callStatic,
                signature2,
                buildCall(this, fragment, true)
              );
            }
            if (this.populateTransaction[signature2] == null) {
              defineReadOnly5(
                this.populateTransaction,
                signature2,
                buildPopulate(this, fragment)
              );
            }
            if (this.estimateGas[signature2] == null) {
              defineReadOnly5(
                this.estimateGas,
                signature2,
                buildEstimate(this, fragment)
              );
            }
          });
          Object.keys(uniqueNames).forEach((name2) => {
            const signatures = uniqueNames[name2];
            if (signatures.length > 1) {
              return;
            }
            name2 = name2.substring(1);
            const signature2 = signatures[0];
            try {
              if (this[name2] == null) {
                defineReadOnly5(this, name2, this[signature2]);
              }
            } catch (e) {}
            if (this.functions[name2] == null) {
              defineReadOnly5(
                this.functions,
                name2,
                this.functions[signature2]
              );
            }
            if (this.callStatic[name2] == null) {
              defineReadOnly5(
                this.callStatic,
                name2,
                this.callStatic[signature2]
              );
            }
            if (this.populateTransaction[name2] == null) {
              defineReadOnly5(
                this.populateTransaction,
                name2,
                this.populateTransaction[signature2]
              );
            }
            if (this.estimateGas[name2] == null) {
              defineReadOnly5(
                this.estimateGas,
                name2,
                this.estimateGas[signature2]
              );
            }
          });
        }
        static getContractAddress(transaction) {
          return getContractAddress(transaction);
        }
        static getInterface(contractInterface) {
          if (Interface.isInterface(contractInterface)) {
            return contractInterface;
          }
          return new Interface(contractInterface);
        }
        deployed() {
          return this._deployed();
        }
        _deployed(blockTag) {
          if (!this._deployedPromise) {
            if (this.deployTransaction) {
              this._deployedPromise = this.deployTransaction.wait().then(() => {
                return this;
              });
            } else {
              this._deployedPromise = this.provider
                .getCode(this.address, blockTag)
                .then((code) => {
                  if (code === "0x") {
                    logger32.throwError(
                      "contract not deployed",
                      Logger10.errors.UNSUPPORTED_OPERATION,
                      {
                        contractAddress: this.address,
                        operation: "getDeployed",
                      }
                    );
                  }
                  return this;
                });
            }
          }
          return this._deployedPromise;
        }
        fallback(overrides) {
          if (!this.signer) {
            logger32.throwError(
              "sending a transactions require a signer",
              Logger10.errors.UNSUPPORTED_OPERATION,
              { operation: "sendTransaction(fallback)" }
            );
          }
          const tx = shallowCopy3(overrides || {});
          ["from", "to"].forEach(function (key2) {
            if (tx[key2] == null) {
              return;
            }
            logger32.throwError(
              "cannot override " + key2,
              Logger10.errors.UNSUPPORTED_OPERATION,
              { operation: key2 }
            );
          });
          tx.to = this.resolvedAddress;
          return this.deployed().then(() => {
            return this.signer.sendTransaction(tx);
          });
        }
        connect(signerOrProvider) {
          if (typeof signerOrProvider === "string") {
            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
          }
          const contract = new this.constructor(
            this.address,
            this.interface,
            signerOrProvider
          );
          if (this.deployTransaction) {
            defineReadOnly5(
              contract,
              "deployTransaction",
              this.deployTransaction
            );
          }
          return contract;
        }
        attach(addressOrName) {
          return new this.constructor(
            addressOrName,
            this.interface,
            this.signer || this.provider
          );
        }
        static isIndexed(value) {
          return Indexed.isIndexed(value);
        }
        _normalizeRunningEvent(runningEvent) {
          if (this._runningEvents[runningEvent.tag]) {
            return this._runningEvents[runningEvent.tag];
          }
          return runningEvent;
        }
        _getRunningEvent(eventName) {
          if (typeof eventName === "string") {
            if (eventName === "error") {
              return this._normalizeRunningEvent(new ErrorRunningEvent());
            }
            if (eventName === "event") {
              return this._normalizeRunningEvent(
                new RunningEvent("event", null)
              );
            }
            if (eventName === "*") {
              return this._normalizeRunningEvent(
                new WildcardRunningEvent(this.address, this.interface)
              );
            }
            const fragment = this.interface.getEvent(eventName);
            return this._normalizeRunningEvent(
              new FragmentRunningEvent(this.address, this.interface, fragment)
            );
          }
          if (eventName.topics && eventName.topics.length > 0) {
            try {
              const topic = eventName.topics[0];
              if (typeof topic !== "string") {
                throw new Error("invalid topic");
              }
              const fragment = this.interface.getEvent(topic);
              return this._normalizeRunningEvent(
                new FragmentRunningEvent(
                  this.address,
                  this.interface,
                  fragment,
                  eventName.topics
                )
              );
            } catch (error) {}
            const filter = {
              address: this.address,
              topics: eventName.topics,
            };
            return this._normalizeRunningEvent(
              new RunningEvent(getEventTag(filter), filter)
            );
          }
          return this._normalizeRunningEvent(
            new WildcardRunningEvent(this.address, this.interface)
          );
        }
        _checkRunningEvents(runningEvent) {
          if (runningEvent.listenerCount() === 0) {
            delete this._runningEvents[runningEvent.tag];
            const emit = this._wrappedEmits[runningEvent.tag];
            if (emit && runningEvent.filter) {
              this.provider.off(runningEvent.filter, emit);
              delete this._wrappedEmits[runningEvent.tag];
            }
          }
        }
        _wrapEvent(runningEvent, log2, listener) {
          const event = deepCopy4(log2);
          event.removeListener = () => {
            if (!listener) {
              return;
            }
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
          };
          event.getBlock = () => {
            return this.provider.getBlock(log2.blockHash);
          };
          event.getTransaction = () => {
            return this.provider.getTransaction(log2.transactionHash);
          };
          event.getTransactionReceipt = () => {
            return this.provider.getTransactionReceipt(log2.transactionHash);
          };
          runningEvent.prepareEvent(event);
          return event;
        }
        _addEventListener(runningEvent, listener, once) {
          if (!this.provider) {
            logger32.throwError(
              "events require a provider or a signer with a provider",
              Logger10.errors.UNSUPPORTED_OPERATION,
              { operation: "once" }
            );
          }
          runningEvent.addListener(listener, once);
          this._runningEvents[runningEvent.tag] = runningEvent;
          if (!this._wrappedEmits[runningEvent.tag]) {
            const wrappedEmit = (log2) => {
              let event = this._wrapEvent(runningEvent, log2, listener);
              if (event.decodeError == null) {
                try {
                  const args = runningEvent.getEmit(event);
                  this.emit(runningEvent.filter, ...args);
                } catch (error) {
                  event.decodeError = error.error;
                }
              }
              if (runningEvent.filter != null) {
                this.emit("event", event);
              }
              if (event.decodeError != null) {
                this.emit("error", event.decodeError, event);
              }
            };
            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
            if (runningEvent.filter != null) {
              this.provider.on(runningEvent.filter, wrappedEmit);
            }
          }
        }
        queryFilter(event, fromBlockOrBlockhash, toBlock) {
          const runningEvent = this._getRunningEvent(event);
          const filter = shallowCopy3(runningEvent.filter);
          if (
            typeof fromBlockOrBlockhash === "string" &&
            isHexString9(fromBlockOrBlockhash, 32)
          ) {
            if (toBlock != null) {
              logger32.throwArgumentError(
                "cannot specify toBlock with blockhash",
                "toBlock",
                toBlock
              );
            }
            filter.blockHash = fromBlockOrBlockhash;
          } else {
            filter.fromBlock =
              fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
            filter.toBlock = toBlock != null ? toBlock : "latest";
          }
          return this.provider.getLogs(filter).then((logs) => {
            return logs.map((log2) =>
              this._wrapEvent(runningEvent, log2, null)
            );
          });
        }
        on(event, listener) {
          this._addEventListener(this._getRunningEvent(event), listener, false);
          return this;
        }
        once(event, listener) {
          this._addEventListener(this._getRunningEvent(event), listener, true);
          return this;
        }
        emit(eventName, ...args) {
          if (!this.provider) {
            return false;
          }
          const runningEvent = this._getRunningEvent(eventName);
          const result = runningEvent.run(args) > 0;
          this._checkRunningEvents(runningEvent);
          return result;
        }
        listenerCount(eventName) {
          if (!this.provider) {
            return 0;
          }
          if (eventName == null) {
            return Object.keys(this._runningEvents).reduce((accum, key2) => {
              return accum + this._runningEvents[key2].listenerCount();
            }, 0);
          }
          return this._getRunningEvent(eventName).listenerCount();
        }
        listeners(eventName) {
          if (!this.provider) {
            return [];
          }
          if (eventName == null) {
            const result = [];
            for (let tag in this._runningEvents) {
              this._runningEvents[tag].listeners().forEach((listener) => {
                result.push(listener);
              });
            }
            return result;
          }
          return this._getRunningEvent(eventName).listeners();
        }
        removeAllListeners(eventName) {
          if (!this.provider) {
            return this;
          }
          if (eventName == null) {
            for (const tag in this._runningEvents) {
              const runningEvent2 = this._runningEvents[tag];
              runningEvent2.removeAllListeners();
              this._checkRunningEvents(runningEvent2);
            }
            return this;
          }
          const runningEvent = this._getRunningEvent(eventName);
          runningEvent.removeAllListeners();
          this._checkRunningEvents(runningEvent);
          return this;
        }
        off(eventName, listener) {
          if (!this.provider) {
            return this;
          }
          const runningEvent = this._getRunningEvent(eventName);
          runningEvent.removeListener(listener);
          this._checkRunningEvents(runningEvent);
          return this;
        }
        removeListener(eventName, listener) {
          return this.off(eventName, listener);
        }
      };
      Contract = class extends BaseContract {};
      ContractFactory = class {
        constructor(contractInterface, bytecode, signer) {
          let bytecodeHex = null;
          if (typeof bytecode === "string") {
            bytecodeHex = bytecode;
          } else if (isBytes8(bytecode)) {
            bytecodeHex = hexlify7(bytecode);
          } else if (bytecode && typeof bytecode.object === "string") {
            bytecodeHex = bytecode.object;
          } else {
            bytecodeHex = "!";
          }
          if (bytecodeHex.substring(0, 2) !== "0x") {
            bytecodeHex = "0x" + bytecodeHex;
          }
          if (!isHexString9(bytecodeHex) || bytecodeHex.length % 2) {
            logger32.throwArgumentError(
              "invalid bytecode",
              "bytecode",
              bytecode
            );
          }
          if (signer && !Signer.isSigner(signer)) {
            logger32.throwArgumentError("invalid signer", "signer", signer);
          }
          defineReadOnly5(this, "bytecode", bytecodeHex);
          defineReadOnly5(
            this,
            "interface",
            getStatic2(new.target, "getInterface")(contractInterface)
          );
          defineReadOnly5(this, "signer", signer || null);
        }
        getDeployTransaction(...args) {
          let tx = {};
          if (
            args.length === this.interface.deploy.inputs.length + 1 &&
            typeof args[args.length - 1] === "object"
          ) {
            tx = shallowCopy3(args.pop());
            for (const key2 in tx) {
              if (!allowedTransactionKeys2[key2]) {
                throw new Error("unknown transaction override " + key2);
              }
            }
          }
          ["data", "from", "to"].forEach((key2) => {
            if (tx[key2] == null) {
              return;
            }
            logger32.throwError(
              "cannot override " + key2,
              Logger10.errors.UNSUPPORTED_OPERATION,
              { operation: key2 }
            );
          });
          if (tx.value) {
            const value = BigNumber.from(tx.value);
            if (!value.isZero() && !this.interface.deploy.payable) {
              logger32.throwError(
                "non-payable constructor cannot override value",
                Logger10.errors.UNSUPPORTED_OPERATION,
                {
                  operation: "overrides.value",
                  value: tx.value,
                }
              );
            }
          }
          logger32.checkArgumentCount(
            args.length,
            this.interface.deploy.inputs.length,
            " in Contract constructor"
          );
          tx.data = hexlify7(
            concat5([this.bytecode, this.interface.encodeDeploy(args)])
          );
          return tx;
        }
        deploy(...args) {
          return __awaiter8(this, void 0, void 0, function* () {
            let overrides = {};
            if (args.length === this.interface.deploy.inputs.length + 1) {
              overrides = args.pop();
            }
            logger32.checkArgumentCount(
              args.length,
              this.interface.deploy.inputs.length,
              " in Contract constructor"
            );
            const params = yield resolveAddresses(
              this.signer,
              args,
              this.interface.deploy.inputs
            );
            params.push(overrides);
            const unsignedTx = this.getDeployTransaction(...params);
            const tx = yield this.signer.sendTransaction(unsignedTx);
            const address = getStatic2(
              this.constructor,
              "getContractAddress"
            )(tx);
            const contract = getStatic2(this.constructor, "getContract")(
              address,
              this.interface,
              this.signer
            );
            addContractWait(contract, tx);
            defineReadOnly5(contract, "deployTransaction", tx);
            return contract;
          });
        }
        attach(address) {
          return this.constructor.getContract(
            address,
            this.interface,
            this.signer
          );
        }
        connect(signer) {
          return new this.constructor(this.interface, this.bytecode, signer);
        }
        static fromSolidity(compilerOutput, signer) {
          if (compilerOutput == null) {
            logger32.throwError(
              "missing compiler output",
              Logger10.errors.MISSING_ARGUMENT,
              { argument: "compilerOutput" }
            );
          }
          if (typeof compilerOutput === "string") {
            compilerOutput = JSON.parse(compilerOutput);
          }
          const abi = compilerOutput.abi;
          let bytecode = null;
          if (compilerOutput.bytecode) {
            bytecode = compilerOutput.bytecode;
          } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
            bytecode = compilerOutput.evm.bytecode;
          }
          return new this(abi, bytecode, signer);
        }
        static getInterface(contractInterface) {
          return Contract.getInterface(contractInterface);
        }
        static getContractAddress(tx) {
          return getContractAddress(tx);
        }
        static getContract(address, contractInterface, signer) {
          return new Contract(address, contractInterface, signer);
        }
      };
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version38;
  var init_version38 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version38 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize12() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors12,
    _censorErrors12,
    LogLevels12,
    _logLevel12,
    _globalLogger12,
    _normalizeError12,
    LogLevel12,
    ErrorCode12,
    HEX12,
    Logger12;
  var init_lib40 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version38();
      _permanentCensorErrors12 = false;
      _censorErrors12 = false;
      LogLevels12 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel12 = LogLevels12["default"];
      _globalLogger12 = null;
      _normalizeError12 = _checkNormalize12();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel12 || (LogLevel12 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode12 || (ErrorCode12 = {}));
      HEX12 = "0123456789abcdef";
      Logger12 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels12[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel12 > LogLevels12[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger12.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger12.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger12.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors12) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger12.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX12[value[i] >> 4];
                  hex += HEX12[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger12.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError12) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger12.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError12,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger12.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger12.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger12.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger12.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger12.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger12.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger12.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger12) {
            _globalLogger12 = new Logger12(version38);
          }
          return _globalLogger12;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger12.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors12) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger12.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors12 = !!censorship;
          _permanentCensorErrors12 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels12[logLevel.toLowerCase()];
          if (level == null) {
            Logger12.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel12 = level;
        }
        static from(version89) {
          return new Logger12(version89);
        }
      };
      Logger12.errors = ErrorCode12;
      Logger12.levels = LogLevel12;
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version39;
  var init_version39 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version39 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable10(value) {
    return !!value.toHexString;
  }
  function addSlice10(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice10(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike4(value) {
    return (isHexString11(value) && !(value.length % 2)) || isBytes10(value);
  }
  function isInteger10(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes10(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger10(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger10(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify10(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger33.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice10(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable10(value)) {
      value = value.toHexString();
    }
    if (isHexString11(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger33.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice10(new Uint8Array(result));
    }
    if (isBytes10(value)) {
      return addSlice10(new Uint8Array(value));
    }
    return logger33.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat6(items) {
    const objects = items.map((item) => arrayify10(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice10(result);
  }
  function stripZeros3(value) {
    let result = arrayify10(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad2(value, length) {
    value = arrayify10(value);
    if (value.length > length) {
      logger33.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice10(result);
  }
  function isHexString11(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify9(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger33.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters9[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable10(value)) {
      return value.toHexString();
    }
    if (isHexString11(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger33.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes10(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters9[(v2 & 240) >> 4] + HexCharacters9[v2 & 15];
      }
      return result;
    }
    return logger33.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength3(data) {
    if (typeof data !== "string") {
      data = hexlify9(data);
    } else if (!isHexString11(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice4(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify9(data);
    } else if (!isHexString11(data) || data.length % 2) {
      logger33.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat4(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify9(item).substring(2);
    });
    return result;
  }
  function hexZeroPad6(value, length) {
    if (typeof value !== "string") {
      value = hexlify9(value);
    } else if (!isHexString11(value)) {
      logger33.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger33.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature3(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
    };
    if (isBytesLike4(signature2)) {
      const bytes = arrayify10(signature2);
      if (bytes.length !== 65) {
        logger33.throwArgumentError(
          "invalid signature string; must be 65 bytes",
          "signature",
          signature2
        );
      }
      result.r = hexlify9(bytes.slice(0, 32));
      result.s = hexlify9(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger33.throwArgumentError(
            "signature invalid v byte",
            "signature",
            signature2
          );
        }
      }
      result.recoveryParam = 1 - (result.v % 2);
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify9(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad2(arrayify10(result._vs), 32);
        result._vs = hexlify9(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger33.throwArgumentError(
            "signature recoveryParam mismatch _vs",
            "signature",
            signature2
          );
        }
        vs2[0] &= 127;
        const s2 = hexlify9(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger33.throwArgumentError(
            "signature v mismatch _vs",
            "signature",
            signature2
          );
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger33.throwArgumentError(
            "signature missing v and recoveryParam",
            "signature",
            signature2
          );
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - (result.v % 2);
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId =
            result.v === 0 || result.v === 1 ? result.v : 1 - (result.v % 2);
          if (result.recoveryParam !== recId) {
            logger33.throwArgumentError(
              "signature recoveryParam mismatch v",
              "signature",
              signature2
            );
          }
        }
      }
      if (result.r == null || !isHexString11(result.r)) {
        logger33.throwArgumentError(
          "signature missing or invalid r",
          "signature",
          signature2
        );
      } else {
        result.r = hexZeroPad6(result.r, 32);
      }
      if (result.s == null || !isHexString11(result.s)) {
        logger33.throwArgumentError(
          "signature missing or invalid s",
          "signature",
          signature2
        );
      } else {
        result.s = hexZeroPad6(result.s, 32);
      }
      const vs = arrayify10(result.s);
      if (vs[0] >= 128) {
        logger33.throwArgumentError(
          "signature s out of range",
          "signature",
          signature2
        );
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify9(vs);
      if (result._vs) {
        if (!isHexString11(result._vs)) {
          logger33.throwArgumentError(
            "signature invalid _vs",
            "signature",
            signature2
          );
        }
        result._vs = hexZeroPad6(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger33.throwArgumentError(
          "signature _vs mismatch v and s",
          "signature",
          signature2
        );
      }
    }
    return result;
  }
  function joinSignature(signature2) {
    signature2 = splitSignature3(signature2);
    return hexlify9(
      concat6([
        signature2.r,
        signature2.s,
        signature2.recoveryParam ? "0x1c" : "0x1b",
      ])
    );
  }
  var logger33, HexCharacters9;
  var init_lib41 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib40();
      init_version39();
      logger33 = new Logger12(version39);
      HexCharacters9 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version40;
  var init_version40 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version40 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize13() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors13,
    _censorErrors13,
    LogLevels13,
    _logLevel13,
    _globalLogger13,
    _normalizeError13,
    LogLevel13,
    ErrorCode13,
    HEX13,
    Logger13;
  var init_lib42 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version40();
      _permanentCensorErrors13 = false;
      _censorErrors13 = false;
      LogLevels13 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel13 = LogLevels13["default"];
      _globalLogger13 = null;
      _normalizeError13 = _checkNormalize13();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel13 || (LogLevel13 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode13 || (ErrorCode13 = {}));
      HEX13 = "0123456789abcdef";
      Logger13 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels13[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel13 > LogLevels13[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger13.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger13.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger13.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors13) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger13.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX13[value[i] >> 4];
                  hex += HEX13[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger13.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError13) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger13.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError13,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger13.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger13.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger13.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger13.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger13.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger13.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger13.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger13) {
            _globalLogger13 = new Logger13(version40);
          }
          return _globalLogger13;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger13.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors13) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger13.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors13 = !!censorship;
          _permanentCensorErrors13 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels13[logLevel.toLowerCase()];
          if (level == null) {
            Logger13.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel13 = level;
        }
        static from(version89) {
          return new Logger13(version89);
        }
      };
      Logger13.errors = ErrorCode13;
      Logger13.levels = LogLevel13;
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version41;
  var init_version41 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version41 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable11(value) {
    return !!value.toHexString;
  }
  function addSlice11(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice11(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger11(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes11(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger11(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger11(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify11(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger34.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice11(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable11(value)) {
      value = value.toHexString();
    }
    if (isHexString12(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger34.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice11(new Uint8Array(result));
    }
    if (isBytes11(value)) {
      return addSlice11(new Uint8Array(value));
    }
    return logger34.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString12(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var logger34;
  var init_lib43 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib42();
      init_version41();
      logger34 = new Logger13(version41);
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version42;
  var init_version42 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version42 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/basex/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly7(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  var logger35;
  var init_lib44 = __esm({
    "node_modules/@ethersproject/basex/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib42();
      init_version42();
      logger35 = new Logger13(version42);
    },
  });

  // node_modules/@ethersproject/basex/lib.esm/index.js
  var BaseX, Base32, Base58;
  var init_lib45 = __esm({
    "node_modules/@ethersproject/basex/lib.esm/index.js"() {
      init_lib43();
      init_lib44();
      BaseX = class {
        constructor(alphabet) {
          defineReadOnly7(this, "alphabet", alphabet);
          defineReadOnly7(this, "base", alphabet.length);
          defineReadOnly7(this, "_alphabetMap", {});
          defineReadOnly7(this, "_leader", alphabet.charAt(0));
          for (let i = 0; i < alphabet.length; i++) {
            this._alphabetMap[alphabet.charAt(i)] = i;
          }
        }
        encode(value) {
          let source = arrayify11(value);
          if (source.length === 0) {
            return "";
          }
          let digits = [0];
          for (let i = 0; i < source.length; ++i) {
            let carry = source[i];
            for (let j2 = 0; j2 < digits.length; ++j2) {
              carry += digits[j2] << 8;
              digits[j2] = carry % this.base;
              carry = (carry / this.base) | 0;
            }
            while (carry > 0) {
              digits.push(carry % this.base);
              carry = (carry / this.base) | 0;
            }
          }
          let string = "";
          for (let k2 = 0; source[k2] === 0 && k2 < source.length - 1; ++k2) {
            string += this._leader;
          }
          for (let q2 = digits.length - 1; q2 >= 0; --q2) {
            string += this.alphabet[digits[q2]];
          }
          return string;
        }
        decode(value) {
          if (typeof value !== "string") {
            throw new TypeError("Expected String");
          }
          let bytes = [];
          if (value.length === 0) {
            return new Uint8Array(bytes);
          }
          bytes.push(0);
          for (let i = 0; i < value.length; i++) {
            let byte = this._alphabetMap[value[i]];
            if (byte === void 0) {
              throw new Error("Non-base" + this.base + " character");
            }
            let carry = byte;
            for (let j2 = 0; j2 < bytes.length; ++j2) {
              carry += bytes[j2] * this.base;
              bytes[j2] = carry & 255;
              carry >>= 8;
            }
            while (carry > 0) {
              bytes.push(carry & 255);
              carry >>= 8;
            }
          }
          for (
            let k2 = 0;
            value[k2] === this._leader && k2 < value.length - 1;
            ++k2
          ) {
            bytes.push(0);
          }
          return arrayify11(new Uint8Array(bytes.reverse()));
        }
      };
      Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
      Base58 = new BaseX(
        "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
      );
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version43;
  var init_version43 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version43 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize14() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors14,
    _censorErrors14,
    LogLevels14,
    _logLevel14,
    _globalLogger14,
    _normalizeError14,
    LogLevel14,
    ErrorCode14,
    HEX14,
    Logger14;
  var init_lib46 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version43();
      _permanentCensorErrors14 = false;
      _censorErrors14 = false;
      LogLevels14 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel14 = LogLevels14["default"];
      _globalLogger14 = null;
      _normalizeError14 = _checkNormalize14();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel14 || (LogLevel14 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode14 || (ErrorCode14 = {}));
      HEX14 = "0123456789abcdef";
      Logger14 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels14[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel14 > LogLevels14[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger14.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger14.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger14.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors14) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger14.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX14[value[i] >> 4];
                  hex += HEX14[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger14.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError14) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger14.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError14,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger14.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger14.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger14.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger14.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger14.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger14.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger14.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger14) {
            _globalLogger14 = new Logger14(version43);
          }
          return _globalLogger14;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger14.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors14) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger14.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors14 = !!censorship;
          _permanentCensorErrors14 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels14[logLevel.toLowerCase()];
          if (level == null) {
            Logger14.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel14 = level;
        }
        static from(version89) {
          return new Logger14(version89);
        }
      };
      Logger14.errors = ErrorCode14;
      Logger14.levels = LogLevel14;
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version44;
  var init_version44 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version44 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable12(value) {
    return !!value.toHexString;
  }
  function addSlice12(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice12(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger12(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes12(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger12(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger12(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify12(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger36.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice12(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable12(value)) {
      value = value.toHexString();
    }
    if (isHexString13(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger36.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice12(new Uint8Array(result));
    }
    if (isBytes12(value)) {
      return addSlice12(new Uint8Array(value));
    }
    return logger36.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat7(items) {
    const objects = items.map((item) => arrayify12(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice12(result);
  }
  function isHexString13(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify10(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger36.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters10[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable12(value)) {
      return value.toHexString();
    }
    if (isHexString13(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger36.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes12(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters10[(v2 & 240) >> 4] + HexCharacters10[v2 & 15];
      }
      return result;
    }
    return logger36.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataSlice5(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify10(data);
    } else if (!isHexString13(data) || data.length % 2) {
      logger36.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexZeroPad7(value, length) {
    if (typeof value !== "string") {
      value = hexlify10(value);
    } else if (!isHexString13(value)) {
      logger36.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger36.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  var logger36, HexCharacters10;
  var init_lib47 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib46();
      init_version44();
      logger36 = new Logger14(version44);
      HexCharacters10 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version45;
  var init_version45 = __esm({
    "node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version45 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize15() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors15,
    _censorErrors15,
    LogLevels15,
    _logLevel15,
    _globalLogger15,
    _normalizeError15,
    LogLevel15,
    ErrorCode15,
    HEX15,
    Logger15;
  var init_lib48 = __esm({
    "node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version45();
      _permanentCensorErrors15 = false;
      _censorErrors15 = false;
      LogLevels15 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel15 = LogLevels15["default"];
      _globalLogger15 = null;
      _normalizeError15 = _checkNormalize15();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel15 || (LogLevel15 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode15 || (ErrorCode15 = {}));
      HEX15 = "0123456789abcdef";
      Logger15 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels15[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel15 > LogLevels15[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger15.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger15.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger15.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors15) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger15.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX15[value[i] >> 4];
                  hex += HEX15[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger15.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError15) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger15.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError15,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger15.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger15.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger15.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger15.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger15.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger15.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger15.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger15) {
            _globalLogger15 = new Logger15(version45);
          }
          return _globalLogger15;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger15.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors15) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger15.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors15 = !!censorship;
          _permanentCensorErrors15 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels15[logLevel.toLowerCase()];
          if (level == null) {
            Logger15.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel15 = level;
        }
        static from(version89) {
          return new Logger15(version89);
        }
      };
      Logger15.errors = ErrorCode15;
      Logger15.levels = LogLevel15;
    },
  });

  // node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version46;
  var init_version46 = __esm({
    "node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version46 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable13(value) {
    return !!value.toHexString;
  }
  function addSlice13(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice13(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger13(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes13(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger13(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger13(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify13(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger37.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice13(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable13(value)) {
      value = value.toHexString();
    }
    if (isHexString14(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger37.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice13(new Uint8Array(result));
    }
    if (isBytes13(value)) {
      return addSlice13(new Uint8Array(value));
    }
    return logger37.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString14(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify11(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger37.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters11[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable13(value)) {
      return value.toHexString();
    }
    if (isHexString14(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger37.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes13(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters11[(v2 & 240) >> 4] + HexCharacters11[v2 & 15];
      }
      return result;
    }
    return logger37.throwArgumentError("invalid hexlify value", "value", value);
  }
  var logger37, HexCharacters11;
  var init_lib49 = __esm({
    "node_modules/@ethersproject/pbkdf2/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib48();
      init_version46();
      logger37 = new Logger15(version46);
      HexCharacters11 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/sha2/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version47;
  var init_version47 = __esm({
    "node_modules/@ethersproject/sha2/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version47 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/sha2/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize16() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors16,
    _censorErrors16,
    LogLevels16,
    _logLevel16,
    _globalLogger16,
    _normalizeError16,
    LogLevel16,
    ErrorCode16,
    HEX16,
    Logger16;
  var init_lib50 = __esm({
    "node_modules/@ethersproject/sha2/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version47();
      _permanentCensorErrors16 = false;
      _censorErrors16 = false;
      LogLevels16 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel16 = LogLevels16["default"];
      _globalLogger16 = null;
      _normalizeError16 = _checkNormalize16();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel16 || (LogLevel16 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode16 || (ErrorCode16 = {}));
      HEX16 = "0123456789abcdef";
      Logger16 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels16[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel16 > LogLevels16[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger16.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger16.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger16.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors16) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger16.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX16[value[i] >> 4];
                  hex += HEX16[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger16.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError16) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger16.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError16,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger16.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger16.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger16.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger16.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger16.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger16.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger16.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger16) {
            _globalLogger16 = new Logger16(version47);
          }
          return _globalLogger16;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger16.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors16) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger16.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors16 = !!censorship;
          _permanentCensorErrors16 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels16[logLevel.toLowerCase()];
          if (level == null) {
            Logger16.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel16 = level;
        }
        static from(version89) {
          return new Logger16(version89);
        }
      };
      Logger16.errors = ErrorCode16;
      Logger16.levels = LogLevel16;
    },
  });

  // node_modules/@ethersproject/sha2/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version48;
  var init_version48 = __esm({
    "node_modules/@ethersproject/sha2/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version48 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/sha2/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable14(value) {
    return !!value.toHexString;
  }
  function addSlice14(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice14(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger14(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes14(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger14(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger14(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify14(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger38.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice14(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable14(value)) {
      value = value.toHexString();
    }
    if (isHexString15(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger38.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice14(new Uint8Array(result));
    }
    if (isBytes14(value)) {
      return addSlice14(new Uint8Array(value));
    }
    return logger38.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString15(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var logger38;
  var init_lib51 = __esm({
    "node_modules/@ethersproject/sha2/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib50();
      init_version48();
      logger38 = new Logger16(version48);
    },
  });

  // node_modules/@ethersproject/sha2/lib.esm/types.js
  var SupportedAlgorithm;
  var init_types = __esm({
    "node_modules/@ethersproject/sha2/lib.esm/types.js"() {
      (function (SupportedAlgorithm2) {
        SupportedAlgorithm2["sha256"] = "sha256";
        SupportedAlgorithm2["sha512"] = "sha512";
      })(SupportedAlgorithm || (SupportedAlgorithm = {}));
    },
  });

  // node_modules/@ethersproject/sha2/lib.esm/_version.js
  var version49;
  var init_version49 = __esm({
    "node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
      version49 = "sha2/5.5.0";
    },
  });

  // node_modules/@ethersproject/sha2/lib.esm/sha2.js
  function ripemd160(data) {
    return (
      "0x" +
      import_hash3.default.ripemd160().update(arrayify14(data)).digest("hex")
    );
  }
  function sha256(data) {
    return (
      "0x" +
      import_hash3.default.sha256().update(arrayify14(data)).digest("hex")
    );
  }
  function sha5122(data) {
    return (
      "0x" +
      import_hash3.default.sha512().update(arrayify14(data)).digest("hex")
    );
  }
  function computeHmac(algorithm, key2, data) {
    if (!SupportedAlgorithm[algorithm]) {
      logger39.throwError(
        "unsupported algorithm " + algorithm,
        Logger16.errors.UNSUPPORTED_OPERATION,
        {
          operation: "hmac",
          algorithm,
        }
      );
    }
    return (
      "0x" +
      import_hash3.default
        .hmac(import_hash3.default[algorithm], arrayify14(key2))
        .update(arrayify14(data))
        .digest("hex")
    );
  }
  var import_hash3, logger39;
  var init_sha2 = __esm({
    "node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
      "use strict";
      import_hash3 = __toESM(require_hash());
      init_lib51();
      init_types();
      init_lib50();
      init_version49();
      logger39 = new Logger16(version49);
    },
  });

  // node_modules/@ethersproject/sha2/lib.esm/index.js
  var init_lib52 = __esm({
    "node_modules/@ethersproject/sha2/lib.esm/index.js"() {
      init_sha2();
      init_types();
    },
  });

  // node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
  function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    password = arrayify13(password);
    salt = arrayify13(salt);
    let hLen;
    let l2 = 1;
    const DK = new Uint8Array(keylen);
    const block1 = new Uint8Array(salt.length + 4);
    block1.set(salt);
    let r;
    let T2;
    for (let i = 1; i <= l2; i++) {
      block1[salt.length] = (i >> 24) & 255;
      block1[salt.length + 1] = (i >> 16) & 255;
      block1[salt.length + 2] = (i >> 8) & 255;
      block1[salt.length + 3] = i & 255;
      let U2 = arrayify13(computeHmac(hashAlgorithm, password, block1));
      if (!hLen) {
        hLen = U2.length;
        T2 = new Uint8Array(hLen);
        l2 = Math.ceil(keylen / hLen);
        r = keylen - (l2 - 1) * hLen;
      }
      T2.set(U2);
      for (let j2 = 1; j2 < iterations; j2++) {
        U2 = arrayify13(computeHmac(hashAlgorithm, password, U2));
        for (let k2 = 0; k2 < hLen; k2++) T2[k2] ^= U2[k2];
      }
      const destPos = (i - 1) * hLen;
      const len = i === l2 ? r : hLen;
      DK.set(arrayify13(T2).slice(0, len), destPos);
    }
    return hexlify11(DK);
  }
  var init_pbkdf2 = __esm({
    "node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"() {
      "use strict";
      init_lib49();
      init_lib52();
    },
  });

  // node_modules/@ethersproject/pbkdf2/lib.esm/index.js
  var init_lib53 = __esm({
    "node_modules/@ethersproject/pbkdf2/lib.esm/index.js"() {
      init_pbkdf2();
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version50;
  var init_version50 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version50 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly8(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  var logger40;
  var init_lib54 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib46();
      init_version50();
      logger40 = new Logger14(version50);
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version51;
  var init_version51 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version51 = "transactions/5.5.0";
    },
  });

  // node_modules/@ethersproject/hdnode/node_modules/@ethersproject/transactions/lib.esm/index.js
  function computeAddress(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(
      hexDataSlice5(keccak256(hexDataSlice5(publicKey, 1)), 12)
    );
  }
  var logger41, TransactionTypes2;
  var init_lib55 = __esm({
    "node_modules/@ethersproject/hdnode/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib47();
      init_lib11();
      init_lib37();
      init_lib46();
      init_version51();
      logger41 = new Logger14(version51);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes2 || (TransactionTypes2 = {}));
    },
  });

  // node_modules/@ethersproject/wordlists/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version52;
  var init_version52 = __esm({
    "node_modules/@ethersproject/wordlists/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version52 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/wordlists/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize17() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors17,
    _censorErrors17,
    LogLevels17,
    _logLevel17,
    _globalLogger17,
    _normalizeError17,
    LogLevel17,
    ErrorCode17,
    HEX17,
    Logger17;
  var init_lib56 = __esm({
    "node_modules/@ethersproject/wordlists/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version52();
      _permanentCensorErrors17 = false;
      _censorErrors17 = false;
      LogLevels17 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel17 = LogLevels17["default"];
      _globalLogger17 = null;
      _normalizeError17 = _checkNormalize17();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel17 || (LogLevel17 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode17 || (ErrorCode17 = {}));
      HEX17 = "0123456789abcdef";
      Logger17 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels17[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel17 > LogLevels17[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger17.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger17.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger17.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors17) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger17.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX17[value[i] >> 4];
                  hex += HEX17[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger17.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError17) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger17.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError17,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger17.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger17.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger17.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger17.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger17.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger17.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger17.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger17) {
            _globalLogger17 = new Logger17(version52);
          }
          return _globalLogger17;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger17.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors17) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger17.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors17 = !!censorship;
          _permanentCensorErrors17 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels17[logLevel.toLowerCase()];
          if (level == null) {
            Logger17.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel17 = level;
        }
        static from(version89) {
          return new Logger17(version89);
        }
      };
      Logger17.errors = ErrorCode17;
      Logger17.levels = LogLevel17;
    },
  });

  // node_modules/@ethersproject/wordlists/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version53;
  var init_version53 = __esm({
    "node_modules/@ethersproject/wordlists/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version53 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/wordlists/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly9(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  var logger42;
  var init_lib57 = __esm({
    "node_modules/@ethersproject/wordlists/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib56();
      init_version53();
      logger42 = new Logger17(version53);
    },
  });

  // node_modules/@ethersproject/wordlists/lib.esm/_version.js
  var version54;
  var init_version54 = __esm({
    "node_modules/@ethersproject/wordlists/lib.esm/_version.js"() {
      version54 = "wordlists/5.5.0";
    },
  });

  // node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
  var exportWordlist, logger43, Wordlist;
  var init_wordlist = __esm({
    "node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"() {
      "use strict";
      init_lib23();
      init_lib57();
      init_lib56();
      init_version54();
      exportWordlist = false;
      logger43 = new Logger17(version54);
      Wordlist = class {
        constructor(locale) {
          logger43.checkAbstract(new.target, Wordlist);
          defineReadOnly9(this, "locale", locale);
        }
        split(mnemonic) {
          return mnemonic.toLowerCase().split(/ +/g);
        }
        join(words2) {
          return words2.join(" ");
        }
        static check(wordlist2) {
          const words2 = [];
          for (let i = 0; i < 2048; i++) {
            const word = wordlist2.getWord(i);
            if (i !== wordlist2.getWordIndex(word)) {
              return "0x";
            }
            words2.push(word);
          }
          return id(words2.join("\n") + "\n");
        }
        static register(lang, name2) {
          if (!name2) {
            name2 = lang.locale;
          }
          if (exportWordlist) {
            try {
              const anyGlobal2 = window;
              if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
                if (!anyGlobal2._ethers.wordlists[name2]) {
                  defineReadOnly9(anyGlobal2._ethers.wordlists, name2, lang);
                }
              }
            } catch (error) {}
          }
        }
      };
    },
  });

  // node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }
    wordlist = words
      .replace(/([A-Z])/g, " $1")
      .toLowerCase()
      .substring(1)
      .split(" ");
    if (
      Wordlist.check(lang) !==
      "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"
    ) {
      wordlist = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }
  var words, wordlist, LangEn, langEn;
  var init_lang_en = __esm({
    "node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"() {
      "use strict";
      init_wordlist();
      words =
        "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
      wordlist = null;
      LangEn = class extends Wordlist {
        constructor() {
          super("en");
        }
        getWord(index) {
          loadWords(this);
          return wordlist[index];
        }
        getWordIndex(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        }
      };
      langEn = new LangEn();
      Wordlist.register(langEn);
    },
  });

  // node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
  var wordlists;
  var init_wordlists = __esm({
    "node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"() {
      "use strict";
      init_lang_en();
      wordlists = {
        en: langEn,
      };
    },
  });

  // node_modules/@ethersproject/wordlists/lib.esm/index.js
  var init_lib58 = __esm({
    "node_modules/@ethersproject/wordlists/lib.esm/index.js"() {
      "use strict";
      init_wordlist();
      init_wordlists();
    },
  });

  // node_modules/@ethersproject/hdnode/lib.esm/_version.js
  var version55;
  var init_version55 = __esm({
    "node_modules/@ethersproject/hdnode/lib.esm/_version.js"() {
      version55 = "hdnode/5.5.0";
    },
  });

  // node_modules/@ethersproject/hdnode/lib.esm/index.js
  function getUpperMask(bits) {
    return ((1 << bits) - 1) << (8 - bits);
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1;
  }
  function bytes32(value) {
    return hexZeroPad7(hexlify10(value), 32);
  }
  function base58check(data) {
    return Base58.encode(
      concat7([data, hexDataSlice5(sha256(sha256(data)), 0, 4)])
    );
  }
  function getWordlist(wordlist2) {
    if (wordlist2 == null) {
      return wordlists["en"];
    }
    if (typeof wordlist2 === "string") {
      const words2 = wordlists[wordlist2];
      if (words2 == null) {
        logger44.throwArgumentError("unknown locale", "wordlist", wordlist2);
      }
      return words2;
    }
    return wordlist2;
  }
  function mnemonicToSeed(mnemonic, password) {
    if (!password) {
      password = "";
    }
    const salt = toUtf8Bytes(
      "mnemonic" + password,
      UnicodeNormalizationForm.NFKD
    );
    return pbkdf2(
      toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD),
      salt,
      2048,
      64,
      "sha512"
    );
  }
  function mnemonicToEntropy(mnemonic, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    logger44.checkNormalize();
    const words2 = wordlist2.split(mnemonic);
    if (words2.length % 3 !== 0) {
      throw new Error("invalid mnemonic");
    }
    const entropy = arrayify12(
      new Uint8Array(Math.ceil((11 * words2.length) / 8))
    );
    let offset = 0;
    for (let i = 0; i < words2.length; i++) {
      let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
      if (index === -1) {
        throw new Error("invalid mnemonic");
      }
      for (let bit = 0; bit < 11; bit++) {
        if (index & (1 << (10 - bit))) {
          entropy[offset >> 3] |= 1 << (7 - (offset % 8));
        }
        offset++;
      }
    }
    const entropyBits = (32 * words2.length) / 3;
    const checksumBits = words2.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum =
      arrayify12(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
      throw new Error("invalid checksum");
    }
    return hexlify10(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    entropy = arrayify12(entropy);
    if (
      entropy.length % 4 !== 0 ||
      entropy.length < 16 ||
      entropy.length > 32
    ) {
      throw new Error("invalid entropy");
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum =
      arrayify12(sha256(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> (8 - checksumBits);
    return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
  }
  function isValidMnemonic(mnemonic, wordlist2) {
    try {
      mnemonicToEntropy(mnemonic, wordlist2);
      return true;
    } catch (error) {}
    return false;
  }
  function getAccountPath(index) {
    if (
      typeof index !== "number" ||
      index < 0 ||
      index >= HardenedBit ||
      index % 1
    ) {
      logger44.throwArgumentError("invalid account index", "index", index);
    }
    return `m/44'/60'/${index}'/0/0`;
  }
  var logger44,
    N,
    MasterSecret,
    HardenedBit,
    _constructorGuard4,
    defaultPath,
    HDNode;
  var init_lib59 = __esm({
    "node_modules/@ethersproject/hdnode/lib.esm/index.js"() {
      "use strict";
      init_lib45();
      init_lib47();
      init_lib3();
      init_lib19();
      init_lib53();
      init_lib54();
      init_lib37();
      init_lib52();
      init_lib55();
      init_lib58();
      init_lib46();
      init_version55();
      logger44 = new Logger14(version55);
      N = BigNumber.from(
        "0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"
      );
      MasterSecret = toUtf8Bytes("Bitcoin seed");
      HardenedBit = 2147483648;
      _constructorGuard4 = {};
      defaultPath = "m/44'/60'/0'/0/0";
      HDNode = class {
        constructor(
          constructorGuard,
          privateKey,
          publicKey,
          parentFingerprint,
          chainCode,
          index,
          depth,
          mnemonicOrPath
        ) {
          logger44.checkNew(new.target, HDNode);
          if (constructorGuard !== _constructorGuard4) {
            throw new Error("HDNode constructor cannot be called directly");
          }
          if (privateKey) {
            const signingKey = new SigningKey(privateKey);
            defineReadOnly8(this, "privateKey", signingKey.privateKey);
            defineReadOnly8(this, "publicKey", signingKey.compressedPublicKey);
          } else {
            defineReadOnly8(this, "privateKey", null);
            defineReadOnly8(this, "publicKey", hexlify10(publicKey));
          }
          defineReadOnly8(this, "parentFingerprint", parentFingerprint);
          defineReadOnly8(
            this,
            "fingerprint",
            hexDataSlice5(ripemd160(sha256(this.publicKey)), 0, 4)
          );
          defineReadOnly8(this, "address", computeAddress(this.publicKey));
          defineReadOnly8(this, "chainCode", chainCode);
          defineReadOnly8(this, "index", index);
          defineReadOnly8(this, "depth", depth);
          if (mnemonicOrPath == null) {
            defineReadOnly8(this, "mnemonic", null);
            defineReadOnly8(this, "path", null);
          } else if (typeof mnemonicOrPath === "string") {
            defineReadOnly8(this, "mnemonic", null);
            defineReadOnly8(this, "path", mnemonicOrPath);
          } else {
            defineReadOnly8(this, "mnemonic", mnemonicOrPath);
            defineReadOnly8(this, "path", mnemonicOrPath.path);
          }
        }
        get extendedKey() {
          if (this.depth >= 256) {
            throw new Error("Depth too large!");
          }
          return base58check(
            concat7([
              this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
              hexlify10(this.depth),
              this.parentFingerprint,
              hexZeroPad7(hexlify10(this.index), 4),
              this.chainCode,
              this.privateKey != null
                ? concat7(["0x00", this.privateKey])
                : this.publicKey,
            ])
          );
        }
        neuter() {
          return new HDNode(
            _constructorGuard4,
            null,
            this.publicKey,
            this.parentFingerprint,
            this.chainCode,
            this.index,
            this.depth,
            this.path
          );
        }
        _derive(index) {
          if (index > 4294967295) {
            throw new Error("invalid index - " + String(index));
          }
          let path3 = this.path;
          if (path3) {
            path3 += "/" + (index & ~HardenedBit);
          }
          const data = new Uint8Array(37);
          if (index & HardenedBit) {
            if (!this.privateKey) {
              throw new Error("cannot derive child of neutered node");
            }
            data.set(arrayify12(this.privateKey), 1);
            if (path3) {
              path3 += "'";
            }
          } else {
            data.set(arrayify12(this.publicKey));
          }
          for (let i = 24; i >= 0; i -= 8) {
            data[33 + (i >> 3)] = (index >> (24 - i)) & 255;
          }
          const I2 = arrayify12(
            computeHmac(SupportedAlgorithm.sha512, this.chainCode, data)
          );
          const IL = I2.slice(0, 32);
          const IR = I2.slice(32);
          let ki = null;
          let Ki = null;
          if (this.privateKey) {
            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
          } else {
            const ek = new SigningKey(hexlify10(IL));
            Ki = ek._addPoint(this.publicKey);
          }
          let mnemonicOrPath = path3;
          const srcMnemonic = this.mnemonic;
          if (srcMnemonic) {
            mnemonicOrPath = Object.freeze({
              phrase: srcMnemonic.phrase,
              path: path3,
              locale: srcMnemonic.locale || "en",
            });
          }
          return new HDNode(
            _constructorGuard4,
            ki,
            Ki,
            this.fingerprint,
            bytes32(IR),
            index,
            this.depth + 1,
            mnemonicOrPath
          );
        }
        derivePath(path3) {
          const components = path3.split("/");
          if (
            components.length === 0 ||
            (components[0] === "m" && this.depth !== 0)
          ) {
            throw new Error("invalid path - " + path3);
          }
          if (components[0] === "m") {
            components.shift();
          }
          let result = this;
          for (let i = 0; i < components.length; i++) {
            const component = components[i];
            if (component.match(/^[0-9]+'$/)) {
              const index = parseInt(
                component.substring(0, component.length - 1)
              );
              if (index >= HardenedBit) {
                throw new Error("invalid path index - " + component);
              }
              result = result._derive(HardenedBit + index);
            } else if (component.match(/^[0-9]+$/)) {
              const index = parseInt(component);
              if (index >= HardenedBit) {
                throw new Error("invalid path index - " + component);
              }
              result = result._derive(index);
            } else {
              throw new Error("invalid path component - " + component);
            }
          }
          return result;
        }
        static _fromSeed(seed, mnemonic) {
          const seedArray = arrayify12(seed);
          if (seedArray.length < 16 || seedArray.length > 64) {
            throw new Error("invalid seed");
          }
          const I2 = arrayify12(
            computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray)
          );
          return new HDNode(
            _constructorGuard4,
            bytes32(I2.slice(0, 32)),
            null,
            "0x00000000",
            bytes32(I2.slice(32)),
            0,
            0,
            mnemonic
          );
        }
        static fromMnemonic(mnemonic, password, wordlist2) {
          wordlist2 = getWordlist(wordlist2);
          mnemonic = entropyToMnemonic(
            mnemonicToEntropy(mnemonic, wordlist2),
            wordlist2
          );
          return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
            phrase: mnemonic,
            path: "m",
            locale: wordlist2.locale,
          });
        }
        static fromSeed(seed) {
          return HDNode._fromSeed(seed, null);
        }
        static fromExtendedKey(extendedKey) {
          const bytes = Base58.decode(extendedKey);
          if (
            bytes.length !== 82 ||
            base58check(bytes.slice(0, 78)) !== extendedKey
          ) {
            logger44.throwArgumentError(
              "invalid extended key",
              "extendedKey",
              "[REDACTED]"
            );
          }
          const depth = bytes[4];
          const parentFingerprint = hexlify10(bytes.slice(5, 9));
          const index = parseInt(
            hexlify10(bytes.slice(9, 13)).substring(2),
            16
          );
          const chainCode = hexlify10(bytes.slice(13, 45));
          const key2 = bytes.slice(45, 78);
          switch (hexlify10(bytes.slice(0, 4))) {
            case "0x0488b21e":
            case "0x043587cf":
              return new HDNode(
                _constructorGuard4,
                null,
                hexlify10(key2),
                parentFingerprint,
                chainCode,
                index,
                depth,
                null
              );
            case "0x0488ade4":
            case "0x04358394 ":
              if (key2[0] !== 0) {
                break;
              }
              return new HDNode(
                _constructorGuard4,
                hexlify10(key2.slice(1)),
                null,
                parentFingerprint,
                chainCode,
                index,
                depth,
                null
              );
          }
          return logger44.throwArgumentError(
            "invalid extended key",
            "extendedKey",
            "[REDACTED]"
          );
        }
      };
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version56;
  var init_version56 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version56 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly10(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function resolveProperties4(object) {
    return __awaiter9(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function checkProperties(object, properties) {
    if (!object || typeof object !== "object") {
      logger45.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key2) => {
      if (!properties[key2]) {
        logger45.throwArgumentError(
          "invalid object key - " + key2,
          "transaction:" + key2,
          object
        );
      }
    });
  }
  var __awaiter9, logger45;
  var init_lib60 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib40();
      init_version56();
      __awaiter9 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger45 = new Logger12(version56);
    },
  });

  // node_modules/@ethersproject/random/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version57;
  var init_version57 = __esm({
    "node_modules/@ethersproject/random/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version57 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/random/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize18() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors18,
    _censorErrors18,
    LogLevels18,
    _logLevel18,
    _globalLogger18,
    _normalizeError18,
    LogLevel18,
    ErrorCode18,
    HEX18,
    Logger18;
  var init_lib61 = __esm({
    "node_modules/@ethersproject/random/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version57();
      _permanentCensorErrors18 = false;
      _censorErrors18 = false;
      LogLevels18 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel18 = LogLevels18["default"];
      _globalLogger18 = null;
      _normalizeError18 = _checkNormalize18();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel18 || (LogLevel18 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode18 || (ErrorCode18 = {}));
      HEX18 = "0123456789abcdef";
      Logger18 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels18[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel18 > LogLevels18[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger18.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger18.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger18.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors18) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger18.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX18[value[i] >> 4];
                  hex += HEX18[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger18.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError18) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger18.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError18,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger18.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger18.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger18.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger18.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger18.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger18.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger18.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger18) {
            _globalLogger18 = new Logger18(version57);
          }
          return _globalLogger18;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger18.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors18) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger18.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors18 = !!censorship;
          _permanentCensorErrors18 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels18[logLevel.toLowerCase()];
          if (level == null) {
            Logger18.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel18 = level;
        }
        static from(version89) {
          return new Logger18(version89);
        }
      };
      Logger18.errors = ErrorCode18;
      Logger18.levels = LogLevel18;
    },
  });

  // node_modules/@ethersproject/random/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version58;
  var init_version58 = __esm({
    "node_modules/@ethersproject/random/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version58 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/random/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable15(value) {
    return !!value.toHexString;
  }
  function addSlice15(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice15(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger15(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes15(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger15(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger15(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify15(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger46.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice15(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable15(value)) {
      value = value.toHexString();
    }
    if (isHexString16(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger46.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice15(new Uint8Array(result));
    }
    if (isBytes15(value)) {
      return addSlice15(new Uint8Array(value));
    }
    return logger46.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString16(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var logger46;
  var init_lib62 = __esm({
    "node_modules/@ethersproject/random/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib61();
      init_version58();
      logger46 = new Logger18(version58);
    },
  });

  // node_modules/@ethersproject/random/lib.esm/_version.js
  var version59;
  var init_version59 = __esm({
    "node_modules/@ethersproject/random/lib.esm/_version.js"() {
      version59 = "random/5.5.1";
    },
  });

  // node_modules/@ethersproject/random/lib.esm/random.js
  function getGlobal() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    throw new Error("unable to locate global object");
  }
  function randomBytes3(length) {
    if (length <= 0 || length > 1024 || length % 1 || length != length) {
      logger47.throwArgumentError("invalid length", "length", length);
    }
    const result = new Uint8Array(length);
    crypto.getRandomValues(result);
    return arrayify15(result);
  }
  var logger47, anyGlobal, crypto;
  var init_random = __esm({
    "node_modules/@ethersproject/random/lib.esm/random.js"() {
      "use strict";
      init_lib62();
      init_lib61();
      init_version59();
      logger47 = new Logger18(version59);
      anyGlobal = getGlobal();
      crypto = anyGlobal.crypto || anyGlobal.msCrypto;
      if (!crypto || !crypto.getRandomValues) {
        logger47.warn("WARNING: Missing strong random number source");
        crypto = {
          getRandomValues: function (buffer) {
            return logger47.throwError(
              "no secure random source avaialble",
              Logger18.errors.UNSUPPORTED_OPERATION,
              {
                operation: "crypto.getRandomValues",
              }
            );
          },
        };
      }
    },
  });

  // node_modules/@ethersproject/random/lib.esm/shuffle.js
  function shuffled(array) {
    array = array.slice();
    for (let i = array.length - 1; i > 0; i--) {
      const j2 = Math.floor(Math.random() * (i + 1));
      const tmp = array[i];
      array[i] = array[j2];
      array[j2] = tmp;
    }
    return array;
  }
  var init_shuffle = __esm({
    "node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
      "use strict";
    },
  });

  // node_modules/@ethersproject/random/lib.esm/index.js
  var init_lib63 = __esm({
    "node_modules/@ethersproject/random/lib.esm/index.js"() {
      "use strict";
      init_random();
      init_shuffle();
    },
  });

  // node_modules/aes-js/index.js
  var require_aes_js = __commonJS({
    "node_modules/aes-js/index.js"(exports, module) {
      "use strict";
      (function (root) {
        function checkInt(value) {
          return parseInt(value) === value;
        }
        function checkInts(arrayish) {
          if (!checkInt(arrayish.length)) {
            return false;
          }
          for (var i = 0; i < arrayish.length; i++) {
            if (
              !checkInt(arrayish[i]) ||
              arrayish[i] < 0 ||
              arrayish[i] > 255
            ) {
              return false;
            }
          }
          return true;
        }
        function coerceArray(arg, copy) {
          if (
            arg.buffer &&
            ArrayBuffer.isView(arg) &&
            arg.name === "Uint8Array"
          ) {
            if (copy) {
              if (arg.slice) {
                arg = arg.slice();
              } else {
                arg = Array.prototype.slice.call(arg);
              }
            }
            return arg;
          }
          if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
              throw new Error("Array contains invalid value: " + arg);
            }
            return new Uint8Array(arg);
          }
          if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
          }
          throw new Error("unsupported array-like object");
        }
        function createArray(length) {
          return new Uint8Array(length);
        }
        function copyArray(
          sourceArray,
          targetArray,
          targetStart,
          sourceStart,
          sourceEnd
        ) {
          if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
              sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
              sourceArray = Array.prototype.slice.call(
                sourceArray,
                sourceStart,
                sourceEnd
              );
            }
          }
          targetArray.set(sourceArray, targetStart);
        }
        var convertUtf8 = (function () {
          function toBytes(text) {
            var result = [],
              i = 0;
            text = encodeURI(text);
            while (i < text.length) {
              var c2 = text.charCodeAt(i++);
              if (c2 === 37) {
                result.push(parseInt(text.substr(i, 2), 16));
                i += 2;
              } else {
                result.push(c2);
              }
            }
            return coerceArray(result);
          }
          function fromBytes(bytes) {
            var result = [],
              i = 0;
            while (i < bytes.length) {
              var c2 = bytes[i];
              if (c2 < 128) {
                result.push(String.fromCharCode(c2));
                i++;
              } else if (c2 > 191 && c2 < 224) {
                result.push(
                  String.fromCharCode(((c2 & 31) << 6) | (bytes[i + 1] & 63))
                );
                i += 2;
              } else {
                result.push(
                  String.fromCharCode(
                    ((c2 & 15) << 12) |
                      ((bytes[i + 1] & 63) << 6) |
                      (bytes[i + 2] & 63)
                  )
                );
                i += 3;
              }
            }
            return result.join("");
          }
          return {
            toBytes,
            fromBytes,
          };
        })();
        var convertHex = (function () {
          function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
              result.push(parseInt(text.substr(i, 2), 16));
            }
            return result;
          }
          var Hex = "0123456789abcdef";
          function fromBytes(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i++) {
              var v2 = bytes[i];
              result.push(Hex[(v2 & 240) >> 4] + Hex[v2 & 15]);
            }
            return result.join("");
          }
          return {
            toBytes,
            fromBytes,
          };
        })();
        var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
        var rcon = [
          1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94,
          188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145,
        ];
        var S2 = [
          99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171,
          118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156,
          164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241,
          113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226,
          235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179,
          41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190,
          57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2,
          127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182,
          218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196,
          167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136,
          70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92,
          194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,
          78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28,
          166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181,
          102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248,
          152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140,
          161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22,
        ];
        var Si = [
          82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215,
          251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222,
          233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66,
          250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73,
          109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164,
          92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94,
          21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10,
          247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2,
          193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234,
          151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173,
          53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29,
          41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75,
          198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221,
          168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81,
          127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160,
          224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97,
          23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125,
        ];
        var T1 = [
          3328402341, 4168907908, 4000806809, 4135287693, 4294111757,
          3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241,
          1445669757, 3892248089, 3050821474, 1303096294, 3967186586,
          2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171,
          2387036105, 4226871307, 1101901292, 3017069671, 1604494077,
          1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402,
          3791519004, 1033081774, 1277568618, 1815492186, 2118074177,
          4126668546, 2211236943, 1748251740, 1369810420, 3521504564,
          4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908,
          2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135,
          798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438,
          1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972,
          874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614,
          1983593293, 3084310113, 2108928974, 1378429307, 3722699582,
          1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436,
          1075847264, 3825007647, 2041688520, 3059440621, 3563743934,
          2378943302, 1740553945, 1916352843, 2487896798, 2555137236,
          2958579944, 2244988746, 3151024235, 3320835882, 1336584933,
          3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663,
          3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106,
          1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413,
          563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573,
          1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300,
          403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436,
          773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572,
          3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905,
          2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882,
          3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493,
          2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571,
          201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935,
          3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010,
          2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682,
          1235855840, 3630984372, 2891339514, 4092916743, 3488279077,
          3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016,
          1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513,
          3421038627, 2715671932, 3899946140, 1042226977, 2521517021,
          1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956,
          3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891,
          1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535,
          664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707,
          2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602,
          3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671,
          1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982,
          3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163,
          2824099068, 1841019862, 739644986,
        ];
        var T2 = [
          2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027,
          2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147,
          434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938,
          1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592,
          3963727277, 1739838676, 4250903202, 3930435503, 3206782108,
          4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059,
          1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980,
          4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049,
          1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536,
          2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848,
          1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793,
          2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018,
          4217086112, 4137964114, 1299594043, 1639438038, 3464344499,
          2068982057, 1054729187, 1901997871, 2534638724, 4121318227,
          1757008337, 0, 750906861, 1614815264, 535035132, 3363418545,
          3988151131, 3201591914, 1183697867, 3647454910, 1265776953,
          3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087,
          3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261,
          3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428,
          3123027871, 3813386408, 4087501137, 4267549603, 3229630528,
          2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548,
          3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083,
          1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855,
          2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534,
          1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144,
          2551808385, 3516813135, 2141445340, 1715741218, 2119445034,
          2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540,
          2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026,
          1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516,
          1570751170, 1857934291, 4014189740, 2797888098, 2822345105,
          2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319,
          3084545389, 2348912013, 1689376213, 3533459022, 3762923945,
          3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810,
          3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758,
          607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877,
          2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234,
          2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067,
          33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753,
          2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800,
          3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444,
          3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045,
          2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245,
          3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313,
          2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766,
        ];
        var T3 = [
          1671808611, 2089089148, 2006576759, 2072901243, 4061003762,
          1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671,
          729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426,
          2191335298, 3376449993, 2106063485, 4195741690, 1508618841,
          1204391495, 4027317232, 2917941677, 3563566036, 2734514082,
          2951366063, 2629772188, 2767672228, 1922491506, 3227229120,
          3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767,
          4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329,
          1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279,
          593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466,
          118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711,
          2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610,
          455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283,
          3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444,
          1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412,
          2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753,
          1256100938, 1289001036, 1491644504, 3477767631, 3496721360,
          4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739,
          2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960,
          1011120188, 2679776671, 2833468328, 1374921297, 2751356323,
          1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005,
          3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895,
          4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324,
          1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711,
          2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699,
          1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154,
          2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740,
          3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546,
          978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276,
          3260915650, 3547250131, 2901361580, 1655096418, 2443721105,
          2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799,
          1840765549, 2374762893, 3580146133, 1322425422, 2850048425,
          1823791212, 1459268694, 4094161908, 3928346602, 1706019429,
          2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469,
          779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072,
          3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315,
          2323976074, 1888542832, 1044544574, 3049550261, 1722469478,
          1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557,
          1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430,
          3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385,
          2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169,
          3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649,
          2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440,
          1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308,
          3151392187, 372911126,
        ];
        var T4 = [
          1667474886, 2088535288, 2004326894, 2071694838, 4075949567,
          1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926,
          724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711,
          2189597983, 3385409673, 2105378810, 4210693615, 1499065266,
          1195886990, 4042263547, 2913856577, 3570689971, 2728590687,
          2947541573, 2627518243, 2762274643, 1920112356, 3233831835,
          3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142,
          4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529,
          1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789,
          589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191,
          117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286,
          2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380,
          454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198,
          3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939,
          1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667,
          2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178,
          1246420628, 1280103576, 1482221744, 3486468741, 3503319995,
          4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214,
          2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760,
          1010582648, 2678045221, 2829640523, 1364325282, 2745433693,
          1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505,
          3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645,
          4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699,
          1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621,
          2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854,
          1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924,
          2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440,
          3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716,
          976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736,
          3267517855, 3553849021, 2897014595, 1650632388, 2442242105,
          2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254,
          1835907034, 2374863873, 3587531953, 1313788572, 2846482505,
          1819063512, 1448540844, 4109633523, 3941213647, 1701162954,
          2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314,
          774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627,
          3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845,
          2324333839, 1886425312, 1044267644, 3048588401, 1718004428,
          1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282,
          1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215,
          3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025,
          2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609,
          3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649,
          2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520,
          1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848,
          3149649517, 370555436,
        ];
        var T5 = [
          1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753,
          2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485,
          1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703,
          1172967064, 1576976609, 3274667266, 2169303058, 2370213795,
          1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213,
          1484005843, 1239443753, 2395588676, 1975683434, 4102977912,
          2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444,
          1675577880, 3843699074, 2538681184, 1649639237, 2976151520,
          3144396420, 4269907996, 4178062228, 1883793496, 2403728665,
          2497604743, 1383856311, 2876494627, 1917518562, 3810496343,
          1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610,
          599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432,
          1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293,
          2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582,
          3178106961, 1042385657, 2531067453, 3711829422, 1306967366,
          2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327,
          2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483,
          2709260871, 2084704233, 4169408201, 0, 159417987, 841739592,
          504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415,
          168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535,
          3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374,
          3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893,
          766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109,
          4144047775, 1551037884, 1147550661, 1543208500, 2336434550,
          3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808,
          2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059,
          3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682,
          1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455,
          3644379585, 2362090238, 2564033334, 2801107407, 2776292904,
          3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698,
          4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924,
          1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923,
          3441850377, 1851332852, 3969562369, 2203032232, 3868552805,
          2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284,
          699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047,
          4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806,
          395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715,
          1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171,
          4211818798, 3009879386, 2463879762, 3910161971, 1842759443,
          2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029,
          3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775,
          1408749034, 1610459739, 3745345300, 2017778566, 3400528769,
          3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627,
          4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265,
          3576870512, 1215061108, 3501741890,
        ];
        var T6 = [
          1347548327, 1400783205, 3273267108, 2520393566, 3409685355,
          4045380933, 2880240216, 2471224067, 1428173050, 4138563181,
          2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155,
          1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728,
          2743944855, 3328955385, 3875770207, 2501218972, 3955191162,
          3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409,
          2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132,
          3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975,
          2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428,
          3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120,
          53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122,
          1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468,
          3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033,
          1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602,
          1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868,
          4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618,
          2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166,
          0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663,
          1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604,
          975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021,
          2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560,
          487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081,
          1286567175, 3152976349, 4255350624, 2683765030, 3160175349,
          3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617,
          3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061,
          296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347,
          1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879,
          3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419,
          3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554,
          2607439820, 1649704518, 3270937875, 3901806776, 1580087799,
          4118987695, 3198115200, 2087309459, 2842678573, 3016697106,
          1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472,
          32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392,
          3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259,
          818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840,
          1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904,
          1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889,
          77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242,
          870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476,
          4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235,
          2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891,
          2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253,
          2334669897, 1107234197, 1899603969, 3725069491, 2631447780,
          2422494913, 1635502980, 1893020342, 1950903388, 1120974935,
        ];
        var T7 = [
          2807058932, 1699970625, 2764249623, 1586903591, 1808481195,
          1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228,
          1277555970, 3623636965, 3419915562, 1149249077, 2744104290,
          1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588,
          2544078150, 4190530515, 1608975247, 2627016082, 2062270317,
          1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554,
          2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312,
          984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180,
          2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798,
          4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195,
          3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107,
          2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658,
          3201631749, 1646252340, 4270507174, 1402811438, 1436590835,
          3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366,
          2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892,
          3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497,
          1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938,
          516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170,
          4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260,
          1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075,
          3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128,
          3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854,
          428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354,
          1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452,
          3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051,
          840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177,
          376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744,
          752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444,
          2177869557, 3727205754, 2384911031, 3215212461, 2648976442,
          2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569,
          2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044,
          2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634,
          2594734927, 1852171925, 3867060991, 3473416636, 3907448597,
          2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639,
          2486224549, 1723872674, 3157750862, 3399941250, 3501252752,
          3625268135, 2555048196, 3673637356, 1343127501, 4130281361,
          3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410,
          532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963,
          492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225,
          344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695,
          3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069,
          1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571,
          3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716,
          3835484340, 3247465558, 2220981195, 3060847922, 1551124588,
          1463996600,
        ];
        var T8 = [
          4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623,
          4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885,
          3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053,
          3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835,
          2405426947, 2459735317, 1836772287, 1381620373, 3196267988,
          1948373848, 3764988233, 3385345166, 3263785589, 2390325492,
          1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789,
          3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355,
          2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426,
          1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895,
          3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221,
          3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454,
          878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212,
          2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718,
          1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912,
          2566595609, 3186202582, 1078185097, 3651041127, 3896688048,
          2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296,
          0, 2156299017, 736970802, 292596766, 1517440620, 251657213,
          2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339,
          908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416,
          3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620,
          454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591,
          1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156,
          4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431,
          1669664834, 2535604243, 3323011204, 1243905413, 3141400786,
          4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727,
          3004591147, 1891211689, 2487810577, 3915653703, 4237083816,
          4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628,
          3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092,
          2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814,
          3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464,
          410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844,
          1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714,
          1865862730, 2668221674, 2960971305, 2763173681, 1059270954,
          2777952454, 2724642869, 1320957812, 2194319100, 2429595872,
          2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550,
          4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417,
          1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011,
          3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729,
          322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828,
          4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015,
          1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990,
          3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240,
          1455525988, 3414450555, 850817237, 1817998408, 3092726480,
        ];
        var U1 = [
          0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554,
          708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108,
          1181045119, 1417561698, 1517767529, 3767586992, 4003061179,
          4236429990, 4069246893, 3635733660, 3602770327, 3299278474,
          3400528769, 2430122216, 2664543715, 2362090238, 2193862645,
          2835123396, 2801107407, 3035535058, 3135740889, 3678124923,
          3576870512, 3341394285, 3374361702, 3810496343, 3977675356,
          4279080257, 4043610186, 2876494627, 2776292904, 3076639029,
          3110650942, 2472011535, 2640243204, 2403728665, 2169303058,
          1001089995, 899835584, 666464733, 699432150, 59727847, 226906860,
          530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414,
          1942435775, 2110667444, 1876241833, 1641816226, 2910219766,
          2743034109, 2976151520, 3211623147, 2505202138, 2606453969,
          2302690252, 2269728455, 3711829422, 3543599269, 3240894392,
          3475313331, 3843699074, 3943906441, 4178062228, 4144047775,
          1306967366, 1139781709, 1374988112, 1610459739, 1975683434,
          2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896,
          800440835, 92987698, 193195065, 429456164, 395441711, 1984812685,
          2017778566, 1784663195, 1683407248, 1315562145, 1080094634,
          1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864,
          1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334,
          2328828971, 2227573024, 2935566865, 2700099354, 3001755655,
          3168937228, 3868552805, 3902563182, 4203181171, 4102977912,
          3736164937, 3501741890, 3265478751, 3433712980, 1106041591,
          1340463100, 1576976609, 1408749034, 2043211483, 2009195472,
          1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354,
          159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380,
          3178106961, 3009879386, 2572697195, 2538681184, 2236228733,
          2336434550, 3509871135, 3745345300, 3441850377, 3274667266,
          3910161971, 3877198648, 4110568485, 4211818798, 2597806476,
          2497604743, 2261089178, 2295101073, 2733856160, 2902087851,
          3202437046, 2968011453, 3936291284, 3835036895, 4136440770,
          4169408201, 3535486456, 3702665459, 3467192302, 3231722213,
          2051518780, 1951317047, 1716890410, 1750902305, 1113818384,
          1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330,
          404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369,
          3801332234, 4035489047, 4269907996, 3569255213, 3669462566,
          3366754619, 3332740144, 2631065433, 2463879762, 2160117071,
          2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497,
          33778362, 270040487, 504459436, 875451293, 975658646, 675039627,
          641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661,
          1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972,
          632953703, 260388950, 25965917, 328671808, 496906059, 1206477858,
          1239443753, 1543208500, 1441952575, 2144161806, 1908694277,
          1675577880, 1842759443, 3610369226, 3644379585, 3408119516,
          3307916247, 4011190502, 3776767469, 4077384432, 4245618683,
          2809771154, 2842737049, 3144396420, 3043140495, 2673705150,
          2438237621, 2203032232, 2370213795,
        ];
        var U2 = [
          0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694,
          824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388,
          2135319889, 1649704518, 1767536459, 2967507152, 3152976349,
          2801566410, 2918353863, 2631447780, 2547432937, 2328143614,
          2177544179, 3901806776, 3818836405, 4270639778, 4118987695,
          3299409036, 3483825537, 3535072918, 3652904859, 2077965243,
          1893020342, 1841768865, 1724457132, 1474502543, 1559041666,
          1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372,
          261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454,
          3710368113, 3593056380, 3875770207, 3960309330, 4045380933,
          4195456072, 2471224067, 2554718734, 2237133081, 2388260884,
          3212035895, 3028143674, 2842678573, 2724322336, 4138563181,
          4255350624, 3769721975, 3955191162, 3667219033, 3516619604,
          3431546947, 3347532110, 2933734917, 2782082824, 3099667487,
          3016697106, 2196052529, 2313884476, 2499348523, 2683765030,
          1179510461, 1296297904, 1347548327, 1533017514, 1786102409,
          1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751,
          53458370, 839224033, 957055980, 605657339, 790073846, 2373340630,
          2256028891, 2607439820, 2422494913, 2706270690, 2856345839,
          3075636216, 3160175349, 3573941694, 3725069491, 3273267108,
          3356761769, 4181598602, 4063242375, 4011996048, 3828103837,
          1033297158, 915985419, 730517276, 545572369, 296679730, 446754879,
          129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177,
          1239331162, 1120974935, 1606591296, 1422699085, 4148292826,
          4233094615, 3781033664, 3931371469, 3682191598, 3497509347,
          3446004468, 3328955385, 2939266226, 2755636671, 3106780840,
          2988687269, 2198438022, 2282195339, 2501218972, 2652609425,
          1201765386, 1286567175, 1371368976, 1521706781, 1805211710,
          1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672,
          46346101, 870912086, 954669403, 636813900, 788204353, 2358957921,
          2274680428, 2592523643, 2441661558, 2695033685, 2880240216,
          3065962831, 3182487618, 3572145929, 3756299780, 3270937875,
          3388507166, 4174560061, 4091327024, 4006521127, 3854606378,
          1014646705, 930369212, 711349675, 560487590, 272786309, 457992840,
          106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326,
          1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114,
          401639597, 486441376, 768917123, 651868046, 1003007129, 818324884,
          1503449823, 1385356242, 1333838021, 1150208456, 1973745387,
          2125135846, 1673061617, 1756818940, 2970356327, 3120694122,
          2802849917, 2887651696, 2637442643, 2520393566, 2334669897,
          2149987652, 3917234703, 3799141122, 4284502037, 4100872472,
          3309594171, 3460984630, 3545789473, 3629546796, 2050466060,
          1899603969, 1814803222, 1730525723, 1443857720, 1560382517,
          1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235,
          243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545,
          3704300486, 3620022987, 3874428392, 3990953189, 4042459122,
          4227665663, 2460449204, 2578018489, 2226875310, 2411029155,
          3198115200, 3046200461, 2827177882, 2743944855,
        ];
        var U3 = [
          0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294,
          590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588,
          1367295589, 1180849278, 1265195639, 3501252752, 3720081049,
          3399941250, 3350065803, 3835484340, 3919042237, 4270507174,
          4085369519, 3102249176, 3051593425, 2734591178, 2952102595,
          2361698556, 2177869557, 2530391278, 2614737639, 3145456443,
          3060847922, 2708326185, 2892417312, 2404901663, 2187128086,
          2504130317, 2555048196, 3542330227, 3727205754, 3375740769,
          3292445032, 3876557655, 3926170974, 4246310725, 4027744588,
          1808481195, 1723872674, 1910319033, 2094410160, 1608975247,
          1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201,
          344873464, 935293895, 984907214, 766078933, 547512796, 1844882806,
          1627235199, 2011214180, 2062270317, 1507497298, 1423022939,
          1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861,
          830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679,
          2807058932, 2858115069, 2305455554, 2220981195, 2474404304,
          2658625497, 3575528878, 3625268135, 3473416636, 3254988725,
          3778151818, 3963161475, 4213447064, 4130281361, 3599595085,
          3683022916, 3432737375, 3247465558, 3802222185, 4020912224,
          4172763771, 4122762354, 3201631749, 3017672716, 2764249623,
          2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613,
          188127444, 472615631, 287343814, 840019705, 1058709744, 671593195,
          621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577,
          1463996600, 1080017571, 1297403050, 3673637356, 3623636965,
          3235995134, 3454686199, 4007360968, 3822090177, 4107101658,
          4190530515, 2997825956, 3215212461, 2830708150, 2779915199,
          2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165,
          273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755,
          1646252340, 1863638845, 2013908262, 1963115311, 1446242576,
          1530455833, 1277555970, 1093597963, 1636604631, 1820824798,
          2073724613, 1989249228, 1436590835, 1487645946, 1337376481,
          1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051,
          821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645,
          2787207260, 2232435299, 2283490410, 2667994737, 2450346104,
          3647212047, 3564045318, 3279033885, 3464042516, 3980931627,
          3762502690, 4150144569, 4199882800, 3070356634, 3121275539,
          2904027272, 2686254721, 2200818878, 2384911031, 2570832044,
          2486224549, 3747192018, 3528626907, 3310321856, 3359936201,
          3950355702, 3867060991, 4049844452, 4234721005, 1739656202,
          1790575107, 2108100632, 1890328081, 1402811438, 1586903591,
          1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217,
          1002783846, 919489135, 567498868, 752375421, 209336225, 24197544,
          376187827, 459744698, 945164165, 895287692, 574624663, 793451934,
          1679968233, 1764313568, 2117360635, 1933530610, 1343127501,
          1560637892, 1243112415, 1192455638, 3704280881, 3519142200,
          3336358691, 3419915562, 3907448597, 3857572124, 4075877127,
          4294704398, 3029510009, 3113855344, 2927934315, 2744104290,
          2159976285, 2377486676, 2594734927, 2544078150,
        ];
        var U4 = [
          0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204,
          1059270954, 1214797936, 1097159550, 1517440620, 1400849762,
          1817998408, 1699839814, 2118541908, 2001430874, 2429595872,
          2581445614, 2194319100, 2345119218, 3034881240, 3186202582,
          2801699524, 2951971274, 3635996816, 3518358430, 3399679628,
          3283088770, 4237083816, 4118925222, 4002861748, 3885750714,
          1002142683, 850817237, 698445255, 548169417, 529487843, 377642221,
          227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577,
          1474760595, 1592394909, 1174215055, 1290801793, 2875968315,
          2724642869, 3111247143, 2960971305, 2405426947, 2253581325,
          2638606623, 2487810577, 3808662347, 3926825029, 4044981591,
          4162096729, 3342319475, 3459953789, 3576539503, 3693126241,
          1986918061, 2137062819, 1685577905, 1836772287, 1381620373,
          1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417,
          621982671, 439452389, 322734571, 137073913, 19308535, 3871163981,
          4021308739, 4104605777, 4255800159, 3263785589, 3414450555,
          3499326569, 3651041127, 2933202493, 2815956275, 3167684641,
          3049390895, 2330014213, 2213296395, 2566595609, 2448830231,
          1305906550, 1155237496, 1607244650, 1455525988, 1776460110,
          1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818,
          514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718,
          3557504664, 3474729866, 3323011204, 4180808110, 4030667424,
          3945269170, 3794078908, 2507040230, 2623762152, 2272556026,
          2390325492, 2975484382, 3092726480, 2738905026, 2857194700,
          3973773121, 3856137295, 4274053469, 4157467219, 3371096953,
          3252932727, 3673476453, 3556361835, 2763173681, 2915017791,
          3064510765, 3215307299, 2156299017, 2307622919, 2459735317,
          2610011675, 2081048481, 1963412655, 1846563261, 1729977011,
          1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015,
          645401037, 796197571, 274084841, 425408743, 38544885, 188821243,
          3613494426, 3731654548, 3313212038, 3430322568, 4082475170,
          4200115116, 3780097726, 3896688048, 2668221674, 2516901860,
          2366882550, 2216610296, 3141400786, 2989552604, 2837966542,
          2687165888, 1202797690, 1320957812, 1437280870, 1554391400,
          1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348,
          499347990, 349075736, 736970802, 585122620, 972512814, 821712160,
          2595684844, 2478443234, 2293045232, 2174754046, 3196267988,
          3079546586, 2895723464, 2777952454, 3537852828, 3687994002,
          3234156416, 3385345166, 4142626212, 4293295786, 3841024952,
          3992742070, 174567692, 57326082, 410887952, 292596766, 777231668,
          660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912,
          1494807662, 1715193156, 1865862730, 1948373848, 2100090966,
          2701949495, 2818666809, 3004591147, 3122358053, 2235061775,
          2352307457, 2535604243, 2653899549, 3915653703, 3764988233,
          4219352155, 4067639125, 3444575871, 3294430577, 3746175075,
          3594982253, 836553431, 953270745, 600235211, 718002117, 367585007,
          484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355,
          1654886325, 1568718495, 1418573201, 1335535747, 1184342925,
        ];
        function convertToInt32(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i += 4) {
            result.push(
              (bytes[i] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] << 8) |
                bytes[i + 3]
            );
          }
          return result;
        }
        var AES = function (key2) {
          if (!(this instanceof AES)) {
            throw Error("AES must be instanitated with `new`");
          }
          Object.defineProperty(this, "key", {
            value: coerceArray(key2, true),
          });
          this._prepare();
        };
        AES.prototype._prepare = function () {
          var rounds = numberOfRounds[this.key.length];
          if (rounds == null) {
            throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
          }
          this._Ke = [];
          this._Kd = [];
          for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
          }
          var roundKeyCount = (rounds + 1) * 4;
          var KC = this.key.length / 4;
          var tk = convertToInt32(this.key);
          var index;
          for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
          }
          var rconpointer = 0;
          var t2 = KC,
            tt2;
          while (t2 < roundKeyCount) {
            tt2 = tk[KC - 1];
            tk[0] ^=
              (S2[(tt2 >> 16) & 255] << 24) ^
              (S2[(tt2 >> 8) & 255] << 16) ^
              (S2[tt2 & 255] << 8) ^
              S2[(tt2 >> 24) & 255] ^
              (rcon[rconpointer] << 24);
            rconpointer += 1;
            if (KC != 8) {
              for (var i = 1; i < KC; i++) {
                tk[i] ^= tk[i - 1];
              }
            } else {
              for (var i = 1; i < KC / 2; i++) {
                tk[i] ^= tk[i - 1];
              }
              tt2 = tk[KC / 2 - 1];
              tk[KC / 2] ^=
                S2[tt2 & 255] ^
                (S2[(tt2 >> 8) & 255] << 8) ^
                (S2[(tt2 >> 16) & 255] << 16) ^
                (S2[(tt2 >> 24) & 255] << 24);
              for (var i = KC / 2 + 1; i < KC; i++) {
                tk[i] ^= tk[i - 1];
              }
            }
            var i = 0,
              r,
              c2;
            while (i < KC && t2 < roundKeyCount) {
              r = t2 >> 2;
              c2 = t2 % 4;
              this._Ke[r][c2] = tk[i];
              this._Kd[rounds - r][c2] = tk[i++];
              t2++;
            }
          }
          for (var r = 1; r < rounds; r++) {
            for (var c2 = 0; c2 < 4; c2++) {
              tt2 = this._Kd[r][c2];
              this._Kd[r][c2] =
                U1[(tt2 >> 24) & 255] ^
                U2[(tt2 >> 16) & 255] ^
                U3[(tt2 >> 8) & 255] ^
                U4[tt2 & 255];
            }
          }
        };
        AES.prototype.encrypt = function (plaintext) {
          if (plaintext.length != 16) {
            throw new Error("invalid plaintext size (must be 16 bytes)");
          }
          var rounds = this._Ke.length - 1;
          var a2 = [0, 0, 0, 0];
          var t2 = convertToInt32(plaintext);
          for (var i = 0; i < 4; i++) {
            t2[i] ^= this._Ke[0][i];
          }
          for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
              a2[i] =
                T1[(t2[i] >> 24) & 255] ^
                T2[(t2[(i + 1) % 4] >> 16) & 255] ^
                T3[(t2[(i + 2) % 4] >> 8) & 255] ^
                T4[t2[(i + 3) % 4] & 255] ^
                this._Ke[r][i];
            }
            t2 = a2.slice();
          }
          var result = createArray(16),
            tt2;
          for (var i = 0; i < 4; i++) {
            tt2 = this._Ke[rounds][i];
            result[4 * i] = (S2[(t2[i] >> 24) & 255] ^ (tt2 >> 24)) & 255;
            result[4 * i + 1] =
              (S2[(t2[(i + 1) % 4] >> 16) & 255] ^ (tt2 >> 16)) & 255;
            result[4 * i + 2] =
              (S2[(t2[(i + 2) % 4] >> 8) & 255] ^ (tt2 >> 8)) & 255;
            result[4 * i + 3] = (S2[t2[(i + 3) % 4] & 255] ^ tt2) & 255;
          }
          return result;
        };
        AES.prototype.decrypt = function (ciphertext) {
          if (ciphertext.length != 16) {
            throw new Error("invalid ciphertext size (must be 16 bytes)");
          }
          var rounds = this._Kd.length - 1;
          var a2 = [0, 0, 0, 0];
          var t2 = convertToInt32(ciphertext);
          for (var i = 0; i < 4; i++) {
            t2[i] ^= this._Kd[0][i];
          }
          for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
              a2[i] =
                T5[(t2[i] >> 24) & 255] ^
                T6[(t2[(i + 3) % 4] >> 16) & 255] ^
                T7[(t2[(i + 2) % 4] >> 8) & 255] ^
                T8[t2[(i + 1) % 4] & 255] ^
                this._Kd[r][i];
            }
            t2 = a2.slice();
          }
          var result = createArray(16),
            tt2;
          for (var i = 0; i < 4; i++) {
            tt2 = this._Kd[rounds][i];
            result[4 * i] = (Si[(t2[i] >> 24) & 255] ^ (tt2 >> 24)) & 255;
            result[4 * i + 1] =
              (Si[(t2[(i + 3) % 4] >> 16) & 255] ^ (tt2 >> 16)) & 255;
            result[4 * i + 2] =
              (Si[(t2[(i + 2) % 4] >> 8) & 255] ^ (tt2 >> 8)) & 255;
            result[4 * i + 3] = (Si[t2[(i + 1) % 4] & 255] ^ tt2) & 255;
          }
          return result;
        };
        var ModeOfOperationECB = function (key2) {
          if (!(this instanceof ModeOfOperationECB)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Electronic Code Block";
          this.name = "ecb";
          this._aes = new AES(key2);
        };
        ModeOfOperationECB.prototype.encrypt = function (plaintext) {
          plaintext = coerceArray(plaintext);
          if (plaintext.length % 16 !== 0) {
            throw new Error(
              "invalid plaintext size (must be multiple of 16 bytes)"
            );
          }
          var ciphertext = createArray(plaintext.length);
          var block = createArray(16);
          for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
          }
          return ciphertext;
        };
        ModeOfOperationECB.prototype.decrypt = function (ciphertext) {
          ciphertext = coerceArray(ciphertext);
          if (ciphertext.length % 16 !== 0) {
            throw new Error(
              "invalid ciphertext size (must be multiple of 16 bytes)"
            );
          }
          var plaintext = createArray(ciphertext.length);
          var block = createArray(16);
          for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
          }
          return plaintext;
        };
        var ModeOfOperationCBC = function (key2, iv) {
          if (!(this instanceof ModeOfOperationCBC)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Cipher Block Chaining";
          this.name = "cbc";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error(
              "invalid initialation vector size (must be 16 bytes)"
            );
          }
          this._lastCipherblock = coerceArray(iv, true);
          this._aes = new AES(key2);
        };
        ModeOfOperationCBC.prototype.encrypt = function (plaintext) {
          plaintext = coerceArray(plaintext);
          if (plaintext.length % 16 !== 0) {
            throw new Error(
              "invalid plaintext size (must be multiple of 16 bytes)"
            );
          }
          var ciphertext = createArray(plaintext.length);
          var block = createArray(16);
          for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            for (var j2 = 0; j2 < 16; j2++) {
              block[j2] ^= this._lastCipherblock[j2];
            }
            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
          }
          return ciphertext;
        };
        ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {
          ciphertext = coerceArray(ciphertext);
          if (ciphertext.length % 16 !== 0) {
            throw new Error(
              "invalid ciphertext size (must be multiple of 16 bytes)"
            );
          }
          var plaintext = createArray(ciphertext.length);
          var block = createArray(16);
          for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            for (var j2 = 0; j2 < 16; j2++) {
              plaintext[i + j2] = block[j2] ^ this._lastCipherblock[j2];
            }
            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
          }
          return plaintext;
        };
        var ModeOfOperationCFB = function (key2, iv, segmentSize) {
          if (!(this instanceof ModeOfOperationCFB)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Cipher Feedback";
          this.name = "cfb";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error(
              "invalid initialation vector size (must be 16 size)"
            );
          }
          if (!segmentSize) {
            segmentSize = 1;
          }
          this.segmentSize = segmentSize;
          this._shiftRegister = coerceArray(iv, true);
          this._aes = new AES(key2);
        };
        ModeOfOperationCFB.prototype.encrypt = function (plaintext) {
          if (plaintext.length % this.segmentSize != 0) {
            throw new Error(
              "invalid plaintext size (must be segmentSize bytes)"
            );
          }
          var encrypted = coerceArray(plaintext, true);
          var xorSegment;
          for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j2 = 0; j2 < this.segmentSize; j2++) {
              encrypted[i + j2] ^= xorSegment[j2];
            }
            copyArray(
              this._shiftRegister,
              this._shiftRegister,
              0,
              this.segmentSize
            );
            copyArray(
              encrypted,
              this._shiftRegister,
              16 - this.segmentSize,
              i,
              i + this.segmentSize
            );
          }
          return encrypted;
        };
        ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {
          if (ciphertext.length % this.segmentSize != 0) {
            throw new Error(
              "invalid ciphertext size (must be segmentSize bytes)"
            );
          }
          var plaintext = coerceArray(ciphertext, true);
          var xorSegment;
          for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j2 = 0; j2 < this.segmentSize; j2++) {
              plaintext[i + j2] ^= xorSegment[j2];
            }
            copyArray(
              this._shiftRegister,
              this._shiftRegister,
              0,
              this.segmentSize
            );
            copyArray(
              ciphertext,
              this._shiftRegister,
              16 - this.segmentSize,
              i,
              i + this.segmentSize
            );
          }
          return plaintext;
        };
        var ModeOfOperationOFB = function (key2, iv) {
          if (!(this instanceof ModeOfOperationOFB)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Output Feedback";
          this.name = "ofb";
          if (!iv) {
            iv = createArray(16);
          } else if (iv.length != 16) {
            throw new Error(
              "invalid initialation vector size (must be 16 bytes)"
            );
          }
          this._lastPrecipher = coerceArray(iv, true);
          this._lastPrecipherIndex = 16;
          this._aes = new AES(key2);
        };
        ModeOfOperationOFB.prototype.encrypt = function (plaintext) {
          var encrypted = coerceArray(plaintext, true);
          for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
              this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
              this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
          }
          return encrypted;
        };
        ModeOfOperationOFB.prototype.decrypt =
          ModeOfOperationOFB.prototype.encrypt;
        var Counter = function (initialValue) {
          if (!(this instanceof Counter)) {
            throw Error("Counter must be instanitated with `new`");
          }
          if (initialValue !== 0 && !initialValue) {
            initialValue = 1;
          }
          if (typeof initialValue === "number") {
            this._counter = createArray(16);
            this.setValue(initialValue);
          } else {
            this.setBytes(initialValue);
          }
        };
        Counter.prototype.setValue = function (value) {
          if (typeof value !== "number" || parseInt(value) != value) {
            throw new Error("invalid counter value (must be an integer)");
          }
          for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = value >> 8;
          }
        };
        Counter.prototype.setBytes = function (bytes) {
          bytes = coerceArray(bytes, true);
          if (bytes.length != 16) {
            throw new Error("invalid counter bytes size (must be 16 bytes)");
          }
          this._counter = bytes;
        };
        Counter.prototype.increment = function () {
          for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
              this._counter[i] = 0;
            } else {
              this._counter[i]++;
              break;
            }
          }
        };
        var ModeOfOperationCTR = function (key2, counter) {
          if (!(this instanceof ModeOfOperationCTR)) {
            throw Error("AES must be instanitated with `new`");
          }
          this.description = "Counter";
          this.name = "ctr";
          if (!(counter instanceof Counter)) {
            counter = new Counter(counter);
          }
          this._counter = counter;
          this._remainingCounter = null;
          this._remainingCounterIndex = 16;
          this._aes = new AES(key2);
        };
        ModeOfOperationCTR.prototype.encrypt = function (plaintext) {
          var encrypted = coerceArray(plaintext, true);
          for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
              this._remainingCounter = this._aes.encrypt(
                this._counter._counter
              );
              this._remainingCounterIndex = 0;
              this._counter.increment();
            }
            encrypted[i] ^=
              this._remainingCounter[this._remainingCounterIndex++];
          }
          return encrypted;
        };
        ModeOfOperationCTR.prototype.decrypt =
          ModeOfOperationCTR.prototype.encrypt;
        function pkcs7pad(data) {
          data = coerceArray(data, true);
          var padder = 16 - (data.length % 16);
          var result = createArray(data.length + padder);
          copyArray(data, result);
          for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
          }
          return result;
        }
        function pkcs7strip(data) {
          data = coerceArray(data, true);
          if (data.length < 16) {
            throw new Error("PKCS#7 invalid length");
          }
          var padder = data[data.length - 1];
          if (padder > 16) {
            throw new Error("PKCS#7 padding byte out of range");
          }
          var length = data.length - padder;
          for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
              throw new Error("PKCS#7 invalid padding byte");
            }
          }
          var result = createArray(length);
          copyArray(data, result, 0, 0, length);
          return result;
        }
        var aesjs = {
          AES,
          Counter,
          ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR,
          },
          utils: {
            hex: convertHex,
            utf8: convertUtf8,
          },
          padding: {
            pkcs7: {
              pad: pkcs7pad,
              strip: pkcs7strip,
            },
          },
          _arrayTest: {
            coerceArray,
            createArray,
            copyArray,
          },
        };
        if (typeof exports !== "undefined") {
          module.exports = aesjs;
        } else if (typeof define === "function" && define.amd) {
          define(aesjs);
        } else {
          if (root.aesjs) {
            aesjs._aesjs = root.aesjs;
          }
          root.aesjs = aesjs;
        }
      })(exports);
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version60;
  var init_version60 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version60 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize19() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors19,
    _censorErrors19,
    LogLevels19,
    _logLevel19,
    _globalLogger19,
    _normalizeError19,
    LogLevel19,
    ErrorCode19,
    HEX19,
    Logger19;
  var init_lib64 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version60();
      _permanentCensorErrors19 = false;
      _censorErrors19 = false;
      LogLevels19 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel19 = LogLevels19["default"];
      _globalLogger19 = null;
      _normalizeError19 = _checkNormalize19();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel19 || (LogLevel19 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode19 || (ErrorCode19 = {}));
      HEX19 = "0123456789abcdef";
      Logger19 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels19[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel19 > LogLevels19[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger19.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger19.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger19.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors19) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger19.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX19[value[i] >> 4];
                  hex += HEX19[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger19.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError19) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger19.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError19,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger19.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger19.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger19.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger19.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger19.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger19.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger19.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger19) {
            _globalLogger19 = new Logger19(version60);
          }
          return _globalLogger19;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger19.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors19) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger19.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors19 = !!censorship;
          _permanentCensorErrors19 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels19[logLevel.toLowerCase()];
          if (level == null) {
            Logger19.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel19 = level;
        }
        static from(version89) {
          return new Logger19(version89);
        }
      };
      Logger19.errors = ErrorCode19;
      Logger19.levels = LogLevel19;
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version61;
  var init_version61 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version61 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable16(value) {
    return !!value.toHexString;
  }
  function addSlice16(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice16(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger16(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes16(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger16(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger16(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify16(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger48.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice16(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable16(value)) {
      value = value.toHexString();
    }
    if (isHexString17(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger48.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice16(new Uint8Array(result));
    }
    if (isBytes16(value)) {
      return addSlice16(new Uint8Array(value));
    }
    return logger48.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat8(items) {
    const objects = items.map((item) => arrayify16(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice16(result);
  }
  function isHexString17(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify12(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger48.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters12[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable16(value)) {
      return value.toHexString();
    }
    if (isHexString17(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger48.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes16(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters12[(v2 & 240) >> 4] + HexCharacters12[v2 & 15];
      }
      return result;
    }
    return logger48.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataSlice6(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify12(data);
    } else if (!isHexString17(data) || data.length % 2) {
      logger48.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  var logger48, HexCharacters12;
  var init_lib65 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib64();
      init_version61();
      logger48 = new Logger19(version61);
      HexCharacters12 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version62;
  var init_version62 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version62 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly11(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function _isFrozen5(object) {
    if (object === void 0 || object === null || opaque5[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen5(value)) {
          return false;
        }
      }
      return true;
    }
    return logger49.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy5(object) {
    if (_isFrozen5(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy5(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly11(result, key2, deepCopy5(value));
      }
      return result;
    }
    return logger49.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy5(object) {
    return _deepCopy5(object);
  }
  var logger49, opaque5, Description3;
  var init_lib66 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib64();
      init_version62();
      logger49 = new Logger19(version62);
      opaque5 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
      Description3 = class {
        constructor(info) {
          for (const key2 in info) {
            this[key2] = deepCopy5(info[key2]);
          }
        }
      };
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/_version.js
  var version63;
  var init_version63 = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/_version.js"() {
      version63 = "json-wallets/5.5.0";
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/utils.js
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
      hexString = "0x" + hexString;
    }
    return arrayify16(hexString);
  }
  function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  function getPassword(password) {
    if (typeof password === "string") {
      return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
    }
    return arrayify16(password);
  }
  function searchPath(object, path3) {
    let currentChild = object;
    const comps = path3.toLowerCase().split("/");
    for (let i = 0; i < comps.length; i++) {
      let matchingChild = null;
      for (const key2 in currentChild) {
        if (key2.toLowerCase() === comps[i]) {
          matchingChild = currentChild[key2];
          break;
        }
      }
      if (matchingChild === null) {
        return null;
      }
      currentChild = matchingChild;
    }
    return currentChild;
  }
  function uuidV4(randomBytes4) {
    const bytes = arrayify16(randomBytes4);
    bytes[6] = (bytes[6] & 15) | 64;
    bytes[8] = (bytes[8] & 63) | 128;
    const value = hexlify12(bytes);
    return [
      value.substring(2, 10),
      value.substring(10, 14),
      value.substring(14, 18),
      value.substring(18, 22),
      value.substring(22, 34),
    ].join("-");
  }
  var init_utils = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/utils.js"() {
      "use strict";
      init_lib65();
      init_lib19();
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
  function decrypt(json, password) {
    const data = JSON.parse(json);
    password = getPassword(password);
    const ethaddr = getAddress(searchPath(data, "ethaddr"));
    const encseed = looseArrayify(searchPath(data, "encseed"));
    if (!encseed || encseed.length % 16 !== 0) {
      logger50.throwArgumentError("invalid encseed", "json", json);
    }
    const key2 = arrayify16(
      pbkdf2(password, password, 2e3, 32, "sha256")
    ).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);
    const seed = import_aes_js.default.padding.pkcs7.strip(
      arrayify16(aesCbc.decrypt(encryptedSeed))
    );
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = toUtf8Bytes(seedHex);
    const privateKey = keccak256(seedHexBytes);
    return new CrowdsaleAccount({
      _isCrowdsaleAccount: true,
      address: ethaddr,
      privateKey,
    });
  }
  var import_aes_js, logger50, CrowdsaleAccount;
  var init_crowdsale = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"() {
      "use strict";
      import_aes_js = __toESM(require_aes_js());
      init_lib15();
      init_lib65();
      init_lib11();
      init_lib53();
      init_lib19();
      init_lib66();
      init_lib64();
      init_version63();
      init_utils();
      logger50 = new Logger19(version63);
      CrowdsaleAccount = class extends Description3 {
        isCrowdsaleAccount(value) {
          return !!(value && value._isCrowdsaleAccount);
        }
      };
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
  function isCrowdsaleWallet(json) {
    let data = null;
    try {
      data = JSON.parse(json);
    } catch (error) {
      return false;
    }
    return data.encseed && data.ethaddr;
  }
  function isKeystoreWallet(json) {
    let data = null;
    try {
      data = JSON.parse(json);
    } catch (error) {
      return false;
    }
    if (
      !data.version ||
      parseInt(data.version) !== data.version ||
      parseInt(data.version) !== 3
    ) {
      return false;
    }
    return true;
  }
  function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
      try {
        return getAddress(JSON.parse(json).ethaddr);
      } catch (error) {
        return null;
      }
    }
    if (isKeystoreWallet(json)) {
      try {
        return getAddress(JSON.parse(json).address);
      } catch (error) {
        return null;
      }
    }
    return null;
  }
  var init_inspect = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"() {
      "use strict";
      init_lib15();
    },
  });

  // node_modules/scrypt-js/scrypt.js
  var require_scrypt = __commonJS({
    "node_modules/scrypt-js/scrypt.js"(exports, module) {
      "use strict";
      (function (root) {
        const MAX_VALUE = 2147483647;
        function SHA256(m2) {
          const K = new Uint32Array([
            1116352408, 1899447441, 3049323471, 3921009573, 961987163,
            1508970993, 2453635748, 2870763221, 3624381080, 310598401,
            607225278, 1426881987, 1925078388, 2162078206, 2614888103,
            3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983,
            1249150122, 1555081692, 1996064986, 2554220882, 2821834349,
            2952996808, 3210313671, 3336571891, 3584528711, 113926993,
            338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700,
            1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
            3259730800, 3345764771, 3516065817, 3600352804, 4094571909,
            275423344, 430227734, 506948616, 659060556, 883997877, 958139571,
            1322822218, 1537002063, 1747873779, 1955562222, 2024104815,
            2227730452, 2361852424, 2428436474, 2756734187, 3204031479,
            3329325298,
          ]);
          let h0 = 1779033703,
            h1 = 3144134277,
            h2 = 1013904242,
            h3 = 2773480762;
          let h4 = 1359893119,
            h5 = 2600822924,
            h6 = 528734635,
            h7 = 1541459225;
          const w2 = new Uint32Array(64);
          function blocks(p3) {
            let off = 0,
              len = p3.length;
            while (len >= 64) {
              let a2 = h0,
                b2 = h1,
                c2 = h2,
                d2 = h3,
                e = h4,
                f2 = h5,
                g2 = h6,
                h8 = h7,
                u2,
                i2,
                j2,
                t1,
                t2;
              for (i2 = 0; i2 < 16; i2++) {
                j2 = off + i2 * 4;
                w2[i2] =
                  ((p3[j2] & 255) << 24) |
                  ((p3[j2 + 1] & 255) << 16) |
                  ((p3[j2 + 2] & 255) << 8) |
                  (p3[j2 + 3] & 255);
              }
              for (i2 = 16; i2 < 64; i2++) {
                u2 = w2[i2 - 2];
                t1 =
                  ((u2 >>> 17) | (u2 << (32 - 17))) ^
                  ((u2 >>> 19) | (u2 << (32 - 19))) ^
                  (u2 >>> 10);
                u2 = w2[i2 - 15];
                t2 =
                  ((u2 >>> 7) | (u2 << (32 - 7))) ^
                  ((u2 >>> 18) | (u2 << (32 - 18))) ^
                  (u2 >>> 3);
                w2[i2] =
                  (((t1 + w2[i2 - 7]) | 0) + ((t2 + w2[i2 - 16]) | 0)) | 0;
              }
              for (i2 = 0; i2 < 64; i2++) {
                t1 =
                  ((((((e >>> 6) | (e << (32 - 6))) ^
                    ((e >>> 11) | (e << (32 - 11))) ^
                    ((e >>> 25) | (e << (32 - 25)))) +
                    ((e & f2) ^ (~e & g2))) |
                    0) +
                    ((h8 + ((K[i2] + w2[i2]) | 0)) | 0)) |
                  0;
                t2 =
                  ((((a2 >>> 2) | (a2 << (32 - 2))) ^
                    ((a2 >>> 13) | (a2 << (32 - 13))) ^
                    ((a2 >>> 22) | (a2 << (32 - 22)))) +
                    ((a2 & b2) ^ (a2 & c2) ^ (b2 & c2))) |
                  0;
                h8 = g2;
                g2 = f2;
                f2 = e;
                e = (d2 + t1) | 0;
                d2 = c2;
                c2 = b2;
                b2 = a2;
                a2 = (t1 + t2) | 0;
              }
              h0 = (h0 + a2) | 0;
              h1 = (h1 + b2) | 0;
              h2 = (h2 + c2) | 0;
              h3 = (h3 + d2) | 0;
              h4 = (h4 + e) | 0;
              h5 = (h5 + f2) | 0;
              h6 = (h6 + g2) | 0;
              h7 = (h7 + h8) | 0;
              off += 64;
              len -= 64;
            }
          }
          blocks(m2);
          let i,
            bytesLeft = m2.length % 64,
            bitLenHi = (m2.length / 536870912) | 0,
            bitLenLo = m2.length << 3,
            numZeros = bytesLeft < 56 ? 56 : 120,
            p2 = m2.slice(m2.length - bytesLeft, m2.length);
          p2.push(128);
          for (i = bytesLeft + 1; i < numZeros; i++) {
            p2.push(0);
          }
          p2.push((bitLenHi >>> 24) & 255);
          p2.push((bitLenHi >>> 16) & 255);
          p2.push((bitLenHi >>> 8) & 255);
          p2.push((bitLenHi >>> 0) & 255);
          p2.push((bitLenLo >>> 24) & 255);
          p2.push((bitLenLo >>> 16) & 255);
          p2.push((bitLenLo >>> 8) & 255);
          p2.push((bitLenLo >>> 0) & 255);
          blocks(p2);
          return [
            (h0 >>> 24) & 255,
            (h0 >>> 16) & 255,
            (h0 >>> 8) & 255,
            (h0 >>> 0) & 255,
            (h1 >>> 24) & 255,
            (h1 >>> 16) & 255,
            (h1 >>> 8) & 255,
            (h1 >>> 0) & 255,
            (h2 >>> 24) & 255,
            (h2 >>> 16) & 255,
            (h2 >>> 8) & 255,
            (h2 >>> 0) & 255,
            (h3 >>> 24) & 255,
            (h3 >>> 16) & 255,
            (h3 >>> 8) & 255,
            (h3 >>> 0) & 255,
            (h4 >>> 24) & 255,
            (h4 >>> 16) & 255,
            (h4 >>> 8) & 255,
            (h4 >>> 0) & 255,
            (h5 >>> 24) & 255,
            (h5 >>> 16) & 255,
            (h5 >>> 8) & 255,
            (h5 >>> 0) & 255,
            (h6 >>> 24) & 255,
            (h6 >>> 16) & 255,
            (h6 >>> 8) & 255,
            (h6 >>> 0) & 255,
            (h7 >>> 24) & 255,
            (h7 >>> 16) & 255,
            (h7 >>> 8) & 255,
            (h7 >>> 0) & 255,
          ];
        }
        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
          password = password.length <= 64 ? password : SHA256(password);
          const innerLen = 64 + salt.length + 4;
          const inner = new Array(innerLen);
          const outerKey = new Array(64);
          let i;
          let dk = [];
          for (i = 0; i < 64; i++) {
            inner[i] = 54;
          }
          for (i = 0; i < password.length; i++) {
            inner[i] ^= password[i];
          }
          for (i = 0; i < salt.length; i++) {
            inner[64 + i] = salt[i];
          }
          for (i = innerLen - 4; i < innerLen; i++) {
            inner[i] = 0;
          }
          for (i = 0; i < 64; i++) outerKey[i] = 92;
          for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];
          function incrementCounter() {
            for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {
              inner[i2]++;
              if (inner[i2] <= 255) return;
              inner[i2] = 0;
            }
          }
          while (dkLen >= 32) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
            dkLen -= 32;
          }
          if (dkLen > 0) {
            incrementCounter();
            dk = dk.concat(
              SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen)
            );
          }
          return dk;
        }
        function blockmix_salsa8(BY, Yi, r, x2, _X) {
          let i;
          arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
          for (i = 0; i < 2 * r; i++) {
            blockxor(BY, i * 16, _X, 16);
            salsa20_8(_X, x2);
            arraycopy(_X, 0, BY, Yi + i * 16, 16);
          }
          for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
          }
          for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
          }
        }
        function R2(a2, b2) {
          return (a2 << b2) | (a2 >>> (32 - b2));
        }
        function salsa20_8(B2, x2) {
          arraycopy(B2, 0, x2, 0, 16);
          for (let i = 8; i > 0; i -= 2) {
            x2[4] ^= R2(x2[0] + x2[12], 7);
            x2[8] ^= R2(x2[4] + x2[0], 9);
            x2[12] ^= R2(x2[8] + x2[4], 13);
            x2[0] ^= R2(x2[12] + x2[8], 18);
            x2[9] ^= R2(x2[5] + x2[1], 7);
            x2[13] ^= R2(x2[9] + x2[5], 9);
            x2[1] ^= R2(x2[13] + x2[9], 13);
            x2[5] ^= R2(x2[1] + x2[13], 18);
            x2[14] ^= R2(x2[10] + x2[6], 7);
            x2[2] ^= R2(x2[14] + x2[10], 9);
            x2[6] ^= R2(x2[2] + x2[14], 13);
            x2[10] ^= R2(x2[6] + x2[2], 18);
            x2[3] ^= R2(x2[15] + x2[11], 7);
            x2[7] ^= R2(x2[3] + x2[15], 9);
            x2[11] ^= R2(x2[7] + x2[3], 13);
            x2[15] ^= R2(x2[11] + x2[7], 18);
            x2[1] ^= R2(x2[0] + x2[3], 7);
            x2[2] ^= R2(x2[1] + x2[0], 9);
            x2[3] ^= R2(x2[2] + x2[1], 13);
            x2[0] ^= R2(x2[3] + x2[2], 18);
            x2[6] ^= R2(x2[5] + x2[4], 7);
            x2[7] ^= R2(x2[6] + x2[5], 9);
            x2[4] ^= R2(x2[7] + x2[6], 13);
            x2[5] ^= R2(x2[4] + x2[7], 18);
            x2[11] ^= R2(x2[10] + x2[9], 7);
            x2[8] ^= R2(x2[11] + x2[10], 9);
            x2[9] ^= R2(x2[8] + x2[11], 13);
            x2[10] ^= R2(x2[9] + x2[8], 18);
            x2[12] ^= R2(x2[15] + x2[14], 7);
            x2[13] ^= R2(x2[12] + x2[15], 9);
            x2[14] ^= R2(x2[13] + x2[12], 13);
            x2[15] ^= R2(x2[14] + x2[13], 18);
          }
          for (let i = 0; i < 16; ++i) {
            B2[i] += x2[i];
          }
        }
        function blockxor(S2, Si, D2, len) {
          for (let i = 0; i < len; i++) {
            D2[i] ^= S2[Si + i];
          }
        }
        function arraycopy(src, srcPos, dest, destPos, length) {
          while (length--) {
            dest[destPos++] = src[srcPos++];
          }
        }
        function checkBufferish(o2) {
          if (!o2 || typeof o2.length !== "number") {
            return false;
          }
          for (let i = 0; i < o2.length; i++) {
            const v2 = o2[i];
            if (typeof v2 !== "number" || v2 % 1 || v2 < 0 || v2 >= 256) {
              return false;
            }
          }
          return true;
        }
        function ensureInteger(value, name2) {
          if (typeof value !== "number" || value % 1) {
            throw new Error("invalid " + name2);
          }
          return value;
        }
        function _scrypt(password, salt, N3, r, p2, dkLen, callback) {
          N3 = ensureInteger(N3, "N");
          r = ensureInteger(r, "r");
          p2 = ensureInteger(p2, "p");
          dkLen = ensureInteger(dkLen, "dkLen");
          if (N3 === 0 || (N3 & (N3 - 1)) !== 0) {
            throw new Error("N must be power of 2");
          }
          if (N3 > MAX_VALUE / 128 / r) {
            throw new Error("N too large");
          }
          if (r > MAX_VALUE / 128 / p2) {
            throw new Error("r too large");
          }
          if (!checkBufferish(password)) {
            throw new Error("password must be an array or buffer");
          }
          password = Array.prototype.slice.call(password);
          if (!checkBufferish(salt)) {
            throw new Error("salt must be an array or buffer");
          }
          salt = Array.prototype.slice.call(salt);
          let b2 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p2 * 128 * r);
          const B2 = new Uint32Array(p2 * 32 * r);
          for (let i = 0; i < B2.length; i++) {
            const j2 = i * 4;
            B2[i] =
              ((b2[j2 + 3] & 255) << 24) |
              ((b2[j2 + 2] & 255) << 16) |
              ((b2[j2 + 1] & 255) << 8) |
              ((b2[j2 + 0] & 255) << 0);
          }
          const XY = new Uint32Array(64 * r);
          const V = new Uint32Array(32 * r * N3);
          const Yi = 32 * r;
          const x2 = new Uint32Array(16);
          const _X = new Uint32Array(16);
          const totalOps = p2 * N3 * 2;
          let currentOp = 0;
          let lastPercent10 = null;
          let stop = false;
          let state = 0;
          let i0 = 0,
            i1;
          let Bi;
          const limit = callback ? parseInt(1e3 / r) : 4294967295;
          const nextTick =
            typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
          const incrementalSMix = function () {
            if (stop) {
              return callback(new Error("cancelled"), currentOp / totalOps);
            }
            let steps;
            switch (state) {
              case 0:
                Bi = i0 * 32 * r;
                arraycopy(B2, Bi, XY, 0, Yi);
                state = 1;
                i1 = 0;
              case 1:
                steps = N3 - i1;
                if (steps > limit) {
                  steps = limit;
                }
                for (let i = 0; i < steps; i++) {
                  arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                  blockmix_salsa8(XY, Yi, r, x2, _X);
                }
                i1 += steps;
                currentOp += steps;
                if (callback) {
                  const percent10 = parseInt((1e3 * currentOp) / totalOps);
                  if (percent10 !== lastPercent10) {
                    stop = callback(null, currentOp / totalOps);
                    if (stop) {
                      break;
                    }
                    lastPercent10 = percent10;
                  }
                }
                if (i1 < N3) {
                  break;
                }
                i1 = 0;
                state = 2;
              case 2:
                steps = N3 - i1;
                if (steps > limit) {
                  steps = limit;
                }
                for (let i = 0; i < steps; i++) {
                  const offset = (2 * r - 1) * 16;
                  const j2 = XY[offset] & (N3 - 1);
                  blockxor(V, j2 * Yi, XY, Yi);
                  blockmix_salsa8(XY, Yi, r, x2, _X);
                }
                i1 += steps;
                currentOp += steps;
                if (callback) {
                  const percent10 = parseInt((1e3 * currentOp) / totalOps);
                  if (percent10 !== lastPercent10) {
                    stop = callback(null, currentOp / totalOps);
                    if (stop) {
                      break;
                    }
                    lastPercent10 = percent10;
                  }
                }
                if (i1 < N3) {
                  break;
                }
                arraycopy(XY, 0, B2, Bi, Yi);
                i0++;
                if (i0 < p2) {
                  state = 0;
                  break;
                }
                b2 = [];
                for (let i = 0; i < B2.length; i++) {
                  b2.push((B2[i] >> 0) & 255);
                  b2.push((B2[i] >> 8) & 255);
                  b2.push((B2[i] >> 16) & 255);
                  b2.push((B2[i] >> 24) & 255);
                }
                const derivedKey = PBKDF2_HMAC_SHA256_OneIter(
                  password,
                  b2,
                  dkLen
                );
                if (callback) {
                  callback(null, 1, derivedKey);
                }
                return derivedKey;
            }
            if (callback) {
              nextTick(incrementalSMix);
            }
          };
          if (!callback) {
            while (true) {
              const derivedKey = incrementalSMix();
              if (derivedKey != void 0) {
                return derivedKey;
              }
            }
          }
          incrementalSMix();
        }
        const lib = {
          scrypt: function (
            password,
            salt,
            N3,
            r,
            p2,
            dkLen,
            progressCallback
          ) {
            return new Promise(function (resolve2, reject) {
              let lastProgress = 0;
              if (progressCallback) {
                progressCallback(0);
              }
              _scrypt(
                password,
                salt,
                N3,
                r,
                p2,
                dkLen,
                function (error, progress, key2) {
                  if (error) {
                    reject(error);
                  } else if (key2) {
                    if (progressCallback && lastProgress !== 1) {
                      progressCallback(1);
                    }
                    resolve2(new Uint8Array(key2));
                  } else if (progressCallback && progress !== lastProgress) {
                    lastProgress = progress;
                    return progressCallback(progress);
                  }
                }
              );
            });
          },
          syncScrypt: function (password, salt, N3, r, p2, dkLen) {
            return new Uint8Array(_scrypt(password, salt, N3, r, p2, dkLen));
          },
        };
        if (typeof exports !== "undefined") {
          module.exports = lib;
        } else if (typeof define === "function" && define.amd) {
          define(lib);
        } else if (root) {
          if (root.scrypt) {
            root._scrypt = root.scrypt;
          }
          root.scrypt = lib;
        }
      })(exports);
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version64;
  var init_version64 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version64 = "transactions/5.5.0";
    },
  });

  // node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/transactions/lib.esm/index.js
  function computeAddress2(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(
      hexDataSlice6(keccak256(hexDataSlice6(publicKey, 1)), 12)
    );
  }
  var logger51, TransactionTypes3;
  var init_lib67 = __esm({
    "node_modules/@ethersproject/json-wallets/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib65();
      init_lib11();
      init_lib37();
      init_lib64();
      init_version64();
      logger51 = new Logger19(version64);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes3 || (TransactionTypes3 = {}));
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
  function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
  }
  function _decrypt(data, key2, ciphertext) {
    const cipher = searchPath(data, "crypto/cipher");
    if (cipher === "aes-128-ctr") {
      const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
      const counter = new import_aes_js2.default.Counter(iv);
      const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(
        key2,
        counter
      );
      return arrayify16(aesCtr.decrypt(ciphertext));
    }
    return null;
  }
  function _getAccount(data, key2) {
    const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
    const computedMAC = hexlify12(
      keccak256(concat8([key2.slice(16, 32), ciphertext]))
    ).substring(2);
    if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
      throw new Error("invalid password");
    }
    const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
    if (!privateKey) {
      logger52.throwError(
        "unsupported cipher",
        Logger19.errors.UNSUPPORTED_OPERATION,
        {
          operation: "decrypt",
        }
      );
    }
    const mnemonicKey = key2.slice(32, 64);
    const address = computeAddress2(privateKey);
    if (data.address) {
      let check = data.address.toLowerCase();
      if (check.substring(0, 2) !== "0x") {
        check = "0x" + check;
      }
      if (getAddress(check) !== address) {
        throw new Error("address mismatch");
      }
    }
    const account = {
      _isKeystoreAccount: true,
      address,
      privateKey: hexlify12(privateKey),
    };
    if (searchPath(data, "x-ethers/version") === "0.1") {
      const mnemonicCiphertext = looseArrayify(
        searchPath(data, "x-ethers/mnemonicCiphertext")
      );
      const mnemonicIv = looseArrayify(
        searchPath(data, "x-ethers/mnemonicCounter")
      );
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(
        mnemonicKey,
        mnemonicCounter
      );
      const path3 = searchPath(data, "x-ethers/path") || defaultPath;
      const locale = searchPath(data, "x-ethers/locale") || "en";
      const entropy = arrayify16(mnemonicAesCtr.decrypt(mnemonicCiphertext));
      try {
        const mnemonic = entropyToMnemonic(entropy, locale);
        const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(
          path3
        );
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
        account.mnemonic = node.mnemonic;
      } catch (error) {
        if (
          error.code !== Logger19.errors.INVALID_ARGUMENT ||
          error.argument !== "wordlist"
        ) {
          throw error;
        }
      }
    }
    return new KeystoreAccount(account);
  }
  function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return arrayify16(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
  }
  function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(
      pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc)
    );
  }
  function _computeKdfKey(
    data,
    password,
    pbkdf2Func,
    scryptFunc,
    progressCallback
  ) {
    const passwordBytes = getPassword(password);
    const kdf = searchPath(data, "crypto/kdf");
    if (kdf && typeof kdf === "string") {
      const throwError = function (name2, value) {
        return logger52.throwArgumentError(
          "invalid key-derivation function parameters",
          name2,
          value
        );
      };
      if (kdf.toLowerCase() === "scrypt") {
        const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
        const N3 = parseInt(searchPath(data, "crypto/kdfparams/n"));
        const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
        const p2 = parseInt(searchPath(data, "crypto/kdfparams/p"));
        if (!N3 || !r || !p2) {
          throwError("kdf", kdf);
        }
        if ((N3 & (N3 - 1)) !== 0) {
          throwError("N", N3);
        }
        const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return scryptFunc(passwordBytes, salt, N3, r, p2, 64, progressCallback);
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
        let prfFunc = null;
        const prf = searchPath(data, "crypto/kdfparams/prf");
        if (prf === "hmac-sha256") {
          prfFunc = "sha256";
        } else if (prf === "hmac-sha512") {
          prfFunc = "sha512";
        } else {
          throwError("prf", prf);
        }
        const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
        const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
      }
    }
    return logger52.throwArgumentError(
      "unsupported key-derivation function",
      "kdf",
      kdf
    );
  }
  function decryptSync(json, password) {
    const data = JSON.parse(json);
    const key2 = _computeKdfKey(
      data,
      password,
      pbkdf2Sync,
      import_scrypt_js.default.syncScrypt
    );
    return _getAccount(data, key2);
  }
  function decrypt2(json, password, progressCallback) {
    return __awaiter10(this, void 0, void 0, function* () {
      const data = JSON.parse(json);
      const key2 = yield _computeKdfKey(
        data,
        password,
        pbkdf22,
        import_scrypt_js.default.scrypt,
        progressCallback
      );
      return _getAccount(data, key2);
    });
  }
  function encrypt(account, password, options, progressCallback) {
    try {
      if (getAddress(account.address) !== computeAddress2(account.privateKey)) {
        throw new Error("address/privateKey mismatch");
      }
      if (hasMnemonic(account)) {
        const mnemonic = account.mnemonic;
        const node = HDNode.fromMnemonic(
          mnemonic.phrase,
          null,
          mnemonic.locale
        ).derivePath(mnemonic.path || defaultPath);
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
      }
    } catch (e) {
      return Promise.reject(e);
    }
    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }
    if (!options) {
      options = {};
    }
    const privateKey = arrayify16(account.privateKey);
    const passwordBytes = getPassword(password);
    let entropy = null;
    let path3 = null;
    let locale = null;
    if (hasMnemonic(account)) {
      const srcMnemonic = account.mnemonic;
      entropy = arrayify16(
        mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en")
      );
      path3 = srcMnemonic.path || defaultPath;
      locale = srcMnemonic.locale || "en";
    }
    let client = options.client;
    if (!client) {
      client = "ethers.js";
    }
    let salt = null;
    if (options.salt) {
      salt = arrayify16(options.salt);
    } else {
      salt = randomBytes3(32);
    }
    let iv = null;
    if (options.iv) {
      iv = arrayify16(options.iv);
      if (iv.length !== 16) {
        throw new Error("invalid iv");
      }
    } else {
      iv = randomBytes3(16);
    }
    let uuidRandom = null;
    if (options.uuid) {
      uuidRandom = arrayify16(options.uuid);
      if (uuidRandom.length !== 16) {
        throw new Error("invalid uuid");
      }
    } else {
      uuidRandom = randomBytes3(16);
    }
    let N3 = 1 << 17,
      r = 8,
      p2 = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N3 = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p2 = options.scrypt.p;
      }
    }
    return import_scrypt_js.default
      .scrypt(passwordBytes, salt, N3, r, p2, 64, progressCallback)
      .then((key2) => {
        key2 = arrayify16(key2);
        const derivedKey = key2.slice(0, 16);
        const macPrefix = key2.slice(16, 32);
        const mnemonicKey = key2.slice(32, 64);
        const counter = new import_aes_js2.default.Counter(iv);
        const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(
          derivedKey,
          counter
        );
        const ciphertext = arrayify16(aesCtr.encrypt(privateKey));
        const mac = keccak256(concat8([macPrefix, ciphertext]));
        const data = {
          address: account.address.substring(2).toLowerCase(),
          id: uuidV4(uuidRandom),
          version: 3,
          Crypto: {
            cipher: "aes-128-ctr",
            cipherparams: {
              iv: hexlify12(iv).substring(2),
            },
            ciphertext: hexlify12(ciphertext).substring(2),
            kdf: "scrypt",
            kdfparams: {
              salt: hexlify12(salt).substring(2),
              n: N3,
              dklen: 32,
              p: p2,
              r,
            },
            mac: mac.substring(2),
          },
        };
        if (entropy) {
          const mnemonicIv = randomBytes3(16);
          const mnemonicCounter = new import_aes_js2.default.Counter(
            mnemonicIv
          );
          const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(
            mnemonicKey,
            mnemonicCounter
          );
          const mnemonicCiphertext = arrayify16(
            mnemonicAesCtr.encrypt(entropy)
          );
          const now2 = new Date();
          const timestamp =
            now2.getUTCFullYear() +
            "-" +
            zpad(now2.getUTCMonth() + 1, 2) +
            "-" +
            zpad(now2.getUTCDate(), 2) +
            "T" +
            zpad(now2.getUTCHours(), 2) +
            "-" +
            zpad(now2.getUTCMinutes(), 2) +
            "-" +
            zpad(now2.getUTCSeconds(), 2) +
            ".0Z";
          data["x-ethers"] = {
            client,
            gethFilename: "UTC--" + timestamp + "--" + data.address,
            mnemonicCounter: hexlify12(mnemonicIv).substring(2),
            mnemonicCiphertext: hexlify12(mnemonicCiphertext).substring(2),
            path: path3,
            locale,
            version: "0.1",
          };
        }
        return JSON.stringify(data);
      });
  }
  var import_aes_js2, import_scrypt_js, __awaiter10, logger52, KeystoreAccount;
  var init_keystore = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"() {
      "use strict";
      import_aes_js2 = __toESM(require_aes_js());
      import_scrypt_js = __toESM(require_scrypt());
      init_lib15();
      init_lib65();
      init_lib59();
      init_lib11();
      init_lib53();
      init_lib63();
      init_lib66();
      init_lib67();
      init_utils();
      init_lib64();
      init_version63();
      __awaiter10 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger52 = new Logger19(version63);
      KeystoreAccount = class extends Description3 {
        isKeystoreAccount(value) {
          return !!(value && value._isKeystoreAccount);
        }
      };
    },
  });

  // node_modules/@ethersproject/json-wallets/lib.esm/index.js
  function decryptJsonWallet(json, password, progressCallback) {
    if (isCrowdsaleWallet(json)) {
      if (progressCallback) {
        progressCallback(0);
      }
      const account = decrypt(json, password);
      if (progressCallback) {
        progressCallback(1);
      }
      return Promise.resolve(account);
    }
    if (isKeystoreWallet(json)) {
      return decrypt2(json, password, progressCallback);
    }
    return Promise.reject(new Error("invalid JSON wallet"));
  }
  function decryptJsonWalletSync(json, password) {
    if (isCrowdsaleWallet(json)) {
      return decrypt(json, password);
    }
    if (isKeystoreWallet(json)) {
      return decryptSync(json, password);
    }
    throw new Error("invalid JSON wallet");
  }
  var init_lib68 = __esm({
    "node_modules/@ethersproject/json-wallets/lib.esm/index.js"() {
      "use strict";
      init_crowdsale();
      init_inspect();
      init_keystore();
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version65;
  var init_version65 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version65 = "transactions/5.5.0";
    },
  });

  // node_modules/@ethersproject/wallet/node_modules/@ethersproject/transactions/lib.esm/index.js
  function computeAddress3(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(
      hexDataSlice4(keccak256(hexDataSlice4(publicKey, 1)), 12)
    );
  }
  function recoverAddress(digest, signature2) {
    return computeAddress3(recoverPublicKey(arrayify10(digest), signature2));
  }
  function formatNumber(value, name2) {
    const result = stripZeros3(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger53.throwArgumentError(
        "invalid length for " + name2,
        "transaction:" + name2,
        value
      );
    }
    return result;
  }
  function accessSetify2(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength3(storageKey) !== 32) {
          logger53.throwArgumentError(
            "invalid access list storageKey",
            `accessList[${addr}:${index}]`,
            storageKey
          );
        }
        return storageKey.toLowerCase();
      }),
    };
  }
  function accessListify2(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger53.throwArgumentError(
              "access list expected to be [ address, storageKeys[] ]",
              `value[${index}]`,
              set
            );
          }
          return accessSetify2(set[0], set[1]);
        }
        return accessSetify2(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify2(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a2, b2) => a2.address.localeCompare(b2.address));
    return result;
  }
  function formatAccessList(value) {
    return accessListify2(value).map((set) => [set.address, set.storageKeys]);
  }
  function _serializeEip1559(transaction, signature2) {
    if (transaction.gasPrice != null) {
      const gasPrice = BigNumber.from(transaction.gasPrice);
      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
      if (!gasPrice.eq(maxFeePerGas)) {
        logger53.throwArgumentError(
          "mismatch EIP-1559 gasPrice != maxFeePerGas",
          "tx",
          {
            gasPrice,
            maxFeePerGas,
          }
        );
      }
    }
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(
        transaction.maxPriorityFeePerGas || 0,
        "maxPriorityFeePerGas"
      ),
      formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature3(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros3(sig.r));
      fields.push(stripZeros3(sig.s));
    }
    return hexConcat4(["0x02", encode(fields)]);
  }
  function _serializeEip2930(transaction, signature2) {
    const fields = [
      formatNumber(transaction.chainId || 0, "chainId"),
      formatNumber(transaction.nonce || 0, "nonce"),
      formatNumber(transaction.gasPrice || 0, "gasPrice"),
      formatNumber(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature3(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros3(sig.r));
      fields.push(stripZeros3(sig.s));
    }
    return hexConcat4(["0x01", encode(fields)]);
  }
  function _serialize(transaction, signature2) {
    checkProperties(transaction, allowedTransactionKeys3);
    const raw = [];
    transactionFields.forEach(function (fieldInfo) {
      let value = transaction[fieldInfo.name] || [];
      const options = {};
      if (fieldInfo.numeric) {
        options.hexPad = "left";
      }
      value = arrayify10(hexlify9(value, options));
      if (
        fieldInfo.length &&
        value.length !== fieldInfo.length &&
        value.length > 0
      ) {
        logger53.throwArgumentError(
          "invalid length for " + fieldInfo.name,
          "transaction:" + fieldInfo.name,
          value
        );
      }
      if (fieldInfo.maxLength) {
        value = stripZeros3(value);
        if (value.length > fieldInfo.maxLength) {
          logger53.throwArgumentError(
            "invalid length for " + fieldInfo.name,
            "transaction:" + fieldInfo.name,
            value
          );
        }
      }
      raw.push(hexlify9(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
      chainId = transaction.chainId;
      if (typeof chainId !== "number") {
        logger53.throwArgumentError(
          "invalid transaction.chainId",
          "transaction",
          transaction
        );
      }
    } else if (signature2 && !isBytesLike4(signature2) && signature2.v > 28) {
      chainId = Math.floor((signature2.v - 35) / 2);
    }
    if (chainId !== 0) {
      raw.push(hexlify9(chainId));
      raw.push("0x");
      raw.push("0x");
    }
    if (!signature2) {
      return encode(raw);
    }
    const sig = splitSignature3(signature2);
    let v2 = 27 + sig.recoveryParam;
    if (chainId !== 0) {
      raw.pop();
      raw.pop();
      raw.pop();
      v2 += chainId * 2 + 8;
      if (sig.v > 28 && sig.v !== v2) {
        logger53.throwArgumentError(
          "transaction.chainId/signature.v mismatch",
          "signature",
          signature2
        );
      }
    } else if (sig.v !== v2) {
      logger53.throwArgumentError(
        "transaction.chainId/signature.v mismatch",
        "signature",
        signature2
      );
    }
    raw.push(hexlify9(v2));
    raw.push(stripZeros3(arrayify10(sig.r)));
    raw.push(stripZeros3(arrayify10(sig.s)));
    return encode(raw);
  }
  function serialize(transaction, signature2) {
    if (transaction.type == null || transaction.type === 0) {
      if (transaction.accessList != null) {
        logger53.throwArgumentError(
          "untyped transactions do not support accessList; include type: 1",
          "transaction",
          transaction
        );
      }
      return _serialize(transaction, signature2);
    }
    switch (transaction.type) {
      case 1:
        return _serializeEip2930(transaction, signature2);
      case 2:
        return _serializeEip1559(transaction, signature2);
      default:
        break;
    }
    return logger53.throwError(
      `unsupported transaction type: ${transaction.type}`,
      Logger12.errors.UNSUPPORTED_OPERATION,
      {
        operation: "serializeTransaction",
        transactionType: transaction.type,
      }
    );
  }
  var logger53, TransactionTypes4, transactionFields, allowedTransactionKeys3;
  var init_lib69 = __esm({
    "node_modules/@ethersproject/wallet/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib3();
      init_lib41();
      init_lib11();
      init_lib60();
      init_lib14();
      init_lib37();
      init_lib40();
      init_version65();
      logger53 = new Logger12(version65);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes4 || (TransactionTypes4 = {}));
      transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
      ];
      allowedTransactionKeys3 = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        type: true,
        value: true,
      };
    },
  });

  // node_modules/@ethersproject/wallet/lib.esm/_version.js
  var version66;
  var init_version66 = __esm({
    "node_modules/@ethersproject/wallet/lib.esm/_version.js"() {
      version66 = "wallet/5.5.0";
    },
  });

  // node_modules/@ethersproject/wallet/lib.esm/index.js
  function isAccount(value) {
    return (
      value != null &&
      isHexString11(value.privateKey, 32) &&
      value.address != null
    );
  }
  function hasMnemonic2(value) {
    const mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
  }
  function verifyMessage(message, signature2) {
    return recoverAddress(hashMessage(message), signature2);
  }
  function verifyTypedData(domain, types, value, signature2) {
    return recoverAddress(
      TypedDataEncoder.hash(domain, types, value),
      signature2
    );
  }
  var __awaiter11, logger54, Wallet;
  var init_lib70 = __esm({
    "node_modules/@ethersproject/wallet/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib27();
      init_lib30();
      init_lib41();
      init_lib23();
      init_lib59();
      init_lib11();
      init_lib60();
      init_lib63();
      init_lib37();
      init_lib68();
      init_lib69();
      init_lib40();
      init_version66();
      __awaiter11 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger54 = new Logger12(version66);
      Wallet = class extends Signer {
        constructor(privateKey, provider) {
          logger54.checkNew(new.target, Wallet);
          super();
          if (isAccount(privateKey)) {
            const signingKey = new SigningKey(privateKey.privateKey);
            defineReadOnly10(this, "_signingKey", () => signingKey);
            defineReadOnly10(this, "address", computeAddress3(this.publicKey));
            if (this.address !== getAddress(privateKey.address)) {
              logger54.throwArgumentError(
                "privateKey/address mismatch",
                "privateKey",
                "[REDACTED]"
              );
            }
            if (hasMnemonic2(privateKey)) {
              const srcMnemonic = privateKey.mnemonic;
              defineReadOnly10(this, "_mnemonic", () => ({
                phrase: srcMnemonic.phrase,
                path: srcMnemonic.path || defaultPath,
                locale: srcMnemonic.locale || "en",
              }));
              const mnemonic = this.mnemonic;
              const node = HDNode.fromMnemonic(
                mnemonic.phrase,
                null,
                mnemonic.locale
              ).derivePath(mnemonic.path);
              if (computeAddress3(node.privateKey) !== this.address) {
                logger54.throwArgumentError(
                  "mnemonic/address mismatch",
                  "privateKey",
                  "[REDACTED]"
                );
              }
            } else {
              defineReadOnly10(this, "_mnemonic", () => null);
            }
          } else {
            if (SigningKey.isSigningKey(privateKey)) {
              if (privateKey.curve !== "secp256k1") {
                logger54.throwArgumentError(
                  "unsupported curve; must be secp256k1",
                  "privateKey",
                  "[REDACTED]"
                );
              }
              defineReadOnly10(this, "_signingKey", () => privateKey);
            } else {
              if (typeof privateKey === "string") {
                if (
                  privateKey.match(/^[0-9a-f]*$/i) &&
                  privateKey.length === 64
                ) {
                  privateKey = "0x" + privateKey;
                }
              }
              const signingKey = new SigningKey(privateKey);
              defineReadOnly10(this, "_signingKey", () => signingKey);
            }
            defineReadOnly10(this, "_mnemonic", () => null);
            defineReadOnly10(this, "address", computeAddress3(this.publicKey));
          }
          if (provider && !Provider.isProvider(provider)) {
            logger54.throwArgumentError(
              "invalid provider",
              "provider",
              provider
            );
          }
          defineReadOnly10(this, "provider", provider || null);
        }
        get mnemonic() {
          return this._mnemonic();
        }
        get privateKey() {
          return this._signingKey().privateKey;
        }
        get publicKey() {
          return this._signingKey().publicKey;
        }
        getAddress() {
          return Promise.resolve(this.address);
        }
        connect(provider) {
          return new Wallet(this, provider);
        }
        signTransaction(transaction) {
          return resolveProperties4(transaction).then((tx) => {
            if (tx.from != null) {
              if (getAddress(tx.from) !== this.address) {
                logger54.throwArgumentError(
                  "transaction from address mismatch",
                  "transaction.from",
                  transaction.from
                );
              }
              delete tx.from;
            }
            const signature2 = this._signingKey().signDigest(
              keccak256(serialize(tx))
            );
            return serialize(tx, signature2);
          });
        }
        signMessage(message) {
          return __awaiter11(this, void 0, void 0, function* () {
            return joinSignature(
              this._signingKey().signDigest(hashMessage(message))
            );
          });
        }
        _signTypedData(domain, types, value) {
          return __awaiter11(this, void 0, void 0, function* () {
            const populated = yield TypedDataEncoder.resolveNames(
              domain,
              types,
              value,
              (name2) => {
                if (this.provider == null) {
                  logger54.throwError(
                    "cannot resolve ENS names without a provider",
                    Logger12.errors.UNSUPPORTED_OPERATION,
                    {
                      operation: "resolveName",
                      value: name2,
                    }
                  );
                }
                return this.provider.resolveName(name2);
              }
            );
            return joinSignature(
              this._signingKey().signDigest(
                TypedDataEncoder.hash(populated.domain, types, populated.value)
              )
            );
          });
        }
        encrypt(password, options, progressCallback) {
          if (typeof options === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
          }
          if (progressCallback && typeof progressCallback !== "function") {
            throw new Error("invalid callback");
          }
          if (!options) {
            options = {};
          }
          return encrypt(this, password, options, progressCallback);
        }
        static createRandom(options) {
          let entropy = randomBytes3(16);
          if (!options) {
            options = {};
          }
          if (options.extraEntropy) {
            entropy = arrayify10(
              hexDataSlice4(
                keccak256(concat6([entropy, options.extraEntropy])),
                0,
                16
              )
            );
          }
          const mnemonic = entropyToMnemonic(entropy, options.locale);
          return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        }
        static fromEncryptedJson(json, password, progressCallback) {
          return decryptJsonWallet(json, password, progressCallback).then(
            (account) => {
              return new Wallet(account);
            }
          );
        }
        static fromEncryptedJsonSync(json, password) {
          return new Wallet(decryptJsonWalletSync(json, password));
        }
        static fromMnemonic(mnemonic, path3, wordlist2) {
          if (!path3) {
            path3 = defaultPath;
          }
          return new Wallet(
            HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path3)
          );
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version67;
  var init_version67 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version67 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize20() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors20,
    _censorErrors20,
    LogLevels20,
    _logLevel20,
    _globalLogger20,
    _normalizeError20,
    LogLevel20,
    ErrorCode20,
    HEX20,
    Logger20;
  var init_lib71 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version67();
      _permanentCensorErrors20 = false;
      _censorErrors20 = false;
      LogLevels20 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel20 = LogLevels20["default"];
      _globalLogger20 = null;
      _normalizeError20 = _checkNormalize20();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel20 || (LogLevel20 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode20 || (ErrorCode20 = {}));
      HEX20 = "0123456789abcdef";
      Logger20 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels20[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel20 > LogLevels20[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger20.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger20.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger20.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors20) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger20.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX20[value[i] >> 4];
                  hex += HEX20[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger20.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError20) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError20,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger20.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger20.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger20.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger20.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger20.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger20.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger20.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger20) {
            _globalLogger20 = new Logger20(version67);
          }
          return _globalLogger20;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors20) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors20 = !!censorship;
          _permanentCensorErrors20 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels20[logLevel.toLowerCase()];
          if (level == null) {
            Logger20.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel20 = level;
        }
        static from(version89) {
          return new Logger20(version89);
        }
      };
      Logger20.errors = ErrorCode20;
      Logger20.levels = LogLevel20;
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/networks/lib.esm/_version.js
  var version68;
  var init_version68 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/networks/lib.esm/_version.js"() {
      version68 = "networks/5.5.2";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/networks/lib.esm/index.js
  function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
  }
  function ethDefaultProvider(network) {
    const func = function (providers2, options) {
      if (options == null) {
        options = {};
      }
      const providerList = [];
      if (providers2.InfuraProvider) {
        try {
          providerList.push(
            new providers2.InfuraProvider(network, options.infura)
          );
        } catch (error) {}
      }
      if (providers2.EtherscanProvider) {
        try {
          providerList.push(
            new providers2.EtherscanProvider(network, options.etherscan)
          );
        } catch (error) {}
      }
      if (providers2.AlchemyProvider) {
        try {
          providerList.push(
            new providers2.AlchemyProvider(network, options.alchemy)
          );
        } catch (error) {}
      }
      if (providers2.PocketProvider) {
        const skip = ["goerli", "ropsten", "rinkeby"];
        try {
          const provider = new providers2.PocketProvider(network);
          if (provider.network && skip.indexOf(provider.network.name) === -1) {
            providerList.push(provider);
          }
        } catch (error) {}
      }
      if (providers2.CloudflareProvider) {
        try {
          providerList.push(new providers2.CloudflareProvider(network));
        } catch (error) {}
      }
      if (providerList.length === 0) {
        return null;
      }
      if (providers2.FallbackProvider) {
        let quorum = 1;
        if (options.quorum != null) {
          quorum = options.quorum;
        } else if (network === "homestead") {
          quorum = 2;
        }
        return new providers2.FallbackProvider(providerList, quorum);
      }
      return providerList[0];
    };
    func.renetwork = function (network2) {
      return ethDefaultProvider(network2);
    };
    return func;
  }
  function etcDefaultProvider(url, network) {
    const func = function (providers2, options) {
      if (providers2.JsonRpcProvider) {
        return new providers2.JsonRpcProvider(url, network);
      }
      return null;
    };
    func.renetwork = function (network2) {
      return etcDefaultProvider(url, network2);
    };
    return func;
  }
  function getNetwork(network) {
    if (network == null) {
      return null;
    }
    if (typeof network === "number") {
      for (const name2 in networks) {
        const standard2 = networks[name2];
        if (standard2.chainId === network) {
          return {
            name: standard2.name,
            chainId: standard2.chainId,
            ensAddress: standard2.ensAddress || null,
            _defaultProvider: standard2._defaultProvider || null,
          };
        }
      }
      return {
        chainId: network,
        name: "unknown",
      };
    }
    if (typeof network === "string") {
      const standard2 = networks[network];
      if (standard2 == null) {
        return null;
      }
      return {
        name: standard2.name,
        chainId: standard2.chainId,
        ensAddress: standard2.ensAddress,
        _defaultProvider: standard2._defaultProvider || null,
      };
    }
    const standard = networks[network.name];
    if (!standard) {
      if (typeof network.chainId !== "number") {
        logger55.throwArgumentError(
          "invalid network chainId",
          "network",
          network
        );
      }
      return network;
    }
    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
      logger55.throwArgumentError(
        "network chainId mismatch",
        "network",
        network
      );
    }
    let defaultProvider = network._defaultProvider || null;
    if (defaultProvider == null && standard._defaultProvider) {
      if (isRenetworkable(standard._defaultProvider)) {
        defaultProvider = standard._defaultProvider.renetwork(network);
      } else {
        defaultProvider = standard._defaultProvider;
      }
    }
    return {
      name: network.name,
      chainId: standard.chainId,
      ensAddress: network.ensAddress || standard.ensAddress || null,
      _defaultProvider: defaultProvider,
    };
  }
  var logger55, homestead, ropsten, classicMordor, networks;
  var init_lib72 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/networks/lib.esm/index.js"() {
      "use strict";
      init_lib71();
      init_version68();
      logger55 = new Logger20(version68);
      homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead"),
      };
      ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten"),
      };
      classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider(
          "https://www.ethercluster.com/mordor",
          "classicMordor"
        ),
      };
      networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten,
        testnet: ropsten,
        rinkeby: {
          chainId: 4,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "rinkeby",
          _defaultProvider: ethDefaultProvider("rinkeby"),
        },
        kovan: {
          chainId: 42,
          name: "kovan",
          _defaultProvider: ethDefaultProvider("kovan"),
        },
        goerli: {
          chainId: 5,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "goerli",
          _defaultProvider: ethDefaultProvider("goerli"),
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        classic: {
          chainId: 61,
          name: "classic",
          _defaultProvider: etcDefaultProvider(
            "https://www.ethercluster.com/etc",
            "classic"
          ),
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
          chainId: 6,
          name: "classicKotti",
          _defaultProvider: etcDefaultProvider(
            "https://www.ethercluster.com/kotti",
            "classicKotti"
          ),
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: { chainId: 137, name: "matic" },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: { chainId: 10, name: "optimism" },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
      };
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version69;
  var init_version69 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version69 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable17(value) {
    return !!value.toHexString;
  }
  function addSlice17(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice17(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike7(value) {
    return (isHexString18(value) && !(value.length % 2)) || isBytes17(value);
  }
  function isInteger17(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes17(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger17(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger17(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify17(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger56.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice17(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable17(value)) {
      value = value.toHexString();
    }
    if (isHexString18(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger56.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice17(new Uint8Array(result));
    }
    if (isBytes17(value)) {
      return addSlice17(new Uint8Array(value));
    }
    return logger56.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat9(items) {
    const objects = items.map((item) => arrayify17(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice17(result);
  }
  function stripZeros6(value) {
    let result = arrayify17(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad3(value, length) {
    value = arrayify17(value);
    if (value.length > length) {
      logger56.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice17(result);
  }
  function isHexString18(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify13(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger56.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters13[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable17(value)) {
      return value.toHexString();
    }
    if (isHexString18(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger56.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes17(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters13[(v2 & 240) >> 4] + HexCharacters13[v2 & 15];
      }
      return result;
    }
    return logger56.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength6(data) {
    if (typeof data !== "string") {
      data = hexlify13(data);
    } else if (!isHexString18(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice7(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify13(data);
    } else if (!isHexString18(data) || data.length % 2) {
      logger56.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat7(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify13(item).substring(2);
    });
    return result;
  }
  function hexValue(value) {
    const trimmed = hexStripZeros(hexlify13(value, { hexPad: "left" }));
    if (trimmed === "0x") {
      return "0x0";
    }
    return trimmed;
  }
  function hexStripZeros(value) {
    if (typeof value !== "string") {
      value = hexlify13(value);
    }
    if (!isHexString18(value)) {
      logger56.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while (offset < value.length && value[offset] === "0") {
      offset++;
    }
    return "0x" + value.substring(offset);
  }
  function hexZeroPad9(value, length) {
    if (typeof value !== "string") {
      value = hexlify13(value);
    } else if (!isHexString18(value)) {
      logger56.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger56.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature6(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
    };
    if (isBytesLike7(signature2)) {
      const bytes = arrayify17(signature2);
      if (bytes.length !== 65) {
        logger56.throwArgumentError(
          "invalid signature string; must be 65 bytes",
          "signature",
          signature2
        );
      }
      result.r = hexlify13(bytes.slice(0, 32));
      result.s = hexlify13(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger56.throwArgumentError(
            "signature invalid v byte",
            "signature",
            signature2
          );
        }
      }
      result.recoveryParam = 1 - (result.v % 2);
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify13(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad3(arrayify17(result._vs), 32);
        result._vs = hexlify13(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger56.throwArgumentError(
            "signature recoveryParam mismatch _vs",
            "signature",
            signature2
          );
        }
        vs2[0] &= 127;
        const s2 = hexlify13(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger56.throwArgumentError(
            "signature v mismatch _vs",
            "signature",
            signature2
          );
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger56.throwArgumentError(
            "signature missing v and recoveryParam",
            "signature",
            signature2
          );
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - (result.v % 2);
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId =
            result.v === 0 || result.v === 1 ? result.v : 1 - (result.v % 2);
          if (result.recoveryParam !== recId) {
            logger56.throwArgumentError(
              "signature recoveryParam mismatch v",
              "signature",
              signature2
            );
          }
        }
      }
      if (result.r == null || !isHexString18(result.r)) {
        logger56.throwArgumentError(
          "signature missing or invalid r",
          "signature",
          signature2
        );
      } else {
        result.r = hexZeroPad9(result.r, 32);
      }
      if (result.s == null || !isHexString18(result.s)) {
        logger56.throwArgumentError(
          "signature missing or invalid s",
          "signature",
          signature2
        );
      } else {
        result.s = hexZeroPad9(result.s, 32);
      }
      const vs = arrayify17(result.s);
      if (vs[0] >= 128) {
        logger56.throwArgumentError(
          "signature s out of range",
          "signature",
          signature2
        );
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify13(vs);
      if (result._vs) {
        if (!isHexString18(result._vs)) {
          logger56.throwArgumentError(
            "signature invalid _vs",
            "signature",
            signature2
          );
        }
        result._vs = hexZeroPad9(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger56.throwArgumentError(
          "signature _vs mismatch v and s",
          "signature",
          signature2
        );
      }
    }
    return result;
  }
  var logger56, HexCharacters13;
  var init_lib73 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib71();
      init_version69();
      logger56 = new Logger20(version69);
      HexCharacters13 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version70;
  var init_version70 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version70 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly12(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function getStatic3(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function resolveProperties5(object) {
    return __awaiter12(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function checkProperties2(object, properties) {
    if (!object || typeof object !== "object") {
      logger57.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key2) => {
      if (!properties[key2]) {
        logger57.throwArgumentError(
          "invalid object key - " + key2,
          "transaction:" + key2,
          object
        );
      }
    });
  }
  function shallowCopy4(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  function _isFrozen6(object) {
    if (object === void 0 || object === null || opaque6[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen6(value)) {
          return false;
        }
      }
      return true;
    }
    return logger57.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy6(object) {
    if (_isFrozen6(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy6(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly12(result, key2, deepCopy6(value));
      }
      return result;
    }
    return logger57.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy6(object) {
    return _deepCopy6(object);
  }
  var __awaiter12, logger57, opaque6;
  var init_lib74 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib71();
      init_version70();
      __awaiter12 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger57 = new Logger20(version70);
      opaque6 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
    },
  });

  // node_modules/@ethersproject/base64/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version71;
  var init_version71 = __esm({
    "node_modules/@ethersproject/base64/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version71 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/base64/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize21() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors21,
    _censorErrors21,
    LogLevels21,
    _logLevel21,
    _globalLogger21,
    _normalizeError21,
    LogLevel21,
    ErrorCode21,
    HEX21,
    Logger21;
  var init_lib75 = __esm({
    "node_modules/@ethersproject/base64/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version71();
      _permanentCensorErrors21 = false;
      _censorErrors21 = false;
      LogLevels21 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel21 = LogLevels21["default"];
      _globalLogger21 = null;
      _normalizeError21 = _checkNormalize21();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel21 || (LogLevel21 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode21 || (ErrorCode21 = {}));
      HEX21 = "0123456789abcdef";
      Logger21 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels21[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel21 > LogLevels21[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger21.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger21.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger21.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors21) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger21.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX21[value[i] >> 4];
                  hex += HEX21[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger21.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError21) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger21.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError21,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger21.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger21.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger21.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger21.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger21.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger21.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger21.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger21) {
            _globalLogger21 = new Logger21(version71);
          }
          return _globalLogger21;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger21.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors21) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger21.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors21 = !!censorship;
          _permanentCensorErrors21 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels21[logLevel.toLowerCase()];
          if (level == null) {
            Logger21.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel21 = level;
        }
        static from(version89) {
          return new Logger21(version89);
        }
      };
      Logger21.errors = ErrorCode21;
      Logger21.levels = LogLevel21;
    },
  });

  // node_modules/@ethersproject/base64/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version72;
  var init_version72 = __esm({
    "node_modules/@ethersproject/base64/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version72 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/base64/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable18(value) {
    return !!value.toHexString;
  }
  function addSlice18(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice18(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger18(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes18(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger18(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger18(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify18(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger58.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice18(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable18(value)) {
      value = value.toHexString();
    }
    if (isHexString19(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger58.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice18(new Uint8Array(result));
    }
    if (isBytes18(value)) {
      return addSlice18(new Uint8Array(value));
    }
    return logger58.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString19(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var logger58;
  var init_lib76 = __esm({
    "node_modules/@ethersproject/base64/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib75();
      init_version72();
      logger58 = new Logger21(version72);
    },
  });

  // node_modules/@ethersproject/base64/lib.esm/base64.js
  function decode2(textData) {
    textData = atob(textData);
    const data = [];
    for (let i = 0; i < textData.length; i++) {
      data.push(textData.charCodeAt(i));
    }
    return arrayify18(data);
  }
  function encode3(data) {
    data = arrayify18(data);
    let textData = "";
    for (let i = 0; i < data.length; i++) {
      textData += String.fromCharCode(data[i]);
    }
    return btoa(textData);
  }
  var init_base64 = __esm({
    "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
      "use strict";
      init_lib76();
    },
  });

  // node_modules/@ethersproject/base64/lib.esm/index.js
  var lib_exports3 = {};
  __export(lib_exports3, {
    decode: () => decode2,
    encode: () => encode3,
  });
  var init_lib77 = __esm({
    "node_modules/@ethersproject/base64/lib.esm/index.js"() {
      "use strict";
      init_base64();
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version73;
  var init_version73 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version73 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize22() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors22,
    _censorErrors22,
    LogLevels22,
    _logLevel22,
    _globalLogger22,
    _normalizeError22,
    LogLevel22,
    ErrorCode22,
    HEX22,
    Logger22;
  var init_lib78 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version73();
      _permanentCensorErrors22 = false;
      _censorErrors22 = false;
      LogLevels22 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel22 = LogLevels22["default"];
      _globalLogger22 = null;
      _normalizeError22 = _checkNormalize22();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel22 || (LogLevel22 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode22 || (ErrorCode22 = {}));
      HEX22 = "0123456789abcdef";
      Logger22 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels22[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel22 > LogLevels22[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger22.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger22.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger22.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors22) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger22.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX22[value[i] >> 4];
                  hex += HEX22[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger22.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError22) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger22.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError22,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger22.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger22.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger22.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger22.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger22.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger22.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger22.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger22) {
            _globalLogger22 = new Logger22(version73);
          }
          return _globalLogger22;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger22.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors22) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger22.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors22 = !!censorship;
          _permanentCensorErrors22 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels22[logLevel.toLowerCase()];
          if (level == null) {
            Logger22.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel22 = level;
        }
        static from(version89) {
          return new Logger22(version89);
        }
      };
      Logger22.errors = ErrorCode22;
      Logger22.levels = LogLevel22;
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version74;
  var init_version74 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version74 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable19(value) {
    return !!value.toHexString;
  }
  function addSlice19(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice19(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike8(value) {
    return (isHexString20(value) && !(value.length % 2)) || isBytes19(value);
  }
  function isInteger19(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes19(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger19(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger19(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify19(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger59.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice19(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable19(value)) {
      value = value.toHexString();
    }
    if (isHexString20(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger59.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice19(new Uint8Array(result));
    }
    if (isBytes19(value)) {
      return addSlice19(new Uint8Array(value));
    }
    return logger59.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function isHexString20(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify14(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger59.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters14[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable19(value)) {
      return value.toHexString();
    }
    if (isHexString20(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger59.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes19(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters14[(v2 & 240) >> 4] + HexCharacters14[v2 & 15];
      }
      return result;
    }
    return logger59.throwArgumentError("invalid hexlify value", "value", value);
  }
  var logger59, HexCharacters14;
  var init_lib79 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib78();
      init_version74();
      logger59 = new Logger22(version74);
      HexCharacters14 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version75;
  var init_version75 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version75 = "properties/5.5.0";
    },
  });

  // node_modules/@ethersproject/web/node_modules/@ethersproject/properties/lib.esm/index.js
  function shallowCopy5(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  var logger60;
  var init_lib80 = __esm({
    "node_modules/@ethersproject/web/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib78();
      init_version75();
      logger60 = new Logger22(version75);
    },
  });

  // node_modules/@ethersproject/web/lib.esm/_version.js
  var version76;
  var init_version76 = __esm({
    "node_modules/@ethersproject/web/lib.esm/_version.js"() {
      version76 = "web/5.5.1";
    },
  });

  // node_modules/@ethersproject/web/lib.esm/geturl.js
  function getUrl(href, options) {
    return __awaiter13(this, void 0, void 0, function* () {
      if (options == null) {
        options = {};
      }
      const request = {
        method: options.method || "GET",
        headers: options.headers || {},
        body: options.body || void 0,
      };
      if (options.skipFetchSetup !== true) {
        request.mode = "cors";
        request.cache = "no-cache";
        request.credentials = "same-origin";
        request.redirect = "follow";
        request.referrer = "client";
      }
      const response = yield fetch(href, request);
      const body = yield response.arrayBuffer();
      const headers = {};
      if (response.headers.forEach) {
        response.headers.forEach((value, key2) => {
          headers[key2.toLowerCase()] = value;
        });
      } else {
        response.headers.keys().forEach((key2) => {
          headers[key2.toLowerCase()] = response.headers.get(key2);
        });
      }
      return {
        headers,
        statusCode: response.status,
        statusMessage: response.statusText,
        body: arrayify19(new Uint8Array(body)),
      };
    });
  }
  var __awaiter13;
  var init_geturl = __esm({
    "node_modules/@ethersproject/web/lib.esm/geturl.js"() {
      "use strict";
      init_lib79();
      __awaiter13 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    },
  });

  // node_modules/@ethersproject/web/lib.esm/index.js
  function staller(duration) {
    return new Promise((resolve2) => {
      setTimeout(resolve2, duration);
    });
  }
  function bodyify(value, type) {
    if (value == null) {
      return null;
    }
    if (typeof value === "string") {
      return value;
    }
    if (isBytesLike8(value)) {
      if (
        type &&
        (type.split("/")[0] === "text" ||
          type.split(";")[0].trim() === "application/json")
      ) {
        try {
          return toUtf8String(value);
        } catch (error) {}
      }
      return hexlify14(value);
    }
    return value;
  }
  function _fetchData(connection, body, processFunc) {
    const attemptLimit =
      typeof connection === "object" && connection.throttleLimit != null
        ? connection.throttleLimit
        : 12;
    logger61.assertArgument(
      attemptLimit > 0 && attemptLimit % 1 === 0,
      "invalid connection throttle limit",
      "connection.throttleLimit",
      attemptLimit
    );
    const throttleCallback =
      typeof connection === "object" ? connection.throttleCallback : null;
    const throttleSlotInterval =
      typeof connection === "object" &&
      typeof connection.throttleSlotInterval === "number"
        ? connection.throttleSlotInterval
        : 100;
    logger61.assertArgument(
      throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0,
      "invalid connection throttle slot interval",
      "connection.throttleSlotInterval",
      throttleSlotInterval
    );
    const headers = {};
    let url = null;
    const options = {
      method: "GET",
    };
    let allow304 = false;
    let timeout = 2 * 60 * 1e3;
    if (typeof connection === "string") {
      url = connection;
    } else if (typeof connection === "object") {
      if (connection == null || connection.url == null) {
        logger61.throwArgumentError(
          "missing URL",
          "connection.url",
          connection
        );
      }
      url = connection.url;
      if (typeof connection.timeout === "number" && connection.timeout > 0) {
        timeout = connection.timeout;
      }
      if (connection.headers) {
        for (const key2 in connection.headers) {
          headers[key2.toLowerCase()] = {
            key: key2,
            value: String(connection.headers[key2]),
          };
          if (
            ["if-none-match", "if-modified-since"].indexOf(
              key2.toLowerCase()
            ) >= 0
          ) {
            allow304 = true;
          }
        }
      }
      options.allowGzip = !!connection.allowGzip;
      if (connection.user != null && connection.password != null) {
        if (
          url.substring(0, 6) !== "https:" &&
          connection.allowInsecureAuthentication !== true
        ) {
          logger61.throwError(
            "basic authentication requires a secure https url",
            Logger22.errors.INVALID_ARGUMENT,
            {
              argument: "url",
              url,
              user: connection.user,
              password: "[REDACTED]",
            }
          );
        }
        const authorization = connection.user + ":" + connection.password;
        headers["authorization"] = {
          key: "Authorization",
          value: "Basic " + encode3(toUtf8Bytes(authorization)),
        };
      }
    }
    const reData = new RegExp(
      "^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$",
      "i"
    );
    const dataMatch = url ? url.match(reData) : null;
    if (dataMatch) {
      try {
        const response = {
          statusCode: 200,
          statusMessage: "OK",
          headers: { "content-type": dataMatch[1] },
          body: decode2(dataMatch[2]),
        };
        let result = response.body;
        if (processFunc) {
          result = processFunc(response.body, response);
        }
        return Promise.resolve(result);
      } catch (error) {
        logger61.throwError(
          "processing response error",
          Logger22.errors.SERVER_ERROR,
          {
            body: bodyify(dataMatch[1], dataMatch[2]),
            error,
            requestBody: null,
            requestMethod: "GET",
            url,
          }
        );
      }
    }
    if (body) {
      options.method = "POST";
      options.body = body;
      if (headers["content-type"] == null) {
        headers["content-type"] = {
          key: "Content-Type",
          value: "application/octet-stream",
        };
      }
      if (headers["content-length"] == null) {
        headers["content-length"] = {
          key: "Content-Length",
          value: String(body.length),
        };
      }
    }
    const flatHeaders = {};
    Object.keys(headers).forEach((key2) => {
      const header = headers[key2];
      flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;
    const runningTimeout = (function () {
      let timer2 = null;
      const promise = new Promise(function (resolve2, reject) {
        if (timeout) {
          timer2 = setTimeout(() => {
            if (timer2 == null) {
              return;
            }
            timer2 = null;
            reject(
              logger61.makeError("timeout", Logger22.errors.TIMEOUT, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                timeout,
                url,
              })
            );
          }, timeout);
        }
      });
      const cancel = function () {
        if (timer2 == null) {
          return;
        }
        clearTimeout(timer2);
        timer2 = null;
      };
      return { promise, cancel };
    })();
    const runningFetch = (function () {
      return __awaiter14(this, void 0, void 0, function* () {
        for (let attempt = 0; attempt < attemptLimit; attempt++) {
          let response = null;
          try {
            response = yield getUrl(url, options);
            if (attempt < attemptLimit) {
              if (response.statusCode === 301 || response.statusCode === 302) {
                const location = response.headers.location || "";
                if (options.method === "GET" && location.match(/^https:/)) {
                  url = response.headers.location;
                  continue;
                }
              } else if (response.statusCode === 429) {
                let tryAgain = true;
                if (throttleCallback) {
                  tryAgain = yield throttleCallback(attempt, url);
                }
                if (tryAgain) {
                  let stall3 = 0;
                  const retryAfter = response.headers["retry-after"];
                  if (
                    typeof retryAfter === "string" &&
                    retryAfter.match(/^[1-9][0-9]*$/)
                  ) {
                    stall3 = parseInt(retryAfter) * 1e3;
                  } else {
                    stall3 =
                      throttleSlotInterval *
                      parseInt(String(Math.random() * Math.pow(2, attempt)));
                  }
                  yield staller(stall3);
                  continue;
                }
              }
            }
          } catch (error) {
            response = error.response;
            if (response == null) {
              runningTimeout.cancel();
              logger61.throwError(
                "missing response",
                Logger22.errors.SERVER_ERROR,
                {
                  requestBody: bodyify(
                    options.body,
                    flatHeaders["content-type"]
                  ),
                  requestMethod: options.method,
                  serverError: error,
                  url,
                }
              );
            }
          }
          let body2 = response.body;
          if (allow304 && response.statusCode === 304) {
            body2 = null;
          } else if (response.statusCode < 200 || response.statusCode >= 300) {
            runningTimeout.cancel();
            logger61.throwError("bad response", Logger22.errors.SERVER_ERROR, {
              status: response.statusCode,
              headers: response.headers,
              body: bodyify(
                body2,
                response.headers ? response.headers["content-type"] : null
              ),
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url,
            });
          }
          if (processFunc) {
            try {
              const result = yield processFunc(body2, response);
              runningTimeout.cancel();
              return result;
            } catch (error) {
              if (error.throttleRetry && attempt < attemptLimit) {
                let tryAgain = true;
                if (throttleCallback) {
                  tryAgain = yield throttleCallback(attempt, url);
                }
                if (tryAgain) {
                  const timeout2 =
                    throttleSlotInterval *
                    parseInt(String(Math.random() * Math.pow(2, attempt)));
                  yield staller(timeout2);
                  continue;
                }
              }
              runningTimeout.cancel();
              logger61.throwError(
                "processing response error",
                Logger22.errors.SERVER_ERROR,
                {
                  body: bodyify(
                    body2,
                    response.headers ? response.headers["content-type"] : null
                  ),
                  error,
                  requestBody: bodyify(
                    options.body,
                    flatHeaders["content-type"]
                  ),
                  requestMethod: options.method,
                  url,
                }
              );
            }
          }
          runningTimeout.cancel();
          return body2;
        }
        return logger61.throwError(
          "failed response",
          Logger22.errors.SERVER_ERROR,
          {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url,
          }
        );
      });
    })();
    return Promise.race([runningTimeout.promise, runningFetch]);
  }
  function fetchJson(connection, json, processFunc) {
    let processJsonFunc = (value, response) => {
      let result = null;
      if (value != null) {
        try {
          result = JSON.parse(toUtf8String(value));
        } catch (error) {
          logger61.throwError("invalid JSON", Logger22.errors.SERVER_ERROR, {
            body: value,
            error,
          });
        }
      }
      if (processFunc) {
        result = processFunc(result, response);
      }
      return result;
    };
    let body = null;
    if (json != null) {
      body = toUtf8Bytes(json);
      const updated =
        typeof connection === "string"
          ? { url: connection }
          : shallowCopy5(connection);
      if (updated.headers) {
        const hasContentType =
          Object.keys(updated.headers).filter(
            (k2) => k2.toLowerCase() === "content-type"
          ).length !== 0;
        if (!hasContentType) {
          updated.headers = shallowCopy5(updated.headers);
          updated.headers["content-type"] = "application/json";
        }
      } else {
        updated.headers = { "content-type": "application/json" };
      }
      connection = updated;
    }
    return _fetchData(connection, body, processJsonFunc);
  }
  function poll(func, options) {
    if (!options) {
      options = {};
    }
    options = shallowCopy5(options);
    if (options.floor == null) {
      options.floor = 0;
    }
    if (options.ceiling == null) {
      options.ceiling = 1e4;
    }
    if (options.interval == null) {
      options.interval = 250;
    }
    return new Promise(function (resolve2, reject) {
      let timer2 = null;
      let done = false;
      const cancel = () => {
        if (done) {
          return false;
        }
        done = true;
        if (timer2) {
          clearTimeout(timer2);
        }
        return true;
      };
      if (options.timeout) {
        timer2 = setTimeout(() => {
          if (cancel()) {
            reject(new Error("timeout"));
          }
        }, options.timeout);
      }
      const retryLimit = options.retryLimit;
      let attempt = 0;
      function check() {
        return func().then(
          function (result) {
            if (result !== void 0) {
              if (cancel()) {
                resolve2(result);
              }
            } else if (options.oncePoll) {
              options.oncePoll.once("poll", check);
            } else if (options.onceBlock) {
              options.onceBlock.once("block", check);
            } else if (!done) {
              attempt++;
              if (attempt > retryLimit) {
                if (cancel()) {
                  reject(new Error("retry limit reached"));
                }
                return;
              }
              let timeout =
                options.interval *
                parseInt(String(Math.random() * Math.pow(2, attempt)));
              if (timeout < options.floor) {
                timeout = options.floor;
              }
              if (timeout > options.ceiling) {
                timeout = options.ceiling;
              }
              setTimeout(check, timeout);
            }
            return null;
          },
          function (error) {
            if (cancel()) {
              reject(error);
            }
          }
        );
      }
      check();
    });
  }
  var __awaiter14, logger61;
  var init_lib81 = __esm({
    "node_modules/@ethersproject/web/lib.esm/index.js"() {
      "use strict";
      init_lib77();
      init_lib79();
      init_lib80();
      init_lib19();
      init_lib78();
      init_version76();
      init_geturl();
      __awaiter14 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger61 = new Logger22(version76);
    },
  });

  // node_modules/bech32/index.js
  var require_bech32 = __commonJS({
    "node_modules/bech32/index.js"(exports, module) {
      "use strict";
      var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      var ALPHABET_MAP = {};
      for (z2 = 0; z2 < ALPHABET.length; z2++) {
        x2 = ALPHABET.charAt(z2);
        if (ALPHABET_MAP[x2] !== void 0)
          throw new TypeError(x2 + " is ambiguous");
        ALPHABET_MAP[x2] = z2;
      }
      var x2;
      var z2;
      function polymodStep(pre) {
        var b2 = pre >> 25;
        return (
          ((pre & 33554431) << 5) ^
          (-((b2 >> 0) & 1) & 996825010) ^
          (-((b2 >> 1) & 1) & 642813549) ^
          (-((b2 >> 2) & 1) & 513874426) ^
          (-((b2 >> 3) & 1) & 1027748829) ^
          (-((b2 >> 4) & 1) & 705979059)
        );
      }
      function prefixChk(prefix) {
        var chk = 1;
        for (var i = 0; i < prefix.length; ++i) {
          var c2 = prefix.charCodeAt(i);
          if (c2 < 33 || c2 > 126) return "Invalid prefix (" + prefix + ")";
          chk = polymodStep(chk) ^ (c2 >> 5);
        }
        chk = polymodStep(chk);
        for (i = 0; i < prefix.length; ++i) {
          var v2 = prefix.charCodeAt(i);
          chk = polymodStep(chk) ^ (v2 & 31);
        }
        return chk;
      }
      function encode4(prefix, words2, LIMIT) {
        LIMIT = LIMIT || 90;
        if (prefix.length + 7 + words2.length > LIMIT)
          throw new TypeError("Exceeds length limit");
        prefix = prefix.toLowerCase();
        var chk = prefixChk(prefix);
        if (typeof chk === "string") throw new Error(chk);
        var result = prefix + "1";
        for (var i = 0; i < words2.length; ++i) {
          var x3 = words2[i];
          if (x3 >> 5 !== 0) throw new Error("Non 5-bit word");
          chk = polymodStep(chk) ^ x3;
          result += ALPHABET.charAt(x3);
        }
        for (i = 0; i < 6; ++i) {
          chk = polymodStep(chk);
        }
        chk ^= 1;
        for (i = 0; i < 6; ++i) {
          var v2 = (chk >> ((5 - i) * 5)) & 31;
          result += ALPHABET.charAt(v2);
        }
        return result;
      }
      function __decode(str, LIMIT) {
        LIMIT = LIMIT || 90;
        if (str.length < 8) return str + " too short";
        if (str.length > LIMIT) return "Exceeds length limit";
        var lowered = str.toLowerCase();
        var uppered = str.toUpperCase();
        if (str !== lowered && str !== uppered)
          return "Mixed-case string " + str;
        str = lowered;
        var split = str.lastIndexOf("1");
        if (split === -1) return "No separator character for " + str;
        if (split === 0) return "Missing prefix for " + str;
        var prefix = str.slice(0, split);
        var wordChars = str.slice(split + 1);
        if (wordChars.length < 6) return "Data too short";
        var chk = prefixChk(prefix);
        if (typeof chk === "string") return chk;
        var words2 = [];
        for (var i = 0; i < wordChars.length; ++i) {
          var c2 = wordChars.charAt(i);
          var v2 = ALPHABET_MAP[c2];
          if (v2 === void 0) return "Unknown character " + c2;
          chk = polymodStep(chk) ^ v2;
          if (i + 6 >= wordChars.length) continue;
          words2.push(v2);
        }
        if (chk !== 1) return "Invalid checksum for " + str;
        return { prefix, words: words2 };
      }
      function decodeUnsafe() {
        var res = __decode.apply(null, arguments);
        if (typeof res === "object") return res;
      }
      function decode3(str) {
        var res = __decode.apply(null, arguments);
        if (typeof res === "object") return res;
        throw new Error(res);
      }
      function convert(data, inBits, outBits, pad) {
        var value = 0;
        var bits = 0;
        var maxV = (1 << outBits) - 1;
        var result = [];
        for (var i = 0; i < data.length; ++i) {
          value = (value << inBits) | data[i];
          bits += inBits;
          while (bits >= outBits) {
            bits -= outBits;
            result.push((value >> bits) & maxV);
          }
        }
        if (pad) {
          if (bits > 0) {
            result.push((value << (outBits - bits)) & maxV);
          }
        } else {
          if (bits >= inBits) return "Excess padding";
          if ((value << (outBits - bits)) & maxV) return "Non-zero padding";
        }
        return result;
      }
      function toWordsUnsafe(bytes) {
        var res = convert(bytes, 8, 5, true);
        if (Array.isArray(res)) return res;
      }
      function toWords(bytes) {
        var res = convert(bytes, 8, 5, true);
        if (Array.isArray(res)) return res;
        throw new Error(res);
      }
      function fromWordsUnsafe(words2) {
        var res = convert(words2, 5, 8, false);
        if (Array.isArray(res)) return res;
      }
      function fromWords(words2) {
        var res = convert(words2, 5, 8, false);
        if (Array.isArray(res)) return res;
        throw new Error(res);
      }
      module.exports = {
        decodeUnsafe,
        decode: decode3,
        encode: encode4,
        toWordsUnsafe,
        toWords,
        fromWordsUnsafe,
        fromWords,
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/_version.js
  var version77;
  var init_version77 = __esm({
    "node_modules/@ethersproject/providers/lib.esm/_version.js"() {
      version77 = "providers/5.5.3";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version78;
  var init_version78 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version78 = "transactions/5.5.0";
    },
  });

  // node_modules/@ethersproject/providers/node_modules/@ethersproject/transactions/lib.esm/index.js
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber(value) {
    if (value === "0x") {
      return Zero2;
    }
    return BigNumber.from(value);
  }
  function computeAddress4(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(
      hexDataSlice7(keccak256(hexDataSlice7(publicKey, 1)), 12)
    );
  }
  function recoverAddress2(digest, signature2) {
    return computeAddress4(recoverPublicKey(arrayify17(digest), signature2));
  }
  function formatNumber2(value, name2) {
    const result = stripZeros6(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger62.throwArgumentError(
        "invalid length for " + name2,
        "transaction:" + name2,
        value
      );
    }
    return result;
  }
  function accessSetify3(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength6(storageKey) !== 32) {
          logger62.throwArgumentError(
            "invalid access list storageKey",
            `accessList[${addr}:${index}]`,
            storageKey
          );
        }
        return storageKey.toLowerCase();
      }),
    };
  }
  function accessListify3(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger62.throwArgumentError(
              "access list expected to be [ address, storageKeys[] ]",
              `value[${index}]`,
              set
            );
          }
          return accessSetify3(set[0], set[1]);
        }
        return accessSetify3(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify3(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a2, b2) => a2.address.localeCompare(b2.address));
    return result;
  }
  function formatAccessList2(value) {
    return accessListify3(value).map((set) => [set.address, set.storageKeys]);
  }
  function _serializeEip15592(transaction, signature2) {
    if (transaction.gasPrice != null) {
      const gasPrice = BigNumber.from(transaction.gasPrice);
      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
      if (!gasPrice.eq(maxFeePerGas)) {
        logger62.throwArgumentError(
          "mismatch EIP-1559 gasPrice != maxFeePerGas",
          "tx",
          {
            gasPrice,
            maxFeePerGas,
          }
        );
      }
    }
    const fields = [
      formatNumber2(transaction.chainId || 0, "chainId"),
      formatNumber2(transaction.nonce || 0, "nonce"),
      formatNumber2(
        transaction.maxPriorityFeePerGas || 0,
        "maxPriorityFeePerGas"
      ),
      formatNumber2(transaction.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber2(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber2(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList2(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature6(signature2);
      fields.push(formatNumber2(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros6(sig.r));
      fields.push(stripZeros6(sig.s));
    }
    return hexConcat7(["0x02", encode(fields)]);
  }
  function _serializeEip29302(transaction, signature2) {
    const fields = [
      formatNumber2(transaction.chainId || 0, "chainId"),
      formatNumber2(transaction.nonce || 0, "nonce"),
      formatNumber2(transaction.gasPrice || 0, "gasPrice"),
      formatNumber2(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber2(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList2(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature6(signature2);
      fields.push(formatNumber2(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros6(sig.r));
      fields.push(stripZeros6(sig.s));
    }
    return hexConcat7(["0x01", encode(fields)]);
  }
  function _parseEipSignature(tx, fields, serialize4) {
    try {
      const recid = handleNumber(fields[0]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error) {
      logger62.throwArgumentError(
        "invalid v for transaction type: 1",
        "v",
        fields[0]
      );
    }
    tx.r = hexZeroPad9(fields[1], 32);
    tx.s = hexZeroPad9(fields[2], 32);
    try {
      const digest = keccak256(serialize4(tx));
      tx.from = recoverAddress2(digest, {
        r: tx.r,
        s: tx.s,
        recoveryParam: tx.v,
      });
    } catch (error) {
      console.log(error);
    }
  }
  function _parseEip1559(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
      logger62.throwArgumentError(
        "invalid component count for transaction type: 2",
        "payload",
        hexlify13(payload)
      );
    }
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
      type: 2,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      maxPriorityFeePerGas,
      maxFeePerGas,
      gasPrice: null,
      gasLimit: handleNumber(transaction[4]),
      to: handleAddress(transaction[5]),
      value: handleNumber(transaction[6]),
      data: transaction[7],
      accessList: accessListify3(transaction[8]),
    };
    if (transaction.length === 9) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip15592);
    return tx;
  }
  function _parseEip2930(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger62.throwArgumentError(
        "invalid component count for transaction type: 1",
        "payload",
        hexlify13(payload)
      );
    }
    const tx = {
      type: 1,
      chainId: handleNumber(transaction[0]).toNumber(),
      nonce: handleNumber(transaction[1]).toNumber(),
      gasPrice: handleNumber(transaction[2]),
      gasLimit: handleNumber(transaction[3]),
      to: handleAddress(transaction[4]),
      value: handleNumber(transaction[5]),
      data: transaction[6],
      accessList: accessListify3(transaction[7]),
    };
    if (transaction.length === 8) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip29302);
    return tx;
  }
  function _parse(rawTransaction) {
    const transaction = decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger62.throwArgumentError(
        "invalid raw transaction",
        "rawTransaction",
        rawTransaction
      );
    }
    const tx = {
      nonce: handleNumber(transaction[0]).toNumber(),
      gasPrice: handleNumber(transaction[1]),
      gasLimit: handleNumber(transaction[2]),
      to: handleAddress(transaction[3]),
      value: handleNumber(transaction[4]),
      data: transaction[5],
      chainId: 0,
    };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
      console.log(error);
      return tx;
    }
    tx.r = hexZeroPad9(transaction[7], 32);
    tx.s = hexZeroPad9(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify13(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest = keccak256(encode(raw));
      try {
        tx.from = recoverAddress2(digest, {
          r: hexlify13(tx.r),
          s: hexlify13(tx.s),
          recoveryParam,
        });
      } catch (error) {
        console.log(error);
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse4(rawTransaction) {
    const payload = arrayify17(rawTransaction);
    if (payload[0] > 127) {
      return _parse(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip2930(payload);
      case 2:
        return _parseEip1559(payload);
      default:
        break;
    }
    return logger62.throwError(
      `unsupported transaction type: ${payload[0]}`,
      Logger20.errors.UNSUPPORTED_OPERATION,
      {
        operation: "parseTransaction",
        transactionType: payload[0],
      }
    );
  }
  var logger62, TransactionTypes5;
  var init_lib82 = __esm({
    "node_modules/@ethersproject/providers/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib3();
      init_lib73();
      init_lib16();
      init_lib11();
      init_lib14();
      init_lib37();
      init_lib71();
      init_version78();
      logger62 = new Logger20(version78);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes5 || (TransactionTypes5 = {}));
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/formatter.js
  function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
  }
  function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
  }
  function showThrottleMessage() {
    if (throttleMessage) {
      return;
    }
    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log(
      "The default API keys for each service are provided as a highly-throttled,"
    );
    console.log(
      "community resource for low-traffic projects and early prototyping."
    );
    console.log("");
    console.log(
      "While your application will continue to function, we highly recommended"
    );
    console.log(
      "signing up for your own API keys to improve performance, increase your"
    );
    console.log(
      "request rate/limit and enable other perks, such as metrics and advanced APIs."
    );
    console.log("");
    console.log("For more details: https://docs.ethers.io/api-keys/");
    console.log("==========================");
  }
  var logger63, Formatter, throttleMessage;
  var init_formatter = __esm({
    "node_modules/@ethersproject/providers/lib.esm/formatter.js"() {
      "use strict";
      init_lib15();
      init_lib3();
      init_lib73();
      init_lib16();
      init_lib74();
      init_lib82();
      init_lib71();
      init_version77();
      logger63 = new Logger20(version77);
      Formatter = class {
        constructor() {
          logger63.checkNew(new.target, Formatter);
          this.formats = this.getDefaultFormats();
        }
        getDefaultFormats() {
          const formats = {};
          const address = this.address.bind(this);
          const bigNumber = this.bigNumber.bind(this);
          const blockTag = this.blockTag.bind(this);
          const data = this.data.bind(this);
          const hash4 = this.hash.bind(this);
          const hex = this.hex.bind(this);
          const number = this.number.bind(this);
          const type = this.type.bind(this);
          const strictData = (v2) => {
            return this.data(v2, true);
          };
          formats.transaction = {
            hash: hash4,
            type,
            accessList: Formatter.allowNull(this.accessList.bind(this), null),
            blockHash: Formatter.allowNull(hash4, null),
            blockNumber: Formatter.allowNull(number, null),
            transactionIndex: Formatter.allowNull(number, null),
            confirmations: Formatter.allowNull(number, null),
            from: address,
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            gasLimit: bigNumber,
            to: Formatter.allowNull(address, null),
            value: bigNumber,
            nonce: number,
            data,
            r: Formatter.allowNull(this.uint256),
            s: Formatter.allowNull(this.uint256),
            v: Formatter.allowNull(number),
            creates: Formatter.allowNull(address, null),
            raw: Formatter.allowNull(data),
          };
          formats.transactionRequest = {
            from: Formatter.allowNull(address),
            nonce: Formatter.allowNull(number),
            gasLimit: Formatter.allowNull(bigNumber),
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            to: Formatter.allowNull(address),
            value: Formatter.allowNull(bigNumber),
            data: Formatter.allowNull(strictData),
            type: Formatter.allowNull(number),
            accessList: Formatter.allowNull(this.accessList.bind(this), null),
          };
          formats.receiptLog = {
            transactionIndex: number,
            blockNumber: number,
            transactionHash: hash4,
            address,
            topics: Formatter.arrayOf(hash4),
            data,
            logIndex: number,
            blockHash: hash4,
          };
          formats.receipt = {
            to: Formatter.allowNull(this.address, null),
            from: Formatter.allowNull(this.address, null),
            contractAddress: Formatter.allowNull(address, null),
            transactionIndex: number,
            root: Formatter.allowNull(hex),
            gasUsed: bigNumber,
            logsBloom: Formatter.allowNull(data),
            blockHash: hash4,
            transactionHash: hash4,
            logs: Formatter.arrayOf(this.receiptLog.bind(this)),
            blockNumber: number,
            confirmations: Formatter.allowNull(number, null),
            cumulativeGasUsed: bigNumber,
            effectiveGasPrice: Formatter.allowNull(bigNumber),
            status: Formatter.allowNull(number),
            type,
          };
          formats.block = {
            hash: hash4,
            parentHash: hash4,
            number,
            timestamp: number,
            nonce: Formatter.allowNull(hex),
            difficulty: this.difficulty.bind(this),
            gasLimit: bigNumber,
            gasUsed: bigNumber,
            miner: address,
            extraData: data,
            transactions: Formatter.allowNull(Formatter.arrayOf(hash4)),
            baseFeePerGas: Formatter.allowNull(bigNumber),
          };
          formats.blockWithTransactions = shallowCopy4(formats.block);
          formats.blockWithTransactions.transactions = Formatter.allowNull(
            Formatter.arrayOf(this.transactionResponse.bind(this))
          );
          formats.filter = {
            fromBlock: Formatter.allowNull(blockTag, void 0),
            toBlock: Formatter.allowNull(blockTag, void 0),
            blockHash: Formatter.allowNull(hash4, void 0),
            address: Formatter.allowNull(address, void 0),
            topics: Formatter.allowNull(this.topics.bind(this), void 0),
          };
          formats.filterLog = {
            blockNumber: Formatter.allowNull(number),
            blockHash: Formatter.allowNull(hash4),
            transactionIndex: number,
            removed: Formatter.allowNull(this.boolean.bind(this)),
            address,
            data: Formatter.allowFalsish(data, "0x"),
            topics: Formatter.arrayOf(hash4),
            transactionHash: hash4,
            logIndex: number,
          };
          return formats;
        }
        accessList(accessList) {
          return accessListify3(accessList || []);
        }
        number(number) {
          if (number === "0x") {
            return 0;
          }
          return BigNumber.from(number).toNumber();
        }
        type(number) {
          if (number === "0x" || number == null) {
            return 0;
          }
          return BigNumber.from(number).toNumber();
        }
        bigNumber(value) {
          return BigNumber.from(value);
        }
        boolean(value) {
          if (typeof value === "boolean") {
            return value;
          }
          if (typeof value === "string") {
            value = value.toLowerCase();
            if (value === "true") {
              return true;
            }
            if (value === "false") {
              return false;
            }
          }
          throw new Error("invalid boolean - " + value);
        }
        hex(value, strict) {
          if (typeof value === "string") {
            if (!strict && value.substring(0, 2) !== "0x") {
              value = "0x" + value;
            }
            if (isHexString18(value)) {
              return value.toLowerCase();
            }
          }
          return logger63.throwArgumentError("invalid hash", "value", value);
        }
        data(value, strict) {
          const result = this.hex(value, strict);
          if (result.length % 2 !== 0) {
            throw new Error("invalid data; odd-length - " + value);
          }
          return result;
        }
        address(value) {
          return getAddress(value);
        }
        callAddress(value) {
          if (!isHexString18(value, 32)) {
            return null;
          }
          const address = getAddress(hexDataSlice7(value, 12));
          return address === AddressZero ? null : address;
        }
        contractAddress(value) {
          return getContractAddress(value);
        }
        blockTag(blockTag) {
          if (blockTag == null) {
            return "latest";
          }
          if (blockTag === "earliest") {
            return "0x0";
          }
          if (blockTag === "latest" || blockTag === "pending") {
            return blockTag;
          }
          if (typeof blockTag === "number" || isHexString18(blockTag)) {
            return hexValue(blockTag);
          }
          throw new Error("invalid blockTag");
        }
        hash(value, strict) {
          const result = this.hex(value, strict);
          if (hexDataLength6(result) !== 32) {
            return logger63.throwArgumentError("invalid hash", "value", value);
          }
          return result;
        }
        difficulty(value) {
          if (value == null) {
            return null;
          }
          const v2 = BigNumber.from(value);
          try {
            return v2.toNumber();
          } catch (error) {}
          return null;
        }
        uint256(value) {
          if (!isHexString18(value)) {
            throw new Error("invalid uint256");
          }
          return hexZeroPad9(value, 32);
        }
        _block(value, format) {
          if (value.author != null && value.miner == null) {
            value.miner = value.author;
          }
          const difficulty =
            value._difficulty != null ? value._difficulty : value.difficulty;
          const result = Formatter.check(format, value);
          result._difficulty =
            difficulty == null ? null : BigNumber.from(difficulty);
          return result;
        }
        block(value) {
          return this._block(value, this.formats.block);
        }
        blockWithTransactions(value) {
          return this._block(value, this.formats.blockWithTransactions);
        }
        transactionRequest(value) {
          return Formatter.check(this.formats.transactionRequest, value);
        }
        transactionResponse(transaction) {
          if (transaction.gas != null && transaction.gasLimit == null) {
            transaction.gasLimit = transaction.gas;
          }
          if (transaction.to && BigNumber.from(transaction.to).isZero()) {
            transaction.to = "0x0000000000000000000000000000000000000000";
          }
          if (transaction.input != null && transaction.data == null) {
            transaction.data = transaction.input;
          }
          if (transaction.to == null && transaction.creates == null) {
            transaction.creates = this.contractAddress(transaction);
          }
          if (
            (transaction.type === 1 || transaction.type === 2) &&
            transaction.accessList == null
          ) {
            transaction.accessList = [];
          }
          const result = Formatter.check(this.formats.transaction, transaction);
          if (transaction.chainId != null) {
            let chainId = transaction.chainId;
            if (isHexString18(chainId)) {
              chainId = BigNumber.from(chainId).toNumber();
            }
            result.chainId = chainId;
          } else {
            let chainId = transaction.networkId;
            if (chainId == null && result.v == null) {
              chainId = transaction.chainId;
            }
            if (isHexString18(chainId)) {
              chainId = BigNumber.from(chainId).toNumber();
            }
            if (typeof chainId !== "number" && result.v != null) {
              chainId = (result.v - 35) / 2;
              if (chainId < 0) {
                chainId = 0;
              }
              chainId = parseInt(chainId);
            }
            if (typeof chainId !== "number") {
              chainId = 0;
            }
            result.chainId = chainId;
          }
          if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
            result.blockHash = null;
          }
          return result;
        }
        transaction(value) {
          return parse4(value);
        }
        receiptLog(value) {
          return Formatter.check(this.formats.receiptLog, value);
        }
        receipt(value) {
          const result = Formatter.check(this.formats.receipt, value);
          if (result.root != null) {
            if (result.root.length <= 4) {
              const value2 = BigNumber.from(result.root).toNumber();
              if (value2 === 0 || value2 === 1) {
                if (result.status != null && result.status !== value2) {
                  logger63.throwArgumentError(
                    "alt-root-status/status mismatch",
                    "value",
                    { root: result.root, status: result.status }
                  );
                }
                result.status = value2;
                delete result.root;
              } else {
                logger63.throwArgumentError(
                  "invalid alt-root-status",
                  "value.root",
                  result.root
                );
              }
            } else if (result.root.length !== 66) {
              logger63.throwArgumentError(
                "invalid root hash",
                "value.root",
                result.root
              );
            }
          }
          if (result.status != null) {
            result.byzantium = true;
          }
          return result;
        }
        topics(value) {
          if (Array.isArray(value)) {
            return value.map((v2) => this.topics(v2));
          } else if (value != null) {
            return this.hash(value, true);
          }
          return null;
        }
        filter(value) {
          return Formatter.check(this.formats.filter, value);
        }
        filterLog(value) {
          return Formatter.check(this.formats.filterLog, value);
        }
        static check(format, object) {
          const result = {};
          for (const key2 in format) {
            try {
              const value = format[key2](object[key2]);
              if (value !== void 0) {
                result[key2] = value;
              }
            } catch (error) {
              error.checkKey = key2;
              error.checkValue = object[key2];
              throw error;
            }
          }
          return result;
        }
        static allowNull(format, nullValue) {
          return function (value) {
            if (value == null) {
              return nullValue;
            }
            return format(value);
          };
        }
        static allowFalsish(format, replaceValue) {
          return function (value) {
            if (!value) {
              return replaceValue;
            }
            return format(value);
          };
        }
        static arrayOf(format) {
          return function (array) {
            if (!Array.isArray(array)) {
              throw new Error("not an array");
            }
            const result = [];
            array.forEach(function (value) {
              result.push(format(value));
            });
            return result;
          };
        }
      };
      throttleMessage = false;
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/base-provider.js
  function checkTopic(topic) {
    if (topic == null) {
      return "null";
    }
    if (hexDataLength6(topic) !== 32) {
      logger64.throwArgumentError("invalid topic", "topic", topic);
    }
    return topic.toLowerCase();
  }
  function serializeTopics(topics) {
    topics = topics.slice();
    while (topics.length > 0 && topics[topics.length - 1] == null) {
      topics.pop();
    }
    return topics
      .map((topic) => {
        if (Array.isArray(topic)) {
          const unique = {};
          topic.forEach((topic2) => {
            unique[checkTopic(topic2)] = true;
          });
          const sorted = Object.keys(unique);
          sorted.sort();
          return sorted.join("|");
        } else {
          return checkTopic(topic);
        }
      })
      .join("&");
  }
  function deserializeTopics(data) {
    if (data === "") {
      return [];
    }
    return data.split(/&/g).map((topic) => {
      if (topic === "") {
        return [];
      }
      const comps = topic.split("|").map((topic2) => {
        return topic2 === "null" ? null : topic2;
      });
      return comps.length === 1 ? comps[0] : comps;
    });
  }
  function getEventTag2(eventName) {
    if (typeof eventName === "string") {
      eventName = eventName.toLowerCase();
      if (hexDataLength6(eventName) === 32) {
        return "tx:" + eventName;
      }
      if (eventName.indexOf(":") === -1) {
        return eventName;
      }
    } else if (Array.isArray(eventName)) {
      return "filter:*:" + serializeTopics(eventName);
    } else if (ForkEvent.isForkEvent(eventName)) {
      logger64.warn("not implemented");
      throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") {
      return (
        "filter:" +
        (eventName.address || "*") +
        ":" +
        serializeTopics(eventName.topics || [])
      );
    }
    throw new Error("invalid event - " + eventName);
  }
  function getTime() {
    return new Date().getTime();
  }
  function stall(duration) {
    return new Promise((resolve2) => {
      setTimeout(resolve2, duration);
    });
  }
  function bytes32ify(value) {
    return hexZeroPad9(BigNumber.from(value).toHexString(), 32);
  }
  function base58Encode(data) {
    return Base58.encode(
      concat9([data, hexDataSlice7(sha256(sha256(data)), 0, 4)])
    );
  }
  function _parseString(result) {
    try {
      return toUtf8String(_parseBytes(result));
    } catch (error) {}
    return null;
  }
  function _parseBytes(result) {
    if (result === "0x") {
      return null;
    }
    const offset = BigNumber.from(hexDataSlice7(result, 0, 32)).toNumber();
    const length = BigNumber.from(
      hexDataSlice7(result, offset, offset + 32)
    ).toNumber();
    return hexDataSlice7(result, offset + 32, offset + 32 + length);
  }
  function getIpfsLink(link) {
    if (link.match(/^ipfs:\/\/ipfs\//i)) {
      link = link.substring(12);
    } else if (link.match(/^ipfs:\/\//i)) {
      link = link.substring(7);
    } else {
      logger64.throwArgumentError("unsupported IPFS format", "link", link);
    }
    return `https://gateway.ipfs.io/ipfs/${link}`;
  }
  var import_bech32,
    __awaiter15,
    logger64,
    PollableEvents,
    Event,
    coinInfos,
    matcherIpfs,
    matchers,
    Resolver2,
    defaultFormatter,
    nextPollId,
    BaseProvider;
  var init_base_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/base-provider.js"() {
      "use strict";
      init_lib27();
      init_lib45();
      init_lib3();
      init_lib73();
      init_lib16();
      init_lib23();
      init_lib72();
      init_lib74();
      init_lib52();
      init_lib19();
      init_lib81();
      import_bech32 = __toESM(require_bech32());
      init_lib71();
      init_version77();
      init_formatter();
      __awaiter15 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger64 = new Logger20(version77);
      PollableEvents = ["block", "network", "pending", "poll"];
      Event = class {
        constructor(tag, listener, once) {
          defineReadOnly12(this, "tag", tag);
          defineReadOnly12(this, "listener", listener);
          defineReadOnly12(this, "once", once);
        }
        get event() {
          switch (this.type) {
            case "tx":
              return this.hash;
            case "filter":
              return this.filter;
          }
          return this.tag;
        }
        get type() {
          return this.tag.split(":")[0];
        }
        get hash() {
          const comps = this.tag.split(":");
          if (comps[0] !== "tx") {
            return null;
          }
          return comps[1];
        }
        get filter() {
          const comps = this.tag.split(":");
          if (comps[0] !== "filter") {
            return null;
          }
          const address = comps[1];
          const topics = deserializeTopics(comps[2]);
          const filter = {};
          if (topics.length > 0) {
            filter.topics = topics;
          }
          if (address && address !== "*") {
            filter.address = address;
          }
          return filter;
        }
        pollable() {
          return (
            this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0
          );
        }
      };
      coinInfos = {
        0: { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
        2: { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
        3: { symbol: "doge", p2pkh: 30, p2sh: 22 },
        60: { symbol: "eth", ilk: "eth" },
        61: { symbol: "etc", ilk: "eth" },
        700: { symbol: "xdai", ilk: "eth" },
      };
      matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
      matchers = [
        new RegExp("^(https)://(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
      ];
      Resolver2 = class {
        constructor(provider, address, name2, resolvedAddress) {
          defineReadOnly12(this, "provider", provider);
          defineReadOnly12(this, "name", name2);
          defineReadOnly12(
            this,
            "address",
            provider.formatter.address(address)
          );
          defineReadOnly12(this, "_resolvedAddress", resolvedAddress);
        }
        _fetchBytes(selector, parameters) {
          return __awaiter15(this, void 0, void 0, function* () {
            const tx = {
              to: this.address,
              data: hexConcat7([
                selector,
                namehash(this.name),
                parameters || "0x",
              ]),
            };
            try {
              return _parseBytes(yield this.provider.call(tx));
            } catch (error) {
              if (error.code === Logger20.errors.CALL_EXCEPTION) {
                return null;
              }
              return null;
            }
          });
        }
        _getAddress(coinType, hexBytes) {
          const coinInfo = coinInfos[String(coinType)];
          if (coinInfo == null) {
            logger64.throwError(
              `unsupported coin type: ${coinType}`,
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: `getAddress(${coinType})`,
              }
            );
          }
          if (coinInfo.ilk === "eth") {
            return this.provider.formatter.address(hexBytes);
          }
          const bytes = arrayify17(hexBytes);
          if (coinInfo.p2pkh != null) {
            const p2pkh = hexBytes.match(
              /^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/
            );
            if (p2pkh) {
              const length = parseInt(p2pkh[1], 16);
              if (
                p2pkh[2].length === length * 2 &&
                length >= 1 &&
                length <= 75
              ) {
                return base58Encode(
                  concat9([[coinInfo.p2pkh], "0x" + p2pkh[2]])
                );
              }
            }
          }
          if (coinInfo.p2sh != null) {
            const p2sh = hexBytes.match(
              /^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/
            );
            if (p2sh) {
              const length = parseInt(p2sh[1], 16);
              if (
                p2sh[2].length === length * 2 &&
                length >= 1 &&
                length <= 75
              ) {
                return base58Encode(concat9([[coinInfo.p2sh], "0x" + p2sh[2]]));
              }
            }
          }
          if (coinInfo.prefix != null) {
            const length = bytes[1];
            let version89 = bytes[0];
            if (version89 === 0) {
              if (length !== 20 && length !== 32) {
                version89 = -1;
              }
            } else {
              version89 = -1;
            }
            if (
              version89 >= 0 &&
              bytes.length === 2 + length &&
              length >= 1 &&
              length <= 75
            ) {
              const words2 = import_bech32.default.toWords(bytes.slice(2));
              words2.unshift(version89);
              return import_bech32.default.encode(coinInfo.prefix, words2);
            }
          }
          return null;
        }
        getAddress(coinType) {
          return __awaiter15(this, void 0, void 0, function* () {
            if (coinType == null) {
              coinType = 60;
            }
            if (coinType === 60) {
              try {
                const transaction = {
                  to: this.address,
                  data: "0x3b3b57de" + namehash(this.name).substring(2),
                };
                const hexBytes2 = yield this.provider.call(transaction);
                if (hexBytes2 === "0x" || hexBytes2 === HashZero) {
                  return null;
                }
                return this.provider.formatter.callAddress(hexBytes2);
              } catch (error) {
                if (error.code === Logger20.errors.CALL_EXCEPTION) {
                  return null;
                }
                throw error;
              }
            }
            const hexBytes = yield this._fetchBytes(
              "0xf1cb7e06",
              bytes32ify(coinType)
            );
            if (hexBytes == null || hexBytes === "0x") {
              return null;
            }
            const address = this._getAddress(coinType, hexBytes);
            if (address == null) {
              logger64.throwError(
                `invalid or unsupported coin data`,
                Logger20.errors.UNSUPPORTED_OPERATION,
                {
                  operation: `getAddress(${coinType})`,
                  coinType,
                  data: hexBytes,
                }
              );
            }
            return address;
          });
        }
        getAvatar() {
          return __awaiter15(this, void 0, void 0, function* () {
            const linkage = [{ type: "name", content: this.name }];
            try {
              const avatar = yield this.getText("avatar");
              if (avatar == null) {
                return null;
              }
              for (let i = 0; i < matchers.length; i++) {
                const match = avatar.match(matchers[i]);
                if (match == null) {
                  continue;
                }
                const scheme = match[1].toLowerCase();
                switch (scheme) {
                  case "https":
                    linkage.push({ type: "url", content: avatar });
                    return { linkage, url: avatar };
                  case "data":
                    linkage.push({ type: "data", content: avatar });
                    return { linkage, url: avatar };
                  case "ipfs":
                    linkage.push({ type: "ipfs", content: avatar });
                    return { linkage, url: getIpfsLink(avatar) };
                  case "erc721":
                  case "erc1155": {
                    const selector =
                      scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                    linkage.push({ type: scheme, content: avatar });
                    const owner =
                      this._resolvedAddress || (yield this.getAddress());
                    const comps = (match[2] || "").split("/");
                    if (comps.length !== 2) {
                      return null;
                    }
                    const addr = yield this.provider.formatter.address(
                      comps[0]
                    );
                    const tokenId = hexZeroPad9(
                      BigNumber.from(comps[1]).toHexString(),
                      32
                    );
                    if (scheme === "erc721") {
                      const tokenOwner = this.provider.formatter.callAddress(
                        yield this.provider.call({
                          to: addr,
                          data: hexConcat7(["0x6352211e", tokenId]),
                        })
                      );
                      if (owner !== tokenOwner) {
                        return null;
                      }
                      linkage.push({ type: "owner", content: tokenOwner });
                    } else if (scheme === "erc1155") {
                      const balance = BigNumber.from(
                        yield this.provider.call({
                          to: addr,
                          data: hexConcat7([
                            "0x00fdd58e",
                            hexZeroPad9(owner, 32),
                            tokenId,
                          ]),
                        })
                      );
                      if (balance.isZero()) {
                        return null;
                      }
                      linkage.push({
                        type: "balance",
                        content: balance.toString(),
                      });
                    }
                    const tx = {
                      to: this.provider.formatter.address(comps[0]),
                      data: hexConcat7([selector, tokenId]),
                    };
                    let metadataUrl = _parseString(
                      yield this.provider.call(tx)
                    );
                    if (metadataUrl == null) {
                      return null;
                    }
                    linkage.push({
                      type: "metadata-url-base",
                      content: metadataUrl,
                    });
                    if (scheme === "erc1155") {
                      metadataUrl = metadataUrl.replace(
                        "{id}",
                        tokenId.substring(2)
                      );
                      linkage.push({
                        type: "metadata-url-expanded",
                        content: metadataUrl,
                      });
                    }
                    if (metadataUrl.match(/^ipfs:/i)) {
                      metadataUrl = getIpfsLink(metadataUrl);
                    }
                    linkage.push({
                      type: "metadata-url",
                      content: metadataUrl,
                    });
                    const metadata = yield fetchJson(metadataUrl);
                    if (!metadata) {
                      return null;
                    }
                    linkage.push({
                      type: "metadata",
                      content: JSON.stringify(metadata),
                    });
                    let imageUrl = metadata.image;
                    if (typeof imageUrl !== "string") {
                      return null;
                    }
                    if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                    } else {
                      const ipfs = imageUrl.match(matcherIpfs);
                      if (ipfs == null) {
                        return null;
                      }
                      linkage.push({ type: "url-ipfs", content: imageUrl });
                      imageUrl = getIpfsLink(imageUrl);
                    }
                    linkage.push({ type: "url", content: imageUrl });
                    return { linkage, url: imageUrl };
                  }
                }
              }
            } catch (error) {}
            return null;
          });
        }
        getContentHash() {
          return __awaiter15(this, void 0, void 0, function* () {
            const hexBytes = yield this._fetchBytes("0xbc1c58d1");
            if (hexBytes == null || hexBytes === "0x") {
              return null;
            }
            const ipfs = hexBytes.match(
              /^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/
            );
            if (ipfs) {
              const length = parseInt(ipfs[3], 16);
              if (ipfs[4].length === length * 2) {
                return "ipfs://" + Base58.encode("0x" + ipfs[1]);
              }
            }
            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
            if (swarm) {
              if (swarm[1].length === 32 * 2) {
                return "bzz://" + swarm[1];
              }
            }
            return logger64.throwError(
              `invalid or unsupported content hash data`,
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "getContentHash()",
                data: hexBytes,
              }
            );
          });
        }
        getText(key2) {
          return __awaiter15(this, void 0, void 0, function* () {
            let keyBytes = toUtf8Bytes(key2);
            keyBytes = concat9([
              bytes32ify(64),
              bytes32ify(keyBytes.length),
              keyBytes,
            ]);
            if (keyBytes.length % 32 !== 0) {
              keyBytes = concat9([
                keyBytes,
                hexZeroPad9("0x", 32 - (key2.length % 32)),
              ]);
            }
            const hexBytes = yield this._fetchBytes(
              "0x59d1d43c",
              hexlify13(keyBytes)
            );
            if (hexBytes == null || hexBytes === "0x") {
              return null;
            }
            return toUtf8String(hexBytes);
          });
        }
      };
      defaultFormatter = null;
      nextPollId = 1;
      BaseProvider = class extends Provider {
        constructor(network) {
          logger64.checkNew(new.target, Provider);
          super();
          this._events = [];
          this._emitted = { block: -2 };
          this.formatter = new.target.getFormatter();
          defineReadOnly12(this, "anyNetwork", network === "any");
          if (this.anyNetwork) {
            network = this.detectNetwork();
          }
          if (network instanceof Promise) {
            this._networkPromise = network;
            network.catch((error) => {});
            this._ready().catch((error) => {});
          } else {
            const knownNetwork = getStatic3(new.target, "getNetwork")(network);
            if (knownNetwork) {
              defineReadOnly12(this, "_network", knownNetwork);
              this.emit("network", knownNetwork, null);
            } else {
              logger64.throwArgumentError(
                "invalid network",
                "network",
                network
              );
            }
          }
          this._maxInternalBlockNumber = -1024;
          this._lastBlockNumber = -2;
          this._pollingInterval = 4e3;
          this._fastQueryDate = 0;
        }
        _ready() {
          return __awaiter15(this, void 0, void 0, function* () {
            if (this._network == null) {
              let network = null;
              if (this._networkPromise) {
                try {
                  network = yield this._networkPromise;
                } catch (error) {}
              }
              if (network == null) {
                network = yield this.detectNetwork();
              }
              if (!network) {
                logger64.throwError(
                  "no network detected",
                  Logger20.errors.UNKNOWN_ERROR,
                  {}
                );
              }
              if (this._network == null) {
                if (this.anyNetwork) {
                  this._network = network;
                } else {
                  defineReadOnly12(this, "_network", network);
                }
                this.emit("network", network, null);
              }
            }
            return this._network;
          });
        }
        get ready() {
          return poll(() => {
            return this._ready().then(
              (network) => {
                return network;
              },
              (error) => {
                if (
                  error.code === Logger20.errors.NETWORK_ERROR &&
                  error.event === "noNetwork"
                ) {
                  return void 0;
                }
                throw error;
              }
            );
          });
        }
        static getFormatter() {
          if (defaultFormatter == null) {
            defaultFormatter = new Formatter();
          }
          return defaultFormatter;
        }
        static getNetwork(network) {
          return getNetwork(network == null ? "homestead" : network);
        }
        _getInternalBlockNumber(maxAge) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this._ready();
            if (maxAge > 0) {
              while (this._internalBlockNumber) {
                const internalBlockNumber = this._internalBlockNumber;
                try {
                  const result = yield internalBlockNumber;
                  if (getTime() - result.respTime <= maxAge) {
                    return result.blockNumber;
                  }
                  break;
                } catch (error) {
                  if (this._internalBlockNumber === internalBlockNumber) {
                    break;
                  }
                }
              }
            }
            const reqTime = getTime();
            const checkInternalBlockNumber = resolveProperties5({
              blockNumber: this.perform("getBlockNumber", {}),
              networkError: this.getNetwork().then(
                (network) => null,
                (error) => error
              ),
            }).then(({ blockNumber, networkError }) => {
              if (networkError) {
                if (this._internalBlockNumber === checkInternalBlockNumber) {
                  this._internalBlockNumber = null;
                }
                throw networkError;
              }
              const respTime = getTime();
              blockNumber = BigNumber.from(blockNumber).toNumber();
              if (blockNumber < this._maxInternalBlockNumber) {
                blockNumber = this._maxInternalBlockNumber;
              }
              this._maxInternalBlockNumber = blockNumber;
              this._setFastBlockNumber(blockNumber);
              return { blockNumber, reqTime, respTime };
            });
            this._internalBlockNumber = checkInternalBlockNumber;
            checkInternalBlockNumber.catch((error) => {
              if (this._internalBlockNumber === checkInternalBlockNumber) {
                this._internalBlockNumber = null;
              }
            });
            return (yield checkInternalBlockNumber).blockNumber;
          });
        }
        poll() {
          return __awaiter15(this, void 0, void 0, function* () {
            const pollId = nextPollId++;
            const runners = [];
            let blockNumber = null;
            try {
              blockNumber = yield this._getInternalBlockNumber(
                100 + this.pollingInterval / 2
              );
            } catch (error) {
              this.emit("error", error);
              return;
            }
            this._setFastBlockNumber(blockNumber);
            this.emit("poll", pollId, blockNumber);
            if (blockNumber === this._lastBlockNumber) {
              this.emit("didPoll", pollId);
              return;
            }
            if (this._emitted.block === -2) {
              this._emitted.block = blockNumber - 1;
            }
            if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
              logger64.warn(
                `network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`
              );
              this.emit(
                "error",
                logger64.makeError(
                  "network block skew detected",
                  Logger20.errors.NETWORK_ERROR,
                  {
                    blockNumber,
                    event: "blockSkew",
                    previousBlockNumber: this._emitted.block,
                  }
                )
              );
              this.emit("block", blockNumber);
            } else {
              for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                this.emit("block", i);
              }
            }
            if (this._emitted.block !== blockNumber) {
              this._emitted.block = blockNumber;
              Object.keys(this._emitted).forEach((key2) => {
                if (key2 === "block") {
                  return;
                }
                const eventBlockNumber = this._emitted[key2];
                if (eventBlockNumber === "pending") {
                  return;
                }
                if (blockNumber - eventBlockNumber > 12) {
                  delete this._emitted[key2];
                }
              });
            }
            if (this._lastBlockNumber === -2) {
              this._lastBlockNumber = blockNumber - 1;
            }
            this._events.forEach((event) => {
              switch (event.type) {
                case "tx": {
                  const hash4 = event.hash;
                  let runner = this.getTransactionReceipt(hash4)
                    .then((receipt) => {
                      if (!receipt || receipt.blockNumber == null) {
                        return null;
                      }
                      this._emitted["t:" + hash4] = receipt.blockNumber;
                      this.emit(hash4, receipt);
                      return null;
                    })
                    .catch((error) => {
                      this.emit("error", error);
                    });
                  runners.push(runner);
                  break;
                }
                case "filter": {
                  const filter = event.filter;
                  filter.fromBlock = this._lastBlockNumber + 1;
                  filter.toBlock = blockNumber;
                  const runner = this.getLogs(filter)
                    .then((logs) => {
                      if (logs.length === 0) {
                        return;
                      }
                      logs.forEach((log2) => {
                        this._emitted["b:" + log2.blockHash] = log2.blockNumber;
                        this._emitted["t:" + log2.transactionHash] =
                          log2.blockNumber;
                        this.emit(filter, log2);
                      });
                    })
                    .catch((error) => {
                      this.emit("error", error);
                    });
                  runners.push(runner);
                  break;
                }
              }
            });
            this._lastBlockNumber = blockNumber;
            Promise.all(runners)
              .then(() => {
                this.emit("didPoll", pollId);
              })
              .catch((error) => {
                this.emit("error", error);
              });
            return;
          });
        }
        resetEventsBlock(blockNumber) {
          this._lastBlockNumber = blockNumber - 1;
          if (this.polling) {
            this.poll();
          }
        }
        get network() {
          return this._network;
        }
        detectNetwork() {
          return __awaiter15(this, void 0, void 0, function* () {
            return logger64.throwError(
              "provider does not support network detection",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "provider.detectNetwork",
              }
            );
          });
        }
        getNetwork() {
          return __awaiter15(this, void 0, void 0, function* () {
            const network = yield this._ready();
            const currentNetwork = yield this.detectNetwork();
            if (network.chainId !== currentNetwork.chainId) {
              if (this.anyNetwork) {
                this._network = currentNetwork;
                this._lastBlockNumber = -2;
                this._fastBlockNumber = null;
                this._fastBlockNumberPromise = null;
                this._fastQueryDate = 0;
                this._emitted.block = -2;
                this._maxInternalBlockNumber = -1024;
                this._internalBlockNumber = null;
                this.emit("network", currentNetwork, network);
                yield stall(0);
                return this._network;
              }
              const error = logger64.makeError(
                "underlying network changed",
                Logger20.errors.NETWORK_ERROR,
                {
                  event: "changed",
                  network,
                  detectedNetwork: currentNetwork,
                }
              );
              this.emit("error", error);
              throw error;
            }
            return network;
          });
        }
        get blockNumber() {
          this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(
            (blockNumber) => {
              this._setFastBlockNumber(blockNumber);
            },
            (error) => {}
          );
          return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
        }
        get polling() {
          return this._poller != null;
        }
        set polling(value) {
          if (value && !this._poller) {
            this._poller = setInterval(() => {
              this.poll();
            }, this.pollingInterval);
            if (!this._bootstrapPoll) {
              this._bootstrapPoll = setTimeout(() => {
                this.poll();
                this._bootstrapPoll = setTimeout(() => {
                  if (!this._poller) {
                    this.poll();
                  }
                  this._bootstrapPoll = null;
                }, this.pollingInterval);
              }, 0);
            }
          } else if (!value && this._poller) {
            clearInterval(this._poller);
            this._poller = null;
          }
        }
        get pollingInterval() {
          return this._pollingInterval;
        }
        set pollingInterval(value) {
          if (
            typeof value !== "number" ||
            value <= 0 ||
            parseInt(String(value)) != value
          ) {
            throw new Error("invalid polling interval");
          }
          this._pollingInterval = value;
          if (this._poller) {
            clearInterval(this._poller);
            this._poller = setInterval(() => {
              this.poll();
            }, this._pollingInterval);
          }
        }
        _getFastBlockNumber() {
          const now2 = getTime();
          if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
            this._fastQueryDate = now2;
            this._fastBlockNumberPromise = this.getBlockNumber().then(
              (blockNumber) => {
                if (
                  this._fastBlockNumber == null ||
                  blockNumber > this._fastBlockNumber
                ) {
                  this._fastBlockNumber = blockNumber;
                }
                return this._fastBlockNumber;
              }
            );
          }
          return this._fastBlockNumberPromise;
        }
        _setFastBlockNumber(blockNumber) {
          if (
            this._fastBlockNumber != null &&
            blockNumber < this._fastBlockNumber
          ) {
            return;
          }
          this._fastQueryDate = getTime();
          if (
            this._fastBlockNumber == null ||
            blockNumber > this._fastBlockNumber
          ) {
            this._fastBlockNumber = blockNumber;
            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
          }
        }
        waitForTransaction(transactionHash, confirmations, timeout) {
          return __awaiter15(this, void 0, void 0, function* () {
            return this._waitForTransaction(
              transactionHash,
              confirmations == null ? 1 : confirmations,
              timeout || 0,
              null
            );
          });
        }
        _waitForTransaction(
          transactionHash,
          confirmations,
          timeout,
          replaceable
        ) {
          return __awaiter15(this, void 0, void 0, function* () {
            const receipt = yield this.getTransactionReceipt(transactionHash);
            if ((receipt ? receipt.confirmations : 0) >= confirmations) {
              return receipt;
            }
            return new Promise((resolve2, reject) => {
              const cancelFuncs = [];
              let done = false;
              const alreadyDone = function () {
                if (done) {
                  return true;
                }
                done = true;
                cancelFuncs.forEach((func) => {
                  func();
                });
                return false;
              };
              const minedHandler = (receipt2) => {
                if (receipt2.confirmations < confirmations) {
                  return;
                }
                if (alreadyDone()) {
                  return;
                }
                resolve2(receipt2);
              };
              this.on(transactionHash, minedHandler);
              cancelFuncs.push(() => {
                this.removeListener(transactionHash, minedHandler);
              });
              if (replaceable) {
                let lastBlockNumber = replaceable.startBlock;
                let scannedBlock = null;
                const replaceHandler = (blockNumber) =>
                  __awaiter15(this, void 0, void 0, function* () {
                    if (done) {
                      return;
                    }
                    yield stall(1e3);
                    this.getTransactionCount(replaceable.from).then(
                      (nonce) =>
                        __awaiter15(this, void 0, void 0, function* () {
                          if (done) {
                            return;
                          }
                          if (nonce <= replaceable.nonce) {
                            lastBlockNumber = blockNumber;
                          } else {
                            {
                              const mined = yield this.getTransaction(
                                transactionHash
                              );
                              if (mined && mined.blockNumber != null) {
                                return;
                              }
                            }
                            if (scannedBlock == null) {
                              scannedBlock = lastBlockNumber - 3;
                              if (scannedBlock < replaceable.startBlock) {
                                scannedBlock = replaceable.startBlock;
                              }
                            }
                            while (scannedBlock <= blockNumber) {
                              if (done) {
                                return;
                              }
                              const block = yield this.getBlockWithTransactions(
                                scannedBlock
                              );
                              for (
                                let ti = 0;
                                ti < block.transactions.length;
                                ti++
                              ) {
                                const tx = block.transactions[ti];
                                if (tx.hash === transactionHash) {
                                  return;
                                }
                                if (
                                  tx.from === replaceable.from &&
                                  tx.nonce === replaceable.nonce
                                ) {
                                  if (done) {
                                    return;
                                  }
                                  const receipt2 =
                                    yield this.waitForTransaction(
                                      tx.hash,
                                      confirmations
                                    );
                                  if (alreadyDone()) {
                                    return;
                                  }
                                  let reason = "replaced";
                                  if (
                                    tx.data === replaceable.data &&
                                    tx.to === replaceable.to &&
                                    tx.value.eq(replaceable.value)
                                  ) {
                                    reason = "repriced";
                                  } else if (
                                    tx.data === "0x" &&
                                    tx.from === tx.to &&
                                    tx.value.isZero()
                                  ) {
                                    reason = "cancelled";
                                  }
                                  reject(
                                    logger64.makeError(
                                      "transaction was replaced",
                                      Logger20.errors.TRANSACTION_REPLACED,
                                      {
                                        cancelled:
                                          reason === "replaced" ||
                                          reason === "cancelled",
                                        reason,
                                        replacement: this._wrapTransaction(tx),
                                        hash: transactionHash,
                                        receipt: receipt2,
                                      }
                                    )
                                  );
                                  return;
                                }
                              }
                              scannedBlock++;
                            }
                          }
                          if (done) {
                            return;
                          }
                          this.once("block", replaceHandler);
                        }),
                      (error) => {
                        if (done) {
                          return;
                        }
                        this.once("block", replaceHandler);
                      }
                    );
                  });
                if (done) {
                  return;
                }
                this.once("block", replaceHandler);
                cancelFuncs.push(() => {
                  this.removeListener("block", replaceHandler);
                });
              }
              if (typeof timeout === "number" && timeout > 0) {
                const timer2 = setTimeout(() => {
                  if (alreadyDone()) {
                    return;
                  }
                  reject(
                    logger64.makeError(
                      "timeout exceeded",
                      Logger20.errors.TIMEOUT,
                      { timeout }
                    )
                  );
                }, timeout);
                if (timer2.unref) {
                  timer2.unref();
                }
                cancelFuncs.push(() => {
                  clearTimeout(timer2);
                });
              }
            });
          });
        }
        getBlockNumber() {
          return __awaiter15(this, void 0, void 0, function* () {
            return this._getInternalBlockNumber(0);
          });
        }
        getGasPrice() {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const result = yield this.perform("getGasPrice", {});
            try {
              return BigNumber.from(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "getGasPrice",
                  result,
                  error,
                }
              );
            }
          });
        }
        getBalance(addressOrName, blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              address: this._getAddress(addressOrName),
              blockTag: this._getBlockTag(blockTag),
            });
            const result = yield this.perform("getBalance", params);
            try {
              return BigNumber.from(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "getBalance",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        getTransactionCount(addressOrName, blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              address: this._getAddress(addressOrName),
              blockTag: this._getBlockTag(blockTag),
            });
            const result = yield this.perform("getTransactionCount", params);
            try {
              return BigNumber.from(result).toNumber();
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "getTransactionCount",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        getCode(addressOrName, blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              address: this._getAddress(addressOrName),
              blockTag: this._getBlockTag(blockTag),
            });
            const result = yield this.perform("getCode", params);
            try {
              return hexlify13(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "getCode",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        getStorageAt(addressOrName, position, blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              address: this._getAddress(addressOrName),
              blockTag: this._getBlockTag(blockTag),
              position: Promise.resolve(position).then((p2) => hexValue(p2)),
            });
            const result = yield this.perform("getStorageAt", params);
            try {
              return hexlify13(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "getStorageAt",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        _wrapTransaction(tx, hash4, startBlock) {
          if (hash4 != null && hexDataLength6(hash4) !== 32) {
            throw new Error("invalid response - sendTransaction");
          }
          const result = tx;
          if (hash4 != null && tx.hash !== hash4) {
            logger64.throwError(
              "Transaction hash mismatch from Provider.sendTransaction.",
              Logger20.errors.UNKNOWN_ERROR,
              { expectedHash: tx.hash, returnedHash: hash4 }
            );
          }
          result.wait = (confirms, timeout) =>
            __awaiter15(this, void 0, void 0, function* () {
              if (confirms == null) {
                confirms = 1;
              }
              if (timeout == null) {
                timeout = 0;
              }
              let replacement = void 0;
              if (confirms !== 0 && startBlock != null) {
                replacement = {
                  data: tx.data,
                  from: tx.from,
                  nonce: tx.nonce,
                  to: tx.to,
                  value: tx.value,
                  startBlock,
                };
              }
              const receipt = yield this._waitForTransaction(
                tx.hash,
                confirms,
                timeout,
                replacement
              );
              if (receipt == null && confirms === 0) {
                return null;
              }
              this._emitted["t:" + tx.hash] = receipt.blockNumber;
              if (receipt.status === 0) {
                logger64.throwError(
                  "transaction failed",
                  Logger20.errors.CALL_EXCEPTION,
                  {
                    transactionHash: tx.hash,
                    transaction: tx,
                    receipt,
                  }
                );
              }
              return receipt;
            });
          return result;
        }
        sendTransaction(signedTransaction) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const hexTx = yield Promise.resolve(signedTransaction).then((t2) =>
              hexlify13(t2)
            );
            const tx = this.formatter.transaction(signedTransaction);
            if (tx.confirmations == null) {
              tx.confirmations = 0;
            }
            const blockNumber = yield this._getInternalBlockNumber(
              100 + 2 * this.pollingInterval
            );
            try {
              const hash4 = yield this.perform("sendTransaction", {
                signedTransaction: hexTx,
              });
              return this._wrapTransaction(tx, hash4, blockNumber);
            } catch (error) {
              error.transaction = tx;
              error.transactionHash = tx.hash;
              throw error;
            }
          });
        }
        _getTransactionRequest(transaction) {
          return __awaiter15(this, void 0, void 0, function* () {
            const values = yield transaction;
            const tx = {};
            ["from", "to"].forEach((key2) => {
              if (values[key2] == null) {
                return;
              }
              tx[key2] = Promise.resolve(values[key2]).then((v2) =>
                v2 ? this._getAddress(v2) : null
              );
            });
            [
              "gasLimit",
              "gasPrice",
              "maxFeePerGas",
              "maxPriorityFeePerGas",
              "value",
            ].forEach((key2) => {
              if (values[key2] == null) {
                return;
              }
              tx[key2] = Promise.resolve(values[key2]).then((v2) =>
                v2 ? BigNumber.from(v2) : null
              );
            });
            ["type"].forEach((key2) => {
              if (values[key2] == null) {
                return;
              }
              tx[key2] = Promise.resolve(values[key2]).then((v2) =>
                v2 != null ? v2 : null
              );
            });
            if (values.accessList) {
              tx.accessList = this.formatter.accessList(values.accessList);
            }
            ["data"].forEach((key2) => {
              if (values[key2] == null) {
                return;
              }
              tx[key2] = Promise.resolve(values[key2]).then((v2) =>
                v2 ? hexlify13(v2) : null
              );
            });
            return this.formatter.transactionRequest(
              yield resolveProperties5(tx)
            );
          });
        }
        _getFilter(filter) {
          return __awaiter15(this, void 0, void 0, function* () {
            filter = yield filter;
            const result = {};
            if (filter.address != null) {
              result.address = this._getAddress(filter.address);
            }
            ["blockHash", "topics"].forEach((key2) => {
              if (filter[key2] == null) {
                return;
              }
              result[key2] = filter[key2];
            });
            ["fromBlock", "toBlock"].forEach((key2) => {
              if (filter[key2] == null) {
                return;
              }
              result[key2] = this._getBlockTag(filter[key2]);
            });
            return this.formatter.filter(yield resolveProperties5(result));
          });
        }
        call(transaction, blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              transaction: this._getTransactionRequest(transaction),
              blockTag: this._getBlockTag(blockTag),
            });
            const result = yield this.perform("call", params);
            try {
              return hexlify13(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "call",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        estimateGas(transaction) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              transaction: this._getTransactionRequest(transaction),
            });
            const result = yield this.perform("estimateGas", params);
            try {
              return BigNumber.from(result);
            } catch (error) {
              return logger64.throwError(
                "bad result from backend",
                Logger20.errors.SERVER_ERROR,
                {
                  method: "estimateGas",
                  params,
                  result,
                  error,
                }
              );
            }
          });
        }
        _getAddress(addressOrName) {
          return __awaiter15(this, void 0, void 0, function* () {
            addressOrName = yield addressOrName;
            if (typeof addressOrName !== "string") {
              logger64.throwArgumentError(
                "invalid address or ENS name",
                "name",
                addressOrName
              );
            }
            const address = yield this.resolveName(addressOrName);
            if (address == null) {
              logger64.throwError(
                "ENS name not configured",
                Logger20.errors.UNSUPPORTED_OPERATION,
                {
                  operation: `resolveName(${JSON.stringify(addressOrName)})`,
                }
              );
            }
            return address;
          });
        }
        _getBlock(blockHashOrBlockTag, includeTransactions) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            blockHashOrBlockTag = yield blockHashOrBlockTag;
            let blockNumber = -128;
            const params = {
              includeTransactions: !!includeTransactions,
            };
            if (isHexString18(blockHashOrBlockTag, 32)) {
              params.blockHash = blockHashOrBlockTag;
            } else {
              try {
                params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                if (isHexString18(params.blockTag)) {
                  blockNumber = parseInt(params.blockTag.substring(2), 16);
                }
              } catch (error) {
                logger64.throwArgumentError(
                  "invalid block hash or block tag",
                  "blockHashOrBlockTag",
                  blockHashOrBlockTag
                );
              }
            }
            return poll(
              () =>
                __awaiter15(this, void 0, void 0, function* () {
                  const block = yield this.perform("getBlock", params);
                  if (block == null) {
                    if (params.blockHash != null) {
                      if (this._emitted["b:" + params.blockHash] == null) {
                        return null;
                      }
                    }
                    if (params.blockTag != null) {
                      if (blockNumber > this._emitted.block) {
                        return null;
                      }
                    }
                    return void 0;
                  }
                  if (includeTransactions) {
                    let blockNumber2 = null;
                    for (let i = 0; i < block.transactions.length; i++) {
                      const tx = block.transactions[i];
                      if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                      } else if (tx.confirmations == null) {
                        if (blockNumber2 == null) {
                          blockNumber2 = yield this._getInternalBlockNumber(
                            100 + 2 * this.pollingInterval
                          );
                        }
                        let confirmations = blockNumber2 - tx.blockNumber + 1;
                        if (confirmations <= 0) {
                          confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                      }
                    }
                    const blockWithTxs =
                      this.formatter.blockWithTransactions(block);
                    blockWithTxs.transactions = blockWithTxs.transactions.map(
                      (tx) => this._wrapTransaction(tx)
                    );
                    return blockWithTxs;
                  }
                  return this.formatter.block(block);
                }),
              { oncePoll: this }
            );
          });
        }
        getBlock(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, false);
        }
        getBlockWithTransactions(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, true);
        }
        getTransaction(transactionHash) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
              transactionHash: this.formatter.hash(transactionHash, true),
            };
            return poll(
              () =>
                __awaiter15(this, void 0, void 0, function* () {
                  const result = yield this.perform("getTransaction", params);
                  if (result == null) {
                    if (this._emitted["t:" + transactionHash] == null) {
                      return null;
                    }
                    return void 0;
                  }
                  const tx = this.formatter.transactionResponse(result);
                  if (tx.blockNumber == null) {
                    tx.confirmations = 0;
                  } else if (tx.confirmations == null) {
                    const blockNumber = yield this._getInternalBlockNumber(
                      100 + 2 * this.pollingInterval
                    );
                    let confirmations = blockNumber - tx.blockNumber + 1;
                    if (confirmations <= 0) {
                      confirmations = 1;
                    }
                    tx.confirmations = confirmations;
                  }
                  return this._wrapTransaction(tx);
                }),
              { oncePoll: this }
            );
          });
        }
        getTransactionReceipt(transactionHash) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
              transactionHash: this.formatter.hash(transactionHash, true),
            };
            return poll(
              () =>
                __awaiter15(this, void 0, void 0, function* () {
                  const result = yield this.perform(
                    "getTransactionReceipt",
                    params
                  );
                  if (result == null) {
                    if (this._emitted["t:" + transactionHash] == null) {
                      return null;
                    }
                    return void 0;
                  }
                  if (result.blockHash == null) {
                    return void 0;
                  }
                  const receipt = this.formatter.receipt(result);
                  if (receipt.blockNumber == null) {
                    receipt.confirmations = 0;
                  } else if (receipt.confirmations == null) {
                    const blockNumber = yield this._getInternalBlockNumber(
                      100 + 2 * this.pollingInterval
                    );
                    let confirmations = blockNumber - receipt.blockNumber + 1;
                    if (confirmations <= 0) {
                      confirmations = 1;
                    }
                    receipt.confirmations = confirmations;
                  }
                  return receipt;
                }),
              { oncePoll: this }
            );
          });
        }
        getLogs(filter) {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            const params = yield resolveProperties5({
              filter: this._getFilter(filter),
            });
            const logs = yield this.perform("getLogs", params);
            logs.forEach((log2) => {
              if (log2.removed == null) {
                log2.removed = false;
              }
            });
            return Formatter.arrayOf(
              this.formatter.filterLog.bind(this.formatter)
            )(logs);
          });
        }
        getEtherPrice() {
          return __awaiter15(this, void 0, void 0, function* () {
            yield this.getNetwork();
            return this.perform("getEtherPrice", {});
          });
        }
        _getBlockTag(blockTag) {
          return __awaiter15(this, void 0, void 0, function* () {
            blockTag = yield blockTag;
            if (typeof blockTag === "number" && blockTag < 0) {
              if (blockTag % 1) {
                logger64.throwArgumentError(
                  "invalid BlockTag",
                  "blockTag",
                  blockTag
                );
              }
              let blockNumber = yield this._getInternalBlockNumber(
                100 + 2 * this.pollingInterval
              );
              blockNumber += blockTag;
              if (blockNumber < 0) {
                blockNumber = 0;
              }
              return this.formatter.blockTag(blockNumber);
            }
            return this.formatter.blockTag(blockTag);
          });
        }
        getResolver(name2) {
          return __awaiter15(this, void 0, void 0, function* () {
            try {
              const address = yield this._getResolver(name2);
              if (address == null) {
                return null;
              }
              return new Resolver2(this, address, name2);
            } catch (error) {
              if (error.code === Logger20.errors.CALL_EXCEPTION) {
                return null;
              }
              throw error;
            }
          });
        }
        _getResolver(name2) {
          return __awaiter15(this, void 0, void 0, function* () {
            const network = yield this.getNetwork();
            if (!network.ensAddress) {
              logger64.throwError(
                "network does not support ENS",
                Logger20.errors.UNSUPPORTED_OPERATION,
                { operation: "ENS", network: network.name }
              );
            }
            const transaction = {
              to: network.ensAddress,
              data: "0x0178b8bf" + namehash(name2).substring(2),
            };
            try {
              return this.formatter.callAddress(yield this.call(transaction));
            } catch (error) {
              if (error.code === Logger20.errors.CALL_EXCEPTION) {
                return null;
              }
              throw error;
            }
          });
        }
        resolveName(name2) {
          return __awaiter15(this, void 0, void 0, function* () {
            name2 = yield name2;
            try {
              return Promise.resolve(this.formatter.address(name2));
            } catch (error) {
              if (isHexString18(name2)) {
                throw error;
              }
            }
            if (typeof name2 !== "string") {
              logger64.throwArgumentError("invalid ENS name", "name", name2);
            }
            const resolver2 = yield this.getResolver(name2);
            if (!resolver2) {
              return null;
            }
            return yield resolver2.getAddress();
          });
        }
        lookupAddress(address) {
          return __awaiter15(this, void 0, void 0, function* () {
            address = yield address;
            address = this.formatter.address(address);
            const reverseName =
              address.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddress = yield this._getResolver(reverseName);
            if (!resolverAddress) {
              return null;
            }
            let bytes = arrayify17(
              yield this.call({
                to: resolverAddress,
                data: "0x691f3431" + namehash(reverseName).substring(2),
              })
            );
            if (
              bytes.length < 32 ||
              !BigNumber.from(bytes.slice(0, 32)).eq(32)
            ) {
              return null;
            }
            bytes = bytes.slice(32);
            if (bytes.length < 32) {
              return null;
            }
            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();
            bytes = bytes.slice(32);
            if (length > bytes.length) {
              return null;
            }
            const name2 = toUtf8String(bytes.slice(0, length));
            const addr = yield this.resolveName(name2);
            if (addr != address) {
              return null;
            }
            return name2;
          });
        }
        getAvatar(nameOrAddress) {
          return __awaiter15(this, void 0, void 0, function* () {
            let resolver2 = null;
            if (isHexString18(nameOrAddress)) {
              const address = this.formatter.address(nameOrAddress);
              const reverseName =
                address.substring(2).toLowerCase() + ".addr.reverse";
              const resolverAddress = yield this._getResolver(reverseName);
              if (!resolverAddress) {
                return null;
              }
              resolver2 = new Resolver2(this, resolverAddress, "_", address);
            } else {
              resolver2 = yield this.getResolver(nameOrAddress);
              if (!resolver2) {
                return null;
              }
            }
            const avatar = yield resolver2.getAvatar();
            if (avatar == null) {
              return null;
            }
            return avatar.url;
          });
        }
        perform(method, params) {
          return logger64.throwError(
            method + " not implemented",
            Logger20.errors.NOT_IMPLEMENTED,
            { operation: method }
          );
        }
        _startEvent(event) {
          this.polling = this._events.filter((e) => e.pollable()).length > 0;
        }
        _stopEvent(event) {
          this.polling = this._events.filter((e) => e.pollable()).length > 0;
        }
        _addEventListener(eventName, listener, once) {
          const event = new Event(getEventTag2(eventName), listener, once);
          this._events.push(event);
          this._startEvent(event);
          return this;
        }
        on(eventName, listener) {
          return this._addEventListener(eventName, listener, false);
        }
        once(eventName, listener) {
          return this._addEventListener(eventName, listener, true);
        }
        emit(eventName, ...args) {
          let result = false;
          let stopped = [];
          let eventTag = getEventTag2(eventName);
          this._events = this._events.filter((event) => {
            if (event.tag !== eventTag) {
              return true;
            }
            setTimeout(() => {
              event.listener.apply(this, args);
            }, 0);
            result = true;
            if (event.once) {
              stopped.push(event);
              return false;
            }
            return true;
          });
          stopped.forEach((event) => {
            this._stopEvent(event);
          });
          return result;
        }
        listenerCount(eventName) {
          if (!eventName) {
            return this._events.length;
          }
          let eventTag = getEventTag2(eventName);
          return this._events.filter((event) => {
            return event.tag === eventTag;
          }).length;
        }
        listeners(eventName) {
          if (eventName == null) {
            return this._events.map((event) => event.listener);
          }
          let eventTag = getEventTag2(eventName);
          return this._events
            .filter((event) => event.tag === eventTag)
            .map((event) => event.listener);
        }
        off(eventName, listener) {
          if (listener == null) {
            return this.removeAllListeners(eventName);
          }
          const stopped = [];
          let found = false;
          let eventTag = getEventTag2(eventName);
          this._events = this._events.filter((event) => {
            if (event.tag !== eventTag || event.listener != listener) {
              return true;
            }
            if (found) {
              return true;
            }
            found = true;
            stopped.push(event);
            return false;
          });
          stopped.forEach((event) => {
            this._stopEvent(event);
          });
          return this;
        }
        removeAllListeners(eventName) {
          let stopped = [];
          if (eventName == null) {
            stopped = this._events;
            this._events = [];
          } else {
            const eventTag = getEventTag2(eventName);
            this._events = this._events.filter((event) => {
              if (event.tag !== eventTag) {
                return true;
              }
              stopped.push(event);
              return false;
            });
          }
          stopped.forEach((event) => {
            this._stopEvent(event);
          });
          return this;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
  function checkError(method, error, params) {
    if (method === "call" && error.code === Logger20.errors.SERVER_ERROR) {
      const e = error.error;
      if (e && e.message.match("reverted") && isHexString18(e.data)) {
        return e.data;
      }
      logger65.throwError(
        "missing revert data in call exception",
        Logger20.errors.CALL_EXCEPTION,
        {
          error,
          data: "0x",
        }
      );
    }
    let message = error.message;
    if (
      error.code === Logger20.errors.SERVER_ERROR &&
      error.error &&
      typeof error.error.message === "string"
    ) {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
    message = (message || "").toLowerCase();
    const transaction = params.transaction || params.signedTransaction;
    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
      logger65.throwError(
        "insufficient funds for intrinsic transaction cost",
        Logger20.errors.INSUFFICIENT_FUNDS,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (message.match(/nonce too low/)) {
      logger65.throwError(
        "nonce has already been used",
        Logger20.errors.NONCE_EXPIRED,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (message.match(/replacement transaction underpriced/)) {
      logger65.throwError(
        "replacement fee too low",
        Logger20.errors.REPLACEMENT_UNDERPRICED,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (message.match(/only replay-protected/)) {
      logger65.throwError(
        "legacy pre-eip-155 transactions not supported",
        Logger20.errors.UNSUPPORTED_OPERATION,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (
      errorGas.indexOf(method) >= 0 &&
      message.match(
        /gas required exceeds allowance|always failing transaction|execution reverted/
      )
    ) {
      logger65.throwError(
        "cannot estimate gas; transaction may fail or may require manual gas limit",
        Logger20.errors.UNPREDICTABLE_GAS_LIMIT,
        {
          error,
          method,
          transaction,
        }
      );
    }
    throw error;
  }
  function timer(timeout) {
    return new Promise(function (resolve2) {
      setTimeout(resolve2, timeout);
    });
  }
  function getResult(payload) {
    if (payload.error) {
      const error = new Error(payload.error.message);
      error.code = payload.error.code;
      error.data = payload.error.data;
      throw error;
    }
    return payload.result;
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  var __awaiter16,
    logger65,
    errorGas,
    _constructorGuard5,
    JsonRpcSigner,
    UncheckedJsonRpcSigner,
    allowedTransactionKeys4,
    JsonRpcProvider;
  var init_json_rpc_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"() {
      "use strict";
      init_lib30();
      init_lib3();
      init_lib73();
      init_lib23();
      init_lib74();
      init_lib19();
      init_lib82();
      init_lib81();
      init_lib71();
      init_version77();
      init_base_provider();
      __awaiter16 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger65 = new Logger20(version77);
      errorGas = ["call", "estimateGas"];
      _constructorGuard5 = {};
      JsonRpcSigner = class extends Signer {
        constructor(constructorGuard, provider, addressOrIndex) {
          logger65.checkNew(new.target, JsonRpcSigner);
          super();
          if (constructorGuard !== _constructorGuard5) {
            throw new Error(
              "do not call the JsonRpcSigner constructor directly; use provider.getSigner"
            );
          }
          defineReadOnly12(this, "provider", provider);
          if (addressOrIndex == null) {
            addressOrIndex = 0;
          }
          if (typeof addressOrIndex === "string") {
            defineReadOnly12(
              this,
              "_address",
              this.provider.formatter.address(addressOrIndex)
            );
            defineReadOnly12(this, "_index", null);
          } else if (typeof addressOrIndex === "number") {
            defineReadOnly12(this, "_index", addressOrIndex);
            defineReadOnly12(this, "_address", null);
          } else {
            logger65.throwArgumentError(
              "invalid address or index",
              "addressOrIndex",
              addressOrIndex
            );
          }
        }
        connect(provider) {
          return logger65.throwError(
            "cannot alter JSON-RPC Signer connection",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "connect",
            }
          );
        }
        connectUnchecked() {
          return new UncheckedJsonRpcSigner(
            _constructorGuard5,
            this.provider,
            this._address || this._index
          );
        }
        getAddress() {
          if (this._address) {
            return Promise.resolve(this._address);
          }
          return this.provider.send("eth_accounts", []).then((accounts) => {
            if (accounts.length <= this._index) {
              logger65.throwError(
                "unknown account #" + this._index,
                Logger20.errors.UNSUPPORTED_OPERATION,
                {
                  operation: "getAddress",
                }
              );
            }
            return this.provider.formatter.address(accounts[this._index]);
          });
        }
        sendUncheckedTransaction(transaction) {
          transaction = shallowCopy4(transaction);
          const fromAddress = this.getAddress().then((address) => {
            if (address) {
              address = address.toLowerCase();
            }
            return address;
          });
          if (transaction.gasLimit == null) {
            const estimate = shallowCopy4(transaction);
            estimate.from = fromAddress;
            transaction.gasLimit = this.provider.estimateGas(estimate);
          }
          if (transaction.to != null) {
            transaction.to = Promise.resolve(transaction.to).then((to) =>
              __awaiter16(this, void 0, void 0, function* () {
                if (to == null) {
                  return null;
                }
                const address = yield this.provider.resolveName(to);
                if (address == null) {
                  logger65.throwArgumentError(
                    "provided ENS name resolves to null",
                    "tx.to",
                    to
                  );
                }
                return address;
              })
            );
          }
          return resolveProperties5({
            tx: resolveProperties5(transaction),
            sender: fromAddress,
          }).then(({ tx, sender }) => {
            if (tx.from != null) {
              if (tx.from.toLowerCase() !== sender) {
                logger65.throwArgumentError(
                  "from address mismatch",
                  "transaction",
                  transaction
                );
              }
            } else {
              tx.from = sender;
            }
            const hexTx = this.provider.constructor.hexlifyTransaction(tx, {
              from: true,
            });
            return this.provider.send("eth_sendTransaction", [hexTx]).then(
              (hash4) => {
                return hash4;
              },
              (error) => {
                return checkError("sendTransaction", error, hexTx);
              }
            );
          });
        }
        signTransaction(transaction) {
          return logger65.throwError(
            "signing transactions is unsupported",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "signTransaction",
            }
          );
        }
        sendTransaction(transaction) {
          return __awaiter16(this, void 0, void 0, function* () {
            const blockNumber = yield this.provider._getInternalBlockNumber(
              100 + 2 * this.provider.pollingInterval
            );
            const hash4 = yield this.sendUncheckedTransaction(transaction);
            try {
              return yield poll(
                () =>
                  __awaiter16(this, void 0, void 0, function* () {
                    const tx = yield this.provider.getTransaction(hash4);
                    if (tx === null) {
                      return void 0;
                    }
                    return this.provider._wrapTransaction(
                      tx,
                      hash4,
                      blockNumber
                    );
                  }),
                { oncePoll: this.provider }
              );
            } catch (error) {
              error.transactionHash = hash4;
              throw error;
            }
          });
        }
        signMessage(message) {
          return __awaiter16(this, void 0, void 0, function* () {
            const data =
              typeof message === "string" ? toUtf8Bytes(message) : message;
            const address = yield this.getAddress();
            return yield this.provider.send("personal_sign", [
              hexlify13(data),
              address.toLowerCase(),
            ]);
          });
        }
        _legacySignMessage(message) {
          return __awaiter16(this, void 0, void 0, function* () {
            const data =
              typeof message === "string" ? toUtf8Bytes(message) : message;
            const address = yield this.getAddress();
            return yield this.provider.send("eth_sign", [
              address.toLowerCase(),
              hexlify13(data),
            ]);
          });
        }
        _signTypedData(domain, types, value) {
          return __awaiter16(this, void 0, void 0, function* () {
            const populated = yield TypedDataEncoder.resolveNames(
              domain,
              types,
              value,
              (name2) => {
                return this.provider.resolveName(name2);
              }
            );
            const address = yield this.getAddress();
            return yield this.provider.send("eth_signTypedData_v4", [
              address.toLowerCase(),
              JSON.stringify(
                TypedDataEncoder.getPayload(
                  populated.domain,
                  types,
                  populated.value
                )
              ),
            ]);
          });
        }
        unlock(password) {
          return __awaiter16(this, void 0, void 0, function* () {
            const provider = this.provider;
            const address = yield this.getAddress();
            return provider.send("personal_unlockAccount", [
              address.toLowerCase(),
              password,
              null,
            ]);
          });
        }
      };
      UncheckedJsonRpcSigner = class extends JsonRpcSigner {
        sendTransaction(transaction) {
          return this.sendUncheckedTransaction(transaction).then((hash4) => {
            return {
              hash: hash4,
              nonce: null,
              gasLimit: null,
              gasPrice: null,
              data: null,
              value: null,
              chainId: null,
              confirmations: 0,
              from: null,
              wait: (confirmations) => {
                return this.provider.waitForTransaction(hash4, confirmations);
              },
            };
          });
        }
      };
      allowedTransactionKeys4 = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        value: true,
        type: true,
        accessList: true,
        maxFeePerGas: true,
        maxPriorityFeePerGas: true,
      };
      JsonRpcProvider = class extends BaseProvider {
        constructor(url, network) {
          logger65.checkNew(new.target, JsonRpcProvider);
          let networkOrReady = network;
          if (networkOrReady == null) {
            networkOrReady = new Promise((resolve2, reject) => {
              setTimeout(() => {
                this.detectNetwork().then(
                  (network2) => {
                    resolve2(network2);
                  },
                  (error) => {
                    reject(error);
                  }
                );
              }, 0);
            });
          }
          super(networkOrReady);
          if (!url) {
            url = getStatic3(this.constructor, "defaultUrl")();
          }
          if (typeof url === "string") {
            defineReadOnly12(
              this,
              "connection",
              Object.freeze({
                url,
              })
            );
          } else {
            defineReadOnly12(
              this,
              "connection",
              Object.freeze(shallowCopy4(url))
            );
          }
          this._nextId = 42;
        }
        get _cache() {
          if (this._eventLoopCache == null) {
            this._eventLoopCache = {};
          }
          return this._eventLoopCache;
        }
        static defaultUrl() {
          return "http://localhost:8545";
        }
        detectNetwork() {
          if (!this._cache["detectNetwork"]) {
            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
            setTimeout(() => {
              this._cache["detectNetwork"] = null;
            }, 0);
          }
          return this._cache["detectNetwork"];
        }
        _uncachedDetectNetwork() {
          return __awaiter16(this, void 0, void 0, function* () {
            yield timer(0);
            let chainId = null;
            try {
              chainId = yield this.send("eth_chainId", []);
            } catch (error) {
              try {
                chainId = yield this.send("net_version", []);
              } catch (error2) {}
            }
            if (chainId != null) {
              const getNetwork2 = getStatic3(this.constructor, "getNetwork");
              try {
                return getNetwork2(BigNumber.from(chainId).toNumber());
              } catch (error) {
                return logger65.throwError(
                  "could not detect network",
                  Logger20.errors.NETWORK_ERROR,
                  {
                    chainId,
                    event: "invalidNetwork",
                    serverError: error,
                  }
                );
              }
            }
            return logger65.throwError(
              "could not detect network",
              Logger20.errors.NETWORK_ERROR,
              {
                event: "noNetwork",
              }
            );
          });
        }
        getSigner(addressOrIndex) {
          return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);
        }
        getUncheckedSigner(addressOrIndex) {
          return this.getSigner(addressOrIndex).connectUnchecked();
        }
        listAccounts() {
          return this.send("eth_accounts", []).then((accounts) => {
            return accounts.map((a2) => this.formatter.address(a2));
          });
        }
        send(method, params) {
          const request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0",
          };
          this.emit("debug", {
            action: "request",
            request: deepCopy6(request),
            provider: this,
          });
          const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
          if (cache && this._cache[method]) {
            return this._cache[method];
          }
          const result = fetchJson(
            this.connection,
            JSON.stringify(request),
            getResult
          ).then(
            (result2) => {
              this.emit("debug", {
                action: "response",
                request,
                response: result2,
                provider: this,
              });
              return result2;
            },
            (error) => {
              this.emit("debug", {
                action: "response",
                error,
                request,
                provider: this,
              });
              throw error;
            }
          );
          if (cache) {
            this._cache[method] = result;
            setTimeout(() => {
              this._cache[method] = null;
            }, 0);
          }
          return result;
        }
        prepareRequest(method, params) {
          switch (method) {
            case "getBlockNumber":
              return ["eth_blockNumber", []];
            case "getGasPrice":
              return ["eth_gasPrice", []];
            case "getBalance":
              return [
                "eth_getBalance",
                [getLowerCase(params.address), params.blockTag],
              ];
            case "getTransactionCount":
              return [
                "eth_getTransactionCount",
                [getLowerCase(params.address), params.blockTag],
              ];
            case "getCode":
              return [
                "eth_getCode",
                [getLowerCase(params.address), params.blockTag],
              ];
            case "getStorageAt":
              return [
                "eth_getStorageAt",
                [
                  getLowerCase(params.address),
                  params.position,
                  params.blockTag,
                ],
              ];
            case "sendTransaction":
              return ["eth_sendRawTransaction", [params.signedTransaction]];
            case "getBlock":
              if (params.blockTag) {
                return [
                  "eth_getBlockByNumber",
                  [params.blockTag, !!params.includeTransactions],
                ];
              } else if (params.blockHash) {
                return [
                  "eth_getBlockByHash",
                  [params.blockHash, !!params.includeTransactions],
                ];
              }
              return null;
            case "getTransaction":
              return ["eth_getTransactionByHash", [params.transactionHash]];
            case "getTransactionReceipt":
              return ["eth_getTransactionReceipt", [params.transactionHash]];
            case "call": {
              const hexlifyTransaction = getStatic3(
                this.constructor,
                "hexlifyTransaction"
              );
              return [
                "eth_call",
                [
                  hexlifyTransaction(params.transaction, { from: true }),
                  params.blockTag,
                ],
              ];
            }
            case "estimateGas": {
              const hexlifyTransaction = getStatic3(
                this.constructor,
                "hexlifyTransaction"
              );
              return [
                "eth_estimateGas",
                [hexlifyTransaction(params.transaction, { from: true })],
              ];
            }
            case "getLogs":
              if (params.filter && params.filter.address != null) {
                params.filter.address = getLowerCase(params.filter.address);
              }
              return ["eth_getLogs", [params.filter]];
            default:
              break;
          }
          return null;
        }
        perform(method, params) {
          return __awaiter16(this, void 0, void 0, function* () {
            if (method === "call" || method === "estimateGas") {
              const tx = params.transaction;
              if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                if (
                  tx.maxFeePerGas == null &&
                  tx.maxPriorityFeePerGas == null
                ) {
                  const feeData = yield this.getFeeData();
                  if (
                    feeData.maxFeePerGas == null &&
                    feeData.maxPriorityFeePerGas == null
                  ) {
                    params = shallowCopy4(params);
                    params.transaction = shallowCopy4(tx);
                    delete params.transaction.type;
                  }
                }
              }
            }
            const args = this.prepareRequest(method, params);
            if (args == null) {
              logger65.throwError(
                method + " not implemented",
                Logger20.errors.NOT_IMPLEMENTED,
                { operation: method }
              );
            }
            try {
              return yield this.send(args[0], args[1]);
            } catch (error) {
              return checkError(method, error, params);
            }
          });
        }
        _startEvent(event) {
          if (event.tag === "pending") {
            this._startPending();
          }
          super._startEvent(event);
        }
        _startPending() {
          if (this._pendingFilter != null) {
            return;
          }
          const self2 = this;
          const pendingFilter = this.send(
            "eth_newPendingTransactionFilter",
            []
          );
          this._pendingFilter = pendingFilter;
          pendingFilter
            .then(function (filterId) {
              function poll2() {
                self2
                  .send("eth_getFilterChanges", [filterId])
                  .then(function (hashes) {
                    if (self2._pendingFilter != pendingFilter) {
                      return null;
                    }
                    let seq = Promise.resolve();
                    hashes.forEach(function (hash4) {
                      self2._emitted["t:" + hash4.toLowerCase()] = "pending";
                      seq = seq.then(function () {
                        return self2.getTransaction(hash4).then(function (tx) {
                          self2.emit("pending", tx);
                          return null;
                        });
                      });
                    });
                    return seq.then(function () {
                      return timer(1e3);
                    });
                  })
                  .then(function () {
                    if (self2._pendingFilter != pendingFilter) {
                      self2.send("eth_uninstallFilter", [filterId]);
                      return;
                    }
                    setTimeout(function () {
                      poll2();
                    }, 0);
                    return null;
                  })
                  .catch((error) => {});
              }
              poll2();
              return filterId;
            })
            .catch((error) => {});
        }
        _stopEvent(event) {
          if (event.tag === "pending" && this.listenerCount("pending") === 0) {
            this._pendingFilter = null;
          }
          super._stopEvent(event);
        }
        static hexlifyTransaction(transaction, allowExtra) {
          const allowed = shallowCopy4(allowedTransactionKeys4);
          if (allowExtra) {
            for (const key2 in allowExtra) {
              if (allowExtra[key2]) {
                allowed[key2] = true;
              }
            }
          }
          checkProperties2(transaction, allowed);
          const result = {};
          [
            "gasLimit",
            "gasPrice",
            "type",
            "maxFeePerGas",
            "maxPriorityFeePerGas",
            "nonce",
            "value",
          ].forEach(function (key2) {
            if (transaction[key2] == null) {
              return;
            }
            const value = hexValue(transaction[key2]);
            if (key2 === "gasLimit") {
              key2 = "gas";
            }
            result[key2] = value;
          });
          ["from", "to", "data"].forEach(function (key2) {
            if (transaction[key2] == null) {
              return;
            }
            result[key2] = hexlify13(transaction[key2]);
          });
          if (transaction.accessList) {
            result["accessList"] = accessListify3(transaction.accessList);
          }
          return result;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/ws.js
  var WS;
  var init_ws = __esm({
    "node_modules/@ethersproject/providers/lib.esm/ws.js"() {
      "use strict";
      init_lib71();
      init_version77();
      WS = null;
      try {
        WS = WebSocket;
        if (WS == null) {
          throw new Error("inject please");
        }
      } catch (error) {
        const logger84 = new Logger20(version77);
        WS = function () {
          logger84.throwError(
            "WebSockets not supported in this environment",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "new WebSocket()",
            }
          );
        };
      }
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
  var __awaiter17, logger66, NextId, WebSocketProvider;
  var init_websocket_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"() {
      "use strict";
      init_lib3();
      init_lib74();
      init_json_rpc_provider();
      init_ws();
      init_lib71();
      init_version77();
      __awaiter17 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger66 = new Logger20(version77);
      NextId = 1;
      WebSocketProvider = class extends JsonRpcProvider {
        constructor(url, network) {
          if (network === "any") {
            logger66.throwError(
              "WebSocketProvider does not support 'any' network yet",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "network:any",
              }
            );
          }
          super(url, network);
          this._pollingInterval = -1;
          this._wsReady = false;
          defineReadOnly12(this, "_websocket", new WS(this.connection.url));
          defineReadOnly12(this, "_requests", {});
          defineReadOnly12(this, "_subs", {});
          defineReadOnly12(this, "_subIds", {});
          defineReadOnly12(this, "_detectNetwork", super.detectNetwork());
          this._websocket.onopen = () => {
            this._wsReady = true;
            Object.keys(this._requests).forEach((id2) => {
              this._websocket.send(this._requests[id2].payload);
            });
          };
          this._websocket.onmessage = (messageEvent) => {
            const data = messageEvent.data;
            const result = JSON.parse(data);
            if (result.id != null) {
              const id2 = String(result.id);
              const request = this._requests[id2];
              delete this._requests[id2];
              if (result.result !== void 0) {
                request.callback(null, result.result);
                this.emit("debug", {
                  action: "response",
                  request: JSON.parse(request.payload),
                  response: result.result,
                  provider: this,
                });
              } else {
                let error = null;
                if (result.error) {
                  error = new Error(result.error.message || "unknown error");
                  defineReadOnly12(error, "code", result.error.code || null);
                  defineReadOnly12(error, "response", data);
                } else {
                  error = new Error("unknown error");
                }
                request.callback(error, void 0);
                this.emit("debug", {
                  action: "response",
                  error,
                  request: JSON.parse(request.payload),
                  provider: this,
                });
              }
            } else if (result.method === "eth_subscription") {
              const sub = this._subs[result.params.subscription];
              if (sub) {
                sub.processFunc(result.params.result);
              }
            } else {
              console.warn("this should not happen");
            }
          };
          const fauxPoll = setInterval(() => {
            this.emit("poll");
          }, 1e3);
          if (fauxPoll.unref) {
            fauxPoll.unref();
          }
        }
        detectNetwork() {
          return this._detectNetwork;
        }
        get pollingInterval() {
          return 0;
        }
        resetEventsBlock(blockNumber) {
          logger66.throwError(
            "cannot reset events block on WebSocketProvider",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "resetEventBlock",
            }
          );
        }
        set pollingInterval(value) {
          logger66.throwError(
            "cannot set polling interval on WebSocketProvider",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "setPollingInterval",
            }
          );
        }
        poll() {
          return __awaiter17(this, void 0, void 0, function* () {
            return null;
          });
        }
        set polling(value) {
          if (!value) {
            return;
          }
          logger66.throwError(
            "cannot set polling on WebSocketProvider",
            Logger20.errors.UNSUPPORTED_OPERATION,
            {
              operation: "setPolling",
            }
          );
        }
        send(method, params) {
          const rid = NextId++;
          return new Promise((resolve2, reject) => {
            function callback(error, result) {
              if (error) {
                return reject(error);
              }
              return resolve2(result);
            }
            const payload = JSON.stringify({
              method,
              params,
              id: rid,
              jsonrpc: "2.0",
            });
            this.emit("debug", {
              action: "request",
              request: JSON.parse(payload),
              provider: this,
            });
            this._requests[String(rid)] = { callback, payload };
            if (this._wsReady) {
              this._websocket.send(payload);
            }
          });
        }
        static defaultUrl() {
          return "ws://localhost:8546";
        }
        _subscribe(tag, param, processFunc) {
          return __awaiter17(this, void 0, void 0, function* () {
            let subIdPromise = this._subIds[tag];
            if (subIdPromise == null) {
              subIdPromise = Promise.all(param).then((param2) => {
                return this.send("eth_subscribe", param2);
              });
              this._subIds[tag] = subIdPromise;
            }
            const subId = yield subIdPromise;
            this._subs[subId] = { tag, processFunc };
          });
        }
        _startEvent(event) {
          switch (event.type) {
            case "block":
              this._subscribe("block", ["newHeads"], (result) => {
                const blockNumber = BigNumber.from(result.number).toNumber();
                this._emitted.block = blockNumber;
                this.emit("block", blockNumber);
              });
              break;
            case "pending":
              this._subscribe(
                "pending",
                ["newPendingTransactions"],
                (result) => {
                  this.emit("pending", result);
                }
              );
              break;
            case "filter":
              this._subscribe(
                event.tag,
                ["logs", this._getFilter(event.filter)],
                (result) => {
                  if (result.removed == null) {
                    result.removed = false;
                  }
                  this.emit(event.filter, this.formatter.filterLog(result));
                }
              );
              break;
            case "tx": {
              const emitReceipt = (event2) => {
                const hash4 = event2.hash;
                this.getTransactionReceipt(hash4).then((receipt) => {
                  if (!receipt) {
                    return;
                  }
                  this.emit(hash4, receipt);
                });
              };
              emitReceipt(event);
              this._subscribe("tx", ["newHeads"], (result) => {
                this._events
                  .filter((e) => e.type === "tx")
                  .forEach(emitReceipt);
              });
              break;
            }
            case "debug":
            case "poll":
            case "willPoll":
            case "didPoll":
            case "error":
              break;
            default:
              console.log("unhandled:", event);
              break;
          }
        }
        _stopEvent(event) {
          let tag = event.tag;
          if (event.type === "tx") {
            if (this._events.filter((e) => e.type === "tx").length) {
              return;
            }
            tag = "tx";
          } else if (this.listenerCount(event.event)) {
            return;
          }
          const subId = this._subIds[tag];
          if (!subId) {
            return;
          }
          delete this._subIds[tag];
          subId.then((subId2) => {
            if (!this._subs[subId2]) {
              return;
            }
            delete this._subs[subId2];
            this.send("eth_unsubscribe", [subId2]);
          });
        }
        destroy() {
          return __awaiter17(this, void 0, void 0, function* () {
            if (this._websocket.readyState === WS.CONNECTING) {
              yield new Promise((resolve2) => {
                this._websocket.onopen = function () {
                  resolve2(true);
                };
                this._websocket.onerror = function () {
                  resolve2(false);
                };
              });
            }
            this._websocket.close(1e3);
          });
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
  var __awaiter18, logger67, StaticJsonRpcProvider, UrlJsonRpcProvider;
  var init_url_json_rpc_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"() {
      "use strict";
      init_lib74();
      init_lib71();
      init_version77();
      init_json_rpc_provider();
      __awaiter18 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger67 = new Logger20(version77);
      StaticJsonRpcProvider = class extends JsonRpcProvider {
        detectNetwork() {
          const _super = Object.create(null, {
            detectNetwork: { get: () => super.detectNetwork },
          });
          return __awaiter18(this, void 0, void 0, function* () {
            let network = this.network;
            if (network == null) {
              network = yield _super.detectNetwork.call(this);
              if (!network) {
                logger67.throwError(
                  "no network detected",
                  Logger20.errors.UNKNOWN_ERROR,
                  {}
                );
              }
              if (this._network == null) {
                defineReadOnly12(this, "_network", network);
                this.emit("network", network, null);
              }
            }
            return network;
          });
        }
      };
      UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
        constructor(network, apiKey) {
          logger67.checkAbstract(new.target, UrlJsonRpcProvider);
          network = getStatic3(new.target, "getNetwork")(network);
          apiKey = getStatic3(new.target, "getApiKey")(apiKey);
          const connection = getStatic3(new.target, "getUrl")(network, apiKey);
          super(connection, network);
          if (typeof apiKey === "string") {
            defineReadOnly12(this, "apiKey", apiKey);
          } else if (apiKey != null) {
            Object.keys(apiKey).forEach((key2) => {
              defineReadOnly12(this, key2, apiKey[key2]);
            });
          }
        }
        _startPending() {
          logger67.warn(
            "WARNING: API provider does not support pending filters"
          );
        }
        isCommunityResource() {
          return false;
        }
        getSigner(address) {
          return logger67.throwError(
            "API provider does not support signing",
            Logger20.errors.UNSUPPORTED_OPERATION,
            { operation: "getSigner" }
          );
        }
        listAccounts() {
          return Promise.resolve([]);
        }
        static getApiKey(apiKey) {
          return apiKey;
        }
        static getUrl(network, apiKey) {
          return logger67.throwError(
            "not implemented; sub-classes must override getUrl",
            Logger20.errors.NOT_IMPLEMENTED,
            {
              operation: "getUrl",
            }
          );
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
  var logger68, defaultApiKey, AlchemyWebSocketProvider, AlchemyProvider;
  var init_alchemy_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"() {
      "use strict";
      init_lib74();
      init_formatter();
      init_websocket_provider();
      init_lib71();
      init_version77();
      init_url_json_rpc_provider();
      logger68 = new Logger20(version77);
      defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
      AlchemyWebSocketProvider = class extends WebSocketProvider {
        constructor(network, apiKey) {
          const provider = new AlchemyProvider(network, apiKey);
          const url = provider.connection.url
            .replace(/^http/i, "ws")
            .replace(".alchemyapi.", ".ws.alchemyapi.");
          super(url, provider.network);
          defineReadOnly12(this, "apiKey", provider.apiKey);
        }
        isCommunityResource() {
          return this.apiKey === defaultApiKey;
        }
      };
      AlchemyProvider = class extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
          return new AlchemyWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
          if (apiKey == null) {
            return defaultApiKey;
          }
          if (apiKey && typeof apiKey !== "string") {
            logger68.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          }
          return apiKey;
        }
        static getUrl(network, apiKey) {
          let host = null;
          switch (network.name) {
            case "homestead":
              host = "eth-mainnet.alchemyapi.io/v2/";
              break;
            case "ropsten":
              host = "eth-ropsten.alchemyapi.io/v2/";
              break;
            case "rinkeby":
              host = "eth-rinkeby.alchemyapi.io/v2/";
              break;
            case "goerli":
              host = "eth-goerli.alchemyapi.io/v2/";
              break;
            case "kovan":
              host = "eth-kovan.alchemyapi.io/v2/";
              break;
            case "matic":
              host = "polygon-mainnet.g.alchemy.com/v2/";
              break;
            case "maticmum":
              host = "polygon-mumbai.g.alchemy.com/v2/";
              break;
            case "arbitrum":
              host = "arb-mainnet.g.alchemy.com/v2/";
              break;
            case "arbitrum-rinkeby":
              host = "arb-rinkeby.g.alchemy.com/v2/";
              break;
            case "optimism":
              host = "opt-mainnet.g.alchemy.com/v2/";
              break;
            case "optimism-kovan":
              host = "opt-kovan.g.alchemy.com/v2/";
              break;
            default:
              logger68.throwArgumentError(
                "unsupported network",
                "network",
                arguments[0]
              );
          }
          return {
            allowGzip: true,
            url: "https://" + host + apiKey,
            throttleCallback: (attempt, url) => {
              if (apiKey === defaultApiKey) {
                showThrottleMessage();
              }
              return Promise.resolve(true);
            },
          };
        }
        isCommunityResource() {
          return this.apiKey === defaultApiKey;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
  var __awaiter19, logger69, CloudflareProvider;
  var init_cloudflare_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js"() {
      "use strict";
      init_url_json_rpc_provider();
      init_lib71();
      init_version77();
      __awaiter19 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger69 = new Logger20(version77);
      CloudflareProvider = class extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
          if (apiKey != null) {
            logger69.throwArgumentError(
              "apiKey not supported for cloudflare",
              "apiKey",
              apiKey
            );
          }
          return null;
        }
        static getUrl(network, apiKey) {
          let host = null;
          switch (network.name) {
            case "homestead":
              host = "https://cloudflare-eth.com/";
              break;
            default:
              logger69.throwArgumentError(
                "unsupported network",
                "network",
                arguments[0]
              );
          }
          return host;
        }
        perform(method, params) {
          const _super = Object.create(null, {
            perform: { get: () => super.perform },
          });
          return __awaiter19(this, void 0, void 0, function* () {
            if (method === "getBlockNumber") {
              const block = yield _super.perform.call(this, "getBlock", {
                blockTag: "latest",
              });
              return block.number;
            }
            return _super.perform.call(this, method, params);
          });
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
  function getTransactionPostData(transaction) {
    const result = {};
    for (let key2 in transaction) {
      if (transaction[key2] == null) {
        continue;
      }
      let value = transaction[key2];
      if (key2 === "type" && value === 0) {
        continue;
      }
      if (
        {
          type: true,
          gasLimit: true,
          gasPrice: true,
          maxFeePerGs: true,
          maxPriorityFeePerGas: true,
          nonce: true,
          value: true,
        }[key2]
      ) {
        value = hexValue(hexlify13(value));
      } else if (key2 === "accessList") {
        value =
          "[" +
          accessListify3(value)
            .map((set) => {
              return `{address:"${
                set.address
              }",storageKeys:["${set.storageKeys.join('","')}"]}`;
            })
            .join(",") +
          "]";
      } else {
        value = hexlify13(value);
      }
      result[key2] = value;
    }
    return result;
  }
  function getResult2(result) {
    if (
      result.status == 0 &&
      (result.message === "No records found" ||
        result.message === "No transactions found")
    ) {
      return result.result;
    }
    if (result.status != 1 || result.message != "OK") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        error.throttleRetry = true;
      }
      throw error;
    }
    return result.result;
  }
  function getJsonResult(result) {
    if (
      result &&
      result.status == 0 &&
      result.message == "NOTOK" &&
      (result.result || "").toLowerCase().indexOf("rate limit") >= 0
    ) {
      const error = new Error("throttled response");
      error.result = JSON.stringify(result);
      error.throttleRetry = true;
      throw error;
    }
    if (result.jsonrpc != "2.0") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      throw error;
    }
    if (result.error) {
      const error = new Error(result.error.message || "unknown error");
      if (result.error.code) {
        error.code = result.error.code;
      }
      if (result.error.data) {
        error.data = result.error.data;
      }
      throw error;
    }
    return result.result;
  }
  function checkLogTag(blockTag) {
    if (blockTag === "pending") {
      throw new Error("pending not supported");
    }
    if (blockTag === "latest") {
      return blockTag;
    }
    return parseInt(blockTag.substring(2), 16);
  }
  function checkError2(method, error, transaction) {
    if (method === "call" && error.code === Logger20.errors.SERVER_ERROR) {
      const e = error.error;
      if (
        e &&
        (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))
      ) {
        let data = e.data;
        if (data) {
          data = "0x" + data.replace(/^.*0x/i, "");
        }
        if (isHexString18(data)) {
          return data;
        }
        logger70.throwError(
          "missing revert data in call exception",
          Logger20.errors.CALL_EXCEPTION,
          {
            error,
            data: "0x",
          }
        );
      }
    }
    let message = error.message;
    if (error.code === Logger20.errors.SERVER_ERROR) {
      if (error.error && typeof error.error.message === "string") {
        message = error.error.message;
      } else if (typeof error.body === "string") {
        message = error.body;
      } else if (typeof error.responseText === "string") {
        message = error.responseText;
      }
    }
    message = (message || "").toLowerCase();
    if (message.match(/insufficient funds/)) {
      logger70.throwError(
        "insufficient funds for intrinsic transaction cost",
        Logger20.errors.INSUFFICIENT_FUNDS,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (
      message.match(
        /same hash was already imported|transaction nonce is too low|nonce too low/
      )
    ) {
      logger70.throwError(
        "nonce has already been used",
        Logger20.errors.NONCE_EXPIRED,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (message.match(/another transaction with same nonce/)) {
      logger70.throwError(
        "replacement fee too low",
        Logger20.errors.REPLACEMENT_UNDERPRICED,
        {
          error,
          method,
          transaction,
        }
      );
    }
    if (
      message.match(/execution failed due to an exception|execution reverted/)
    ) {
      logger70.throwError(
        "cannot estimate gas; transaction may fail or may require manual gas limit",
        Logger20.errors.UNPREDICTABLE_GAS_LIMIT,
        {
          error,
          method,
          transaction,
        }
      );
    }
    throw error;
  }
  var __awaiter20, logger70, defaultApiKey2, EtherscanProvider;
  var init_etherscan_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js"() {
      "use strict";
      init_lib73();
      init_lib74();
      init_lib82();
      init_lib81();
      init_formatter();
      init_lib71();
      init_version77();
      init_base_provider();
      __awaiter20 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger70 = new Logger20(version77);
      defaultApiKey2 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
      EtherscanProvider = class extends BaseProvider {
        constructor(network, apiKey) {
          logger70.checkNew(new.target, EtherscanProvider);
          super(network);
          defineReadOnly12(this, "baseUrl", this.getBaseUrl());
          defineReadOnly12(this, "apiKey", apiKey || defaultApiKey2);
        }
        getBaseUrl() {
          switch (this.network ? this.network.name : "invalid") {
            case "homestead":
              return "https://api.etherscan.io";
            case "ropsten":
              return "https://api-ropsten.etherscan.io";
            case "rinkeby":
              return "https://api-rinkeby.etherscan.io";
            case "kovan":
              return "https://api-kovan.etherscan.io";
            case "goerli":
              return "https://api-goerli.etherscan.io";
            default:
          }
          return logger70.throwArgumentError(
            "unsupported network",
            "network",
            name
          );
        }
        getUrl(module, params) {
          const query = Object.keys(params).reduce((accum, key2) => {
            const value = params[key2];
            if (value != null) {
              accum += `&${key2}=${value}`;
            }
            return accum;
          }, "");
          const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
          return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
        }
        getPostUrl() {
          return `${this.baseUrl}/api`;
        }
        getPostData(module, params) {
          params.module = module;
          params.apikey = this.apiKey;
          return params;
        }
        fetch(module, params, post) {
          return __awaiter20(this, void 0, void 0, function* () {
            const url = post ? this.getPostUrl() : this.getUrl(module, params);
            const payload = post ? this.getPostData(module, params) : null;
            const procFunc = module === "proxy" ? getJsonResult : getResult2;
            this.emit("debug", {
              action: "request",
              request: url,
              provider: this,
            });
            const connection = {
              url,
              throttleSlotInterval: 1e3,
              throttleCallback: (attempt, url2) => {
                if (this.isCommunityResource()) {
                  showThrottleMessage();
                }
                return Promise.resolve(true);
              },
            };
            let payloadStr = null;
            if (payload) {
              connection.headers = {
                "content-type":
                  "application/x-www-form-urlencoded; charset=UTF-8",
              };
              payloadStr = Object.keys(payload)
                .map((key2) => {
                  return `${key2}=${payload[key2]}`;
                })
                .join("&");
            }
            const result = yield fetchJson(
              connection,
              payloadStr,
              procFunc || getJsonResult
            );
            this.emit("debug", {
              action: "response",
              request: url,
              response: deepCopy6(result),
              provider: this,
            });
            return result;
          });
        }
        detectNetwork() {
          return __awaiter20(this, void 0, void 0, function* () {
            return this.network;
          });
        }
        perform(method, params) {
          const _super = Object.create(null, {
            perform: { get: () => super.perform },
          });
          return __awaiter20(this, void 0, void 0, function* () {
            switch (method) {
              case "getBlockNumber":
                return this.fetch("proxy", { action: "eth_blockNumber" });
              case "getGasPrice":
                return this.fetch("proxy", { action: "eth_gasPrice" });
              case "getBalance":
                return this.fetch("account", {
                  action: "balance",
                  address: params.address,
                  tag: params.blockTag,
                });
              case "getTransactionCount":
                return this.fetch("proxy", {
                  action: "eth_getTransactionCount",
                  address: params.address,
                  tag: params.blockTag,
                });
              case "getCode":
                return this.fetch("proxy", {
                  action: "eth_getCode",
                  address: params.address,
                  tag: params.blockTag,
                });
              case "getStorageAt":
                return this.fetch("proxy", {
                  action: "eth_getStorageAt",
                  address: params.address,
                  position: params.position,
                  tag: params.blockTag,
                });
              case "sendTransaction":
                return this.fetch(
                  "proxy",
                  {
                    action: "eth_sendRawTransaction",
                    hex: params.signedTransaction,
                  },
                  true
                ).catch((error) => {
                  return checkError2(
                    "sendTransaction",
                    error,
                    params.signedTransaction
                  );
                });
              case "getBlock":
                if (params.blockTag) {
                  return this.fetch("proxy", {
                    action: "eth_getBlockByNumber",
                    tag: params.blockTag,
                    boolean: params.includeTransactions ? "true" : "false",
                  });
                }
                throw new Error("getBlock by blockHash not implemented");
              case "getTransaction":
                return this.fetch("proxy", {
                  action: "eth_getTransactionByHash",
                  txhash: params.transactionHash,
                });
              case "getTransactionReceipt":
                return this.fetch("proxy", {
                  action: "eth_getTransactionReceipt",
                  txhash: params.transactionHash,
                });
              case "call": {
                if (params.blockTag !== "latest") {
                  throw new Error(
                    "EtherscanProvider does not support blockTag for call"
                  );
                }
                const postData = getTransactionPostData(params.transaction);
                postData.module = "proxy";
                postData.action = "eth_call";
                try {
                  return yield this.fetch("proxy", postData, true);
                } catch (error) {
                  return checkError2("call", error, params.transaction);
                }
              }
              case "estimateGas": {
                const postData = getTransactionPostData(params.transaction);
                postData.module = "proxy";
                postData.action = "eth_estimateGas";
                try {
                  return yield this.fetch("proxy", postData, true);
                } catch (error) {
                  return checkError2("estimateGas", error, params.transaction);
                }
              }
              case "getLogs": {
                const args = { action: "getLogs" };
                if (params.filter.fromBlock) {
                  args.fromBlock = checkLogTag(params.filter.fromBlock);
                }
                if (params.filter.toBlock) {
                  args.toBlock = checkLogTag(params.filter.toBlock);
                }
                if (params.filter.address) {
                  args.address = params.filter.address;
                }
                if (params.filter.topics && params.filter.topics.length > 0) {
                  if (params.filter.topics.length > 1) {
                    logger70.throwError(
                      "unsupported topic count",
                      Logger20.errors.UNSUPPORTED_OPERATION,
                      { topics: params.filter.topics }
                    );
                  }
                  if (params.filter.topics.length === 1) {
                    const topic0 = params.filter.topics[0];
                    if (typeof topic0 !== "string" || topic0.length !== 66) {
                      logger70.throwError(
                        "unsupported topic format",
                        Logger20.errors.UNSUPPORTED_OPERATION,
                        { topic0 }
                      );
                    }
                    args.topic0 = topic0;
                  }
                }
                const logs = yield this.fetch("logs", args);
                let blocks = {};
                for (let i = 0; i < logs.length; i++) {
                  const log2 = logs[i];
                  if (log2.blockHash != null) {
                    continue;
                  }
                  if (blocks[log2.blockNumber] == null) {
                    const block = yield this.getBlock(log2.blockNumber);
                    if (block) {
                      blocks[log2.blockNumber] = block.hash;
                    }
                  }
                  log2.blockHash = blocks[log2.blockNumber];
                }
                return logs;
              }
              case "getEtherPrice":
                if (this.network.name !== "homestead") {
                  return 0;
                }
                return parseFloat(
                  (yield this.fetch("stats", { action: "ethprice" })).ethusd
                );
              default:
                break;
            }
            return _super.perform.call(this, method, params);
          });
        }
        getHistory(addressOrName, startBlock, endBlock) {
          return __awaiter20(this, void 0, void 0, function* () {
            const params = {
              action: "txlist",
              address: yield this.resolveName(addressOrName),
              startblock: startBlock == null ? 0 : startBlock,
              endblock: endBlock == null ? 99999999 : endBlock,
              sort: "asc",
            };
            const result = yield this.fetch("account", params);
            return result.map((tx) => {
              ["contractAddress", "to"].forEach(function (key2) {
                if (tx[key2] == "") {
                  delete tx[key2];
                }
              });
              if (tx.creates == null && tx.contractAddress != null) {
                tx.creates = tx.contractAddress;
              }
              const item = this.formatter.transactionResponse(tx);
              if (tx.timeStamp) {
                item.timestamp = parseInt(tx.timeStamp);
              }
              return item;
            });
          });
        }
        isCommunityResource() {
          return this.apiKey === defaultApiKey2;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
  function now() {
    return new Date().getTime();
  }
  function checkNetworks(networks2) {
    let result = null;
    for (let i = 0; i < networks2.length; i++) {
      const network = networks2[i];
      if (network == null) {
        return null;
      }
      if (result) {
        if (
          !(
            result.name === network.name &&
            result.chainId === network.chainId &&
            (result.ensAddress === network.ensAddress ||
              (result.ensAddress == null && network.ensAddress == null))
          )
        ) {
          logger71.throwArgumentError(
            "provider mismatch",
            "networks",
            networks2
          );
        }
      } else {
        result = network;
      }
    }
    return result;
  }
  function median(values, maxDelta) {
    values = values.slice().sort();
    const middle = Math.floor(values.length / 2);
    if (values.length % 2) {
      return values[middle];
    }
    const a2 = values[middle - 1],
      b2 = values[middle];
    if (maxDelta != null && Math.abs(a2 - b2) > maxDelta) {
      return null;
    }
    return (a2 + b2) / 2;
  }
  function serialize2(value) {
    if (value === null) {
      return "null";
    } else if (typeof value === "number" || typeof value === "boolean") {
      return JSON.stringify(value);
    } else if (typeof value === "string") {
      return value;
    } else if (BigNumber.isBigNumber(value)) {
      return value.toString();
    } else if (Array.isArray(value)) {
      return JSON.stringify(value.map((i) => serialize2(i)));
    } else if (typeof value === "object") {
      const keys = Object.keys(value);
      keys.sort();
      return (
        "{" +
        keys
          .map((key2) => {
            let v2 = value[key2];
            if (typeof v2 === "function") {
              v2 = "[function]";
            } else {
              v2 = serialize2(v2);
            }
            return JSON.stringify(key2) + ":" + v2;
          })
          .join(",") +
        "}"
      );
    }
    throw new Error("unknown value type: " + typeof value);
  }
  function stall2(duration) {
    let cancel = null;
    let timer2 = null;
    let promise = new Promise((resolve2) => {
      cancel = function () {
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        resolve2();
      };
      timer2 = setTimeout(cancel, duration);
    });
    const wait = (func) => {
      promise = promise.then(func);
      return promise;
    };
    function getPromise() {
      return promise;
    }
    return { cancel, getPromise, wait };
  }
  function exposeDebugConfig(config, now2) {
    const result = {
      weight: config.weight,
    };
    Object.defineProperty(result, "provider", { get: () => config.provider });
    if (config.start) {
      result.start = config.start;
    }
    if (now2) {
      result.duration = now2 - config.start;
    }
    if (config.done) {
      if (config.error) {
        result.error = config.error;
      } else {
        result.result = config.result || null;
      }
    }
    return result;
  }
  function normalizedTally(normalize, quorum) {
    return function (configs) {
      const tally = {};
      configs.forEach((c2) => {
        const value = normalize(c2.result);
        if (!tally[value]) {
          tally[value] = { count: 0, result: c2.result };
        }
        tally[value].count++;
      });
      const keys = Object.keys(tally);
      for (let i = 0; i < keys.length; i++) {
        const check = tally[keys[i]];
        if (check.count >= quorum) {
          return check.result;
        }
      }
      return void 0;
    };
  }
  function getProcessFunc(provider, method, params) {
    let normalize = serialize2;
    switch (method) {
      case "getBlockNumber":
        return function (configs) {
          const values = configs.map((c2) => c2.result);
          let blockNumber = median(
            configs.map((c2) => c2.result),
            2
          );
          if (blockNumber == null) {
            return void 0;
          }
          blockNumber = Math.ceil(blockNumber);
          if (values.indexOf(blockNumber + 1) >= 0) {
            blockNumber++;
          }
          if (blockNumber >= provider._highestBlockNumber) {
            provider._highestBlockNumber = blockNumber;
          }
          return provider._highestBlockNumber;
        };
      case "getGasPrice":
        return function (configs) {
          const values = configs.map((c2) => c2.result);
          values.sort();
          return values[Math.floor(values.length / 2)];
        };
      case "getEtherPrice":
        return function (configs) {
          return median(configs.map((c2) => c2.result));
        };
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
      case "getStorageAt":
      case "call":
      case "estimateGas":
      case "getLogs":
        break;
      case "getTransaction":
      case "getTransactionReceipt":
        normalize = function (tx) {
          if (tx == null) {
            return null;
          }
          tx = shallowCopy4(tx);
          tx.confirmations = -1;
          return serialize2(tx);
        };
        break;
      case "getBlock":
        if (params.includeTransactions) {
          normalize = function (block) {
            if (block == null) {
              return null;
            }
            block = shallowCopy4(block);
            block.transactions = block.transactions.map((tx) => {
              tx = shallowCopy4(tx);
              tx.confirmations = -1;
              return tx;
            });
            return serialize2(block);
          };
        } else {
          normalize = function (block) {
            if (block == null) {
              return null;
            }
            return serialize2(block);
          };
        }
        break;
      default:
        throw new Error("unknown method: " + method);
    }
    return normalizedTally(normalize, provider.quorum);
  }
  function waitForSync(config, blockNumber) {
    return __awaiter21(this, void 0, void 0, function* () {
      const provider = config.provider;
      if (
        (provider.blockNumber != null && provider.blockNumber >= blockNumber) ||
        blockNumber === -1
      ) {
        return provider;
      }
      return poll(
        () => {
          return new Promise((resolve2, reject) => {
            setTimeout(function () {
              if (provider.blockNumber >= blockNumber) {
                return resolve2(provider);
              }
              if (config.cancelled) {
                return resolve2(null);
              }
              return resolve2(void 0);
            }, 0);
          });
        },
        { oncePoll: provider }
      );
    });
  }
  function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter21(this, void 0, void 0, function* () {
      let provider = config.provider;
      switch (method) {
        case "getBlockNumber":
        case "getGasPrice":
          return provider[method]();
        case "getEtherPrice":
          if (provider.getEtherPrice) {
            return provider.getEtherPrice();
          }
          break;
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
          if (params.blockTag && isHexString18(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.address, params.blockTag || "latest");
        case "getStorageAt":
          if (params.blockTag && isHexString18(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getStorageAt(
            params.address,
            params.position,
            params.blockTag || "latest"
          );
        case "getBlock":
          if (params.blockTag && isHexString18(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[
            params.includeTransactions ? "getBlockWithTransactions" : "getBlock"
          ](params.blockTag || params.blockHash);
        case "call":
        case "estimateGas":
          if (params.blockTag && isHexString18(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.transaction);
        case "getTransaction":
        case "getTransactionReceipt":
          return provider[method](params.transactionHash);
        case "getLogs": {
          let filter = params.filter;
          if (
            (filter.fromBlock && isHexString18(filter.fromBlock)) ||
            (filter.toBlock && isHexString18(filter.toBlock))
          ) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getLogs(filter);
        }
      }
      return logger71.throwError(
        "unknown method error",
        Logger20.errors.UNKNOWN_ERROR,
        {
          method,
          params,
        }
      );
    });
  }
  var __awaiter21,
    logger71,
    nextRid,
    ForwardErrors,
    ForwardProperties,
    FallbackProvider;
  var init_fallback_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/fallback-provider.js"() {
      "use strict";
      init_lib27();
      init_lib3();
      init_lib73();
      init_lib74();
      init_lib63();
      init_lib81();
      init_base_provider();
      init_formatter();
      init_lib71();
      init_version77();
      __awaiter21 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger71 = new Logger20(version77);
      nextRid = 1;
      ForwardErrors = [
        Logger20.errors.CALL_EXCEPTION,
        Logger20.errors.INSUFFICIENT_FUNDS,
        Logger20.errors.NONCE_EXPIRED,
        Logger20.errors.REPLACEMENT_UNDERPRICED,
        Logger20.errors.UNPREDICTABLE_GAS_LIMIT,
      ];
      ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
      ];
      FallbackProvider = class extends BaseProvider {
        constructor(providers2, quorum) {
          logger71.checkNew(new.target, FallbackProvider);
          if (providers2.length === 0) {
            logger71.throwArgumentError(
              "missing providers",
              "providers",
              providers2
            );
          }
          const providerConfigs = providers2.map((configOrProvider, index) => {
            if (Provider.isProvider(configOrProvider)) {
              const stallTimeout = isCommunityResource(configOrProvider)
                ? 2e3
                : 750;
              const priority = 1;
              return Object.freeze({
                provider: configOrProvider,
                weight: 1,
                stallTimeout,
                priority,
              });
            }
            const config = shallowCopy4(configOrProvider);
            if (config.priority == null) {
              config.priority = 1;
            }
            if (config.stallTimeout == null) {
              config.stallTimeout = isCommunityResource(configOrProvider)
                ? 2e3
                : 750;
            }
            if (config.weight == null) {
              config.weight = 1;
            }
            const weight = config.weight;
            if (weight % 1 || weight > 512 || weight < 1) {
              logger71.throwArgumentError(
                "invalid weight; must be integer in [1, 512]",
                `providers[${index}].weight`,
                weight
              );
            }
            return Object.freeze(config);
          });
          const total = providerConfigs.reduce(
            (accum, c2) => accum + c2.weight,
            0
          );
          if (quorum == null) {
            quorum = total / 2;
          } else if (quorum > total) {
            logger71.throwArgumentError(
              "quorum will always fail; larger than total weight",
              "quorum",
              quorum
            );
          }
          let networkOrReady = checkNetworks(
            providerConfigs.map((c2) => c2.provider.network)
          );
          if (networkOrReady == null) {
            networkOrReady = new Promise((resolve2, reject) => {
              setTimeout(() => {
                this.detectNetwork().then(resolve2, reject);
              }, 0);
            });
          }
          super(networkOrReady);
          defineReadOnly12(
            this,
            "providerConfigs",
            Object.freeze(providerConfigs)
          );
          defineReadOnly12(this, "quorum", quorum);
          this._highestBlockNumber = -1;
        }
        detectNetwork() {
          return __awaiter21(this, void 0, void 0, function* () {
            const networks2 = yield Promise.all(
              this.providerConfigs.map((c2) => c2.provider.getNetwork())
            );
            return checkNetworks(networks2);
          });
        }
        perform(method, params) {
          return __awaiter21(this, void 0, void 0, function* () {
            if (method === "sendTransaction") {
              const results = yield Promise.all(
                this.providerConfigs.map((c2) => {
                  return c2.provider
                    .sendTransaction(params.signedTransaction)
                    .then(
                      (result) => {
                        return result.hash;
                      },
                      (error) => {
                        return error;
                      }
                    );
                })
              );
              for (let i2 = 0; i2 < results.length; i2++) {
                const result = results[i2];
                if (typeof result === "string") {
                  return result;
                }
              }
              throw results[0];
            }
            if (
              this._highestBlockNumber === -1 &&
              method !== "getBlockNumber"
            ) {
              yield this.getBlockNumber();
            }
            const processFunc = getProcessFunc(this, method, params);
            const configs = shuffled(this.providerConfigs.map(shallowCopy4));
            configs.sort((a2, b2) => a2.priority - b2.priority);
            const currentBlockNumber = this._highestBlockNumber;
            let i = 0;
            let first = true;
            while (true) {
              const t0 = now();
              let inflightWeight = configs
                .filter((c2) => c2.runner && t0 - c2.start < c2.stallTimeout)
                .reduce((accum, c2) => accum + c2.weight, 0);
              while (inflightWeight < this.quorum && i < configs.length) {
                const config = configs[i++];
                const rid = nextRid++;
                config.start = now();
                config.staller = stall2(config.stallTimeout);
                config.staller.wait(() => {
                  config.staller = null;
                });
                config.runner = getRunner(
                  config,
                  currentBlockNumber,
                  method,
                  params
                ).then(
                  (result) => {
                    config.done = true;
                    config.result = result;
                    if (this.listenerCount("debug")) {
                      this.emit("debug", {
                        action: "request",
                        rid,
                        backend: exposeDebugConfig(config, now()),
                        request: { method, params: deepCopy6(params) },
                        provider: this,
                      });
                    }
                  },
                  (error) => {
                    config.done = true;
                    config.error = error;
                    if (this.listenerCount("debug")) {
                      this.emit("debug", {
                        action: "request",
                        rid,
                        backend: exposeDebugConfig(config, now()),
                        request: { method, params: deepCopy6(params) },
                        provider: this,
                      });
                    }
                  }
                );
                if (this.listenerCount("debug")) {
                  this.emit("debug", {
                    action: "request",
                    rid,
                    backend: exposeDebugConfig(config, null),
                    request: { method, params: deepCopy6(params) },
                    provider: this,
                  });
                }
                inflightWeight += config.weight;
              }
              const waiting = [];
              configs.forEach((c2) => {
                if (c2.done || !c2.runner) {
                  return;
                }
                waiting.push(c2.runner);
                if (c2.staller) {
                  waiting.push(c2.staller.getPromise());
                }
              });
              if (waiting.length) {
                yield Promise.race(waiting);
              }
              const results = configs.filter(
                (c2) => c2.done && c2.error == null
              );
              if (results.length >= this.quorum) {
                const result = processFunc(results);
                if (result !== void 0) {
                  configs.forEach((c2) => {
                    if (c2.staller) {
                      c2.staller.cancel();
                    }
                    c2.cancelled = true;
                  });
                  return result;
                }
                if (!first) {
                  yield stall2(100).getPromise();
                }
                first = false;
              }
              const errors = configs.reduce((accum, c2) => {
                if (!c2.done || c2.error == null) {
                  return accum;
                }
                const code = c2.error.code;
                if (ForwardErrors.indexOf(code) >= 0) {
                  if (!accum[code]) {
                    accum[code] = { error: c2.error, weight: 0 };
                  }
                  accum[code].weight += c2.weight;
                }
                return accum;
              }, {});
              Object.keys(errors).forEach((errorCode) => {
                const tally = errors[errorCode];
                if (tally.weight < this.quorum) {
                  return;
                }
                configs.forEach((c2) => {
                  if (c2.staller) {
                    c2.staller.cancel();
                  }
                  c2.cancelled = true;
                });
                const e = tally.error;
                const props = {};
                ForwardProperties.forEach((name2) => {
                  if (e[name2] == null) {
                    return;
                  }
                  props[name2] = e[name2];
                });
                logger71.throwError(e.reason || e.message, errorCode, props);
              });
              if (configs.filter((c2) => !c2.done).length === 0) {
                break;
              }
            }
            configs.forEach((c2) => {
              if (c2.staller) {
                c2.staller.cancel();
              }
              c2.cancelled = true;
            });
            return logger71.throwError(
              "failed to meet quorum",
              Logger20.errors.SERVER_ERROR,
              {
                method,
                params,
                results: configs.map((c2) => exposeDebugConfig(c2)),
                provider: this,
              }
            );
          });
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
  var IpcProvider;
  var init_ipc_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/ipc-provider.js"() {
      "use strict";
      IpcProvider = null;
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/infura-provider.js
  var logger72, defaultProjectId, InfuraWebSocketProvider, InfuraProvider;
  var init_infura_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/infura-provider.js"() {
      "use strict";
      init_lib74();
      init_websocket_provider();
      init_formatter();
      init_lib71();
      init_version77();
      init_url_json_rpc_provider();
      logger72 = new Logger20(version77);
      defaultProjectId = "84842078b09946638c03157f83405213";
      InfuraWebSocketProvider = class extends WebSocketProvider {
        constructor(network, apiKey) {
          const provider = new InfuraProvider(network, apiKey);
          const connection = provider.connection;
          if (connection.password) {
            logger72.throwError(
              "INFURA WebSocket project secrets unsupported",
              Logger20.errors.UNSUPPORTED_OPERATION,
              {
                operation: "InfuraProvider.getWebSocketProvider()",
              }
            );
          }
          const url = connection.url
            .replace(/^http/i, "ws")
            .replace("/v3/", "/ws/v3/");
          super(url, network);
          defineReadOnly12(this, "apiKey", provider.projectId);
          defineReadOnly12(this, "projectId", provider.projectId);
          defineReadOnly12(this, "projectSecret", provider.projectSecret);
        }
        isCommunityResource() {
          return this.projectId === defaultProjectId;
        }
      };
      InfuraProvider = class extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
          return new InfuraWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
          const apiKeyObj = {
            apiKey: defaultProjectId,
            projectId: defaultProjectId,
            projectSecret: null,
          };
          if (apiKey == null) {
            return apiKeyObj;
          }
          if (typeof apiKey === "string") {
            apiKeyObj.projectId = apiKey;
          } else if (apiKey.projectSecret != null) {
            logger72.assertArgument(
              typeof apiKey.projectId === "string",
              "projectSecret requires a projectId",
              "projectId",
              apiKey.projectId
            );
            logger72.assertArgument(
              typeof apiKey.projectSecret === "string",
              "invalid projectSecret",
              "projectSecret",
              "[REDACTED]"
            );
            apiKeyObj.projectId = apiKey.projectId;
            apiKeyObj.projectSecret = apiKey.projectSecret;
          } else if (apiKey.projectId) {
            apiKeyObj.projectId = apiKey.projectId;
          }
          apiKeyObj.apiKey = apiKeyObj.projectId;
          return apiKeyObj;
        }
        static getUrl(network, apiKey) {
          let host = null;
          switch (network ? network.name : "unknown") {
            case "homestead":
              host = "mainnet.infura.io";
              break;
            case "ropsten":
              host = "ropsten.infura.io";
              break;
            case "rinkeby":
              host = "rinkeby.infura.io";
              break;
            case "kovan":
              host = "kovan.infura.io";
              break;
            case "goerli":
              host = "goerli.infura.io";
              break;
            case "matic":
              host = "polygon-mainnet.infura.io";
              break;
            case "maticmum":
              host = "polygon-mumbai.infura.io";
              break;
            case "optimism":
              host = "optimism-mainnet.infura.io";
              break;
            case "optimism-kovan":
              host = "optimism-kovan.infura.io";
              break;
            case "arbitrum":
              host = "arbitrum-mainnet.infura.io";
              break;
            case "arbitrum-rinkeby":
              host = "arbitrum-rinkeby.infura.io";
              break;
            default:
              logger72.throwError(
                "unsupported network",
                Logger20.errors.INVALID_ARGUMENT,
                {
                  argument: "network",
                  value: network,
                }
              );
          }
          const connection = {
            allowGzip: true,
            url: "https://" + host + "/v3/" + apiKey.projectId,
            throttleCallback: (attempt, url) => {
              if (apiKey.projectId === defaultProjectId) {
                showThrottleMessage();
              }
              return Promise.resolve(true);
            },
          };
          if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
          }
          return connection;
        }
        isCommunityResource() {
          return this.projectId === defaultProjectId;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
  var JsonRpcBatchProvider;
  var init_json_rpc_batch_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"() {
      init_lib74();
      init_lib81();
      init_json_rpc_provider();
      JsonRpcBatchProvider = class extends JsonRpcProvider {
        send(method, params) {
          const request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0",
          };
          if (this._pendingBatch == null) {
            this._pendingBatch = [];
          }
          const inflightRequest = { request, resolve: null, reject: null };
          const promise = new Promise((resolve2, reject) => {
            inflightRequest.resolve = resolve2;
            inflightRequest.reject = reject;
          });
          this._pendingBatch.push(inflightRequest);
          if (!this._pendingBatchAggregator) {
            this._pendingBatchAggregator = setTimeout(() => {
              const batch = this._pendingBatch;
              this._pendingBatch = null;
              this._pendingBatchAggregator = null;
              const request2 = batch.map((inflight) => inflight.request);
              this.emit("debug", {
                action: "requestBatch",
                request: deepCopy6(request2),
                provider: this,
              });
              return fetchJson(this.connection, JSON.stringify(request2)).then(
                (result) => {
                  this.emit("debug", {
                    action: "response",
                    request: request2,
                    response: result,
                    provider: this,
                  });
                  batch.forEach((inflightRequest2, index) => {
                    const payload = result[index];
                    if (payload.error) {
                      const error = new Error(payload.error.message);
                      error.code = payload.error.code;
                      error.data = payload.error.data;
                      inflightRequest2.reject(error);
                    } else {
                      inflightRequest2.resolve(payload.result);
                    }
                  });
                },
                (error) => {
                  this.emit("debug", {
                    action: "response",
                    error,
                    request: request2,
                    provider: this,
                  });
                  batch.forEach((inflightRequest2) => {
                    inflightRequest2.reject(error);
                  });
                }
              );
            }, 10);
          }
          return promise;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
  var logger73, defaultApiKey3, NodesmithProvider;
  var init_nodesmith_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js"() {
      "use strict";
      init_url_json_rpc_provider();
      init_lib71();
      init_version77();
      logger73 = new Logger20(version77);
      defaultApiKey3 = "ETHERS_JS_SHARED";
      NodesmithProvider = class extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
          if (apiKey && typeof apiKey !== "string") {
            logger73.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          }
          return apiKey || defaultApiKey3;
        }
        static getUrl(network, apiKey) {
          logger73.warn(
            "NodeSmith will be discontinued on 2019-12-20; please migrate to another platform."
          );
          let host = null;
          switch (network.name) {
            case "homestead":
              host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
              break;
            case "ropsten":
              host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
              break;
            case "rinkeby":
              host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
              break;
            case "goerli":
              host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
              break;
            case "kovan":
              host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
              break;
            default:
              logger73.throwArgumentError(
                "unsupported network",
                "network",
                arguments[0]
              );
          }
          return host + "?apiKey=" + apiKey;
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
  var logger74, defaultApplicationIds, PocketProvider;
  var init_pocket_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/pocket-provider.js"() {
      "use strict";
      init_lib74();
      init_lib71();
      init_version77();
      init_url_json_rpc_provider();
      logger74 = new Logger20(version77);
      defaultApplicationIds = {
        homestead: "6004bcd10040261633ade990",
        ropsten: "6004bd4d0040261633ade991",
        rinkeby: "6004bda20040261633ade994",
        goerli: "6004bd860040261633ade992",
      };
      PocketProvider = class extends UrlJsonRpcProvider {
        constructor(network, apiKey) {
          if (apiKey == null) {
            const n = getStatic3(new.target, "getNetwork")(network);
            if (n) {
              const applicationId = defaultApplicationIds[n.name];
              if (applicationId) {
                apiKey = {
                  applicationId,
                  loadBalancer: true,
                };
              }
            }
            if (apiKey == null) {
              logger74.throwError(
                "unsupported network",
                Logger20.errors.INVALID_ARGUMENT,
                {
                  argument: "network",
                  value: network,
                }
              );
            }
          }
          super(network, apiKey);
        }
        static getApiKey(apiKey) {
          if (apiKey == null) {
            logger74.throwArgumentError(
              "PocketProvider.getApiKey does not support null apiKey",
              "apiKey",
              apiKey
            );
          }
          const apiKeyObj = {
            applicationId: null,
            loadBalancer: false,
            applicationSecretKey: null,
          };
          if (typeof apiKey === "string") {
            apiKeyObj.applicationId = apiKey;
          } else if (apiKey.applicationSecretKey != null) {
            logger74.assertArgument(
              typeof apiKey.applicationId === "string",
              "applicationSecretKey requires an applicationId",
              "applicationId",
              apiKey.applicationId
            );
            logger74.assertArgument(
              typeof apiKey.applicationSecretKey === "string",
              "invalid applicationSecretKey",
              "applicationSecretKey",
              "[REDACTED]"
            );
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
          } else if (apiKey.applicationId) {
            logger74.assertArgument(
              typeof apiKey.applicationId === "string",
              "apiKey.applicationId must be a string",
              "apiKey.applicationId",
              apiKey.applicationId
            );
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
          } else {
            logger74.throwArgumentError(
              "unsupported PocketProvider apiKey",
              "apiKey",
              apiKey
            );
          }
          return apiKeyObj;
        }
        static getUrl(network, apiKey) {
          let host = null;
          switch (network ? network.name : "unknown") {
            case "homestead":
              host = "eth-mainnet.gateway.pokt.network";
              break;
            case "ropsten":
              host = "eth-ropsten.gateway.pokt.network";
              break;
            case "rinkeby":
              host = "eth-rinkeby.gateway.pokt.network";
              break;
            case "goerli":
              host = "eth-goerli.gateway.pokt.network";
              break;
            default:
              logger74.throwError(
                "unsupported network",
                Logger20.errors.INVALID_ARGUMENT,
                {
                  argument: "network",
                  value: network,
                }
              );
          }
          let url = null;
          if (apiKey.loadBalancer) {
            url = `https://${host}/v1/lb/${apiKey.applicationId}`;
          } else {
            url = `https://${host}/v1/${apiKey.applicationId}`;
          }
          const connection = { url };
          connection.headers = {};
          if (apiKey.applicationSecretKey != null) {
            connection.user = "";
            connection.password = apiKey.applicationSecretKey;
          }
          return connection;
        }
        isCommunityResource() {
          return (
            this.applicationId === defaultApplicationIds[this.network.name]
          );
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/web3-provider.js
  function buildWeb3LegacyFetcher(provider, sendFunc) {
    const fetcher = "Web3LegacyFetcher";
    return function (method, params) {
      const request = {
        method,
        params,
        id: _nextId++,
        jsonrpc: "2.0",
      };
      return new Promise((resolve2, reject) => {
        this.emit("debug", {
          action: "request",
          fetcher,
          request: deepCopy6(request),
          provider: this,
        });
        sendFunc(request, (error, response) => {
          if (error) {
            this.emit("debug", {
              action: "response",
              fetcher,
              error,
              request,
              provider: this,
            });
            return reject(error);
          }
          this.emit("debug", {
            action: "response",
            fetcher,
            request,
            response,
            provider: this,
          });
          if (response.error) {
            const error2 = new Error(response.error.message);
            error2.code = response.error.code;
            error2.data = response.error.data;
            return reject(error2);
          }
          resolve2(response.result);
        });
      });
    };
  }
  function buildEip1193Fetcher(provider) {
    return function (method, params) {
      if (params == null) {
        params = [];
      }
      const request = { method, params };
      this.emit("debug", {
        action: "request",
        fetcher: "Eip1193Fetcher",
        request: deepCopy6(request),
        provider: this,
      });
      return provider.request(request).then(
        (response) => {
          this.emit("debug", {
            action: "response",
            fetcher: "Eip1193Fetcher",
            request,
            response,
            provider: this,
          });
          return response;
        },
        (error) => {
          this.emit("debug", {
            action: "response",
            fetcher: "Eip1193Fetcher",
            request,
            error,
            provider: this,
          });
          throw error;
        }
      );
    };
  }
  var logger75, _nextId, Web3Provider;
  var init_web3_provider = __esm({
    "node_modules/@ethersproject/providers/lib.esm/web3-provider.js"() {
      "use strict";
      init_lib74();
      init_lib71();
      init_version77();
      init_json_rpc_provider();
      logger75 = new Logger20(version77);
      _nextId = 1;
      Web3Provider = class extends JsonRpcProvider {
        constructor(provider, network) {
          logger75.checkNew(new.target, Web3Provider);
          if (provider == null) {
            logger75.throwArgumentError(
              "missing provider",
              "provider",
              provider
            );
          }
          let path3 = null;
          let jsonRpcFetchFunc = null;
          let subprovider = null;
          if (typeof provider === "function") {
            path3 = "unknown:";
            jsonRpcFetchFunc = provider;
          } else {
            path3 = provider.host || provider.path || "";
            if (!path3 && provider.isMetaMask) {
              path3 = "metamask";
            }
            subprovider = provider;
            if (provider.request) {
              if (path3 === "") {
                path3 = "eip-1193:";
              }
              jsonRpcFetchFunc = buildEip1193Fetcher(provider);
            } else if (provider.sendAsync) {
              jsonRpcFetchFunc = buildWeb3LegacyFetcher(
                provider,
                provider.sendAsync.bind(provider)
              );
            } else if (provider.send) {
              jsonRpcFetchFunc = buildWeb3LegacyFetcher(
                provider,
                provider.send.bind(provider)
              );
            } else {
              logger75.throwArgumentError(
                "unsupported provider",
                "provider",
                provider
              );
            }
            if (!path3) {
              path3 = "unknown:";
            }
          }
          super(path3, network);
          defineReadOnly12(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
          defineReadOnly12(this, "provider", subprovider);
        }
        send(method, params) {
          return this.jsonRpcFetchFunc(method, params);
        }
      };
    },
  });

  // node_modules/@ethersproject/providers/lib.esm/index.js
  var lib_exports4 = {};
  __export(lib_exports4, {
    AlchemyProvider: () => AlchemyProvider,
    AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
    BaseProvider: () => BaseProvider,
    CloudflareProvider: () => CloudflareProvider,
    EtherscanProvider: () => EtherscanProvider,
    FallbackProvider: () => FallbackProvider,
    Formatter: () => Formatter,
    InfuraProvider: () => InfuraProvider,
    InfuraWebSocketProvider: () => InfuraWebSocketProvider,
    IpcProvider: () => IpcProvider,
    JsonRpcBatchProvider: () => JsonRpcBatchProvider,
    JsonRpcProvider: () => JsonRpcProvider,
    JsonRpcSigner: () => JsonRpcSigner,
    NodesmithProvider: () => NodesmithProvider,
    PocketProvider: () => PocketProvider,
    Provider: () => Provider,
    Resolver: () => Resolver2,
    StaticJsonRpcProvider: () => StaticJsonRpcProvider,
    UrlJsonRpcProvider: () => UrlJsonRpcProvider,
    Web3Provider: () => Web3Provider,
    WebSocketProvider: () => WebSocketProvider,
    getDefaultProvider: () => getDefaultProvider,
    getNetwork: () => getNetwork,
    isCommunityResourcable: () => isCommunityResourcable,
    isCommunityResource: () => isCommunityResource,
    showThrottleMessage: () => showThrottleMessage,
  });
  function getDefaultProvider(network, options) {
    if (network == null) {
      network = "homestead";
    }
    if (typeof network === "string") {
      const match = network.match(/^(ws|http)s?:/i);
      if (match) {
        switch (match[1]) {
          case "http":
            return new JsonRpcProvider(network);
          case "ws":
            return new WebSocketProvider(network);
          default:
            logger76.throwArgumentError(
              "unsupported URL scheme",
              "network",
              network
            );
        }
      }
    }
    const n = getNetwork(network);
    if (!n || !n._defaultProvider) {
      logger76.throwError(
        "unsupported getDefaultProvider network",
        Logger20.errors.NETWORK_ERROR,
        {
          operation: "getDefaultProvider",
          network,
        }
      );
    }
    return n._defaultProvider(
      {
        FallbackProvider,
        AlchemyProvider,
        CloudflareProvider,
        EtherscanProvider,
        InfuraProvider,
        JsonRpcProvider,
        NodesmithProvider,
        PocketProvider,
        Web3Provider,
        IpcProvider,
      },
      options
    );
  }
  var logger76;
  var init_lib83 = __esm({
    "node_modules/@ethersproject/providers/lib.esm/index.js"() {
      "use strict";
      init_lib27();
      init_lib72();
      init_base_provider();
      init_alchemy_provider();
      init_cloudflare_provider();
      init_etherscan_provider();
      init_fallback_provider();
      init_ipc_provider();
      init_infura_provider();
      init_json_rpc_provider();
      init_json_rpc_batch_provider();
      init_nodesmith_provider();
      init_pocket_provider();
      init_url_json_rpc_provider();
      init_web3_provider();
      init_websocket_provider();
      init_formatter();
      init_lib71();
      init_version77();
      logger76 = new Logger20(version77);
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version79;
  var init_version79 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version79 = "logger/5.5.0";
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize23() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors23,
    _censorErrors23,
    LogLevels23,
    _logLevel23,
    _globalLogger23,
    _normalizeError23,
    LogLevel23,
    ErrorCode23,
    HEX23,
    Logger23;
  var init_lib84 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version79();
      _permanentCensorErrors23 = false;
      _censorErrors23 = false;
      LogLevels23 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel23 = LogLevels23["default"];
      _globalLogger23 = null;
      _normalizeError23 = _checkNormalize23();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel23 || (LogLevel23 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode23 || (ErrorCode23 = {}));
      HEX23 = "0123456789abcdef";
      Logger23 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels23[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel23 > LogLevels23[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger23.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger23.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger23.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors23) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger23.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX23[value[i] >> 4];
                  hex += HEX23[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger23.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError23) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger23.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError23,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger23.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger23.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger23.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger23.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger23.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger23.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger23.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger23) {
            _globalLogger23 = new Logger23(version79);
          }
          return _globalLogger23;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger23.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors23) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger23.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors23 = !!censorship;
          _permanentCensorErrors23 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels23[logLevel.toLowerCase()];
          if (level == null) {
            Logger23.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel23 = level;
        }
        static from(version89) {
          return new Logger23(version89);
        }
      };
      Logger23.errors = ErrorCode23;
      Logger23.levels = LogLevel23;
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version80;
  var init_version80 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version80 = "bytes/5.5.0";
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable20(value) {
    return !!value.toHexString;
  }
  function addSlice20(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice20(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isBytesLike9(value) {
    return (isHexString21(value) && !(value.length % 2)) || isBytes20(value);
  }
  function isInteger20(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes20(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger20(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger20(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify20(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger77.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice20(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable20(value)) {
      value = value.toHexString();
    }
    if (isHexString21(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger77.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice20(new Uint8Array(result));
    }
    if (isBytes20(value)) {
      return addSlice20(new Uint8Array(value));
    }
    return logger77.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat10(items) {
    const objects = items.map((item) => arrayify20(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice20(result);
  }
  function stripZeros7(value) {
    let result = arrayify20(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad4(value, length) {
    value = arrayify20(value);
    if (value.length > length) {
      logger77.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice20(result);
  }
  function isHexString21(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify15(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger77.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters15[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable20(value)) {
      return value.toHexString();
    }
    if (isHexString21(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger77.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes20(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters15[(v2 & 240) >> 4] + HexCharacters15[v2 & 15];
      }
      return result;
    }
    return logger77.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength7(data) {
    if (typeof data !== "string") {
      data = hexlify15(data);
    } else if (!isHexString21(data) || data.length % 2) {
      return null;
    }
    return (data.length - 2) / 2;
  }
  function hexDataSlice8(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify15(data);
    } else if (!isHexString21(data) || data.length % 2) {
      logger77.throwArgumentError("invalid hexData", "value", data);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data.substring(offset);
  }
  function hexConcat8(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify15(item).substring(2);
    });
    return result;
  }
  function hexValue2(value) {
    const trimmed = hexStripZeros2(hexlify15(value, { hexPad: "left" }));
    if (trimmed === "0x") {
      return "0x0";
    }
    return trimmed;
  }
  function hexStripZeros2(value) {
    if (typeof value !== "string") {
      value = hexlify15(value);
    }
    if (!isHexString21(value)) {
      logger77.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while (offset < value.length && value[offset] === "0") {
      offset++;
    }
    return "0x" + value.substring(offset);
  }
  function hexZeroPad10(value, length) {
    if (typeof value !== "string") {
      value = hexlify15(value);
    } else if (!isHexString21(value)) {
      logger77.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger77.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature7(signature2) {
    const result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0,
    };
    if (isBytesLike9(signature2)) {
      const bytes = arrayify20(signature2);
      if (bytes.length !== 65) {
        logger77.throwArgumentError(
          "invalid signature string; must be 65 bytes",
          "signature",
          signature2
        );
      }
      result.r = hexlify15(bytes.slice(0, 32));
      result.s = hexlify15(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger77.throwArgumentError(
            "signature invalid v byte",
            "signature",
            signature2
          );
        }
      }
      result.recoveryParam = 1 - (result.v % 2);
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify15(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad4(arrayify20(result._vs), 32);
        result._vs = hexlify15(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger77.throwArgumentError(
            "signature recoveryParam mismatch _vs",
            "signature",
            signature2
          );
        }
        vs2[0] &= 127;
        const s2 = hexlify15(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger77.throwArgumentError(
            "signature v mismatch _vs",
            "signature",
            signature2
          );
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger77.throwArgumentError(
            "signature missing v and recoveryParam",
            "signature",
            signature2
          );
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - (result.v % 2);
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else {
          const recId =
            result.v === 0 || result.v === 1 ? result.v : 1 - (result.v % 2);
          if (result.recoveryParam !== recId) {
            logger77.throwArgumentError(
              "signature recoveryParam mismatch v",
              "signature",
              signature2
            );
          }
        }
      }
      if (result.r == null || !isHexString21(result.r)) {
        logger77.throwArgumentError(
          "signature missing or invalid r",
          "signature",
          signature2
        );
      } else {
        result.r = hexZeroPad10(result.r, 32);
      }
      if (result.s == null || !isHexString21(result.s)) {
        logger77.throwArgumentError(
          "signature missing or invalid s",
          "signature",
          signature2
        );
      } else {
        result.s = hexZeroPad10(result.s, 32);
      }
      const vs = arrayify20(result.s);
      if (vs[0] >= 128) {
        logger77.throwArgumentError(
          "signature s out of range",
          "signature",
          signature2
        );
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify15(vs);
      if (result._vs) {
        if (!isHexString21(result._vs)) {
          logger77.throwArgumentError(
            "signature invalid _vs",
            "signature",
            signature2
          );
        }
        result._vs = hexZeroPad10(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger77.throwArgumentError(
          "signature _vs mismatch v and s",
          "signature",
          signature2
        );
      }
    }
    return result;
  }
  function joinSignature2(signature2) {
    signature2 = splitSignature7(signature2);
    return hexlify15(
      concat10([
        signature2.r,
        signature2.s,
        signature2.recoveryParam ? "0x1c" : "0x1b",
      ])
    );
  }
  var logger77, HexCharacters15;
  var init_lib85 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib84();
      init_version80();
      logger77 = new Logger23(version80);
      HexCharacters15 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/solidity/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version81;
  var init_version81 = __esm({
    "node_modules/@ethersproject/solidity/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version81 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/solidity/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize24() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors24,
    _censorErrors24,
    LogLevels24,
    _logLevel24,
    _globalLogger24,
    _normalizeError24,
    LogLevel24,
    ErrorCode24,
    HEX24,
    Logger24;
  var init_lib86 = __esm({
    "node_modules/@ethersproject/solidity/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version81();
      _permanentCensorErrors24 = false;
      _censorErrors24 = false;
      LogLevels24 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel24 = LogLevels24["default"];
      _globalLogger24 = null;
      _normalizeError24 = _checkNormalize24();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel24 || (LogLevel24 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode24 || (ErrorCode24 = {}));
      HEX24 = "0123456789abcdef";
      Logger24 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels24[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel24 > LogLevels24[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger24.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger24.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger24.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors24) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger24.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX24[value[i] >> 4];
                  hex += HEX24[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger24.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError24) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger24.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError24,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger24.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger24.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger24.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger24.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger24.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger24.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger24.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger24) {
            _globalLogger24 = new Logger24(version81);
          }
          return _globalLogger24;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger24.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors24) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger24.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors24 = !!censorship;
          _permanentCensorErrors24 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels24[logLevel.toLowerCase()];
          if (level == null) {
            Logger24.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel24 = level;
        }
        static from(version89) {
          return new Logger24(version89);
        }
      };
      Logger24.errors = ErrorCode24;
      Logger24.levels = LogLevel24;
    },
  });

  // node_modules/@ethersproject/solidity/node_modules/@ethersproject/bytes/lib.esm/_version.js
  var version82;
  var init_version82 = __esm({
    "node_modules/@ethersproject/solidity/node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
      version82 = "bytes/5.5.0";
    },
  });

  // node_modules/@ethersproject/solidity/node_modules/@ethersproject/bytes/lib.esm/index.js
  function isHexable21(value) {
    return !!value.toHexString;
  }
  function addSlice21(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function () {
      const args = Array.prototype.slice.call(arguments);
      return addSlice21(
        new Uint8Array(Array.prototype.slice.apply(array, args))
      );
    };
    return array;
  }
  function isInteger21(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
  }
  function isBytes21(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (!isInteger21(value.length) || value.length < 0) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v2 = value[i];
      if (!isInteger21(v2) || v2 < 0 || v2 >= 256) {
        return false;
      }
    }
    return true;
  }
  function arrayify21(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger78.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice21(new Uint8Array(result));
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable21(value)) {
      value = value.toHexString();
    }
    if (isHexString22(value)) {
      let hex = value.substring(2);
      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger78.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }
      return addSlice21(new Uint8Array(result));
    }
    if (isBytes21(value)) {
      return addSlice21(new Uint8Array(value));
    }
    return logger78.throwArgumentError(
      "invalid arrayify value",
      "value",
      value
    );
  }
  function concat11(items) {
    const objects = items.map((item) => arrayify21(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice21(result);
  }
  function zeroPad5(value, length) {
    value = arrayify21(value);
    if (value.length > length) {
      logger78.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice21(result);
  }
  function isHexString22(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function hexlify16(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger78.checkSafeUint53(value, "invalid hexlify value");
      let hex = "";
      while (value) {
        hex = HexCharacters16[value & 15] + hex;
        value = Math.floor(value / 16);
      }
      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }
        return "0x" + hex;
      }
      return "0x00";
    }
    if (typeof value === "bigint") {
      value = value.toString(16);
      if (value.length % 2) {
        return "0x0" + value;
      }
      return "0x" + value;
    }
    if (
      options.allowMissingPrefix &&
      typeof value === "string" &&
      value.substring(0, 2) !== "0x"
    ) {
      value = "0x" + value;
    }
    if (isHexable21(value)) {
      return value.toHexString();
    }
    if (isHexString22(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger78.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes21(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v2 = value[i];
        result += HexCharacters16[(v2 & 240) >> 4] + HexCharacters16[v2 & 15];
      }
      return result;
    }
    return logger78.throwArgumentError("invalid hexlify value", "value", value);
  }
  var logger78, HexCharacters16;
  var init_lib87 = __esm({
    "node_modules/@ethersproject/solidity/node_modules/@ethersproject/bytes/lib.esm/index.js"() {
      "use strict";
      init_lib86();
      init_version82();
      logger78 = new Logger24(version82);
      HexCharacters16 = "0123456789abcdef";
    },
  });

  // node_modules/@ethersproject/solidity/lib.esm/_version.js
  var version83;
  var init_version83 = __esm({
    "node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
      version83 = "solidity/5.5.0";
    },
  });

  // node_modules/@ethersproject/solidity/lib.esm/index.js
  function _pack(type, value, isArray) {
    switch (type) {
      case "address":
        if (isArray) {
          return zeroPad5(value, 32);
        }
        return arrayify21(value);
      case "string":
        return toUtf8Bytes(value);
      case "bytes":
        return arrayify21(value);
      case "bool":
        value = value ? "0x01" : "0x00";
        if (isArray) {
          return zeroPad5(value, 32);
        }
        return arrayify21(value);
    }
    let match = type.match(regexNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (
        (match[2] && String(size) !== match[2]) ||
        size % 8 !== 0 ||
        size === 0 ||
        size > 256
      ) {
        logger79.throwArgumentError("invalid number type", "type", type);
      }
      if (isArray) {
        size = 256;
      }
      value = BigNumber.from(value).toTwos(size);
      return zeroPad5(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
      const size = parseInt(match[1]);
      if (String(size) !== match[1] || size === 0 || size > 32) {
        logger79.throwArgumentError("invalid bytes type", "type", type);
      }
      if (arrayify21(value).byteLength !== size) {
        logger79.throwArgumentError(
          `invalid value for ${type}`,
          "value",
          value
        );
      }
      if (isArray) {
        return arrayify21((value + Zeros2).substring(0, 66));
      }
      return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
      const baseType = match[1];
      const count = parseInt(match[2] || String(value.length));
      if (count != value.length) {
        logger79.throwArgumentError(
          `invalid array length for ${type}`,
          "value",
          value
        );
      }
      const result = [];
      value.forEach(function (value2) {
        result.push(_pack(baseType, value2, true));
      });
      return concat11(result);
    }
    return logger79.throwArgumentError("invalid type", "type", type);
  }
  function pack2(types, values) {
    if (types.length != values.length) {
      logger79.throwArgumentError(
        "wrong number of values; expected ${ types.length }",
        "values",
        values
      );
    }
    const tight = [];
    types.forEach(function (type, index) {
      tight.push(_pack(type, values[index]));
    });
    return hexlify16(concat11(tight));
  }
  function keccak2562(types, values) {
    return keccak256(pack2(types, values));
  }
  function sha2562(types, values) {
    return sha256(pack2(types, values));
  }
  var regexBytes, regexNumber, regexArray, Zeros2, logger79;
  var init_lib88 = __esm({
    "node_modules/@ethersproject/solidity/lib.esm/index.js"() {
      "use strict";
      init_lib3();
      init_lib87();
      init_lib11();
      init_lib52();
      init_lib19();
      init_lib86();
      init_version83();
      regexBytes = new RegExp("^bytes([0-9]+)$");
      regexNumber = new RegExp("^(u?int)([0-9]*)$");
      regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
      Zeros2 =
        "0000000000000000000000000000000000000000000000000000000000000000";
      logger79 = new Logger24(version83);
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/properties/lib.esm/_version.js
  var version84;
  var init_version84 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/properties/lib.esm/_version.js"() {
      version84 = "properties/5.5.0";
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/properties/lib.esm/index.js
  function defineReadOnly13(object, name2, value) {
    Object.defineProperty(object, name2, {
      enumerable: true,
      value,
      writable: false,
    });
  }
  function getStatic4(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function resolveProperties6(object) {
    return __awaiter22(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v2) => ({ key: key2, value: v2 }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function checkProperties3(object, properties) {
    if (!object || typeof object !== "object") {
      logger80.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key2) => {
      if (!properties[key2]) {
        logger80.throwArgumentError(
          "invalid object key - " + key2,
          "transaction:" + key2,
          object
        );
      }
    });
  }
  function shallowCopy6(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  function _isFrozen7(object) {
    if (object === void 0 || object === null || opaque7[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        let value = null;
        try {
          value = object[keys[i]];
        } catch (error) {
          continue;
        }
        if (!_isFrozen7(value)) {
          return false;
        }
      }
      return true;
    }
    return logger80.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function _deepCopy7(object) {
    if (_isFrozen7(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy7(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly13(result, key2, deepCopy7(value));
      }
      return result;
    }
    return logger80.throwArgumentError(
      `Cannot deepCopy ${typeof object}`,
      "object",
      object
    );
  }
  function deepCopy7(object) {
    return _deepCopy7(object);
  }
  var __awaiter22, logger80, opaque7;
  var init_lib89 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/properties/lib.esm/index.js"() {
      "use strict";
      init_lib84();
      init_version84();
      __awaiter22 = function (thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2
            ? value
            : new P2(function (resolve2) {
                resolve2(value);
              });
        }
        return new (P2 || (P2 = Promise))(function (resolve2, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve2(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      logger80 = new Logger23(version84);
      opaque7 = {
        bigint: true,
        boolean: true,
        function: true,
        number: true,
        string: true,
      };
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/transactions/lib.esm/_version.js
  var version85;
  var init_version85 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
      version85 = "transactions/5.5.0";
    },
  });

  // node_modules/ethers/node_modules/@ethersproject/transactions/lib.esm/index.js
  function handleAddress2(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber2(value) {
    if (value === "0x") {
      return Zero2;
    }
    return BigNumber.from(value);
  }
  function computeAddress5(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(
      hexDataSlice8(keccak256(hexDataSlice8(publicKey, 1)), 12)
    );
  }
  function recoverAddress3(digest, signature2) {
    return computeAddress5(recoverPublicKey(arrayify20(digest), signature2));
  }
  function formatNumber3(value, name2) {
    const result = stripZeros7(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger81.throwArgumentError(
        "invalid length for " + name2,
        "transaction:" + name2,
        value
      );
    }
    return result;
  }
  function accessSetify4(addr, storageKeys) {
    return {
      address: getAddress(addr),
      storageKeys: (storageKeys || []).map((storageKey, index) => {
        if (hexDataLength7(storageKey) !== 32) {
          logger81.throwArgumentError(
            "invalid access list storageKey",
            `accessList[${addr}:${index}]`,
            storageKey
          );
        }
        return storageKey.toLowerCase();
      }),
    };
  }
  function accessListify4(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger81.throwArgumentError(
              "access list expected to be [ address, storageKeys[] ]",
              `value[${index}]`,
              set
            );
          }
          return accessSetify4(set[0], set[1]);
        }
        return accessSetify4(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify4(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a2, b2) => a2.address.localeCompare(b2.address));
    return result;
  }
  function formatAccessList3(value) {
    return accessListify4(value).map((set) => [set.address, set.storageKeys]);
  }
  function _serializeEip15593(transaction, signature2) {
    if (transaction.gasPrice != null) {
      const gasPrice = BigNumber.from(transaction.gasPrice);
      const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
      if (!gasPrice.eq(maxFeePerGas)) {
        logger81.throwArgumentError(
          "mismatch EIP-1559 gasPrice != maxFeePerGas",
          "tx",
          {
            gasPrice,
            maxFeePerGas,
          }
        );
      }
    }
    const fields = [
      formatNumber3(transaction.chainId || 0, "chainId"),
      formatNumber3(transaction.nonce || 0, "nonce"),
      formatNumber3(
        transaction.maxPriorityFeePerGas || 0,
        "maxPriorityFeePerGas"
      ),
      formatNumber3(transaction.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber3(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber3(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList3(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature7(signature2);
      fields.push(formatNumber3(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros7(sig.r));
      fields.push(stripZeros7(sig.s));
    }
    return hexConcat8(["0x02", encode(fields)]);
  }
  function _serializeEip29303(transaction, signature2) {
    const fields = [
      formatNumber3(transaction.chainId || 0, "chainId"),
      formatNumber3(transaction.nonce || 0, "nonce"),
      formatNumber3(transaction.gasPrice || 0, "gasPrice"),
      formatNumber3(transaction.gasLimit || 0, "gasLimit"),
      transaction.to != null ? getAddress(transaction.to) : "0x",
      formatNumber3(transaction.value || 0, "value"),
      transaction.data || "0x",
      formatAccessList3(transaction.accessList || []),
    ];
    if (signature2) {
      const sig = splitSignature7(signature2);
      fields.push(formatNumber3(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros7(sig.r));
      fields.push(stripZeros7(sig.s));
    }
    return hexConcat8(["0x01", encode(fields)]);
  }
  function _serialize2(transaction, signature2) {
    checkProperties3(transaction, allowedTransactionKeys5);
    const raw = [];
    transactionFields2.forEach(function (fieldInfo) {
      let value = transaction[fieldInfo.name] || [];
      const options = {};
      if (fieldInfo.numeric) {
        options.hexPad = "left";
      }
      value = arrayify20(hexlify15(value, options));
      if (
        fieldInfo.length &&
        value.length !== fieldInfo.length &&
        value.length > 0
      ) {
        logger81.throwArgumentError(
          "invalid length for " + fieldInfo.name,
          "transaction:" + fieldInfo.name,
          value
        );
      }
      if (fieldInfo.maxLength) {
        value = stripZeros7(value);
        if (value.length > fieldInfo.maxLength) {
          logger81.throwArgumentError(
            "invalid length for " + fieldInfo.name,
            "transaction:" + fieldInfo.name,
            value
          );
        }
      }
      raw.push(hexlify15(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
      chainId = transaction.chainId;
      if (typeof chainId !== "number") {
        logger81.throwArgumentError(
          "invalid transaction.chainId",
          "transaction",
          transaction
        );
      }
    } else if (signature2 && !isBytesLike9(signature2) && signature2.v > 28) {
      chainId = Math.floor((signature2.v - 35) / 2);
    }
    if (chainId !== 0) {
      raw.push(hexlify15(chainId));
      raw.push("0x");
      raw.push("0x");
    }
    if (!signature2) {
      return encode(raw);
    }
    const sig = splitSignature7(signature2);
    let v2 = 27 + sig.recoveryParam;
    if (chainId !== 0) {
      raw.pop();
      raw.pop();
      raw.pop();
      v2 += chainId * 2 + 8;
      if (sig.v > 28 && sig.v !== v2) {
        logger81.throwArgumentError(
          "transaction.chainId/signature.v mismatch",
          "signature",
          signature2
        );
      }
    } else if (sig.v !== v2) {
      logger81.throwArgumentError(
        "transaction.chainId/signature.v mismatch",
        "signature",
        signature2
      );
    }
    raw.push(hexlify15(v2));
    raw.push(stripZeros7(arrayify20(sig.r)));
    raw.push(stripZeros7(arrayify20(sig.s)));
    return encode(raw);
  }
  function serialize3(transaction, signature2) {
    if (transaction.type == null || transaction.type === 0) {
      if (transaction.accessList != null) {
        logger81.throwArgumentError(
          "untyped transactions do not support accessList; include type: 1",
          "transaction",
          transaction
        );
      }
      return _serialize2(transaction, signature2);
    }
    switch (transaction.type) {
      case 1:
        return _serializeEip29303(transaction, signature2);
      case 2:
        return _serializeEip15593(transaction, signature2);
      default:
        break;
    }
    return logger81.throwError(
      `unsupported transaction type: ${transaction.type}`,
      Logger23.errors.UNSUPPORTED_OPERATION,
      {
        operation: "serializeTransaction",
        transactionType: transaction.type,
      }
    );
  }
  function _parseEipSignature2(tx, fields, serialize4) {
    try {
      const recid = handleNumber2(fields[0]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error) {
      logger81.throwArgumentError(
        "invalid v for transaction type: 1",
        "v",
        fields[0]
      );
    }
    tx.r = hexZeroPad10(fields[1], 32);
    tx.s = hexZeroPad10(fields[2], 32);
    try {
      const digest = keccak256(serialize4(tx));
      tx.from = recoverAddress3(digest, {
        r: tx.r,
        s: tx.s,
        recoveryParam: tx.v,
      });
    } catch (error) {
      console.log(error);
    }
  }
  function _parseEip15592(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) {
      logger81.throwArgumentError(
        "invalid component count for transaction type: 2",
        "payload",
        hexlify15(payload)
      );
    }
    const maxPriorityFeePerGas = handleNumber2(transaction[2]);
    const maxFeePerGas = handleNumber2(transaction[3]);
    const tx = {
      type: 2,
      chainId: handleNumber2(transaction[0]).toNumber(),
      nonce: handleNumber2(transaction[1]).toNumber(),
      maxPriorityFeePerGas,
      maxFeePerGas,
      gasPrice: null,
      gasLimit: handleNumber2(transaction[4]),
      to: handleAddress2(transaction[5]),
      value: handleNumber2(transaction[6]),
      data: transaction[7],
      accessList: accessListify4(transaction[8]),
    };
    if (transaction.length === 9) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature2(tx, transaction.slice(9), _serializeEip15593);
    return tx;
  }
  function _parseEip29302(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger81.throwArgumentError(
        "invalid component count for transaction type: 1",
        "payload",
        hexlify15(payload)
      );
    }
    const tx = {
      type: 1,
      chainId: handleNumber2(transaction[0]).toNumber(),
      nonce: handleNumber2(transaction[1]).toNumber(),
      gasPrice: handleNumber2(transaction[2]),
      gasLimit: handleNumber2(transaction[3]),
      to: handleAddress2(transaction[4]),
      value: handleNumber2(transaction[5]),
      data: transaction[6],
      accessList: accessListify4(transaction[7]),
    };
    if (transaction.length === 8) {
      return tx;
    }
    tx.hash = keccak256(payload);
    _parseEipSignature2(tx, transaction.slice(8), _serializeEip29303);
    return tx;
  }
  function _parse2(rawTransaction) {
    const transaction = decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger81.throwArgumentError(
        "invalid raw transaction",
        "rawTransaction",
        rawTransaction
      );
    }
    const tx = {
      nonce: handleNumber2(transaction[0]).toNumber(),
      gasPrice: handleNumber2(transaction[1]),
      gasLimit: handleNumber2(transaction[2]),
      to: handleAddress2(transaction[3]),
      value: handleNumber2(transaction[4]),
      data: transaction[5],
      chainId: 0,
    };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
      console.log(error);
      return tx;
    }
    tx.r = hexZeroPad10(transaction[7], 32);
    tx.s = hexZeroPad10(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify15(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest = keccak256(encode(raw));
      try {
        tx.from = recoverAddress3(digest, {
          r: hexlify15(tx.r),
          s: hexlify15(tx.s),
          recoveryParam,
        });
      } catch (error) {
        console.log(error);
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse5(rawTransaction) {
    const payload = arrayify20(rawTransaction);
    if (payload[0] > 127) {
      return _parse2(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip29302(payload);
      case 2:
        return _parseEip15592(payload);
      default:
        break;
    }
    return logger81.throwError(
      `unsupported transaction type: ${payload[0]}`,
      Logger23.errors.UNSUPPORTED_OPERATION,
      {
        operation: "parseTransaction",
        transactionType: payload[0],
      }
    );
  }
  var logger81, TransactionTypes6, transactionFields2, allowedTransactionKeys5;
  var init_lib90 = __esm({
    "node_modules/ethers/node_modules/@ethersproject/transactions/lib.esm/index.js"() {
      "use strict";
      init_lib15();
      init_lib3();
      init_lib85();
      init_lib16();
      init_lib11();
      init_lib89();
      init_lib14();
      init_lib37();
      init_lib84();
      init_version85();
      logger81 = new Logger23(version85);
      (function (TransactionTypes7) {
        TransactionTypes7[(TransactionTypes7["legacy"] = 0)] = "legacy";
        TransactionTypes7[(TransactionTypes7["eip2930"] = 1)] = "eip2930";
        TransactionTypes7[(TransactionTypes7["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes6 || (TransactionTypes6 = {}));
      transactionFields2 = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
      ];
      allowedTransactionKeys5 = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        type: true,
        value: true,
      };
    },
  });

  // node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/_version.js
  var version86;
  var init_version86 = __esm({
    "node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/_version.js"() {
      version86 = "logger/5.5.0";
    },
  });

  // node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/index.js
  function _checkNormalize25() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (
        String.fromCharCode(233).normalize("NFD") !==
        String.fromCharCode(101, 769)
      ) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _permanentCensorErrors25,
    _censorErrors25,
    LogLevels25,
    _logLevel25,
    _globalLogger25,
    _normalizeError25,
    LogLevel25,
    ErrorCode25,
    HEX25,
    Logger25;
  var init_lib91 = __esm({
    "node_modules/@ethersproject/units/node_modules/@ethersproject/logger/lib.esm/index.js"() {
      "use strict";
      init_version86();
      _permanentCensorErrors25 = false;
      _censorErrors25 = false;
      LogLevels25 = {
        debug: 1,
        default: 2,
        info: 2,
        warning: 3,
        error: 4,
        off: 5,
      };
      _logLevel25 = LogLevels25["default"];
      _globalLogger25 = null;
      _normalizeError25 = _checkNormalize25();
      (function (LogLevel26) {
        LogLevel26["DEBUG"] = "DEBUG";
        LogLevel26["INFO"] = "INFO";
        LogLevel26["WARNING"] = "WARNING";
        LogLevel26["ERROR"] = "ERROR";
        LogLevel26["OFF"] = "OFF";
      })(LogLevel25 || (LogLevel25 = {}));
      (function (ErrorCode26) {
        ErrorCode26["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        ErrorCode26["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        ErrorCode26["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        ErrorCode26["NETWORK_ERROR"] = "NETWORK_ERROR";
        ErrorCode26["SERVER_ERROR"] = "SERVER_ERROR";
        ErrorCode26["TIMEOUT"] = "TIMEOUT";
        ErrorCode26["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        ErrorCode26["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ErrorCode26["MISSING_NEW"] = "MISSING_NEW";
        ErrorCode26["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        ErrorCode26["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        ErrorCode26["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ErrorCode26["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        ErrorCode26["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        ErrorCode26["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        ErrorCode26["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        ErrorCode26["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        ErrorCode26["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      })(ErrorCode25 || (ErrorCode25 = {}));
      HEX25 = "0123456789abcdef";
      Logger25 = class {
        constructor(version89) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version89,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels25[level] == null) {
            this.throwArgumentError(
              "invalid log level name",
              "logLevel",
              logLevel
            );
          }
          if (_logLevel25 > LogLevels25[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger25.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger25.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger25.levels.WARNING, args);
        }
        makeError(message, code, params) {
          if (_censorErrors25) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger25.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key2) => {
            const value = params[key2];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX25[value[i] >> 4];
                  hex += HEX25[value[i] & 15];
                }
                messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key2 + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(
                key2 + "=" + JSON.stringify(params[key2].toString())
              );
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key2) {
            error[key2] = params[key2];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name2, value) {
          return this.throwError(message, Logger25.errors.INVALID_ARGUMENT, {
            argument: name2,
            value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name2, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name2, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError25) {
            this.throwError(
              "platform missing String.prototype.normalize",
              Logger25.errors.UNSUPPORTED_OPERATION,
              {
                operation: "String.prototype.normalize",
                form: _normalizeError25,
              }
            );
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger25.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger25.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError(
              "missing argument" + message,
              Logger25.errors.MISSING_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
          if (count > expectedCount) {
            this.throwError(
              "too many arguments" + message,
              Logger25.errors.UNEXPECTED_ARGUMENT,
              {
                count,
                expectedCount,
              }
            );
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger25.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " +
                JSON.stringify(kind.name) +
                " directly; use a sub-class",
              Logger25.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger25.errors.MISSING_NEW, {
              name: kind.name,
            });
          }
        }
        static globalLogger() {
          if (!_globalLogger25) {
            _globalLogger25 = new Logger25(version86);
          }
          return _globalLogger25;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError(
              "cannot permanently disable censorship",
              Logger25.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          if (_permanentCensorErrors25) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError(
              "error censorship permanent",
              Logger25.errors.UNSUPPORTED_OPERATION,
              {
                operation: "setCensorship",
              }
            );
          }
          _censorErrors25 = !!censorship;
          _permanentCensorErrors25 = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels25[logLevel.toLowerCase()];
          if (level == null) {
            Logger25.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel25 = level;
        }
        static from(version89) {
          return new Logger25(version89);
        }
      };
      Logger25.errors = ErrorCode25;
      Logger25.levels = LogLevel25;
    },
  });

  // node_modules/@ethersproject/units/lib.esm/_version.js
  var version87;
  var init_version87 = __esm({
    "node_modules/@ethersproject/units/lib.esm/_version.js"() {
      version87 = "units/5.5.0";
    },
  });

  // node_modules/@ethersproject/units/lib.esm/index.js
  function commify(value) {
    const comps = String(value).split(".");
    if (
      comps.length > 2 ||
      !comps[0].match(/^-?[0-9]*$/) ||
      (comps[1] && !comps[1].match(/^[0-9]*$/)) ||
      value === "." ||
      value === "-."
    ) {
      logger82.throwArgumentError("invalid value", "value", value);
    }
    let whole = comps[0];
    let negative = "";
    if (whole.substring(0, 1) === "-") {
      negative = "-";
      whole = whole.substring(1);
    }
    while (whole.substring(0, 1) === "0") {
      whole = whole.substring(1);
    }
    if (whole === "") {
      whole = "0";
    }
    let suffix = "";
    if (comps.length === 2) {
      suffix = "." + (comps[1] || "0");
    }
    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
      suffix = suffix.substring(0, suffix.length - 1);
    }
    const formatted = [];
    while (whole.length) {
      if (whole.length <= 3) {
        formatted.unshift(whole);
        break;
      } else {
        const index = whole.length - 3;
        formatted.unshift(whole.substring(index));
        whole = whole.substring(0, index);
      }
    }
    return negative + formatted.join(",") + suffix;
  }
  function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
      const index = names.indexOf(unitName);
      if (index !== -1) {
        unitName = 3 * index;
      }
    }
    return formatFixed(value, unitName != null ? unitName : 18);
  }
  function parseUnits(value, unitName) {
    if (typeof value !== "string") {
      logger82.throwArgumentError("value must be a string", "value", value);
    }
    if (typeof unitName === "string") {
      const index = names.indexOf(unitName);
      if (index !== -1) {
        unitName = 3 * index;
      }
    }
    return parseFixed(value, unitName != null ? unitName : 18);
  }
  function formatEther(wei) {
    return formatUnits(wei, 18);
  }
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  var logger82, names;
  var init_lib92 = __esm({
    "node_modules/@ethersproject/units/lib.esm/index.js"() {
      "use strict";
      init_lib3();
      init_lib91();
      init_version87();
      logger82 = new Logger25(version87);
      names = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];
    },
  });

  // node_modules/ethers/lib.esm/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    AbiCoder: () => AbiCoder,
    ConstructorFragment: () => ConstructorFragment,
    ErrorFragment: () => ErrorFragment,
    EventFragment: () => EventFragment,
    FormatTypes: () => FormatTypes,
    Fragment: () => Fragment,
    FunctionFragment: () => FunctionFragment,
    HDNode: () => HDNode,
    Indexed: () => Indexed,
    Interface: () => Interface,
    LogDescription: () => LogDescription,
    Logger: () => Logger23,
    ParamType: () => ParamType,
    RLP: () => lib_exports,
    SigningKey: () => SigningKey,
    SupportedAlgorithm: () => SupportedAlgorithm,
    TransactionDescription: () => TransactionDescription,
    TransactionTypes: () => TransactionTypes6,
    UnicodeNormalizationForm: () => UnicodeNormalizationForm,
    Utf8ErrorFuncs: () => Utf8ErrorFuncs,
    Utf8ErrorReason: () => Utf8ErrorReason,
    _TypedDataEncoder: () => TypedDataEncoder,
    _fetchData: () => _fetchData,
    _toEscapedUtf8String: () => _toEscapedUtf8String,
    accessListify: () => accessListify4,
    arrayify: () => arrayify20,
    base58: () => Base58,
    base64: () => lib_exports3,
    checkProperties: () => checkProperties3,
    checkResultErrors: () => checkResultErrors,
    commify: () => commify,
    computeAddress: () => computeAddress5,
    computeHmac: () => computeHmac,
    computePublicKey: () => computePublicKey,
    concat: () => concat10,
    deepCopy: () => deepCopy7,
    defaultAbiCoder: () => defaultAbiCoder,
    defaultPath: () => defaultPath,
    defineReadOnly: () => defineReadOnly13,
    entropyToMnemonic: () => entropyToMnemonic,
    fetchJson: () => fetchJson,
    formatBytes32String: () => formatBytes32String,
    formatEther: () => formatEther,
    formatUnits: () => formatUnits,
    getAccountPath: () => getAccountPath,
    getAddress: () => getAddress,
    getContractAddress: () => getContractAddress,
    getCreate2Address: () => getCreate2Address,
    getIcapAddress: () => getIcapAddress,
    getJsonWalletAddress: () => getJsonWalletAddress,
    getStatic: () => getStatic4,
    hashMessage: () => hashMessage,
    hexConcat: () => hexConcat8,
    hexDataLength: () => hexDataLength7,
    hexDataSlice: () => hexDataSlice8,
    hexStripZeros: () => hexStripZeros2,
    hexValue: () => hexValue2,
    hexZeroPad: () => hexZeroPad10,
    hexlify: () => hexlify15,
    id: () => id,
    isAddress: () => isAddress,
    isBytes: () => isBytes20,
    isBytesLike: () => isBytesLike9,
    isHexString: () => isHexString21,
    isValidMnemonic: () => isValidMnemonic,
    isValidName: () => isValidName,
    joinSignature: () => joinSignature2,
    keccak256: () => keccak256,
    mnemonicToEntropy: () => mnemonicToEntropy,
    mnemonicToSeed: () => mnemonicToSeed,
    namehash: () => namehash,
    nameprep: () => nameprep,
    parseBytes32String: () => parseBytes32String,
    parseEther: () => parseEther,
    parseTransaction: () => parse5,
    parseUnits: () => parseUnits,
    poll: () => poll,
    randomBytes: () => randomBytes3,
    recoverAddress: () => recoverAddress3,
    recoverPublicKey: () => recoverPublicKey,
    resolveProperties: () => resolveProperties6,
    ripemd160: () => ripemd160,
    serializeTransaction: () => serialize3,
    sha256: () => sha256,
    sha512: () => sha5122,
    shallowCopy: () => shallowCopy6,
    shuffled: () => shuffled,
    solidityKeccak256: () => keccak2562,
    solidityPack: () => pack2,
    soliditySha256: () => sha2562,
    splitSignature: () => splitSignature7,
    stripZeros: () => stripZeros7,
    toUtf8Bytes: () => toUtf8Bytes,
    toUtf8CodePoints: () => toUtf8CodePoints,
    toUtf8String: () => toUtf8String,
    verifyMessage: () => verifyMessage,
    verifyTypedData: () => verifyTypedData,
    zeroPad: () => zeroPad4,
  });
  var init_utils2 = __esm({
    "node_modules/ethers/lib.esm/utils.js"() {
      "use strict";
      init_lib24();
      init_lib15();
      init_lib77();
      init_lib45();
      init_lib85();
      init_lib23();
      init_lib59();
      init_lib68();
      init_lib11();
      init_lib84();
      init_lib52();
      init_lib88();
      init_lib63();
      init_lib89();
      init_lib14();
      init_lib37();
      init_lib19();
      init_lib90();
      init_lib92();
      init_lib70();
      init_lib81();
      init_lib52();
      init_lib19();
    },
  });

  // node_modules/ethers/lib.esm/_version.js
  var version88;
  var init_version88 = __esm({
    "node_modules/ethers/lib.esm/_version.js"() {
      version88 = "ethers/5.5.4";
    },
  });

  // node_modules/ethers/lib.esm/ethers.js
  var ethers_exports = {};
  __export(ethers_exports, {
    BaseContract: () => BaseContract,
    BigNumber: () => BigNumber,
    Contract: () => Contract,
    ContractFactory: () => ContractFactory,
    FixedNumber: () => FixedNumber,
    Signer: () => Signer,
    VoidSigner: () => VoidSigner,
    Wallet: () => Wallet,
    Wordlist: () => Wordlist,
    constants: () => lib_exports2,
    errors: () => ErrorCode23,
    getDefaultProvider: () => getDefaultProvider,
    logger: () => logger83,
    providers: () => lib_exports4,
    utils: () => utils_exports,
    version: () => version88,
    wordlists: () => wordlists,
  });
  var logger83;
  var init_ethers = __esm({
    "node_modules/ethers/lib.esm/ethers.js"() {
      "use strict";
      init_lib39();
      init_lib3();
      init_lib30();
      init_lib70();
      init_lib16();
      init_lib83();
      init_lib83();
      init_lib58();
      init_utils2();
      init_lib84();
      init_version88();
      logger83 = new Logger23(version88);
    },
  });

  // node_modules/ethers/lib.esm/index.js
  var lib_exports5 = {};
  __export(lib_exports5, {
    BaseContract: () => BaseContract,
    BigNumber: () => BigNumber,
    Contract: () => Contract,
    ContractFactory: () => ContractFactory,
    FixedNumber: () => FixedNumber,
    Signer: () => Signer,
    VoidSigner: () => VoidSigner,
    Wallet: () => Wallet,
    Wordlist: () => Wordlist,
    constants: () => lib_exports2,
    errors: () => ErrorCode23,
    ethers: () => ethers_exports,
    getDefaultProvider: () => getDefaultProvider,
    logger: () => logger83,
    providers: () => lib_exports4,
    utils: () => utils_exports,
    version: () => version88,
    wordlists: () => wordlists,
  });
  var init_lib93 = __esm({
    "node_modules/ethers/lib.esm/index.js"() {
      "use strict";
      init_ethers();
      init_ethers();
      try {
        const anyGlobal2 = window;
        if (anyGlobal2._ethers == null) {
          anyGlobal2._ethers = ethers_exports;
        }
      } catch (error) {}
    },
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = __require("buffer");
      var Buffer4 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key2 in src) {
          dst[key2] = src[key2];
        }
      }
      if (
        Buffer4.from &&
        Buffer4.alloc &&
        Buffer4.allocUnsafe &&
        Buffer4.allocUnsafeSlow
      ) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer4(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer4.prototype);
      copyProps(Buffer4, SafeBuffer);
      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer4(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer4(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer4(size);
      };
      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/stream.js
  var require_stream = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/stream.js"(
      exports,
      module
    ) {
      module.exports = __require("stream");
    },
  });

  // node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(
      exports,
      module
    ) {
      "use strict";
      function ownKeys4(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread4(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys4(Object(source), true).forEach(function (key2) {
              _defineProperty4(target, key2, source[key2]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys4(Object(source)).forEach(function (key2) {
              Object.defineProperty(
                target,
                key2,
                Object.getOwnPropertyDescriptor(source, key2)
              );
            });
          }
        }
        return target;
      }
      function _defineProperty4(obj, key2, value) {
        if (key2 in obj) {
          Object.defineProperty(obj, key2, {
            value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key2] = value;
        }
        return obj;
      }
      function _classCallCheck11(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties10(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass10(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties10(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties10(Constructor, staticProps);
        return Constructor;
      }
      var _require = __require("buffer");
      var Buffer4 = _require.Buffer;
      var _require2 = __require("util");
      var inspect4 = _require2.inspect;
      var custom = (inspect4 && inspect4.custom) || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer4.prototype.copy.call(src, target, offset);
      }
      module.exports = /* @__PURE__ */ (function () {
        function BufferList() {
          _classCallCheck11(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        _createClass10(BufferList, [
          {
            key: "push",
            value: function push(v2) {
              var entry = {
                data: v2,
                next: null,
              };
              if (this.length > 0) this.tail.next = entry;
              else this.head = entry;
              this.tail = entry;
              ++this.length;
            },
          },
          {
            key: "unshift",
            value: function unshift(v2) {
              var entry = {
                data: v2,
                next: this.head,
              };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            },
          },
          {
            key: "shift",
            value: function shift() {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;
              else this.head = this.head.next;
              --this.length;
              return ret;
            },
          },
          {
            key: "clear",
            value: function clear() {
              this.head = this.tail = null;
              this.length = 0;
            },
          },
          {
            key: "join",
            value: function join(s2) {
              if (this.length === 0) return "";
              var p2 = this.head;
              var ret = "" + p2.data;
              while ((p2 = p2.next)) {
                ret += s2 + p2.data;
              }
              return ret;
            },
          },
          {
            key: "concat",
            value: function concat12(n) {
              if (this.length === 0) return Buffer4.alloc(0);
              var ret = Buffer4.allocUnsafe(n >>> 0);
              var p2 = this.head;
              var i = 0;
              while (p2) {
                copyBuffer(p2.data, ret, i);
                i += p2.data.length;
                p2 = p2.next;
              }
              return ret;
            },
          },
          {
            key: "consume",
            value: function consume(n, hasStrings) {
              var ret;
              if (n < this.head.data.length) {
                ret = this.head.data.slice(0, n);
                this.head.data = this.head.data.slice(n);
              } else if (n === this.head.data.length) {
                ret = this.shift();
              } else {
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
              }
              return ret;
            },
          },
          {
            key: "first",
            value: function first() {
              return this.head.data;
            },
          },
          {
            key: "_getString",
            value: function _getString(n) {
              var p2 = this.head;
              var c2 = 1;
              var ret = p2.data;
              n -= ret.length;
              while ((p2 = p2.next)) {
                var str = p2.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;
                else ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c2;
                    if (p2.next) this.head = p2.next;
                    else this.head = this.tail = null;
                  } else {
                    this.head = p2;
                    p2.data = str.slice(nb);
                  }
                  break;
                }
                ++c2;
              }
              this.length -= c2;
              return ret;
            },
          },
          {
            key: "_getBuffer",
            value: function _getBuffer(n) {
              var ret = Buffer4.allocUnsafe(n);
              var p2 = this.head;
              var c2 = 1;
              p2.data.copy(ret);
              n -= p2.data.length;
              while ((p2 = p2.next)) {
                var buf = p2.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c2;
                    if (p2.next) this.head = p2.next;
                    else this.head = this.tail = null;
                  } else {
                    this.head = p2;
                    p2.data = buf.slice(nb);
                  }
                  break;
                }
                ++c2;
              }
              this.length -= c2;
              return ret;
            },
          },
          {
            key: custom,
            value: function value(_2, options) {
              return inspect4(
                this,
                _objectSpread4({}, options, {
                  depth: 0,
                  customInspect: false,
                })
              );
            },
          },
        ]);
        return BufferList;
      })();
    },
  });

  // node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/destroy.js"(
      exports,
      module
    ) {
      "use strict";
      function destroy(err, cb) {
        var _this = this;
        var readableDestroyed =
          this._readableState && this._readableState.destroyed;
        var writableDestroyed =
          this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err || null, function (err2) {
          if (!cb && err2) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      function emitErrorAndCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose) return;
        if (self2._readableState && !self2._readableState.emitClose) return;
        self2.emit("close");
      }
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      function emitErrorNT(self2, err) {
        self2.emit("error", err);
      }
      function errorOrDestroy(stream, err) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if ((rState && rState.autoDestroy) || (wState && wState.autoDestroy))
          stream.destroy(err);
        else stream.emit("error", err);
      }
      module.exports = {
        destroy,
        undestroy,
        errorOrDestroy,
      };
    },
  });

  // node_modules/readable-stream/errors.js
  var require_errors = __commonJS({
    "node_modules/readable-stream/errors.js"(exports, module) {
      "use strict";
      var codes = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        class NodeError extends Base {
          constructor(arg1, arg2, arg3) {
            super(getMessage(arg1, arg2, arg3));
          }
        }
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      }
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          const len = expected.length;
          expected = expected.map((i) => String(i));
          if (len > 2) {
            return (
              `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` +
              expected[len - 1]
            );
          } else if (len === 2) {
            return `one of ${thing} ${expected[0]} or ${expected[1]}`;
          } else {
            return `of ${thing} ${expected[0]}`;
          }
        } else {
          return `of ${thing} ${String(expected)}`;
        }
      }
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      createErrorType(
        "ERR_INVALID_OPT_VALUE",
        function (name2, value) {
          return (
            'The value "' + value + '" is invalid for option "' + name2 + '"'
          );
        },
        TypeError
      );
      createErrorType(
        "ERR_INVALID_ARG_TYPE",
        function (name2, expected, actual) {
          let determiner;
          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }
          let msg;
          if (endsWith(name2, " argument")) {
            msg = `The ${name2} ${determiner} ${oneOf(expected, "type")}`;
          } else {
            const type = includes(name2, ".") ? "property" : "argument";
            msg = `The "${name2}" ${type} ${determiner} ${oneOf(
              expected,
              "type"
            )}`;
          }
          msg += `. Received type ${typeof actual}`;
          return msg;
        },
        TypeError
      );
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function (name2) {
        return "The " + name2 + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function (name2) {
        return "Cannot call " + name2 + " after a stream was destroyed";
      });
      createErrorType(
        "ERR_MULTIPLE_CALLBACK",
        "Callback called multiple times"
      );
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType(
        "ERR_STREAM_NULL_VALUES",
        "May not write null values to stream",
        TypeError
      );
      createErrorType(
        "ERR_UNKNOWN_ENCODING",
        function (arg) {
          return "Unknown encoding: " + arg;
        },
        TypeError
      );
      createErrorType(
        "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
        "stream.unshift() after end event"
      );
      module.exports.codes = codes;
    },
  });

  // node_modules/readable-stream/lib/internal/streams/state.js
  var require_state = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/state.js"(
      exports,
      module
    ) {
      "use strict";
      var ERR_INVALID_OPT_VALUE = require_errors().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null
          ? options.highWaterMark
          : isDuplex
          ? options[duplexKey]
          : null;
      }
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name2 = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name2, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      module.exports = {
        getHighWaterMark,
      };
    },
  });

  // node_modules/util-deprecate/node.js
  var require_node3 = __commonJS({
    "node_modules/util-deprecate/node.js"(exports, module) {
      module.exports = __require("util").deprecate;
    },
  });

  // node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable = __commonJS({
    "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      module.exports = Writable;
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function () {
          onCorkedFinish(_this, state);
        };
      }
      var Duplex;
      Writable.WritableState = WritableState;
      var internalUtil = {
        deprecate: require_node3(),
      };
      var Stream = require_stream();
      var Buffer4 = __require("buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function () {};
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED =
        _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END =
        _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits()(Writable, Stream);
      function nop() {}
      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(
          this,
          options,
          "writableHighWaterMark",
          isDuplex
        );
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function (er2) {
          onwrite(stream, er2);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      };
      (function () {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(
              function writableStateBufferGetter() {
                return this.getBuffer();
              },
              "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.",
              "DEP0003"
            ),
          });
        } catch (_2) {}
      })();
      var realHasInstance;
      if (
        typeof Symbol === "function" &&
        Symbol.hasInstance &&
        typeof Function.prototype[Symbol.hasInstance] === "function"
      ) {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
          },
        });
      } else {
        realHasInstance = function realHasInstance2(object) {
          return object instanceof this;
        };
      }
      function Writable(options) {
        Duplex = Duplex || require_stream_duplex();
        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable, this))
          return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }
        Stream.call(this);
      }
      Writable.prototype.pipe = function () {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd(stream, cb) {
        var er2 = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er2);
        process.nextTick(cb, er2);
      }
      function validChunk(stream, state, chunk, cb) {
        var er2;
        if (chunk === null) {
          er2 = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er2) {
          errorOrDestroy(stream, er2);
          process.nextTick(cb, er2);
          return false;
        }
        return true;
      }
      Writable.prototype.write = function (chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer4.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop;
        if (state.ending) writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function () {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function () {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (
            !state.writing &&
            !state.corked &&
            !state.bufferProcessing &&
            state.bufferedRequest
          )
            clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
        encoding
      ) {
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (
          !(
            [
              "hex",
              "utf8",
              "utf-8",
              "ascii",
              "binary",
              "base64",
              "ucs2",
              "ucs-2",
              "utf16le",
              "utf-16le",
              "raw",
            ].indexOf((encoding + "").toLowerCase()) > -1
          )
        )
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        },
      });
      function decodeChunk(state, chunk, encoding) {
        if (
          !state.objectMode &&
          state.decodeStrings !== false &&
          typeof chunk === "string"
        ) {
          chunk = Buffer4.from(chunk, encoding);
        }
        return chunk;
      }
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        },
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret) state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null,
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      function onwriteError(stream, state, sync, er2, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er2);
          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er2);
        } else {
          cb(er2);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er2);
          finishMaybe(stream, state);
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      function onwrite(stream, er2) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate(state);
        if (er2) onwriteError(stream, state, sync, er2, cb);
        else {
          var finished = needFinish(state) || stream.destroyed;
          if (
            !finished &&
            !state.corked &&
            !state.bufferProcessing &&
            state.bufferedRequest
          ) {
            clearBuffer(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l2 = state.bufferedRequestCount;
          var buffer = new Array(l2);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null) state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      Writable.prototype._write = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function (chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending) endWritable(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        },
      });
      function needFinish(state) {
        return (
          state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing
        );
      }
      function callFinal(stream, state) {
        stream._final(function (err) {
          state.pendingcb--;
          if (err) {
            errorOrDestroy(stream, err);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || (rState.autoDestroy && rState.endEmitted)) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished) process.nextTick(cb);
          else stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      Object.defineProperty(Writable.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        },
        set: function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        },
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function (err, cb) {
        cb(err);
      };
    },
  });

  // node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex = __commonJS({
    "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      var objectKeys =
        Object.keys ||
        function (obj) {
          var keys2 = [];
          for (var key2 in obj) {
            keys2.push(key2);
          }
          return keys2;
        };
      module.exports = Duplex;
      var Readable2 = require_stream_readable();
      var Writable = require_stream_writable();
      require_inherits()(Duplex, Readable2);
      {
        keys = objectKeys(Writable.prototype);
        for (v2 = 0; v2 < keys.length; v2++) {
          method = keys[v2];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }
      var keys;
      var method;
      var v2;
      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable2.call(this, options);
        Writable.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false) this.readable = false;
          if (options.writable === false) this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        },
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        },
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        },
      });
      function onend() {
        if (this._writableState.ended) return;
        process.nextTick(onEndNT, this);
      }
      function onEndNT(self2) {
        self2.end();
      }
      Object.defineProperty(Duplex.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (
            this._readableState === void 0 ||
            this._writableState === void 0
          ) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          if (
            this._readableState === void 0 ||
            this._writableState === void 0
          ) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        },
      });
    },
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      var Buffer4 = require_safe_buffer().Buffer;
      var isEncoding =
        Buffer4.isEncoding ||
        function (encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
      function _normalizeEncoding(enc) {
        if (!enc) return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried) return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (
          typeof nenc !== "string" &&
          (Buffer4.isEncoding === isEncoding || !isEncoding(enc))
        )
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer4.allocUnsafe(nb);
      }
      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0) return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(
            this.lastChar,
            this.lastTotal - this.lastNeed,
            0,
            this.lastNeed
          );
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127) return 0;
        else if (byte >> 5 === 6) return 2;
        else if (byte >> 4 === 14) return 3;
        else if (byte >> 3 === 30) return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      function utf8CheckIncomplete(self2, buf, i) {
        var j2 = buf.length - 1;
        if (j2 < i) return 0;
        var nb = utf8CheckByte(buf[j2]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j2 < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j2]);
        if (nb >= 0) {
          if (nb > 0) self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j2 < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j2]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      function utf8CheckExtraBytes(self2, buf, p2) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      function utf8FillLast(buf) {
        var p2 = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p2);
        if (r !== void 0) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p2, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p2, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + "\uFFFD";
        return r;
      }
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c2 = r.charCodeAt(r.length - 1);
            if (c2 >= 55296 && c2 <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
    },
  });

  // node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(
      exports,
      module
    ) {
      "use strict";
      var ERR_STREAM_PREMATURE_CLOSE =
        require_errors().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once(callback) {
        var called = false;
        return function () {
          if (called) return;
          called = true;
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      function noop() {}
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts);
        if (!opts) opts = {};
        callback = once(callback || noop);
        var readable =
          opts.readable || (opts.readable !== false && stream.readable);
        var writable =
          opts.writable || (opts.writable !== false && stream.writable);
        var onlegacyfinish = function onlegacyfinish2() {
          if (!stream.writable) onfinish();
        };
        var writableEnded =
          stream._writableState && stream._writableState.finished;
        var onfinish = function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable) callback.call(stream);
        };
        var readableEnded =
          stream._readableState && stream._readableState.endEmitted;
        var onend = function onend2() {
          readable = false;
          readableEnded = true;
          if (!writable) callback.call(stream);
        };
        var onerror = function onerror2(err) {
          callback.call(stream, err);
        };
        var onclose = function onclose2() {
          var err;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
        };
        var onrequest = function onrequest2() {
          stream.req.on("finish", onfinish);
        };
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req) onrequest();
          else stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false) stream.on("error", onerror);
        stream.on("close", onclose);
        return function () {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      module.exports = eos;
    },
  });

  // node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(
      exports,
      module
    ) {
      "use strict";
      var _Object$setPrototypeO;
      function _defineProperty4(obj, key2, value) {
        if (key2 in obj) {
          Object.defineProperty(obj, key2, {
            value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key2] = value;
        }
        return obj;
      }
      var finished = require_end_of_stream();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done) {
        return {
          value,
          done,
        };
      }
      function readAndResolve(iter) {
        var resolve2 = iter[kLastResolve];
        if (resolve2 !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve2(createIterResult(data, false));
          }
        }
      }
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      function wrapForNext(lastPromise, iter) {
        return function (resolve2, reject) {
          lastPromise.then(function () {
            if (iter[kEnded]) {
              resolve2(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve2, reject);
          }, reject);
        };
      }
      var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(
        ((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },
          next: function next() {
            var _this = this;
            var error = this[kError];
            if (error !== null) {
              return Promise.reject(error);
            }
            if (this[kEnded]) {
              return Promise.resolve(createIterResult(void 0, true));
            }
            if (this[kStream].destroyed) {
              return new Promise(function (resolve2, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve2(createIterResult(void 0, true));
                  }
                });
              });
            }
            var lastPromise = this[kLastPromise];
            var promise;
            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              var data = this[kStream].read();
              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }
              promise = new Promise(this[kHandlePromise]);
            }
            this[kLastPromise] = promise;
            return promise;
          },
        }),
        _defineProperty4(
          _Object$setPrototypeO,
          Symbol.asyncIterator,
          function () {
            return this;
          }
        ),
        _defineProperty4(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;
          return new Promise(function (resolve2, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }
              resolve2(createIterResult(void 0, true));
            });
          });
        }),
        _Object$setPrototypeO),
        AsyncIteratorPrototype
      );
      var createReadableStreamAsyncIterator =
        function createReadableStreamAsyncIterator2(stream) {
          var _Object$create;
          var iterator = Object.create(
            ReadableStreamAsyncIteratorPrototype,
            ((_Object$create = {}),
            _defineProperty4(_Object$create, kStream, {
              value: stream,
              writable: true,
            }),
            _defineProperty4(_Object$create, kLastResolve, {
              value: null,
              writable: true,
            }),
            _defineProperty4(_Object$create, kLastReject, {
              value: null,
              writable: true,
            }),
            _defineProperty4(_Object$create, kError, {
              value: null,
              writable: true,
            }),
            _defineProperty4(_Object$create, kEnded, {
              value: stream._readableState.endEmitted,
              writable: true,
            }),
            _defineProperty4(_Object$create, kHandlePromise, {
              value: function value(resolve2, reject) {
                var data = iterator[kStream].read();
                if (data) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve2(createIterResult(data, false));
                } else {
                  iterator[kLastResolve] = resolve2;
                  iterator[kLastReject] = reject;
                }
              },
              writable: true,
            }),
            _Object$create)
          );
          iterator[kLastPromise] = null;
          finished(stream, function (err) {
            if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
              var reject = iterator[kLastReject];
              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }
              iterator[kError] = err;
              return;
            }
            var resolve2 = iterator[kLastResolve];
            if (resolve2 !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve2(createIterResult(void 0, true));
            }
            iterator[kEnded] = true;
          });
          stream.on("readable", onReadable.bind(null, iterator));
          return iterator;
        };
      module.exports = createReadableStreamAsyncIterator;
    },
  });

  // node_modules/readable-stream/lib/internal/streams/from.js
  var require_from = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/from.js"(
      exports,
      module
    ) {
      "use strict";
      function asyncGeneratorStep(
        gen,
        resolve2,
        reject,
        _next,
        _throw,
        key2,
        arg
      ) {
        try {
          var info = gen[key2](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve2(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function () {
          var self2 = this,
            args = arguments;
          return new Promise(function (resolve2, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(
                gen,
                resolve2,
                reject,
                _next,
                _throw,
                "next",
                value
              );
            }
            function _throw(err) {
              asyncGeneratorStep(
                gen,
                resolve2,
                reject,
                _next,
                _throw,
                "throw",
                err
              );
            }
            _next(void 0);
          });
        };
      }
      function ownKeys4(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread4(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys4(Object(source), true).forEach(function (key2) {
              _defineProperty4(target, key2, source[key2]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(
              target,
              Object.getOwnPropertyDescriptors(source)
            );
          } else {
            ownKeys4(Object(source)).forEach(function (key2) {
              Object.defineProperty(
                target,
                key2,
                Object.getOwnPropertyDescriptor(source, key2)
              );
            });
          }
        }
        return target;
      }
      function _defineProperty4(obj, key2, value) {
        if (key2 in obj) {
          Object.defineProperty(obj, key2, {
            value,
            enumerable: true,
            configurable: true,
            writable: true,
          });
        } else {
          obj[key2] = value;
        }
        return obj;
      }
      var ERR_INVALID_ARG_TYPE = require_errors().codes.ERR_INVALID_ARG_TYPE;
      function from(Readable2, iterable, opts) {
        var iterator;
        if (iterable && typeof iterable.next === "function") {
          iterator = iterable;
        } else if (iterable && iterable[Symbol.asyncIterator])
          iterator = iterable[Symbol.asyncIterator]();
        else if (iterable && iterable[Symbol.iterator])
          iterator = iterable[Symbol.iterator]();
        else throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
        var readable = new Readable2(
          _objectSpread4(
            {
              objectMode: true,
            },
            opts
          )
        );
        var reading = false;
        readable._read = function () {
          if (!reading) {
            reading = true;
            next();
          }
        };
        function next() {
          return _next2.apply(this, arguments);
        }
        function _next2() {
          _next2 = _asyncToGenerator(function* () {
            try {
              var _ref = yield iterator.next(),
                value = _ref.value,
                done = _ref.done;
              if (done) {
                readable.push(null);
              } else if (readable.push(yield value)) {
                next();
              } else {
                reading = false;
              }
            } catch (err) {
              readable.destroy(err);
            }
          });
          return _next2.apply(this, arguments);
        }
        return readable;
      }
      module.exports = from;
    },
  });

  // node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable = __commonJS({
    "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      module.exports = Readable2;
      var Duplex;
      Readable2.ReadableState = ReadableState;
      var EE = __require("events").EventEmitter;
      var EElistenerCount = function EElistenerCount2(emitter, type) {
        return emitter.listeners(type).length;
      };
      var Stream = require_stream();
      var Buffer4 = __require("buffer").Buffer;
      var OurUint8Array = global.Uint8Array || function () {};
      function _uint8ArrayToBuffer(chunk) {
        return Buffer4.from(chunk);
      }
      function _isUint8Array(obj) {
        return Buffer4.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      var debugUtil = __require("util");
      var debug;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream");
      } else {
        debug = function debug2() {};
      }
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED =
        _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT =
        _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder;
      var createReadableStreamAsyncIterator;
      var from;
      require_inherits()(Readable2, Stream);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn);
        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }
      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(
          this,
          options,
          "readableHighWaterMark",
          isDuplex
        );
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      function Readable2(options) {
        Duplex = Duplex || require_stream_duplex();
        if (!(this instanceof Readable2)) return new Readable2(options);
        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
        }
        Stream.call(this);
      }
      Object.defineProperty(Readable2.prototype, "destroyed", {
        enumerable: false,
        get: function get() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        },
        set: function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        },
      });
      Readable2.prototype.destroy = destroyImpl.destroy;
      Readable2.prototype._undestroy = destroyImpl.undestroy;
      Readable2.prototype._destroy = function (err, cb) {
        cb(err);
      };
      Readable2.prototype.push = function (chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer4.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable2.prototype.unshift = function (chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(
        stream,
        chunk,
        encoding,
        addToFront,
        skipChunkCheck
      ) {
        debug("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er2;
          if (!skipChunkCheck) er2 = chunkInvalid(state, chunk);
          if (er2) {
            errorOrDestroy(stream, er2);
          } else if (state.objectMode || (chunk && chunk.length > 0)) {
            if (
              typeof chunk !== "string" &&
              !state.objectMode &&
              Object.getPrototypeOf(chunk) !== Buffer4.prototype
            ) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted)
                errorOrDestroy(
                  stream,
                  new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()
                );
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false);
                else maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        }
        return (
          !state.ended &&
          (state.length < state.highWaterMark || state.length === 0)
        );
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      function chunkInvalid(state, chunk) {
        var er2;
        if (
          !_isUint8Array(chunk) &&
          typeof chunk !== "string" &&
          chunk !== void 0 &&
          !state.objectMode
        ) {
          er2 = new ERR_INVALID_ARG_TYPE(
            "chunk",
            ["string", "Buffer", "Uint8Array"],
            chunk
          );
        }
        return er2;
      }
      Readable2.prototype.isPaused = function () {
        return this._readableState.flowing === false;
      };
      Readable2.prototype.setEncoding = function (enc) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p2 = this._readableState.buffer.head;
        var content = "";
        while (p2 !== null) {
          content += decoder.write(p2.data);
          p2 = p2.next;
        }
        this._readableState.buffer.clear();
        if (content !== "") this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || (state.length === 0 && state.ended)) return 0;
        if (state.objectMode) return 1;
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length;
          else return state.length;
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length) return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      Readable2.prototype.read = function (n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false;
        if (
          n === 0 &&
          state.needReadable &&
          ((state.highWaterMark !== 0
            ? state.length >= state.highWaterMark
            : state.length > 0) ||
            state.ended)
        ) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this);
          else emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0) state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading) n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0) ret = fromList(n, state);
        else ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true;
          if (nOrig !== n && state.ended) endReadable(this);
        }
        if (ret !== null) this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended) return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      }
      function emitReadable(stream) {
        var state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      function emitReadable_(stream) {
        var state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable =
          !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      function maybeReadMore_(stream, state) {
        while (
          !state.reading &&
          !state.ended &&
          (state.length < state.highWaterMark ||
            (state.flowing && state.length === 0))
        ) {
          var len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length) break;
        }
        state.readingMore = false;
      }
      Readable2.prototype._read = function (n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable2.prototype.pipe = function (dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd =
          (!pipeOpts || pipeOpts.end !== false) &&
          dest !== process.stdout &&
          dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        function onend() {
          debug("onend");
          dest.end();
        }
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (
            state.awaitDrain &&
            (!dest._writableState || dest._writableState.needDrain)
          )
            ondrain();
        }
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          var ret = dest.write(chunk);
          debug("dest.write", ret);
          if (ret === false) {
            if (
              ((state.pipesCount === 1 && state.pipes === dest) ||
                (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) &&
              !cleanedUp
            ) {
              debug("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        function onerror(er2) {
          debug("onerror", er2);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er2);
        }
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }
      Readable2.prototype.unpipe = function (dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false,
        };
        if (state.pipesCount === 0) return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++) {
            dests[i].emit("unpipe", this, {
              hasUnpiped: false,
            });
          }
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable2.prototype.on = function (ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable2.prototype.addListener = Readable2.prototype.on;
      Readable2.prototype.removeListener = function (ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable2.prototype.removeAllListeners = function (ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      function nReadingNextTick(self2) {
        debug("readable nexttick read 0");
        self2.read(0);
      }
      Readable2.prototype.resume = function () {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      function resume_(stream, state) {
        debug("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }
      Readable2.prototype.pause = function () {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && stream.read() !== null) {}
      }
      Readable2.prototype.wrap = function (stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function () {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function (chunk) {
          debug("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function (n2) {
          debug("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable2.prototype[Symbol.asyncIterator] = function () {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
        enumerable: false,
        get: function get() {
          return this._readableState.highWaterMark;
        },
      });
      Object.defineProperty(Readable2.prototype, "readableBuffer", {
        enumerable: false,
        get: function get() {
          return this._readableState && this._readableState.buffer;
        },
      });
      Object.defineProperty(Readable2.prototype, "readableFlowing", {
        enumerable: false,
        get: function get() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        },
      });
      Readable2._fromList = fromList;
      Object.defineProperty(Readable2.prototype, "readableLength", {
        enumerable: false,
        get: function get() {
          return this._readableState.length;
        },
      });
      function fromList(n, state) {
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      function endReadable(stream) {
        var state = stream._readableState;
        debug("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || (wState.autoDestroy && wState.finished)) {
              stream.destroy();
            }
          }
        }
      }
      if (typeof Symbol === "function") {
        Readable2.from = function (iterable, opts) {
          if (from === void 0) {
            from = require_from();
          }
          return from(Readable2, iterable, opts);
        };
      }
      function indexOf(xs, x2) {
        for (var i = 0, l2 = xs.length; i < l2; i++) {
          if (xs[i] === x2) return i;
        }
        return -1;
      }
    },
  });

  // node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform = __commonJS({
    "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      module.exports = Transform3;
      var _require$codes = require_errors().codes;
      var ERR_METHOD_NOT_IMPLEMENTED =
        _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING =
        _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 =
        _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex = require_stream_duplex();
      require_inherits()(Transform3, Duplex);
      function afterTransform(er2, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (data != null) this.push(data);
        cb(er2);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Transform3(options) {
        if (!(this instanceof Transform3)) return new Transform3(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null,
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      function prefinish() {
        var _this = this;
        if (
          typeof this._flush === "function" &&
          !this._readableState.destroyed
        ) {
          this._flush(function (er2, data) {
            done(_this, er2, data);
          });
        } else {
          done(this, null, null);
        }
      }
      Transform3.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform3.prototype._transform = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform3.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;
        if (!ts.transforming) {
          var rs = this._readableState;
          if (
            ts.needTransform ||
            rs.needReadable ||
            rs.length < rs.highWaterMark
          )
            this._read(rs.highWaterMark);
        }
      };
      Transform3.prototype._read = function (n) {
        var ts = this._transformState;
        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Transform3.prototype._destroy = function (err, cb) {
        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2);
        });
      };
      function done(stream, er2, data) {
        if (er2) return stream.emit("error", er2);
        if (data != null) stream.push(data);
        if (stream._writableState.length)
          throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming)
          throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
    },
  });

  // node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough = __commonJS({
    "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      module.exports = PassThrough;
      var Transform3 = require_stream_transform();
      require_inherits()(PassThrough, Transform3);
      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform3.call(this, options);
      }
      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };
    },
  });

  // node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "node_modules/readable-stream/lib/internal/streams/pipeline.js"(
      exports,
      module
    ) {
      "use strict";
      var eos;
      function once(callback) {
        var called = false;
        return function () {
          if (called) return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      var _require$codes = require_errors().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop(err) {
        if (err) throw err;
      }
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function () {
          closed = true;
        });
        if (eos === void 0) eos = require_end_of_stream();
        eos(
          stream,
          {
            readable: reading,
            writable: writing,
          },
          function (err) {
            if (err) return callback(err);
            closed = true;
            callback();
          }
        );
        var destroyed = false;
        return function (err) {
          if (closed) return;
          if (destroyed) return;
          destroyed = true;
          if (isRequest(stream)) return stream.abort();
          if (typeof stream.destroy === "function") return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      function call(fn) {
        fn();
      }
      function pipe(from, to) {
        return from.pipe(to);
      }
      function popCallback(streams) {
        if (!streams.length) return noop;
        if (typeof streams[streams.length - 1] !== "function") return noop;
        return streams.pop();
      }
      function pipeline() {
        for (
          var _len = arguments.length, streams = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0])) streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error;
        var destroys = streams.map(function (stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function (err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }
      module.exports = pipeline;
    },
  });

  // node_modules/readable-stream/readable.js
  var require_readable = __commonJS({
    "node_modules/readable-stream/readable.js"(exports, module) {
      var Stream = __require("stream");
      if (process.env.READABLE_STREAM === "disable" && Stream) {
        module.exports = Stream.Readable;
        Object.assign(module.exports, Stream);
        module.exports.Stream = Stream;
      } else {
        exports = module.exports = require_stream_readable();
        exports.Stream = Stream || exports;
        exports.Readable = exports;
        exports.Writable = require_stream_writable();
        exports.Duplex = require_stream_duplex();
        exports.Transform = require_stream_transform();
        exports.PassThrough = require_stream_passthrough();
        exports.finished = require_end_of_stream();
        exports.pipeline = require_pipeline();
      }
    },
  });

  // node_modules/hash-base/index.js
  var require_hash_base = __commonJS({
    "node_modules/hash-base/index.js"(exports, module) {
      "use strict";
      var Buffer4 = require_safe_buffer().Buffer;
      var Transform3 = require_readable().Transform;
      var inherits = require_inherits();
      function throwIfNotStringOrBuffer(val, prefix) {
        if (!Buffer4.isBuffer(val) && typeof val !== "string") {
          throw new TypeError(prefix + " must be a string or a buffer");
        }
      }
      function HashBase(blockSize) {
        Transform3.call(this);
        this._block = Buffer4.allocUnsafe(blockSize);
        this._blockSize = blockSize;
        this._blockOffset = 0;
        this._length = [0, 0, 0, 0];
        this._finalized = false;
      }
      inherits(HashBase, Transform3);
      HashBase.prototype._transform = function (chunk, encoding, callback) {
        var error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      HashBase.prototype._flush = function (callback) {
        var error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      };
      HashBase.prototype.update = function (data, encoding) {
        throwIfNotStringOrBuffer(data, "Data");
        if (this._finalized) throw new Error("Digest already called");
        if (!Buffer4.isBuffer(data)) data = Buffer4.from(data, encoding);
        var block = this._block;
        var offset = 0;
        while (this._blockOffset + data.length - offset >= this._blockSize) {
          for (var i = this._blockOffset; i < this._blockSize; )
            block[i++] = data[offset++];
          this._update();
          this._blockOffset = 0;
        }
        while (offset < data.length)
          block[this._blockOffset++] = data[offset++];
        for (var j2 = 0, carry = data.length * 8; carry > 0; ++j2) {
          this._length[j2] += carry;
          carry = (this._length[j2] / 4294967296) | 0;
          if (carry > 0) this._length[j2] -= 4294967296 * carry;
        }
        return this;
      };
      HashBase.prototype._update = function () {
        throw new Error("_update is not implemented");
      };
      HashBase.prototype.digest = function (encoding) {
        if (this._finalized) throw new Error("Digest already called");
        this._finalized = true;
        var digest = this._digest();
        if (encoding !== void 0) digest = digest.toString(encoding);
        this._block.fill(0);
        this._blockOffset = 0;
        for (var i = 0; i < 4; ++i) this._length[i] = 0;
        return digest;
      };
      HashBase.prototype._digest = function () {
        throw new Error("_digest is not implemented");
      };
      module.exports = HashBase;
    },
  });

  // node_modules/ripemd160/index.js
  var require_ripemd160 = __commonJS({
    "node_modules/ripemd160/index.js"(exports, module) {
      "use strict";
      var Buffer4 = __require("buffer").Buffer;
      var inherits = require_inherits();
      var HashBase = require_hash_base();
      var ARRAY16 = new Array(16);
      var zl = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10,
        6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0,
        6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
      ];
      var zr = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0,
        13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8,
        12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10,
        14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
      ];
      var sl = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11,
        9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14,
        8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6,
        5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
      ];
      var sr2 = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7,
        12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12,
        13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12,
        5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
      ];
      var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
      var hr2 = [1352829926, 1548603684, 1836072691, 2053994217, 0];
      function RIPEMD160() {
        HashBase.call(this, 64);
        this._a = 1732584193;
        this._b = 4023233417;
        this._c = 2562383102;
        this._d = 271733878;
        this._e = 3285377520;
      }
      inherits(RIPEMD160, HashBase);
      RIPEMD160.prototype._update = function () {
        var words2 = ARRAY16;
        for (var j2 = 0; j2 < 16; ++j2)
          words2[j2] = this._block.readInt32LE(j2 * 4);
        var al = this._a | 0;
        var bl = this._b | 0;
        var cl = this._c | 0;
        var dl = this._d | 0;
        var el = this._e | 0;
        var ar2 = this._a | 0;
        var br2 = this._b | 0;
        var cr2 = this._c | 0;
        var dr2 = this._d | 0;
        var er2 = this._e | 0;
        for (var i = 0; i < 80; i += 1) {
          var tl;
          var tr2;
          if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words2[zl[i]], hl[0], sl[i]);
            tr2 = fn5(ar2, br2, cr2, dr2, er2, words2[zr[i]], hr2[0], sr2[i]);
          } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words2[zl[i]], hl[1], sl[i]);
            tr2 = fn4(ar2, br2, cr2, dr2, er2, words2[zr[i]], hr2[1], sr2[i]);
          } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words2[zl[i]], hl[2], sl[i]);
            tr2 = fn3(ar2, br2, cr2, dr2, er2, words2[zr[i]], hr2[2], sr2[i]);
          } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words2[zl[i]], hl[3], sl[i]);
            tr2 = fn2(ar2, br2, cr2, dr2, er2, words2[zr[i]], hr2[3], sr2[i]);
          } else {
            tl = fn5(al, bl, cl, dl, el, words2[zl[i]], hl[4], sl[i]);
            tr2 = fn1(ar2, br2, cr2, dr2, er2, words2[zr[i]], hr2[4], sr2[i]);
          }
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = tl;
          ar2 = er2;
          er2 = dr2;
          dr2 = rotl(cr2, 10);
          cr2 = br2;
          br2 = tr2;
        }
        var t2 = (this._b + cl + dr2) | 0;
        this._b = (this._c + dl + er2) | 0;
        this._c = (this._d + el + ar2) | 0;
        this._d = (this._e + al + br2) | 0;
        this._e = (this._a + bl + cr2) | 0;
        this._a = t2;
      };
      RIPEMD160.prototype._digest = function () {
        this._block[this._blockOffset++] = 128;
        if (this._blockOffset > 56) {
          this._block.fill(0, this._blockOffset, 64);
          this._update();
          this._blockOffset = 0;
        }
        this._block.fill(0, this._blockOffset, 56);
        this._block.writeUInt32LE(this._length[0], 56);
        this._block.writeUInt32LE(this._length[1], 60);
        this._update();
        var buffer = Buffer4.alloc ? Buffer4.alloc(20) : new Buffer4(20);
        buffer.writeInt32LE(this._a, 0);
        buffer.writeInt32LE(this._b, 4);
        buffer.writeInt32LE(this._c, 8);
        buffer.writeInt32LE(this._d, 12);
        buffer.writeInt32LE(this._e, 16);
        return buffer;
      };
      function rotl(x2, n) {
        return (x2 << n) | (x2 >>> (32 - n));
      }
      function fn1(a2, b2, c2, d2, e, m2, k2, s2) {
        return (rotl((a2 + (b2 ^ c2 ^ d2) + m2 + k2) | 0, s2) + e) | 0;
      }
      function fn2(a2, b2, c2, d2, e, m2, k2, s2) {
        return (
          (rotl((a2 + ((b2 & c2) | (~b2 & d2)) + m2 + k2) | 0, s2) + e) | 0
        );
      }
      function fn3(a2, b2, c2, d2, e, m2, k2, s2) {
        return (rotl((a2 + ((b2 | ~c2) ^ d2) + m2 + k2) | 0, s2) + e) | 0;
      }
      function fn4(a2, b2, c2, d2, e, m2, k2, s2) {
        return (
          (rotl((a2 + ((b2 & d2) | (c2 & ~d2)) + m2 + k2) | 0, s2) + e) | 0
        );
      }
      function fn5(a2, b2, c2, d2, e, m2, k2, s2) {
        return (rotl((a2 + (b2 ^ (c2 | ~d2)) + m2 + k2) | 0, s2) + e) | 0;
      }
      module.exports = RIPEMD160;
    },
  });

  // node_modules/@ensdomains/address-encoder/lib/index.module.js
  var index_module_exports = {};
  __export(index_module_exports, {
    formats: () => br,
    formatsByCoinType: () => Er,
    formatsByName: () => mr,
  });
  function o(t2) {
    var r = t2 >> 25;
    return (
      ((33554431 & t2) << 5) ^
      (996825010 & -((r >> 0) & 1)) ^
      (642813549 & -((r >> 1) & 1)) ^
      (513874426 & -((r >> 2) & 1)) ^
      (1027748829 & -((r >> 3) & 1)) ^
      (705979059 & -((r >> 4) & 1))
    );
  }
  function f(t2) {
    for (var r = 1, e = 0; e < t2.length; ++e) {
      var n = t2.charCodeAt(e);
      if (n < 33 || n > 126) throw new Error("Invalid prefix (" + t2 + ")");
      r = o(r) ^ (n >> 5);
    }
    for (r = o(r), e = 0; e < t2.length; ++e) {
      var i = t2.charCodeAt(e);
      r = o(r) ^ (31 & i);
    }
    return r;
  }
  function u(t2, r, e, n) {
    for (
      var i = 0, o2 = 0, f2 = (1 << e) - 1, u2 = [], a2 = 0;
      a2 < t2.length;
      ++a2
    )
      for (i = (i << r) | t2[a2], o2 += r; o2 >= e; )
        u2.push((i >> (o2 -= e)) & f2);
    if (n) o2 > 0 && u2.push((i << (e - o2)) & f2);
    else {
      if (o2 >= r) throw new Error("Excess padding");
      if ((i << (e - o2)) & f2) throw new Error("Non-zero padding");
    }
    return u2;
  }
  function l(t2, r, e) {
    return (
      t2(
        (e = {
          path: r,
          exports: {},
          require: function (t3, r2) {
            return (function () {
              throw new Error(
                "Dynamic requires are not currently supported by @rollup/plugin-commonjs"
              );
            })();
          },
        }),
        e.exports
      ),
      e.exports
    );
  }
  function y(t2, r, e) {
    var n = t2[r] + t2[e],
      i = t2[r + 1] + t2[e + 1];
    n >= 4294967296 && i++, (t2[r] = n), (t2[r + 1] = i);
  }
  function v(t2, r, e, n) {
    var i = t2[r] + e;
    e < 0 && (i += 4294967296);
    var o2 = t2[r + 1] + n;
    i >= 4294967296 && o2++, (t2[r] = i), (t2[r + 1] = o2);
  }
  function w(t2, r) {
    return t2[r] ^ (t2[r + 1] << 8) ^ (t2[r + 2] << 16) ^ (t2[r + 3] << 24);
  }
  function b(t2, r, e, n, i, o2) {
    var f2 = A[i],
      u2 = A[i + 1],
      a2 = A[o2],
      s2 = A[o2 + 1];
    y(B, t2, r), v(B, t2, f2, u2);
    var h2 = B[n] ^ B[t2],
      c2 = B[n + 1] ^ B[t2 + 1];
    (B[n] = c2),
      (B[n + 1] = h2),
      y(B, e, n),
      (B[r] = ((h2 = B[r] ^ B[e]) >>> 24) ^ ((c2 = B[r + 1] ^ B[e + 1]) << 8)),
      (B[r + 1] = (c2 >>> 24) ^ (h2 << 8)),
      y(B, t2, r),
      v(B, t2, a2, s2),
      (B[n] =
        ((h2 = B[n] ^ B[t2]) >>> 16) ^ ((c2 = B[n + 1] ^ B[t2 + 1]) << 16)),
      (B[n + 1] = (c2 >>> 16) ^ (h2 << 16)),
      y(B, e, n),
      (B[r] = ((c2 = B[r + 1] ^ B[e + 1]) >>> 31) ^ ((h2 = B[r] ^ B[e]) << 1)),
      (B[r + 1] = (h2 >>> 31) ^ (c2 << 1));
  }
  function U(t2, r) {
    var e = 0;
    for (e = 0; e < 16; e++) (B[e] = t2.h[e]), (B[e + 16] = m[e]);
    for (
      B[24] = B[24] ^ t2.t,
        B[25] = B[25] ^ (t2.t / 4294967296),
        r && ((B[28] = ~B[28]), (B[29] = ~B[29])),
        e = 0;
      e < 32;
      e++
    )
      A[e] = w(t2.b, 4 * e);
    for (e = 0; e < 12; e++)
      b(0, 8, 16, 24, E[16 * e + 0], E[16 * e + 1]),
        b(2, 10, 18, 26, E[16 * e + 2], E[16 * e + 3]),
        b(4, 12, 20, 28, E[16 * e + 4], E[16 * e + 5]),
        b(6, 14, 22, 30, E[16 * e + 6], E[16 * e + 7]),
        b(0, 10, 20, 30, E[16 * e + 8], E[16 * e + 9]),
        b(2, 12, 22, 24, E[16 * e + 10], E[16 * e + 11]),
        b(4, 14, 16, 26, E[16 * e + 12], E[16 * e + 13]),
        b(6, 8, 18, 28, E[16 * e + 14], E[16 * e + 15]);
    for (e = 0; e < 16; e++) t2.h[e] = t2.h[e] ^ B[e] ^ B[e + 16];
  }
  function I(t2, r) {
    if (t2 === 0 || t2 > 64)
      throw new Error("Illegal output length, expected 0 < length <= 64");
    if (r && r.length > 64)
      throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
    for (
      var e = {
          b: new Uint8Array(128),
          h: new Uint32Array(16),
          t: 0,
          c: 0,
          outlen: t2,
        },
        n = 0;
      n < 16;
      n++
    )
      e.h[n] = m[n];
    return (
      (e.h[0] ^= 16842752 ^ ((r ? r.length : 0) << 8) ^ t2),
      r && (_(e, r), (e.c = 128)),
      e
    );
  }
  function _(t2, r) {
    for (var e = 0; e < r.length; e++)
      t2.c === 128 && ((t2.t += t2.c), U(t2, false), (t2.c = 0)),
        (t2.b[t2.c++] = r[e]);
  }
  function S(t2) {
    for (t2.t += t2.c; t2.c < 128; ) t2.b[t2.c++] = 0;
    U(t2, true);
    for (var r = new Uint8Array(t2.outlen), e = 0; e < t2.outlen; e++)
      r[e] = t2.h[e >> 2] >> (8 * (3 & e));
    return r;
  }
  function x(t2, r, e) {
    (e = e || 64), (t2 = d(t2));
    var n = I(e, r);
    return _(n, t2), S(n);
  }
  function O(t2, r) {
    return t2[r] ^ (t2[r + 1] << 8) ^ (t2[r + 2] << 16) ^ (t2[r + 3] << 24);
  }
  function C(t2, r, e, n, i, o2) {
    (P[t2] = P[t2] + P[r] + i),
      (P[n] = M(P[n] ^ P[t2], 16)),
      (P[e] = P[e] + P[n]),
      (P[r] = M(P[r] ^ P[e], 12)),
      (P[t2] = P[t2] + P[r] + o2),
      (P[n] = M(P[n] ^ P[t2], 8)),
      (P[e] = P[e] + P[n]),
      (P[r] = M(P[r] ^ P[e], 7));
  }
  function M(t2, r) {
    return (t2 >>> r) ^ (t2 << (32 - r));
  }
  function R(t2, r) {
    var e = 0;
    for (e = 0; e < 8; e++) (P[e] = t2.h[e]), (P[e + 8] = T[e]);
    for (
      P[12] ^= t2.t, P[13] ^= t2.t / 4294967296, r && (P[14] = ~P[14]), e = 0;
      e < 16;
      e++
    )
      z[e] = O(t2.b, 4 * e);
    for (e = 0; e < 10; e++)
      C(0, 4, 8, 12, z[L[16 * e + 0]], z[L[16 * e + 1]]),
        C(1, 5, 9, 13, z[L[16 * e + 2]], z[L[16 * e + 3]]),
        C(2, 6, 10, 14, z[L[16 * e + 4]], z[L[16 * e + 5]]),
        C(3, 7, 11, 15, z[L[16 * e + 6]], z[L[16 * e + 7]]),
        C(0, 5, 10, 15, z[L[16 * e + 8]], z[L[16 * e + 9]]),
        C(1, 6, 11, 12, z[L[16 * e + 10]], z[L[16 * e + 11]]),
        C(2, 7, 8, 13, z[L[16 * e + 12]], z[L[16 * e + 13]]),
        C(3, 4, 9, 14, z[L[16 * e + 14]], z[L[16 * e + 15]]);
    for (e = 0; e < 8; e++) t2.h[e] ^= P[e] ^ P[e + 8];
  }
  function N2(t2, r) {
    if (!(t2 > 0 && t2 <= 32))
      throw new Error("Incorrect output length, should be in [1, 32]");
    var e = r ? r.length : 0;
    if (r && !(e > 0 && e <= 32))
      throw new Error("Incorrect key length, should be in [1, 32]");
    var n = {
      h: new Uint32Array(T),
      b: new Uint32Array(64),
      c: 0,
      t: 0,
      outlen: t2,
    };
    return (
      (n.h[0] ^= 16842752 ^ (e << 8) ^ t2), e > 0 && (q(n, r), (n.c = 64)), n
    );
  }
  function q(t2, r) {
    for (var e = 0; e < r.length; e++)
      t2.c === 64 && ((t2.t += t2.c), R(t2, false), (t2.c = 0)),
        (t2.b[t2.c++] = r[e]);
  }
  function j(t2) {
    for (t2.t += t2.c; t2.c < 64; ) t2.b[t2.c++] = 0;
    R(t2, true);
    for (var r = new Uint8Array(t2.outlen), e = 0; e < t2.outlen; e++)
      r[e] = (t2.h[e >> 2] >> (8 * (3 & e))) & 255;
    return r;
  }
  function D(t2, r, e) {
    (e = e || 32), (t2 = d(t2));
    var n = N2(e, r);
    return q(n, t2), j(n);
  }
  function J(t2, r, e) {
    for (var n, i = [], o2 = r; o2 < e; o2 += 3)
      i.push(
        Z[
          ((n =
            ((t2[o2] << 16) & 16711680) +
            ((t2[o2 + 1] << 8) & 65280) +
            (255 & t2[o2 + 2])) >>
            18) &
            63
        ] +
          Z[(n >> 12) & 63] +
          Z[(n >> 6) & 63] +
          Z[63 & n]
      );
    return i.join("");
  }
  function It(t2, r) {
    return (t2 << r) | (t2 >>> (32 - r));
  }
  function _t(t2, r, e, n, i, o2, f2, u2) {
    return (It((t2 + (r ^ e ^ n) + o2 + f2) | 0, u2) + i) | 0;
  }
  function St(t2, r, e, n, i, o2, f2, u2) {
    return (It((t2 + ((r & e) | (~r & n)) + o2 + f2) | 0, u2) + i) | 0;
  }
  function xt(t2, r, e, n, i, o2, f2, u2) {
    return (It((t2 + ((r | ~e) ^ n) + o2 + f2) | 0, u2) + i) | 0;
  }
  function kt(t2, r, e, n, i, o2, f2, u2) {
    return (It((t2 + ((r & n) | (e & ~n)) + o2 + f2) | 0, u2) + i) | 0;
  }
  function Ot(t2, r, e, n, i, o2, f2, u2) {
    return (It((t2 + (r ^ (e | ~n)) + o2 + f2) | 0, u2) + i) | 0;
  }
  function Ct(t2, r) {
    return (
      t2[(r >>>= 0)] | (t2[r + 1] << 8) | (t2[r + 2] << 16) | (t2[r + 3] << 24)
    );
  }
  function Mt(t2, r, e) {
    return (
      (t2[3 + (e >>>= 0)] = (r = +r) >>> 24),
      (t2[e + 2] = r >>> 16),
      (t2[e + 1] = r >>> 8),
      (t2[e] = 255 & r),
      e + 4
    );
  }
  function Tt(t2, r, e) {
    return (
      (t2[(e >>>= 0)] = 255 & (r = +r)),
      (t2[e + 1] = r >>> 8),
      (t2[e + 2] = r >>> 16),
      (t2[e + 3] = r >>> 24),
      e + 4
    );
  }
  function Lt(t2) {
    return typeof Uint32Array != "undefined" ? new Uint32Array(t2) : t2;
  }
  function Pt(t2) {
    return typeof Uint8Array != "undefined" ? new Uint8Array(t2) : t2;
  }
  function zt(t2) {
    return typeof Uint8Array != "undefined"
      ? new Uint8Array(t2)
      : new Array(t2);
  }
  function Ht(t2) {
    var r = Dt.indexOf(t2);
    if (r === -1) throw new Error("Invalid character found: " + t2);
    return r;
  }
  function Vt(t2) {
    return F.blake2b(t2, null, 4);
  }
  function Yt(t2, r) {
    if (!r || !r.str) throw Error("Invalid address");
    var e = "",
      n = r.payload(),
      i = r.protocol();
    switch (i) {
      case 0:
        var o2 = (function (t3) {
          return (function (t4) {
            for (
              var r2, e2 = new Zt(0), n2 = 0;
              (r2 = t4.read(1)[0]),
                e2.ior(new Zt(127 & r2).shln(n2)),
                r2 >> 7 != 0;

            )
              n2 += 7;
            return e2;
          })(new Kt(t3)).toString();
        })(n);
        e = t2 + String(i) + o2;
        break;
      default:
        var f2 = Buffer.from([i]),
          u2 = Vt(Buffer.concat([f2, n])),
          a2 = Buffer.concat([n, Buffer.from(u2)]),
          s2 = jt.hex2a(a2.toString("hex")),
          h2 = jt.b32encode(s2).replace(/=/g, "").toLowerCase();
        e = String(t2) + String(i) + h2;
    }
    return e;
  }
  function Wt(t2, r) {
    var e = Buffer.from([t2]),
      n = Buffer.concat([e, r]);
    return new Xt(n);
  }
  function Jt(t2, r) {
    return function (e) {
      var n;
      switch (e.readUInt8(0)) {
        case 118:
          if (
            e.readUInt8(1) !== 169 ||
            e.readUInt8(e.length - 2) !== 136 ||
            e.readUInt8(e.length - 1) !== 172
          )
            throw Error("Unrecognised address format");
          return (
            (n = Buffer.concat([
              Buffer.from(t2),
              e.slice(3, 3 + e.readUInt8(2)),
            ])),
            jt.bs58Encode(n)
          );
        case 169:
          if (e.readUInt8(e.length - 1) !== 135)
            throw Error("Unrecognised address format");
          return (
            (n = Buffer.concat([
              Buffer.from(r),
              e.slice(2, 2 + e.readUInt8(1)),
            ])),
            jt.bs58Encode(n)
          );
        default:
          throw Error("Unrecognised address format");
      }
    };
  }
  function Gt(t2, r) {
    return function (e) {
      var n = jt.bs58Decode(e),
        i = function (t3) {
          return t3.every(function (t4, r2) {
            return r2 < n.length && t4 === n.readUInt8(r2);
          });
        };
      if (t2.some(i))
        return Buffer.concat([
          Buffer.from([118, 169, 20]),
          n.slice(t2[0].length),
          Buffer.from([136, 172]),
        ]);
      if (r.some(i))
        return Buffer.concat([
          Buffer.from([169, 20]),
          n.slice(r[0].length),
          Buffer.from([135]),
        ]);
      throw Error("Unrecognised address format");
    };
  }
  function $t(t2, r, e) {
    var n = (function (t3) {
        return function (r2) {
          var e2 = r2.readUInt8(0);
          if (e2 >= 81 && e2 <= 96) e2 -= 80;
          else if (e2 !== 0) throw Error("Unrecognised address format");
          var n2 = [e2].concat(h(r2.slice(2, r2.readUInt8(1) + 2)));
          return s(t3, n2);
        };
      })(t2),
      i = Jt(r, e);
    return function (t3) {
      try {
        return i(t3);
      } catch (r2) {
        return n(t3);
      }
    };
  }
  function tr(t2, r, e) {
    var n = (function (t3) {
        return function (r2) {
          var e2 = a(r2),
            n2 = e2.words;
          if (e2.prefix !== t3)
            throw Error(
              "Unexpected human-readable part in bech32 encoded address"
            );
          var i2 = c(n2.slice(1)),
            o2 = n2[0];
          return (
            o2 > 0 && (o2 += 80),
            Buffer.concat([Buffer.from([o2, i2.length]), Buffer.from(i2)])
          );
        };
      })(t2),
      i = Gt(r, e);
    return function (r2) {
      return r2.toLowerCase().startsWith(t2 + "1") ? n(r2) : i(r2);
    };
  }
  function er(t2) {
    return function (r) {
      return jt.toChecksumAddress(r.toString("hex"), t2 || null);
    };
  }
  function nr(t2) {
    return function (r) {
      var e = jt.stripHexPrefix(r);
      if (
        !jt.isValidChecksumAddress(r, t2 || null) &&
        e !== e.toLowerCase() &&
        e !== e.toUpperCase()
      )
        throw Error("Invalid address checksum");
      return Buffer.from(jt.stripHexPrefix(r), "hex");
    };
  }
  function or(t2) {
    return function (r) {
      return s(t2, h(r));
    };
  }
  function fr(t2) {
    return function (r) {
      var e = a(r),
        n = e.words;
      if (e.prefix !== t2) throw Error("Unrecognised address format");
      return Buffer.from(c(n));
    };
  }
  function ar(t2) {
    return new Buffer(jt.ss58Decode(t2));
  }
  function sr(t2) {
    var r = new (require_ripemd160())().update(t2).digest();
    return "STM" + ot.encode(Buffer.concat([t2, r.slice(0, 4)]));
  }
  function hr(t2) {
    var r = require_ripemd160();
    if (t2.slice(0, 3) !== "STM") throw Error("Unrecognised address format");
    t2 = t2.slice(3);
    var e = ot.decode(t2),
      n = e.slice(-4),
      i = e.slice(0, -4);
    if (!new r().update(i).digest().slice(0, 4).equals(n))
      throw Error("Invalid checksum");
    return Buffer.from(i);
  }
  function cr(r) {
    return (0, import_crypto7.createHash)("SHA512-256")
      .update(r)
      .digest("hex")
      .substr(-8);
  }
  var import_crypto7,
    i,
    r,
    e,
    n,
    a,
    s,
    h,
    c,
    p,
    d,
    g,
    m,
    E,
    B,
    A,
    k,
    T,
    L,
    P,
    z,
    H,
    F,
    Z,
    K,
    X,
    V,
    Y,
    W,
    G,
    Q,
    $,
    tt,
    rt,
    et,
    nt,
    it,
    ot,
    ft,
    ut,
    at,
    st,
    ht,
    ct,
    lt,
    pt,
    dt,
    gt,
    yt,
    vt,
    wt,
    bt,
    mt,
    Et,
    Bt,
    At,
    Ut,
    Rt,
    Nt,
    qt,
    jt,
    Dt,
    Ft,
    Zt,
    Kt,
    Xt,
    Qt,
    rr,
    ir,
    ur,
    lr,
    pr,
    dr,
    gr,
    yr,
    vr,
    wr,
    br,
    mr,
    Er;
  var init_index_module = __esm({
    "node_modules/@ensdomains/address-encoder/lib/index.module.js"() {
      import_crypto7 = __require("crypto");
      for (
        r = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", e = {}, n = 0;
        n < r.length;
        n++
      ) {
        i = r.charAt(n);
        if (e[i] !== void 0) throw new TypeError(i + " is ambiguous");
        e[i] = n;
      }
      a = function (t2, r) {
        if (((r = r || 90), t2.length < 8))
          throw new TypeError(t2 + " too short");
        if (t2.length > r) throw new TypeError("Exceeds length limit");
        var n = t2.toLowerCase(),
          i = t2.toUpperCase();
        if (t2 !== n && t2 !== i) throw new Error("Mixed-case string " + t2);
        var u2 = (t2 = n).lastIndexOf("1");
        if (u2 === -1) throw new Error("No separator character for " + t2);
        if (u2 === 0) throw new Error("Missing prefix for " + t2);
        var a2 = t2.slice(0, u2),
          s2 = t2.slice(u2 + 1);
        if (s2.length < 6) throw new Error("Data too short");
        for (var h2 = f(a2), c2 = [], l2 = 0; l2 < s2.length; ++l2) {
          var p2 = s2.charAt(l2),
            d2 = e[p2];
          if (d2 === void 0) throw new Error("Unknown character " + p2);
          (h2 = o(h2) ^ d2), l2 + 6 >= s2.length || c2.push(d2);
        }
        if (h2 !== 1) throw new Error("Invalid checksum for " + t2);
        return { prefix: a2, words: c2 };
      };
      s = function (t2, e, n) {
        if (t2.length + 7 + e.length > (n = n || 90))
          throw new TypeError("Exceeds length limit");
        for (
          var i = f((t2 = t2.toLowerCase())), u2 = t2 + "1", a2 = 0;
          a2 < e.length;
          ++a2
        ) {
          var s2 = e[a2];
          if (s2 >> 5 != 0) throw new Error("Non 5-bit word");
          (i = o(i) ^ s2), (u2 += r.charAt(s2));
        }
        for (a2 = 0; a2 < 6; ++a2) i = o(i);
        for (i ^= 1, a2 = 0; a2 < 6; ++a2)
          u2 += r.charAt((i >> (5 * (5 - a2))) & 31);
        return u2;
      };
      h = function (t2) {
        return u(t2, 8, 5, true);
      };
      c = function (t2) {
        return u(t2, 5, 8, false);
      };
      p = l(function (t2) {
        var r = (function (t3) {
          var e = 1e7,
            n = 9007199254740992,
            i = h2(n),
            o2 = Math.log(n);
          function f2(t4, r2) {
            return t4 === void 0
              ? f2[0]
              : r2 !== void 0
              ? +r2 == 10
                ? K(t4)
                : q2(t4, r2)
              : K(t4);
          }
          function u2(t4, r2) {
            (this.value = t4), (this.sign = r2), (this.isSmall = false);
          }
          function a2(t4) {
            (this.value = t4), (this.sign = t4 < 0), (this.isSmall = true);
          }
          function s2(t4) {
            return -n < t4 && t4 < n;
          }
          function h2(t4) {
            return t4 < 1e7
              ? [t4]
              : t4 < 1e14
              ? [t4 % 1e7, Math.floor(t4 / 1e7)]
              : [t4 % 1e7, Math.floor(t4 / 1e7) % 1e7, Math.floor(t4 / 1e14)];
          }
          function c2(t4) {
            l2(t4);
            var r2 = t4.length;
            if (r2 < 4 && S2(t4, i) < 0)
              switch (r2) {
                case 0:
                  return 0;
                case 1:
                  return t4[0];
                case 2:
                  return t4[0] + t4[1] * e;
                default:
                  return t4[0] + (t4[1] + t4[2] * e) * e;
              }
            return t4;
          }
          function l2(t4) {
            for (var r2 = t4.length; t4[--r2] === 0; );
            t4.length = r2 + 1;
          }
          function p2(t4) {
            for (var r2 = new Array(t4), e2 = -1; ++e2 < t4; ) r2[e2] = 0;
            return r2;
          }
          function d2(t4) {
            return t4 > 0 ? Math.floor(t4) : Math.ceil(t4);
          }
          function g2(t4, r2) {
            var n2,
              i2,
              o3 = t4.length,
              f3 = r2.length,
              u3 = new Array(o3),
              a3 = 0,
              s3 = e;
            for (i2 = 0; i2 < f3; i2++)
              u3[i2] =
                (n2 = t4[i2] + r2[i2] + a3) - (a3 = n2 >= s3 ? 1 : 0) * s3;
            for (; i2 < o3; )
              (n2 = t4[i2] + a3),
                (u3[i2++] = n2 - (a3 = n2 === s3 ? 1 : 0) * s3);
            return a3 > 0 && u3.push(a3), u3;
          }
          function y2(t4, r2) {
            return t4.length >= r2.length ? g2(t4, r2) : g2(r2, t4);
          }
          function v2(t4, r2) {
            var n2,
              i2,
              o3 = t4.length,
              f3 = new Array(o3),
              u3 = e;
            for (i2 = 0; i2 < o3; i2++)
              (n2 = t4[i2] - u3 + r2),
                (r2 = Math.floor(n2 / u3)),
                (f3[i2] = n2 - r2 * u3),
                (r2 += 1);
            for (; r2 > 0; ) (f3[i2++] = r2 % u3), (r2 = Math.floor(r2 / u3));
            return f3;
          }
          function w2(t4, r2) {
            var e2,
              n2,
              i2 = t4.length,
              o3 = r2.length,
              f3 = new Array(i2),
              u3 = 0;
            for (e2 = 0; e2 < o3; e2++)
              (n2 = t4[e2] - u3 - r2[e2]) < 0
                ? ((n2 += 1e7), (u3 = 1))
                : (u3 = 0),
                (f3[e2] = n2);
            for (e2 = o3; e2 < i2; e2++) {
              if (!((n2 = t4[e2] - u3) < 0)) {
                f3[e2++] = n2;
                break;
              }
              f3[e2] = n2 += 1e7;
            }
            for (; e2 < i2; e2++) f3[e2] = t4[e2];
            return l2(f3), f3;
          }
          function b2(t4, r2, e2) {
            var n2,
              i2,
              o3 = t4.length,
              f3 = new Array(o3),
              s3 = -r2;
            for (n2 = 0; n2 < o3; n2++)
              (i2 = t4[n2] + s3),
                (s3 = Math.floor(i2 / 1e7)),
                (f3[n2] = (i2 %= 1e7) < 0 ? i2 + 1e7 : i2);
            return typeof (f3 = c2(f3)) == "number"
              ? (e2 && (f3 = -f3), new a2(f3))
              : new u2(f3, e2);
          }
          function m2(t4, r2) {
            var e2,
              n2,
              i2,
              o3,
              f3 = t4.length,
              u3 = r2.length,
              a3 = p2(f3 + u3);
            for (i2 = 0; i2 < f3; ++i2) {
              o3 = t4[i2];
              for (var s3 = 0; s3 < u3; ++s3)
                (e2 = o3 * r2[s3] + a3[i2 + s3]),
                  (n2 = Math.floor(e2 / 1e7)),
                  (a3[i2 + s3] = e2 - 1e7 * n2),
                  (a3[i2 + s3 + 1] += n2);
            }
            return l2(a3), a3;
          }
          function E2(t4, r2) {
            var n2,
              i2,
              o3 = t4.length,
              f3 = new Array(o3),
              u3 = e,
              a3 = 0;
            for (i2 = 0; i2 < o3; i2++)
              (n2 = t4[i2] * r2 + a3),
                (a3 = Math.floor(n2 / u3)),
                (f3[i2] = n2 - a3 * u3);
            for (; a3 > 0; ) (f3[i2++] = a3 % u3), (a3 = Math.floor(a3 / u3));
            return f3;
          }
          function B2(t4, r2) {
            for (var e2 = []; r2-- > 0; ) e2.push(0);
            return e2.concat(t4);
          }
          function A2(t4, r2, n2) {
            return new u2(t4 < e ? E2(r2, t4) : m2(r2, h2(t4)), n2);
          }
          function U2(t4) {
            var r2,
              e2,
              n2,
              i2,
              o3 = t4.length,
              f3 = p2(o3 + o3);
            for (n2 = 0; n2 < o3; n2++) {
              e2 = 0 - (i2 = t4[n2]) * i2;
              for (var u3 = n2; u3 < o3; u3++)
                (r2 = i2 * t4[u3] * 2 + f3[n2 + u3] + e2),
                  (e2 = Math.floor(r2 / 1e7)),
                  (f3[n2 + u3] = r2 - 1e7 * e2);
              f3[n2 + o3] = e2;
            }
            return l2(f3), f3;
          }
          function I2(t4, r2) {
            var e2,
              n2,
              i2,
              o3,
              f3 = t4.length,
              u3 = p2(f3);
            for (i2 = 0, e2 = f3 - 1; e2 >= 0; --e2)
              (i2 = (o3 = 1e7 * i2 + t4[e2]) - (n2 = d2(o3 / r2)) * r2),
                (u3[e2] = 0 | n2);
            return [u3, 0 | i2];
          }
          function _2(t4, r2) {
            var n2,
              i2,
              o3 = K(r2),
              s3 = t4.value,
              g3 = o3.value;
            if (g3 === 0) throw new Error("Cannot divide by zero");
            if (t4.isSmall)
              return o3.isSmall
                ? [new a2(d2(s3 / g3)), new a2(s3 % g3)]
                : [f2[0], t4];
            if (o3.isSmall) {
              if (g3 === 1) return [t4, f2[0]];
              if (g3 == -1) return [t4.negate(), f2[0]];
              var y3 = Math.abs(g3);
              if (y3 < e) {
                i2 = c2((n2 = I2(s3, y3))[0]);
                var v3 = n2[1];
                return (
                  t4.sign && (v3 = -v3),
                  typeof i2 == "number"
                    ? (t4.sign !== o3.sign && (i2 = -i2),
                      [new a2(i2), new a2(v3)])
                    : [new u2(i2, t4.sign !== o3.sign), new a2(v3)]
                );
              }
              g3 = h2(y3);
            }
            var b3 = S2(s3, g3);
            if (b3 === -1) return [f2[0], t4];
            if (b3 === 0) return [f2[t4.sign === o3.sign ? 1 : -1], f2[0]];
            n2 =
              s3.length + g3.length <= 200
                ? (function (t5, r3) {
                    var n3,
                      i3,
                      o4,
                      f3,
                      u3,
                      a3,
                      s4,
                      h3 = t5.length,
                      l3 = r3.length,
                      d3 = e,
                      g4 = p2(r3.length),
                      y4 = r3[l3 - 1],
                      v4 = Math.ceil(d3 / (2 * y4)),
                      w3 = E2(t5, v4),
                      b4 = E2(r3, v4);
                    for (
                      w3.length <= h3 && w3.push(0),
                        b4.push(0),
                        y4 = b4[l3 - 1],
                        i3 = h3 - l3;
                      i3 >= 0;
                      i3--
                    ) {
                      for (
                        n3 = d3 - 1,
                          w3[i3 + l3] !== y4 &&
                            (n3 = Math.floor(
                              (w3[i3 + l3] * d3 + w3[i3 + l3 - 1]) / y4
                            )),
                          o4 = 0,
                          f3 = 0,
                          a3 = b4.length,
                          u3 = 0;
                        u3 < a3;
                        u3++
                      )
                        (o4 += n3 * b4[u3]),
                          (s4 = Math.floor(o4 / d3)),
                          (f3 += w3[i3 + u3] - (o4 - s4 * d3)),
                          (o4 = s4),
                          f3 < 0
                            ? ((w3[i3 + u3] = f3 + d3), (f3 = -1))
                            : ((w3[i3 + u3] = f3), (f3 = 0));
                      for (; f3 !== 0; ) {
                        for (n3 -= 1, o4 = 0, u3 = 0; u3 < a3; u3++)
                          (o4 += w3[i3 + u3] - d3 + b4[u3]) < 0
                            ? ((w3[i3 + u3] = o4 + d3), (o4 = 0))
                            : ((w3[i3 + u3] = o4), (o4 = 1));
                        f3 += o4;
                      }
                      g4[i3] = n3;
                    }
                    return (w3 = I2(w3, v4)[0]), [c2(g4), c2(w3)];
                  })(s3, g3)
                : (function (t5, r3) {
                    for (
                      var e2,
                        n3,
                        i3,
                        o4,
                        f3 = t5.length,
                        u3 = r3.length,
                        a3 = [],
                        s4 = [];
                      f3;

                    )
                      if ((s4.unshift(t5[--f3]), l2(s4), S2(s4, r3) < 0))
                        a3.push(0);
                      else {
                        (i3 = 1e7 * s4[(n3 = s4.length) - 1] + s4[n3 - 2]),
                          n3 > u3 && (i3 = 1e7 * (i3 + 1)),
                          (e2 = Math.ceil(
                            i3 / (1e7 * r3[u3 - 1] + r3[u3 - 2])
                          ));
                        do {
                          if (S2((o4 = E2(r3, e2)), s4) <= 0) break;
                          e2--;
                        } while (e2);
                        a3.push(e2), (s4 = w2(s4, o4));
                      }
                    return a3.reverse(), [c2(a3), c2(s4)];
                  })(s3, g3);
            var m3 = t4.sign !== o3.sign,
              B3 = n2[1],
              A3 = t4.sign;
            return (
              typeof (i2 = n2[0]) == "number"
                ? (m3 && (i2 = -i2), (i2 = new a2(i2)))
                : (i2 = new u2(i2, m3)),
              typeof B3 == "number"
                ? (A3 && (B3 = -B3), (B3 = new a2(B3)))
                : (B3 = new u2(B3, A3)),
              [i2, B3]
            );
          }
          function S2(t4, r2) {
            if (t4.length !== r2.length) return t4.length > r2.length ? 1 : -1;
            for (var e2 = t4.length - 1; e2 >= 0; e2--)
              if (t4[e2] !== r2[e2]) return t4[e2] > r2[e2] ? 1 : -1;
            return 0;
          }
          function x2(t4) {
            var r2 = t4.abs();
            return (
              !r2.isUnit() &&
              (!!(r2.equals(2) || r2.equals(3) || r2.equals(5)) ||
                (!(r2.isEven() || r2.isDivisibleBy(3) || r2.isDivisibleBy(5)) &&
                  (!!r2.lesser(49) || void 0)))
            );
          }
          function k2(t4, e2) {
            for (var n2, i2, o3, u3 = t4.prev(), a3 = u3, s3 = 0; a3.isEven(); )
              (a3 = a3.divide(2)), s3++;
            t: for (i2 = 0; i2 < e2.length; i2++)
              if (
                !t4.lesser(e2[i2]) &&
                !(o3 = r(e2[i2]).modPow(a3, t4)).equals(f2[1]) &&
                !o3.equals(u3)
              ) {
                for (n2 = s3 - 1; n2 != 0; n2--) {
                  if ((o3 = o3.square().mod(t4)).isUnit()) return false;
                  if (o3.equals(u3)) continue t;
                }
                return false;
              }
            return true;
          }
          (u2.prototype = Object.create(f2.prototype)),
            (a2.prototype = Object.create(f2.prototype)),
            (u2.prototype.add = function (t4) {
              var r2 = K(t4);
              if (this.sign !== r2.sign) return this.subtract(r2.negate());
              var e2 = this.value,
                n2 = r2.value;
              return new u2(
                r2.isSmall ? v2(e2, Math.abs(n2)) : y2(e2, n2),
                this.sign
              );
            }),
            (u2.prototype.plus = u2.prototype.add),
            (a2.prototype.add = function (t4) {
              var r2 = K(t4),
                e2 = this.value;
              if (e2 < 0 !== r2.sign) return this.subtract(r2.negate());
              var n2 = r2.value;
              if (r2.isSmall) {
                if (s2(e2 + n2)) return new a2(e2 + n2);
                n2 = h2(Math.abs(n2));
              }
              return new u2(v2(n2, Math.abs(e2)), e2 < 0);
            }),
            (a2.prototype.plus = a2.prototype.add),
            (u2.prototype.subtract = function (t4) {
              var r2 = K(t4);
              if (this.sign !== r2.sign) return this.add(r2.negate());
              var e2 = this.value,
                n2 = r2.value;
              return r2.isSmall
                ? b2(e2, Math.abs(n2), this.sign)
                : (function (t5, r3, e3) {
                    var n3;
                    return (
                      S2(t5, r3) >= 0
                        ? (n3 = w2(t5, r3))
                        : ((n3 = w2(r3, t5)), (e3 = !e3)),
                      typeof (n3 = c2(n3)) == "number"
                        ? (e3 && (n3 = -n3), new a2(n3))
                        : new u2(n3, e3)
                    );
                  })(e2, n2, this.sign);
            }),
            (u2.prototype.minus = u2.prototype.subtract),
            (a2.prototype.subtract = function (t4) {
              var r2 = K(t4),
                e2 = this.value;
              if (e2 < 0 !== r2.sign) return this.add(r2.negate());
              var n2 = r2.value;
              return r2.isSmall
                ? new a2(e2 - n2)
                : b2(n2, Math.abs(e2), e2 >= 0);
            }),
            (a2.prototype.minus = a2.prototype.subtract),
            (u2.prototype.negate = function () {
              return new u2(this.value, !this.sign);
            }),
            (a2.prototype.negate = function () {
              var t4 = this.sign,
                r2 = new a2(-this.value);
              return (r2.sign = !t4), r2;
            }),
            (u2.prototype.abs = function () {
              return new u2(this.value, false);
            }),
            (a2.prototype.abs = function () {
              return new a2(Math.abs(this.value));
            }),
            (u2.prototype.multiply = function (t4) {
              var r2,
                n2,
                i2,
                o3 = K(t4),
                a3 = this.value,
                s3 = o3.value,
                c3 = this.sign !== o3.sign;
              if (o3.isSmall) {
                if (s3 === 0) return f2[0];
                if (s3 === 1) return this;
                if (s3 === -1) return this.negate();
                if ((r2 = Math.abs(s3)) < e) return new u2(E2(a3, r2), c3);
                s3 = h2(r2);
              }
              return -0.012 * (n2 = a3.length) -
                0.012 * (i2 = s3.length) +
                15e-6 * n2 * i2 >
                0
                ? new u2(
                    (function t5(r3, e2) {
                      var n3 = Math.max(r3.length, e2.length);
                      if (n3 <= 30) return m2(r3, e2);
                      n3 = Math.ceil(n3 / 2);
                      var i3 = r3.slice(n3),
                        o4 = r3.slice(0, n3),
                        f3 = e2.slice(n3),
                        u3 = e2.slice(0, n3),
                        a4 = t5(o4, u3),
                        s4 = t5(i3, f3),
                        h3 = t5(y2(o4, i3), y2(u3, f3)),
                        c4 = y2(
                          y2(a4, B2(w2(w2(h3, a4), s4), n3)),
                          B2(s4, 2 * n3)
                        );
                      return l2(c4), c4;
                    })(a3, s3),
                    c3
                  )
                : new u2(m2(a3, s3), c3);
            }),
            (u2.prototype.times = u2.prototype.multiply),
            (a2.prototype._multiplyBySmall = function (t4) {
              return s2(t4.value * this.value)
                ? new a2(t4.value * this.value)
                : A2(
                    Math.abs(t4.value),
                    h2(Math.abs(this.value)),
                    this.sign !== t4.sign
                  );
            }),
            (u2.prototype._multiplyBySmall = function (t4) {
              return t4.value === 0
                ? f2[0]
                : t4.value === 1
                ? this
                : t4.value === -1
                ? this.negate()
                : A2(Math.abs(t4.value), this.value, this.sign !== t4.sign);
            }),
            (a2.prototype.times = a2.prototype.multiply =
              function (t4) {
                return K(t4)._multiplyBySmall(this);
              }),
            (u2.prototype.square = function () {
              return new u2(U2(this.value), false);
            }),
            (a2.prototype.square = function () {
              var t4 = this.value * this.value;
              return s2(t4)
                ? new a2(t4)
                : new u2(U2(h2(Math.abs(this.value))), false);
            }),
            (a2.prototype.divmod = u2.prototype.divmod =
              function (t4) {
                var r2 = _2(this, t4);
                return { quotient: r2[0], remainder: r2[1] };
              }),
            (a2.prototype.over =
              a2.prototype.divide =
              u2.prototype.over =
              u2.prototype.divide =
                function (t4) {
                  return _2(this, t4)[0];
                }),
            (a2.prototype.remainder =
              a2.prototype.mod =
              u2.prototype.remainder =
              u2.prototype.mod =
                function (t4) {
                  return _2(this, t4)[1];
                }),
            (u2.prototype.pow = function (t4) {
              var r2,
                e2,
                n2,
                i2 = K(t4),
                o3 = this.value,
                u3 = i2.value;
              if (u3 === 0) return f2[1];
              if (o3 === 0) return f2[0];
              if (o3 === 1) return f2[1];
              if (o3 === -1) return i2.isEven() ? f2[1] : f2[-1];
              if (i2.sign) return f2[0];
              if (!i2.isSmall)
                throw new Error(
                  "The exponent " + i2.toString() + " is too large."
                );
              if (this.isSmall && s2((r2 = Math.pow(o3, u3))))
                return new a2(d2(r2));
              for (
                e2 = this, n2 = f2[1];
                true & u3 && ((n2 = n2.times(e2)), --u3), u3 !== 0;

              )
                (u3 /= 2), (e2 = e2.square());
              return n2;
            }),
            (a2.prototype.pow = u2.prototype.pow),
            (a2.prototype.modPow = u2.prototype.modPow =
              function (t4, r2) {
                if (((t4 = K(t4)), (r2 = K(r2)).isZero()))
                  throw new Error("Cannot take modPow with modulus 0");
                for (var e2 = f2[1], n2 = this.mod(r2); t4.isPositive(); ) {
                  if (n2.isZero()) return f2[0];
                  t4.isOdd() && (e2 = e2.multiply(n2).mod(r2)),
                    (t4 = t4.divide(2)),
                    (n2 = n2.square().mod(r2));
                }
                return e2;
              }),
            (u2.prototype.compareAbs = function (t4) {
              var r2 = K(t4);
              return r2.isSmall ? 1 : S2(this.value, r2.value);
            }),
            (a2.prototype.compareAbs = function (t4) {
              var r2 = K(t4),
                e2 = Math.abs(this.value),
                n2 = r2.value;
              return r2.isSmall
                ? e2 === (n2 = Math.abs(n2))
                  ? 0
                  : e2 > n2
                  ? 1
                  : -1
                : -1;
            }),
            (u2.prototype.compareTo = u2.prototype.compare =
              function (t4) {
                if (t4 === Infinity) return -1;
                if (t4 === -Infinity) return 1;
                var r2 = K(t4);
                return this.sign !== r2.sign
                  ? r2.sign
                    ? 1
                    : -1
                  : r2.isSmall
                  ? this.sign
                    ? -1
                    : 1
                  : S2(this.value, r2.value) * (this.sign ? -1 : 1);
              }),
            (a2.prototype.compareTo = a2.prototype.compare =
              function (t4) {
                if (t4 === Infinity) return -1;
                if (t4 === -Infinity) return 1;
                var r2 = K(t4),
                  e2 = this.value,
                  n2 = r2.value;
                return r2.isSmall
                  ? e2 == n2
                    ? 0
                    : e2 > n2
                    ? 1
                    : -1
                  : e2 < 0 !== r2.sign
                  ? e2 < 0
                    ? -1
                    : 1
                  : e2 < 0
                  ? 1
                  : -1;
              }),
            (a2.prototype.eq =
              a2.prototype.equals =
              u2.prototype.eq =
              u2.prototype.equals =
                function (t4) {
                  return this.compare(t4) === 0;
                }),
            (a2.prototype.neq =
              a2.prototype.notEquals =
              u2.prototype.neq =
              u2.prototype.notEquals =
                function (t4) {
                  return this.compare(t4) !== 0;
                }),
            (a2.prototype.gt =
              a2.prototype.greater =
              u2.prototype.gt =
              u2.prototype.greater =
                function (t4) {
                  return this.compare(t4) > 0;
                }),
            (a2.prototype.lt =
              a2.prototype.lesser =
              u2.prototype.lt =
              u2.prototype.lesser =
                function (t4) {
                  return this.compare(t4) < 0;
                }),
            (a2.prototype.geq =
              a2.prototype.greaterOrEquals =
              u2.prototype.geq =
              u2.prototype.greaterOrEquals =
                function (t4) {
                  return this.compare(t4) >= 0;
                }),
            (a2.prototype.leq =
              a2.prototype.lesserOrEquals =
              u2.prototype.leq =
              u2.prototype.lesserOrEquals =
                function (t4) {
                  return this.compare(t4) <= 0;
                }),
            (u2.prototype.isEven = function () {
              return (1 & this.value[0]) == 0;
            }),
            (a2.prototype.isEven = function () {
              return (1 & this.value) == 0;
            }),
            (u2.prototype.isOdd = function () {
              return (1 & this.value[0]) == 1;
            }),
            (a2.prototype.isOdd = function () {
              return (1 & this.value) == 1;
            }),
            (u2.prototype.isPositive = function () {
              return !this.sign;
            }),
            (a2.prototype.isPositive = function () {
              return this.value > 0;
            }),
            (u2.prototype.isNegative = function () {
              return this.sign;
            }),
            (a2.prototype.isNegative = function () {
              return this.value < 0;
            }),
            (u2.prototype.isUnit = function () {
              return false;
            }),
            (a2.prototype.isUnit = function () {
              return Math.abs(this.value) === 1;
            }),
            (u2.prototype.isZero = function () {
              return false;
            }),
            (a2.prototype.isZero = function () {
              return this.value === 0;
            }),
            (a2.prototype.isDivisibleBy = u2.prototype.isDivisibleBy =
              function (t4) {
                var r2 = K(t4),
                  e2 = r2.value;
                return (
                  e2 !== 0 &&
                  (e2 === 1 ||
                    (e2 === 2 ? this.isEven() : this.mod(r2).equals(f2[0])))
                );
              }),
            (a2.prototype.isPrime = u2.prototype.isPrime =
              function (t4) {
                var e2 = x2(this);
                if (e2 !== void 0) return e2;
                var n2 = this.abs(),
                  i2 = n2.bitLength();
                if (i2 <= 64)
                  return k2(
                    n2,
                    [2, 325, 9375, 28178, 450775, 9780504, 1795265022]
                  );
                for (
                  var o3 = Math.log(2) * i2,
                    f3 = Math.ceil(t4 === true ? 2 * Math.pow(o3, 2) : o3),
                    u3 = [],
                    a3 = 0;
                  a3 < f3;
                  a3++
                )
                  u3.push(r(a3 + 2));
                return k2(n2, u3);
              }),
            (a2.prototype.isProbablePrime = u2.prototype.isProbablePrime =
              function (t4) {
                var e2 = x2(this);
                if (e2 !== void 0) return e2;
                for (
                  var n2 = this.abs(),
                    i2 = t4 === void 0 ? 5 : t4,
                    o3 = [],
                    f3 = 0;
                  f3 < i2;
                  f3++
                )
                  o3.push(r.randBetween(2, n2.minus(2)));
                return k2(n2, o3);
              }),
            (a2.prototype.modInv = u2.prototype.modInv =
              function (t4) {
                for (
                  var e2,
                    n2,
                    i2,
                    o3 = r.zero,
                    f3 = r.one,
                    u3 = K(t4),
                    a3 = this.abs();
                  !a3.equals(r.zero);

                )
                  (e2 = u3.divide(a3)),
                    (n2 = o3),
                    (i2 = u3),
                    (o3 = f3),
                    (u3 = a3),
                    (f3 = n2.subtract(e2.multiply(f3))),
                    (a3 = i2.subtract(e2.multiply(a3)));
                if (!u3.equals(1))
                  throw new Error(
                    this.toString() +
                      " and " +
                      t4.toString() +
                      " are not co-prime"
                  );
                return (
                  o3.compare(0) === -1 && (o3 = o3.add(t4)),
                  this.isNegative() ? o3.negate() : o3
                );
              }),
            (u2.prototype.next = function () {
              var t4 = this.value;
              return this.sign
                ? b2(t4, 1, this.sign)
                : new u2(v2(t4, 1), this.sign);
            }),
            (a2.prototype.next = function () {
              var t4 = this.value;
              return t4 + 1 < n ? new a2(t4 + 1) : new u2(i, false);
            }),
            (u2.prototype.prev = function () {
              var t4 = this.value;
              return this.sign ? new u2(v2(t4, 1), true) : b2(t4, 1, this.sign);
            }),
            (a2.prototype.prev = function () {
              var t4 = this.value;
              return t4 - 1 > -n ? new a2(t4 - 1) : new u2(i, true);
            });
          for (var O2 = [1]; 2 * O2[O2.length - 1] <= e; )
            O2.push(2 * O2[O2.length - 1]);
          var C2 = O2.length,
            M2 = O2[C2 - 1];
          function T2(t4) {
            return (
              ((typeof t4 == "number" || typeof t4 == "string") &&
                +Math.abs(t4) <= e) ||
              (t4 instanceof u2 && t4.value.length <= 1)
            );
          }
          function L2(t4, e2, n2) {
            e2 = K(e2);
            for (
              var i2 = t4.isNegative(),
                o3 = e2.isNegative(),
                f3 = i2 ? t4.not() : t4,
                u3 = o3 ? e2.not() : e2,
                a3 = 0,
                s3 = 0,
                h3 = null,
                c3 = null,
                l3 = [];
              !f3.isZero() || !u3.isZero();

            )
              (a3 = (h3 = _2(f3, M2))[1].toJSNumber()),
                i2 && (a3 = M2 - 1 - a3),
                (s3 = (c3 = _2(u3, M2))[1].toJSNumber()),
                o3 && (s3 = M2 - 1 - s3),
                (f3 = h3[0]),
                (u3 = c3[0]),
                l3.push(n2(a3, s3));
            for (
              var p3 = n2(i2 ? 1 : 0, o3 ? 1 : 0) !== 0 ? r(-1) : r(0),
                d3 = l3.length - 1;
              d3 >= 0;
              d3 -= 1
            )
              p3 = p3.multiply(M2).add(r(l3[d3]));
            return p3;
          }
          function P2(t4) {
            var r2 = t4.value,
              n2 =
                typeof r2 == "number"
                  ? r2 | (1 << 30)
                  : (r2[0] + r2[1] * e) | 1073758208;
            return n2 & -n2;
          }
          function z2(t4, r2) {
            return (t4 = K(t4)), (r2 = K(r2)), t4.greater(r2) ? t4 : r2;
          }
          function R2(t4, r2) {
            return (t4 = K(t4)), (r2 = K(r2)), t4.lesser(r2) ? t4 : r2;
          }
          function N3(t4, r2) {
            if (((t4 = K(t4).abs()), (r2 = K(r2).abs()), t4.equals(r2)))
              return t4;
            if (t4.isZero()) return r2;
            if (r2.isZero()) return t4;
            for (var e2, n2, i2 = f2[1]; t4.isEven() && r2.isEven(); )
              (e2 = Math.min(P2(t4), P2(r2))),
                (t4 = t4.divide(e2)),
                (r2 = r2.divide(e2)),
                (i2 = i2.multiply(e2));
            for (; t4.isEven(); ) t4 = t4.divide(P2(t4));
            do {
              for (; r2.isEven(); ) r2 = r2.divide(P2(r2));
              t4.greater(r2) && ((n2 = r2), (r2 = t4), (t4 = n2)),
                (r2 = r2.subtract(t4));
            } while (!r2.isZero());
            return i2.isUnit() ? t4 : t4.multiply(i2);
          }
          (a2.prototype.shiftLeft = u2.prototype.shiftLeft =
            function (t4) {
              if (!T2(t4))
                throw new Error(String(t4) + " is too large for shifting.");
              if ((t4 = +t4) < 0) return this.shiftRight(-t4);
              var r2 = this;
              if (r2.isZero()) return r2;
              for (; t4 >= C2; ) (r2 = r2.multiply(M2)), (t4 -= C2 - 1);
              return r2.multiply(O2[t4]);
            }),
            (a2.prototype.shiftRight = u2.prototype.shiftRight =
              function (t4) {
                var r2;
                if (!T2(t4))
                  throw new Error(String(t4) + " is too large for shifting.");
                if ((t4 = +t4) < 0) return this.shiftLeft(-t4);
                for (var e2 = this; t4 >= C2; ) {
                  if (e2.isZero() || (e2.isNegative() && e2.isUnit()))
                    return e2;
                  (e2 = (r2 = _2(e2, M2))[1].isNegative()
                    ? r2[0].prev()
                    : r2[0]),
                    (t4 -= C2 - 1);
                }
                return (r2 = _2(e2, O2[t4]))[1].isNegative()
                  ? r2[0].prev()
                  : r2[0];
              }),
            (a2.prototype.not = u2.prototype.not =
              function () {
                return this.negate().prev();
              }),
            (a2.prototype.and = u2.prototype.and =
              function (t4) {
                return L2(this, t4, function (t5, r2) {
                  return t5 & r2;
                });
              }),
            (a2.prototype.or = u2.prototype.or =
              function (t4) {
                return L2(this, t4, function (t5, r2) {
                  return t5 | r2;
                });
              }),
            (a2.prototype.xor = u2.prototype.xor =
              function (t4) {
                return L2(this, t4, function (t5, r2) {
                  return t5 ^ r2;
                });
              }),
            (a2.prototype.bitLength = u2.prototype.bitLength =
              function () {
                var t4 = this;
                return (
                  t4.compareTo(r(0)) < 0 && (t4 = t4.negate().subtract(r(1))),
                  t4.compareTo(r(0)) === 0
                    ? r(0)
                    : r(
                        (function t5(e2, n2) {
                          if (n2.compareTo(e2) <= 0) {
                            var i2 = t5(e2, n2.square(n2)),
                              o3 = i2.p,
                              f3 = i2.e,
                              u3 = o3.multiply(n2);
                            return u3.compareTo(e2) <= 0
                              ? { p: u3, e: 2 * f3 + 1 }
                              : { p: o3, e: 2 * f3 };
                          }
                          return { p: r(1), e: 0 };
                        })(t4, r(2)).e
                      ).add(r(1))
                );
              });
          var q2 = function (t4, r2) {
            for (var e2 = t4.length, n2 = Math.abs(r2), i2 = 0; i2 < e2; i2++)
              if ((h3 = t4[i2].toLowerCase()) !== "-" && /[a-z0-9]/.test(h3)) {
                if (/[0-9]/.test(h3) && +h3 >= n2) {
                  if (h3 === "1" && n2 === 1) continue;
                  throw new Error(
                    h3 + " is not a valid digit in base " + r2 + "."
                  );
                }
                if (h3.charCodeAt(0) - 87 >= n2)
                  throw new Error(
                    h3 + " is not a valid digit in base " + r2 + "."
                  );
              }
            if (2 <= r2 && r2 <= 36 && e2 <= o2 / Math.log(r2)) {
              var f3 = parseInt(t4, r2);
              if (isNaN(f3))
                throw new Error(
                  h3 + " is not a valid digit in base " + r2 + "."
                );
              return new a2(parseInt(t4, r2));
            }
            r2 = K(r2);
            var u3 = [],
              s3 = t4[0] === "-";
            for (i2 = s3 ? 1 : 0; i2 < t4.length; i2++) {
              var h3,
                c3 = (h3 = t4[i2].toLowerCase()).charCodeAt(0);
              if (48 <= c3 && c3 <= 57) u3.push(K(h3));
              else if (97 <= c3 && c3 <= 122) u3.push(K(h3.charCodeAt(0) - 87));
              else {
                if (h3 !== "<")
                  throw new Error(h3 + " is not a valid character");
                var l3 = i2;
                do {
                  i2++;
                } while (t4[i2] !== ">");
                u3.push(K(t4.slice(l3 + 1, i2)));
              }
            }
            return j2(u3, r2, s3);
          };
          function j2(t4, r2, e2) {
            var n2,
              i2 = f2[0],
              o3 = f2[1];
            for (n2 = t4.length - 1; n2 >= 0; n2--)
              (i2 = i2.add(t4[n2].times(o3))), (o3 = o3.times(r2));
            return e2 ? i2.negate() : i2;
          }
          function D2(t4) {
            return t4 <= 35
              ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t4)
              : "<" + t4 + ">";
          }
          function H(t4, e2) {
            if ((e2 = r(e2)).isZero()) {
              if (t4.isZero()) return { value: [0], isNegative: false };
              throw new Error("Cannot convert nonzero numbers to base 0.");
            }
            if (e2.equals(-1)) {
              if (t4.isZero()) return { value: [0], isNegative: false };
              if (t4.isNegative())
                return {
                  value: [].concat.apply(
                    [],
                    Array.apply(null, Array(-t4)).map(
                      Array.prototype.valueOf,
                      [1, 0]
                    )
                  ),
                  isNegative: false,
                };
              var n2 = Array.apply(null, Array(+t4 - 1)).map(
                Array.prototype.valueOf,
                [0, 1]
              );
              return (
                n2.unshift([1]),
                { value: [].concat.apply([], n2), isNegative: false }
              );
            }
            var i2 = false;
            if (
              (t4.isNegative() &&
                e2.isPositive() &&
                ((i2 = true), (t4 = t4.abs())),
              e2.equals(1))
            )
              return t4.isZero()
                ? { value: [0], isNegative: false }
                : {
                    value: Array.apply(null, Array(+t4)).map(
                      Number.prototype.valueOf,
                      1
                    ),
                    isNegative: i2,
                  };
            for (
              var o3, f3 = [], u3 = t4;
              u3.isNegative() || u3.compareAbs(e2) >= 0;

            ) {
              (o3 = u3.divmod(e2)), (u3 = o3.quotient);
              var a3 = o3.remainder;
              a3.isNegative() && ((a3 = e2.minus(a3).abs()), (u3 = u3.next())),
                f3.push(a3.toJSNumber());
            }
            return (
              f3.push(u3.toJSNumber()), { value: f3.reverse(), isNegative: i2 }
            );
          }
          function F(t4, r2) {
            var e2 = H(t4, r2);
            return (e2.isNegative ? "-" : "") + e2.value.map(D2).join("");
          }
          function Z(t4) {
            if (s2(+t4)) {
              var r2 = +t4;
              if (r2 === d2(r2)) return new a2(r2);
              throw new Error("Invalid integer: " + t4);
            }
            var e2 = t4[0] === "-";
            e2 && (t4 = t4.slice(1));
            var n2 = t4.split(/e/i);
            if (n2.length > 2)
              throw new Error("Invalid integer: " + n2.join("e"));
            if (n2.length === 2) {
              var i2 = n2[1];
              if (
                (i2[0] === "+" && (i2 = i2.slice(1)),
                (i2 = +i2) !== d2(i2) || !s2(i2))
              )
                throw new Error(
                  "Invalid integer: " + i2 + " is not a valid exponent."
                );
              var o3 = n2[0],
                f3 = o3.indexOf(".");
              if (
                (f3 >= 0 &&
                  ((i2 -= o3.length - f3 - 1),
                  (o3 = o3.slice(0, f3) + o3.slice(f3 + 1))),
                i2 < 0)
              )
                throw new Error(
                  "Cannot include negative exponent part for integers"
                );
              t4 = o3 += new Array(i2 + 1).join("0");
            }
            if (!/^([0-9][0-9]*)$/.test(t4))
              throw new Error("Invalid integer: " + t4);
            for (var h3 = [], c3 = t4.length, p3 = c3 - 7; c3 > 0; )
              h3.push(+t4.slice(p3, c3)), (p3 -= 7) < 0 && (p3 = 0), (c3 -= 7);
            return l2(h3), new u2(h3, e2);
          }
          function K(t4) {
            return typeof t4 == "number"
              ? (function (t5) {
                  if (s2(t5)) {
                    if (t5 !== d2(t5))
                      throw new Error(t5 + " is not an integer.");
                    return new a2(t5);
                  }
                  return Z(t5.toString());
                })(t4)
              : typeof t4 == "string"
              ? Z(t4)
              : t4;
          }
          (u2.prototype.toArray = function (t4) {
            return H(this, t4);
          }),
            (a2.prototype.toArray = function (t4) {
              return H(this, t4);
            }),
            (u2.prototype.toString = function (t4) {
              if ((t4 === void 0 && (t4 = 10), t4 !== 10)) return F(this, t4);
              for (
                var r2, e2 = this.value, n2 = e2.length, i2 = String(e2[--n2]);
                --n2 >= 0;

              )
                (r2 = String(e2[n2])), (i2 += "0000000".slice(r2.length) + r2);
              return (this.sign ? "-" : "") + i2;
            }),
            (a2.prototype.toString = function (t4) {
              return (
                t4 === void 0 && (t4 = 10),
                t4 != 10 ? F(this, t4) : String(this.value)
              );
            }),
            (u2.prototype.toJSON = a2.prototype.toJSON =
              function () {
                return this.toString();
              }),
            (u2.prototype.toJSNumber = u2.prototype.valueOf =
              function () {
                return parseInt(this.toString(), 10);
              }),
            (a2.prototype.toJSNumber = a2.prototype.valueOf =
              function () {
                return this.value;
              });
          for (var X = 0; X < 1e3; X++)
            (f2[X] = new a2(X)), X > 0 && (f2[-X] = new a2(-X));
          return (
            (f2.one = f2[1]),
            (f2.zero = f2[0]),
            (f2.minusOne = f2[-1]),
            (f2.max = z2),
            (f2.min = R2),
            (f2.gcd = N3),
            (f2.lcm = function (t4, r2) {
              return (
                (t4 = K(t4).abs()),
                (r2 = K(r2).abs()),
                t4.divide(N3(t4, r2)).multiply(r2)
              );
            }),
            (f2.isInstance = function (t4) {
              return t4 instanceof u2 || t4 instanceof a2;
            }),
            (f2.randBetween = function (t4, r2) {
              var n2 = R2((t4 = K(t4)), (r2 = K(r2))),
                i2 = z2(t4, r2).subtract(n2).add(1);
              if (i2.isSmall) return n2.add(Math.floor(Math.random() * i2));
              for (
                var o3 = [], f3 = true, s3 = i2.value.length - 1;
                s3 >= 0;
                s3--
              ) {
                var h3 = f3 ? i2.value[s3] : e,
                  l3 = d2(Math.random() * h3);
                o3.unshift(l3), l3 < h3 && (f3 = false);
              }
              return (
                (o3 = c2(o3)),
                n2.add(typeof o3 == "number" ? new a2(o3) : new u2(o3, false))
              );
            }),
            (f2.fromArray = function (t4, r2, e2) {
              return j2(t4.map(K), K(r2 || 10), e2);
            }),
            f2
          );
        })();
        t2.hasOwnProperty("exports") && (t2.exports = r);
      });
      d = function (t2) {
        var r;
        if (t2 instanceof Uint8Array) r = t2;
        else if (t2 instanceof Buffer) r = new Uint8Array(t2);
        else {
          if (typeof t2 != "string")
            throw new Error("Input must be an string, Buffer or Uint8Array");
          r = new Uint8Array(Buffer.from(t2, "utf8"));
        }
        return r;
      };
      g = function (t2) {
        return Array.prototype.map
          .call(t2, function (t3) {
            return (t3 < 16 ? "0" : "") + t3.toString(16);
          })
          .join("");
      };
      m = new Uint32Array([
        4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242,
        1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924,
        4215389547, 528734635, 327033209, 1541459225,
      ]);
      E = new Uint8Array(
        [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9,
          15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10,
          14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0,
          15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6,
          10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4,
          10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4,
          8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10,
          2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6,
          7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0,
          2, 11, 7, 5, 3,
        ].map(function (t2) {
          return 2 * t2;
        })
      );
      B = new Uint32Array(32);
      A = new Uint32Array(32);
      k = {
        blake2b: x,
        blake2bHex: function (t2, r, e) {
          var n = x(t2, r, e);
          return g(n);
        },
        blake2bInit: I,
        blake2bUpdate: _,
        blake2bFinal: S,
      };
      T = new Uint32Array([
        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924,
        528734635, 1541459225,
      ]);
      L = new Uint8Array([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9,
        15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14,
        3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
        9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0,
        11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7,
        6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
        6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6,
        1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
      ]);
      P = new Uint32Array(16);
      z = new Uint32Array(16);
      for (
        H = {
          blake2s: D,
          blake2sHex: function (t2, r, e) {
            var n = D(t2, r, e);
            return g(n);
          },
          blake2sInit: N2,
          blake2sUpdate: q,
          blake2sFinal: j,
        },
          F = {
            blake2b: k.blake2b,
            blake2bHex: k.blake2bHex,
            blake2bInit: k.blake2bInit,
            blake2bUpdate: k.blake2bUpdate,
            blake2bFinal: k.blake2bFinal,
            blake2s: H.blake2s,
            blake2sHex: H.blake2sHex,
            blake2sInit: H.blake2sInit,
            blake2sUpdate: H.blake2sUpdate,
            blake2sFinal: H.blake2sFinal,
          },
          Z = [],
          K = [],
          X = typeof Uint8Array != "undefined" ? Uint8Array : Array,
          V =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
          Y = 0,
          W = V.length;
        Y < W;
        ++Y
      )
        (Z[Y] = V[Y]), (K[V.charCodeAt(Y)] = Y);
      (K["-".charCodeAt(0)] = 62), (K["_".charCodeAt(0)] = 63);
      G = function (t2) {
        var r,
          e,
          n = (function (t3) {
            var r2 = t3.length;
            if (r2 % 4 > 0)
              throw new Error("Invalid string. Length must be a multiple of 4");
            var e2 = t3.indexOf("=");
            return e2 === -1 && (e2 = r2), [e2, e2 === r2 ? 0 : 4 - (e2 % 4)];
          })(t2),
          i = n[0],
          o2 = n[1],
          f2 = new X(
            (function (t3, r2, e2) {
              return (3 * (r2 + e2)) / 4 - e2;
            })(0, i, o2)
          ),
          u2 = 0,
          a2 = o2 > 0 ? i - 4 : i;
        for (e = 0; e < a2; e += 4)
          (r =
            (K[t2.charCodeAt(e)] << 18) |
            (K[t2.charCodeAt(e + 1)] << 12) |
            (K[t2.charCodeAt(e + 2)] << 6) |
            K[t2.charCodeAt(e + 3)]),
            (f2[u2++] = (r >> 16) & 255),
            (f2[u2++] = (r >> 8) & 255),
            (f2[u2++] = 255 & r);
        return (
          o2 === 2 &&
            ((r = (K[t2.charCodeAt(e)] << 2) | (K[t2.charCodeAt(e + 1)] >> 4)),
            (f2[u2++] = 255 & r)),
          o2 === 1 &&
            ((r =
              (K[t2.charCodeAt(e)] << 10) |
              (K[t2.charCodeAt(e + 1)] << 4) |
              (K[t2.charCodeAt(e + 2)] >> 2)),
            (f2[u2++] = (r >> 8) & 255),
            (f2[u2++] = 255 & r)),
          f2
        );
      };
      Q = function (t2) {
        for (
          var r, e = t2.length, n = e % 3, i = [], o2 = 0, f2 = e - n;
          o2 < f2;
          o2 += 16383
        )
          i.push(J(t2, o2, o2 + 16383 > f2 ? f2 : o2 + 16383));
        return (
          n === 1
            ? i.push(Z[(r = t2[e - 1]) >> 2] + Z[(r << 4) & 63] + "==")
            : n === 2 &&
              i.push(
                Z[(r = (t2[e - 2] << 8) + t2[e - 1]) >> 10] +
                  Z[(r >> 4) & 63] +
                  Z[(r << 2) & 63] +
                  "="
              ),
          i.join("")
        );
      };
      $ = function (t2, r, e, n, i) {
        var o2,
          f2,
          u2 = 8 * i - n - 1,
          a2 = (1 << u2) - 1,
          s2 = a2 >> 1,
          h2 = -7,
          c2 = e ? i - 1 : 0,
          l2 = e ? -1 : 1,
          p2 = t2[r + c2];
        for (
          c2 += l2, o2 = p2 & ((1 << -h2) - 1), p2 >>= -h2, h2 += u2;
          h2 > 0;
          o2 = 256 * o2 + t2[r + c2], c2 += l2, h2 -= 8
        );
        for (
          f2 = o2 & ((1 << -h2) - 1), o2 >>= -h2, h2 += n;
          h2 > 0;
          f2 = 256 * f2 + t2[r + c2], c2 += l2, h2 -= 8
        );
        if (o2 === 0) o2 = 1 - s2;
        else {
          if (o2 === a2) return f2 ? NaN : Infinity * (p2 ? -1 : 1);
          (f2 += Math.pow(2, n)), (o2 -= s2);
        }
        return (p2 ? -1 : 1) * f2 * Math.pow(2, o2 - n);
      };
      tt = function (t2, r, e, n, i, o2) {
        var f2,
          u2,
          a2,
          s2 = 8 * o2 - i - 1,
          h2 = (1 << s2) - 1,
          c2 = h2 >> 1,
          l2 = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          p2 = n ? 0 : o2 - 1,
          d2 = n ? 1 : -1,
          g2 = r < 0 || (r === 0 && 1 / r < 0) ? 1 : 0;
        for (
          r = Math.abs(r),
            isNaN(r) || r === Infinity
              ? ((u2 = isNaN(r) ? 1 : 0), (f2 = h2))
              : ((f2 = Math.floor(Math.log(r) / Math.LN2)),
                r * (a2 = Math.pow(2, -f2)) < 1 && (f2--, (a2 *= 2)),
                (r += f2 + c2 >= 1 ? l2 / a2 : l2 * Math.pow(2, 1 - c2)) * a2 >=
                  2 && (f2++, (a2 /= 2)),
                f2 + c2 >= h2
                  ? ((u2 = 0), (f2 = h2))
                  : f2 + c2 >= 1
                  ? ((u2 = (r * a2 - 1) * Math.pow(2, i)), (f2 += c2))
                  : ((u2 = r * Math.pow(2, c2 - 1) * Math.pow(2, i)),
                    (f2 = 0)));
          i >= 8;
          t2[e + p2] = 255 & u2, p2 += d2, u2 /= 256, i -= 8
        );
        for (
          f2 = (f2 << i) | u2, s2 += i;
          s2 > 0;
          t2[e + p2] = 255 & f2, p2 += d2, f2 /= 256, s2 -= 8
        );
        t2[e + p2 - d2] |= 128 * g2;
      };
      rt = l(function (t2, r) {
        var e =
          typeof Symbol == "function" && typeof Symbol.for == "function"
            ? Symbol.for("nodejs.util.inspect.custom")
            : null;
        function n(t3) {
          if (t3 > 2147483647)
            throw new RangeError(
              'The value "' + t3 + '" is invalid for option "size"'
            );
          var r2 = new Uint8Array(t3);
          return Object.setPrototypeOf(r2, i.prototype), r2;
        }
        function i(t3, r2, e2) {
          if (typeof t3 == "number") {
            if (typeof r2 == "string")
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              );
            return u2(t3);
          }
          return o2(t3, r2, e2);
        }
        function o2(t3, r2, e2) {
          if (typeof t3 == "string")
            return (function (t4, r3) {
              if (
                ((typeof r3 == "string" && r3 !== "") || (r3 = "utf8"),
                !i.isEncoding(r3))
              )
                throw new TypeError("Unknown encoding: " + r3);
              var e3 = 0 | c2(t4, r3),
                o4 = n(e3),
                f4 = o4.write(t4, r3);
              return f4 !== e3 && (o4 = o4.slice(0, f4)), o4;
            })(t3, r2);
          if (ArrayBuffer.isView(t3)) return a2(t3);
          if (t3 == null)
            throw new TypeError(
              "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
                typeof t3
            );
          if (R2(t3, ArrayBuffer) || (t3 && R2(t3.buffer, ArrayBuffer)))
            return s2(t3, r2, e2);
          if (
            typeof SharedArrayBuffer != "undefined" &&
            (R2(t3, SharedArrayBuffer) ||
              (t3 && R2(t3.buffer, SharedArrayBuffer)))
          )
            return s2(t3, r2, e2);
          if (typeof t3 == "number")
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            );
          var o3 = t3.valueOf && t3.valueOf();
          if (o3 != null && o3 !== t3) return i.from(o3, r2, e2);
          var f3 = (function (t4) {
            if (i.isBuffer(t4)) {
              var r3 = 0 | h2(t4.length),
                e3 = n(r3);
              return e3.length === 0 || t4.copy(e3, 0, 0, r3), e3;
            }
            return t4.length !== void 0
              ? typeof t4.length != "number" || N3(t4.length)
                ? n(0)
                : a2(t4)
              : t4.type === "Buffer" && Array.isArray(t4.data)
              ? a2(t4.data)
              : void 0;
          })(t3);
          if (f3) return f3;
          if (
            typeof Symbol != "undefined" &&
            Symbol.toPrimitive != null &&
            typeof t3[Symbol.toPrimitive] == "function"
          )
            return i.from(t3[Symbol.toPrimitive]("string"), r2, e2);
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
              typeof t3
          );
        }
        function f2(t3) {
          if (typeof t3 != "number")
            throw new TypeError('"size" argument must be of type number');
          if (t3 < 0)
            throw new RangeError(
              'The value "' + t3 + '" is invalid for option "size"'
            );
        }
        function u2(t3) {
          return f2(t3), n(t3 < 0 ? 0 : 0 | h2(t3));
        }
        function a2(t3) {
          for (
            var r2 = t3.length < 0 ? 0 : 0 | h2(t3.length), e2 = n(r2), i2 = 0;
            i2 < r2;
            i2 += 1
          )
            e2[i2] = 255 & t3[i2];
          return e2;
        }
        function s2(t3, r2, e2) {
          if (r2 < 0 || t3.byteLength < r2)
            throw new RangeError('"offset" is outside of buffer bounds');
          if (t3.byteLength < r2 + (e2 || 0))
            throw new RangeError('"length" is outside of buffer bounds');
          var n2;
          return (
            (n2 =
              r2 === void 0 && e2 === void 0
                ? new Uint8Array(t3)
                : e2 === void 0
                ? new Uint8Array(t3, r2)
                : new Uint8Array(t3, r2, e2)),
            Object.setPrototypeOf(n2, i.prototype),
            n2
          );
        }
        function h2(t3) {
          if (t3 >= 2147483647)
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum size: 0x" +
                (2147483647).toString(16) +
                " bytes"
            );
          return 0 | t3;
        }
        function c2(t3, r2) {
          if (i.isBuffer(t3)) return t3.length;
          if (ArrayBuffer.isView(t3) || R2(t3, ArrayBuffer))
            return t3.byteLength;
          if (typeof t3 != "string")
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
                typeof t3
            );
          var e2 = t3.length,
            n2 = arguments.length > 2 && arguments[2] === true;
          if (!n2 && e2 === 0) return 0;
          for (var o3 = false; ; )
            switch (r2) {
              case "ascii":
              case "latin1":
              case "binary":
                return e2;
              case "utf8":
              case "utf-8":
                return L2(t3).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * e2;
              case "hex":
                return e2 >>> 1;
              case "base64":
                return P2(t3).length;
              default:
                if (o3) return n2 ? -1 : L2(t3).length;
                (r2 = ("" + r2).toLowerCase()), (o3 = true);
            }
        }
        function l2(t3, r2, e2) {
          var n2 = false;
          if (((r2 === void 0 || r2 < 0) && (r2 = 0), r2 > this.length))
            return "";
          if (
            ((e2 === void 0 || e2 > this.length) && (e2 = this.length), e2 <= 0)
          )
            return "";
          if ((e2 >>>= 0) <= (r2 >>>= 0)) return "";
          for (t3 || (t3 = "utf8"); ; )
            switch (t3) {
              case "hex":
                return _2(this, r2, e2);
              case "utf8":
              case "utf-8":
                return A2(this, r2, e2);
              case "ascii":
                return U2(this, r2, e2);
              case "latin1":
              case "binary":
                return I2(this, r2, e2);
              case "base64":
                return B2(this, r2, e2);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return S2(this, r2, e2);
              default:
                if (n2) throw new TypeError("Unknown encoding: " + t3);
                (t3 = (t3 + "").toLowerCase()), (n2 = true);
            }
        }
        function p2(t3, r2, e2) {
          var n2 = t3[r2];
          (t3[r2] = t3[e2]), (t3[e2] = n2);
        }
        function d2(t3, r2, e2, n2, o3) {
          if (t3.length === 0) return -1;
          if (
            (typeof e2 == "string"
              ? ((n2 = e2), (e2 = 0))
              : e2 > 2147483647
              ? (e2 = 2147483647)
              : e2 < -2147483648 && (e2 = -2147483648),
            N3((e2 = +e2)) && (e2 = o3 ? 0 : t3.length - 1),
            e2 < 0 && (e2 = t3.length + e2),
            e2 >= t3.length)
          ) {
            if (o3) return -1;
            e2 = t3.length - 1;
          } else if (e2 < 0) {
            if (!o3) return -1;
            e2 = 0;
          }
          if ((typeof r2 == "string" && (r2 = i.from(r2, n2)), i.isBuffer(r2)))
            return r2.length === 0 ? -1 : g2(t3, r2, e2, n2, o3);
          if (typeof r2 == "number")
            return (
              (r2 &= 255),
              typeof Uint8Array.prototype.indexOf == "function"
                ? o3
                  ? Uint8Array.prototype.indexOf.call(t3, r2, e2)
                  : Uint8Array.prototype.lastIndexOf.call(t3, r2, e2)
                : g2(t3, [r2], e2, n2, o3)
            );
          throw new TypeError("val must be string, number or Buffer");
        }
        function g2(t3, r2, e2, n2, i2) {
          var o3,
            f3 = 1,
            u3 = t3.length,
            a3 = r2.length;
          if (
            n2 !== void 0 &&
            ((n2 = String(n2).toLowerCase()) === "ucs2" ||
              n2 === "ucs-2" ||
              n2 === "utf16le" ||
              n2 === "utf-16le")
          ) {
            if (t3.length < 2 || r2.length < 2) return -1;
            (f3 = 2), (u3 /= 2), (a3 /= 2), (e2 /= 2);
          }
          function s3(t4, r3) {
            return f3 === 1 ? t4[r3] : t4.readUInt16BE(r3 * f3);
          }
          if (i2) {
            var h3 = -1;
            for (o3 = e2; o3 < u3; o3++)
              if (s3(t3, o3) === s3(r2, h3 === -1 ? 0 : o3 - h3)) {
                if ((h3 === -1 && (h3 = o3), o3 - h3 + 1 === a3))
                  return h3 * f3;
              } else h3 !== -1 && (o3 -= o3 - h3), (h3 = -1);
          } else
            for (e2 + a3 > u3 && (e2 = u3 - a3), o3 = e2; o3 >= 0; o3--) {
              for (var c3 = true, l3 = 0; l3 < a3; l3++)
                if (s3(t3, o3 + l3) !== s3(r2, l3)) {
                  c3 = false;
                  break;
                }
              if (c3) return o3;
            }
          return -1;
        }
        function y2(t3, r2, e2, n2) {
          e2 = Number(e2) || 0;
          var i2 = t3.length - e2;
          n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : (n2 = i2);
          var o3 = r2.length;
          n2 > o3 / 2 && (n2 = o3 / 2);
          for (var f3 = 0; f3 < n2; ++f3) {
            var u3 = parseInt(r2.substr(2 * f3, 2), 16);
            if (N3(u3)) return f3;
            t3[e2 + f3] = u3;
          }
          return f3;
        }
        function v2(t3, r2, e2, n2) {
          return z2(L2(r2, t3.length - e2), t3, e2, n2);
        }
        function w2(t3, r2, e2, n2) {
          return z2(
            (function (t4) {
              for (var r3 = [], e3 = 0; e3 < t4.length; ++e3)
                r3.push(255 & t4.charCodeAt(e3));
              return r3;
            })(r2),
            t3,
            e2,
            n2
          );
        }
        function b2(t3, r2, e2, n2) {
          return w2(t3, r2, e2, n2);
        }
        function m2(t3, r2, e2, n2) {
          return z2(P2(r2), t3, e2, n2);
        }
        function E2(t3, r2, e2, n2) {
          return z2(
            (function (t4, r3) {
              for (
                var e3, n3, i2 = [], o3 = 0;
                o3 < t4.length && !((r3 -= 2) < 0);
                ++o3
              )
                (n3 = (e3 = t4.charCodeAt(o3)) >> 8),
                  i2.push(e3 % 256),
                  i2.push(n3);
              return i2;
            })(r2, t3.length - e2),
            t3,
            e2,
            n2
          );
        }
        function B2(t3, r2, e2) {
          return Q(r2 === 0 && e2 === t3.length ? t3 : t3.slice(r2, e2));
        }
        function A2(t3, r2, e2) {
          e2 = Math.min(t3.length, e2);
          for (var n2 = [], i2 = r2; i2 < e2; ) {
            var o3,
              f3,
              u3,
              a3,
              s3 = t3[i2],
              h3 = null,
              c3 = s3 > 239 ? 4 : s3 > 223 ? 3 : s3 > 191 ? 2 : 1;
            if (i2 + c3 <= e2)
              switch (c3) {
                case 1:
                  s3 < 128 && (h3 = s3);
                  break;
                case 2:
                  (192 & (o3 = t3[i2 + 1])) == 128 &&
                    (a3 = ((31 & s3) << 6) | (63 & o3)) > 127 &&
                    (h3 = a3);
                  break;
                case 3:
                  (f3 = t3[i2 + 2]),
                    (192 & (o3 = t3[i2 + 1])) == 128 &&
                      (192 & f3) == 128 &&
                      (a3 = ((15 & s3) << 12) | ((63 & o3) << 6) | (63 & f3)) >
                        2047 &&
                      (a3 < 55296 || a3 > 57343) &&
                      (h3 = a3);
                  break;
                case 4:
                  (f3 = t3[i2 + 2]),
                    (u3 = t3[i2 + 3]),
                    (192 & (o3 = t3[i2 + 1])) == 128 &&
                      (192 & f3) == 128 &&
                      (192 & u3) == 128 &&
                      (a3 =
                        ((15 & s3) << 18) |
                        ((63 & o3) << 12) |
                        ((63 & f3) << 6) |
                        (63 & u3)) > 65535 &&
                      a3 < 1114112 &&
                      (h3 = a3);
              }
            h3 === null
              ? ((h3 = 65533), (c3 = 1))
              : h3 > 65535 &&
                (n2.push((((h3 -= 65536) >>> 10) & 1023) | 55296),
                (h3 = 56320 | (1023 & h3))),
              n2.push(h3),
              (i2 += c3);
          }
          return (function (t4) {
            var r3 = t4.length;
            if (r3 <= 4096) return String.fromCharCode.apply(String, t4);
            for (var e3 = "", n3 = 0; n3 < r3; )
              e3 += String.fromCharCode.apply(
                String,
                t4.slice(n3, (n3 += 4096))
              );
            return e3;
          })(n2);
        }
        function U2(t3, r2, e2) {
          var n2 = "";
          e2 = Math.min(t3.length, e2);
          for (var i2 = r2; i2 < e2; ++i2)
            n2 += String.fromCharCode(127 & t3[i2]);
          return n2;
        }
        function I2(t3, r2, e2) {
          var n2 = "";
          e2 = Math.min(t3.length, e2);
          for (var i2 = r2; i2 < e2; ++i2) n2 += String.fromCharCode(t3[i2]);
          return n2;
        }
        function _2(t3, r2, e2) {
          var n2 = t3.length;
          (!r2 || r2 < 0) && (r2 = 0), (!e2 || e2 < 0 || e2 > n2) && (e2 = n2);
          for (var i2 = "", o3 = r2; o3 < e2; ++o3) i2 += q2[t3[o3]];
          return i2;
        }
        function S2(t3, r2, e2) {
          for (
            var n2 = t3.slice(r2, e2), i2 = "", o3 = 0;
            o3 < n2.length;
            o3 += 2
          )
            i2 += String.fromCharCode(n2[o3] + 256 * n2[o3 + 1]);
          return i2;
        }
        function x2(t3, r2, e2) {
          if (t3 % 1 != 0 || t3 < 0) throw new RangeError("offset is not uint");
          if (t3 + r2 > e2)
            throw new RangeError("Trying to access beyond buffer length");
        }
        function k2(t3, r2, e2, n2, o3, f3) {
          if (!i.isBuffer(t3))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (r2 > o3 || r2 < f3)
            throw new RangeError('"value" argument is out of bounds');
          if (e2 + n2 > t3.length) throw new RangeError("Index out of range");
        }
        function O2(t3, r2, e2, n2, i2, o3) {
          if (e2 + n2 > t3.length) throw new RangeError("Index out of range");
          if (e2 < 0) throw new RangeError("Index out of range");
        }
        function C2(t3, r2, e2, n2, i2) {
          return (
            (r2 = +r2),
            (e2 >>>= 0),
            i2 || O2(t3, 0, e2, 4),
            tt(t3, r2, e2, n2, 23, 4),
            e2 + 4
          );
        }
        function M2(t3, r2, e2, n2, i2) {
          return (
            (r2 = +r2),
            (e2 >>>= 0),
            i2 || O2(t3, 0, e2, 8),
            tt(t3, r2, e2, n2, 52, 8),
            e2 + 8
          );
        }
        (r.Buffer = i),
          (r.SlowBuffer = function (t3) {
            return +t3 != t3 && (t3 = 0), i.alloc(+t3);
          }),
          (r.INSPECT_MAX_BYTES = 50),
          (r.kMaxLength = 2147483647),
          (i.TYPED_ARRAY_SUPPORT = (function () {
            try {
              var t3 = new Uint8Array(1),
                r2 = {
                  foo: function () {
                    return 42;
                  },
                };
              return (
                Object.setPrototypeOf(r2, Uint8Array.prototype),
                Object.setPrototypeOf(t3, r2),
                t3.foo() === 42
              );
            } catch (t4) {
              return false;
            }
          })()) ||
            typeof console == "undefined" ||
            typeof console.error != "function" ||
            console.error(
              "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
            ),
          Object.defineProperty(i.prototype, "parent", {
            enumerable: true,
            get: function () {
              if (i.isBuffer(this)) return this.buffer;
            },
          }),
          Object.defineProperty(i.prototype, "offset", {
            enumerable: true,
            get: function () {
              if (i.isBuffer(this)) return this.byteOffset;
            },
          }),
          typeof Symbol != "undefined" &&
            Symbol.species != null &&
            i[Symbol.species] === i &&
            Object.defineProperty(i, Symbol.species, {
              value: null,
              configurable: true,
              enumerable: false,
              writable: false,
            }),
          (i.poolSize = 8192),
          (i.from = function (t3, r2, e2) {
            return o2(t3, r2, e2);
          }),
          Object.setPrototypeOf(i.prototype, Uint8Array.prototype),
          Object.setPrototypeOf(i, Uint8Array),
          (i.alloc = function (t3, r2, e2) {
            return (function (t4, r3, e3) {
              return (
                f2(t4),
                t4 <= 0
                  ? n(t4)
                  : r3 !== void 0
                  ? typeof e3 == "string"
                    ? n(t4).fill(r3, e3)
                    : n(t4).fill(r3)
                  : n(t4)
              );
            })(t3, r2, e2);
          }),
          (i.allocUnsafe = function (t3) {
            return u2(t3);
          }),
          (i.allocUnsafeSlow = function (t3) {
            return u2(t3);
          }),
          (i.isBuffer = function (t3) {
            return t3 != null && t3._isBuffer === true && t3 !== i.prototype;
          }),
          (i.compare = function (t3, r2) {
            if (
              (R2(t3, Uint8Array) &&
                (t3 = i.from(t3, t3.offset, t3.byteLength)),
              R2(r2, Uint8Array) && (r2 = i.from(r2, r2.offset, r2.byteLength)),
              !i.isBuffer(t3) || !i.isBuffer(r2))
            )
              throw new TypeError(
                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
              );
            if (t3 === r2) return 0;
            for (
              var e2 = t3.length, n2 = r2.length, o3 = 0, f3 = Math.min(e2, n2);
              o3 < f3;
              ++o3
            )
              if (t3[o3] !== r2[o3]) {
                (e2 = t3[o3]), (n2 = r2[o3]);
                break;
              }
            return e2 < n2 ? -1 : n2 < e2 ? 1 : 0;
          }),
          (i.isEncoding = function (t3) {
            switch (String(t3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }),
          (i.concat = function (t3, r2) {
            if (!Array.isArray(t3))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            if (t3.length === 0) return i.alloc(0);
            var e2;
            if (r2 === void 0)
              for (r2 = 0, e2 = 0; e2 < t3.length; ++e2) r2 += t3[e2].length;
            var n2 = i.allocUnsafe(r2),
              o3 = 0;
            for (e2 = 0; e2 < t3.length; ++e2) {
              var f3 = t3[e2];
              if ((R2(f3, Uint8Array) && (f3 = i.from(f3)), !i.isBuffer(f3)))
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              f3.copy(n2, o3), (o3 += f3.length);
            }
            return n2;
          }),
          (i.byteLength = c2),
          (i.prototype._isBuffer = true),
          (i.prototype.swap16 = function () {
            var t3 = this.length;
            if (t3 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var r2 = 0; r2 < t3; r2 += 2) p2(this, r2, r2 + 1);
            return this;
          }),
          (i.prototype.swap32 = function () {
            var t3 = this.length;
            if (t3 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var r2 = 0; r2 < t3; r2 += 4)
              p2(this, r2, r2 + 3), p2(this, r2 + 1, r2 + 2);
            return this;
          }),
          (i.prototype.swap64 = function () {
            var t3 = this.length;
            if (t3 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var r2 = 0; r2 < t3; r2 += 8)
              p2(this, r2, r2 + 7),
                p2(this, r2 + 1, r2 + 6),
                p2(this, r2 + 2, r2 + 5),
                p2(this, r2 + 3, r2 + 4);
            return this;
          }),
          (i.prototype.toLocaleString = i.prototype.toString =
            function () {
              var t3 = this.length;
              return t3 === 0
                ? ""
                : arguments.length === 0
                ? A2(this, 0, t3)
                : l2.apply(this, arguments);
            }),
          (i.prototype.equals = function (t3) {
            if (!i.isBuffer(t3))
              throw new TypeError("Argument must be a Buffer");
            return this === t3 || i.compare(this, t3) === 0;
          }),
          (i.prototype.inspect = function () {
            var t3 = "",
              e2 = r.INSPECT_MAX_BYTES;
            return (
              (t3 = this.toString("hex", 0, e2)
                .replace(/(.{2})/g, "$1 ")
                .trim()),
              this.length > e2 && (t3 += " ... "),
              "<Buffer " + t3 + ">"
            );
          }),
          e && (i.prototype[e] = i.prototype.inspect),
          (i.prototype.compare = function (t3, r2, e2, n2, o3) {
            if (
              (R2(t3, Uint8Array) &&
                (t3 = i.from(t3, t3.offset, t3.byteLength)),
              !i.isBuffer(t3))
            )
              throw new TypeError(
                'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
                  typeof t3
              );
            if (
              (r2 === void 0 && (r2 = 0),
              e2 === void 0 && (e2 = t3 ? t3.length : 0),
              n2 === void 0 && (n2 = 0),
              o3 === void 0 && (o3 = this.length),
              r2 < 0 || e2 > t3.length || n2 < 0 || o3 > this.length)
            )
              throw new RangeError("out of range index");
            if (n2 >= o3 && r2 >= e2) return 0;
            if (n2 >= o3) return -1;
            if (r2 >= e2) return 1;
            if (this === t3) return 0;
            for (
              var f3 = (o3 >>>= 0) - (n2 >>>= 0),
                u3 = (e2 >>>= 0) - (r2 >>>= 0),
                a3 = Math.min(f3, u3),
                s3 = this.slice(n2, o3),
                h3 = t3.slice(r2, e2),
                c3 = 0;
              c3 < a3;
              ++c3
            )
              if (s3[c3] !== h3[c3]) {
                (f3 = s3[c3]), (u3 = h3[c3]);
                break;
              }
            return f3 < u3 ? -1 : u3 < f3 ? 1 : 0;
          }),
          (i.prototype.includes = function (t3, r2, e2) {
            return this.indexOf(t3, r2, e2) !== -1;
          }),
          (i.prototype.indexOf = function (t3, r2, e2) {
            return d2(this, t3, r2, e2, true);
          }),
          (i.prototype.lastIndexOf = function (t3, r2, e2) {
            return d2(this, t3, r2, e2, false);
          }),
          (i.prototype.write = function (t3, r2, e2, n2) {
            if (r2 === void 0) (n2 = "utf8"), (e2 = this.length), (r2 = 0);
            else if (e2 === void 0 && typeof r2 == "string")
              (n2 = r2), (e2 = this.length), (r2 = 0);
            else {
              if (!isFinite(r2))
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              (r2 >>>= 0),
                isFinite(e2)
                  ? ((e2 >>>= 0), n2 === void 0 && (n2 = "utf8"))
                  : ((n2 = e2), (e2 = void 0));
            }
            var i2 = this.length - r2;
            if (
              ((e2 === void 0 || e2 > i2) && (e2 = i2),
              (t3.length > 0 && (e2 < 0 || r2 < 0)) || r2 > this.length)
            )
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o3 = false; ; )
              switch (n2) {
                case "hex":
                  return y2(this, t3, r2, e2);
                case "utf8":
                case "utf-8":
                  return v2(this, t3, r2, e2);
                case "ascii":
                  return w2(this, t3, r2, e2);
                case "latin1":
                case "binary":
                  return b2(this, t3, r2, e2);
                case "base64":
                  return m2(this, t3, r2, e2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return E2(this, t3, r2, e2);
                default:
                  if (o3) throw new TypeError("Unknown encoding: " + n2);
                  (n2 = ("" + n2).toLowerCase()), (o3 = true);
              }
          }),
          (i.prototype.toJSON = function () {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          }),
          (i.prototype.slice = function (t3, r2) {
            var e2 = this.length;
            (t3 = ~~t3) < 0 ? (t3 += e2) < 0 && (t3 = 0) : t3 > e2 && (t3 = e2),
              (r2 = r2 === void 0 ? e2 : ~~r2) < 0
                ? (r2 += e2) < 0 && (r2 = 0)
                : r2 > e2 && (r2 = e2),
              r2 < t3 && (r2 = t3);
            var n2 = this.subarray(t3, r2);
            return Object.setPrototypeOf(n2, i.prototype), n2;
          }),
          (i.prototype.readUIntLE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
              n2 += this[t3 + o3] * i2;
            return n2;
          }),
          (i.prototype.readUIntBE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3 + --r2], i2 = 1; r2 > 0 && (i2 *= 256); )
              n2 += this[t3 + --r2] * i2;
            return n2;
          }),
          (i.prototype.readUInt8 = function (t3, r2) {
            return (t3 >>>= 0), r2 || x2(t3, 1, this.length), this[t3];
          }),
          (i.prototype.readUInt16LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 2, this.length),
              this[t3] | (this[t3 + 1] << 8)
            );
          }),
          (i.prototype.readUInt16BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 2, this.length),
              (this[t3] << 8) | this[t3 + 1]
            );
          }),
          (i.prototype.readUInt32LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              (this[t3] | (this[t3 + 1] << 8) | (this[t3 + 2] << 16)) +
                16777216 * this[t3 + 3]
            );
          }),
          (i.prototype.readUInt32BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              16777216 * this[t3] +
                ((this[t3 + 1] << 16) | (this[t3 + 2] << 8) | this[t3 + 3])
            );
          }),
          (i.prototype.readIntLE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
              n2 += this[t3 + o3] * i2;
            return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * r2)), n2;
          }),
          (i.prototype.readIntBE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (
              var n2 = r2, i2 = 1, o3 = this[t3 + --n2];
              n2 > 0 && (i2 *= 256);

            )
              o3 += this[t3 + --n2] * i2;
            return o3 >= (i2 *= 128) && (o3 -= Math.pow(2, 8 * r2)), o3;
          }),
          (i.prototype.readInt8 = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 1, this.length),
              128 & this[t3] ? -1 * (255 - this[t3] + 1) : this[t3]
            );
          }),
          (i.prototype.readInt16LE = function (t3, r2) {
            (t3 >>>= 0), r2 || x2(t3, 2, this.length);
            var e2 = this[t3] | (this[t3 + 1] << 8);
            return 32768 & e2 ? 4294901760 | e2 : e2;
          }),
          (i.prototype.readInt16BE = function (t3, r2) {
            (t3 >>>= 0), r2 || x2(t3, 2, this.length);
            var e2 = this[t3 + 1] | (this[t3] << 8);
            return 32768 & e2 ? 4294901760 | e2 : e2;
          }),
          (i.prototype.readInt32LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              this[t3] |
                (this[t3 + 1] << 8) |
                (this[t3 + 2] << 16) |
                (this[t3 + 3] << 24)
            );
          }),
          (i.prototype.readInt32BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              (this[t3] << 24) |
                (this[t3 + 1] << 16) |
                (this[t3 + 2] << 8) |
                this[t3 + 3]
            );
          }),
          (i.prototype.readFloatLE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              $(this, t3, true, 23, 4)
            );
          }),
          (i.prototype.readFloatBE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              $(this, t3, false, 23, 4)
            );
          }),
          (i.prototype.readDoubleLE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 8, this.length),
              $(this, t3, true, 52, 8)
            );
          }),
          (i.prototype.readDoubleBE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 8, this.length),
              $(this, t3, false, 52, 8)
            );
          }),
          (i.prototype.writeUIntLE = function (t3, r2, e2, n2) {
            (t3 = +t3),
              (r2 >>>= 0),
              (e2 >>>= 0),
              n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
            var i2 = 1,
              o3 = 0;
            for (this[r2] = 255 & t3; ++o3 < e2 && (i2 *= 256); )
              this[r2 + o3] = (t3 / i2) & 255;
            return r2 + e2;
          }),
          (i.prototype.writeUIntBE = function (t3, r2, e2, n2) {
            (t3 = +t3),
              (r2 >>>= 0),
              (e2 >>>= 0),
              n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
            var i2 = e2 - 1,
              o3 = 1;
            for (this[r2 + i2] = 255 & t3; --i2 >= 0 && (o3 *= 256); )
              this[r2 + i2] = (t3 / o3) & 255;
            return r2 + e2;
          }),
          (i.prototype.writeUInt8 = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 1, 255, 0),
              (this[r2] = 255 & t3),
              r2 + 1
            );
          }),
          (i.prototype.writeUInt16LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 65535, 0),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              r2 + 2
            );
          }),
          (i.prototype.writeUInt16BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 65535, 0),
              (this[r2] = t3 >>> 8),
              (this[r2 + 1] = 255 & t3),
              r2 + 2
            );
          }),
          (i.prototype.writeUInt32LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 4294967295, 0),
              (this[r2 + 3] = t3 >>> 24),
              (this[r2 + 2] = t3 >>> 16),
              (this[r2 + 1] = t3 >>> 8),
              (this[r2] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeUInt32BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 4294967295, 0),
              (this[r2] = t3 >>> 24),
              (this[r2 + 1] = t3 >>> 16),
              (this[r2 + 2] = t3 >>> 8),
              (this[r2 + 3] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeIntLE = function (t3, r2, e2, n2) {
            if (((t3 = +t3), (r2 >>>= 0), !n2)) {
              var i2 = Math.pow(2, 8 * e2 - 1);
              k2(this, t3, r2, e2, i2 - 1, -i2);
            }
            var o3 = 0,
              f3 = 1,
              u3 = 0;
            for (this[r2] = 255 & t3; ++o3 < e2 && (f3 *= 256); )
              t3 < 0 && u3 === 0 && this[r2 + o3 - 1] !== 0 && (u3 = 1),
                (this[r2 + o3] = (((t3 / f3) >> 0) - u3) & 255);
            return r2 + e2;
          }),
          (i.prototype.writeIntBE = function (t3, r2, e2, n2) {
            if (((t3 = +t3), (r2 >>>= 0), !n2)) {
              var i2 = Math.pow(2, 8 * e2 - 1);
              k2(this, t3, r2, e2, i2 - 1, -i2);
            }
            var o3 = e2 - 1,
              f3 = 1,
              u3 = 0;
            for (this[r2 + o3] = 255 & t3; --o3 >= 0 && (f3 *= 256); )
              t3 < 0 && u3 === 0 && this[r2 + o3 + 1] !== 0 && (u3 = 1),
                (this[r2 + o3] = (((t3 / f3) >> 0) - u3) & 255);
            return r2 + e2;
          }),
          (i.prototype.writeInt8 = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 1, 127, -128),
              t3 < 0 && (t3 = 255 + t3 + 1),
              (this[r2] = 255 & t3),
              r2 + 1
            );
          }),
          (i.prototype.writeInt16LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 32767, -32768),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              r2 + 2
            );
          }),
          (i.prototype.writeInt16BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 32767, -32768),
              (this[r2] = t3 >>> 8),
              (this[r2 + 1] = 255 & t3),
              r2 + 2
            );
          }),
          (i.prototype.writeInt32LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 2147483647, -2147483648),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              (this[r2 + 2] = t3 >>> 16),
              (this[r2 + 3] = t3 >>> 24),
              r2 + 4
            );
          }),
          (i.prototype.writeInt32BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 2147483647, -2147483648),
              t3 < 0 && (t3 = 4294967295 + t3 + 1),
              (this[r2] = t3 >>> 24),
              (this[r2 + 1] = t3 >>> 16),
              (this[r2 + 2] = t3 >>> 8),
              (this[r2 + 3] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeFloatLE = function (t3, r2, e2) {
            return C2(this, t3, r2, true, e2);
          }),
          (i.prototype.writeFloatBE = function (t3, r2, e2) {
            return C2(this, t3, r2, false, e2);
          }),
          (i.prototype.writeDoubleLE = function (t3, r2, e2) {
            return M2(this, t3, r2, true, e2);
          }),
          (i.prototype.writeDoubleBE = function (t3, r2, e2) {
            return M2(this, t3, r2, false, e2);
          }),
          (i.prototype.copy = function (t3, r2, e2, n2) {
            if (!i.isBuffer(t3))
              throw new TypeError("argument should be a Buffer");
            if (
              (e2 || (e2 = 0),
              n2 || n2 === 0 || (n2 = this.length),
              r2 >= t3.length && (r2 = t3.length),
              r2 || (r2 = 0),
              n2 > 0 && n2 < e2 && (n2 = e2),
              n2 === e2)
            )
              return 0;
            if (t3.length === 0 || this.length === 0) return 0;
            if (r2 < 0) throw new RangeError("targetStart out of bounds");
            if (e2 < 0 || e2 >= this.length)
              throw new RangeError("Index out of range");
            if (n2 < 0) throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length),
              t3.length - r2 < n2 - e2 && (n2 = t3.length - r2 + e2);
            var o3 = n2 - e2;
            if (
              this === t3 &&
              typeof Uint8Array.prototype.copyWithin == "function"
            )
              this.copyWithin(r2, e2, n2);
            else if (this === t3 && e2 < r2 && r2 < n2)
              for (var f3 = o3 - 1; f3 >= 0; --f3) t3[f3 + r2] = this[f3 + e2];
            else Uint8Array.prototype.set.call(t3, this.subarray(e2, n2), r2);
            return o3;
          }),
          (i.prototype.fill = function (t3, r2, e2, n2) {
            if (typeof t3 == "string") {
              if (
                (typeof r2 == "string"
                  ? ((n2 = r2), (r2 = 0), (e2 = this.length))
                  : typeof e2 == "string" && ((n2 = e2), (e2 = this.length)),
                n2 !== void 0 && typeof n2 != "string")
              )
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !i.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
              if (t3.length === 1) {
                var o3 = t3.charCodeAt(0);
                ((n2 === "utf8" && o3 < 128) || n2 === "latin1") && (t3 = o3);
              }
            } else
              typeof t3 == "number"
                ? (t3 &= 255)
                : typeof t3 == "boolean" && (t3 = Number(t3));
            if (r2 < 0 || this.length < r2 || this.length < e2)
              throw new RangeError("Out of range index");
            if (e2 <= r2) return this;
            var f3;
            if (
              ((r2 >>>= 0),
              (e2 = e2 === void 0 ? this.length : e2 >>> 0),
              t3 || (t3 = 0),
              typeof t3 == "number")
            )
              for (f3 = r2; f3 < e2; ++f3) this[f3] = t3;
            else {
              var u3 = i.isBuffer(t3) ? t3 : i.from(t3, n2),
                a3 = u3.length;
              if (a3 === 0)
                throw new TypeError(
                  'The value "' + t3 + '" is invalid for argument "value"'
                );
              for (f3 = 0; f3 < e2 - r2; ++f3) this[f3 + r2] = u3[f3 % a3];
            }
            return this;
          });
        var T2 = /[^+/0-9A-Za-z-_]/g;
        function L2(t3, r2) {
          var e2;
          r2 = r2 || Infinity;
          for (var n2 = t3.length, i2 = null, o3 = [], f3 = 0; f3 < n2; ++f3) {
            if ((e2 = t3.charCodeAt(f3)) > 55295 && e2 < 57344) {
              if (!i2) {
                if (e2 > 56319) {
                  (r2 -= 3) > -1 && o3.push(239, 191, 189);
                  continue;
                }
                if (f3 + 1 === n2) {
                  (r2 -= 3) > -1 && o3.push(239, 191, 189);
                  continue;
                }
                i2 = e2;
                continue;
              }
              if (e2 < 56320) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189), (i2 = e2);
                continue;
              }
              e2 = 65536 + (((i2 - 55296) << 10) | (e2 - 56320));
            } else i2 && (r2 -= 3) > -1 && o3.push(239, 191, 189);
            if (((i2 = null), e2 < 128)) {
              if ((r2 -= 1) < 0) break;
              o3.push(e2);
            } else if (e2 < 2048) {
              if ((r2 -= 2) < 0) break;
              o3.push((e2 >> 6) | 192, (63 & e2) | 128);
            } else if (e2 < 65536) {
              if ((r2 -= 3) < 0) break;
              o3.push(
                (e2 >> 12) | 224,
                ((e2 >> 6) & 63) | 128,
                (63 & e2) | 128
              );
            } else {
              if (!(e2 < 1114112)) throw new Error("Invalid code point");
              if ((r2 -= 4) < 0) break;
              o3.push(
                (e2 >> 18) | 240,
                ((e2 >> 12) & 63) | 128,
                ((e2 >> 6) & 63) | 128,
                (63 & e2) | 128
              );
            }
          }
          return o3;
        }
        function P2(t3) {
          return G(
            (function (t4) {
              if (
                (t4 = (t4 = t4.split("=")[0]).trim().replace(T2, "")).length < 2
              )
                return "";
              for (; t4.length % 4 != 0; ) t4 += "=";
              return t4;
            })(t3)
          );
        }
        function z2(t3, r2, e2, n2) {
          for (
            var i2 = 0;
            i2 < n2 && !(i2 + e2 >= r2.length || i2 >= t3.length);
            ++i2
          )
            r2[i2 + e2] = t3[i2];
          return i2;
        }
        function R2(t3, r2) {
          return (
            t3 instanceof r2 ||
            (t3 != null &&
              t3.constructor != null &&
              t3.constructor.name != null &&
              t3.constructor.name === r2.name)
          );
        }
        function N3(t3) {
          return t3 != t3;
        }
        var q2 = (function () {
          for (var t3 = new Array(256), r2 = 0; r2 < 16; ++r2)
            for (var e2 = 16 * r2, n2 = 0; n2 < 16; ++n2)
              t3[e2 + n2] = "0123456789abcdef"[r2] + "0123456789abcdef"[n2];
          return t3;
        })();
      });
      et = l(function (t2, r) {
        var e = rt.Buffer;
        function n(t3, r2) {
          for (var e2 in t3) r2[e2] = t3[e2];
        }
        function i(t3, r2, n2) {
          return e(t3, r2, n2);
        }
        e.from && e.alloc && e.allocUnsafe && e.allocUnsafeSlow
          ? (t2.exports = rt)
          : (n(rt, r), (r.Buffer = i)),
          (i.prototype = Object.create(e.prototype)),
          n(e, i),
          (i.from = function (t3, r2, n2) {
            if (typeof t3 == "number")
              throw new TypeError("Argument must not be a number");
            return e(t3, r2, n2);
          }),
          (i.alloc = function (t3, r2, n2) {
            if (typeof t3 != "number")
              throw new TypeError("Argument must be a number");
            var i2 = e(t3);
            return (
              r2 !== void 0
                ? typeof n2 == "string"
                  ? i2.fill(r2, n2)
                  : i2.fill(r2)
                : i2.fill(0),
              i2
            );
          }),
          (i.allocUnsafe = function (t3) {
            if (typeof t3 != "number")
              throw new TypeError("Argument must be a number");
            return e(t3);
          }),
          (i.allocUnsafeSlow = function (t3) {
            if (typeof t3 != "number")
              throw new TypeError("Argument must be a number");
            return rt.SlowBuffer(t3);
          });
      });
      nt = et.Buffer;
      it = function (t2) {
        if (t2.length >= 255) throw new TypeError("Alphabet too long");
        for (var r = new Uint8Array(256), e = 0; e < r.length; e++) r[e] = 255;
        for (var n = 0; n < t2.length; n++) {
          var i = t2.charAt(n),
            o2 = i.charCodeAt(0);
          if (r[o2] !== 255) throw new TypeError(i + " is ambiguous");
          r[o2] = n;
        }
        var f2 = t2.length,
          u2 = t2.charAt(0),
          a2 = Math.log(f2) / Math.log(256),
          s2 = Math.log(256) / Math.log(f2);
        function h2(t3) {
          if (typeof t3 != "string") throw new TypeError("Expected String");
          if (t3.length === 0) return nt.alloc(0);
          var e2 = 0;
          if (t3[e2] !== " ") {
            for (var n2 = 0, i2 = 0; t3[e2] === u2; ) n2++, e2++;
            for (
              var o3 = ((t3.length - e2) * a2 + 1) >>> 0,
                s3 = new Uint8Array(o3);
              t3[e2];

            ) {
              var h3 = r[t3.charCodeAt(e2)];
              if (h3 === 255) return;
              for (
                var c2 = 0, l2 = o3 - 1;
                (h3 !== 0 || c2 < i2) && l2 !== -1;
                l2--, c2++
              )
                (s3[l2] = (h3 += (f2 * s3[l2]) >>> 0) % 256 >>> 0),
                  (h3 = (h3 / 256) >>> 0);
              if (h3 !== 0) throw new Error("Non-zero carry");
              (i2 = c2), e2++;
            }
            if (t3[e2] !== " ") {
              for (var p2 = o3 - i2; p2 !== o3 && s3[p2] === 0; ) p2++;
              var d2 = nt.allocUnsafe(n2 + (o3 - p2));
              d2.fill(0, 0, n2);
              for (var g2 = n2; p2 !== o3; ) d2[g2++] = s3[p2++];
              return d2;
            }
          }
        }
        return {
          encode: function (r2) {
            if (
              ((Array.isArray(r2) || r2 instanceof Uint8Array) &&
                (r2 = nt.from(r2)),
              !nt.isBuffer(r2))
            )
              throw new TypeError("Expected Buffer");
            if (r2.length === 0) return "";
            for (
              var e2 = 0, n2 = 0, i2 = 0, o3 = r2.length;
              i2 !== o3 && r2[i2] === 0;

            )
              i2++, e2++;
            for (
              var a3 = ((o3 - i2) * s2 + 1) >>> 0, h3 = new Uint8Array(a3);
              i2 !== o3;

            ) {
              for (
                var c2 = r2[i2], l2 = 0, p2 = a3 - 1;
                (c2 !== 0 || l2 < n2) && p2 !== -1;
                p2--, l2++
              )
                (h3[p2] = (c2 += (256 * h3[p2]) >>> 0) % f2 >>> 0),
                  (c2 = (c2 / f2) >>> 0);
              if (c2 !== 0) throw new Error("Non-zero carry");
              (n2 = l2), i2++;
            }
            for (var d2 = a3 - n2; d2 !== a3 && h3[d2] === 0; ) d2++;
            for (var g2 = u2.repeat(e2); d2 < a3; ++d2) g2 += t2.charAt(h3[d2]);
            return g2;
          },
          decodeUnsafe: h2,
          decode: function (t3) {
            var r2 = h2(t3);
            if (r2) return r2;
            throw new Error("Non-base" + f2 + " character");
          },
        };
      };
      ot = it("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
      ft = l(function (t2, r) {
        var e =
          typeof Symbol == "function" && typeof Symbol.for == "function"
            ? Symbol.for("nodejs.util.inspect.custom")
            : null;
        function n(t3) {
          if (t3 > 2147483647)
            throw new RangeError(
              'The value "' + t3 + '" is invalid for option "size"'
            );
          var r2 = new Uint8Array(t3);
          return Object.setPrototypeOf(r2, i.prototype), r2;
        }
        function i(t3, r2, e2) {
          if (typeof t3 == "number") {
            if (typeof r2 == "string")
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              );
            return u2(t3);
          }
          return o2(t3, r2, e2);
        }
        function o2(t3, r2, e2) {
          if (typeof t3 == "string")
            return (function (t4, r3) {
              if (
                ((typeof r3 == "string" && r3 !== "") || (r3 = "utf8"),
                !i.isEncoding(r3))
              )
                throw new TypeError("Unknown encoding: " + r3);
              var e3 = 0 | c2(t4, r3),
                o4 = n(e3),
                f4 = o4.write(t4, r3);
              return f4 !== e3 && (o4 = o4.slice(0, f4)), o4;
            })(t3, r2);
          if (ArrayBuffer.isView(t3)) return a2(t3);
          if (t3 == null)
            throw new TypeError(
              "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
                typeof t3
            );
          if (R2(t3, ArrayBuffer) || (t3 && R2(t3.buffer, ArrayBuffer)))
            return s2(t3, r2, e2);
          if (
            typeof SharedArrayBuffer != "undefined" &&
            (R2(t3, SharedArrayBuffer) ||
              (t3 && R2(t3.buffer, SharedArrayBuffer)))
          )
            return s2(t3, r2, e2);
          if (typeof t3 == "number")
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            );
          var o3 = t3.valueOf && t3.valueOf();
          if (o3 != null && o3 !== t3) return i.from(o3, r2, e2);
          var f3 = (function (t4) {
            if (i.isBuffer(t4)) {
              var r3 = 0 | h2(t4.length),
                e3 = n(r3);
              return e3.length === 0 || t4.copy(e3, 0, 0, r3), e3;
            }
            return t4.length !== void 0
              ? typeof t4.length != "number" || N3(t4.length)
                ? n(0)
                : a2(t4)
              : t4.type === "Buffer" && Array.isArray(t4.data)
              ? a2(t4.data)
              : void 0;
          })(t3);
          if (f3) return f3;
          if (
            typeof Symbol != "undefined" &&
            Symbol.toPrimitive != null &&
            typeof t3[Symbol.toPrimitive] == "function"
          )
            return i.from(t3[Symbol.toPrimitive]("string"), r2, e2);
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " +
              typeof t3
          );
        }
        function f2(t3) {
          if (typeof t3 != "number")
            throw new TypeError('"size" argument must be of type number');
          if (t3 < 0)
            throw new RangeError(
              'The value "' + t3 + '" is invalid for option "size"'
            );
        }
        function u2(t3) {
          return f2(t3), n(t3 < 0 ? 0 : 0 | h2(t3));
        }
        function a2(t3) {
          for (
            var r2 = t3.length < 0 ? 0 : 0 | h2(t3.length), e2 = n(r2), i2 = 0;
            i2 < r2;
            i2 += 1
          )
            e2[i2] = 255 & t3[i2];
          return e2;
        }
        function s2(t3, r2, e2) {
          if (r2 < 0 || t3.byteLength < r2)
            throw new RangeError('"offset" is outside of buffer bounds');
          if (t3.byteLength < r2 + (e2 || 0))
            throw new RangeError('"length" is outside of buffer bounds');
          var n2;
          return (
            (n2 =
              r2 === void 0 && e2 === void 0
                ? new Uint8Array(t3)
                : e2 === void 0
                ? new Uint8Array(t3, r2)
                : new Uint8Array(t3, r2, e2)),
            Object.setPrototypeOf(n2, i.prototype),
            n2
          );
        }
        function h2(t3) {
          if (t3 >= 2147483647)
            throw new RangeError(
              "Attempt to allocate Buffer larger than maximum size: 0x" +
                (2147483647).toString(16) +
                " bytes"
            );
          return 0 | t3;
        }
        function c2(t3, r2) {
          if (i.isBuffer(t3)) return t3.length;
          if (ArrayBuffer.isView(t3) || R2(t3, ArrayBuffer))
            return t3.byteLength;
          if (typeof t3 != "string")
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
                typeof t3
            );
          var e2 = t3.length,
            n2 = arguments.length > 2 && arguments[2] === true;
          if (!n2 && e2 === 0) return 0;
          for (var o3 = false; ; )
            switch (r2) {
              case "ascii":
              case "latin1":
              case "binary":
                return e2;
              case "utf8":
              case "utf-8":
                return L2(t3).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * e2;
              case "hex":
                return e2 >>> 1;
              case "base64":
                return P2(t3).length;
              default:
                if (o3) return n2 ? -1 : L2(t3).length;
                (r2 = ("" + r2).toLowerCase()), (o3 = true);
            }
        }
        function l2(t3, r2, e2) {
          var n2 = false;
          if (((r2 === void 0 || r2 < 0) && (r2 = 0), r2 > this.length))
            return "";
          if (
            ((e2 === void 0 || e2 > this.length) && (e2 = this.length), e2 <= 0)
          )
            return "";
          if ((e2 >>>= 0) <= (r2 >>>= 0)) return "";
          for (t3 || (t3 = "utf8"); ; )
            switch (t3) {
              case "hex":
                return _2(this, r2, e2);
              case "utf8":
              case "utf-8":
                return A2(this, r2, e2);
              case "ascii":
                return U2(this, r2, e2);
              case "latin1":
              case "binary":
                return I2(this, r2, e2);
              case "base64":
                return B2(this, r2, e2);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return S2(this, r2, e2);
              default:
                if (n2) throw new TypeError("Unknown encoding: " + t3);
                (t3 = (t3 + "").toLowerCase()), (n2 = true);
            }
        }
        function p2(t3, r2, e2) {
          var n2 = t3[r2];
          (t3[r2] = t3[e2]), (t3[e2] = n2);
        }
        function d2(t3, r2, e2, n2, o3) {
          if (t3.length === 0) return -1;
          if (
            (typeof e2 == "string"
              ? ((n2 = e2), (e2 = 0))
              : e2 > 2147483647
              ? (e2 = 2147483647)
              : e2 < -2147483648 && (e2 = -2147483648),
            N3((e2 = +e2)) && (e2 = o3 ? 0 : t3.length - 1),
            e2 < 0 && (e2 = t3.length + e2),
            e2 >= t3.length)
          ) {
            if (o3) return -1;
            e2 = t3.length - 1;
          } else if (e2 < 0) {
            if (!o3) return -1;
            e2 = 0;
          }
          if ((typeof r2 == "string" && (r2 = i.from(r2, n2)), i.isBuffer(r2)))
            return r2.length === 0 ? -1 : g2(t3, r2, e2, n2, o3);
          if (typeof r2 == "number")
            return (
              (r2 &= 255),
              typeof Uint8Array.prototype.indexOf == "function"
                ? o3
                  ? Uint8Array.prototype.indexOf.call(t3, r2, e2)
                  : Uint8Array.prototype.lastIndexOf.call(t3, r2, e2)
                : g2(t3, [r2], e2, n2, o3)
            );
          throw new TypeError("val must be string, number or Buffer");
        }
        function g2(t3, r2, e2, n2, i2) {
          var o3,
            f3 = 1,
            u3 = t3.length,
            a3 = r2.length;
          if (
            n2 !== void 0 &&
            ((n2 = String(n2).toLowerCase()) === "ucs2" ||
              n2 === "ucs-2" ||
              n2 === "utf16le" ||
              n2 === "utf-16le")
          ) {
            if (t3.length < 2 || r2.length < 2) return -1;
            (f3 = 2), (u3 /= 2), (a3 /= 2), (e2 /= 2);
          }
          function s3(t4, r3) {
            return f3 === 1 ? t4[r3] : t4.readUInt16BE(r3 * f3);
          }
          if (i2) {
            var h3 = -1;
            for (o3 = e2; o3 < u3; o3++)
              if (s3(t3, o3) === s3(r2, h3 === -1 ? 0 : o3 - h3)) {
                if ((h3 === -1 && (h3 = o3), o3 - h3 + 1 === a3))
                  return h3 * f3;
              } else h3 !== -1 && (o3 -= o3 - h3), (h3 = -1);
          } else
            for (e2 + a3 > u3 && (e2 = u3 - a3), o3 = e2; o3 >= 0; o3--) {
              for (var c3 = true, l3 = 0; l3 < a3; l3++)
                if (s3(t3, o3 + l3) !== s3(r2, l3)) {
                  c3 = false;
                  break;
                }
              if (c3) return o3;
            }
          return -1;
        }
        function y2(t3, r2, e2, n2) {
          e2 = Number(e2) || 0;
          var i2 = t3.length - e2;
          n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : (n2 = i2);
          var o3 = r2.length;
          n2 > o3 / 2 && (n2 = o3 / 2);
          for (var f3 = 0; f3 < n2; ++f3) {
            var u3 = parseInt(r2.substr(2 * f3, 2), 16);
            if (N3(u3)) return f3;
            t3[e2 + f3] = u3;
          }
          return f3;
        }
        function v2(t3, r2, e2, n2) {
          return z2(L2(r2, t3.length - e2), t3, e2, n2);
        }
        function w2(t3, r2, e2, n2) {
          return z2(
            (function (t4) {
              for (var r3 = [], e3 = 0; e3 < t4.length; ++e3)
                r3.push(255 & t4.charCodeAt(e3));
              return r3;
            })(r2),
            t3,
            e2,
            n2
          );
        }
        function b2(t3, r2, e2, n2) {
          return w2(t3, r2, e2, n2);
        }
        function m2(t3, r2, e2, n2) {
          return z2(P2(r2), t3, e2, n2);
        }
        function E2(t3, r2, e2, n2) {
          return z2(
            (function (t4, r3) {
              for (
                var e3, n3, i2 = [], o3 = 0;
                o3 < t4.length && !((r3 -= 2) < 0);
                ++o3
              )
                (n3 = (e3 = t4.charCodeAt(o3)) >> 8),
                  i2.push(e3 % 256),
                  i2.push(n3);
              return i2;
            })(r2, t3.length - e2),
            t3,
            e2,
            n2
          );
        }
        function B2(t3, r2, e2) {
          return Q(r2 === 0 && e2 === t3.length ? t3 : t3.slice(r2, e2));
        }
        function A2(t3, r2, e2) {
          e2 = Math.min(t3.length, e2);
          for (var n2 = [], i2 = r2; i2 < e2; ) {
            var o3,
              f3,
              u3,
              a3,
              s3 = t3[i2],
              h3 = null,
              c3 = s3 > 239 ? 4 : s3 > 223 ? 3 : s3 > 191 ? 2 : 1;
            if (i2 + c3 <= e2)
              switch (c3) {
                case 1:
                  s3 < 128 && (h3 = s3);
                  break;
                case 2:
                  (192 & (o3 = t3[i2 + 1])) == 128 &&
                    (a3 = ((31 & s3) << 6) | (63 & o3)) > 127 &&
                    (h3 = a3);
                  break;
                case 3:
                  (f3 = t3[i2 + 2]),
                    (192 & (o3 = t3[i2 + 1])) == 128 &&
                      (192 & f3) == 128 &&
                      (a3 = ((15 & s3) << 12) | ((63 & o3) << 6) | (63 & f3)) >
                        2047 &&
                      (a3 < 55296 || a3 > 57343) &&
                      (h3 = a3);
                  break;
                case 4:
                  (f3 = t3[i2 + 2]),
                    (u3 = t3[i2 + 3]),
                    (192 & (o3 = t3[i2 + 1])) == 128 &&
                      (192 & f3) == 128 &&
                      (192 & u3) == 128 &&
                      (a3 =
                        ((15 & s3) << 18) |
                        ((63 & o3) << 12) |
                        ((63 & f3) << 6) |
                        (63 & u3)) > 65535 &&
                      a3 < 1114112 &&
                      (h3 = a3);
              }
            h3 === null
              ? ((h3 = 65533), (c3 = 1))
              : h3 > 65535 &&
                (n2.push((((h3 -= 65536) >>> 10) & 1023) | 55296),
                (h3 = 56320 | (1023 & h3))),
              n2.push(h3),
              (i2 += c3);
          }
          return (function (t4) {
            var r3 = t4.length;
            if (r3 <= 4096) return String.fromCharCode.apply(String, t4);
            for (var e3 = "", n3 = 0; n3 < r3; )
              e3 += String.fromCharCode.apply(
                String,
                t4.slice(n3, (n3 += 4096))
              );
            return e3;
          })(n2);
        }
        function U2(t3, r2, e2) {
          var n2 = "";
          e2 = Math.min(t3.length, e2);
          for (var i2 = r2; i2 < e2; ++i2)
            n2 += String.fromCharCode(127 & t3[i2]);
          return n2;
        }
        function I2(t3, r2, e2) {
          var n2 = "";
          e2 = Math.min(t3.length, e2);
          for (var i2 = r2; i2 < e2; ++i2) n2 += String.fromCharCode(t3[i2]);
          return n2;
        }
        function _2(t3, r2, e2) {
          var n2 = t3.length;
          (!r2 || r2 < 0) && (r2 = 0), (!e2 || e2 < 0 || e2 > n2) && (e2 = n2);
          for (var i2 = "", o3 = r2; o3 < e2; ++o3) i2 += q2[t3[o3]];
          return i2;
        }
        function S2(t3, r2, e2) {
          for (
            var n2 = t3.slice(r2, e2), i2 = "", o3 = 0;
            o3 < n2.length;
            o3 += 2
          )
            i2 += String.fromCharCode(n2[o3] + 256 * n2[o3 + 1]);
          return i2;
        }
        function x2(t3, r2, e2) {
          if (t3 % 1 != 0 || t3 < 0) throw new RangeError("offset is not uint");
          if (t3 + r2 > e2)
            throw new RangeError("Trying to access beyond buffer length");
        }
        function k2(t3, r2, e2, n2, o3, f3) {
          if (!i.isBuffer(t3))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (r2 > o3 || r2 < f3)
            throw new RangeError('"value" argument is out of bounds');
          if (e2 + n2 > t3.length) throw new RangeError("Index out of range");
        }
        function O2(t3, r2, e2, n2, i2, o3) {
          if (e2 + n2 > t3.length) throw new RangeError("Index out of range");
          if (e2 < 0) throw new RangeError("Index out of range");
        }
        function C2(t3, r2, e2, n2, i2) {
          return (
            (r2 = +r2),
            (e2 >>>= 0),
            i2 || O2(t3, 0, e2, 4),
            tt(t3, r2, e2, n2, 23, 4),
            e2 + 4
          );
        }
        function M2(t3, r2, e2, n2, i2) {
          return (
            (r2 = +r2),
            (e2 >>>= 0),
            i2 || O2(t3, 0, e2, 8),
            tt(t3, r2, e2, n2, 52, 8),
            e2 + 8
          );
        }
        (r.Buffer = i),
          (r.SlowBuffer = function (t3) {
            return +t3 != t3 && (t3 = 0), i.alloc(+t3);
          }),
          (r.INSPECT_MAX_BYTES = 50),
          (r.kMaxLength = 2147483647),
          (i.TYPED_ARRAY_SUPPORT = (function () {
            try {
              var t3 = new Uint8Array(1),
                r2 = {
                  foo: function () {
                    return 42;
                  },
                };
              return (
                Object.setPrototypeOf(r2, Uint8Array.prototype),
                Object.setPrototypeOf(t3, r2),
                t3.foo() === 42
              );
            } catch (t4) {
              return false;
            }
          })()) ||
            typeof console == "undefined" ||
            typeof console.error != "function" ||
            console.error(
              "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
            ),
          Object.defineProperty(i.prototype, "parent", {
            enumerable: true,
            get: function () {
              if (i.isBuffer(this)) return this.buffer;
            },
          }),
          Object.defineProperty(i.prototype, "offset", {
            enumerable: true,
            get: function () {
              if (i.isBuffer(this)) return this.byteOffset;
            },
          }),
          (i.poolSize = 8192),
          (i.from = function (t3, r2, e2) {
            return o2(t3, r2, e2);
          }),
          Object.setPrototypeOf(i.prototype, Uint8Array.prototype),
          Object.setPrototypeOf(i, Uint8Array),
          (i.alloc = function (t3, r2, e2) {
            return (function (t4, r3, e3) {
              return (
                f2(t4),
                t4 <= 0
                  ? n(t4)
                  : r3 !== void 0
                  ? typeof e3 == "string"
                    ? n(t4).fill(r3, e3)
                    : n(t4).fill(r3)
                  : n(t4)
              );
            })(t3, r2, e2);
          }),
          (i.allocUnsafe = function (t3) {
            return u2(t3);
          }),
          (i.allocUnsafeSlow = function (t3) {
            return u2(t3);
          }),
          (i.isBuffer = function (t3) {
            return t3 != null && t3._isBuffer === true && t3 !== i.prototype;
          }),
          (i.compare = function (t3, r2) {
            if (
              (R2(t3, Uint8Array) &&
                (t3 = i.from(t3, t3.offset, t3.byteLength)),
              R2(r2, Uint8Array) && (r2 = i.from(r2, r2.offset, r2.byteLength)),
              !i.isBuffer(t3) || !i.isBuffer(r2))
            )
              throw new TypeError(
                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
              );
            if (t3 === r2) return 0;
            for (
              var e2 = t3.length, n2 = r2.length, o3 = 0, f3 = Math.min(e2, n2);
              o3 < f3;
              ++o3
            )
              if (t3[o3] !== r2[o3]) {
                (e2 = t3[o3]), (n2 = r2[o3]);
                break;
              }
            return e2 < n2 ? -1 : n2 < e2 ? 1 : 0;
          }),
          (i.isEncoding = function (t3) {
            switch (String(t3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }),
          (i.concat = function (t3, r2) {
            if (!Array.isArray(t3))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            if (t3.length === 0) return i.alloc(0);
            var e2;
            if (r2 === void 0)
              for (r2 = 0, e2 = 0; e2 < t3.length; ++e2) r2 += t3[e2].length;
            var n2 = i.allocUnsafe(r2),
              o3 = 0;
            for (e2 = 0; e2 < t3.length; ++e2) {
              var f3 = t3[e2];
              if ((R2(f3, Uint8Array) && (f3 = i.from(f3)), !i.isBuffer(f3)))
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              f3.copy(n2, o3), (o3 += f3.length);
            }
            return n2;
          }),
          (i.byteLength = c2),
          (i.prototype._isBuffer = true),
          (i.prototype.swap16 = function () {
            var t3 = this.length;
            if (t3 % 2 != 0)
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var r2 = 0; r2 < t3; r2 += 2) p2(this, r2, r2 + 1);
            return this;
          }),
          (i.prototype.swap32 = function () {
            var t3 = this.length;
            if (t3 % 4 != 0)
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var r2 = 0; r2 < t3; r2 += 4)
              p2(this, r2, r2 + 3), p2(this, r2 + 1, r2 + 2);
            return this;
          }),
          (i.prototype.swap64 = function () {
            var t3 = this.length;
            if (t3 % 8 != 0)
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var r2 = 0; r2 < t3; r2 += 8)
              p2(this, r2, r2 + 7),
                p2(this, r2 + 1, r2 + 6),
                p2(this, r2 + 2, r2 + 5),
                p2(this, r2 + 3, r2 + 4);
            return this;
          }),
          (i.prototype.toLocaleString = i.prototype.toString =
            function () {
              var t3 = this.length;
              return t3 === 0
                ? ""
                : arguments.length === 0
                ? A2(this, 0, t3)
                : l2.apply(this, arguments);
            }),
          (i.prototype.equals = function (t3) {
            if (!i.isBuffer(t3))
              throw new TypeError("Argument must be a Buffer");
            return this === t3 || i.compare(this, t3) === 0;
          }),
          (i.prototype.inspect = function () {
            var t3 = "",
              e2 = r.INSPECT_MAX_BYTES;
            return (
              (t3 = this.toString("hex", 0, e2)
                .replace(/(.{2})/g, "$1 ")
                .trim()),
              this.length > e2 && (t3 += " ... "),
              "<Buffer " + t3 + ">"
            );
          }),
          e && (i.prototype[e] = i.prototype.inspect),
          (i.prototype.compare = function (t3, r2, e2, n2, o3) {
            if (
              (R2(t3, Uint8Array) &&
                (t3 = i.from(t3, t3.offset, t3.byteLength)),
              !i.isBuffer(t3))
            )
              throw new TypeError(
                'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
                  typeof t3
              );
            if (
              (r2 === void 0 && (r2 = 0),
              e2 === void 0 && (e2 = t3 ? t3.length : 0),
              n2 === void 0 && (n2 = 0),
              o3 === void 0 && (o3 = this.length),
              r2 < 0 || e2 > t3.length || n2 < 0 || o3 > this.length)
            )
              throw new RangeError("out of range index");
            if (n2 >= o3 && r2 >= e2) return 0;
            if (n2 >= o3) return -1;
            if (r2 >= e2) return 1;
            if (this === t3) return 0;
            for (
              var f3 = (o3 >>>= 0) - (n2 >>>= 0),
                u3 = (e2 >>>= 0) - (r2 >>>= 0),
                a3 = Math.min(f3, u3),
                s3 = this.slice(n2, o3),
                h3 = t3.slice(r2, e2),
                c3 = 0;
              c3 < a3;
              ++c3
            )
              if (s3[c3] !== h3[c3]) {
                (f3 = s3[c3]), (u3 = h3[c3]);
                break;
              }
            return f3 < u3 ? -1 : u3 < f3 ? 1 : 0;
          }),
          (i.prototype.includes = function (t3, r2, e2) {
            return this.indexOf(t3, r2, e2) !== -1;
          }),
          (i.prototype.indexOf = function (t3, r2, e2) {
            return d2(this, t3, r2, e2, true);
          }),
          (i.prototype.lastIndexOf = function (t3, r2, e2) {
            return d2(this, t3, r2, e2, false);
          }),
          (i.prototype.write = function (t3, r2, e2, n2) {
            if (r2 === void 0) (n2 = "utf8"), (e2 = this.length), (r2 = 0);
            else if (e2 === void 0 && typeof r2 == "string")
              (n2 = r2), (e2 = this.length), (r2 = 0);
            else {
              if (!isFinite(r2))
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              (r2 >>>= 0),
                isFinite(e2)
                  ? ((e2 >>>= 0), n2 === void 0 && (n2 = "utf8"))
                  : ((n2 = e2), (e2 = void 0));
            }
            var i2 = this.length - r2;
            if (
              ((e2 === void 0 || e2 > i2) && (e2 = i2),
              (t3.length > 0 && (e2 < 0 || r2 < 0)) || r2 > this.length)
            )
              throw new RangeError("Attempt to write outside buffer bounds");
            n2 || (n2 = "utf8");
            for (var o3 = false; ; )
              switch (n2) {
                case "hex":
                  return y2(this, t3, r2, e2);
                case "utf8":
                case "utf-8":
                  return v2(this, t3, r2, e2);
                case "ascii":
                  return w2(this, t3, r2, e2);
                case "latin1":
                case "binary":
                  return b2(this, t3, r2, e2);
                case "base64":
                  return m2(this, t3, r2, e2);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return E2(this, t3, r2, e2);
                default:
                  if (o3) throw new TypeError("Unknown encoding: " + n2);
                  (n2 = ("" + n2).toLowerCase()), (o3 = true);
              }
          }),
          (i.prototype.toJSON = function () {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          }),
          (i.prototype.slice = function (t3, r2) {
            var e2 = this.length;
            (t3 = ~~t3) < 0 ? (t3 += e2) < 0 && (t3 = 0) : t3 > e2 && (t3 = e2),
              (r2 = r2 === void 0 ? e2 : ~~r2) < 0
                ? (r2 += e2) < 0 && (r2 = 0)
                : r2 > e2 && (r2 = e2),
              r2 < t3 && (r2 = t3);
            var n2 = this.subarray(t3, r2);
            return Object.setPrototypeOf(n2, i.prototype), n2;
          }),
          (i.prototype.readUIntLE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
              n2 += this[t3 + o3] * i2;
            return n2;
          }),
          (i.prototype.readUIntBE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3 + --r2], i2 = 1; r2 > 0 && (i2 *= 256); )
              n2 += this[t3 + --r2] * i2;
            return n2;
          }),
          (i.prototype.readUInt8 = function (t3, r2) {
            return (t3 >>>= 0), r2 || x2(t3, 1, this.length), this[t3];
          }),
          (i.prototype.readUInt16LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 2, this.length),
              this[t3] | (this[t3 + 1] << 8)
            );
          }),
          (i.prototype.readUInt16BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 2, this.length),
              (this[t3] << 8) | this[t3 + 1]
            );
          }),
          (i.prototype.readUInt32LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              (this[t3] | (this[t3 + 1] << 8) | (this[t3 + 2] << 16)) +
                16777216 * this[t3 + 3]
            );
          }),
          (i.prototype.readUInt32BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              16777216 * this[t3] +
                ((this[t3 + 1] << 16) | (this[t3 + 2] << 8) | this[t3 + 3])
            );
          }),
          (i.prototype.readIntLE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (var n2 = this[t3], i2 = 1, o3 = 0; ++o3 < r2 && (i2 *= 256); )
              n2 += this[t3 + o3] * i2;
            return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * r2)), n2;
          }),
          (i.prototype.readIntBE = function (t3, r2, e2) {
            (t3 >>>= 0), (r2 >>>= 0), e2 || x2(t3, r2, this.length);
            for (
              var n2 = r2, i2 = 1, o3 = this[t3 + --n2];
              n2 > 0 && (i2 *= 256);

            )
              o3 += this[t3 + --n2] * i2;
            return o3 >= (i2 *= 128) && (o3 -= Math.pow(2, 8 * r2)), o3;
          }),
          (i.prototype.readInt8 = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 1, this.length),
              128 & this[t3] ? -1 * (255 - this[t3] + 1) : this[t3]
            );
          }),
          (i.prototype.readInt16LE = function (t3, r2) {
            (t3 >>>= 0), r2 || x2(t3, 2, this.length);
            var e2 = this[t3] | (this[t3 + 1] << 8);
            return 32768 & e2 ? 4294901760 | e2 : e2;
          }),
          (i.prototype.readInt16BE = function (t3, r2) {
            (t3 >>>= 0), r2 || x2(t3, 2, this.length);
            var e2 = this[t3 + 1] | (this[t3] << 8);
            return 32768 & e2 ? 4294901760 | e2 : e2;
          }),
          (i.prototype.readInt32LE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              this[t3] |
                (this[t3 + 1] << 8) |
                (this[t3 + 2] << 16) |
                (this[t3 + 3] << 24)
            );
          }),
          (i.prototype.readInt32BE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              (this[t3] << 24) |
                (this[t3 + 1] << 16) |
                (this[t3 + 2] << 8) |
                this[t3 + 3]
            );
          }),
          (i.prototype.readFloatLE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              $(this, t3, true, 23, 4)
            );
          }),
          (i.prototype.readFloatBE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 4, this.length),
              $(this, t3, false, 23, 4)
            );
          }),
          (i.prototype.readDoubleLE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 8, this.length),
              $(this, t3, true, 52, 8)
            );
          }),
          (i.prototype.readDoubleBE = function (t3, r2) {
            return (
              (t3 >>>= 0),
              r2 || x2(t3, 8, this.length),
              $(this, t3, false, 52, 8)
            );
          }),
          (i.prototype.writeUIntLE = function (t3, r2, e2, n2) {
            (t3 = +t3),
              (r2 >>>= 0),
              (e2 >>>= 0),
              n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
            var i2 = 1,
              o3 = 0;
            for (this[r2] = 255 & t3; ++o3 < e2 && (i2 *= 256); )
              this[r2 + o3] = (t3 / i2) & 255;
            return r2 + e2;
          }),
          (i.prototype.writeUIntBE = function (t3, r2, e2, n2) {
            (t3 = +t3),
              (r2 >>>= 0),
              (e2 >>>= 0),
              n2 || k2(this, t3, r2, e2, Math.pow(2, 8 * e2) - 1, 0);
            var i2 = e2 - 1,
              o3 = 1;
            for (this[r2 + i2] = 255 & t3; --i2 >= 0 && (o3 *= 256); )
              this[r2 + i2] = (t3 / o3) & 255;
            return r2 + e2;
          }),
          (i.prototype.writeUInt8 = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 1, 255, 0),
              (this[r2] = 255 & t3),
              r2 + 1
            );
          }),
          (i.prototype.writeUInt16LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 65535, 0),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              r2 + 2
            );
          }),
          (i.prototype.writeUInt16BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 65535, 0),
              (this[r2] = t3 >>> 8),
              (this[r2 + 1] = 255 & t3),
              r2 + 2
            );
          }),
          (i.prototype.writeUInt32LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 4294967295, 0),
              (this[r2 + 3] = t3 >>> 24),
              (this[r2 + 2] = t3 >>> 16),
              (this[r2 + 1] = t3 >>> 8),
              (this[r2] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeUInt32BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 4294967295, 0),
              (this[r2] = t3 >>> 24),
              (this[r2 + 1] = t3 >>> 16),
              (this[r2 + 2] = t3 >>> 8),
              (this[r2 + 3] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeIntLE = function (t3, r2, e2, n2) {
            if (((t3 = +t3), (r2 >>>= 0), !n2)) {
              var i2 = Math.pow(2, 8 * e2 - 1);
              k2(this, t3, r2, e2, i2 - 1, -i2);
            }
            var o3 = 0,
              f3 = 1,
              u3 = 0;
            for (this[r2] = 255 & t3; ++o3 < e2 && (f3 *= 256); )
              t3 < 0 && u3 === 0 && this[r2 + o3 - 1] !== 0 && (u3 = 1),
                (this[r2 + o3] = (((t3 / f3) >> 0) - u3) & 255);
            return r2 + e2;
          }),
          (i.prototype.writeIntBE = function (t3, r2, e2, n2) {
            if (((t3 = +t3), (r2 >>>= 0), !n2)) {
              var i2 = Math.pow(2, 8 * e2 - 1);
              k2(this, t3, r2, e2, i2 - 1, -i2);
            }
            var o3 = e2 - 1,
              f3 = 1,
              u3 = 0;
            for (this[r2 + o3] = 255 & t3; --o3 >= 0 && (f3 *= 256); )
              t3 < 0 && u3 === 0 && this[r2 + o3 + 1] !== 0 && (u3 = 1),
                (this[r2 + o3] = (((t3 / f3) >> 0) - u3) & 255);
            return r2 + e2;
          }),
          (i.prototype.writeInt8 = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 1, 127, -128),
              t3 < 0 && (t3 = 255 + t3 + 1),
              (this[r2] = 255 & t3),
              r2 + 1
            );
          }),
          (i.prototype.writeInt16LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 32767, -32768),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              r2 + 2
            );
          }),
          (i.prototype.writeInt16BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 2, 32767, -32768),
              (this[r2] = t3 >>> 8),
              (this[r2 + 1] = 255 & t3),
              r2 + 2
            );
          }),
          (i.prototype.writeInt32LE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 2147483647, -2147483648),
              (this[r2] = 255 & t3),
              (this[r2 + 1] = t3 >>> 8),
              (this[r2 + 2] = t3 >>> 16),
              (this[r2 + 3] = t3 >>> 24),
              r2 + 4
            );
          }),
          (i.prototype.writeInt32BE = function (t3, r2, e2) {
            return (
              (t3 = +t3),
              (r2 >>>= 0),
              e2 || k2(this, t3, r2, 4, 2147483647, -2147483648),
              t3 < 0 && (t3 = 4294967295 + t3 + 1),
              (this[r2] = t3 >>> 24),
              (this[r2 + 1] = t3 >>> 16),
              (this[r2 + 2] = t3 >>> 8),
              (this[r2 + 3] = 255 & t3),
              r2 + 4
            );
          }),
          (i.prototype.writeFloatLE = function (t3, r2, e2) {
            return C2(this, t3, r2, true, e2);
          }),
          (i.prototype.writeFloatBE = function (t3, r2, e2) {
            return C2(this, t3, r2, false, e2);
          }),
          (i.prototype.writeDoubleLE = function (t3, r2, e2) {
            return M2(this, t3, r2, true, e2);
          }),
          (i.prototype.writeDoubleBE = function (t3, r2, e2) {
            return M2(this, t3, r2, false, e2);
          }),
          (i.prototype.copy = function (t3, r2, e2, n2) {
            if (!i.isBuffer(t3))
              throw new TypeError("argument should be a Buffer");
            if (
              (e2 || (e2 = 0),
              n2 || n2 === 0 || (n2 = this.length),
              r2 >= t3.length && (r2 = t3.length),
              r2 || (r2 = 0),
              n2 > 0 && n2 < e2 && (n2 = e2),
              n2 === e2)
            )
              return 0;
            if (t3.length === 0 || this.length === 0) return 0;
            if (r2 < 0) throw new RangeError("targetStart out of bounds");
            if (e2 < 0 || e2 >= this.length)
              throw new RangeError("Index out of range");
            if (n2 < 0) throw new RangeError("sourceEnd out of bounds");
            n2 > this.length && (n2 = this.length),
              t3.length - r2 < n2 - e2 && (n2 = t3.length - r2 + e2);
            var o3 = n2 - e2;
            if (
              this === t3 &&
              typeof Uint8Array.prototype.copyWithin == "function"
            )
              this.copyWithin(r2, e2, n2);
            else if (this === t3 && e2 < r2 && r2 < n2)
              for (var f3 = o3 - 1; f3 >= 0; --f3) t3[f3 + r2] = this[f3 + e2];
            else Uint8Array.prototype.set.call(t3, this.subarray(e2, n2), r2);
            return o3;
          }),
          (i.prototype.fill = function (t3, r2, e2, n2) {
            if (typeof t3 == "string") {
              if (
                (typeof r2 == "string"
                  ? ((n2 = r2), (r2 = 0), (e2 = this.length))
                  : typeof e2 == "string" && ((n2 = e2), (e2 = this.length)),
                n2 !== void 0 && typeof n2 != "string")
              )
                throw new TypeError("encoding must be a string");
              if (typeof n2 == "string" && !i.isEncoding(n2))
                throw new TypeError("Unknown encoding: " + n2);
              if (t3.length === 1) {
                var o3 = t3.charCodeAt(0);
                ((n2 === "utf8" && o3 < 128) || n2 === "latin1") && (t3 = o3);
              }
            } else
              typeof t3 == "number"
                ? (t3 &= 255)
                : typeof t3 == "boolean" && (t3 = Number(t3));
            if (r2 < 0 || this.length < r2 || this.length < e2)
              throw new RangeError("Out of range index");
            if (e2 <= r2) return this;
            var f3;
            if (
              ((r2 >>>= 0),
              (e2 = e2 === void 0 ? this.length : e2 >>> 0),
              t3 || (t3 = 0),
              typeof t3 == "number")
            )
              for (f3 = r2; f3 < e2; ++f3) this[f3] = t3;
            else {
              var u3 = i.isBuffer(t3) ? t3 : i.from(t3, n2),
                a3 = u3.length;
              if (a3 === 0)
                throw new TypeError(
                  'The value "' + t3 + '" is invalid for argument "value"'
                );
              for (f3 = 0; f3 < e2 - r2; ++f3) this[f3 + r2] = u3[f3 % a3];
            }
            return this;
          });
        var T2 = /[^+/0-9A-Za-z-_]/g;
        function L2(t3, r2) {
          var e2;
          r2 = r2 || Infinity;
          for (var n2 = t3.length, i2 = null, o3 = [], f3 = 0; f3 < n2; ++f3) {
            if ((e2 = t3.charCodeAt(f3)) > 55295 && e2 < 57344) {
              if (!i2) {
                if (e2 > 56319) {
                  (r2 -= 3) > -1 && o3.push(239, 191, 189);
                  continue;
                }
                if (f3 + 1 === n2) {
                  (r2 -= 3) > -1 && o3.push(239, 191, 189);
                  continue;
                }
                i2 = e2;
                continue;
              }
              if (e2 < 56320) {
                (r2 -= 3) > -1 && o3.push(239, 191, 189), (i2 = e2);
                continue;
              }
              e2 = 65536 + (((i2 - 55296) << 10) | (e2 - 56320));
            } else i2 && (r2 -= 3) > -1 && o3.push(239, 191, 189);
            if (((i2 = null), e2 < 128)) {
              if ((r2 -= 1) < 0) break;
              o3.push(e2);
            } else if (e2 < 2048) {
              if ((r2 -= 2) < 0) break;
              o3.push((e2 >> 6) | 192, (63 & e2) | 128);
            } else if (e2 < 65536) {
              if ((r2 -= 3) < 0) break;
              o3.push(
                (e2 >> 12) | 224,
                ((e2 >> 6) & 63) | 128,
                (63 & e2) | 128
              );
            } else {
              if (!(e2 < 1114112)) throw new Error("Invalid code point");
              if ((r2 -= 4) < 0) break;
              o3.push(
                (e2 >> 18) | 240,
                ((e2 >> 12) & 63) | 128,
                ((e2 >> 6) & 63) | 128,
                (63 & e2) | 128
              );
            }
          }
          return o3;
        }
        function P2(t3) {
          return G(
            (function (t4) {
              if (
                (t4 = (t4 = t4.split("=")[0]).trim().replace(T2, "")).length < 2
              )
                return "";
              for (; t4.length % 4 != 0; ) t4 += "=";
              return t4;
            })(t3)
          );
        }
        function z2(t3, r2, e2, n2) {
          for (
            var i2 = 0;
            i2 < n2 && !(i2 + e2 >= r2.length || i2 >= t3.length);
            ++i2
          )
            r2[i2 + e2] = t3[i2];
          return i2;
        }
        function R2(t3, r2) {
          return (
            t3 instanceof r2 ||
            (t3 != null &&
              t3.constructor != null &&
              t3.constructor.name != null &&
              t3.constructor.name === r2.name)
          );
        }
        function N3(t3) {
          return t3 != t3;
        }
        var q2 = (function () {
          for (var t3 = new Array(256), r2 = 0; r2 < 16; ++r2)
            for (var e2 = 16 * r2, n2 = 0; n2 < 16; ++n2)
              t3[e2 + n2] = "0123456789abcdef"[r2] + "0123456789abcdef"[n2];
          return t3;
        })();
      });
      ut = function (t2, r) {
        return function (e, n) {
          var i = 2 * n,
            o2 = 2 * r;
          (e[i] = t2[o2]), (e[i + 1] = t2[o2 + 1]);
        };
      };
      at = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e,
          n = (e = ut) && e.__esModule ? e : { default: e };
        r.default = function (t3) {
          for (var r2 = t3.A, e2 = t3.C, i = 0; i < 25; i += 5) {
            for (var o2 = 0; o2 < 5; o2++) (0, n.default)(r2, i + o2)(e2, o2);
            for (var f2 = 0; f2 < 5; f2++) {
              var u2 = 2 * (i + f2),
                a2 = ((f2 + 1) % 5) * 2,
                s2 = ((f2 + 2) % 5) * 2;
              (r2[u2] ^= ~e2[a2] & e2[s2]),
                (r2[u2 + 1] ^= ~e2[a2 + 1] & e2[s2 + 1]);
            }
          }
        };
      });
      st = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e = new Uint32Array([
          0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907,
          0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0,
          136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139,
          2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648,
          128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545,
          2147483648, 32896, 0, 2147483649, 2147483648, 2147516424,
        ]);
        r.default = e;
      });
      ht = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e,
          n = (e = st) && e.__esModule ? e : { default: e };
        r.default = function (t3) {
          var r2 = t3.A,
            e2 = 2 * t3.roundIndex;
          (r2[0] ^= n.default[e2]), (r2[1] ^= n.default[e2 + 1]);
        };
      });
      ct = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0),
          (r.default = [
            10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2,
            20, 14, 22, 9, 6, 1,
          ]);
      });
      lt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0),
          (r.default = [
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43,
            62, 18, 39, 61, 20, 44,
          ]);
      });
      pt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e = o2(ct),
          n = o2(lt),
          i = o2(ut);
        function o2(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        }
        r.default = function (t3) {
          var r2 = t3.A,
            o3 = t3.C,
            f2 = t3.W;
          (0, i.default)(r2, 1)(f2, 0);
          for (var u2 = 0, a2 = 0, s2 = 0, h2 = 32, c2 = 0; c2 < 24; c2++) {
            var l2 = e.default[c2],
              p2 = n.default[c2];
            (0, i.default)(r2, l2)(o3, 0),
              (f2[(s2 = p2 < 32 ? 0 : 1)] =
                ((u2 = f2[0]) << p2) | ((a2 = f2[1]) >>> (h2 = 32 - p2))),
              (f2[(s2 + 1) % 2] = (a2 << p2) | (u2 >>> h2)),
              (0, i.default)(f2, 0)(r2, l2),
              (0, i.default)(o3, 0)(f2, 0);
          }
        };
      });
      dt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e,
          n = (e = ut) && e.__esModule ? e : { default: e };
        r.default = function (t3) {
          for (
            var r2 = t3.A,
              e2 = t3.C,
              i = t3.D,
              o2 = t3.W,
              f2 = 0,
              u2 = 0,
              a2 = 0;
            a2 < 5;
            a2++
          ) {
            var s2 = 2 * a2,
              h2 = 2 * (a2 + 5),
              c2 = 2 * (a2 + 10),
              l2 = 2 * (a2 + 15),
              p2 = 2 * (a2 + 20);
            (e2[s2] = r2[s2] ^ r2[h2] ^ r2[c2] ^ r2[l2] ^ r2[p2]),
              (e2[s2 + 1] =
                r2[s2 + 1] ^ r2[h2 + 1] ^ r2[c2 + 1] ^ r2[l2 + 1] ^ r2[p2 + 1]);
          }
          for (var d2 = 0; d2 < 5; d2++) {
            (0, n.default)(e2, (d2 + 1) % 5)(o2, 0),
              (o2[0] = ((f2 = o2[0]) << 1) | ((u2 = o2[1]) >>> 31)),
              (o2[1] = (u2 << 1) | (f2 >>> 31)),
              (i[2 * d2] = e2[((d2 + 4) % 5) * 2] ^ o2[0]),
              (i[2 * d2 + 1] = e2[((d2 + 4) % 5) * 2 + 1] ^ o2[1]);
            for (var g2 = 0; g2 < 25; g2 += 5)
              (r2[2 * (g2 + d2)] ^= i[2 * d2]),
                (r2[2 * (g2 + d2) + 1] ^= i[2 * d2 + 1]);
          }
        };
      });
      gt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e = f2(at),
          n = f2(ht),
          i = f2(pt),
          o2 = f2(dt);
        function f2(t3) {
          return t3 && t3.__esModule ? t3 : { default: t3 };
        }
        r.default = function () {
          var t3 = new Uint32Array(10),
            r2 = new Uint32Array(10),
            f3 = new Uint32Array(2);
          return function (u2) {
            for (var a2 = 0; a2 < 24; a2++)
              (0, o2.default)({ A: u2, C: t3, D: r2, W: f3 }),
                (0, i.default)({ A: u2, C: t3, W: f3 }),
                (0, e.default)({ A: u2, C: t3 }),
                (0, n.default)({ A: u2, roundIndex: a2 });
            t3.fill(0), r2.fill(0), f3.fill(0);
          };
        };
      });
      yt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = void 0);
        var e,
          n = (e = gt) && e.__esModule ? e : { default: e },
          i = function (t3, r2) {
            for (var e2 = 0; e2 < t3.length; e2 += 8) {
              var n2 = e2 / 4;
              (r2[n2] ^=
                (t3[e2 + 7] << 24) |
                (t3[e2 + 6] << 16) |
                (t3[e2 + 5] << 8) |
                t3[e2 + 4]),
                (r2[n2 + 1] ^=
                  (t3[e2 + 3] << 24) |
                  (t3[e2 + 2] << 16) |
                  (t3[e2 + 1] << 8) |
                  t3[e2]);
            }
            return r2;
          },
          o2 = function (t3, r2) {
            for (var e2 = 0; e2 < r2.length; e2 += 8) {
              var n2 = e2 / 4;
              (r2[e2] = t3[n2 + 1]),
                (r2[e2 + 1] = t3[n2 + 1] >>> 8),
                (r2[e2 + 2] = t3[n2 + 1] >>> 16),
                (r2[e2 + 3] = t3[n2 + 1] >>> 24),
                (r2[e2 + 4] = t3[n2]),
                (r2[e2 + 5] = t3[n2] >>> 8),
                (r2[e2 + 6] = t3[n2] >>> 16),
                (r2[e2 + 7] = t3[n2] >>> 24);
            }
            return r2;
          };
        r.default = function (t3) {
          var r2 = this,
            e2 = t3.capacity,
            f2 = t3.padding,
            u2 = (0, n.default)(),
            a2 = e2 / 8,
            s2 = 200 - e2 / 4,
            h2 = 0,
            c2 = new Uint32Array(50),
            l2 = ft.Buffer.allocUnsafe(s2);
          return (
            (this.absorb = function (t4) {
              for (var e3 = 0; e3 < t4.length; e3++)
                (l2[h2] = t4[e3]),
                  (h2 += 1) >= s2 && (i(l2, c2), u2(c2), (h2 = 0));
              return r2;
            }),
            (this.squeeze = function () {
              var t4 =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : {},
                r3 = {
                  buffer: t4.buffer || ft.Buffer.allocUnsafe(a2),
                  padding: t4.padding || f2,
                  queue: ft.Buffer.allocUnsafe(l2.length),
                  state: new Uint32Array(c2.length),
                };
              l2.copy(r3.queue);
              for (var e3 = 0; e3 < c2.length; e3++) r3.state[e3] = c2[e3];
              r3.queue.fill(0, h2),
                (r3.queue[h2] |= r3.padding),
                (r3.queue[s2 - 1] |= 128),
                i(r3.queue, r3.state);
              for (var n2 = 0; n2 < r3.buffer.length; n2 += s2)
                u2(r3.state), o2(r3.state, r3.buffer.slice(n2, n2 + s2));
              return r3.buffer;
            }),
            (this.reset = function () {
              return l2.fill(0), c2.fill(0), (h2 = 0), r2;
            }),
            this
          );
        };
      });
      vt = l(function (t2, r) {
        Object.defineProperty(r, "__esModule", { value: true }),
          (r.default = r.SHAKE = r.SHA3Hash = r.SHA3 = r.Keccak = void 0);
        var e,
          n = (e = yt) && e.__esModule ? e : { default: e },
          i = function (t3) {
            var r2 = t3.allowedSizes,
              e2 = t3.padding;
            return function t4() {
              var i2 = this,
                o3 =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : 512;
              if (!this || this.constructor !== t4) return new t4(o3);
              if (r2 && !r2.includes(o3))
                throw new Error("Unsupported hash length");
              var f3 = new n.default({ capacity: o3 });
              return (
                (this.update = function (t5) {
                  var r3 =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : "utf8";
                  if (ft.Buffer.isBuffer(t5)) return f3.absorb(t5), i2;
                  if (typeof t5 == "string")
                    return i2.update(ft.Buffer.from(t5, r3));
                  throw new TypeError("Not a string or buffer");
                }),
                (this.digest = function () {
                  var t5 =
                      arguments.length > 0 && arguments[0] !== void 0
                        ? arguments[0]
                        : "binary",
                    r3 = typeof t5 == "string" ? { format: t5 } : t5,
                    n2 = f3.squeeze({
                      buffer: r3.buffer,
                      padding: r3.padding || e2,
                    });
                  return r3.format && r3.format !== "binary"
                    ? n2.toString(r3.format)
                    : n2;
                }),
                (this.reset = function () {
                  return f3.reset(), i2;
                }),
                this
              );
            };
          },
          o2 = i({ allowedSizes: [224, 256, 384, 512], padding: 1 });
        r.Keccak = o2;
        var f2 = i({ allowedSizes: [224, 256, 384, 512], padding: 6 });
        r.SHA3 = f2;
        var u2 = i({ allowedSizes: [128, 256], padding: 31 });
        r.SHAKE = u2;
        var a2 = o2;
        (r.SHA3Hash = a2), (f2.SHA3Hash = a2), (r.default = f2);
      });
      wt = new Array(16);
      bt = Pt([
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10,
        6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0,
        6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
        4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
      ]);
      mt = Pt([
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0,
        13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8,
        12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10,
        14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
      ]);
      Et = Pt([
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11,
        9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14,
        8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6,
        5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
      ]);
      Bt = Pt([
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7,
        12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12,
        13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12,
        5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
      ]);
      At = Lt([0, 1518500249, 1859775393, 2400959708, 2840853838]);
      Ut = Lt([1352829926, 1548603684, 1836072691, 2053994217, 0]);
      Rt = class {
        constructor() {
          (this._block = zt(64)),
            (this._blockSize = 64),
            (this._blockOffset = 0),
            (this._length = [0, 0, 0, 0]),
            (this._finalized = false),
            (this._a = 1732584193),
            (this._b = 4023233417),
            (this._c = 2562383102),
            (this._d = 271733878),
            (this._e = 3285377520);
        }
        update(t2) {
          if (this._finalized) throw new Error("Digest already called");
          const r = this._block;
          let e = 0;
          for (; this._blockOffset + t2.length - e >= this._blockSize; ) {
            for (let n = this._blockOffset; n < this._blockSize; )
              r[n++] = t2[e++];
            this._update(), (this._blockOffset = 0);
          }
          for (; e < t2.length; ) r[this._blockOffset++] = t2[e++];
          for (let r2 = 0, e2 = 8 * t2.length; e2 > 0; ++r2)
            (this._length[r2] += e2),
              (e2 = (this._length[r2] / 4294967296) | 0),
              e2 > 0 && (this._length[r2] -= 4294967296 * e2);
          return this;
        }
        _update() {
          const t2 = wt;
          for (let r2 = 0; r2 < 16; ++r2) t2[r2] = Ct(this._block, 4 * r2);
          let r = 0 | this._a,
            e = 0 | this._b,
            n = 0 | this._c,
            i = 0 | this._d,
            o2 = 0 | this._e,
            f2 = 0 | this._a,
            u2 = 0 | this._b,
            a2 = 0 | this._c,
            s2 = 0 | this._d,
            h2 = 0 | this._e;
          for (let c3 = 0; c3 < 80; c3 += 1) {
            let l2, p2;
            c3 < 16
              ? ((l2 = _t(r, e, n, i, o2, t2[bt[c3]], At[0], Et[c3])),
                (p2 = Ot(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[0], Bt[c3])))
              : c3 < 32
              ? ((l2 = St(r, e, n, i, o2, t2[bt[c3]], At[1], Et[c3])),
                (p2 = kt(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[1], Bt[c3])))
              : c3 < 48
              ? ((l2 = xt(r, e, n, i, o2, t2[bt[c3]], At[2], Et[c3])),
                (p2 = xt(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[2], Bt[c3])))
              : c3 < 64
              ? ((l2 = kt(r, e, n, i, o2, t2[bt[c3]], At[3], Et[c3])),
                (p2 = St(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[3], Bt[c3])))
              : ((l2 = Ot(r, e, n, i, o2, t2[bt[c3]], At[4], Et[c3])),
                (p2 = _t(f2, u2, a2, s2, h2, t2[mt[c3]], Ut[4], Bt[c3]))),
              (r = o2),
              (o2 = i),
              (i = It(n, 10)),
              (n = e),
              (e = l2),
              (f2 = h2),
              (h2 = s2),
              (s2 = It(a2, 10)),
              (a2 = u2),
              (u2 = p2);
          }
          const c2 = (this._b + n + s2) | 0;
          (this._b = (this._c + i + h2) | 0),
            (this._c = (this._d + o2 + f2) | 0),
            (this._d = (this._e + r + u2) | 0),
            (this._e = (this._a + e + a2) | 0),
            (this._a = c2);
        }
        digest() {
          if (this._finalized) throw new Error("Digest already called");
          (this._finalized = true),
            (this._block[this._blockOffset++] = 128),
            this._blockOffset > 56 &&
              (this._block.fill(0, this._blockOffset, 64),
              this._update(),
              (this._blockOffset = 0)),
            this._block.fill(0, this._blockOffset, 56),
            Mt(this._block, this._length[0], 56),
            Mt(this._block, this._length[1], 60),
            this._update();
          const t2 = zt(20);
          Tt(t2, this._a, 0),
            Tt(t2, this._b, 4),
            Tt(t2, this._c, 8),
            Tt(t2, this._d, 12),
            Tt(t2, this._e, 16),
            this._block.fill(0),
            (this._blockOffset = 0);
          for (let t3 = 0; t3 < 4; ++t3) this._length[t3] = 0;
          return t2;
        }
      };
      qt =
        ((Nt = { __proto__: null, RIPEMD160: Rt, default: Rt }) &&
          Nt.default) ||
        Nt;
      jt = l(function (t2, r) {
        function e(t3) {
          return t3 && typeof t3 == "object" && "default" in t3
            ? t3.default
            : t3;
        }
        var n = vt,
          i = e(it),
          o2 = et,
          f2 = e(p),
          u2 = e(ot),
          a2 = qt,
          s2 = k,
          h2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
          c2 = [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
          ],
          l2 = function (t3) {
            for (
              var r2 = new ArrayBuffer((5 * t3.length) / 8),
                e2 = new Uint8Array(r2),
                n2 = 0;
              n2 < t3.length / 8;
              n2++
            ) {
              for (var i2 = [0, 0, 0, 0, 0, 0, 0, 0], o3 = 0; o3 < 8; ++o3)
                i2[o3] = h2.indexOf(t3[8 * n2 + o3]);
              (e2[5 * n2 + 0] = (i2[0] << 3) | (i2[1] >> 2)),
                (e2[5 * n2 + 1] =
                  ((3 & i2[1]) << 6) | (i2[2] << 1) | (i2[3] >> 4)),
                (e2[5 * n2 + 2] = ((15 & i2[3]) << 4) | (i2[4] >> 1)),
                (e2[5 * n2 + 3] =
                  ((1 & i2[4]) << 7) | (i2[5] << 2) | (i2[6] >> 3)),
                (e2[5 * n2 + 4] = ((7 & i2[6]) << 5) | i2[7]);
            }
            return Buffer.from(e2);
          };
        function d2(t3, r2) {
          (this._block = o2.Buffer.alloc(t3)),
            (this._finalSize = r2),
            (this._blockSize = t3),
            (this._len = 0);
        }
        (d2.prototype.update = function (t3, r2) {
          typeof t3 == "string" &&
            (t3 = o2.Buffer.from(t3, (r2 = r2 || "utf8")));
          for (
            var e2 = this._block,
              n2 = this._blockSize,
              i2 = t3.length,
              f3 = this._len,
              u3 = 0;
            u3 < i2;

          ) {
            for (
              var a3 = f3 % n2, s3 = Math.min(i2 - u3, n2 - a3), h3 = 0;
              h3 < s3;
              h3++
            )
              e2[a3 + h3] = t3[u3 + h3];
            (u3 += s3), (f3 += s3) % n2 == 0 && this._update(e2);
          }
          return (this._len += i2), this;
        }),
          (d2.prototype.digest = function (t3) {
            var r2 = this._len % this._blockSize;
            (this._block[r2] = 128),
              this._block.fill(0, r2 + 1),
              r2 >= this._finalSize &&
                (this._update(this._block), this._block.fill(0));
            var e2 = 8 * this._len;
            if (e2 <= 4294967295)
              this._block.writeUInt32BE(e2, this._blockSize - 4);
            else {
              var n2 = (4294967295 & e2) >>> 0;
              this._block.writeUInt32BE(
                (e2 - n2) / 4294967296,
                this._blockSize - 8
              ),
                this._block.writeUInt32BE(n2, this._blockSize - 4);
            }
            this._update(this._block);
            var i2 = this._hash();
            return t3 ? i2.toString(t3) : i2;
          }),
          (d2.prototype._update = function () {
            throw new Error("_update must be implemented by subclass");
          });
        var g2,
          y2,
          v2 = [
            1116352408, 1899447441, 3049323471, 3921009573, 961987163,
            1508970993, 2453635748, 2870763221, 3624381080, 310598401,
            607225278, 1426881987, 1925078388, 2162078206, 2614888103,
            3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983,
            1249150122, 1555081692, 1996064986, 2554220882, 2821834349,
            2952996808, 3210313671, 3336571891, 3584528711, 113926993,
            338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700,
            1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
            3259730800, 3345764771, 3516065817, 3600352804, 4094571909,
            275423344, 430227734, 506948616, 659060556, 883997877, 958139571,
            1322822218, 1537002063, 1747873779, 1955562222, 2024104815,
            2227730452, 2361852424, 2428436474, 2756734187, 3204031479,
            3329325298,
          ],
          w2 = new Array(64);
        function b2() {
          this.init(), (this._w = w2), d2.call(this, 64, 56);
        }
        function m2(t3, r2, e2) {
          return e2 ^ (t3 & (r2 ^ e2));
        }
        function E2(t3, r2, e2) {
          return (t3 & r2) | (e2 & (t3 | r2));
        }
        function B2(t3) {
          return (
            ((t3 >>> 2) | (t3 << 30)) ^
            ((t3 >>> 13) | (t3 << 19)) ^
            ((t3 >>> 22) | (t3 << 10))
          );
        }
        function A2(t3) {
          return (
            ((t3 >>> 6) | (t3 << 26)) ^
            ((t3 >>> 11) | (t3 << 21)) ^
            ((t3 >>> 25) | (t3 << 7))
          );
        }
        function U2(t3) {
          return (
            ((t3 >>> 7) | (t3 << 25)) ^ ((t3 >>> 18) | (t3 << 14)) ^ (t3 >>> 3)
          );
        }
        function I2(t3) {
          return t3.length !== void 0;
        }
        (g2 = b2),
          (y2 = d2) &&
            ((g2.super_ = y2),
            (g2.prototype = Object.create(y2.prototype, {
              constructor: {
                value: g2,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            }))),
          (b2.prototype.init = function () {
            return (
              (this._a = 1779033703),
              (this._b = 3144134277),
              (this._c = 1013904242),
              (this._d = 2773480762),
              (this._e = 1359893119),
              (this._f = 2600822924),
              (this._g = 528734635),
              (this._h = 1541459225),
              this
            );
          }),
          (b2.prototype._update = function (t3) {
            for (
              var r2,
                e2 = this._w,
                n2 = 0 | this._a,
                i2 = 0 | this._b,
                o3 = 0 | this._c,
                f3 = 0 | this._d,
                u3 = 0 | this._e,
                a3 = 0 | this._f,
                s3 = 0 | this._g,
                h3 = 0 | this._h,
                c3 = 0;
              c3 < 16;
              ++c3
            )
              e2[c3] = t3.readInt32BE(4 * c3);
            for (; c3 < 64; ++c3)
              e2[c3] =
                0 |
                (((((r2 = e2[c3 - 2]) >>> 17) | (r2 << 15)) ^
                  ((r2 >>> 19) | (r2 << 13)) ^
                  (r2 >>> 10)) +
                  e2[c3 - 7] +
                  U2(e2[c3 - 15]) +
                  e2[c3 - 16]);
            for (var l3 = 0; l3 < 64; ++l3) {
              var p2 = (h3 + A2(u3) + m2(u3, a3, s3) + v2[l3] + e2[l3]) | 0,
                d3 = (B2(n2) + E2(n2, i2, o3)) | 0;
              (h3 = s3),
                (s3 = a3),
                (a3 = u3),
                (u3 = (f3 + p2) | 0),
                (f3 = o3),
                (o3 = i2),
                (i2 = n2),
                (n2 = (p2 + d3) | 0);
            }
            (this._a = (n2 + this._a) | 0),
              (this._b = (i2 + this._b) | 0),
              (this._c = (o3 + this._c) | 0),
              (this._d = (f3 + this._d) | 0),
              (this._e = (u3 + this._e) | 0),
              (this._f = (a3 + this._f) | 0),
              (this._g = (s3 + this._g) | 0),
              (this._h = (h3 + this._h) | 0);
          }),
          (b2.prototype._hash = function () {
            var t3 = o2.Buffer.allocUnsafe(32);
            return (
              t3.writeInt32BE(this._a, 0),
              t3.writeInt32BE(this._b, 4),
              t3.writeInt32BE(this._c, 8),
              t3.writeInt32BE(this._d, 12),
              t3.writeInt32BE(this._e, 16),
              t3.writeInt32BE(this._f, 20),
              t3.writeInt32BE(this._g, 24),
              t3.writeInt32BE(this._h, 28),
              t3
            );
          });
        var _2 = new ((function () {
            function t3(t4) {
              (this.sha256 = t4.sha256),
                (this.alphabet = t4.alphabet),
                (this.codec = i(this.alphabet)),
                (this.base = this.alphabet.length);
            }
            var r2 = t3.prototype;
            return (
              (r2.encodeChecked = function (t4) {
                var r3 = this.sha256(this.sha256(t4)).slice(0, 4);
                return this.encodeRaw(
                  Buffer.from(
                    (function () {
                      for (
                        var t5 = [],
                          r4 = arguments.length,
                          e2 = new Array(r4),
                          n2 = 0;
                        n2 < r4;
                        n2++
                      )
                        e2[n2] = arguments[n2];
                      return (
                        e2.forEach(function (r5) {
                          if (I2(r5))
                            for (var e3 = 0; e3 < r5.length; e3++)
                              t5.push(r5[e3]);
                          else t5.push(r5);
                        }),
                        t5
                      );
                    })(t4, r3)
                  )
                );
              }),
              (r2.encodeRaw = function (t4) {
                return this.codec.encode(t4);
              }),
              (r2.decodeChecked = function (t4) {
                var r3 = this.decodeRaw(t4);
                if (r3.length < 5)
                  throw new Error(
                    "invalid_input_size: decoded data must have length >= 5"
                  );
                if (!this.verifyCheckSum(r3))
                  throw new Error("checksum_invalid");
                return r3.slice(0, -4);
              }),
              (r2.decodeRaw = function (t4) {
                return this.codec.decode(t4);
              }),
              (r2.verifyCheckSum = function (t4) {
                return (function (t5, r3) {
                  if (t5.length !== r3.length) return false;
                  for (var e2 = 0; e2 < t5.length; e2++)
                    if (t5[e2] !== r3[e2]) return false;
                  return true;
                })(
                  this.sha256(this.sha256(t4.slice(0, -4))).slice(0, 4),
                  t4.slice(-4)
                );
              }),
              t3
            );
          })())({
            sha256: function (t3) {
              return new b2().update(Buffer.from(t3)).digest();
            },
            alphabet:
              "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz",
          }),
          S2 = function (t3) {
            return t3.slice(0, 2) === "0x" ? t3.slice(2) : t3;
          },
          x2 = function (t3, r2) {
            if ((r2 === void 0 && (r2 = null), typeof t3 != "string"))
              throw new Error(
                "stripHexPrefix param must be type 'string', is currently type " +
                  typeof t3 +
                  "."
              );
            for (
              var e2,
                i2 = S2(t3).toLowerCase(),
                o3 = ((e2 = (r2 != null ? r2.toString() + "0x" : "") + i2),
                new n.Keccak(256).update(e2).digest()).toString("hex"),
                f3 = "0x",
                u3 = 0;
              u3 < i2.length;
              u3++
            )
              f3 += parseInt(o3[u3], 16) >= 8 ? i2[u3].toUpperCase() : i2[u3];
            return f3;
          },
          O2 = function (t3, r2) {
            if (!t3) throw r2;
          },
          C2 = function (t3, r2) {
            if (!Buffer.isBuffer(t3)) throw r2;
          },
          M2 = f2.one,
          T2 = f2.zero,
          L2 = f2(3);
        function P2(t3, r2) {
          return t3.and(M2.shiftLeft(r2)).notEquals(T2);
        }
        function z2(t3) {
          return f2.fromArray(Array.prototype.slice.call(t3, 0), 256);
        }
        function R2(t3, r2) {
          var e2 = t3.toArray(256).value,
            n2 = r2 ? Math.max(r2 - e2.length, 0) : 0;
          return Buffer.from([].concat(Array(n2).fill(0), e2));
        }
        function N3(t3, r2, e2, n2) {
          O2(n2 !== void 0, "Missing Z coordinate"),
            (this.curve = t3),
            (this.x = r2),
            (this.y = e2),
            (this.z = n2),
            (this._zInv = null),
            (this.compressed = true);
        }
        Object.defineProperty(N3.prototype, "zInv", {
          get: function () {
            return (
              this._zInv === null && (this._zInv = this.z.modInv(this.curve.p)),
              this._zInv
            );
          },
        }),
          Object.defineProperty(N3.prototype, "affineX", {
            get: function () {
              return this.x.multiply(this.zInv).mod(this.curve.p);
            },
          }),
          Object.defineProperty(N3.prototype, "affineY", {
            get: function () {
              return this.y.multiply(this.zInv).mod(this.curve.p);
            },
          }),
          (N3.fromAffine = function (t3, r2, e2) {
            return new N3(t3, r2, e2, M2);
          }),
          (N3.prototype.equals = function (t3) {
            return (
              t3 === this ||
              (this.curve.isInfinity(this)
                ? this.curve.isInfinity(t3)
                : this.curve.isInfinity(t3)
                ? this.curve.isInfinity(this)
                : t3.y
                    .multiply(this.z)
                    .subtract(this.y.multiply(t3.z))
                    .mod(this.curve.p)
                    .compare(T2) === 0 &&
                  t3.x
                    .multiply(this.z)
                    .subtract(this.x.multiply(t3.z))
                    .mod(this.curve.p)
                    .compare(T2) === 0)
            );
          }),
          (N3.prototype.negate = function () {
            var t3 = this.curve.p.subtract(this.y);
            return new N3(this.curve, this.x, t3, this.z);
          }),
          (N3.prototype.add = function (t3) {
            if (this.curve.isInfinity(this)) return t3;
            if (this.curve.isInfinity(t3)) return this;
            var r2 = this.x,
              e2 = this.y,
              n2 = t3.x,
              i2 = t3.y
                .multiply(this.z)
                .subtract(e2.multiply(t3.z))
                .mod(this.curve.p),
              o3 = n2
                .multiply(this.z)
                .subtract(r2.multiply(t3.z))
                .mod(this.curve.p);
            if (o3.compare(T2) === 0)
              return i2.compare(T2) === 0 ? this.twice() : this.curve.infinity;
            var f3 = o3.square(),
              u3 = f3.multiply(o3),
              a3 = r2.multiply(f3),
              s3 = i2.square().multiply(this.z),
              h3 = s3
                .subtract(a3.shiftLeft(1))
                .multiply(t3.z)
                .subtract(u3)
                .multiply(o3)
                .mod(this.curve.p),
              c3 = a3
                .multiply(L2)
                .multiply(i2)
                .subtract(e2.multiply(u3))
                .subtract(s3.multiply(i2))
                .multiply(t3.z)
                .add(i2.multiply(u3))
                .mod(this.curve.p),
              l3 = u3.multiply(this.z).multiply(t3.z).mod(this.curve.p);
            return new N3(this.curve, h3, c3, l3);
          }),
          (N3.prototype.twice = function () {
            if (this.curve.isInfinity(this)) return this;
            if (this.y.compare(T2) === 0) return this.curve.infinity;
            var t3 = this.x,
              r2 = this.y,
              e2 = r2.multiply(this.z).mod(this.curve.p),
              n2 = e2.multiply(r2).mod(this.curve.p),
              i2 = this.curve.a,
              o3 = t3.square().multiply(L2);
            i2.compare(T2) !== 0 && (o3 = o3.add(this.z.square().multiply(i2)));
            var f3 = (o3 = o3.mod(this.curve.p))
                .square()
                .subtract(t3.shiftLeft(3).multiply(n2))
                .shiftLeft(1)
                .multiply(e2)
                .mod(this.curve.p),
              u3 = o3
                .multiply(L2)
                .multiply(t3)
                .subtract(n2.shiftLeft(1))
                .shiftLeft(2)
                .multiply(n2)
                .subtract(o3.pow(3))
                .mod(this.curve.p),
              a3 = e2.pow(3).shiftLeft(3).mod(this.curve.p);
            return new N3(this.curve, f3, u3, a3);
          }),
          (N3.prototype.multiply = function (t3) {
            if (this.curve.isInfinity(this)) return this;
            if (t3.compare(T2) === 0) return this.curve.infinity;
            for (
              var r2 = t3,
                e2 = r2.multiply(L2),
                n2 = this.negate(),
                i2 = this,
                o3 = e2.bitLength() - 2;
              o3 > 0;
              --o3
            ) {
              var f3 = P2(e2, o3),
                u3 = P2(r2, o3);
              (i2 = i2.twice()), f3 !== u3 && (i2 = i2.add(f3 ? this : n2));
            }
            return i2;
          }),
          (N3.prototype.multiplyTwo = function (t3, r2, e2) {
            for (
              var n2 = Math.max(t3.bitLength(), e2.bitLength()) - 1,
                i2 = this.curve.infinity,
                o3 = this.add(r2);
              n2 >= 0;

            ) {
              var f3 = P2(t3, n2),
                u3 = P2(e2, n2);
              (i2 = i2.twice()),
                f3 ? (i2 = i2.add(u3 ? o3 : this)) : u3 && (i2 = i2.add(r2)),
                --n2;
            }
            return i2;
          }),
          (N3.prototype.getEncoded = function (t3) {
            if (
              (t3 == null && (t3 = this.compressed),
              this.curve.isInfinity(this))
            )
              return new Buffer("00", "hex");
            var r2,
              e2 = this.affineX,
              n2 = this.affineY,
              i2 = this.curve.pLength;
            return (
              t3
                ? (r2 = new Buffer(1 + i2)).writeUInt8(n2.isEven() ? 2 : 3, 0)
                : ((r2 = new Buffer(1 + i2 + i2)).writeUInt8(4, 0),
                  R2(n2, i2).copy(r2, 1 + i2)),
              R2(e2, i2).copy(r2, 1),
              r2
            );
          }),
          (N3.decodeFrom = function (t3, r2) {
            var e2,
              n2 = r2.readUInt8(0),
              i2 = n2 !== 4,
              o3 = Math.floor((t3.p.bitLength() + 7) / 8),
              f3 = z2(r2.slice(1, 1 + o3));
            if (i2)
              O2(r2.length === o3 + 1, "Invalid sequence length"),
                O2(n2 === 2 || n2 === 3, "Invalid sequence tag"),
                (e2 = t3.pointFromX(n2 === 3, f3));
            else {
              O2(r2.length === 1 + o3 + o3, "Invalid sequence length");
              var u3 = z2(r2.slice(1 + o3));
              e2 = N3.fromAffine(t3, f3, u3);
            }
            return (e2.compressed = i2), e2;
          }),
          (N3.prototype.toString = function () {
            return this.curve.isInfinity(this)
              ? "(INFINITY)"
              : "(" +
                  this.affineX.toString() +
                  "," +
                  this.affineY.toString() +
                  ")";
          });
        var q2 = f2.zero,
          j2 = f2.one;
        function D2(t3, r2, e2, n2, i2, o3, f3) {
          (this.p = t3),
            (this.a = r2),
            (this.b = e2),
            (this.G = N3.fromAffine(this, n2, i2)),
            (this.n = o3),
            (this.h = f3),
            (this.infinity = new N3(this, null, null, q2)),
            (this.pOverFour = t3.add(j2).shiftRight(2)),
            (this.pLength = Math.floor((this.p.bitLength() + 7) / 8));
        }
        (D2.prototype.pointFromX = function (t3, r2) {
          var e2 = r2
              .pow(3)
              .add(this.a.multiply(r2))
              .add(this.b)
              .mod(this.p)
              .modPow(this.pOverFour, this.p),
            n2 = e2;
          return (
            e2.isEven() ^ !t3 && (n2 = this.p.subtract(n2)),
            N3.fromAffine(this, r2, n2)
          );
        }),
          (D2.prototype.isInfinity = function (t3) {
            return (
              t3 === this.infinity ||
              (t3.z.compare(q2) === 0 && t3.y.compare(q2) !== 0)
            );
          }),
          (D2.prototype.isOnCurve = function (t3) {
            if (this.isInfinity(t3)) return true;
            var r2 = t3.affineX,
              e2 = t3.affineY,
              n2 = this.a,
              i2 = this.b,
              o3 = this.p;
            if (r2.compare(q2) < 0 || r2.compareTo(o3) >= 0) return false;
            if (e2.compare(q2) < 0 || e2.compareTo(o3) >= 0) return false;
            var f3 = e2.square().mod(o3),
              u3 = r2.pow(3).add(n2.multiply(r2)).add(i2).mod(o3);
            return f3.equals(u3);
          }),
          (D2.prototype.validate = function (t3) {
            O2(!this.isInfinity(t3), "Point is at infinity"),
              O2(this.isOnCurve(t3), "Point is not on the curve");
            var r2 = t3.multiply(this.n);
            return (
              O2(this.isInfinity(r2), "Point is not a scalar multiple of G"),
              true
            );
          });
        var H = {
          p: "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
          a: "00",
          b: "07",
          n: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
          h: "01",
          Gx: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          Gy: "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        };
        function F(t3, r2) {
          return new n.SHA3(256).update(t3).digest(r2);
        }
        function Z(t3) {
          return Buffer.from(new a2.RIPEMD160().update(t3).digest());
        }
        function K(t3) {
          var r2 =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : null;
          if ((C2(t3, "expecting keyBuffer<Buffer>"), r2 === "sha256x2")) {
            var e2 = F(F(t3)).slice(0, 4);
            return u2.encode(Buffer.concat([t3, e2]));
          }
          var n2 = [t3];
          r2 && n2.push(Buffer.from(r2));
          var i2 = Z(Buffer.concat(n2)).slice(0, 4);
          return u2.encode(Buffer.concat([t3, i2]));
        }
        function X(t3) {
          var r2 =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : null;
          O2(t3, "private key expected");
          var e2,
            n2 = new Buffer(u2.decode(t3)),
            i2 = n2.slice(-4),
            o3 = n2.slice(0, -4);
          if (r2 === "sha256x2") e2 = F(F(o3)).slice(0, 4);
          else {
            var f3 = [o3];
            r2 && f3.push(Buffer.from(r2)),
              (e2 = Z(Buffer.concat(f3)).slice(0, 4));
          }
          if (i2.toString("hex") !== e2.toString("hex"))
            throw new Error(
              "Invalid checksum, " +
                "".concat(i2.toString("hex"), " != ").concat(e2.toString("hex"))
            );
          return o3;
        }
        var V = (function (t3) {
          var r2 = H;
          if (!r2) return null;
          var e2 = f2(r2.p, 16),
            n2 = f2(r2.a, 16),
            i2 = f2(r2.b, 16),
            o3 = f2(r2.n, 16),
            u3 = f2(r2.h, 16);
          return new D2(e2, n2, i2, f2(r2.Gx, 16), f2(r2.Gy, 16), o3, u3);
        })();
        function Y(t3) {
          var r2 =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : "EOS";
          if (typeof t3 == "string") return Y.fromString(t3, r2);
          if (Buffer.isBuffer(t3)) return Y.fromBuffer(t3);
          if (typeof t3 == "object" && t3.Q) return Y(t3.Q);
          function e2() {
            var r3 =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : t3.compressed;
            return t3.getEncoded(r3);
          }
          function n2() {
            var t4 =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : "EOS";
            return t4 + K(e2());
          }
          function i2() {
            return e2().toString("hex");
          }
          return { Q: t3, toString: n2, toBuffer: e2, toHex: i2 };
        }
        (Y.isValid = function (t3) {
          var r2 =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : "EOS";
          try {
            return Y(t3, r2), true;
          } catch (t4) {
            return false;
          }
        }),
          (Y.fromBuffer = function (t3) {
            return Y(N3.decodeFrom(V, t3));
          }),
          (Y.fromString = function (t3) {
            var r2 =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : "EOS";
            try {
              return Y.fromStringOrThrow(t3, r2);
            } catch (t4) {
              return null;
            }
          }),
          (Y.fromStringOrThrow = function (t3) {
            var r2 =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : "EOS",
              e2 = t3.match(/^PUB_([A-Za-z0-9]+)_([A-Za-z0-9]+)$/);
            if (e2 === null) {
              var n2 = new RegExp("^" + r2);
              return (
                n2.test(t3) && (t3 = t3.substring(r2.length)),
                Y.fromBuffer(X(t3))
              );
            }
            var i2 = e2[1],
              o3 = e2[2];
            return Y.fromBuffer(X(o3, i2));
          }),
          (Y.fromHex = function (t3) {
            return Y.fromBuffer(new Buffer(t3, "hex"));
          }),
          (Y.fromStringHex = function (t3) {
            return Y.fromString(new Buffer(t3, "hex"));
          });
        var W = i("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),
          J2 = W.encode,
          G2 = W.decode,
          Q2 = function (t3) {
            return t3 === void 0;
          },
          $2 = {
            ed25519PublicKey: 48,
            ed25519SecretSeed: 144,
            preAuthTx: 152,
            sha256Hash: 184,
          },
          tt2 = function (t3) {
            var r2 = Buffer.alloc(2);
            return (
              r2.writeUInt16LE(
                (function (t4, r3) {
                  Buffer.isBuffer(t4) || (t4 = new Buffer());
                  for (var e2 = 0, n2 = 0; n2 < t4.length; n2++) {
                    var i2 = (e2 >>> 8) & 255;
                    (i2 ^= 255 & t4[n2]),
                      (e2 = (e2 << 8) & 65535),
                      (e2 ^= i2 ^= i2 >>> 4),
                      (e2 ^= i2 = (i2 << 5) & 65535),
                      (e2 ^= i2 = (i2 << 7) & 65535);
                  }
                  return e2;
                })(t3),
                0
              ),
              r2
            );
          };
        function rt2(t3) {
          return (rt2 = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (t4) {
                return t4.__proto__ || Object.getPrototypeOf(t4);
              })(t3);
        }
        function nt2(t3, r2) {
          return (nt2 =
            Object.setPrototypeOf ||
            function (t4, r3) {
              return (t4.__proto__ = r3), t4;
            })(t3, r2);
        }
        function ft2() {
          if (typeof Reflect == "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy == "function") return true;
          try {
            return (
              Date.prototype.toString.call(
                Reflect.construct(Date, [], function () {})
              ),
              true
            );
          } catch (t3) {
            return false;
          }
        }
        function ut2(t3, r2, e2) {
          return (ut2 = ft2()
            ? Reflect.construct
            : function (t4, r3, e3) {
                var n2 = [null];
                n2.push.apply(n2, r3);
                var i2 = new (Function.bind.apply(t4, n2))();
                return e3 && nt2(i2, e3.prototype), i2;
              }).apply(null, arguments);
        }
        function at2(t3) {
          var r2 =
            typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
          return (at2 = function (t4) {
            if (
              t4 === null ||
              Function.toString.call(t4).indexOf("[native code]") === -1
            )
              return t4;
            if (typeof t4 != "function")
              throw new TypeError(
                "Super expression must either be null or a function"
              );
            if (r2 !== void 0) {
              if (r2.has(t4)) return r2.get(t4);
              r2.set(t4, e2);
            }
            function e2() {
              return ut2(t4, arguments, rt2(this).constructor);
            }
            return (
              (e2.prototype = Object.create(t4.prototype, {
                constructor: {
                  value: e2,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              })),
              nt2(e2, t4)
            );
          })(t3);
        }
        var st2 = [0, 1, 2, 42, 43, 68, 69],
          ht2 = (function (t3) {
            for (
              var r2 = new Uint8Array(t3.length), e2 = 0;
              e2 < t3.length;
              e2++
            )
              r2[e2] = t3.charCodeAt(e2);
            return r2;
          })("SS58PRE"),
          ct2 = (function (t3) {
            var r2, e2;
            function n2() {
              return t3.apply(this, arguments) || this;
            }
            return (
              (e2 = t3),
              ((r2 = n2).prototype = Object.create(e2.prototype)),
              (r2.prototype.constructor = r2),
              (r2.__proto__ = e2),
              (n2.prototype.toJSON = function () {
                return { _type: "AccountIndex", data: this + 0 };
              }),
              n2
            );
          })(at2(Number));
        function lt2(t3, r2) {
          t3.length || (t3 = [t3]), r2.length || (r2 = [r2]);
          var e2 = new Uint8Array(t3.length + r2.length);
          return e2.set(t3), e2.set(r2, t3.length), e2;
        }
        function pt2(t3) {
          var r2 = new Error();
          (this.name = r2.name = "ValidationError"),
            (this.message = r2.message = t3),
            (this.stack = r2.stack);
        }
        function dt2(t3, r2) {
          if ((r2 == null && (r2 = "Assertion failed."), !t3))
            throw new pt2(r2);
        }
        pt2.prototype = Object.create(Error.prototype);
        var gt2 = (function () {
            function t3(t4, r2) {
              (this.hi = 0 | t4), (this.lo = 0 | r2);
            }
            return (
              (t3.prototype.ushrn32 = function (t4) {
                var r2 = this.lo;
                return (
                  (t4 &= 63) == 0 ||
                    (t4 < 32
                      ? ((r2 >>>= t4), (r2 |= this.hi << (32 - t4)))
                      : (r2 = this.hi >>> (t4 - 32))),
                  r2
                );
              }),
              t3
            );
          })(),
          yt2 = Buffer.allocUnsafe(105),
          wt2 = "qpzry9x8gf2tvdw0s3jn54khce6mua7l",
          bt2 = [
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 10,
            17, 21, 20, 26, 30, 7, 5, -1, -1, -1, -1, -1, -1, -1, 29, -1, 24,
            13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28,
            12, 14, 6, 4, 2, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8,
            23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4,
            2, -1, -1, -1, -1, -1,
          ],
          mt2 = new gt2(7, 4294967295),
          Et2 = [
            new gt2(152, 4072443489),
            new gt2(121, 3077413346),
            new gt2(243, 1046459332),
            new gt2(174, 783016616),
            new gt2(30, 1329849456),
          ];
        function Bt2(t3, r2) {
          var e2 = t3,
            n2 = e2.hi >>> 3;
          (e2.hi &= mt2.hi),
            (e2.lo &= mt2.lo),
            (e2.hi <<= 5),
            (e2.hi |= e2.lo >>> 27),
            (e2.lo <<= 5);
          for (var i2 = 0; i2 < Et2.length; i2++)
            (n2 >>> i2) & 1 && ((e2.hi ^= Et2[i2].hi), (e2.lo ^= Et2[i2].lo));
          return (e2.lo ^= r2), e2;
        }
        function At2(t3, r2, e2, n2, i2, o3, f3) {
          dt2(Buffer.isBuffer(t3)),
            dt2(r2 >>> 0 === r2),
            dt2(Buffer.isBuffer(e2)),
            dt2(n2 >>> 0 === n2),
            dt2((255 & i2) === i2),
            dt2((255 & o3) === o3),
            dt2(typeof f3 == "boolean");
          for (var u3 = (1 << o3) - 1, a3 = 0, s3 = 0; r2 < t3.length; r2++) {
            var h3 = t3[r2];
            if (h3 >>> i2 != 0) throw new Error("Invalid bits.");
            for (a3 = (a3 << i2) | h3, s3 += i2; s3 >= o3; )
              e2[n2++] = (a3 >>> (s3 -= o3)) & u3;
          }
          if (f3) s3 && (e2[n2++] = (a3 << (o3 - s3)) & u3);
          else if (s3 >= i2 || (a3 << (o3 - s3)) & u3)
            throw new Error("Invalid bits.");
          return dt2(n2 <= e2.length), e2.slice(0, n2);
        }
        var Ut2 = (function (t3) {
            function r2(r3) {
              var e2 = r3.slice(0, -4),
                n2 = r3.slice(-4),
                i2 = t3(e2);
              if (
                !(
                  (n2[0] ^ i2[0]) |
                  (n2[1] ^ i2[1]) |
                  (n2[2] ^ i2[2]) |
                  (n2[3] ^ i2[3])
                )
              )
                return e2;
            }
            return {
              bs58Encode: function (r3) {
                var e2 = t3(r3);
                return u2.encode(Buffer.concat([r3, e2], r3.length + 4));
              },
              bs58Decode: function (t4) {
                var e2 = r2(u2.decode(t4));
                if (!e2) throw new Error("Invalid checksum");
                return e2;
              },
              decodeUnsafe: function (t4) {
                var e2 = u2.decodeUnsafe(t4);
                if (e2) return r2(e2);
              },
            };
          })(function (t3) {
            var r2 = new b2().update(t3).digest();
            return new b2().update(r2).digest();
          }),
          It2 = Ut2.bs58Decode,
          _t2 = Ut2.bs58Encode;
        (r.b32decode = l2),
          (r.b32encode = function (t3) {
            var r2 = [],
              e2 = Math.floor(t3.length / 5),
              n2 = t3.length % 5;
            if (n2 != 0) {
              for (var i2 = 0; i2 < 5 - n2; i2++) t3 += "\0";
              e2 += 1;
            }
            for (var o3 = 0; o3 < e2; o3++)
              r2.push(h2.charAt(t3.charCodeAt(5 * o3) >> 3)),
                r2.push(
                  h2.charAt(
                    ((7 & t3.charCodeAt(5 * o3)) << 2) |
                      (t3.charCodeAt(5 * o3 + 1) >> 6)
                  )
                ),
                r2.push(h2.charAt((63 & t3.charCodeAt(5 * o3 + 1)) >> 1)),
                r2.push(
                  h2.charAt(
                    ((1 & t3.charCodeAt(5 * o3 + 1)) << 4) |
                      (t3.charCodeAt(5 * o3 + 2) >> 4)
                  )
                ),
                r2.push(
                  h2.charAt(
                    ((15 & t3.charCodeAt(5 * o3 + 2)) << 1) |
                      (t3.charCodeAt(5 * o3 + 3) >> 7)
                  )
                ),
                r2.push(h2.charAt((127 & t3.charCodeAt(5 * o3 + 3)) >> 2)),
                r2.push(
                  h2.charAt(
                    ((3 & t3.charCodeAt(5 * o3 + 3)) << 3) |
                      (t3.charCodeAt(5 * o3 + 4) >> 5)
                  )
                ),
                r2.push(h2.charAt(31 & t3.charCodeAt(5 * o3 + 4)));
            var f3 = 0;
            n2 == 1
              ? (f3 = 6)
              : n2 == 2
              ? (f3 = 4)
              : n2 == 3
              ? (f3 = 3)
              : n2 == 4 && (f3 = 1);
            for (var u3 = 0; u3 < f3; u3++) r2.pop();
            for (var a3 = 0; a3 < f3; a3++) r2.push("=");
            return r2.join("");
          }),
          (r.bs58Decode = It2),
          (r.bs58Encode = _t2),
          (r.calculateChecksum = tt2),
          (r.cashaddrDecode = function (t3, r2) {
            r2 === void 0 && (r2 = "bitcoincash"),
              dt2(typeof t3 == "string"),
              dt2(typeof r2 == "string");
            var e2 = (function (t4, r3) {
                if (
                  (dt2(typeof t4 == "string"), t4.length < 8 || t4.length > 196)
                )
                  throw new Error("Invalid cashaddr data length.");
                for (
                  var e3 = false, n3 = false, i3 = false, o4 = 0, f4 = 0;
                  f4 < t4.length;
                  f4++
                ) {
                  var u4 = t4.charCodeAt(f4);
                  if (u4 >= 97 && u4 <= 122) e3 = true;
                  else if (u4 >= 65 && u4 <= 90) n3 = true;
                  else if (u4 >= 48 && u4 <= 57) i3 = true;
                  else {
                    if (u4 !== 58)
                      throw new Error("Invalid cashaddr character.");
                    if (i3 || f4 === 0 || f4 > 83)
                      throw new Error("Invalid cashaddr prefix.");
                    if (o4 !== 0)
                      throw new Error("Invalid cashaddr separators.");
                    o4 = f4;
                  }
                }
                if (n3 && e3) throw new Error("Invalid cashaddr casing.");
                var a4,
                  s4 = new gt2(0, 1);
                o4 === 0
                  ? (a4 = r3.toLowerCase())
                  : ((a4 = t4.substring(0, o4).toLowerCase()), (o4 += 1));
                for (var h3 = 0; h3 < a4.length; h3++)
                  Bt2(s4, 31 & (32 | a4.charCodeAt(h3)));
                Bt2(s4, 0);
                var c3 = t4.length - o4;
                if (c3 <= 8 || c3 > 112)
                  throw new Error("Invalid cashaddr data length.");
                for (
                  var l3 = Buffer.allocUnsafe(c3), p2 = o4;
                  p2 < t4.length;
                  p2++
                ) {
                  var d3 = t4.charCodeAt(p2),
                    g3 = 65408 & d3 ? -1 : bt2[d3];
                  if (g3 === -1) throw new Error("Invalid cashaddr character.");
                  Bt2(s4, g3), p2 + 8 < t4.length && (l3[p2 - o4] = g3);
                }
                if (s4.hi !== 0 || s4.lo !== 1 || a4 !== r3)
                  throw new Error("Invalid cashaddr checksum.");
                return [a4, l3.slice(0, -8)];
              })(t3, r2),
              n2 = e2[0],
              i2 = e2[1],
              o3 = (5 * i2.length) & 7;
            if (o3 >= 5) throw new Error("Invalid padding in data.");
            if (i2[i2.length - 1] & ((1 << o3) - 1))
              throw new Error("Non zero padding.");
            var f3 = At2(i2, 0, i2, 0, 5, 8, false),
              u3 = (f3[0] >>> 3) & 31,
              a3 = f3.slice(1),
              s3 = 20 + 4 * (3 & f3[0]);
            if ((4 & f3[0] && (s3 *= 2), s3 !== a3.length))
              throw new Error("Invalid cashaddr data length.");
            return { prefix: n2, type: u3, hash: a3 };
          }),
          (r.cashaddrEncode = function (t3, r2, e2) {
            if (
              (dt2(typeof t3 == "string"),
              dt2((15 & r2) === r2, "Invalid cashaddr type."),
              dt2(Buffer.isBuffer(e2)),
              t3.length === 0 || t3.length > 83)
            )
              throw new Error("Invalid cashaddr prefix.");
            var n2 = (function (t4) {
                switch ((dt2(t4 >>> 0 === t4), t4)) {
                  case 20:
                    return 0;
                  case 24:
                    return 1;
                  case 28:
                    return 2;
                  case 32:
                    return 3;
                  case 40:
                    return 4;
                  case 48:
                    return 5;
                  case 56:
                    return 6;
                  case 64:
                    return 7;
                  default:
                    throw new Error("Non standard length.");
                }
              })(e2.length),
              i2 = Buffer.allocUnsafe(e2.length + 1);
            return (
              (i2[0] = (r2 << 3) | n2),
              e2.copy(i2, 1),
              (function (t4, r3) {
                dt2(typeof t4 == "string"), dt2(Buffer.isBuffer(r3));
                for (
                  var e3 = new gt2(0, 1),
                    n3 = "",
                    i3 = false,
                    o3 = false,
                    f3 = 0;
                  f3 < t4.length;
                  f3++
                ) {
                  var u3 = t4.charCodeAt(f3);
                  if (65280 & u3 || u3 >>> 5 == 0)
                    throw new Error("Invalid cashaddr character.");
                  if (u3 >= 97 && u3 <= 122) o3 = true;
                  else if (u3 >= 65 && u3 <= 90)
                    (i3 = true), (u3 = u3 - 65 + 97);
                  else if (u3 >= 48 && u3 <= 57)
                    throw new Error("Invalid cashaddr prefix.");
                  Bt2(e3, 31 & u3), (n3 += String.fromCharCode(u3));
                }
                if (o3 && i3) throw new Error("Invalid cashaddr prefix.");
                Bt2(e3, 0), (n3 += ":");
                for (var a3 = 0; a3 < r3.length; a3++) {
                  var s3 = r3[a3];
                  if (s3 >>> 5 != 0) throw new Error("Invalid cashaddr value.");
                  Bt2(e3, s3), (n3 += wt2[s3]);
                }
                for (var h3 = 0; h3 < 8; h3++) Bt2(e3, 0);
                e3.lo ^= 1;
                for (var c3 = 0; c3 < 8; c3++) {
                  var l3 = 31 & e3.ushrn32(5 * (7 - c3));
                  n3 += wt2[l3];
                }
                return n3;
              })(t3, At2(i2, 0, yt2, 0, 8, 5, true))
            );
          }),
          (r.codec = _2),
          (r.decodeCheck = function (t3, r2) {
            if (typeof r2 != "string")
              throw new TypeError("encoded argument must be of type String");
            var e2 = G2(r2),
              n2 = e2[0],
              i2 = e2.slice(0, -2),
              o3 = i2.slice(1),
              f3 = e2.slice(-2);
            if (r2 !== J2(e2)) throw new Error("invalid encoded string");
            var u3 = $2[t3];
            if (Q2(u3))
              throw new Error(
                t3 +
                  ' is not a valid version byte name.  expected one of "accountId" or "seed"'
              );
            if (n2 !== u3)
              throw new Error(
                "invalid version byte. expected " + u3 + ", got " + n2
              );
            if (
              !(function (t4, r3) {
                if (t4.length !== r3.length) return false;
                if (t4.length === 0) return true;
                for (var e3 = 0; e3 < t4.length; e3 += 1)
                  if (t4[e3] !== r3[e3]) return false;
                return true;
              })(tt2(i2), f3)
            )
              throw new Error("invalid checksum");
            return Buffer.from(o3);
          }),
          (r.encodeCheck = function (t3, r2) {
            if (r2 === null || Q2(r2))
              throw new Error("cannot encode null data");
            var e2 = $2[t3];
            if (Q2(e2))
              throw new Error(
                t3 +
                  ' is not a valid version byte name.  expected one of "ed25519PublicKey", "ed25519SecretSeed", "preAuthTx", "sha256Hash"'
              );
            r2 = Buffer.from(r2);
            var n2 = Buffer.from([e2]),
              i2 = Buffer.concat([n2, r2]),
              o3 = tt2(i2),
              f3 = Buffer.concat([i2, o3]);
            return J2(f3);
          }),
          (r.eosPublicKey = Y),
          (r.hex2a = function (t3) {
            for (
              var r2 = t3.toString(), e2 = "", n2 = 0;
              n2 < r2.length;
              n2 += 2
            )
              e2 += String.fromCharCode(parseInt(r2.substr(n2, 2), 16));
            return e2;
          }),
          (r.isValid = function (t3) {
            var r2 = t3.toString().toUpperCase().replace(/-/g, "");
            if (!r2 || r2.length !== 40) return false;
            var e2,
              i2 = (function (t4) {
                for (var r3 = "", e3 = 0; e3 < t4.length; e3++) {
                  var n2 = Math.round(t4[e3]).toString(16);
                  n2.length === 1 && (n2 = "0" + n2), (r3 += n2);
                }
                return r3;
              })(l2(r2));
            return (
              (e2 = Buffer.from(i2.slice(0, 42), "hex")),
              new n.Keccak(256)
                .update(e2)
                .digest("hex")
                .toString()
                .substr(0, 8) === i2.slice(42)
            );
          }),
          (r.isValidChecksumAddress = function (t3, r2) {
            return (
              (function (t4) {
                return /^0x[0-9a-fA-F]{40}$/.test(t4);
              })(t3) && x2(t3, r2) === t3
            );
          }),
          (r.ss58Decode = function (t3, r2) {
            var e2;
            r2 === void 0 && (r2 = 0);
            try {
              e2 = u2.decode(t3);
            } catch (t4) {
              return null;
            }
            if (st2.indexOf(e2[0]) === -1) return null;
            if (e2.length < 3) return null;
            var n2,
              i2 =
                e2.length <= 3
                  ? 1
                  : e2.length <= 5
                  ? 2
                  : e2.length <= 9
                  ? 4
                  : e2.length <= 17
                  ? 8
                  : 32,
              o3 = e2.length - 1 - i2,
              f3 = e2.slice(1, 1 + i2);
            e2.slice(1 + e2.length), i2 === 32 && (n2 = f3);
            var a3 =
              i2 < 32
                ? new ct2(
                    (function (t4) {
                      var r3 = 0,
                        e3 = 1;
                      return (
                        t4.forEach(function (t5) {
                          (r3 += t5 * e3), (e3 *= 256);
                        }),
                        r3
                      );
                    })(f3)
                  )
                : new Buffer.from(f3);
            if (e2[0] % 1 && !n2 && !r2) return null;
            for (
              var h3 = s2.blake2b(
                  lt2(ht2, e2[0] % 1 ? n2 || r2(a3) : e2.slice(0, 1 + i2))
                ),
                c3 = 0;
              c3 < o3;
              ++c3
            )
              if (h3[c3] !== e2[1 + i2 + c3]) return null;
            return a3;
          }),
          (r.ss58Encode = function (t3, r2, e2, n2, i2) {
            var o3;
            if (
              (r2 === void 0 && (r2 = 42),
              e2 === void 0 && (e2 = null),
              n2 === void 0 && (n2 = null),
              st2.indexOf(r2) === -1)
            )
              throw new Error("Unknown ss58 address type", r2);
            if (typeof t3 == "number" || t3 instanceof ct2) {
              var f3 = t3 < 256 ? 1 : t3 < 65536 ? 2 : t3 < 1 ? 4 : 8;
              if ([1, 2, 4, 8].indexOf((n2 = n2 || f3)) === -1)
                throw new Error("Invalid length");
              if (((n2 = Math.max(f3, n2)), e2 && typeof e2 != "number"))
                throw new Error("Invalid checksum length");
              switch (n2) {
                case 1:
                  e2 = 1;
                  break;
                case 2:
                  e2 = [1, 2].indexOf(e2) + 1 || 1;
                  break;
                case 4:
                  e2 = [1, 2, 3, 4].indexOf(e2) + 1 || 1;
                  break;
                case 8:
                  e2 = [1, 2, 3, 4, 5, 6, 7, 8].indexOf(e2) + 1 || 1;
              }
              o3 = (function (t4, r3) {
                var e3 = false;
                t4 < 0 && ((t4 = -t4 - 1), (e3 = true));
                for (var n3 = new Uint8Array(r3), i3 = 0; i3 < r3; ++i3)
                  (n3[i3] = t4 % 256),
                    e3 && (n3[i3] = 255 & ~n3[i3]),
                    (t4 /= 256);
                return n3;
              })(t3, n2);
            } else {
              if (
                !(t3 instanceof Uint8Array) ||
                (t3.length !== 32 && t3.length !== 35)
              )
                throw new Error(
                  "Unknown item to encode as ss58. Passing back.",
                  t3
                );
              (e2 = 2), (i2 = o3 = t3.length === 35 ? t3.slice(1, 33) : t3);
            }
            var a3 = s2.blake2b(lt2(ht2, 1 & r2 ? i2 : lt2(r2, o3))),
              h3 = lt2(lt2(r2, o3), a3.slice(0, e2));
            return u2.encode(Buffer.from(h3));
          }),
          (r.stripHexPrefix = S2),
          (r.toChecksumAddress = x2),
          (r.ua2hex = function (t3) {
            for (var r2 = "", e2 = 0; e2 < t3.length; e2++) {
              var n2 = t3[e2];
              (r2 += c2[n2 >>> 4]), (r2 += c2[15 & n2]);
            }
            return r2;
          });
      });
      Dt = "13456789abcdefghijkmnopqrstuwxyz";
      Ft = function (t2) {
        if (t2.constructor !== Uint8Array)
          throw new Error("View must be a Uint8Array!");
        const r = t2.length,
          e = (8 * r) % 5,
          n = e === 0 ? 0 : 5 - e;
        let i = 0,
          o2 = "",
          f2 = 0;
        for (var u2 = 0; u2 < r; u2++)
          for (i = (i << 8) | t2[u2], f2 += 8; f2 >= 5; )
            (o2 += Dt[(i >>> (f2 + n - 5)) & 31]), (f2 -= 5);
        return f2 > 0 && (o2 += Dt[(i << (5 - (f2 + n))) & 31]), o2;
      };
      Zt = require_bn();
      Kt = (function () {
        function t2(t3) {
          t3 === void 0 && (t3 = Buffer.from([])),
            (this.buffer = t3),
            (this.bytesRead = 0);
        }
        var r = t2.prototype;
        return (
          (r.read = function (t3) {
            var r2 = this.buffer.slice(0, t3);
            return (
              (this.buffer = this.buffer.slice(t3)), (this.bytesRead += t3), r2
            );
          }),
          (r.write = function (t3) {
            this.buffer = Buffer.concat([this.buffer, Buffer.from(t3)]);
          }),
          t2
        );
      })();
      Xt = (function () {
        function t2(t3) {
          if (!t3 || t3.length < 1) throw new Error("Missing str in address");
          this.str = t3;
        }
        var r = t2.prototype;
        return (
          (r.protocol = function () {
            if (this.str.length < 1) throw Error("No address found.");
            return this.str[0];
          }),
          (r.payload = function () {
            if (this.str.length < 1) throw Error("No address found.");
            return this.str.slice(1, this.str.length);
          }),
          t2
        );
      })();
      Qt = function (t2, r, e, n) {
        return {
          coinType: r,
          decoder: Gt(e, n),
          encoder: Jt(e[0], n[0]),
          name: t2,
        };
      };
      rr = function (t2, r, e, n, i) {
        return {
          coinType: r,
          decoder: tr(e, n, i),
          encoder: $t(e, n[0], i[0]),
          name: t2,
        };
      };
      ir = function (t2, r, e) {
        return { coinType: r, decoder: nr(e), encoder: er(e), name: t2 };
      };
      ur = function (t2, r, e) {
        return { coinType: r, decoder: fr(e), encoder: or(e), name: t2 };
      };
      wr = function (t2, r, e, n) {
        return { coinType: r, decoder: n, encoder: e, name: t2 };
      };
      br = [
        rr("BTC", 0, "bc", [[0]], [[5]]),
        rr("LTC", 2, "ltc", [[48]], [[50], [5]]),
        Qt("DOGE", 3, [[30]], [[22]]),
        Qt("RDD", 4, [[61]], [[5]]),
        Qt("DASH", 5, [[76]], [[16]]),
        Qt("PPC", 6, [[55]], [[117]]),
        wr("NMC", 7, jt.bs58Encode, jt.bs58Decode),
        rr("MONA", 22, "mona", [[50]], [[55], [5]]),
        wr("DCR", 42, ot.encode, ot.decode),
        wr(
          "XEM",
          43,
          function (t2) {
            return jt.b32encode(jt.hex2a(t2.toString("hex")));
          },
          function (t2) {
            if (!jt.isValid(t2)) throw Error("Unrecognised address format");
            var r = t2.toString().toUpperCase().replace(/-/g, "");
            return jt.b32decode(r);
          }
        ),
        Qt("AIB", 55, [[23]], [[5]]),
        rr("SYS", 57, "sys", [[63]], [[5]]),
        ir("ETH", 60),
        ir("ETC", 61),
        wr(
          "ICX",
          74,
          function (t2) {
            if (t2.length !== 21) throw Error("Unrecognised address format");
            switch (t2.readUInt8(0)) {
              case 0:
                return "hx" + t2.slice(1).toString("hex");
              case 1:
                return "cx" + t2.slice(1).toString("hex");
              default:
                throw Error("Unrecognised address format");
            }
          },
          function (t2) {
            var r = t2.slice(0, 2),
              e = t2.slice(2);
            switch (r) {
              case "hx":
                return Buffer.concat([Buffer.from([0]), Buffer.from(e, "hex")]);
              case "cx":
                return Buffer.concat([Buffer.from([1]), Buffer.from(e, "hex")]);
              default:
                throw Error("Unrecognised address format");
            }
          }
        ),
        wr("ARK", 111, jt.bs58Encode, function (t2) {
          var r = jt.bs58Decode(t2);
          if (r[0] !== 23) throw Error("Unrecognised address format");
          return r;
        }),
        ur("ATOM", 118, "cosmos"),
        ur("ZIL", 119, "zil"),
        ur("EGLD", 120, "erd"),
        ((lr = [[28, 184]]),
        (pr = [[28, 189]]),
        {
          coinType: 133,
          decoder: (function (t2, r, e) {
            var n = Gt(r, e),
              i = fr("zs");
            return function (t3) {
              return t3.toLowerCase().startsWith("zs") ? i(t3) : n(t3);
            };
          })(0, lr, pr),
          encoder:
            ((dr = lr[0]),
            (gr = pr[0]),
            (yr = or("zs")),
            (vr = Jt(dr, gr)),
            function (t2) {
              try {
                return vr(t2);
              } catch (r) {
                return yr(t2);
              }
            }),
          name: "ZEC",
        }),
        wr(
          "LSK",
          134,
          function (t2) {
            return p(t2.toString("hex"), 16).toString(10) + "L";
          },
          function (t2) {
            return (
              (function (t3) {
                if (t3.length < 2 || t3.length > 22)
                  throw new Error(
                    "Address length does not match requirements. Expected between 2 and 22 characters."
                  );
                if (t3[t3.length - 1] !== "L")
                  throw new Error(
                    'Address format does not match requirements. Expected "L" at the end.'
                  );
                if (t3.includes("."))
                  throw new Error(
                    "Address format does not match requirements. Address includes invalid character: `.`."
                  );
              })(t2),
              Buffer.from(p(t2.slice(0, -1)).toString(16), "hex")
            );
          }
        ),
        wr("STEEM", 135, sr, hr),
        ir("RSK", 137, 30),
        wr(
          "XRP",
          144,
          function (t2) {
            return jt.codec.encodeChecked(t2);
          },
          function (t2) {
            return jt.codec.decodeChecked(t2);
          }
        ),
        wr(
          "BCH",
          145,
          function (t2) {
            switch (t2.readUInt8(0)) {
              case 118:
                if (
                  t2.readUInt8(1) !== 169 ||
                  t2.readUInt8(t2.length - 2) !== 136 ||
                  t2.readUInt8(t2.length - 1) !== 172
                )
                  throw Error("Unrecognised address format");
                return jt.cashaddrEncode(
                  "bitcoincash",
                  0,
                  t2.slice(3, 3 + t2.readUInt8(2))
                );
              case 169:
                if (t2.readUInt8(t2.length - 1) !== 135)
                  throw Error("Unrecognised address format");
                return jt.cashaddrEncode(
                  "bitcoincash",
                  1,
                  t2.slice(2, 2 + t2.readUInt8(1))
                );
              default:
                throw Error("Unrecognised address format");
            }
          },
          function (t2) {
            var r = Gt([[0]], [[5]]);
            try {
              return r(t2);
            } catch (r2) {
              return (function (t3) {
                var r3 = jt.cashaddrDecode(t3),
                  e = r3.type,
                  n = r3.hash;
                if (e === 0)
                  return Buffer.concat([
                    Buffer.from([118, 169, 20]),
                    Buffer.from(n),
                    Buffer.from([136, 172]),
                  ]);
                if (e === 1)
                  return Buffer.concat([
                    Buffer.from([169, 20]),
                    Buffer.from(n),
                    Buffer.from([135]),
                  ]);
                throw Error("Unrecognised address format");
              })(t2);
            }
          }
        ),
        wr(
          "XLM",
          148,
          function (t2) {
            return jt.encodeCheck("ed25519PublicKey", t2);
          },
          function (t2) {
            return jt.decodeCheck("ed25519PublicKey", t2);
          }
        ),
        wr(
          "NANO",
          165,
          function (t2) {
            var r = Ft(Uint8Array.from(t2)),
              e = F.blake2b(t2, null, 5).reverse();
            return "nano_" + r + Ft(e);
          },
          function (t2) {
            var r = (function (t3) {
              if (typeof t3 != "string")
                throw new Error("Input must be a string!");
              var r2 = t3.length;
              const e = (5 * r2) % 8,
                n = e === 0 ? 0 : 8 - e;
              for (
                var i = 0,
                  o2 = 0,
                  f2 = 0,
                  u2 = new Uint8Array(Math.ceil((5 * r2) / 8)),
                  a2 = 0;
                a2 < r2;
                a2++
              )
                (o2 = (o2 << 5) | Ht(t3[a2])),
                  (i += 5) >= 8 &&
                    ((u2[f2++] = (o2 >>> (i + n - 8)) & 255), (i -= 8));
              return (
                i > 0 && (u2[f2++] = (o2 << (i + n - 8)) & 255),
                e !== 0 && (u2 = u2.slice(1)),
                u2
              );
            })(t2.slice(5));
            return Buffer.from(r).slice(0, -5);
          }
        ),
        wr(
          "EOS",
          194,
          function (t2) {
            if (!jt.eosPublicKey.isValid(t2))
              throw Error("Unrecognised address format");
            return jt.eosPublicKey.fromHex(t2).toString();
          },
          function (t2) {
            if (!jt.eosPublicKey.isValid(t2))
              throw Error("Unrecognised address format");
            return jt.eosPublicKey(t2).toBuffer();
          }
        ),
        wr("TRX", 195, jt.bs58Encode, jt.bs58Decode),
        wr("NEO", 239, jt.bs58Encode, jt.bs58Decode),
        wr(
          "ALGO",
          283,
          function (t2) {
            var r = cr(t2);
            return jt
              .b32encode(jt.hex2a(t2.toString("hex").concat(r)))
              .replace(/=/g, "");
          },
          function (t2) {
            var r = jt.b32decode(t2);
            if (r.length !== 36) throw Error("Unrecognised address format");
            var e = r.slice(0, -4),
              n = r.slice(-4),
              i = cr(e);
            if (n.toString("hex") !== i)
              throw Error("Unrecognised address format");
            return e;
          }
        ),
        Qt("DIVI", 301, [[30]], [[13]]),
        ur("IOTX", 304, "io"),
        wr(
          "DOT",
          354,
          function (t2) {
            return jt.ss58Encode(Uint8Array.from(t2), 0);
          },
          ar
        ),
        wr(
          "KSM",
          434,
          function (t2) {
            return jt.ss58Encode(Uint8Array.from(t2), 2);
          },
          ar
        ),
        wr(
          "FIL",
          461,
          function (t2) {
            return Yt("f", Wt(t2[0], t2.slice(1))).toString();
          },
          function (t2) {
            return (function (t3) {
              !(function (t4) {
                if (!t4) throw Error("No bytes to validate.");
                if (t4.length < 3)
                  throw Error("Address is too short to validate.");
                if (t4[0] !== "f" && t4[0] !== "t")
                  throw Error("Unknown address network.");
                switch (t4[1]) {
                  case "0":
                    if (t4.length > 22)
                      throw Error("Invalid ID address length.");
                    break;
                  case "1":
                    if (t4.length !== 41)
                      throw Error("Invalid secp256k1 address length.");
                    break;
                  case "2":
                    if (t4.length !== 41)
                      throw Error("Invalid Actor address length.");
                    break;
                  case "3":
                    if (t4.length !== 86)
                      throw Error("Invalid BLS address length.");
                    break;
                  default:
                    throw new Error("Invalid address protocol.");
                }
              })(t3);
              var r,
                e = t3[0],
                n = parseInt(t3[1], 10),
                i = Buffer.from([n]),
                o2 = t3.slice(2);
              if (n === 0)
                return Wt(
                  n,
                  Buffer.from(
                    ((function (t4, r2) {
                      for (var e2 = new Zt(t4); ; ) {
                        var n2 = e2.maskn(7).toNumber();
                        if ((e2.ishrn(7), e2.isZero())) {
                          r2.write([n2]);
                          break;
                        }
                        r2.write([128 | n2]);
                      }
                    })(o2, (r = new Kt())),
                    r.buffer)
                  )
                );
              var f2,
                u2,
                a2 = Buffer.from(jt.b32decode(o2.toUpperCase())),
                s2 = a2.length,
                h2 = a2.slice(0, s2 - 4);
              if (
                ((f2 = a2.slice(s2 - 4, s2)),
                (u2 = Vt(Buffer.concat([i, h2]))),
                Buffer.compare(Buffer.from(u2), f2))
              )
                throw Error("Checksums don't match");
              var c2 = Wt(n, h2);
              if (Yt(e, c2) !== t3)
                throw Error("Did not encode this address properly: " + t3);
              return c2;
            })(t2).str;
          }
        ),
        Qt("CCA", 489, [[11]], [[5]]),
        wr("SOL", 501, ot.encode, ot.decode),
        Qt("LRG", 568, [[30]], [[13]]),
        rr("CCXX", 571, "ccx", [[137]], [[75], [5]]),
        Qt("BPS", 576, [[0]], [[5]]),
        ir("XDAI", 700),
        ir("VET", 703),
        ur("BNB", 714, "bnb"),
        wr("HIVE", 825, sr, hr),
        ur("ONE", 1023, "one"),
        wr(
          "ONT",
          1024,
          function (t2) {
            return jt.bs58Encode(Buffer.concat([Buffer.from([23]), t2]));
          },
          function (t2) {
            var r = jt.bs58Decode(t2);
            switch (r.readUInt8(0)) {
              case 23:
                return r.slice(1);
              default:
                throw Error("Unrecognised address format");
            }
          }
        ),
        {
          coinType: 1729,
          decoder: function (t2) {
            var r = jt.bs58Decode(t2).slice(3);
            switch (t2.substring(0, 3)) {
              case "tz1":
                return Buffer.concat([Buffer.from([0, 0]), r]);
              case "tz2":
                return Buffer.concat([Buffer.from([0, 1]), r]);
              case "tz3":
                return Buffer.concat([Buffer.from([0, 2]), r]);
              case "KT1":
                return Buffer.concat([Buffer.from([1]), r, Buffer.from([0])]);
              default:
                throw Error("Unrecognised address format");
            }
          },
          encoder: function (t2) {
            if (t2.length !== 22 && t2.length !== 21)
              throw Error("Unrecognised address format");
            var r;
            switch (t2.readUInt8(0)) {
              case 0:
                if (t2.readUInt8(1) === 0) r = Buffer.from([6, 161, 159]);
                else if (t2.readUInt8(1) === 1) r = Buffer.from([6, 161, 161]);
                else {
                  if (t2.readUInt8(1) !== 2)
                    throw Error("Unrecognised address format");
                  r = Buffer.from([6, 161, 164]);
                }
                return jt.bs58Encode(Buffer.concat([r, t2.slice(2)]));
              case 1:
                return (
                  (r = Buffer.from([2, 90, 121])),
                  jt.bs58Encode(Buffer.concat([r, t2.slice(1, 21)]))
                );
              default:
                throw Error("Unrecognised address format");
            }
          },
          name: "XTZ",
        },
        ur("ADA", 1815, "addr"),
        wr("QTUM", 2301, jt.bs58Encode, jt.bs58Decode),
        wr("ELA", 2305, ot.encode, ot.decode),
        {
          coinType: 3030,
          decoder: function (t2) {
            var r = Buffer.alloc(20),
              e = new DataView(r.buffer, 0, 20),
              n = t2.split(".");
            if (n.length !== 3) throw Error("Unrecognised address format");
            var i = Number(n[0]),
              o2 = BigInt(n[1]),
              f2 = BigInt(n[2]);
            return (
              e.setUint32(0, i),
              e.setBigUint64(4, o2),
              e.setBigUint64(12, f2),
              r
            );
          },
          encoder: function (t2) {
            if (t2.length !== 20) throw Error("Unrecognised address format");
            var r = new DataView(t2.buffer, 0);
            return [r.getUint32(0), r.getBigUint64(4), r.getBigUint64(12)].join(
              "."
            );
          },
          name: "HBAR",
        },
        wr(
          "HNS",
          5353,
          function (t2) {
            if (t2.length !== 20) throw Error("P2WPKH must be 20 bytes");
            var r = [0].concat(h(t2));
            return s("hs", r);
          },
          function (t2) {
            var r = a(t2),
              e = r.words;
            if (r.prefix !== "hs") throw Error("Unrecognised address format");
            var n = e[0],
              i = c(e.slice(1));
            if (n !== 0) throw Error("Bad program version");
            if (i.length !== 20)
              throw Error("Witness program hash is the wrong size");
            return Buffer.from(i);
          }
        ),
        ir("CELO", 52752),
      ];
      mr = Object.assign.apply(
        Object,
        [{}].concat(
          br.map(function (t2) {
            var r;
            return ((r = {})[t2.name] = t2), r;
          })
        )
      );
      Er = Object.assign.apply(
        Object,
        [{}].concat(
          br.map(function (t2) {
            var r;
            return ((r = {})[t2.coinType] = t2), r;
          })
        )
      );
    },
  });

  // node_modules/@ensdomains/ens/build/contracts/ENS.json
  var require_ENS = __commonJS({
    "node_modules/@ensdomains/ens/build/contracts/ENS.json"(exports, module) {
      module.exports = {
        contractName: "ENS",
        abi: [
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                indexed: true,
                internalType: "address",
                name: "operator",
                type: "address",
              },
              {
                indexed: false,
                internalType: "bool",
                name: "approved",
                type: "bool",
              },
            ],
            name: "ApprovalForAll",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                indexed: true,
                internalType: "bytes32",
                name: "label",
                type: "bytes32",
              },
              {
                indexed: false,
                internalType: "address",
                name: "owner",
                type: "address",
              },
            ],
            name: "NewOwner",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                internalType: "address",
                name: "resolver",
                type: "address",
              },
            ],
            name: "NewResolver",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                internalType: "uint64",
                name: "ttl",
                type: "uint64",
              },
            ],
            name: "NewTTL",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                internalType: "address",
                name: "owner",
                type: "address",
              },
            ],
            name: "Transfer",
            type: "event",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "resolver",
                type: "address",
              },
              {
                internalType: "uint64",
                name: "ttl",
                type: "uint64",
              },
            ],
            name: "setRecord",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "label",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "resolver",
                type: "address",
              },
              {
                internalType: "uint64",
                name: "ttl",
                type: "uint64",
              },
            ],
            name: "setSubnodeRecord",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "label",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
            ],
            name: "setSubnodeOwner",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "resolver",
                type: "address",
              },
            ],
            name: "setResolver",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
            ],
            name: "setOwner",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "ttl",
                type: "uint64",
              },
            ],
            name: "setTTL",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "address",
                name: "operator",
                type: "address",
              },
              {
                internalType: "bool",
                name: "approved",
                type: "bool",
              },
            ],
            name: "setApprovalForAll",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
            ],
            name: "owner",
            outputs: [
              {
                internalType: "address",
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
            ],
            name: "resolver",
            outputs: [
              {
                internalType: "address",
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
            ],
            name: "ttl",
            outputs: [
              {
                internalType: "uint64",
                name: "",
                type: "uint64",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "bytes32",
                name: "node",
                type: "bytes32",
              },
            ],
            name: "recordExists",
            outputs: [
              {
                internalType: "bool",
                name: "",
                type: "bool",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "operator",
                type: "address",
              },
            ],
            name: "isApprovedForAll",
            outputs: [
              {
                internalType: "bool",
                name: "",
                type: "bool",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
        ],
        metadata:
          '{"compiler":{"version":"0.5.16+commit.9c3226ce"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NewOwner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"resolver","type":"address"}],"name":"NewResolver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"NewTTL","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"recordExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"resolver","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"label","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setSubnodeRecord","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"ttl","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/makoto/work/ens/ens/contracts/ENS.sol":"ENS"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/Users/makoto/work/ens/ens/contracts/ENS.sol":{"keccak256":"0x10b88673d8c180cd62523be4fec7607c65594eb4f0c561fa0fbc0784422b4871","urls":["bzz-raw://b3de1882a4a1a1b13c27ee6dc04cc58c34ac392c80cad507de2cdfa8c02712fe","dweb:/ipfs/QmeKcaBF8QdJjXiqFrPJkAtK3et5kUL8XJrnHjwhAThRMT"]}},"version":1}',
        bytecode: "0x",
        deployedBytecode: "0x",
        sourceMap: "",
        deployedSourceMap: "",
        source:
          "pragma solidity >=0.4.24;\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\n    function setResolver(bytes32 node, address resolver) external;\n    function setOwner(bytes32 node, address owner) external;\n    function setTTL(bytes32 node, uint64 ttl) external;\n    function setApprovalForAll(address operator, bool approved) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n    function recordExists(bytes32 node) external view returns (bool);\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n",
        sourcePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
        ast: {
          absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
          exportedSymbols: {
            ENS: [436],
          },
          id: 437,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 301,
              literals: ["solidity", ">=", "0.4", ".24"],
              nodeType: "PragmaDirective",
              src: "0:25:2",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "interface",
              documentation: null,
              fullyImplemented: false,
              id: 436,
              linearizedBaseContracts: [436],
              name: "ENS",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  anonymous: false,
                  documentation: null,
                  id: 309,
                  name: "NewOwner",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 308,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 303,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "136:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 302,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "136:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 305,
                        indexed: true,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "158:21:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 304,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "158:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 307,
                        indexed: false,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "181:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 306,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "181:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "135:60:2",
                  },
                  src: "121:75:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 315,
                  name: "Transfer",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 314,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 311,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 315,
                        src: "294:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 310,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "294:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 313,
                        indexed: false,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 315,
                        src: "316:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 312,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "316:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "293:37:2",
                  },
                  src: "279:52:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 321,
                  name: "NewResolver",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 320,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 317,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 321,
                        src: "407:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 316,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "407:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 319,
                        indexed: false,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 321,
                        src: "429:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 318,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "429:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "406:40:2",
                  },
                  src: "389:58:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 327,
                  name: "NewTTL",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 326,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 323,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 327,
                        src: "511:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 322,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "511:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 325,
                        indexed: false,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 327,
                        src: "533:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 324,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "533:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "510:34:2",
                  },
                  src: "498:47:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 335,
                  name: "ApprovalForAll",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 334,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 329,
                        indexed: true,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "624:21:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 328,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "624:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 331,
                        indexed: true,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "647:24:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 330,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "647:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 333,
                        indexed: false,
                        name: "approved",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "673:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 332,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "673:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "623:64:2",
                  },
                  src: "603:85:2",
                },
                {
                  body: null,
                  documentation: null,
                  id: 346,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setRecord",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 344,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 337,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "713:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 336,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "713:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 339,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "727:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 338,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "727:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 341,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "742:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 340,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "742:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 343,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "760:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 342,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "760:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "712:59:2",
                  },
                  returnParameters: {
                    id: 345,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "780:0:2",
                  },
                  scope: 436,
                  src: "694:87:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 359,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setSubnodeRecord",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 357,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 348,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "812:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 347,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "812:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 350,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "826:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 349,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "826:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 352,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "841:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 351,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "841:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 354,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "856:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 353,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "856:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 356,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "874:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 355,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "874:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "811:74:2",
                  },
                  returnParameters: {
                    id: 358,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "894:0:2",
                  },
                  scope: 436,
                  src: "786:109:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 370,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setSubnodeOwner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 366,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 361,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "925:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 360,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "925:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 363,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "939:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 362,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "939:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 365,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "954:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 364,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "954:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "924:44:2",
                  },
                  returnParameters: {
                    id: 369,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 368,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "986:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 367,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "986:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "985:9:2",
                  },
                  scope: 436,
                  src: "900:95:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 377,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setResolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 375,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 372,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 377,
                        src: "1021:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 371,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1021:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 374,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 377,
                        src: "1035:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 373,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1035:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1020:32:2",
                  },
                  returnParameters: {
                    id: 376,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1061:0:2",
                  },
                  scope: 436,
                  src: "1000:62:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 384,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setOwner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 382,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 379,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 384,
                        src: "1085:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 378,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1085:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 381,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 384,
                        src: "1099:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 380,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1099:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1084:29:2",
                  },
                  returnParameters: {
                    id: 383,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1122:0:2",
                  },
                  scope: 436,
                  src: "1067:56:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 391,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setTTL",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 389,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 386,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 391,
                        src: "1144:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 385,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1144:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 388,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 391,
                        src: "1158:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 387,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "1158:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1143:26:2",
                  },
                  returnParameters: {
                    id: 390,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1178:0:2",
                  },
                  scope: 436,
                  src: "1128:51:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 398,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setApprovalForAll",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 396,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 393,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "1211:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 392,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1211:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 395,
                        name: "approved",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "1229:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 394,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1229:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1210:33:2",
                  },
                  returnParameters: {
                    id: 397,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1252:0:2",
                  },
                  scope: 436,
                  src: "1184:69:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 405,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "owner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 401,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 400,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 405,
                        src: "1273:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 399,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1273:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1272:14:2",
                  },
                  returnParameters: {
                    id: 404,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 403,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 405,
                        src: "1310:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 402,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1310:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1309:9:2",
                  },
                  scope: 436,
                  src: "1258:61:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 412,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "resolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 408,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 407,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 412,
                        src: "1342:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 406,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1342:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1341:14:2",
                  },
                  returnParameters: {
                    id: 411,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 410,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 412,
                        src: "1379:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 409,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1379:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1378:9:2",
                  },
                  scope: 436,
                  src: "1324:64:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 419,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "ttl",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 415,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 414,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 419,
                        src: "1406:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 413,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1406:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1405:14:2",
                  },
                  returnParameters: {
                    id: 418,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 417,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 419,
                        src: "1443:6:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 416,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "1443:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1442:8:2",
                  },
                  scope: 436,
                  src: "1393:58:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 426,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "recordExists",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 422,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 421,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 426,
                        src: "1478:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 420,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1478:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1477:14:2",
                  },
                  returnParameters: {
                    id: 425,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 424,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 426,
                        src: "1515:4:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 423,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1515:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1514:6:2",
                  },
                  scope: 436,
                  src: "1456:65:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 435,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "isApprovedForAll",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 431,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 428,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1552:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 427,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1552:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 430,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1567:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 429,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1567:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1551:33:2",
                  },
                  returnParameters: {
                    id: 434,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 433,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1608:4:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 432,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1608:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1607:6:2",
                  },
                  scope: 436,
                  src: "1526:88:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
              ],
              scope: 437,
              src: "27:1589:2",
            },
          ],
          src: "0:1617:2",
        },
        legacyAST: {
          absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
          exportedSymbols: {
            ENS: [436],
          },
          id: 437,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 301,
              literals: ["solidity", ">=", "0.4", ".24"],
              nodeType: "PragmaDirective",
              src: "0:25:2",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "interface",
              documentation: null,
              fullyImplemented: false,
              id: 436,
              linearizedBaseContracts: [436],
              name: "ENS",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  anonymous: false,
                  documentation: null,
                  id: 309,
                  name: "NewOwner",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 308,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 303,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "136:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 302,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "136:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 305,
                        indexed: true,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "158:21:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 304,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "158:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 307,
                        indexed: false,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 309,
                        src: "181:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 306,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "181:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "135:60:2",
                  },
                  src: "121:75:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 315,
                  name: "Transfer",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 314,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 311,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 315,
                        src: "294:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 310,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "294:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 313,
                        indexed: false,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 315,
                        src: "316:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 312,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "316:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "293:37:2",
                  },
                  src: "279:52:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 321,
                  name: "NewResolver",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 320,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 317,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 321,
                        src: "407:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 316,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "407:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 319,
                        indexed: false,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 321,
                        src: "429:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 318,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "429:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "406:40:2",
                  },
                  src: "389:58:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 327,
                  name: "NewTTL",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 326,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 323,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 327,
                        src: "511:20:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 322,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "511:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 325,
                        indexed: false,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 327,
                        src: "533:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 324,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "533:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "510:34:2",
                  },
                  src: "498:47:2",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 335,
                  name: "ApprovalForAll",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 334,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 329,
                        indexed: true,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "624:21:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 328,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "624:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 331,
                        indexed: true,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "647:24:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 330,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "647:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 333,
                        indexed: false,
                        name: "approved",
                        nodeType: "VariableDeclaration",
                        scope: 335,
                        src: "673:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 332,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "673:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "623:64:2",
                  },
                  src: "603:85:2",
                },
                {
                  body: null,
                  documentation: null,
                  id: 346,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setRecord",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 344,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 337,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "713:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 336,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "713:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 339,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "727:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 338,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "727:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 341,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "742:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 340,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "742:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 343,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 346,
                        src: "760:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 342,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "760:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "712:59:2",
                  },
                  returnParameters: {
                    id: 345,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "780:0:2",
                  },
                  scope: 436,
                  src: "694:87:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 359,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setSubnodeRecord",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 357,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 348,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "812:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 347,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "812:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 350,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "826:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 349,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "826:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 352,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "841:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 351,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "841:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 354,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "856:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 353,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "856:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 356,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 359,
                        src: "874:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 355,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "874:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "811:74:2",
                  },
                  returnParameters: {
                    id: 358,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "894:0:2",
                  },
                  scope: 436,
                  src: "786:109:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 370,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setSubnodeOwner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 366,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 361,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "925:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 360,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "925:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 363,
                        name: "label",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "939:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 362,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "939:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 365,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "954:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 364,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "954:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "924:44:2",
                  },
                  returnParameters: {
                    id: 369,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 368,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "986:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 367,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "986:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "985:9:2",
                  },
                  scope: 436,
                  src: "900:95:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 377,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setResolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 375,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 372,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 377,
                        src: "1021:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 371,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1021:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 374,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 377,
                        src: "1035:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 373,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1035:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1020:32:2",
                  },
                  returnParameters: {
                    id: 376,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1061:0:2",
                  },
                  scope: 436,
                  src: "1000:62:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 384,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setOwner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 382,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 379,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 384,
                        src: "1085:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 378,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1085:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 381,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 384,
                        src: "1099:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 380,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1099:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1084:29:2",
                  },
                  returnParameters: {
                    id: 383,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1122:0:2",
                  },
                  scope: 436,
                  src: "1067:56:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 391,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setTTL",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 389,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 386,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 391,
                        src: "1144:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 385,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1144:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 388,
                        name: "ttl",
                        nodeType: "VariableDeclaration",
                        scope: 391,
                        src: "1158:10:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 387,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "1158:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1143:26:2",
                  },
                  returnParameters: {
                    id: 390,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1178:0:2",
                  },
                  scope: 436,
                  src: "1128:51:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 398,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setApprovalForAll",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 396,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 393,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "1211:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 392,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1211:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 395,
                        name: "approved",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "1229:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 394,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1229:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1210:33:2",
                  },
                  returnParameters: {
                    id: 397,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1252:0:2",
                  },
                  scope: 436,
                  src: "1184:69:2",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 405,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "owner",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 401,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 400,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 405,
                        src: "1273:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 399,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1273:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1272:14:2",
                  },
                  returnParameters: {
                    id: 404,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 403,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 405,
                        src: "1310:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 402,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1310:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1309:9:2",
                  },
                  scope: 436,
                  src: "1258:61:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 412,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "resolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 408,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 407,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 412,
                        src: "1342:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 406,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1342:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1341:14:2",
                  },
                  returnParameters: {
                    id: 411,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 410,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 412,
                        src: "1379:7:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 409,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1379:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1378:9:2",
                  },
                  scope: 436,
                  src: "1324:64:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 419,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "ttl",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 415,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 414,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 419,
                        src: "1406:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 413,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1406:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1405:14:2",
                  },
                  returnParameters: {
                    id: 418,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 417,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 419,
                        src: "1443:6:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint64",
                          typeString: "uint64",
                        },
                        typeName: {
                          id: 416,
                          name: "uint64",
                          nodeType: "ElementaryTypeName",
                          src: "1443:6:2",
                          typeDescriptions: {
                            typeIdentifier: "t_uint64",
                            typeString: "uint64",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1442:8:2",
                  },
                  scope: 436,
                  src: "1393:58:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 426,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "recordExists",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 422,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 421,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 426,
                        src: "1478:12:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 420,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1478:7:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1477:14:2",
                  },
                  returnParameters: {
                    id: 425,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 424,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 426,
                        src: "1515:4:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 423,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1515:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1514:6:2",
                  },
                  scope: 436,
                  src: "1456:65:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 435,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "isApprovedForAll",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 431,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 428,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1552:13:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 427,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1552:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 430,
                        name: "operator",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1567:16:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 429,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1567:7:2",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1551:33:2",
                  },
                  returnParameters: {
                    id: 434,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 433,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 435,
                        src: "1608:4:2",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 432,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "1608:4:2",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1607:6:2",
                  },
                  scope: 436,
                  src: "1526:88:2",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
              ],
              scope: 437,
              src: "27:1589:2",
            },
          ],
          src: "0:1617:2",
        },
        compiler: {
          name: "solc",
          version: "0.5.16+commit.9c3226ce.Emscripten.clang",
        },
        networks: {},
        schemaVersion: "3.2.0",
        updatedAt: "2020-06-23T14:47:43.690Z",
        devdoc: {
          methods: {},
        },
        userdoc: {
          methods: {},
        },
      };
    },
  });

  // node_modules/@ensdomains/resolver/build/contracts/Resolver.json
  var require_Resolver = __commonJS({
    "node_modules/@ensdomains/resolver/build/contracts/Resolver.json"(
      exports,
      module
    ) {
      module.exports = {
        contractName: "Resolver",
        abi: [
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "a",
                type: "address",
              },
            ],
            name: "AddrChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "coinType",
                type: "uint256",
              },
              {
                indexed: false,
                name: "newAddress",
                type: "bytes",
              },
            ],
            name: "AddressChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "name",
                type: "string",
              },
            ],
            name: "NameChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: true,
                name: "contentType",
                type: "uint256",
              },
            ],
            name: "ABIChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "x",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "y",
                type: "bytes32",
              },
            ],
            name: "PubkeyChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: true,
                name: "indexedKey",
                type: "string",
              },
              {
                indexed: false,
                name: "key",
                type: "string",
              },
            ],
            name: "TextChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "hash",
                type: "bytes",
              },
            ],
            name: "ContenthashChanged",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                name: "node",
                type: "bytes32",
              },
              {
                indexed: false,
                name: "hash",
                type: "bytes32",
              },
            ],
            name: "ContentChanged",
            type: "event",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "contentTypes",
                type: "uint256",
              },
            ],
            name: "ABI",
            outputs: [
              {
                name: "",
                type: "uint256",
              },
              {
                name: "",
                type: "bytes",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "coinType",
                type: "uint256",
              },
            ],
            name: "addr",
            outputs: [
              {
                name: "",
                type: "bytes",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "addr",
            outputs: [
              {
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "contenthash",
            outputs: [
              {
                name: "",
                type: "bytes",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "dnsrr",
            outputs: [
              {
                name: "",
                type: "bytes",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "name",
            outputs: [
              {
                name: "",
                type: "string",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "pubkey",
            outputs: [
              {
                name: "x",
                type: "bytes32",
              },
              {
                name: "y",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "key",
                type: "string",
              },
            ],
            name: "text",
            outputs: [
              {
                name: "",
                type: "string",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "interfaceID",
                type: "bytes4",
              },
            ],
            name: "interfaceImplementer",
            outputs: [
              {
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "contentType",
                type: "uint256",
              },
              {
                name: "data",
                type: "bytes",
              },
            ],
            name: "setABI",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "addr",
                type: "address",
              },
            ],
            name: "setAddr",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "coinType",
                type: "uint256",
              },
              {
                name: "a",
                type: "bytes",
              },
            ],
            name: "setAddr",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "hash",
                type: "bytes",
              },
            ],
            name: "setContenthash",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "data",
                type: "bytes",
              },
            ],
            name: "setDnsrr",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "_name",
                type: "string",
              },
            ],
            name: "setName",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "x",
                type: "bytes32",
              },
              {
                name: "y",
                type: "bytes32",
              },
            ],
            name: "setPubkey",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "key",
                type: "string",
              },
              {
                name: "value",
                type: "string",
              },
            ],
            name: "setText",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "interfaceID",
                type: "bytes4",
              },
              {
                name: "implementer",
                type: "address",
              },
            ],
            name: "setInterface",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "interfaceID",
                type: "bytes4",
              },
            ],
            name: "supportsInterface",
            outputs: [
              {
                name: "",
                type: "bool",
              },
            ],
            payable: false,
            stateMutability: "pure",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "data",
                type: "bytes[]",
              },
            ],
            name: "multicall",
            outputs: [
              {
                name: "results",
                type: "bytes[]",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "content",
            outputs: [
              {
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
            ],
            name: "multihash",
            outputs: [
              {
                name: "",
                type: "bytes",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "hash",
                type: "bytes32",
              },
            ],
            name: "setContent",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                name: "node",
                type: "bytes32",
              },
              {
                name: "hash",
                type: "bytes",
              },
            ],
            name: "setMultihash",
            outputs: [],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
        ],
        metadata:
          '{"compiler":{"version":"0.5.8+commit.23d335f2"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"key","type":"string"},{"name":"value","type":"string"}],"name":"setText","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"dnsrr","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"x","type":"bytes32"},{"name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"addr","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"key","type":"string"}],"name":"text","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"contentType","type":"uint256"},{"name":"data","type":"bytes"}],"name":"setABI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"data","type":"bytes"}],"name":"setDnsrr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"_name","type":"string"}],"name":"setName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"coinType","type":"uint256"},{"name":"a","type":"bytes"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes"}],"name":"setMultihash","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"name":"results","type":"bytes[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"hash","type":"bytes32"}],"name":"setContent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"name":"x","type":"bytes32"},{"name":"y","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"addr","type":"address"}],"name":"setAddr","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"node","type":"bytes32"},{"name":"interfaceID","type":"bytes4"},{"name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"}],"name":"multihash","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"node","type":"bytes32"},{"name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"coinType","type":"uint256"},{"indexed":false,"name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":true,"name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"x","type":"bytes32"},{"indexed":false,"name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":true,"name":"indexedKey","type":"string"},{"indexed":false,"name":"key","type":"string"}],"name":"TextChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"node","type":"bytes32"},{"indexed":false,"name":"hash","type":"bytes32"}],"name":"ContentChanged","type":"event"}],"devdoc":{"methods":{}},"userdoc":{"methods":{},"notice":"A generic resolver interface which includes all the functions including the ones deprecated"}},"settings":{"compilationTarget":{"/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol":"Resolver"},"evmVersion":"petersburg","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol":{"keccak256":"0xb992c6a78066be42d7e9b54d0e385e87267d7e229099ed6c857c9d9ace43995d","urls":["bzzr://ddba23b761cfa2d6bb8746fd4241896db84282f2550c06c738fc1de2f8fb33c2"]}},"version":1}',
        bytecode: "0x",
        deployedBytecode: "0x",
        sourceMap: "",
        deployedSourceMap: "",
        source:
          "pragma solidity >=0.4.25;\npragma experimental ABIEncoderV2;\n\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver{\n    event AddrChanged(bytes32 indexed node, address a);\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\n    event NameChanged(bytes32 indexed node, string name);\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n    /* Deprecated events */\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\n    function addr(bytes32 node) external view returns (address);\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\n    function contenthash(bytes32 node) external view returns (bytes memory);\n    function dnsrr(bytes32 node) external view returns (bytes memory);\n    function name(bytes32 node) external view returns (string memory);\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n    function text(bytes32 node, string calldata key) external view returns (string memory);\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\n    function setAddr(bytes32 node, address addr) external;\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\n    function setContenthash(bytes32 node, bytes calldata hash) external;\n    function setDnsrr(bytes32 node, bytes calldata data) external;\n    function setName(bytes32 node, string calldata _name) external;\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n    function setText(bytes32 node, string calldata key, string calldata value) external;\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool);\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\n\n    /* Deprecated functions */\n    function content(bytes32 node) external view returns (bytes32);\n    function multihash(bytes32 node) external view returns (bytes memory);\n    function setContent(bytes32 node, bytes32 hash) external;\n    function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n",
        sourcePath:
          "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
        ast: {
          absolutePath:
            "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
          exportedSymbols: {
            Resolver: [603],
          },
          id: 604,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 355,
              literals: ["solidity", ">=", "0.4", ".25"],
              nodeType: "PragmaDirective",
              src: "0:25:4",
            },
            {
              id: 356,
              literals: ["experimental", "ABIEncoderV2"],
              nodeType: "PragmaDirective",
              src: "26:33:4",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "interface",
              documentation:
                "A generic resolver interface which includes all the functions including the ones deprecated",
              fullyImplemented: false,
              id: 603,
              linearizedBaseContracts: [603],
              name: "Resolver",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  anonymous: false,
                  documentation: null,
                  id: 362,
                  name: "AddrChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 361,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 358,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 362,
                        src: "206:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 357,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "206:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 360,
                        indexed: false,
                        name: "a",
                        nodeType: "VariableDeclaration",
                        scope: 362,
                        src: "228:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 359,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "228:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "205:33:4",
                  },
                  src: "188:51:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 370,
                  name: "AddressChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 369,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 364,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "265:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 363,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "265:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 366,
                        indexed: false,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "287:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 365,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "287:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 368,
                        indexed: false,
                        name: "newAddress",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "302:16:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 367,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "302:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "264:55:4",
                  },
                  src: "244:76:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 376,
                  name: "NameChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 375,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 372,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 376,
                        src: "343:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 371,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "343:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 374,
                        indexed: false,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 376,
                        src: "365:11:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 373,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "365:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "342:35:4",
                  },
                  src: "325:53:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 382,
                  name: "ABIChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 381,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 378,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 382,
                        src: "400:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 377,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "400:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 380,
                        indexed: true,
                        name: "contentType",
                        nodeType: "VariableDeclaration",
                        scope: 382,
                        src: "422:27:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 379,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "422:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "399:51:4",
                  },
                  src: "383:68:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 390,
                  name: "PubkeyChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 389,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 384,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "476:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 383,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "476:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 386,
                        indexed: false,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "498:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 385,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "498:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 388,
                        indexed: false,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "509:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 387,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "509:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "475:44:4",
                  },
                  src: "456:64:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 398,
                  name: "TextChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 397,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 392,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "543:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 391,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "543:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 394,
                        indexed: true,
                        name: "indexedKey",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "565:25:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 393,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "565:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 396,
                        indexed: false,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "592:10:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 395,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "592:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "542:61:4",
                  },
                  src: "525:79:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 404,
                  name: "ContenthashChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 403,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 400,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 404,
                        src: "634:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 399,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "634:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 402,
                        indexed: false,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 404,
                        src: "656:10:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 401,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "656:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "633:34:4",
                  },
                  src: "609:59:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 410,
                  name: "ContentChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 409,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 406,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 410,
                        src: "722:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 405,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "722:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 408,
                        indexed: false,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 410,
                        src: "744:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 407,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "744:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "721:36:4",
                  },
                  src: "701:57:4",
                },
                {
                  body: null,
                  documentation: null,
                  id: 421,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "ABI",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 415,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 412,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "777:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 411,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "777:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 414,
                        name: "contentTypes",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "791:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 413,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "791:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "776:36:4",
                  },
                  returnParameters: {
                    id: 420,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 417,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "836:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 416,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "836:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 419,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "845:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 418,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "845:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "835:23:4",
                  },
                  scope: 603,
                  src: "764:95:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 428,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "addr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 424,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 423,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 428,
                        src: "878:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 422,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "878:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "877:14:4",
                  },
                  returnParameters: {
                    id: 427,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 426,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 428,
                        src: "915:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 425,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "915:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "914:9:4",
                  },
                  scope: 603,
                  src: "864:60:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 437,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "addr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 433,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 430,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "943:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 429,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "943:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 432,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "957:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 431,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "957:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "942:29:4",
                  },
                  returnParameters: {
                    id: 436,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 435,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "994:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 434,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "994:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "993:14:4",
                  },
                  scope: 603,
                  src: "929:79:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 444,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "contenthash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 440,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 439,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 444,
                        src: "1034:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 438,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1034:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1033:14:4",
                  },
                  returnParameters: {
                    id: 443,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 442,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 444,
                        src: "1071:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 441,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1071:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1070:14:4",
                  },
                  scope: 603,
                  src: "1013:72:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 451,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "dnsrr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 447,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 446,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 451,
                        src: "1105:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 445,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1105:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1104:14:4",
                  },
                  returnParameters: {
                    id: 450,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 449,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 451,
                        src: "1142:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 448,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1142:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1141:14:4",
                  },
                  scope: 603,
                  src: "1090:66:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 458,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "name",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 454,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 453,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 458,
                        src: "1175:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 452,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1175:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1174:14:4",
                  },
                  returnParameters: {
                    id: 457,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 456,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 458,
                        src: "1212:13:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 455,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1212:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1211:15:4",
                  },
                  scope: 603,
                  src: "1161:66:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 467,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "pubkey",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 461,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 460,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1248:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 459,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1248:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1247:14:4",
                  },
                  returnParameters: {
                    id: 466,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 463,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1285:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 462,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1285:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 465,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1296:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 464,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1296:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1284:22:4",
                  },
                  scope: 603,
                  src: "1232:75:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 476,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "text",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 472,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 469,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1326:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 468,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1326:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 471,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1340:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 470,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1340:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1325:35:4",
                  },
                  returnParameters: {
                    id: 475,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 474,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1384:13:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 473,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1384:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1383:15:4",
                  },
                  scope: 603,
                  src: "1312:87:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 485,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "interfaceImplementer",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 481,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 478,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1434:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 477,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1434:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 480,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1448:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 479,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "1448:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1433:34:4",
                  },
                  returnParameters: {
                    id: 484,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 483,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1491:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 482,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1491:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1490:9:4",
                  },
                  scope: 603,
                  src: "1404:96:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 494,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setABI",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 492,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 487,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1521:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 486,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1521:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 489,
                        name: "contentType",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1535:19:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 488,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "1535:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 491,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1556:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 490,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1556:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1520:56:4",
                  },
                  returnParameters: {
                    id: 493,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1585:0:4",
                  },
                  scope: 603,
                  src: "1505:81:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 501,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setAddr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 499,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 496,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 501,
                        src: "1608:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 495,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1608:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 498,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 501,
                        src: "1622:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 497,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1622:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1607:28:4",
                  },
                  returnParameters: {
                    id: 500,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1644:0:4",
                  },
                  scope: 603,
                  src: "1591:54:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 510,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setAddr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 508,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 503,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1667:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 502,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1667:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 505,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1681:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 504,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "1681:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 507,
                        name: "a",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1696:16:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 506,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1696:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1666:47:4",
                  },
                  returnParameters: {
                    id: 509,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1722:0:4",
                  },
                  scope: 603,
                  src: "1650:73:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 517,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setContenthash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 515,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 512,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 517,
                        src: "1752:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 511,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1752:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 514,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 517,
                        src: "1766:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 513,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1766:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1751:35:4",
                  },
                  returnParameters: {
                    id: 516,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1795:0:4",
                  },
                  scope: 603,
                  src: "1728:68:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 524,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setDnsrr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 522,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 519,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 524,
                        src: "1819:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 518,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1819:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 521,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 524,
                        src: "1833:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 520,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1833:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1818:35:4",
                  },
                  returnParameters: {
                    id: 523,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1862:0:4",
                  },
                  scope: 603,
                  src: "1801:62:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 531,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 529,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 526,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 531,
                        src: "1885:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 525,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1885:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 528,
                        name: "_name",
                        nodeType: "VariableDeclaration",
                        scope: 531,
                        src: "1899:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 527,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1899:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1884:37:4",
                  },
                  returnParameters: {
                    id: 530,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1930:0:4",
                  },
                  scope: 603,
                  src: "1868:63:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 540,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setPubkey",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 538,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 533,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1955:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 532,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1955:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 535,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1969:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 534,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1969:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 537,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1980:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 536,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1980:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1954:36:4",
                  },
                  returnParameters: {
                    id: 539,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1999:0:4",
                  },
                  scope: 603,
                  src: "1936:64:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 549,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setText",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 547,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 542,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2022:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 541,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2022:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 544,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2036:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 543,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2036:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 546,
                        name: "value",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2057:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 545,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2057:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2021:58:4",
                  },
                  returnParameters: {
                    id: 548,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2088:0:4",
                  },
                  scope: 603,
                  src: "2005:84:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 558,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setInterface",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 556,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 551,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2116:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 550,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2116:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 553,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2130:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 552,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "2130:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 555,
                        name: "implementer",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2150:19:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 554,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "2150:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2115:55:4",
                  },
                  returnParameters: {
                    id: 557,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2179:0:4",
                  },
                  scope: 603,
                  src: "2094:86:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 565,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "supportsInterface",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 561,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 560,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 565,
                        src: "2212:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 559,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "2212:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2211:20:4",
                  },
                  returnParameters: {
                    id: 564,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 563,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 565,
                        src: "2255:4:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 562,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "2255:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2254:6:4",
                  },
                  scope: 603,
                  src: "2185:76:4",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 574,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "multicall",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 569,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 568,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 574,
                        src: "2285:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier:
                            "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                          typeString: "bytes[]",
                        },
                        typeName: {
                          baseType: {
                            id: 566,
                            name: "bytes",
                            nodeType: "ElementaryTypeName",
                            src: "2285:5:4",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_storage_ptr",
                              typeString: "bytes",
                            },
                          },
                          id: 567,
                          length: null,
                          nodeType: "ArrayTypeName",
                          src: "2285:7:4",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            typeString: "bytes[]",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2284:23:4",
                  },
                  returnParameters: {
                    id: 573,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 572,
                        name: "results",
                        nodeType: "VariableDeclaration",
                        scope: 574,
                        src: "2325:22:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier:
                            "t_array$_t_bytes_memory_$dyn_memory_ptr",
                          typeString: "bytes[]",
                        },
                        typeName: {
                          baseType: {
                            id: 570,
                            name: "bytes",
                            nodeType: "ElementaryTypeName",
                            src: "2325:5:4",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_storage_ptr",
                              typeString: "bytes",
                            },
                          },
                          id: 571,
                          length: null,
                          nodeType: "ArrayTypeName",
                          src: "2325:7:4",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            typeString: "bytes[]",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2324:24:4",
                  },
                  scope: 603,
                  src: "2266:83:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 581,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "content",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 577,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 576,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 581,
                        src: "2403:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 575,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2403:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2402:14:4",
                  },
                  returnParameters: {
                    id: 580,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 579,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 581,
                        src: "2440:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 578,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2440:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2439:9:4",
                  },
                  scope: 603,
                  src: "2386:63:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 588,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "multihash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 584,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 583,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 588,
                        src: "2473:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 582,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2473:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2472:14:4",
                  },
                  returnParameters: {
                    id: 587,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 586,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 588,
                        src: "2510:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 585,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2510:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2509:14:4",
                  },
                  scope: 603,
                  src: "2454:70:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 595,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setContent",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 593,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 590,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 595,
                        src: "2549:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 589,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2549:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 592,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 595,
                        src: "2563:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 591,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2563:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2548:28:4",
                  },
                  returnParameters: {
                    id: 594,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2585:0:4",
                  },
                  scope: 603,
                  src: "2529:57:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 602,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setMultihash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 600,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 597,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 602,
                        src: "2613:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 596,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2613:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 599,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 602,
                        src: "2627:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 598,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2627:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2612:35:4",
                  },
                  returnParameters: {
                    id: 601,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2656:0:4",
                  },
                  scope: 603,
                  src: "2591:66:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
              ],
              scope: 604,
              src: "164:2495:4",
            },
          ],
          src: "0:2660:4",
        },
        legacyAST: {
          absolutePath:
            "/home/user/Dropbox/projects/resolvers/contracts/Resolver.sol",
          exportedSymbols: {
            Resolver: [603],
          },
          id: 604,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 355,
              literals: ["solidity", ">=", "0.4", ".25"],
              nodeType: "PragmaDirective",
              src: "0:25:4",
            },
            {
              id: 356,
              literals: ["experimental", "ABIEncoderV2"],
              nodeType: "PragmaDirective",
              src: "26:33:4",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "interface",
              documentation:
                "A generic resolver interface which includes all the functions including the ones deprecated",
              fullyImplemented: false,
              id: 603,
              linearizedBaseContracts: [603],
              name: "Resolver",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  anonymous: false,
                  documentation: null,
                  id: 362,
                  name: "AddrChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 361,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 358,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 362,
                        src: "206:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 357,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "206:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 360,
                        indexed: false,
                        name: "a",
                        nodeType: "VariableDeclaration",
                        scope: 362,
                        src: "228:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 359,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "228:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "205:33:4",
                  },
                  src: "188:51:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 370,
                  name: "AddressChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 369,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 364,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "265:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 363,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "265:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 366,
                        indexed: false,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "287:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 365,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "287:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 368,
                        indexed: false,
                        name: "newAddress",
                        nodeType: "VariableDeclaration",
                        scope: 370,
                        src: "302:16:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 367,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "302:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "264:55:4",
                  },
                  src: "244:76:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 376,
                  name: "NameChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 375,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 372,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 376,
                        src: "343:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 371,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "343:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 374,
                        indexed: false,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 376,
                        src: "365:11:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 373,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "365:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "342:35:4",
                  },
                  src: "325:53:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 382,
                  name: "ABIChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 381,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 378,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 382,
                        src: "400:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 377,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "400:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 380,
                        indexed: true,
                        name: "contentType",
                        nodeType: "VariableDeclaration",
                        scope: 382,
                        src: "422:27:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 379,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "422:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "399:51:4",
                  },
                  src: "383:68:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 390,
                  name: "PubkeyChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 389,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 384,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "476:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 383,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "476:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 386,
                        indexed: false,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "498:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 385,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "498:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 388,
                        indexed: false,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 390,
                        src: "509:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 387,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "509:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "475:44:4",
                  },
                  src: "456:64:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 398,
                  name: "TextChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 397,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 392,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "543:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 391,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "543:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 394,
                        indexed: true,
                        name: "indexedKey",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "565:25:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 393,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "565:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 396,
                        indexed: false,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 398,
                        src: "592:10:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 395,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "592:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "542:61:4",
                  },
                  src: "525:79:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 404,
                  name: "ContenthashChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 403,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 400,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 404,
                        src: "634:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 399,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "634:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 402,
                        indexed: false,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 404,
                        src: "656:10:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 401,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "656:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "633:34:4",
                  },
                  src: "609:59:4",
                },
                {
                  anonymous: false,
                  documentation: null,
                  id: 410,
                  name: "ContentChanged",
                  nodeType: "EventDefinition",
                  parameters: {
                    id: 409,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 406,
                        indexed: true,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 410,
                        src: "722:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 405,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "722:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 408,
                        indexed: false,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 410,
                        src: "744:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 407,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "744:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "721:36:4",
                  },
                  src: "701:57:4",
                },
                {
                  body: null,
                  documentation: null,
                  id: 421,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "ABI",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 415,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 412,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "777:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 411,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "777:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 414,
                        name: "contentTypes",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "791:20:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 413,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "791:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "776:36:4",
                  },
                  returnParameters: {
                    id: 420,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 417,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "836:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 416,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "836:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 419,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 421,
                        src: "845:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 418,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "845:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "835:23:4",
                  },
                  scope: 603,
                  src: "764:95:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 428,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "addr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 424,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 423,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 428,
                        src: "878:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 422,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "878:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "877:14:4",
                  },
                  returnParameters: {
                    id: 427,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 426,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 428,
                        src: "915:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 425,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "915:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "914:9:4",
                  },
                  scope: 603,
                  src: "864:60:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 437,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "addr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 433,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 430,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "943:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 429,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "943:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 432,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "957:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 431,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "957:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "942:29:4",
                  },
                  returnParameters: {
                    id: 436,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 435,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 437,
                        src: "994:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 434,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "994:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "993:14:4",
                  },
                  scope: 603,
                  src: "929:79:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 444,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "contenthash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 440,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 439,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 444,
                        src: "1034:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 438,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1034:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1033:14:4",
                  },
                  returnParameters: {
                    id: 443,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 442,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 444,
                        src: "1071:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 441,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1071:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1070:14:4",
                  },
                  scope: 603,
                  src: "1013:72:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 451,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "dnsrr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 447,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 446,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 451,
                        src: "1105:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 445,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1105:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1104:14:4",
                  },
                  returnParameters: {
                    id: 450,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 449,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 451,
                        src: "1142:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 448,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1142:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1141:14:4",
                  },
                  scope: 603,
                  src: "1090:66:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 458,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "name",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 454,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 453,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 458,
                        src: "1175:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 452,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1175:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1174:14:4",
                  },
                  returnParameters: {
                    id: 457,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 456,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 458,
                        src: "1212:13:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 455,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1212:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1211:15:4",
                  },
                  scope: 603,
                  src: "1161:66:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 467,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "pubkey",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 461,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 460,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1248:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 459,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1248:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1247:14:4",
                  },
                  returnParameters: {
                    id: 466,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 463,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1285:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 462,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1285:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 465,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 467,
                        src: "1296:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 464,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1296:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1284:22:4",
                  },
                  scope: 603,
                  src: "1232:75:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 476,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "text",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 472,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 469,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1326:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 468,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1326:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 471,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1340:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 470,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1340:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1325:35:4",
                  },
                  returnParameters: {
                    id: 475,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 474,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 476,
                        src: "1384:13:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 473,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1384:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1383:15:4",
                  },
                  scope: 603,
                  src: "1312:87:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 485,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "interfaceImplementer",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 481,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 478,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1434:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 477,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1434:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 480,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1448:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 479,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "1448:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1433:34:4",
                  },
                  returnParameters: {
                    id: 484,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 483,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 485,
                        src: "1491:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 482,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1491:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1490:9:4",
                  },
                  scope: 603,
                  src: "1404:96:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 494,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setABI",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 492,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 487,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1521:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 486,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1521:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 489,
                        name: "contentType",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1535:19:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 488,
                          name: "uint256",
                          nodeType: "ElementaryTypeName",
                          src: "1535:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 491,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 494,
                        src: "1556:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 490,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1556:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1520:56:4",
                  },
                  returnParameters: {
                    id: 493,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1585:0:4",
                  },
                  scope: 603,
                  src: "1505:81:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 501,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setAddr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 499,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 496,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 501,
                        src: "1608:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 495,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1608:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 498,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 501,
                        src: "1622:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 497,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1622:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1607:28:4",
                  },
                  returnParameters: {
                    id: 500,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1644:0:4",
                  },
                  scope: 603,
                  src: "1591:54:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 510,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setAddr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 508,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 503,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1667:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 502,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1667:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 505,
                        name: "coinType",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1681:13:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256",
                        },
                        typeName: {
                          id: 504,
                          name: "uint",
                          nodeType: "ElementaryTypeName",
                          src: "1681:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 507,
                        name: "a",
                        nodeType: "VariableDeclaration",
                        scope: 510,
                        src: "1696:16:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 506,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1696:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1666:47:4",
                  },
                  returnParameters: {
                    id: 509,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1722:0:4",
                  },
                  scope: 603,
                  src: "1650:73:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 517,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setContenthash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 515,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 512,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 517,
                        src: "1752:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 511,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1752:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 514,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 517,
                        src: "1766:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 513,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1766:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1751:35:4",
                  },
                  returnParameters: {
                    id: 516,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1795:0:4",
                  },
                  scope: 603,
                  src: "1728:68:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 524,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setDnsrr",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 522,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 519,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 524,
                        src: "1819:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 518,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1819:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 521,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 524,
                        src: "1833:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 520,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "1833:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1818:35:4",
                  },
                  returnParameters: {
                    id: 523,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1862:0:4",
                  },
                  scope: 603,
                  src: "1801:62:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 531,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 529,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 526,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 531,
                        src: "1885:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 525,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1885:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 528,
                        name: "_name",
                        nodeType: "VariableDeclaration",
                        scope: 531,
                        src: "1899:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 527,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "1899:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1884:37:4",
                  },
                  returnParameters: {
                    id: 530,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1930:0:4",
                  },
                  scope: 603,
                  src: "1868:63:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 540,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setPubkey",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 538,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 533,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1955:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 532,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1955:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 535,
                        name: "x",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1969:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 534,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1969:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 537,
                        name: "y",
                        nodeType: "VariableDeclaration",
                        scope: 540,
                        src: "1980:9:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 536,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1980:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1954:36:4",
                  },
                  returnParameters: {
                    id: 539,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "1999:0:4",
                  },
                  scope: 603,
                  src: "1936:64:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 549,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setText",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 547,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 542,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2022:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 541,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2022:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 544,
                        name: "key",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2036:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 543,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2036:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 546,
                        name: "value",
                        nodeType: "VariableDeclaration",
                        scope: 549,
                        src: "2057:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_string_calldata_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 545,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2057:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2021:58:4",
                  },
                  returnParameters: {
                    id: 548,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2088:0:4",
                  },
                  scope: 603,
                  src: "2005:84:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 558,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setInterface",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 556,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 551,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2116:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 550,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2116:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 553,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2130:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 552,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "2130:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 555,
                        name: "implementer",
                        nodeType: "VariableDeclaration",
                        scope: 558,
                        src: "2150:19:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 554,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "2150:7:4",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2115:55:4",
                  },
                  returnParameters: {
                    id: 557,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2179:0:4",
                  },
                  scope: 603,
                  src: "2094:86:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 565,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "supportsInterface",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 561,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 560,
                        name: "interfaceID",
                        nodeType: "VariableDeclaration",
                        scope: 565,
                        src: "2212:18:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes4",
                          typeString: "bytes4",
                        },
                        typeName: {
                          id: 559,
                          name: "bytes4",
                          nodeType: "ElementaryTypeName",
                          src: "2212:6:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes4",
                            typeString: "bytes4",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2211:20:4",
                  },
                  returnParameters: {
                    id: 564,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 563,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 565,
                        src: "2255:4:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool",
                        },
                        typeName: {
                          id: 562,
                          name: "bool",
                          nodeType: "ElementaryTypeName",
                          src: "2255:4:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2254:6:4",
                  },
                  scope: 603,
                  src: "2185:76:4",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 574,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "multicall",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 569,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 568,
                        name: "data",
                        nodeType: "VariableDeclaration",
                        scope: 574,
                        src: "2285:21:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier:
                            "t_array$_t_bytes_calldata_$dyn_calldata_ptr",
                          typeString: "bytes[]",
                        },
                        typeName: {
                          baseType: {
                            id: 566,
                            name: "bytes",
                            nodeType: "ElementaryTypeName",
                            src: "2285:5:4",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_storage_ptr",
                              typeString: "bytes",
                            },
                          },
                          id: 567,
                          length: null,
                          nodeType: "ArrayTypeName",
                          src: "2285:7:4",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            typeString: "bytes[]",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2284:23:4",
                  },
                  returnParameters: {
                    id: 573,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 572,
                        name: "results",
                        nodeType: "VariableDeclaration",
                        scope: 574,
                        src: "2325:22:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier:
                            "t_array$_t_bytes_memory_$dyn_memory_ptr",
                          typeString: "bytes[]",
                        },
                        typeName: {
                          baseType: {
                            id: 570,
                            name: "bytes",
                            nodeType: "ElementaryTypeName",
                            src: "2325:5:4",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes_storage_ptr",
                              typeString: "bytes",
                            },
                          },
                          id: 571,
                          length: null,
                          nodeType: "ArrayTypeName",
                          src: "2325:7:4",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            typeString: "bytes[]",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2324:24:4",
                  },
                  scope: 603,
                  src: "2266:83:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 581,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "content",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 577,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 576,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 581,
                        src: "2403:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 575,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2403:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2402:14:4",
                  },
                  returnParameters: {
                    id: 580,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 579,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 581,
                        src: "2440:7:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 578,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2440:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2439:9:4",
                  },
                  scope: 603,
                  src: "2386:63:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 588,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "multihash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 584,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 583,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 588,
                        src: "2473:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 582,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2473:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2472:14:4",
                  },
                  returnParameters: {
                    id: 587,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 586,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 588,
                        src: "2510:12:4",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_memory_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 585,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2510:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2509:14:4",
                  },
                  scope: 603,
                  src: "2454:70:4",
                  stateMutability: "view",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 595,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setContent",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 593,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 590,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 595,
                        src: "2549:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 589,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2549:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 592,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 595,
                        src: "2563:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 591,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2563:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2548:28:4",
                  },
                  returnParameters: {
                    id: 594,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2585:0:4",
                  },
                  scope: 603,
                  src: "2529:57:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
                {
                  body: null,
                  documentation: null,
                  id: 602,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setMultihash",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 600,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 597,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 602,
                        src: "2613:12:4",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 596,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2613:7:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 599,
                        name: "hash",
                        nodeType: "VariableDeclaration",
                        scope: 602,
                        src: "2627:19:4",
                        stateVariable: false,
                        storageLocation: "calldata",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes_calldata_ptr",
                          typeString: "bytes",
                        },
                        typeName: {
                          id: 598,
                          name: "bytes",
                          nodeType: "ElementaryTypeName",
                          src: "2627:5:4",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes_storage_ptr",
                            typeString: "bytes",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2612:35:4",
                  },
                  returnParameters: {
                    id: 601,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "2656:0:4",
                  },
                  scope: 603,
                  src: "2591:66:4",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "external",
                },
              ],
              scope: 604,
              src: "164:2495:4",
            },
          ],
          src: "0:2660:4",
        },
        compiler: {
          name: "solc",
          version: "0.5.8+commit.23d335f2.Emscripten.clang",
        },
        networks: {},
        schemaVersion: "3.0.16",
        updatedAt: "2020-02-10T19:24:14.594Z",
        devdoc: {
          methods: {},
        },
        userdoc: {
          methods: {},
          notice:
            "A generic resolver interface which includes all the functions including the ones deprecated",
        },
      };
    },
  });

  // node_modules/@ensdomains/ens/build/contracts/ReverseRegistrar.json
  var require_ReverseRegistrar = __commonJS({
    "node_modules/@ensdomains/ens/build/contracts/ReverseRegistrar.json"(
      exports,
      module
    ) {
      module.exports = {
        contractName: "ReverseRegistrar",
        abi: [
          {
            inputs: [
              {
                internalType: "contract ENS",
                name: "ensAddr",
                type: "address",
              },
              {
                internalType: "contract NameResolver",
                name: "resolverAddr",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "constructor",
          },
          {
            constant: true,
            inputs: [],
            name: "ADDR_REVERSE_NODE",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [],
            name: "defaultResolver",
            outputs: [
              {
                internalType: "contract NameResolver",
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: true,
            inputs: [],
            name: "ens",
            outputs: [
              {
                internalType: "contract ENS",
                name: "",
                type: "address",
              },
            ],
            payable: false,
            stateMutability: "view",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
            ],
            name: "claim",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                internalType: "address",
                name: "resolver",
                type: "address",
              },
            ],
            name: "claimWithResolver",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: false,
            inputs: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
            ],
            name: "setName",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            constant: true,
            inputs: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
            ],
            name: "node",
            outputs: [
              {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
              },
            ],
            payable: false,
            stateMutability: "pure",
            type: "function",
          },
        ],
        metadata:
          '{"compiler":{"version":"0.5.16+commit.9c3226ce"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract ENS","name":"ensAddr","type":"address"},{"internalType":"contract NameResolver","name":"resolverAddr","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[],"name":"ADDR_REVERSE_NODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"claim","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"claimWithResolver","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"defaultResolver","outputs":[{"internalType":"contract NameResolver","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"node","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"name","type":"string"}],"name":"setName","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"claim(address)":{"details":"Transfers ownership of the reverse ENS record associated with the     calling account.","params":{"owner":"The address to set as the owner of the reverse record in ENS."},"return":"The ENS node hash of the reverse record."},"claimWithResolver(address,address)":{"details":"Transfers ownership of the reverse ENS record associated with the     calling account.","params":{"owner":"The address to set as the owner of the reverse record in ENS.","resolver":"The address of the resolver to set; 0 to leave unchanged."},"return":"The ENS node hash of the reverse record."},"constructor":{"details":"Constructor","params":{"ensAddr":"The address of the ENS registry.","resolverAddr":"The address of the default reverse resolver."}},"node(address)":{"details":"Returns the node hash for a given account\'s reverse records.","params":{"addr":"The address to hash"},"return":"The ENS node hash."},"setName(string)":{"details":"Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.","params":{"name":"The name to set for this address."},"return":"The ENS node hash of the reverse record."}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol":"ReverseRegistrar"},"evmVersion":"istanbul","libraries":{},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"/Users/makoto/work/ens/ens/contracts/ENS.sol":{"keccak256":"0x10b88673d8c180cd62523be4fec7607c65594eb4f0c561fa0fbc0784422b4871","urls":["bzz-raw://b3de1882a4a1a1b13c27ee6dc04cc58c34ac392c80cad507de2cdfa8c02712fe","dweb:/ipfs/QmeKcaBF8QdJjXiqFrPJkAtK3et5kUL8XJrnHjwhAThRMT"]},"/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol":{"keccak256":"0x9c9d6e34ff144e8df8e7ae290a5c9a28437bf0f97f0fcf1cdce371260914c3ba","urls":["bzz-raw://433e7a35db75f7156263a40786522cf20ad374df6fd2ad8a872e62520334116e","dweb:/ipfs/Qmf6TX1oXrAT8yUET77DbpWRM8jYxtr3NCCMypwVVZTfLW"]}},"version":1}',
        bytecode:
          "0x608060405234801561001057600080fd5b50604051610e11380380610e118339818101604052604081101561003357600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561016657600080fd5b505afa15801561017a573d6000803e3d6000fd5b505050506040513d602081101561019057600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610293578073ffffffffffffffffffffffffffffffffffffffff16631e83409a336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b505050506040513d602081101561028057600080fd5b8101908080519060200190929190505050505b505050610b6c806102a56000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf8a2eb1161005b5780637cf8a2eb1461019c578063828eab0e146101ba578063bffbe61c14610204578063c47f00271461025c5761007d565b80630f5a5466146100825780631e83409a146100fa5780633f15457f14610152575b600080fd5b6100e46004803603604081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061032b565b6040518082815260200191505060405180910390f35b61013c6004803603602081101561011057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108b0565b6040518082815260200191505060405180910390f35b61015a6108c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a46108e9565b6040518082815260200191505060405180910390f35b6101c2610910565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102466004803603602081101561021a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610936565b6040518082815260200191505060405180910390f35b6103156004803603602081101561027257600080fd5b810190808035906020019064010000000081111561028f57600080fd5b8201836020820111156102a157600080fd5b803590602001918460018302840111640100000000831117156102c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610999565b6040518082815260200191505060405180910390f35b60008061033733610acd565b905060007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b82604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415801561055557506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d602081101561051457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610761573073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106a0576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85306040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561066057600080fd5b505af1158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b8101908080519060200190929190505050503090505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108a4576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85896040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d602081101561089157600080fd5b8101908080519060200190929190505050505b81935050505092915050565b60006108bd82600061032b565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61096583610acd565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000806109c830600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661032b565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221382856040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a5f578082015181840152602081019050610a44565b50505050905090810190601f168015610a8c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b5050505080915050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610b295760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610af3565b50602860002091505091905056fea265627a7a723158203c3a1e43dd29f27c43ee396cdbe4b2cee2e5b8b0cee99aecdde9c3342eea702264736f6c63430005100032",
        deployedBytecode:
          "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf8a2eb1161005b5780637cf8a2eb1461019c578063828eab0e146101ba578063bffbe61c14610204578063c47f00271461025c5761007d565b80630f5a5466146100825780631e83409a146100fa5780633f15457f14610152575b600080fd5b6100e46004803603604081101561009857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061032b565b6040518082815260200191505060405180910390f35b61013c6004803603602081101561011057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108b0565b6040518082815260200191505060405180910390f35b61015a6108c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a46108e9565b6040518082815260200191505060405180910390f35b6101c2610910565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102466004803603602081101561021a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610936565b6040518082815260200191505060405180910390f35b6103156004803603602081101561027257600080fd5b810190808035906020019064010000000081111561028f57600080fd5b8201836020820111156102a157600080fd5b803590602001918460018302840111640100000000831117156102c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610999565b6040518082815260200191505060405180910390f35b60008061033733610acd565b905060007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b82604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d602081101561042d57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415801561055557506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d602081101561051457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610761573073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106a0576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85306040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561066057600080fd5b505af1158015610674573d6000803e3d6000fd5b505050506040513d602081101561068a57600080fd5b8101908080519060200190929190505050503090505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83876040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561074857600080fd5b505af115801561075c573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108a4576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85896040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d602081101561089157600080fd5b8101908080519060200190929190505050505b81935050505092915050565b60006108bd82600061032b565b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61096583610acd565b6040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b6000806109c830600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661032b565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221382856040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a5f578082015181840152602081019050610a44565b50505050905090810190601f168015610a8c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b5050505080915050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610b295760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610af3565b50602860002091505091905056fea265627a7a723158203c3a1e43dd29f27c43ee396cdbe4b2cee2e5b8b0cee99aecdde9c3342eea702264736f6c63430005100032",
        sourceMap:
          "136:4188:9:-;;;546:391;8:9:-1;5:2;;;30:1;27;20:12;5:2;546:391:9;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;546:391:9;;;;;;;;;;;;;;;;;;;;;;;;;621:7;615:3;;:13;;;;;;;;;;;;;;;;;;656:12;638:15;;:30;;;;;;;;;;;;;;;;;;745:29;794:3;;;;;;;;;;;:9;;;244:66;804:17;;794:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;794:28:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;794:28:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;794:28:9;;;;;;;;;;;;;;;;745:78;;870:3;837:37;;845:12;837:37;;;833:98;;890:12;:18;;;909:10;890:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;890:30:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;890:30:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;890:30:9;;;;;;;;;;;;;;;;;833:98;546:391;;;136:4188;;;;;;",
        deployedSourceMap:
          "136:4188:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;136:4188:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1669:871;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1669:871:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1204:117;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1204:117:9;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;317:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;200:110;;;:::i;:::-;;;;;;;;;;;;;;;;;;;337:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3245:150;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3245:150:9;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2859:218;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2859:218:9;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2859:218:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2859:218:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2859:218:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2859:218:9;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1669:871;1745:7;1764:13;1780:26;1795:10;1780:14;:26::i;:::-;1764:42;;1816:12;244:66;1858:17;;1877:5;1841:42;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1841:42:9;;;1831:53;;;;;;1816:68;;1894:20;1917:3;;;;;;;;;;;:9;;;1927:4;1917:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1917:15:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1917:15:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1917:15:9;;;;;;;;;;;;;;;;1894:38;;2010:3;1990:24;;:8;:24;;;;:58;;;;;2030:3;;;;;;;;;;;:12;;;2043:4;2030:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2030:18:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2030:18:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2030:18:9;;;;;;;;;;;;;;;;2018:30;;:8;:30;;;;1990:58;1986:372;;;2157:4;2133:29;;:12;:29;;;2129:174;;2182:3;;;;;;;;;;;:19;;;244:66;2202:17;;2221:5;2236:4;2182:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2182:60:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2182:60:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2182:60:9;;;;;;;;;;;;;;;;;2283:4;2260:28;;2129:174;2316:3;;;;;;;;;;;:15;;;2332:4;2338:8;2316:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2316:31:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2316:31:9;;;;1986:372;2428:5;2412:21;;:12;:21;;;2408:104;;2449:3;;;;;;;;;;;:19;;;244:66;2469:17;;2488:5;2495;2449:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2449:52:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2449:52:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2449:52:9;;;;;;;;;;;;;;;;;2408:104;2529:4;2522:11;;;;;1669:871;;;;:::o;1204:117::-;1250:7;1276:38;1294:5;1309:3;1276:17;:38::i;:::-;1269:45;;1204:117;;;:::o;317:14::-;;;;;;;;;;;;;:::o;200:110::-;244:66;200:110;;;:::o;337:35::-;;;;;;;;;;;;;:::o;3245:150::-;3294:7;244:66;3347:17;;3366:20;3381:4;3366:14;:20::i;:::-;3330:57;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3330:57:9;;;3320:68;;;;;;3313:75;;3245:150;;;:::o;2859:218::-;2912:7;2931:12;2946:58;2972:4;2987:15;;;;;;;;;;;2946:17;:58::i;:::-;2931:73;;3014:15;;;;;;;;;;;:23;;;3038:4;3044;3014:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3014:35:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3014:35:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3014:35:9;;;;3066:4;3059:11;;;2859:218;;;:::o;3696:626::-;3756:11;3885:66;3980:2;3965:304;3991:1;3988;3985:8;3965:304;;;4028:1;4025;4021:9;4016:14;;4079:6;4073:3;4067:4;4063:14;4058:28;4055:1;4047:40;4122:4;4116;4112:15;4104:23;;4156:1;4153;4149:9;4144:14;;4207:6;4201:3;4195:4;4191:14;4186:28;4183:1;4175:40;4250:4;4244;4240:15;4232:23;;3965:304;;;3969:15;4303:2;4300:1;4290:16;4283:23;;3857:459;;;;:::o",
        source:
          "pragma solidity ^0.5.0;\n\nimport \"./ENS.sol\";\n\ncontract NameResolver {\n    function setName(bytes32 node, string memory name) public;\n}\n\ncontract ReverseRegistrar {\n    // namehash('addr.reverse')\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n\n    ENS public ens;\n    NameResolver public defaultResolver;\n\n    /**\n     * @dev Constructor\n     * @param ensAddr The address of the ENS registry.\n     * @param resolverAddr The address of the default reverse resolver.\n     */\n    constructor(ENS ensAddr, NameResolver resolverAddr) public {\n        ens = ensAddr;\n        defaultResolver = resolverAddr;\n\n        // Assign ownership of the reverse record to our deployer\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\n        if (address(oldRegistrar) != address(0x0)) {\n            oldRegistrar.claim(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claim(address owner) public returns (bytes32) {\n        return claimWithResolver(owner, address(0x0));\n    }\n\n    /**\n     * @dev Transfers ownership of the reverse ENS record associated with the\n     *      calling account.\n     * @param owner The address to set as the owner of the reverse record in ENS.\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\n     * @return The ENS node hash of the reverse record.\n     */\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\n        bytes32 label = sha3HexAddress(msg.sender);\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\n        address currentOwner = ens.owner(node);\n\n        // Update the resolver if required\n        if (resolver != address(0x0) && resolver != ens.resolver(node)) {\n            // Transfer the name to us first if it's not already\n            if (currentOwner != address(this)) {\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\n                currentOwner = address(this);\n            }\n            ens.setResolver(node, resolver);\n        }\n\n        // Update the owner if required\n        if (currentOwner != owner) {\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\n        }\n\n        return node;\n    }\n\n    /**\n     * @dev Sets the `name()` record for the reverse ENS record associated with\n     * the calling account. First updates the resolver to the default reverse\n     * resolver if necessary.\n     * @param name The name to set for this address.\n     * @return The ENS node hash of the reverse record.\n     */\n    function setName(string memory name) public returns (bytes32) {\n        bytes32 node = claimWithResolver(address(this), address(defaultResolver));\n        defaultResolver.setName(node, name);\n        return node;\n    }\n\n    /**\n     * @dev Returns the node hash for a given account's reverse records.\n     * @param addr The address to hash\n     * @return The ENS node hash.\n     */\n    function node(address addr) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\n    }\n\n    /**\n     * @dev An optimised function to compute the sha3 of the lower-case\n     *      hexadecimal representation of an Ethereum address.\n     * @param addr The address to hash\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\n     *         input address.\n     */\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\n        addr;\n        ret; // Stop warning us about unused variables\n        assembly {\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n\n            for { let i := 40 } gt(i, 0) { } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n\n            ret := keccak256(0, 40)\n        }\n    }\n}\n",
        sourcePath: "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
        ast: {
          absolutePath:
            "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
          exportedSymbols: {
            NameResolver: [2738],
            ReverseRegistrar: [2954],
          },
          id: 2955,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 2729,
              literals: ["solidity", "^", "0.5", ".0"],
              nodeType: "PragmaDirective",
              src: "0:23:9",
            },
            {
              absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
              file: "./ENS.sol",
              id: 2730,
              nodeType: "ImportDirective",
              scope: 2955,
              sourceUnit: 437,
              src: "25:19:9",
              symbolAliases: [],
              unitAlias: "",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "contract",
              documentation: null,
              fullyImplemented: false,
              id: 2738,
              linearizedBaseContracts: [2738],
              name: "NameResolver",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  body: null,
                  documentation: null,
                  id: 2737,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2735,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2732,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 2737,
                        src: "91:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2731,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "91:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2734,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 2737,
                        src: "105:18:9",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 2733,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "105:6:9",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "90:34:9",
                  },
                  returnParameters: {
                    id: 2736,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "131:0:9",
                  },
                  scope: 2738,
                  src: "74:58:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
              ],
              scope: 2955,
              src: "46:88:9",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "contract",
              documentation: null,
              fullyImplemented: true,
              id: 2954,
              linearizedBaseContracts: [2954],
              name: "ReverseRegistrar",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  constant: true,
                  id: 2741,
                  name: "ADDR_REVERSE_NODE",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "200:110:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32",
                  },
                  typeName: {
                    id: 2739,
                    name: "bytes32",
                    nodeType: "ElementaryTypeName",
                    src: "200:7:9",
                    typeDescriptions: {
                      typeIdentifier: "t_bytes32",
                      typeString: "bytes32",
                    },
                  },
                  value: {
                    argumentTypes: null,
                    hexValue:
                      "307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532",
                    id: 2740,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "244:66:9",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier:
                        "t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1",
                      typeString: "int_const 6595...(69 digits omitted)...3154",
                    },
                    value:
                      "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
                  },
                  visibility: "public",
                },
                {
                  constant: false,
                  id: 2743,
                  name: "ens",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "317:14:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_ENS_$436",
                    typeString: "contract ENS",
                  },
                  typeName: {
                    contractScope: null,
                    id: 2742,
                    name: "ENS",
                    nodeType: "UserDefinedTypeName",
                    referencedDeclaration: 436,
                    src: "317:3:9",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_ENS_$436",
                      typeString: "contract ENS",
                    },
                  },
                  value: null,
                  visibility: "public",
                },
                {
                  constant: false,
                  id: 2745,
                  name: "defaultResolver",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "337:35:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_NameResolver_$2738",
                    typeString: "contract NameResolver",
                  },
                  typeName: {
                    contractScope: null,
                    id: 2744,
                    name: "NameResolver",
                    nodeType: "UserDefinedTypeName",
                    referencedDeclaration: 2738,
                    src: "337:12:9",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_NameResolver_$2738",
                      typeString: "contract NameResolver",
                    },
                  },
                  value: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2785,
                    nodeType: "Block",
                    src: "605:332:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2754,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftHandSide: {
                            argumentTypes: null,
                            id: 2752,
                            name: "ens",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2743,
                            src: "615:3:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS",
                            },
                          },
                          nodeType: "Assignment",
                          operator: "=",
                          rightHandSide: {
                            argumentTypes: null,
                            id: 2753,
                            name: "ensAddr",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2747,
                            src: "621:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS",
                            },
                          },
                          src: "615:13:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS",
                          },
                        },
                        id: 2755,
                        nodeType: "ExpressionStatement",
                        src: "615:13:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2758,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftHandSide: {
                            argumentTypes: null,
                            id: 2756,
                            name: "defaultResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2745,
                            src: "638:15:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver",
                            },
                          },
                          nodeType: "Assignment",
                          operator: "=",
                          rightHandSide: {
                            argumentTypes: null,
                            id: 2757,
                            name: "resolverAddr",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2749,
                            src: "656:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver",
                            },
                          },
                          src: "638:30:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver",
                          },
                        },
                        id: 2759,
                        nodeType: "ExpressionStatement",
                        src: "638:30:9",
                      },
                      {
                        assignments: [2761],
                        declarations: [
                          {
                            constant: false,
                            id: 2761,
                            name: "oldRegistrar",
                            nodeType: "VariableDeclaration",
                            scope: 2785,
                            src: "745:29:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_contract$_ReverseRegistrar_$2954",
                              typeString: "contract ReverseRegistrar",
                            },
                            typeName: {
                              contractScope: null,
                              id: 2760,
                              name: "ReverseRegistrar",
                              nodeType: "UserDefinedTypeName",
                              referencedDeclaration: 2954,
                              src: "745:16:9",
                              typeDescriptions: {
                                typeIdentifier:
                                  "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2768,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2765,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "804:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2763,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "794:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS",
                                  },
                                },
                                id: 2764,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "owner",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 405,
                                src: "794:9:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                  typeString:
                                    "function (bytes32) view external returns (address)",
                                },
                              },
                              id: 2766,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "794:28:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            ],
                            id: 2762,
                            name: "ReverseRegistrar",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2954,
                            src: "777:16:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_type$_t_contract$_ReverseRegistrar_$2954_$",
                              typeString: "type(contract ReverseRegistrar)",
                            },
                          },
                          id: 2767,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "777:46:9",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_contract$_ReverseRegistrar_$2954",
                            typeString: "contract ReverseRegistrar",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "745:78:9",
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                          id: 2775,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2770,
                                name: "oldRegistrar",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2761,
                                src: "845:12:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar",
                                },
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier:
                                    "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar",
                                },
                              ],
                              id: 2769,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "837:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)",
                              },
                              typeName: "address",
                            },
                            id: 2771,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "837:21:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2773,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "870:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0",
                                },
                                value: "0x0",
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0",
                                },
                              ],
                              id: 2772,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "862:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)",
                              },
                              typeName: "address",
                            },
                            id: 2774,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "862:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable",
                            },
                          },
                          src: "837:37:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2784,
                        nodeType: "IfStatement",
                        src: "833:98:9",
                        trueBody: {
                          id: 2783,
                          nodeType: "Block",
                          src: "876:55:9",
                          statements: [
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    expression: {
                                      argumentTypes: null,
                                      id: 2779,
                                      name: "msg",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 3032,
                                      src: "909:3:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_magic_message",
                                        typeString: "msg",
                                      },
                                    },
                                    id: 2780,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    lValueRequested: false,
                                    memberName: "sender",
                                    nodeType: "MemberAccess",
                                    referencedDeclaration: null,
                                    src: "909:10:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address_payable",
                                      typeString: "address payable",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_address_payable",
                                      typeString: "address payable",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2776,
                                    name: "oldRegistrar",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2761,
                                    src: "890:12:9",
                                    typeDescriptions: {
                                      typeIdentifier:
                                        "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar",
                                    },
                                  },
                                  id: 2778,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "claim",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 2801,
                                  src: "890:18:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$",
                                    typeString:
                                      "function (address) external returns (bytes32)",
                                  },
                                },
                                id: 2781,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "890:30:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32",
                                },
                              },
                              id: 2782,
                              nodeType: "ExpressionStatement",
                              src: "890:30:9",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  documentation:
                    "@dev Constructor\n@param ensAddr The address of the ENS registry.\n@param resolverAddr The address of the default reverse resolver.",
                  id: 2786,
                  implemented: true,
                  kind: "constructor",
                  modifiers: [],
                  name: "",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2750,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2747,
                        name: "ensAddr",
                        nodeType: "VariableDeclaration",
                        scope: 2786,
                        src: "558:11:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS",
                        },
                        typeName: {
                          contractScope: null,
                          id: 2746,
                          name: "ENS",
                          nodeType: "UserDefinedTypeName",
                          referencedDeclaration: 436,
                          src: "558:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2749,
                        name: "resolverAddr",
                        nodeType: "VariableDeclaration",
                        scope: 2786,
                        src: "571:25:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver",
                        },
                        typeName: {
                          contractScope: null,
                          id: 2748,
                          name: "NameResolver",
                          nodeType: "UserDefinedTypeName",
                          referencedDeclaration: 2738,
                          src: "571:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "557:40:9",
                  },
                  returnParameters: {
                    id: 2751,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "605:0:9",
                  },
                  scope: 2954,
                  src: "546:391:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2800,
                    nodeType: "Block",
                    src: "1259:62:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2794,
                              name: "owner",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2788,
                              src: "1294:5:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  hexValue: "307830",
                                  id: 2796,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  kind: "number",
                                  lValueRequested: false,
                                  nodeType: "Literal",
                                  src: "1309:3:9",
                                  subdenomination: null,
                                  typeDescriptions: {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                  value: "0x0",
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                ],
                                id: 2795,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "1301:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2797,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "1301:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                              {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            ],
                            id: 2793,
                            name: "claimWithResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2894,
                            src: "1276:17:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address,address) returns (bytes32)",
                            },
                          },
                          id: 2798,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1276:38:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2792,
                        id: 2799,
                        nodeType: "Return",
                        src: "1269:45:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@return The ENS node hash of the reverse record.",
                  id: 2801,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "claim",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2789,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2788,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 2801,
                        src: "1219:13:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2787,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1219:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1218:15:9",
                  },
                  returnParameters: {
                    id: 2792,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2791,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2801,
                        src: "1250:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2790,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1250:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1249:9:9",
                  },
                  scope: 2954,
                  src: "1204:117:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2893,
                    nodeType: "Block",
                    src: "1754:786:9",
                    statements: [
                      {
                        assignments: [2811],
                        declarations: [
                          {
                            constant: false,
                            id: 2811,
                            name: "label",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1764:13:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2810,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "1764:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2816,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              expression: {
                                argumentTypes: null,
                                id: 2813,
                                name: "msg",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3032,
                                src: "1795:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_message",
                                  typeString: "msg",
                                },
                              },
                              id: 2814,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "sender",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "1795:10:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            ],
                            id: 2812,
                            name: "sha3HexAddress",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2953,
                            src: "1780:14:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address) pure returns (bytes32)",
                            },
                          },
                          id: 2815,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1780:26:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1764:42:9",
                      },
                      {
                        assignments: [2818],
                        declarations: [
                          {
                            constant: false,
                            id: 2818,
                            name: "node",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1816:12:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2817,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "1816:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2826,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2822,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "1858:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                                {
                                  argumentTypes: null,
                                  id: 2823,
                                  name: "label",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2811,
                                  src: "1877:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2820,
                                  name: "abi",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3019,
                                  src: "1841:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_magic_abi",
                                    typeString: "abi",
                                  },
                                },
                                id: 2821,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                memberName: "encodePacked",
                                nodeType: "MemberAccess",
                                referencedDeclaration: null,
                                src: "1841:16:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  typeString:
                                    "function () pure returns (bytes memory)",
                                },
                              },
                              id: 2824,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "1841:42:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            ],
                            id: 2819,
                            name: "keccak256",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 3026,
                            src: "1831:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              typeString:
                                "function (bytes memory) pure returns (bytes32)",
                            },
                          },
                          id: 2825,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1831:53:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1816:68:9",
                      },
                      {
                        assignments: [2828],
                        declarations: [
                          {
                            constant: false,
                            id: 2828,
                            name: "currentOwner",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1894:20:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            typeName: {
                              id: 2827,
                              name: "address",
                              nodeType: "ElementaryTypeName",
                              src: "1894:7:9",
                              stateMutability: "nonpayable",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2833,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2831,
                              name: "node",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2818,
                              src: "1927:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            ],
                            expression: {
                              argumentTypes: null,
                              id: 2829,
                              name: "ens",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2743,
                              src: "1917:3:9",
                              typeDescriptions: {
                                typeIdentifier: "t_contract$_ENS_$436",
                                typeString: "contract ENS",
                              },
                            },
                            id: 2830,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "owner",
                            nodeType: "MemberAccess",
                            referencedDeclaration: 405,
                            src: "1917:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              typeString:
                                "function (bytes32) view external returns (address)",
                            },
                          },
                          id: 2832,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1917:15:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1894:38:9",
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                          id: 2845,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            commonType: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            id: 2838,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            leftExpression: {
                              argumentTypes: null,
                              id: 2834,
                              name: "resolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2805,
                              src: "1990:8:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            nodeType: "BinaryOperation",
                            operator: "!=",
                            rightExpression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  hexValue: "307830",
                                  id: 2836,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  kind: "number",
                                  lValueRequested: false,
                                  nodeType: "Literal",
                                  src: "2010:3:9",
                                  subdenomination: null,
                                  typeDescriptions: {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                  value: "0x0",
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                ],
                                id: 2835,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2002:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2837,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2002:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                            src: "1990:24:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bool",
                              typeString: "bool",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "&&",
                          rightExpression: {
                            argumentTypes: null,
                            commonType: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            id: 2844,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            leftExpression: {
                              argumentTypes: null,
                              id: 2839,
                              name: "resolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2805,
                              src: "2018:8:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            nodeType: "BinaryOperation",
                            operator: "!=",
                            rightExpression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2842,
                                  name: "node",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2818,
                                  src: "2043:4:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2840,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2030:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS",
                                  },
                                },
                                id: 2841,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "resolver",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 412,
                                src: "2030:12:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                  typeString:
                                    "function (bytes32) view external returns (address)",
                                },
                              },
                              id: 2843,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2030:18:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            src: "2018:30:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bool",
                              typeString: "bool",
                            },
                          },
                          src: "1990:58:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2877,
                        nodeType: "IfStatement",
                        src: "1986:372:9",
                        trueBody: {
                          id: 2876,
                          nodeType: "Block",
                          src: "2050:308:9",
                          statements: [
                            {
                              condition: {
                                argumentTypes: null,
                                commonType: {
                                  typeIdentifier: "t_address",
                                  typeString: "address",
                                },
                                id: 2850,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                leftExpression: {
                                  argumentTypes: null,
                                  id: 2846,
                                  name: "currentOwner",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2828,
                                  src: "2133:12:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address",
                                  },
                                },
                                nodeType: "BinaryOperation",
                                operator: "!=",
                                rightExpression: {
                                  argumentTypes: null,
                                  arguments: [
                                    {
                                      argumentTypes: null,
                                      id: 2848,
                                      name: "this",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 3066,
                                      src: "2157:4:9",
                                      typeDescriptions: {
                                        typeIdentifier:
                                          "t_contract$_ReverseRegistrar_$2954",
                                        typeString: "contract ReverseRegistrar",
                                      },
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: [
                                      {
                                        typeIdentifier:
                                          "t_contract$_ReverseRegistrar_$2954",
                                        typeString: "contract ReverseRegistrar",
                                      },
                                    ],
                                    id: 2847,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: true,
                                    lValueRequested: false,
                                    nodeType: "ElementaryTypeNameExpression",
                                    src: "2149:7:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_type$_t_address_$",
                                      typeString: "type(address)",
                                    },
                                    typeName: "address",
                                  },
                                  id: 2849,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  kind: "typeConversion",
                                  lValueRequested: false,
                                  names: [],
                                  nodeType: "FunctionCall",
                                  src: "2149:13:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address",
                                  },
                                },
                                src: "2133:29:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bool",
                                  typeString: "bool",
                                },
                              },
                              falseBody: null,
                              id: 2868,
                              nodeType: "IfStatement",
                              src: "2129:174:9",
                              trueBody: {
                                id: 2867,
                                nodeType: "Block",
                                src: "2164:139:9",
                                statements: [
                                  {
                                    expression: {
                                      argumentTypes: null,
                                      arguments: [
                                        {
                                          argumentTypes: null,
                                          id: 2854,
                                          name: "ADDR_REVERSE_NODE",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2741,
                                          src: "2202:17:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                        },
                                        {
                                          argumentTypes: null,
                                          id: 2855,
                                          name: "label",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2811,
                                          src: "2221:5:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                        },
                                        {
                                          argumentTypes: null,
                                          arguments: [
                                            {
                                              argumentTypes: null,
                                              id: 2857,
                                              name: "this",
                                              nodeType: "Identifier",
                                              overloadedDeclarations: [],
                                              referencedDeclaration: 3066,
                                              src: "2236:4:9",
                                              typeDescriptions: {
                                                typeIdentifier:
                                                  "t_contract$_ReverseRegistrar_$2954",
                                                typeString:
                                                  "contract ReverseRegistrar",
                                              },
                                            },
                                          ],
                                          expression: {
                                            argumentTypes: [
                                              {
                                                typeIdentifier:
                                                  "t_contract$_ReverseRegistrar_$2954",
                                                typeString:
                                                  "contract ReverseRegistrar",
                                              },
                                            ],
                                            id: 2856,
                                            isConstant: false,
                                            isLValue: false,
                                            isPure: true,
                                            lValueRequested: false,
                                            nodeType:
                                              "ElementaryTypeNameExpression",
                                            src: "2228:7:9",
                                            typeDescriptions: {
                                              typeIdentifier:
                                                "t_type$_t_address_$",
                                              typeString: "type(address)",
                                            },
                                            typeName: "address",
                                          },
                                          id: 2858,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: false,
                                          kind: "typeConversion",
                                          lValueRequested: false,
                                          names: [],
                                          nodeType: "FunctionCall",
                                          src: "2228:13:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_address",
                                            typeString: "address",
                                          },
                                        },
                                      ],
                                      expression: {
                                        argumentTypes: [
                                          {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                          {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                          {
                                            typeIdentifier: "t_address",
                                            typeString: "address",
                                          },
                                        ],
                                        expression: {
                                          argumentTypes: null,
                                          id: 2851,
                                          name: "ens",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2743,
                                          src: "2182:3:9",
                                          typeDescriptions: {
                                            typeIdentifier:
                                              "t_contract$_ENS_$436",
                                            typeString: "contract ENS",
                                          },
                                        },
                                        id: 2853,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        lValueRequested: false,
                                        memberName: "setSubnodeOwner",
                                        nodeType: "MemberAccess",
                                        referencedDeclaration: 370,
                                        src: "2182:19:9",
                                        typeDescriptions: {
                                          typeIdentifier:
                                            "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                          typeString:
                                            "function (bytes32,bytes32,address) external returns (bytes32)",
                                        },
                                      },
                                      id: 2859,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      kind: "functionCall",
                                      lValueRequested: false,
                                      names: [],
                                      nodeType: "FunctionCall",
                                      src: "2182:60:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_bytes32",
                                        typeString: "bytes32",
                                      },
                                    },
                                    id: 2860,
                                    nodeType: "ExpressionStatement",
                                    src: "2182:60:9",
                                  },
                                  {
                                    expression: {
                                      argumentTypes: null,
                                      id: 2865,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      lValueRequested: false,
                                      leftHandSide: {
                                        argumentTypes: null,
                                        id: 2861,
                                        name: "currentOwner",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2828,
                                        src: "2260:12:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address",
                                        },
                                      },
                                      nodeType: "Assignment",
                                      operator: "=",
                                      rightHandSide: {
                                        argumentTypes: null,
                                        arguments: [
                                          {
                                            argumentTypes: null,
                                            id: 2863,
                                            name: "this",
                                            nodeType: "Identifier",
                                            overloadedDeclarations: [],
                                            referencedDeclaration: 3066,
                                            src: "2283:4:9",
                                            typeDescriptions: {
                                              typeIdentifier:
                                                "t_contract$_ReverseRegistrar_$2954",
                                              typeString:
                                                "contract ReverseRegistrar",
                                            },
                                          },
                                        ],
                                        expression: {
                                          argumentTypes: [
                                            {
                                              typeIdentifier:
                                                "t_contract$_ReverseRegistrar_$2954",
                                              typeString:
                                                "contract ReverseRegistrar",
                                            },
                                          ],
                                          id: 2862,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: true,
                                          lValueRequested: false,
                                          nodeType:
                                            "ElementaryTypeNameExpression",
                                          src: "2275:7:9",
                                          typeDescriptions: {
                                            typeIdentifier:
                                              "t_type$_t_address_$",
                                            typeString: "type(address)",
                                          },
                                          typeName: "address",
                                        },
                                        id: 2864,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        kind: "typeConversion",
                                        lValueRequested: false,
                                        names: [],
                                        nodeType: "FunctionCall",
                                        src: "2275:13:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address",
                                        },
                                      },
                                      src: "2260:28:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    },
                                    id: 2866,
                                    nodeType: "ExpressionStatement",
                                    src: "2260:28:9",
                                  },
                                ],
                              },
                            },
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2872,
                                    name: "node",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2818,
                                    src: "2332:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2873,
                                    name: "resolver",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2805,
                                    src: "2338:8:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2869,
                                    name: "ens",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2743,
                                    src: "2316:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ENS_$436",
                                      typeString: "contract ENS",
                                    },
                                  },
                                  id: 2871,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "setResolver",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 377,
                                  src: "2316:15:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                                    typeString:
                                      "function (bytes32,address) external",
                                  },
                                },
                                id: 2874,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2316:31:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_tuple$__$",
                                  typeString: "tuple()",
                                },
                              },
                              id: 2875,
                              nodeType: "ExpressionStatement",
                              src: "2316:31:9",
                            },
                          ],
                        },
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                          id: 2880,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2878,
                            name: "currentOwner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2828,
                            src: "2412:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            id: 2879,
                            name: "owner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2803,
                            src: "2428:5:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          src: "2412:21:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2890,
                        nodeType: "IfStatement",
                        src: "2408:104:9",
                        trueBody: {
                          id: 2889,
                          nodeType: "Block",
                          src: "2435:77:9",
                          statements: [
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2884,
                                    name: "ADDR_REVERSE_NODE",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2741,
                                    src: "2469:17:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2885,
                                    name: "label",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2811,
                                    src: "2488:5:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2886,
                                    name: "owner",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2803,
                                    src: "2495:5:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2881,
                                    name: "ens",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2743,
                                    src: "2449:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ENS_$436",
                                      typeString: "contract ENS",
                                    },
                                  },
                                  id: 2883,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "setSubnodeOwner",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 370,
                                  src: "2449:19:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                    typeString:
                                      "function (bytes32,bytes32,address) external returns (bytes32)",
                                  },
                                },
                                id: 2887,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2449:52:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32",
                                },
                              },
                              id: 2888,
                              nodeType: "ExpressionStatement",
                              src: "2449:52:9",
                            },
                          ],
                        },
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2891,
                          name: "node",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2818,
                          src: "2529:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2809,
                        id: 2892,
                        nodeType: "Return",
                        src: "2522:11:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@param resolver The address of the resolver to set; 0 to leave unchanged.\n@return The ENS node hash of the reverse record.",
                  id: 2894,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "claimWithResolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2806,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2803,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1696:13:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2802,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1696:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2805,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1711:16:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2804,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1711:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1695:33:9",
                  },
                  returnParameters: {
                    id: 2809,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2808,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1745:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2807,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1745:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1744:9:9",
                  },
                  scope: 2954,
                  src: "1669:871:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2921,
                    nodeType: "Block",
                    src: "2921:156:9",
                    statements: [
                      {
                        assignments: [2902],
                        declarations: [
                          {
                            constant: false,
                            id: 2902,
                            name: "node",
                            nodeType: "VariableDeclaration",
                            scope: 2921,
                            src: "2931:12:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2901,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "2931:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2911,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2905,
                                  name: "this",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3066,
                                  src: "2972:4:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier:
                                      "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar",
                                  },
                                ],
                                id: 2904,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2964:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2906,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2964:13:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2908,
                                  name: "defaultResolver",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2745,
                                  src: "2987:15:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_contract$_NameResolver_$2738",
                                    typeString: "contract NameResolver",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier:
                                      "t_contract$_NameResolver_$2738",
                                    typeString: "contract NameResolver",
                                  },
                                ],
                                id: 2907,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2979:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2909,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2979:24:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            ],
                            id: 2903,
                            name: "claimWithResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2894,
                            src: "2946:17:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address,address) returns (bytes32)",
                            },
                          },
                          id: 2910,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "2946:58:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "2931:73:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2915,
                              name: "node",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2902,
                              src: "3038:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            {
                              argumentTypes: null,
                              id: 2916,
                              name: "name",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2896,
                              src: "3044:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_string_memory_ptr",
                                typeString: "string memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                              {
                                typeIdentifier: "t_string_memory_ptr",
                                typeString: "string memory",
                              },
                            ],
                            expression: {
                              argumentTypes: null,
                              id: 2912,
                              name: "defaultResolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2745,
                              src: "3014:15:9",
                              typeDescriptions: {
                                typeIdentifier:
                                  "t_contract$_NameResolver_$2738",
                                typeString: "contract NameResolver",
                              },
                            },
                            id: 2914,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "setName",
                            nodeType: "MemberAccess",
                            referencedDeclaration: 2737,
                            src: "3014:23:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$",
                              typeString:
                                "function (bytes32,string memory) external",
                            },
                          },
                          id: 2917,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "3014:35:9",
                          typeDescriptions: {
                            typeIdentifier: "t_tuple$__$",
                            typeString: "tuple()",
                          },
                        },
                        id: 2918,
                        nodeType: "ExpressionStatement",
                        src: "3014:35:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2919,
                          name: "node",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2902,
                          src: "3066:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2900,
                        id: 2920,
                        nodeType: "Return",
                        src: "3059:11:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Sets the `name()` record for the reverse ENS record associated with\nthe calling account. First updates the resolver to the default reverse\nresolver if necessary.\n@param name The name to set for this address.\n@return The ENS node hash of the reverse record.",
                  id: 2922,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2897,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2896,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 2922,
                        src: "2876:18:9",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 2895,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2876:6:9",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2875:20:9",
                  },
                  returnParameters: {
                    id: 2900,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2899,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2922,
                        src: "2912:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2898,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2912:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2911:9:9",
                  },
                  scope: 2954,
                  src: "2859:218:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2939,
                    nodeType: "Block",
                    src: "3303:92:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2932,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "3347:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                                {
                                  argumentTypes: null,
                                  arguments: [
                                    {
                                      argumentTypes: null,
                                      id: 2934,
                                      name: "addr",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 2924,
                                      src: "3381:4:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: [
                                      {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    ],
                                    id: 2933,
                                    name: "sha3HexAddress",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2953,
                                    src: "3366:14:9",
                                    typeDescriptions: {
                                      typeIdentifier:
                                        "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                                      typeString:
                                        "function (address) pure returns (bytes32)",
                                    },
                                  },
                                  id: 2935,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  kind: "functionCall",
                                  lValueRequested: false,
                                  names: [],
                                  nodeType: "FunctionCall",
                                  src: "3366:20:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2930,
                                  name: "abi",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3019,
                                  src: "3330:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_magic_abi",
                                    typeString: "abi",
                                  },
                                },
                                id: 2931,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                memberName: "encodePacked",
                                nodeType: "MemberAccess",
                                referencedDeclaration: null,
                                src: "3330:16:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  typeString:
                                    "function () pure returns (bytes memory)",
                                },
                              },
                              id: 2936,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "3330:57:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            ],
                            id: 2929,
                            name: "keccak256",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 3026,
                            src: "3320:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              typeString:
                                "function (bytes memory) pure returns (bytes32)",
                            },
                          },
                          id: 2937,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "3320:68:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2928,
                        id: 2938,
                        nodeType: "Return",
                        src: "3313:75:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Returns the node hash for a given account's reverse records.\n@param addr The address to hash\n@return The ENS node hash.",
                  id: 2940,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "node",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2925,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2924,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 2940,
                        src: "3259:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2923,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "3259:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3258:14:9",
                  },
                  returnParameters: {
                    id: 2928,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2927,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2940,
                        src: "3294:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2926,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "3294:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3293:9:9",
                  },
                  scope: 2954,
                  src: "3245:150:9",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2952,
                    nodeType: "Block",
                    src: "3769:553:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2947,
                          name: "addr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2942,
                          src: "3779:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        id: 2948,
                        nodeType: "ExpressionStatement",
                        src: "3779:4:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2949,
                          name: "ret",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2945,
                          src: "3793:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        id: 2950,
                        nodeType: "ExpressionStatement",
                        src: "3793:3:9",
                      },
                      {
                        externalReferences: [
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4116:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4104:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4232:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4067:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4244:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            ret: {
                              declaration: 2945,
                              isOffset: false,
                              isSlot: false,
                              src: "4283:3:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4195:4:9",
                              valueSize: 1,
                            },
                          },
                        ],
                        id: 2951,
                        nodeType: "InlineAssembly",
                        operations:
                          "{\n    let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n    for { let i := 40 } gt(i, 0) { }\n    {\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n    }\n    ret := keccak256(0, 40)\n}",
                        src: "3848:468:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev An optimised function to compute the sha3 of the lower-case\n     hexadecimal representation of an Ethereum address.\n@param addr The address to hash\n@return The SHA3 hash of the lower-case hexadecimal encoding of the\n        input address.",
                  id: 2953,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "sha3HexAddress",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2943,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2942,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 2953,
                        src: "3720:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2941,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "3720:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3719:14:9",
                  },
                  returnParameters: {
                    id: 2946,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2945,
                        name: "ret",
                        nodeType: "VariableDeclaration",
                        scope: 2953,
                        src: "3756:11:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2944,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "3756:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3755:13:9",
                  },
                  scope: 2954,
                  src: "3696:626:9",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "private",
                },
              ],
              scope: 2955,
              src: "136:4188:9",
            },
          ],
          src: "0:4325:9",
        },
        legacyAST: {
          absolutePath:
            "/Users/makoto/work/ens/ens/contracts/ReverseRegistrar.sol",
          exportedSymbols: {
            NameResolver: [2738],
            ReverseRegistrar: [2954],
          },
          id: 2955,
          nodeType: "SourceUnit",
          nodes: [
            {
              id: 2729,
              literals: ["solidity", "^", "0.5", ".0"],
              nodeType: "PragmaDirective",
              src: "0:23:9",
            },
            {
              absolutePath: "/Users/makoto/work/ens/ens/contracts/ENS.sol",
              file: "./ENS.sol",
              id: 2730,
              nodeType: "ImportDirective",
              scope: 2955,
              sourceUnit: 437,
              src: "25:19:9",
              symbolAliases: [],
              unitAlias: "",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "contract",
              documentation: null,
              fullyImplemented: false,
              id: 2738,
              linearizedBaseContracts: [2738],
              name: "NameResolver",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  body: null,
                  documentation: null,
                  id: 2737,
                  implemented: false,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2735,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2732,
                        name: "node",
                        nodeType: "VariableDeclaration",
                        scope: 2737,
                        src: "91:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2731,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "91:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2734,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 2737,
                        src: "105:18:9",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 2733,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "105:6:9",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "90:34:9",
                  },
                  returnParameters: {
                    id: 2736,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "131:0:9",
                  },
                  scope: 2738,
                  src: "74:58:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
              ],
              scope: 2955,
              src: "46:88:9",
            },
            {
              baseContracts: [],
              contractDependencies: [],
              contractKind: "contract",
              documentation: null,
              fullyImplemented: true,
              id: 2954,
              linearizedBaseContracts: [2954],
              name: "ReverseRegistrar",
              nodeType: "ContractDefinition",
              nodes: [
                {
                  constant: true,
                  id: 2741,
                  name: "ADDR_REVERSE_NODE",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "200:110:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_bytes32",
                    typeString: "bytes32",
                  },
                  typeName: {
                    id: 2739,
                    name: "bytes32",
                    nodeType: "ElementaryTypeName",
                    src: "200:7:9",
                    typeDescriptions: {
                      typeIdentifier: "t_bytes32",
                      typeString: "bytes32",
                    },
                  },
                  value: {
                    argumentTypes: null,
                    hexValue:
                      "307839316431373737373831383834643033613637353761383033393936653338646532613432393637666233376565616361373237323932373130323561396532",
                    id: 2740,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "244:66:9",
                    subdenomination: null,
                    typeDescriptions: {
                      typeIdentifier:
                        "t_rational_65955458610802586644366824307633271870356699036341805474246458084352783133154_by_1",
                      typeString: "int_const 6595...(69 digits omitted)...3154",
                    },
                    value:
                      "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
                  },
                  visibility: "public",
                },
                {
                  constant: false,
                  id: 2743,
                  name: "ens",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "317:14:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_ENS_$436",
                    typeString: "contract ENS",
                  },
                  typeName: {
                    contractScope: null,
                    id: 2742,
                    name: "ENS",
                    nodeType: "UserDefinedTypeName",
                    referencedDeclaration: 436,
                    src: "317:3:9",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_ENS_$436",
                      typeString: "contract ENS",
                    },
                  },
                  value: null,
                  visibility: "public",
                },
                {
                  constant: false,
                  id: 2745,
                  name: "defaultResolver",
                  nodeType: "VariableDeclaration",
                  scope: 2954,
                  src: "337:35:9",
                  stateVariable: true,
                  storageLocation: "default",
                  typeDescriptions: {
                    typeIdentifier: "t_contract$_NameResolver_$2738",
                    typeString: "contract NameResolver",
                  },
                  typeName: {
                    contractScope: null,
                    id: 2744,
                    name: "NameResolver",
                    nodeType: "UserDefinedTypeName",
                    referencedDeclaration: 2738,
                    src: "337:12:9",
                    typeDescriptions: {
                      typeIdentifier: "t_contract$_NameResolver_$2738",
                      typeString: "contract NameResolver",
                    },
                  },
                  value: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2785,
                    nodeType: "Block",
                    src: "605:332:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2754,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftHandSide: {
                            argumentTypes: null,
                            id: 2752,
                            name: "ens",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2743,
                            src: "615:3:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS",
                            },
                          },
                          nodeType: "Assignment",
                          operator: "=",
                          rightHandSide: {
                            argumentTypes: null,
                            id: 2753,
                            name: "ensAddr",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2747,
                            src: "621:7:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_ENS_$436",
                              typeString: "contract ENS",
                            },
                          },
                          src: "615:13:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS",
                          },
                        },
                        id: 2755,
                        nodeType: "ExpressionStatement",
                        src: "615:13:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2758,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftHandSide: {
                            argumentTypes: null,
                            id: 2756,
                            name: "defaultResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2745,
                            src: "638:15:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver",
                            },
                          },
                          nodeType: "Assignment",
                          operator: "=",
                          rightHandSide: {
                            argumentTypes: null,
                            id: 2757,
                            name: "resolverAddr",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2749,
                            src: "656:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_contract$_NameResolver_$2738",
                              typeString: "contract NameResolver",
                            },
                          },
                          src: "638:30:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver",
                          },
                        },
                        id: 2759,
                        nodeType: "ExpressionStatement",
                        src: "638:30:9",
                      },
                      {
                        assignments: [2761],
                        declarations: [
                          {
                            constant: false,
                            id: 2761,
                            name: "oldRegistrar",
                            nodeType: "VariableDeclaration",
                            scope: 2785,
                            src: "745:29:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_contract$_ReverseRegistrar_$2954",
                              typeString: "contract ReverseRegistrar",
                            },
                            typeName: {
                              contractScope: null,
                              id: 2760,
                              name: "ReverseRegistrar",
                              nodeType: "UserDefinedTypeName",
                              referencedDeclaration: 2954,
                              src: "745:16:9",
                              typeDescriptions: {
                                typeIdentifier:
                                  "t_contract$_ReverseRegistrar_$2954",
                                typeString: "contract ReverseRegistrar",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2768,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2765,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "804:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2763,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "794:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS",
                                  },
                                },
                                id: 2764,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "owner",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 405,
                                src: "794:9:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                  typeString:
                                    "function (bytes32) view external returns (address)",
                                },
                              },
                              id: 2766,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "794:28:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            ],
                            id: 2762,
                            name: "ReverseRegistrar",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2954,
                            src: "777:16:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_type$_t_contract$_ReverseRegistrar_$2954_$",
                              typeString: "type(contract ReverseRegistrar)",
                            },
                          },
                          id: 2767,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "typeConversion",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "777:46:9",
                          typeDescriptions: {
                            typeIdentifier:
                              "t_contract$_ReverseRegistrar_$2954",
                            typeString: "contract ReverseRegistrar",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "745:78:9",
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                          id: 2775,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                id: 2770,
                                name: "oldRegistrar",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 2761,
                                src: "845:12:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar",
                                },
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier:
                                    "t_contract$_ReverseRegistrar_$2954",
                                  typeString: "contract ReverseRegistrar",
                                },
                              ],
                              id: 2769,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "837:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)",
                              },
                              typeName: "address",
                            },
                            id: 2771,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "837:21:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            arguments: [
                              {
                                argumentTypes: null,
                                hexValue: "307830",
                                id: 2773,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "870:3:9",
                                subdenomination: null,
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0",
                                },
                                value: "0x0",
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0",
                                },
                              ],
                              id: 2772,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              lValueRequested: false,
                              nodeType: "ElementaryTypeNameExpression",
                              src: "862:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_type$_t_address_$",
                                typeString: "type(address)",
                              },
                              typeName: "address",
                            },
                            id: 2774,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "typeConversion",
                            lValueRequested: false,
                            names: [],
                            nodeType: "FunctionCall",
                            src: "862:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address_payable",
                              typeString: "address payable",
                            },
                          },
                          src: "837:37:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2784,
                        nodeType: "IfStatement",
                        src: "833:98:9",
                        trueBody: {
                          id: 2783,
                          nodeType: "Block",
                          src: "876:55:9",
                          statements: [
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    expression: {
                                      argumentTypes: null,
                                      id: 2779,
                                      name: "msg",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 3032,
                                      src: "909:3:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_magic_message",
                                        typeString: "msg",
                                      },
                                    },
                                    id: 2780,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: false,
                                    lValueRequested: false,
                                    memberName: "sender",
                                    nodeType: "MemberAccess",
                                    referencedDeclaration: null,
                                    src: "909:10:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address_payable",
                                      typeString: "address payable",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_address_payable",
                                      typeString: "address payable",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2776,
                                    name: "oldRegistrar",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2761,
                                    src: "890:12:9",
                                    typeDescriptions: {
                                      typeIdentifier:
                                        "t_contract$_ReverseRegistrar_$2954",
                                      typeString: "contract ReverseRegistrar",
                                    },
                                  },
                                  id: 2778,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "claim",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 2801,
                                  src: "890:18:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_address_$returns$_t_bytes32_$",
                                    typeString:
                                      "function (address) external returns (bytes32)",
                                  },
                                },
                                id: 2781,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "890:30:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32",
                                },
                              },
                              id: 2782,
                              nodeType: "ExpressionStatement",
                              src: "890:30:9",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  documentation:
                    "@dev Constructor\n@param ensAddr The address of the ENS registry.\n@param resolverAddr The address of the default reverse resolver.",
                  id: 2786,
                  implemented: true,
                  kind: "constructor",
                  modifiers: [],
                  name: "",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2750,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2747,
                        name: "ensAddr",
                        nodeType: "VariableDeclaration",
                        scope: 2786,
                        src: "558:11:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_ENS_$436",
                          typeString: "contract ENS",
                        },
                        typeName: {
                          contractScope: null,
                          id: 2746,
                          name: "ENS",
                          nodeType: "UserDefinedTypeName",
                          referencedDeclaration: 436,
                          src: "558:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_ENS_$436",
                            typeString: "contract ENS",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2749,
                        name: "resolverAddr",
                        nodeType: "VariableDeclaration",
                        scope: 2786,
                        src: "571:25:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_contract$_NameResolver_$2738",
                          typeString: "contract NameResolver",
                        },
                        typeName: {
                          contractScope: null,
                          id: 2748,
                          name: "NameResolver",
                          nodeType: "UserDefinedTypeName",
                          referencedDeclaration: 2738,
                          src: "571:12:9",
                          typeDescriptions: {
                            typeIdentifier: "t_contract$_NameResolver_$2738",
                            typeString: "contract NameResolver",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "557:40:9",
                  },
                  returnParameters: {
                    id: 2751,
                    nodeType: "ParameterList",
                    parameters: [],
                    src: "605:0:9",
                  },
                  scope: 2954,
                  src: "546:391:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2800,
                    nodeType: "Block",
                    src: "1259:62:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2794,
                              name: "owner",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2788,
                              src: "1294:5:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  hexValue: "307830",
                                  id: 2796,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  kind: "number",
                                  lValueRequested: false,
                                  nodeType: "Literal",
                                  src: "1309:3:9",
                                  subdenomination: null,
                                  typeDescriptions: {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                  value: "0x0",
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                ],
                                id: 2795,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "1301:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2797,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "1301:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                              {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            ],
                            id: 2793,
                            name: "claimWithResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2894,
                            src: "1276:17:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address,address) returns (bytes32)",
                            },
                          },
                          id: 2798,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1276:38:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2792,
                        id: 2799,
                        nodeType: "Return",
                        src: "1269:45:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@return The ENS node hash of the reverse record.",
                  id: 2801,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "claim",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2789,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2788,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 2801,
                        src: "1219:13:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2787,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1219:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1218:15:9",
                  },
                  returnParameters: {
                    id: 2792,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2791,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2801,
                        src: "1250:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2790,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1250:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1249:9:9",
                  },
                  scope: 2954,
                  src: "1204:117:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2893,
                    nodeType: "Block",
                    src: "1754:786:9",
                    statements: [
                      {
                        assignments: [2811],
                        declarations: [
                          {
                            constant: false,
                            id: 2811,
                            name: "label",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1764:13:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2810,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "1764:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2816,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              expression: {
                                argumentTypes: null,
                                id: 2813,
                                name: "msg",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 3032,
                                src: "1795:3:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_magic_message",
                                  typeString: "msg",
                                },
                              },
                              id: 2814,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberName: "sender",
                              nodeType: "MemberAccess",
                              referencedDeclaration: null,
                              src: "1795:10:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            ],
                            id: 2812,
                            name: "sha3HexAddress",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2953,
                            src: "1780:14:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address) pure returns (bytes32)",
                            },
                          },
                          id: 2815,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1780:26:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1764:42:9",
                      },
                      {
                        assignments: [2818],
                        declarations: [
                          {
                            constant: false,
                            id: 2818,
                            name: "node",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1816:12:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2817,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "1816:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2826,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2822,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "1858:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                                {
                                  argumentTypes: null,
                                  id: 2823,
                                  name: "label",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2811,
                                  src: "1877:5:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2820,
                                  name: "abi",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3019,
                                  src: "1841:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_magic_abi",
                                    typeString: "abi",
                                  },
                                },
                                id: 2821,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                memberName: "encodePacked",
                                nodeType: "MemberAccess",
                                referencedDeclaration: null,
                                src: "1841:16:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  typeString:
                                    "function () pure returns (bytes memory)",
                                },
                              },
                              id: 2824,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "1841:42:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            ],
                            id: 2819,
                            name: "keccak256",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 3026,
                            src: "1831:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              typeString:
                                "function (bytes memory) pure returns (bytes32)",
                            },
                          },
                          id: 2825,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1831:53:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1816:68:9",
                      },
                      {
                        assignments: [2828],
                        declarations: [
                          {
                            constant: false,
                            id: 2828,
                            name: "currentOwner",
                            nodeType: "VariableDeclaration",
                            scope: 2893,
                            src: "1894:20:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            typeName: {
                              id: 2827,
                              name: "address",
                              nodeType: "ElementaryTypeName",
                              src: "1894:7:9",
                              stateMutability: "nonpayable",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2833,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2831,
                              name: "node",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2818,
                              src: "1927:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            ],
                            expression: {
                              argumentTypes: null,
                              id: 2829,
                              name: "ens",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2743,
                              src: "1917:3:9",
                              typeDescriptions: {
                                typeIdentifier: "t_contract$_ENS_$436",
                                typeString: "contract ENS",
                              },
                            },
                            id: 2830,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "owner",
                            nodeType: "MemberAccess",
                            referencedDeclaration: 405,
                            src: "1917:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              typeString:
                                "function (bytes32) view external returns (address)",
                            },
                          },
                          id: 2832,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "1917:15:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "1894:38:9",
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                          id: 2845,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            commonType: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            id: 2838,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            leftExpression: {
                              argumentTypes: null,
                              id: 2834,
                              name: "resolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2805,
                              src: "1990:8:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            nodeType: "BinaryOperation",
                            operator: "!=",
                            rightExpression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  hexValue: "307830",
                                  id: 2836,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: true,
                                  kind: "number",
                                  lValueRequested: false,
                                  nodeType: "Literal",
                                  src: "2010:3:9",
                                  subdenomination: null,
                                  typeDescriptions: {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                  value: "0x0",
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_rational_0_by_1",
                                    typeString: "int_const 0",
                                  },
                                ],
                                id: 2835,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2002:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2837,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2002:12:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address_payable",
                                typeString: "address payable",
                              },
                            },
                            src: "1990:24:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bool",
                              typeString: "bool",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "&&",
                          rightExpression: {
                            argumentTypes: null,
                            commonType: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                            id: 2844,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            leftExpression: {
                              argumentTypes: null,
                              id: 2839,
                              name: "resolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2805,
                              src: "2018:8:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            nodeType: "BinaryOperation",
                            operator: "!=",
                            rightExpression: {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2842,
                                  name: "node",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2818,
                                  src: "2043:4:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2840,
                                  name: "ens",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2743,
                                  src: "2030:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_contract$_ENS_$436",
                                    typeString: "contract ENS",
                                  },
                                },
                                id: 2841,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                memberName: "resolver",
                                nodeType: "MemberAccess",
                                referencedDeclaration: 412,
                                src: "2030:12:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                                  typeString:
                                    "function (bytes32) view external returns (address)",
                                },
                              },
                              id: 2843,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2030:18:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            src: "2018:30:9",
                            typeDescriptions: {
                              typeIdentifier: "t_bool",
                              typeString: "bool",
                            },
                          },
                          src: "1990:58:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2877,
                        nodeType: "IfStatement",
                        src: "1986:372:9",
                        trueBody: {
                          id: 2876,
                          nodeType: "Block",
                          src: "2050:308:9",
                          statements: [
                            {
                              condition: {
                                argumentTypes: null,
                                commonType: {
                                  typeIdentifier: "t_address",
                                  typeString: "address",
                                },
                                id: 2850,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                lValueRequested: false,
                                leftExpression: {
                                  argumentTypes: null,
                                  id: 2846,
                                  name: "currentOwner",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2828,
                                  src: "2133:12:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address",
                                  },
                                },
                                nodeType: "BinaryOperation",
                                operator: "!=",
                                rightExpression: {
                                  argumentTypes: null,
                                  arguments: [
                                    {
                                      argumentTypes: null,
                                      id: 2848,
                                      name: "this",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 3066,
                                      src: "2157:4:9",
                                      typeDescriptions: {
                                        typeIdentifier:
                                          "t_contract$_ReverseRegistrar_$2954",
                                        typeString: "contract ReverseRegistrar",
                                      },
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: [
                                      {
                                        typeIdentifier:
                                          "t_contract$_ReverseRegistrar_$2954",
                                        typeString: "contract ReverseRegistrar",
                                      },
                                    ],
                                    id: 2847,
                                    isConstant: false,
                                    isLValue: false,
                                    isPure: true,
                                    lValueRequested: false,
                                    nodeType: "ElementaryTypeNameExpression",
                                    src: "2149:7:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_type$_t_address_$",
                                      typeString: "type(address)",
                                    },
                                    typeName: "address",
                                  },
                                  id: 2849,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  kind: "typeConversion",
                                  lValueRequested: false,
                                  names: [],
                                  nodeType: "FunctionCall",
                                  src: "2149:13:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_address",
                                    typeString: "address",
                                  },
                                },
                                src: "2133:29:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bool",
                                  typeString: "bool",
                                },
                              },
                              falseBody: null,
                              id: 2868,
                              nodeType: "IfStatement",
                              src: "2129:174:9",
                              trueBody: {
                                id: 2867,
                                nodeType: "Block",
                                src: "2164:139:9",
                                statements: [
                                  {
                                    expression: {
                                      argumentTypes: null,
                                      arguments: [
                                        {
                                          argumentTypes: null,
                                          id: 2854,
                                          name: "ADDR_REVERSE_NODE",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2741,
                                          src: "2202:17:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                        },
                                        {
                                          argumentTypes: null,
                                          id: 2855,
                                          name: "label",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2811,
                                          src: "2221:5:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                        },
                                        {
                                          argumentTypes: null,
                                          arguments: [
                                            {
                                              argumentTypes: null,
                                              id: 2857,
                                              name: "this",
                                              nodeType: "Identifier",
                                              overloadedDeclarations: [],
                                              referencedDeclaration: 3066,
                                              src: "2236:4:9",
                                              typeDescriptions: {
                                                typeIdentifier:
                                                  "t_contract$_ReverseRegistrar_$2954",
                                                typeString:
                                                  "contract ReverseRegistrar",
                                              },
                                            },
                                          ],
                                          expression: {
                                            argumentTypes: [
                                              {
                                                typeIdentifier:
                                                  "t_contract$_ReverseRegistrar_$2954",
                                                typeString:
                                                  "contract ReverseRegistrar",
                                              },
                                            ],
                                            id: 2856,
                                            isConstant: false,
                                            isLValue: false,
                                            isPure: true,
                                            lValueRequested: false,
                                            nodeType:
                                              "ElementaryTypeNameExpression",
                                            src: "2228:7:9",
                                            typeDescriptions: {
                                              typeIdentifier:
                                                "t_type$_t_address_$",
                                              typeString: "type(address)",
                                            },
                                            typeName: "address",
                                          },
                                          id: 2858,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: false,
                                          kind: "typeConversion",
                                          lValueRequested: false,
                                          names: [],
                                          nodeType: "FunctionCall",
                                          src: "2228:13:9",
                                          typeDescriptions: {
                                            typeIdentifier: "t_address",
                                            typeString: "address",
                                          },
                                        },
                                      ],
                                      expression: {
                                        argumentTypes: [
                                          {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                          {
                                            typeIdentifier: "t_bytes32",
                                            typeString: "bytes32",
                                          },
                                          {
                                            typeIdentifier: "t_address",
                                            typeString: "address",
                                          },
                                        ],
                                        expression: {
                                          argumentTypes: null,
                                          id: 2851,
                                          name: "ens",
                                          nodeType: "Identifier",
                                          overloadedDeclarations: [],
                                          referencedDeclaration: 2743,
                                          src: "2182:3:9",
                                          typeDescriptions: {
                                            typeIdentifier:
                                              "t_contract$_ENS_$436",
                                            typeString: "contract ENS",
                                          },
                                        },
                                        id: 2853,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        lValueRequested: false,
                                        memberName: "setSubnodeOwner",
                                        nodeType: "MemberAccess",
                                        referencedDeclaration: 370,
                                        src: "2182:19:9",
                                        typeDescriptions: {
                                          typeIdentifier:
                                            "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                          typeString:
                                            "function (bytes32,bytes32,address) external returns (bytes32)",
                                        },
                                      },
                                      id: 2859,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      kind: "functionCall",
                                      lValueRequested: false,
                                      names: [],
                                      nodeType: "FunctionCall",
                                      src: "2182:60:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_bytes32",
                                        typeString: "bytes32",
                                      },
                                    },
                                    id: 2860,
                                    nodeType: "ExpressionStatement",
                                    src: "2182:60:9",
                                  },
                                  {
                                    expression: {
                                      argumentTypes: null,
                                      id: 2865,
                                      isConstant: false,
                                      isLValue: false,
                                      isPure: false,
                                      lValueRequested: false,
                                      leftHandSide: {
                                        argumentTypes: null,
                                        id: 2861,
                                        name: "currentOwner",
                                        nodeType: "Identifier",
                                        overloadedDeclarations: [],
                                        referencedDeclaration: 2828,
                                        src: "2260:12:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address",
                                        },
                                      },
                                      nodeType: "Assignment",
                                      operator: "=",
                                      rightHandSide: {
                                        argumentTypes: null,
                                        arguments: [
                                          {
                                            argumentTypes: null,
                                            id: 2863,
                                            name: "this",
                                            nodeType: "Identifier",
                                            overloadedDeclarations: [],
                                            referencedDeclaration: 3066,
                                            src: "2283:4:9",
                                            typeDescriptions: {
                                              typeIdentifier:
                                                "t_contract$_ReverseRegistrar_$2954",
                                              typeString:
                                                "contract ReverseRegistrar",
                                            },
                                          },
                                        ],
                                        expression: {
                                          argumentTypes: [
                                            {
                                              typeIdentifier:
                                                "t_contract$_ReverseRegistrar_$2954",
                                              typeString:
                                                "contract ReverseRegistrar",
                                            },
                                          ],
                                          id: 2862,
                                          isConstant: false,
                                          isLValue: false,
                                          isPure: true,
                                          lValueRequested: false,
                                          nodeType:
                                            "ElementaryTypeNameExpression",
                                          src: "2275:7:9",
                                          typeDescriptions: {
                                            typeIdentifier:
                                              "t_type$_t_address_$",
                                            typeString: "type(address)",
                                          },
                                          typeName: "address",
                                        },
                                        id: 2864,
                                        isConstant: false,
                                        isLValue: false,
                                        isPure: false,
                                        kind: "typeConversion",
                                        lValueRequested: false,
                                        names: [],
                                        nodeType: "FunctionCall",
                                        src: "2275:13:9",
                                        typeDescriptions: {
                                          typeIdentifier: "t_address",
                                          typeString: "address",
                                        },
                                      },
                                      src: "2260:28:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    },
                                    id: 2866,
                                    nodeType: "ExpressionStatement",
                                    src: "2260:28:9",
                                  },
                                ],
                              },
                            },
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2872,
                                    name: "node",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2818,
                                    src: "2332:4:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2873,
                                    name: "resolver",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2805,
                                    src: "2338:8:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2869,
                                    name: "ens",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2743,
                                    src: "2316:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ENS_$436",
                                      typeString: "contract ENS",
                                    },
                                  },
                                  id: 2871,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "setResolver",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 377,
                                  src: "2316:15:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_bytes32_$_t_address_$returns$__$",
                                    typeString:
                                      "function (bytes32,address) external",
                                  },
                                },
                                id: 2874,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2316:31:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_tuple$__$",
                                  typeString: "tuple()",
                                },
                              },
                              id: 2875,
                              nodeType: "ExpressionStatement",
                              src: "2316:31:9",
                            },
                          ],
                        },
                      },
                      {
                        condition: {
                          argumentTypes: null,
                          commonType: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                          id: 2880,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          leftExpression: {
                            argumentTypes: null,
                            id: 2878,
                            name: "currentOwner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2828,
                            src: "2412:12:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          nodeType: "BinaryOperation",
                          operator: "!=",
                          rightExpression: {
                            argumentTypes: null,
                            id: 2879,
                            name: "owner",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2803,
                            src: "2428:5:9",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address",
                            },
                          },
                          src: "2412:21:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bool",
                            typeString: "bool",
                          },
                        },
                        falseBody: null,
                        id: 2890,
                        nodeType: "IfStatement",
                        src: "2408:104:9",
                        trueBody: {
                          id: 2889,
                          nodeType: "Block",
                          src: "2435:77:9",
                          statements: [
                            {
                              expression: {
                                argumentTypes: null,
                                arguments: [
                                  {
                                    argumentTypes: null,
                                    id: 2884,
                                    name: "ADDR_REVERSE_NODE",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2741,
                                    src: "2469:17:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2885,
                                    name: "label",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2811,
                                    src: "2488:5:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                  },
                                  {
                                    argumentTypes: null,
                                    id: 2886,
                                    name: "owner",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2803,
                                    src: "2495:5:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_bytes32",
                                      typeString: "bytes32",
                                    },
                                    {
                                      typeIdentifier: "t_address",
                                      typeString: "address",
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: null,
                                    id: 2881,
                                    name: "ens",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2743,
                                    src: "2449:3:9",
                                    typeDescriptions: {
                                      typeIdentifier: "t_contract$_ENS_$436",
                                      typeString: "contract ENS",
                                    },
                                  },
                                  id: 2883,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  lValueRequested: false,
                                  memberName: "setSubnodeOwner",
                                  nodeType: "MemberAccess",
                                  referencedDeclaration: 370,
                                  src: "2449:19:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_function_external_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_bytes32_$",
                                    typeString:
                                      "function (bytes32,bytes32,address) external returns (bytes32)",
                                  },
                                },
                                id: 2887,
                                isConstant: false,
                                isLValue: false,
                                isPure: false,
                                kind: "functionCall",
                                lValueRequested: false,
                                names: [],
                                nodeType: "FunctionCall",
                                src: "2449:52:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_bytes32",
                                  typeString: "bytes32",
                                },
                              },
                              id: 2888,
                              nodeType: "ExpressionStatement",
                              src: "2449:52:9",
                            },
                          ],
                        },
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2891,
                          name: "node",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2818,
                          src: "2529:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2809,
                        id: 2892,
                        nodeType: "Return",
                        src: "2522:11:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Transfers ownership of the reverse ENS record associated with the\n     calling account.\n@param owner The address to set as the owner of the reverse record in ENS.\n@param resolver The address of the resolver to set; 0 to leave unchanged.\n@return The ENS node hash of the reverse record.",
                  id: 2894,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "claimWithResolver",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2806,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2803,
                        name: "owner",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1696:13:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2802,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1696:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                      {
                        constant: false,
                        id: 2805,
                        name: "resolver",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1711:16:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2804,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "1711:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1695:33:9",
                  },
                  returnParameters: {
                    id: 2809,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2808,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2894,
                        src: "1745:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2807,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "1745:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "1744:9:9",
                  },
                  scope: 2954,
                  src: "1669:871:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2921,
                    nodeType: "Block",
                    src: "2921:156:9",
                    statements: [
                      {
                        assignments: [2902],
                        declarations: [
                          {
                            constant: false,
                            id: 2902,
                            name: "node",
                            nodeType: "VariableDeclaration",
                            scope: 2921,
                            src: "2931:12:9",
                            stateVariable: false,
                            storageLocation: "default",
                            typeDescriptions: {
                              typeIdentifier: "t_bytes32",
                              typeString: "bytes32",
                            },
                            typeName: {
                              id: 2901,
                              name: "bytes32",
                              nodeType: "ElementaryTypeName",
                              src: "2931:7:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            value: null,
                            visibility: "internal",
                          },
                        ],
                        id: 2911,
                        initialValue: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2905,
                                  name: "this",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3066,
                                  src: "2972:4:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier:
                                      "t_contract$_ReverseRegistrar_$2954",
                                    typeString: "contract ReverseRegistrar",
                                  },
                                ],
                                id: 2904,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2964:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2906,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2964:13:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2908,
                                  name: "defaultResolver",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2745,
                                  src: "2987:15:9",
                                  typeDescriptions: {
                                    typeIdentifier:
                                      "t_contract$_NameResolver_$2738",
                                    typeString: "contract NameResolver",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier:
                                      "t_contract$_NameResolver_$2738",
                                    typeString: "contract NameResolver",
                                  },
                                ],
                                id: 2907,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                nodeType: "ElementaryTypeNameExpression",
                                src: "2979:7:9",
                                typeDescriptions: {
                                  typeIdentifier: "t_type$_t_address_$",
                                  typeString: "type(address)",
                                },
                                typeName: "address",
                              },
                              id: 2909,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "typeConversion",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "2979:24:9",
                              typeDescriptions: {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                              {
                                typeIdentifier: "t_address",
                                typeString: "address",
                              },
                            ],
                            id: 2903,
                            name: "claimWithResolver",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 2894,
                            src: "2946:17:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_internal_nonpayable$_t_address_$_t_address_$returns$_t_bytes32_$",
                              typeString:
                                "function (address,address) returns (bytes32)",
                            },
                          },
                          id: 2910,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "2946:58:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        nodeType: "VariableDeclarationStatement",
                        src: "2931:73:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              id: 2915,
                              name: "node",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2902,
                              src: "3038:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                            },
                            {
                              argumentTypes: null,
                              id: 2916,
                              name: "name",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2896,
                              src: "3044:4:9",
                              typeDescriptions: {
                                typeIdentifier: "t_string_memory_ptr",
                                typeString: "string memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes32",
                                typeString: "bytes32",
                              },
                              {
                                typeIdentifier: "t_string_memory_ptr",
                                typeString: "string memory",
                              },
                            ],
                            expression: {
                              argumentTypes: null,
                              id: 2912,
                              name: "defaultResolver",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 2745,
                              src: "3014:15:9",
                              typeDescriptions: {
                                typeIdentifier:
                                  "t_contract$_NameResolver_$2738",
                                typeString: "contract NameResolver",
                              },
                            },
                            id: 2914,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "setName",
                            nodeType: "MemberAccess",
                            referencedDeclaration: 2737,
                            src: "3014:23:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_external_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$",
                              typeString:
                                "function (bytes32,string memory) external",
                            },
                          },
                          id: 2917,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "3014:35:9",
                          typeDescriptions: {
                            typeIdentifier: "t_tuple$__$",
                            typeString: "tuple()",
                          },
                        },
                        id: 2918,
                        nodeType: "ExpressionStatement",
                        src: "3014:35:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2919,
                          name: "node",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2902,
                          src: "3066:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2900,
                        id: 2920,
                        nodeType: "Return",
                        src: "3059:11:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Sets the `name()` record for the reverse ENS record associated with\nthe calling account. First updates the resolver to the default reverse\nresolver if necessary.\n@param name The name to set for this address.\n@return The ENS node hash of the reverse record.",
                  id: 2922,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "setName",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2897,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2896,
                        name: "name",
                        nodeType: "VariableDeclaration",
                        scope: 2922,
                        src: "2876:18:9",
                        stateVariable: false,
                        storageLocation: "memory",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string",
                        },
                        typeName: {
                          id: 2895,
                          name: "string",
                          nodeType: "ElementaryTypeName",
                          src: "2876:6:9",
                          typeDescriptions: {
                            typeIdentifier: "t_string_storage_ptr",
                            typeString: "string",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2875:20:9",
                  },
                  returnParameters: {
                    id: 2900,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2899,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2922,
                        src: "2912:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2898,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "2912:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "2911:9:9",
                  },
                  scope: 2954,
                  src: "2859:218:9",
                  stateMutability: "nonpayable",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2939,
                    nodeType: "Block",
                    src: "3303:92:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          arguments: [
                            {
                              argumentTypes: null,
                              arguments: [
                                {
                                  argumentTypes: null,
                                  id: 2932,
                                  name: "ADDR_REVERSE_NODE",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 2741,
                                  src: "3347:17:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                                {
                                  argumentTypes: null,
                                  arguments: [
                                    {
                                      argumentTypes: null,
                                      id: 2934,
                                      name: "addr",
                                      nodeType: "Identifier",
                                      overloadedDeclarations: [],
                                      referencedDeclaration: 2924,
                                      src: "3381:4:9",
                                      typeDescriptions: {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    },
                                  ],
                                  expression: {
                                    argumentTypes: [
                                      {
                                        typeIdentifier: "t_address",
                                        typeString: "address",
                                      },
                                    ],
                                    id: 2933,
                                    name: "sha3HexAddress",
                                    nodeType: "Identifier",
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 2953,
                                    src: "3366:14:9",
                                    typeDescriptions: {
                                      typeIdentifier:
                                        "t_function_internal_pure$_t_address_$returns$_t_bytes32_$",
                                      typeString:
                                        "function (address) pure returns (bytes32)",
                                    },
                                  },
                                  id: 2935,
                                  isConstant: false,
                                  isLValue: false,
                                  isPure: false,
                                  kind: "functionCall",
                                  lValueRequested: false,
                                  names: [],
                                  nodeType: "FunctionCall",
                                  src: "3366:20:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                  {
                                    typeIdentifier: "t_bytes32",
                                    typeString: "bytes32",
                                  },
                                ],
                                expression: {
                                  argumentTypes: null,
                                  id: 2930,
                                  name: "abi",
                                  nodeType: "Identifier",
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 3019,
                                  src: "3330:3:9",
                                  typeDescriptions: {
                                    typeIdentifier: "t_magic_abi",
                                    typeString: "abi",
                                  },
                                },
                                id: 2931,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                lValueRequested: false,
                                memberName: "encodePacked",
                                nodeType: "MemberAccess",
                                referencedDeclaration: null,
                                src: "3330:16:9",
                                typeDescriptions: {
                                  typeIdentifier:
                                    "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  typeString:
                                    "function () pure returns (bytes memory)",
                                },
                              },
                              id: 2936,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              kind: "functionCall",
                              lValueRequested: false,
                              names: [],
                              nodeType: "FunctionCall",
                              src: "3330:57:9",
                              typeDescriptions: {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: "t_bytes_memory_ptr",
                                typeString: "bytes memory",
                              },
                            ],
                            id: 2929,
                            name: "keccak256",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 3026,
                            src: "3320:9:9",
                            typeDescriptions: {
                              typeIdentifier:
                                "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              typeString:
                                "function (bytes memory) pure returns (bytes32)",
                            },
                          },
                          id: 2937,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: "functionCall",
                          lValueRequested: false,
                          names: [],
                          nodeType: "FunctionCall",
                          src: "3320:68:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        functionReturnParameters: 2928,
                        id: 2938,
                        nodeType: "Return",
                        src: "3313:75:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev Returns the node hash for a given account's reverse records.\n@param addr The address to hash\n@return The ENS node hash.",
                  id: 2940,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "node",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2925,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2924,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 2940,
                        src: "3259:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2923,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "3259:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3258:14:9",
                  },
                  returnParameters: {
                    id: 2928,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2927,
                        name: "",
                        nodeType: "VariableDeclaration",
                        scope: 2940,
                        src: "3294:7:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2926,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "3294:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3293:9:9",
                  },
                  scope: 2954,
                  src: "3245:150:9",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "public",
                },
                {
                  body: {
                    id: 2952,
                    nodeType: "Block",
                    src: "3769:553:9",
                    statements: [
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2947,
                          name: "addr",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2942,
                          src: "3779:4:9",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        id: 2948,
                        nodeType: "ExpressionStatement",
                        src: "3779:4:9",
                      },
                      {
                        expression: {
                          argumentTypes: null,
                          id: 2949,
                          name: "ret",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 2945,
                          src: "3793:3:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        id: 2950,
                        nodeType: "ExpressionStatement",
                        src: "3793:3:9",
                      },
                      {
                        externalReferences: [
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4116:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4104:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4232:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4067:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4244:4:9",
                              valueSize: 1,
                            },
                          },
                          {
                            ret: {
                              declaration: 2945,
                              isOffset: false,
                              isSlot: false,
                              src: "4283:3:9",
                              valueSize: 1,
                            },
                          },
                          {
                            addr: {
                              declaration: 2942,
                              isOffset: false,
                              isSlot: false,
                              src: "4195:4:9",
                              valueSize: 1,
                            },
                          },
                        ],
                        id: 2951,
                        nodeType: "InlineAssembly",
                        operations:
                          "{\n    let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\n    for { let i := 40 } gt(i, 0) { }\n    {\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n        i := sub(i, 1)\n        mstore8(i, byte(and(addr, 0xf), lookup))\n        addr := div(addr, 0x10)\n    }\n    ret := keccak256(0, 40)\n}",
                        src: "3848:468:9",
                      },
                    ],
                  },
                  documentation:
                    "@dev An optimised function to compute the sha3 of the lower-case\n     hexadecimal representation of an Ethereum address.\n@param addr The address to hash\n@return The SHA3 hash of the lower-case hexadecimal encoding of the\n        input address.",
                  id: 2953,
                  implemented: true,
                  kind: "function",
                  modifiers: [],
                  name: "sha3HexAddress",
                  nodeType: "FunctionDefinition",
                  parameters: {
                    id: 2943,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2942,
                        name: "addr",
                        nodeType: "VariableDeclaration",
                        scope: 2953,
                        src: "3720:12:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address",
                        },
                        typeName: {
                          id: 2941,
                          name: "address",
                          nodeType: "ElementaryTypeName",
                          src: "3720:7:9",
                          stateMutability: "nonpayable",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3719:14:9",
                  },
                  returnParameters: {
                    id: 2946,
                    nodeType: "ParameterList",
                    parameters: [
                      {
                        constant: false,
                        id: 2945,
                        name: "ret",
                        nodeType: "VariableDeclaration",
                        scope: 2953,
                        src: "3756:11:9",
                        stateVariable: false,
                        storageLocation: "default",
                        typeDescriptions: {
                          typeIdentifier: "t_bytes32",
                          typeString: "bytes32",
                        },
                        typeName: {
                          id: 2944,
                          name: "bytes32",
                          nodeType: "ElementaryTypeName",
                          src: "3756:7:9",
                          typeDescriptions: {
                            typeIdentifier: "t_bytes32",
                            typeString: "bytes32",
                          },
                        },
                        value: null,
                        visibility: "internal",
                      },
                    ],
                    src: "3755:13:9",
                  },
                  scope: 2954,
                  src: "3696:626:9",
                  stateMutability: "pure",
                  superFunction: null,
                  visibility: "private",
                },
              ],
              scope: 2955,
              src: "136:4188:9",
            },
          ],
          src: "0:4325:9",
        },
        compiler: {
          name: "solc",
          version: "0.5.16+commit.9c3226ce.Emscripten.clang",
        },
        networks: {},
        schemaVersion: "3.2.0",
        updatedAt: "2020-06-23T14:47:43.713Z",
        devdoc: {
          methods: {
            "claim(address)": {
              details:
                "Transfers ownership of the reverse ENS record associated with the     calling account.",
              params: {
                owner:
                  "The address to set as the owner of the reverse record in ENS.",
              },
              return: "The ENS node hash of the reverse record.",
            },
            "claimWithResolver(address,address)": {
              details:
                "Transfers ownership of the reverse ENS record associated with the     calling account.",
              params: {
                owner:
                  "The address to set as the owner of the reverse record in ENS.",
                resolver:
                  "The address of the resolver to set; 0 to leave unchanged.",
              },
              return: "The ENS node hash of the reverse record.",
            },
            constructor: {
              details: "Constructor",
              params: {
                ensAddr: "The address of the ENS registry.",
                resolverAddr: "The address of the default reverse resolver.",
              },
            },
            "node(address)": {
              details:
                "Returns the node hash for a given account's reverse records.",
              params: {
                addr: "The address to hash",
              },
              return: "The ENS node hash.",
            },
            "setName(string)": {
              details:
                "Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.",
              params: {
                name: "The name to set for this address.",
              },
              return: "The ENS node hash of the reverse record.",
            },
          },
        },
        userdoc: {
          methods: {},
        },
      };
    },
  });

  // node_modules/eth-ens-namehash/node_modules/js-sha3/src/sha3.js
  var require_sha32 = __commonJS({
    "node_modules/eth-ens-namehash/node_modules/js-sha3/src/sha3.js"(
      exports,
      module
    ) {
      (function () {
        "use strict";
        var root = typeof window === "object" ? window : {};
        var NODE_JS =
          !root.JS_SHA3_NO_NODE_JS &&
          typeof process === "object" &&
          process.versions &&
          process.versions.node;
        if (NODE_JS) {
          root = global;
        }
        var COMMON_JS =
          !root.JS_SHA3_NO_COMMON_JS &&
          typeof module === "object" &&
          module.exports;
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0,
          2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136,
          0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648,
          32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128,
          2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648,
          32896, 2147483648, 2147483649, 0, 2147516424, 2147483648,
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
        var createOutputMethod = function (bits2, padding2, outputType) {
          return function (message) {
            return new Keccak(bits2, padding2, bits2)
              .update(message)
              [outputType]();
          };
        };
        var createShakeOutputMethod = function (bits2, padding2, outputType) {
          return function (message, outputBits) {
            return new Keccak(bits2, padding2, outputBits)
              .update(message)
              [outputType]();
          };
        };
        var createMethod = function (bits2, padding2) {
          var method = createOutputMethod(bits2, padding2, "hex");
          method.create = function () {
            return new Keccak(bits2, padding2, bits2);
          };
          method.update = function (message) {
            return method.create().update(message);
          };
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createOutputMethod(bits2, padding2, type);
          }
          return method;
        };
        var createShakeMethod = function (bits2, padding2) {
          var method = createShakeOutputMethod(bits2, padding2, "hex");
          method.create = function (outputBits) {
            return new Keccak(bits2, padding2, outputBits);
          };
          method.update = function (message, outputBits) {
            return method.create(outputBits).update(message);
          };
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createShakeOutputMethod(bits2, padding2, type);
          }
          return method;
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod },
          {
            name: "shake",
            padding: SHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createShakeMethod,
          },
        ];
        var methods = {},
          methodNames = [];
        for (var i = 0; i < algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j2 = 0; j2 < bits.length; ++j2) {
            var methodName = algorithm.name + "_" + bits[j2];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(
              bits[j2],
              algorithm.padding
            );
          }
        }
        function Keccak(bits2, padding2, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding2;
          this.outputBits = outputBits;
          this.reset = true;
          this.block = 0;
          this.start = 0;
          this.blockCount = (1600 - (bits2 << 1)) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for (var i2 = 0; i2 < 50; ++i2) {
            this.s[i2] = 0;
          }
        }
        Keccak.prototype.update = function (message) {
          var notString = typeof message !== "string";
          if (notString && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
          var length = message.length,
            blocks = this.blocks,
            byteCount = this.byteCount,
            blockCount = this.blockCount,
            index = 0,
            s2 = this.s,
            i2,
            code;
          while (index < length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i2 = 1; i2 < blockCount + 1; ++i2) {
                blocks[i2] = 0;
              }
            }
            if (notString) {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
              }
            } else {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks[i2 >> 2] |= (192 | (code >> 6)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks[i2 >> 2] |= (224 | (code >> 12)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 6) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                } else {
                  code =
                    65536 +
                    (((code & 1023) << 10) |
                      (message.charCodeAt(++index) & 1023));
                  blocks[i2 >> 2] |= (240 | (code >> 18)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 12) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |=
                    (128 | ((code >> 6) & 63)) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | (code & 63)) << SHIFT[i2++ & 3];
                }
              }
            }
            this.lastByteIndex = i2;
            if (i2 >= byteCount) {
              this.start = i2 - byteCount;
              this.block = blocks[blockCount];
              for (i2 = 0; i2 < blockCount; ++i2) {
                s2[i2] ^= blocks[i2];
              }
              f2(s2);
              this.reset = true;
            } else {
              this.start = i2;
            }
          }
          return this;
        };
        Keccak.prototype.finalize = function () {
          var blocks = this.blocks,
            i2 = this.lastByteIndex,
            blockCount = this.blockCount,
            s2 = this.s;
          blocks[i2 >> 2] |= this.padding[i2 & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i2 = 0; i2 < blockCount; ++i2) {
            s2[i2] ^= blocks[i2];
          }
          f2(s2);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var hex = "",
            block;
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              block = s2[i2];
              hex +=
                HEX_CHARS[(block >> 4) & 15] +
                HEX_CHARS[block & 15] +
                HEX_CHARS[(block >> 12) & 15] +
                HEX_CHARS[(block >> 8) & 15] +
                HEX_CHARS[(block >> 20) & 15] +
                HEX_CHARS[(block >> 16) & 15] +
                HEX_CHARS[(block >> 28) & 15] +
                HEX_CHARS[(block >> 24) & 15];
            }
            if (j3 % blockCount === 0) {
              f2(s2);
              i2 = 0;
            }
          }
          if (extraBytes) {
            block = s2[i2];
            if (extraBytes > 0) {
              hex += HEX_CHARS[(block >> 4) & 15] + HEX_CHARS[block & 15];
            }
            if (extraBytes > 1) {
              hex +=
                HEX_CHARS[(block >> 12) & 15] + HEX_CHARS[(block >> 8) & 15];
            }
            if (extraBytes > 2) {
              hex +=
                HEX_CHARS[(block >> 20) & 15] + HEX_CHARS[(block >> 16) & 15];
            }
          }
          return hex;
        };
        Keccak.prototype.arrayBuffer = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) {
            buffer = new ArrayBuffer((outputBlocks + 1) << 2);
          } else {
            buffer = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer);
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              array[j3] = s2[i2];
            }
            if (j3 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            array[i2] = s2[i2];
            buffer = buffer.slice(0, bytes);
          }
          return buffer;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function () {
          this.finalize();
          var blockCount = this.blockCount,
            s2 = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i2 = 0,
            j3 = 0;
          var array = [],
            offset,
            block;
          while (j3 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j3 < outputBlocks; ++i2, ++j3) {
              offset = j3 << 2;
              block = s2[i2];
              array[offset] = block & 255;
              array[offset + 1] = (block >> 8) & 255;
              array[offset + 2] = (block >> 16) & 255;
              array[offset + 3] = (block >> 24) & 255;
            }
            if (j3 % blockCount === 0) {
              f2(s2);
            }
          }
          if (extraBytes) {
            offset = j3 << 2;
            block = s2[i2];
            if (extraBytes > 0) {
              array[offset] = block & 255;
            }
            if (extraBytes > 1) {
              array[offset + 1] = (block >> 8) & 255;
            }
            if (extraBytes > 2) {
              array[offset + 2] = (block >> 16) & 255;
            }
          }
          return array;
        };
        var f2 = function (s2) {
          var h2,
            l2,
            n,
            c0,
            c1,
            c2,
            c3,
            c4,
            c5,
            c6,
            c7,
            c8,
            c9,
            b0,
            b1,
            b2,
            b3,
            b4,
            b5,
            b6,
            b7,
            b8,
            b9,
            b10,
            b11,
            b12,
            b13,
            b14,
            b15,
            b16,
            b17,
            b18,
            b19,
            b20,
            b21,
            b22,
            b23,
            b24,
            b25,
            b26,
            b27,
            b28,
            b29,
            b30,
            b31,
            b32,
            b33,
            b34,
            b35,
            b36,
            b37,
            b38,
            b39,
            b40,
            b41,
            b42,
            b43,
            b44,
            b45,
            b46,
            b47,
            b48,
            b49;
          for (n = 0; n < 48; n += 2) {
            c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
            c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
            c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
            c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
            c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
            c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
            c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
            c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
            c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
            c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
            h2 = c8 ^ ((c2 << 1) | (c3 >>> 31));
            l2 = c9 ^ ((c3 << 1) | (c2 >>> 31));
            s2[0] ^= h2;
            s2[1] ^= l2;
            s2[10] ^= h2;
            s2[11] ^= l2;
            s2[20] ^= h2;
            s2[21] ^= l2;
            s2[30] ^= h2;
            s2[31] ^= l2;
            s2[40] ^= h2;
            s2[41] ^= l2;
            h2 = c0 ^ ((c4 << 1) | (c5 >>> 31));
            l2 = c1 ^ ((c5 << 1) | (c4 >>> 31));
            s2[2] ^= h2;
            s2[3] ^= l2;
            s2[12] ^= h2;
            s2[13] ^= l2;
            s2[22] ^= h2;
            s2[23] ^= l2;
            s2[32] ^= h2;
            s2[33] ^= l2;
            s2[42] ^= h2;
            s2[43] ^= l2;
            h2 = c2 ^ ((c6 << 1) | (c7 >>> 31));
            l2 = c3 ^ ((c7 << 1) | (c6 >>> 31));
            s2[4] ^= h2;
            s2[5] ^= l2;
            s2[14] ^= h2;
            s2[15] ^= l2;
            s2[24] ^= h2;
            s2[25] ^= l2;
            s2[34] ^= h2;
            s2[35] ^= l2;
            s2[44] ^= h2;
            s2[45] ^= l2;
            h2 = c4 ^ ((c8 << 1) | (c9 >>> 31));
            l2 = c5 ^ ((c9 << 1) | (c8 >>> 31));
            s2[6] ^= h2;
            s2[7] ^= l2;
            s2[16] ^= h2;
            s2[17] ^= l2;
            s2[26] ^= h2;
            s2[27] ^= l2;
            s2[36] ^= h2;
            s2[37] ^= l2;
            s2[46] ^= h2;
            s2[47] ^= l2;
            h2 = c6 ^ ((c0 << 1) | (c1 >>> 31));
            l2 = c7 ^ ((c1 << 1) | (c0 >>> 31));
            s2[8] ^= h2;
            s2[9] ^= l2;
            s2[18] ^= h2;
            s2[19] ^= l2;
            s2[28] ^= h2;
            s2[29] ^= l2;
            s2[38] ^= h2;
            s2[39] ^= l2;
            s2[48] ^= h2;
            s2[49] ^= l2;
            b0 = s2[0];
            b1 = s2[1];
            b32 = (s2[11] << 4) | (s2[10] >>> 28);
            b33 = (s2[10] << 4) | (s2[11] >>> 28);
            b14 = (s2[20] << 3) | (s2[21] >>> 29);
            b15 = (s2[21] << 3) | (s2[20] >>> 29);
            b46 = (s2[31] << 9) | (s2[30] >>> 23);
            b47 = (s2[30] << 9) | (s2[31] >>> 23);
            b28 = (s2[40] << 18) | (s2[41] >>> 14);
            b29 = (s2[41] << 18) | (s2[40] >>> 14);
            b20 = (s2[2] << 1) | (s2[3] >>> 31);
            b21 = (s2[3] << 1) | (s2[2] >>> 31);
            b2 = (s2[13] << 12) | (s2[12] >>> 20);
            b3 = (s2[12] << 12) | (s2[13] >>> 20);
            b34 = (s2[22] << 10) | (s2[23] >>> 22);
            b35 = (s2[23] << 10) | (s2[22] >>> 22);
            b16 = (s2[33] << 13) | (s2[32] >>> 19);
            b17 = (s2[32] << 13) | (s2[33] >>> 19);
            b48 = (s2[42] << 2) | (s2[43] >>> 30);
            b49 = (s2[43] << 2) | (s2[42] >>> 30);
            b40 = (s2[5] << 30) | (s2[4] >>> 2);
            b41 = (s2[4] << 30) | (s2[5] >>> 2);
            b22 = (s2[14] << 6) | (s2[15] >>> 26);
            b23 = (s2[15] << 6) | (s2[14] >>> 26);
            b4 = (s2[25] << 11) | (s2[24] >>> 21);
            b5 = (s2[24] << 11) | (s2[25] >>> 21);
            b36 = (s2[34] << 15) | (s2[35] >>> 17);
            b37 = (s2[35] << 15) | (s2[34] >>> 17);
            b18 = (s2[45] << 29) | (s2[44] >>> 3);
            b19 = (s2[44] << 29) | (s2[45] >>> 3);
            b10 = (s2[6] << 28) | (s2[7] >>> 4);
            b11 = (s2[7] << 28) | (s2[6] >>> 4);
            b42 = (s2[17] << 23) | (s2[16] >>> 9);
            b43 = (s2[16] << 23) | (s2[17] >>> 9);
            b24 = (s2[26] << 25) | (s2[27] >>> 7);
            b25 = (s2[27] << 25) | (s2[26] >>> 7);
            b6 = (s2[36] << 21) | (s2[37] >>> 11);
            b7 = (s2[37] << 21) | (s2[36] >>> 11);
            b38 = (s2[47] << 24) | (s2[46] >>> 8);
            b39 = (s2[46] << 24) | (s2[47] >>> 8);
            b30 = (s2[8] << 27) | (s2[9] >>> 5);
            b31 = (s2[9] << 27) | (s2[8] >>> 5);
            b12 = (s2[18] << 20) | (s2[19] >>> 12);
            b13 = (s2[19] << 20) | (s2[18] >>> 12);
            b44 = (s2[29] << 7) | (s2[28] >>> 25);
            b45 = (s2[28] << 7) | (s2[29] >>> 25);
            b26 = (s2[38] << 8) | (s2[39] >>> 24);
            b27 = (s2[39] << 8) | (s2[38] >>> 24);
            b8 = (s2[48] << 14) | (s2[49] >>> 18);
            b9 = (s2[49] << 14) | (s2[48] >>> 18);
            s2[0] = b0 ^ (~b2 & b4);
            s2[1] = b1 ^ (~b3 & b5);
            s2[10] = b10 ^ (~b12 & b14);
            s2[11] = b11 ^ (~b13 & b15);
            s2[20] = b20 ^ (~b22 & b24);
            s2[21] = b21 ^ (~b23 & b25);
            s2[30] = b30 ^ (~b32 & b34);
            s2[31] = b31 ^ (~b33 & b35);
            s2[40] = b40 ^ (~b42 & b44);
            s2[41] = b41 ^ (~b43 & b45);
            s2[2] = b2 ^ (~b4 & b6);
            s2[3] = b3 ^ (~b5 & b7);
            s2[12] = b12 ^ (~b14 & b16);
            s2[13] = b13 ^ (~b15 & b17);
            s2[22] = b22 ^ (~b24 & b26);
            s2[23] = b23 ^ (~b25 & b27);
            s2[32] = b32 ^ (~b34 & b36);
            s2[33] = b33 ^ (~b35 & b37);
            s2[42] = b42 ^ (~b44 & b46);
            s2[43] = b43 ^ (~b45 & b47);
            s2[4] = b4 ^ (~b6 & b8);
            s2[5] = b5 ^ (~b7 & b9);
            s2[14] = b14 ^ (~b16 & b18);
            s2[15] = b15 ^ (~b17 & b19);
            s2[24] = b24 ^ (~b26 & b28);
            s2[25] = b25 ^ (~b27 & b29);
            s2[34] = b34 ^ (~b36 & b38);
            s2[35] = b35 ^ (~b37 & b39);
            s2[44] = b44 ^ (~b46 & b48);
            s2[45] = b45 ^ (~b47 & b49);
            s2[6] = b6 ^ (~b8 & b0);
            s2[7] = b7 ^ (~b9 & b1);
            s2[16] = b16 ^ (~b18 & b10);
            s2[17] = b17 ^ (~b19 & b11);
            s2[26] = b26 ^ (~b28 & b20);
            s2[27] = b27 ^ (~b29 & b21);
            s2[36] = b36 ^ (~b38 & b30);
            s2[37] = b37 ^ (~b39 & b31);
            s2[46] = b46 ^ (~b48 & b40);
            s2[47] = b47 ^ (~b49 & b41);
            s2[8] = b8 ^ (~b0 & b2);
            s2[9] = b9 ^ (~b1 & b3);
            s2[18] = b18 ^ (~b10 & b12);
            s2[19] = b19 ^ (~b11 & b13);
            s2[28] = b28 ^ (~b20 & b22);
            s2[29] = b29 ^ (~b21 & b23);
            s2[38] = b38 ^ (~b30 & b32);
            s2[39] = b39 ^ (~b31 & b33);
            s2[48] = b48 ^ (~b40 & b42);
            s2[49] = b49 ^ (~b41 & b43);
            s2[0] ^= RC[n];
            s2[1] ^= RC[n + 1];
          }
        };
        if (COMMON_JS) {
          module.exports = methods;
        } else {
          for (var i = 0; i < methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
        }
      })();
    },
  });

  // node_modules/idna-uts46-hx/idna-map.js
  var require_idna_map = __commonJS({
    "node_modules/idna-uts46-hx/idna-map.js"(exports, module) {
      (function (root, factory) {
        if (typeof define === "function" && define.amd) {
          define([], function () {
            return factory();
          });
        } else if (typeof exports === "object") {
          module.exports = factory();
        } else {
          root.uts46_map = factory();
        }
      })(exports, function () {
        var blocks = [
          new Uint32Array([
            2157250, 2157314, 2157378, 2157442, 2157506, 2157570, 2157634, 0,
            2157698, 2157762, 2157826, 2157890, 2157954, 0, 2158018, 0,
          ]),
          new Uint32Array([
            2179041, 6291456, 2179073, 6291456, 2179105, 6291456, 2179137,
            6291456, 2179169, 6291456, 2179201, 6291456, 2179233, 6291456,
            2179265, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064,
            14680064, 14680064,
          ]),
          new Uint32Array([
            0, 2113729, 2197345, 2197377, 2113825, 2197409, 2197441, 2113921,
            2197473, 2114017, 2197505, 2197537, 2197569, 2197601, 2197633,
            2197665,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672,
            0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672,
            23068672, 0, 0, 0, 0, 23068672,
          ]),
          new Uint32Array([
            14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            14680064, 14680064,
          ]),
          new Uint32Array([
            2196001, 2196033, 2196065, 2196097, 2196129, 2196161, 2196193,
            2196225, 2196257, 2196289, 2196321, 2196353, 2196385, 2196417,
            2196449, 2196481,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2097281, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017,
            2133281, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633,
            2097441,
          ]),
          new Uint32Array([
            2177025, 6291456, 2177057, 6291456, 2177089, 6291456, 2177121,
            6291456, 2177153, 6291456, 2177185, 6291456, 2177217, 6291456,
            2177249, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0,
            6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456,
          ]),
          new Uint32Array([
            2134435, 2134531, 2134627, 2134723, 2134723, 2134819, 2134819,
            2134915, 2134915, 2135011, 2105987, 2135107, 2135203, 2135299,
            2131587, 2135395,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 6291456, 2168673, 2169249, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290,
            2148354, 2147906, 2147970, 2148034, 2148098, 2148162, 2148226,
            2148290, 2148354,
          ]),
          new Uint32Array([
            2125219, 2125315, 2152834, 2152898, 2125411, 2152962, 2153026,
            2125506, 2125507, 2125603, 2153090, 2153154, 2153218, 2153282,
            2153346, 2105348,
          ]),
          new Uint32Array([
            2203393, 6291456, 2203425, 6291456, 2203457, 6291456, 2203489,
            6291456, 6291456, 6291456, 6291456, 2203521, 6291456, 2181281,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 23068672, 6291456, 2145538, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456,
          ]),
          new Uint32Array([
            2139426, 2160834, 2160898, 2160962, 2134242, 2161026, 2161090,
            2161154, 2161218, 2161282, 2161346, 2161410, 2138658, 2161474,
            2161538, 2134722,
          ]),
          new Uint32Array([
            2119939, 2124930, 2125026, 2106658, 2125218, 2128962, 2129058,
            2129154, 2129250, 2129346, 2129442, 2108866, 2108770, 2150466,
            2150530, 2150594,
          ]),
          new Uint32Array([
            2201601, 6291456, 2201633, 6291456, 2201665, 6291456, 2201697,
            6291456, 2201729, 6291456, 2201761, 6291456, 2201793, 6291456,
            2201825, 6291456,
          ]),
          new Uint32Array([
            2193537, 2193569, 2193601, 2193633, 2193665, 2193697, 2193729,
            2193761, 2193793, 2193825, 2193857, 2193889, 2193921, 2193953,
            2193985, 2194017,
          ]),
          new Uint32Array([
            6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2190561, 6291456, 2190593, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 2190625, 6291456, 2190657,
            6291456, 23068672,
          ]),
          new Uint32Array([
            2215905, 2215937, 2215969, 2216001, 2216033, 2216065, 2216097,
            2216129, 2216161, 2216193, 2216225, 2216257, 2105441, 2216289,
            2216321, 2216353,
          ]),
          new Uint32Array([
            23068672, 18884130, 23068672, 23068672, 23068672, 6291456, 23068672,
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2191233, 2191265, 2191297, 2191329, 2191361, 2191393, 2191425,
            2117377, 2191457, 2191489, 2191521, 2191553, 2191585, 2191617,
            2191649, 2117953,
          ]),
          new Uint32Array([
            2132227, 2132323, 2132419, 2132419, 2132515, 2132515, 2132611,
            2132707, 2132707, 2132803, 2132899, 2132899, 2132995, 2132995,
            2133091, 2133187,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0,
            0,
          ]),
          new Uint32Array([
            2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865,
            2113153, 2108481, 2113345, 2113441, 10609889, 10610785, 10609921,
            10610817, 2222241,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0,
            0,
          ]),
          new Uint32Array([
            2219969, 2157121, 2157441, 2157505, 2157889, 2157953, 2220001,
            2158465, 2158529, 10575617, 2156994, 2157058, 2129923, 2130019,
            2157122, 2157186,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2185249, 6291456, 2185281, 6291456, 2185313, 6291456, 2185345,
            6291456, 2185377, 6291456, 2185409, 6291456, 2185441, 6291456,
            2185473, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672,
            23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0,
          ]),
          new Uint32Array([
            2183361, 6291456, 2183393, 6291456, 2183425, 6291456, 2183457,
            6291456, 2183489, 6291456, 2183521, 6291456, 2183553, 6291456,
            2183585, 6291456,
          ]),
          new Uint32Array([
            2192161, 2192193, 2192225, 2192257, 2192289, 2192321, 2192353,
            2192385, 2192417, 2192449, 2192481, 2192513, 2192545, 2192577,
            2192609, 2192641,
          ]),
          new Uint32Array([
            2212001, 2212033, 2212065, 2212097, 2212129, 2212161, 2212193,
            2212225, 2212257, 2212289, 2212321, 2212353, 2212385, 2212417,
            2212449, 2207265,
          ]),
          new Uint32Array([
            2249825, 2249857, 2249889, 2249921, 2249954, 2250018, 2250082,
            2250145, 2250177, 2250209, 2250241, 2250274, 2250337, 2250370,
            2250433, 2250465,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2147905, 2147969, 2148033, 2148097, 2148161, 2148225,
            2148289, 2148353,
          ]),
          new Uint32Array([
            10485857, 6291456, 2197217, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2180353, 2180385, 2144033, 2180417, 2180449, 2180481, 2180513, 0, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865,
            2113153, 2108481, 2113345, 2113441, 10610209, 10610465, 10610241,
            10610753, 10609857,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0,
            0,
          ]),
          new Uint32Array([
            2223842, 2223906, 2223970, 2224034, 2224098, 2224162, 2224226,
            2224290, 2224354, 2224418, 2224482, 2224546, 2224610, 2224674,
            2224738, 2224802,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 18923650, 23068672, 23068672,
            23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672,
            18923714, 23068672, 23068672,
          ]),
          new Uint32Array([
            2126179, 2125538, 2126275, 2126371, 2126467, 2125634, 2126563,
            2105603, 2105604, 2125346, 2126659, 2126755, 2126851, 2098179,
            2098181, 2098182,
          ]),
          new Uint32Array([
            2227426, 2227490, 2227554, 2227618, 0, 0, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2192353, 2240642, 2240642, 2240705, 2240737, 2240737, 2240769,
            2240802, 2240866, 2240929, 2240961, 2240993, 2241025, 2241057,
            2241089, 2241121,
          ]),
          new Uint32Array([
            6291456, 2170881, 2170913, 2170945, 6291456, 2170977, 6291456,
            2171009, 2171041, 6291456, 6291456, 6291456, 2171073, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2132226, 2132514, 2163586, 2132610, 2160386, 2133090, 2133186,
            2160450, 2160514, 2160578, 2133570, 2106178, 2160642, 2133858,
            2160706, 2160770,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 10532162, 10532226, 10532290, 10532354, 10532418, 10532482,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 6291456, 23068672,
          ]),
          new Uint32Array([
            2098209, 2108353, 2108193, 2108481, 2170241, 2111713, 2105473,
            2105569, 2105601, 2112289, 2112481, 2098305, 2108321, 0, 0, 0,
          ]),
          new Uint32Array([
            2209121, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313,
            2209345, 2209377, 2209409, 2209441, 2209473, 2207265, 2209505,
            2209537, 2209569,
          ]),
          new Uint32Array([
            2189025, 6291456, 2189057, 6291456, 2189089, 6291456, 2189121,
            6291456, 2189153, 6291456, 2189185, 6291456, 2189217, 6291456,
            2189249, 6291456,
          ]),
          new Uint32Array([
            2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985,
            2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177,
            2149057, 2233057,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            2165764, 2140004,
          ]),
          new Uint32Array([
            2215105, 6291456, 2215137, 6291456, 6291456, 2215169, 2215201,
            6291456, 6291456, 6291456, 2215233, 2215265, 2215297, 2215329,
            2215361, 2215393,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
            0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            10505091, 10505187, 10505283, 10505379, 10505475, 10505571,
            10505667, 10505763, 10505859, 10505955, 10506051, 10506147,
            10506243, 10506339, 10506435, 10506531,
          ]),
          new Uint32Array([
            2229730, 2229794, 2229858, 2229922, 2229986, 2230050, 2230114,
            2230178, 2230242, 2230306, 2230370, 2230434, 2230498, 2230562,
            2230626, 2230690,
          ]),
          new Uint32Array([
            2105505, 2098241, 2108353, 2108417, 2105825, 0, 2100897, 2111905,
            2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577,
            2098177,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 10502115, 10502178, 10502211,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
          ]),
          new Uint32Array([
            2190305, 6291456, 2190337, 6291456, 2190369, 6291456, 2190401,
            6291456, 2190433, 6291456, 2190465, 6291456, 2190497, 6291456,
            2190529, 6291456,
          ]),
          new Uint32Array([
            2173793, 2173985, 2174017, 6291456, 2173761, 2173697, 6291456,
            2174689, 6291456, 2174017, 2174721, 6291456, 6291456, 2174753,
            2174785, 2174817,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985,
            2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393,
            2152609, 2100033,
          ]),
          new Uint32Array([
            2132898, 2163842, 2163906, 2133282, 2132034, 2131938, 2137410,
            2132802, 2132706, 2164866, 2133282, 2160578, 2165186, 2165186,
            6291456, 6291456,
          ]),
          new Uint32Array([
            10500003, 10500099, 10500195, 10500291, 10500387, 10500483,
            10500579, 10500675, 10500771, 10500867, 10500963, 10501059,
            10501155, 10501251, 10501347, 10501443,
          ]),
          new Uint32Array([
            2163458, 2130978, 2131074, 2131266, 2131362, 2163522, 2160130,
            2132066, 2131010, 2131106, 2106018, 2131618, 2131298, 2132034,
            2131938, 2137410,
          ]),
          new Uint32Array([
            2212961, 2116993, 2212993, 2213025, 2213057, 2213089, 2213121,
            2213153, 2213185, 2213217, 2213249, 2209633, 2213281, 2213313,
            2213345, 2213377,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2113729, 2113825, 2113921, 2114017, 2114113, 2114209, 2114305,
            2114401, 2114497, 2114593, 2114689, 2114785, 2114881, 2114977,
            2115073, 2115169,
          ]),
          new Uint32Array([
            2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2238337,
            2217537, 2238369, 2238401, 2238433, 2238465, 2215649, 2238497,
            2238529, 2238561,
          ]),
          new Uint32Array([
            2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209,
            2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713,
            2100897, 2111905,
          ]),
          new Uint32Array([
            6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 2145026, 0, 6291456, 2145090, 0, 6291456,
            6291456, 0, 0, 23068672, 0, 23068672, 23068672,
          ]),
          new Uint32Array([
            2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705,
            2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009,
            2100129, 2100289,
          ]),
          new Uint32Array([
            6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0,
          ]),
          new Uint32Array([
            2187681, 2187713, 2187745, 2187777, 2187809, 2187841, 2187873,
            2187905, 2187937, 2187969, 2188001, 2188033, 2188065, 2188097,
            2188129, 2188161,
          ]),
          new Uint32Array([
            0, 10554498, 10554562, 10554626, 10554690, 10554754, 10554818,
            10554882, 10554946, 10555010, 10555074, 6291456, 6291456, 0, 0, 0,
          ]),
          new Uint32Array([
            2235170, 2235234, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2181153, 6291456, 2188897, 6291456, 6291456, 2188929, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2111905, 2100865,
            2188961, 2188993,
          ]),
          new Uint32Array([
            2100833, 2100897, 0, 0, 2101569, 2101697, 2101825, 2101953, 2102081,
            2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 2112289,
          ]),
          new Uint32Array([
            6291456, 2172833, 6291456, 2172865, 2172897, 2172929, 2172961,
            6291456, 2172993, 6291456, 2173025, 6291456, 2173057, 6291456,
            2173089, 6291456,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 23068672, 6291456, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 0, 0, 0, 2190721,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456,
            23068672, 6291456, 6291456,
          ]),
          new Uint32Array([
            2184993, 6291456, 2185025, 6291456, 2185057, 6291456, 2185089,
            6291456, 2185121, 6291456, 2185153, 6291456, 2185185, 6291456,
            2185217, 6291456,
          ]),
          new Uint32Array([
            2115265, 2115361, 2115457, 2115553, 2115649, 2115745, 2115841,
            2115937, 2116033, 2116129, 2116225, 2116321, 2150658, 2150722,
            2200225, 6291456,
          ]),
          new Uint32Array([
            2168321, 6291456, 2168353, 6291456, 2168385, 6291456, 2168417,
            6291456, 2168449, 6291456, 2168481, 6291456, 2168513, 6291456,
            2168545, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456,
            6291456, 0, 6291456, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 2186625, 0, 0, 6291456, 6291456, 2186657,
            2186689, 2186721, 2173505, 0, 10496067, 10496163, 10496259,
          ]),
          new Uint32Array([
            2178785, 6291456, 2178817, 6291456, 2178849, 6291456, 2178881,
            6291456, 2178913, 6291456, 2178945, 6291456, 2178977, 6291456,
            2179009, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            0, 0, 2197857, 2197889, 2197921, 2197953, 2197985, 2198017, 0, 0,
            2198049, 2198081, 2198113, 2198145, 2198177, 2198209,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2167297,
            2111137, 6291456,
          ]),
          new Uint32Array([
            2171393, 6291456, 2171425, 6291456, 2171457, 6291456, 2171489,
            6291456, 2171521, 6291456, 2171553, 6291456, 2171585, 6291456,
            2171617, 6291456,
          ]),
          new Uint32Array([
            2206753, 2206785, 2195457, 2206817, 2206849, 2206881, 2206913,
            2197153, 2197153, 2206945, 2117857, 2206977, 2207009, 2207041,
            2207073, 2207105,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144834, 2144898, 0,
            2144962,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 0, 0, 23068672,
          ]),
          new Uint32Array([
            2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289,
            2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 0, 2105505,
            2098241,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
          new Uint32Array([
            6291456, 6291456, 2202049, 6291456, 2202081, 6291456, 2202113,
            6291456, 2202145, 6291456, 2202177, 6291456, 2202209, 6291456,
            2202241, 6291456,
          ]),
          new Uint32Array([
            10501155, 10501251, 10501347, 10501443, 10501539, 10501635,
            10501731, 10501827, 10501923, 10502019, 2141731, 2105505, 2098177,
            2155586, 2166530, 0,
          ]),
          new Uint32Array([
            2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569,
            2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737,
            2098337, 2101441,
          ]),
          new Uint32Array([
            2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266,
            2147330, 2146882, 2146946, 2147010, 2147074, 2147138, 2147202,
            2147266, 2147330,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0,
          ]),
          new Uint32Array([
            10502307, 10502403, 10502499, 10502595, 10502691, 10502787,
            10502883, 10502979, 10503075, 10503171, 10503267, 10503363,
            10503459, 10503555, 10503651, 10503747,
          ]),
          new Uint32Array([
            2179937, 2179969, 2180001, 2180033, 2156545, 2180065, 2156577,
            2180097, 2180129, 2180161, 2180193, 2180225, 2180257, 2180289,
            2156737, 2180321,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456, 0, 0, 0, 6291456, 0, 0, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 0,
          ]),
          new Uint32Array([
            2227682, 2227746, 2227810, 2227874, 2227938, 2228002, 2228066,
            2228130, 2228194, 2228258, 2228322, 2228386, 2228450, 2228514,
            2228578, 2228642,
          ]),
          new Uint32Array([
            2105601, 2169121, 2108193, 2170049, 2181025, 2181057, 2112481,
            2108321, 2108289, 2181089, 2170497, 2100865, 2181121, 2173601,
            2173633, 2173665,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2180641, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0, 6291456,
            6291456, 0, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2178273, 6291456, 2178305, 6291456, 2178337, 6291456, 2178369,
            6291456, 2178401, 6291456, 2178433, 6291456, 2178465, 6291456,
            2178497, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064,
            14680064, 14680064,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 6291456,
          ]),
          new Uint32Array([
            2237377, 2237409, 2236225, 2237441, 2237473, 2217441, 2215521,
            2215553, 2217473, 2237505, 2237537, 2209697, 2237569, 2215585,
            2237601, 2237633,
          ]),
          new Uint32Array([
            2221985, 2165601, 2165601, 2165665, 2165665, 2222017, 2222017,
            2165729, 2165729, 2158913, 2158913, 2158913, 2158913, 2097281,
            2097281, 2105921,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672,
            23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2149634, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2176897, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 2176929, 6291456, 2176961, 6291456,
            2176993, 6291456,
          ]),
          new Uint32Array([
            2172641, 6291456, 2172673, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 2172705, 2172737, 6291456, 2172769,
            2172801, 6291456,
          ]),
          new Uint32Array([
            2099173, 2104196, 2121667, 2099395, 2121763, 2152258, 2152322,
            2098946, 2152386, 2121859, 2121955, 2099333, 2122051, 2104324,
            2099493, 2122147,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 2145794, 6291456, 6291456, 6291456,
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145858, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0,
          ]),
          new Uint32Array([
            0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 0, 2097505, 2105889,
            2097185, 2097697, 2135777, 2097633, 2097441,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2239074, 2239138, 2239201, 2239233, 2239265, 2239297, 2239329,
            2239361, 0, 2239393, 2239425, 2239425, 2239458, 2239521, 2239553,
            2209569,
          ]),
          new Uint32Array([
            14680064, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417,
            2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601,
            2112289, 2108193,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0,
            6291456, 23068672,
          ]),
          new Uint32Array([
            2108321, 2108289, 2113153, 2098209, 2180897, 2180929, 2180961,
            2111137, 2098241, 2108353, 2170241, 2170273, 2180993, 2105825,
            6291456, 2105473,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 0, 0, 0,
          ]),
          new Uint32Array([
            2105921, 2105921, 2105921, 2222049, 2222049, 2130977, 2130977,
            2130977, 2130977, 2160065, 2160065, 2160065, 2160065, 2097729,
            2097729, 2097729,
          ]),
          new Uint32Array([
            2218145, 2214785, 2207937, 2218177, 2218209, 2192993, 2210113,
            2212769, 2218241, 2218273, 2216129, 2218305, 2216161, 2218337,
            2218369, 2218401,
          ]),
          new Uint32Array([
            0, 0, 0, 2156546, 2156610, 2156674, 2156738, 2156802, 0, 0, 0, 0, 0,
            2156866, 23068672, 2156930,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0,
            23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            2213409, 2213441, 2213473, 2213505, 2213537, 2213569, 2213601,
            2213633, 2213665, 2195681, 2213697, 2213729, 2213761, 2213793,
            2213825, 2213857,
          ]),
          new Uint32Array([
            2100033, 2099233, 2122017, 2200673, 2098113, 2121537, 2103201,
            2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969,
            2123009, 2100129,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2201857, 6291456, 2201889, 6291456, 2201921, 6291456, 2201953,
            6291456, 2201985, 6291456, 2202017, 6291456, 2176193, 2176257,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2188193, 2188225, 2188257, 2188289, 2188321, 2188353, 2188385,
            2188417, 2188449, 2188481, 2188513, 2188545, 2188577, 2188609,
            2188641, 0,
          ]),
          new Uint32Array([
            10554529, 2221089, 0, 10502113, 10562017, 10537921, 10538049,
            2221121, 2221153, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2213889, 2213921, 2213953, 2213985, 2214017, 2214049, 2214081,
            2194177, 2214113, 2214145, 2214177, 2214209, 2214241, 2214273,
            2214305, 2214337,
          ]),
          new Uint32Array([
            2166978, 2167042, 2099169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2180545, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            10518915, 10519011, 10519107, 10519203, 2162242, 2162306, 2159554,
            2162370, 2159362, 2159618, 2105922, 2162434, 2159746, 2162498,
            2159810, 2159874,
          ]),
          new Uint32Array([
            2161730, 2161794, 2135586, 2161858, 2161922, 2137186, 2131810,
            2160290, 2135170, 2161986, 2137954, 2162050, 2162114, 2162178,
            10518723, 10518819,
          ]),
          new Uint32Array([
            10506627, 10506723, 10506819, 10506915, 10507011, 10507107,
            10507203, 10507299, 10507395, 10507491, 10507587, 10507683,
            10507779, 10507875, 10507971, 10508067,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0,
            0, 0, 0, 23068672, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2175873, 2175905, 2175937, 2175969, 2176001, 2176033, 2176065,
            2176097, 2176129, 2176161, 2176193, 2176225, 2176257, 2176289,
            2176321, 2176353,
          ]),
          new Uint32Array([
            2140006, 2140198, 2140390, 2140582, 2140774, 23068672, 23068672,
            23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289,
            2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137,
            2105505, 2098241,
          ]),
          new Uint32Array([
            0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145154, 2145218, 2145282,
            6291456, 0, 2145346, 0,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 10531458, 10495395, 2148545, 2143201, 2173473, 2148865,
            2173505, 0, 2173537, 0, 2173569, 2149121,
          ]),
          new Uint32Array([
            10537282, 10495683, 2148738, 2148802, 2148866, 0, 6291456, 2148930,
            2186593, 2173473, 2148737, 2148865, 2148802, 10495779, 10495875,
            10495971,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2215425, 2215457, 2215489, 2215521, 2215553, 2215585, 2215617,
            2215649, 2215681, 2215713, 2215745, 2215777, 2192033, 2215809,
            2215841, 2215873,
          ]),
          new Uint32Array([
            2242049, 2242081, 2242113, 2242145, 2242177, 2242209, 2242241,
            2242273, 2215937, 2242305, 2242338, 2242401, 2242433, 2242465,
            2242497, 2216001,
          ]),
          new Uint32Array([
            10554529, 2221089, 0, 0, 10562017, 10502113, 10538049, 10537921,
            2221185, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793,
            10610273,
          ]),
          new Uint32Array([
            2141923, 2142019, 2142115, 2142211, 2142307, 2142403, 2142499,
            2142595, 2142691, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            0, 2221185, 2221217, 10609857, 10609857, 10489601, 10489697,
            10609889, 10609921, 2141729, 2141793, 2221345, 2221377, 2221409,
            2221441, 2187105,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 0,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 18923970, 23068672, 23068672,
            23068672, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2183105, 6291456, 2183137, 6291456, 2183169, 6291456, 2183201,
            6291456, 2183233, 6291456, 2183265, 6291456, 2183297, 6291456,
            2183329, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0,
            6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2134434, 2134818, 2097666, 2097186, 2097474, 2097698, 2105986,
            2131586, 2132450, 2131874, 2131778, 2135970, 2135778, 2161602,
            2136162, 2161666,
          ]),
          new Uint32Array([
            2236865, 2236897, 2236930, 2236993, 2237025, 2235681, 2237058,
            2237121, 2237153, 2237185, 2237217, 2217281, 2237250, 2191233,
            2237313, 2237345,
          ]),
          new Uint32Array([
            2190049, 6291456, 2190081, 6291456, 2190113, 6291456, 2190145,
            6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456,
            2190273, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2101922, 2102050, 2102178, 2102306, 10498755, 10498851, 10498947,
            10499043, 10499139, 10499235, 10499331, 10499427, 10499523,
            10489604, 10489732, 10489860,
          ]),
          new Uint32Array([
            2166914, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2181601, 2170561, 2181633, 2181665, 2170753, 2181697, 2172897,
            2170881, 2181729, 2170913, 2172929, 2113441, 2181761, 2181793,
            2171009, 2173761,
          ]),
          new Uint32Array([
            0, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281,
            2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2248001, 2248033, 2248066, 2248130, 2248193, 2248226, 2248289,
            2248322, 2248385, 2248417, 2216673, 2248450, 2248514, 2248577,
            2248610, 2248673,
          ]),
          new Uint32Array([
            6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0,
          ]),
          new Uint32Array([
            2169729, 6291456, 2169761, 6291456, 2169793, 6291456, 2169825,
            6291456, 2169857, 2169889, 6291456, 2169921, 6291456, 2143329,
            6291456, 2098305,
          ]),
          new Uint32Array([
            2162178, 2163202, 2163266, 2135170, 2136226, 2161986, 2137954,
            2159426, 2159490, 2163330, 2159554, 2163394, 2159682, 2139522,
            2136450, 2159746,
          ]),
          new Uint32Array([
            2173953, 2173985, 0, 2174017, 2174049, 2174081, 2174113, 2174145,
            2174177, 2149057, 2174209, 2174241, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 4271169, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2174273,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 2190785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
          ]),
          new Uint32Array([
            2189793, 6291456, 2189825, 6291456, 2189857, 6291456, 2189889,
            6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456,
            2190017, 6291456,
          ]),
          new Uint32Array([
            2105601, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321,
            2108289, 2100865, 2113153, 2108481, 2113345, 0, 2098209, 2111137,
          ]),
          new Uint32Array([
            2172129, 6291456, 2172161, 6291456, 2172193, 6291456, 2172225,
            6291456, 2172257, 6291456, 2172289, 6291456, 2172321, 6291456,
            2172353, 6291456,
          ]),
          new Uint32Array([
            2214753, 6291456, 2214785, 6291456, 6291456, 2214817, 2214849,
            2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073,
            2194401, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            10610305, 10610337, 10575617, 2221761, 10610401, 10610433, 10502177,
            0, 10610465, 10610497, 10610529, 10610561, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            0, 23068672, 0, 0, 0, 0, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 2187105, 2187137, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2199393, 2199425, 2199457, 2199489, 2199521, 2199553, 2199585,
            2199617, 2199649, 2199681, 2199713, 2199745, 2199777, 2199809,
            2199841, 0,
          ]),
          new Uint32Array([
            2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441,
            2217473, 2215617, 2217505, 2217537, 2217569, 2214753, 2217601,
            2217633, 2217665,
          ]),
          new Uint32Array([
            2170273, 2170305, 6291456, 2170337, 2170369, 6291456, 2170401,
            2170433, 2170465, 6291456, 6291456, 6291456, 2170497, 2170529,
            6291456, 2170561,
          ]),
          new Uint32Array([
            2188673, 6291456, 2188705, 2188737, 2188769, 6291456, 6291456,
            2188801, 6291456, 2188833, 6291456, 2188865, 6291456, 2180929,
            2181505, 2180897,
          ]),
          new Uint32Array([
            10489988, 10490116, 10490244, 10490372, 10490500, 10490628,
            10490756, 10490884, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2147393, 2147457, 2147521, 2147585, 2147649, 2147713,
            2147777, 2147841,
          ]),
          new Uint32Array([
            23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672,
            23068672, 23068672, 23068672, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2241153, 2241185, 2241217, 2215809, 2241250, 2241313, 2241345,
            2241377, 2217921, 2241377, 2241409, 2215873, 2241441, 2241473,
            2241505, 2241537,
          ]),
          new Uint32Array([
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2220417, 2220417, 2220449, 2220449, 2220481, 2220481, 2220513,
            2220513, 2220545, 2220545, 2220577, 2220577, 2220609, 2220609,
            2220641, 2220641,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            2144002, 0, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2167105, 2167137, 2167169, 2167201, 2167233, 2167265, 2167297,
            2167329, 2167361, 2167393, 2167425, 2167457, 2167489, 2167521,
            2167553, 2167585,
          ]),
          new Uint32Array([
            10575521, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417,
            2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601,
            2112289, 2108193,
          ]),
          new Uint32Array([
            2234146, 2234210, 2234274, 2234338, 2234402, 2234466, 2234530,
            2234594, 2234658, 2234722, 2234786, 2234850, 2234914, 2234978,
            2235042, 2235106,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 2180577, 0, 0, 0, 0, 0, 2180609, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825,
            2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289,
            2108193, 2112481,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2242529, 2242561, 2242593, 2242625, 2242657, 2242689, 2242721,
            2242753, 2207937, 2218177, 2242785, 2242817, 2242849, 2242882,
            2242945, 2242977,
          ]),
          new Uint32Array([
            2118049, 2105345, 2118241, 2105441, 2118433, 2118529, 2118625,
            2118721, 2118817, 2200257, 2200289, 2191809, 2200321, 2200353,
            2200385, 2200417,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2185505, 6291456, 2185537, 6291456, 2185569, 6291456, 2185601,
            6291456, 2185633, 6291456, 2185665, 6291456, 2185697, 6291456,
            2185729, 6291456,
          ]),
          new Uint32Array([
            2231970, 2232034, 2232098, 2232162, 2232226, 2232290, 2232354,
            2232418, 2232482, 2232546, 2232610, 2232674, 2232738, 2232802,
            2232866, 2232930,
          ]),
          new Uint32Array([
            2218625, 2246402, 2246466, 2246530, 2246594, 2246657, 2246689,
            2246689, 2218657, 2219681, 2246721, 2246753, 2246785, 2246818,
            2246881, 2208481,
          ]),
          new Uint32Array([
            2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2219137, 2216961, 2219169, 2219201, 2219233, 2219265, 2219297,
            2217025, 2215041, 2219329, 2217057, 2219361, 2217089, 2219393,
            2197153, 2219426,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672,
            0, 23068672, 23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345,
            2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417,
            2105825, 2111713,
          ]),
          new Uint32Array([
            2243522, 2243585, 2243617, 2243649, 2243681, 2210113, 2243713,
            2243746, 2243810, 2243874, 2243937, 2243970, 2244033, 2244065,
            2244097, 2244129,
          ]),
          new Uint32Array([
            2178017, 6291456, 2178049, 6291456, 2178081, 6291456, 2178113,
            6291456, 2178145, 6291456, 2178177, 6291456, 2178209, 6291456,
            2178241, 6291456,
          ]),
          new Uint32Array([
            10553858, 2165314, 10518722, 6291456, 10518818, 0, 10518914,
            2130690, 10519010, 2130786, 10519106, 2130882, 10519202, 2165378,
            10554050, 2165506,
          ]),
          new Uint32Array([
            0, 0, 2135491, 2135587, 2135683, 2135779, 2135875, 2135971, 2135971,
            2136067, 2136163, 2136259, 2136355, 2136355, 2136451, 2136547,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2220033, 2220033, 2220065, 2220065, 2220065, 2220065, 2220097,
            2220097, 2220097, 2220097, 2220129, 2220129, 2220129, 2220129,
            2220161, 2220161,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2100897, 2100898, 2100899, 2150018, 2100865, 2100866, 2100867,
            2100868, 2150082, 2108481, 2109858, 2109859, 2105569, 2105505,
            2098241, 2105601,
          ]),
          new Uint32Array([
            2097217, 2097505, 2097505, 2097505, 2097505, 2165570, 2165570,
            2165634, 2165634, 2165698, 2165698, 2097858, 2097858, 0, 0, 2097152,
          ]),
          new Uint32Array([
            23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456,
            23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
          ]),
          new Uint32Array([
            10503843, 10503939, 10504035, 10504131, 10504227, 10504323,
            10504419, 10504515, 10504611, 10504707, 10504803, 10504899,
            10504995, 10491140, 10491268, 0,
          ]),
          new Uint32Array([
            2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825,
            2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761,
            2174017, 2174049,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065,
            2131297, 2162049, 2133089, 2160577, 2133857, 2235297, 2220769,
            2235329, 2235361,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2222401, 2222433, 2222465, 10531394, 2222497, 2222529, 2222561, 0,
            2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0,
          ]),
          new Uint32Array([
            2184481, 6291456, 2184513, 6291456, 2184545, 6291456, 2184577,
            6291456, 2184609, 6291456, 2184641, 6291456, 2184673, 6291456,
            2184705, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2105570, 2156034, 2126947, 2156098, 2153666, 2127043, 2127139,
            2156162, 0, 2127235, 2156226, 2156290, 2156354, 2156418, 2127331,
            2127427,
          ]),
          new Uint32Array([
            2215905, 2207041, 2153185, 2241569, 2241601, 2241633, 2241665,
            2241697, 2241730, 2241793, 2241825, 2241857, 2241889, 2241921,
            2241954, 2242017,
          ]),
          new Uint32Array([
            2203777, 6291456, 2203809, 6291456, 2203841, 6291456, 2203873,
            6291456, 2203905, 6291456, 2173121, 2180993, 2181249, 2203937,
            2181313, 0,
          ]),
          new Uint32Array([
            2168577, 6291456, 2168609, 6291456, 2168641, 6291456, 2168673,
            6291456, 2168705, 6291456, 2168737, 6291456, 2168769, 6291456,
            2168801, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672,
            6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0,
            23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            2210113, 2195521, 2210145, 2210177, 2210209, 2210241, 2210273,
            2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497,
            2210529, 2210561,
          ]),
          new Uint32Array([
            6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
          ]),
          new Uint32Array([
            2228706, 2228770, 2228834, 2228898, 2228962, 2229026, 2229090,
            2229154, 2229218, 2229282, 2229346, 2229410, 2229474, 2229538,
            2229602, 2229666,
          ]),
          new Uint32Array([
            23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0,
          ]),
          new Uint32Array([
            2133089, 2133281, 2133281, 2133281, 2133281, 2160577, 2160577,
            2160577, 2160577, 2097441, 2097441, 2097441, 2097441, 2133857,
            2133857, 2133857,
          ]),
          new Uint32Array([
            6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985,
            2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177,
            2149057, 2233089,
          ]),
          new Uint32Array([
            2178529, 6291456, 2178561, 6291456, 2178593, 6291456, 2178625,
            6291456, 2178657, 6291456, 2178689, 6291456, 2178721, 6291456,
            2178753, 6291456,
          ]),
          new Uint32Array([
            2221025, 2221025, 2221057, 2221057, 2159329, 2159329, 2159329,
            2159329, 2097217, 2097217, 2158914, 2158914, 2158978, 2158978,
            2159042, 2159042,
          ]),
          new Uint32Array([
            2208161, 2208193, 2208225, 2208257, 2194433, 2208289, 2208321,
            2208353, 2208385, 2208417, 2208449, 2208481, 2208513, 2208545,
            2208577, 2208609,
          ]),
          new Uint32Array([
            2169217, 6291456, 2169249, 6291456, 2169281, 6291456, 2169313,
            6291456, 2169345, 6291456, 2169377, 6291456, 2169409, 6291456,
            2169441, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2133187, 2133283, 2133283, 2133379, 2133475, 2133571, 2133667,
            2133667, 2133763, 2133859, 2133955, 2134051, 2134147, 2134147,
            2134243, 2134339,
          ]),
          new Uint32Array([
            2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793,
            2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881,
            2114977, 0,
          ]),
          new Uint32Array([
            2193089, 2193121, 2193153, 2193185, 2117665, 2117569, 2193217,
            2193249, 2193281, 2193313, 2193345, 2193377, 2193409, 2193441,
            2193473, 2193505,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2184225, 6291456, 2184257, 6291456, 2184289, 6291456, 2184321,
            6291456, 2184353, 6291456, 2184385, 6291456, 2184417, 6291456,
            2184449, 6291456,
          ]),
          new Uint32Array([
            2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153,
            2108481, 2113345, 2113441, 2100833, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625,
            2100321, 2098145, 2100449, 2098017, 2098753, 2200801, 2200833,
            2200865, 0,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672,
            23068672, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672,
            23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345,
            2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 2181153, 2105505, 2181185,
            2167617, 2180993,
          ]),
          new Uint32Array([
            2160002, 2160066, 2160130, 2160194, 2160258, 2132066, 2131010,
            2131106, 2106018, 2131618, 2160322, 2131298, 2132034, 2131938,
            2137410, 2132226,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            6291456,
          ]),
          new Uint32Array([
            2183617, 6291456, 2183649, 6291456, 2183681, 6291456, 2183713,
            6291456, 2183745, 6291456, 2183777, 6291456, 2183809, 6291456,
            2183841, 6291456,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456,
            0, 0, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2250977, 2251009, 2251041, 2251073, 2195009, 2251106, 2251169,
            2251201, 2251233, 2251265, 2251297, 2251330, 2251394, 2251457,
            2251489, 2251521,
          ]),
          new Uint32Array([
            2205729, 2205761, 2205793, 2205825, 2205857, 2205889, 2205921,
            2205953, 2205985, 2206017, 2206049, 2206081, 2206113, 2206145,
            2206177, 2206209,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2143170, 2168993, 6291456, 2169025, 6291456, 2169057, 6291456,
            2169089, 6291456, 2143234, 2169121, 6291456, 2169153, 6291456,
            2169185, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 2190689, 6291456, 0, 0, 0, 0, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2248706, 2248769, 2248801, 2248833, 2248865, 2248897, 2248929,
            2248962, 2249026, 2249090, 2249154, 2240705, 2249217, 2249249,
            2249281, 2249313,
          ]),
          new Uint32Array([
            10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 10495394, 6291456, 2098209, 6291456, 6291456, 2097152,
            6291456, 10531394,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
          ]),
          new Uint32Array([
            14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697,
            2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473,
            2173857, 2173889,
          ]),
          new Uint32Array([
            6291456, 2186977, 6291456, 6291456, 6291456, 6291456, 6291456,
            10537858, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2209601, 2209633, 2209665, 2209697, 2209729, 2209761, 2209793,
            2209825, 2209857, 2209889, 2209921, 2209953, 2209985, 2210017,
            2210049, 2210081,
          ]),
          new Uint32Array([
            10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2098209,
            2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713,
            2100897, 2111905,
          ]),
          new Uint32Array([
            2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825,
            2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017,
            2174017, 2174049,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,
          ]),
          new Uint32Array([
            2194561, 2194593, 2194625, 2119777, 2119873, 2194657, 2194689,
            2194721, 2194753, 2194785, 2194817, 2194849, 2194881, 2194913,
            2194945, 2194977,
          ]),
          new Uint32Array([
            2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505,
            2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905,
            2105473, 2105569,
          ]),
          new Uint32Array([
            2222818, 2222882, 2222946, 2223010, 2223074, 2223138, 2223202,
            2223266, 2223330, 2223394, 2223458, 2223522, 2223586, 2223650,
            2223714, 2223778,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 23068672,
          ]),
          new Uint32Array([
            0, 2179553, 2179585, 2179617, 2179649, 2144001, 2179681, 2179713,
            2179745, 2179777, 2179809, 2156705, 2179841, 2156833, 2179873,
            2179905,
          ]),
          new Uint32Array([
            6291456, 23068672, 6291456, 2145602, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 0, 23068672, 23068672, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705,
            2196737, 2196769, 2196801, 2196833, 2196865, 2196897, 2196929,
            2196961, 2196993,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2177281, 6291456, 2177313, 6291456, 2177345, 6291456, 2177377,
            6291456, 2177409, 6291456, 2177441, 6291456, 2177473, 6291456,
            2177505, 6291456,
          ]),
          new Uint32Array([
            2187137, 2221473, 2221505, 2221537, 2221569, 6291456, 6291456,
            10610209, 10610241, 10537986, 10537986, 10537986, 10537986,
            10609857, 10609857, 10609857,
          ]),
          new Uint32Array([
            2243009, 2243041, 2216033, 2243074, 2243137, 2243169, 2243201,
            2219617, 2243233, 2243265, 2243297, 2243329, 2243362, 2243425,
            2243457, 2243489,
          ]),
          new Uint32Array([
            10485857, 10485857, 10485857, 10485857, 10485857, 10485857,
            10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304,
            4194304, 0, 0,
          ]),
          new Uint32Array([
            2143042, 6291456, 2143106, 2143106, 2168833, 6291456, 2168865,
            6291456, 6291456, 2168897, 6291456, 2168929, 6291456, 2168961,
            6291456, 2143170,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2204193, 2204225, 2204257, 2204289, 2204321, 2204353, 2204385,
            2204417, 2204449, 2204481, 2204513, 2204545, 2204577, 2204609,
            2204641, 2204673,
          ]),
          new Uint32Array([
            2202753, 6291456, 2202785, 6291456, 2202817, 6291456, 2202849,
            6291456, 2202881, 6291456, 2202913, 6291456, 2202945, 6291456,
            2202977, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473,
            2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177,
            2098305, 2108321,
          ]),
          new Uint32Array([
            2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778,
            2147842, 2147394, 2147458, 2147522, 2147586, 2147650, 2147714,
            2147778, 2147842,
          ]),
          new Uint32Array([
            2253313, 2253346, 2253409, 2253441, 2253473, 2253505, 2253537,
            2253569, 2253601, 2253634, 2219393, 2253697, 2253729, 2253761,
            2253793, 2253825,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2162562, 2162626, 2131362, 2162690, 2159938, 2160002, 2162754,
            2162818, 2160130, 2162882, 2160194, 2160258, 2160834, 2160898,
            2161026, 2161090,
          ]),
          new Uint32Array([
            2175361, 2175393, 2175425, 2175457, 2175489, 2175521, 2175553,
            2175585, 2175617, 2175649, 2175681, 2175713, 2175745, 2175777,
            2175809, 2175841,
          ]),
          new Uint32Array([
            2253858, 2253921, 2253954, 2254018, 2254082, 2196737, 2254145,
            2196865, 2254177, 2254209, 2254241, 2254273, 2197025, 2254306, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2202113, 2204129,
            2188705, 2204161,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145,
            2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113,
            2173985, 2173953,
          ]),
          new Uint32Array([
            2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833,
            2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953,
            2102081, 2102209,
          ]),
          new Uint32Array([
            2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209,
            2111137, 2105505, 2098241, 0, 2108417, 0, 2111713, 2100897, 2111905,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2175425, 2175489, 2175809, 2175905, 2175937, 2175937, 2176193,
            2176417, 2180865, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 2143298, 2143298, 2143298,
            2143362, 2143362, 2143362, 2143426, 2143426, 2143426, 2171105,
            6291456, 2171137,
          ]),
          new Uint32Array([
            2120162, 2120258, 2151618, 2151682, 2151746, 2151810, 2151874,
            2151938, 2152002, 2120035, 2120131, 2120227, 2152066, 2120323,
            2152130, 2120419,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0,
            0, 0, 23068672, 23068672, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2195361, 2142433, 2236065, 2236097, 2236129, 2236161, 2118241,
            2117473, 2236193, 2236225, 2236257, 2236289, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2189281, 6291456, 2189313, 6291456, 2189345, 6291456, 2189377,
            6291456, 2189409, 6291456, 2189441, 6291456, 2189473, 6291456,
            2189505, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456,
            2145986, 6291456, 6291456, 6291456, 6291456, 2146050, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825,
            2101953, 2102081, 2102209, 10502113, 10562017, 10610401, 10502177,
            10610433, 10538049,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 2186401, 0, 2186433, 0, 2186465, 0, 2186497,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            0, 0, 2198241, 2198273, 2198305, 2198337, 2198369, 2198401, 0, 0,
            2198433, 2198465, 2198497, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672,
          ]),
          new Uint32Array([
            0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 2133281, 2097505,
            2105889, 0, 2097697, 2135777, 2097633, 2097441,
          ]),
          new Uint32Array([
            2197889, 2197921, 2197953, 2197985, 2198017, 2198049, 2198081,
            2198113, 2198145, 2198177, 2198209, 2198241, 2198273, 2198305,
            2198337, 2198369,
          ]),
          new Uint32Array([
            2132514, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514,
            2133282, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706,
            2160770, 2134146,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0,
            0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456,
            23068672, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2184737, 6291456, 2184769, 6291456, 2184801, 6291456, 2184833,
            6291456, 2184865, 6291456, 2184897, 6291456, 2184929, 6291456,
            2184961, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672,
            23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672,
            0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 2186753, 6291456, 6291456, 6291456,
            6291456, 2186785, 2186817, 2186849, 2173569, 2186881, 10496355,
            10495395, 10575521,
          ]),
          new Uint32Array([
            0, 0, 2097729, 0, 0, 0, 0, 2106017, 0, 2097505, 0, 2097185, 0,
            2135777, 2097633, 2097441,
          ]),
          new Uint32Array([
            2189537, 6291456, 2189569, 6291456, 2189601, 6291456, 2189633,
            6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456,
            2189761, 6291456,
          ]),
          new Uint32Array([
            2202497, 6291456, 2202529, 6291456, 2202561, 6291456, 2202593,
            6291456, 2202625, 6291456, 2202657, 6291456, 2202689, 6291456,
            2202721, 6291456,
          ]),
          new Uint32Array([
            2245217, 2218369, 2245249, 2245282, 2245345, 2245377, 2245410,
            2245474, 2245537, 2245569, 2245601, 2245633, 2245665, 2245665,
            2245697, 2245729,
          ]),
          new Uint32Array([
            6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456,
            23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456,
            23068672, 23068672,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2097281, 2105921, 2097729, 2106081, 2097377, 2097601, 2162337,
            2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633,
            2097441,
          ]),
          new Uint32Array([
            2176641, 6291456, 2176673, 6291456, 2176705, 6291456, 2176737,
            6291456, 2176769, 6291456, 2176801, 6291456, 2176833, 6291456,
            2176865, 6291456,
          ]),
          new Uint32Array([
            2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793,
            2174113, 2173985, 2173953, 2174369, 2174369, 0, 0, 2100833, 2100737,
          ]),
          new Uint32Array([
            2116513, 2190817, 2190849, 2190881, 2190913, 2190945, 2116609,
            2190977, 2191009, 2191041, 2191073, 2117185, 2191105, 2191137,
            2191169, 2191201,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 6291456,
          ]),
          new Uint32Array([
            2167617, 2167649, 2167681, 2167713, 2167745, 2167777, 2167809,
            6291456, 2167841, 2167873, 2167905, 2167937, 2167969, 2168001,
            2168033, 4240130,
          ]),
          new Uint32Array([
            2165122, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290,
            2164354, 2164418, 2164482, 2164546, 2133122, 2134562, 2132162,
            2132834, 2136866,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2186209,
            2186241, 2186273, 2186305, 2186337, 2186369, 0, 0,
          ]),
          new Uint32Array([
            2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865,
            2113153, 2108481, 2113345, 2113441, 14680064, 14680064, 14680064,
            14680064, 14680064,
          ]),
          new Uint32Array([
            0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 0, 0, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            0, 10537921, 10610689, 10610273, 10610497, 10610529, 10610305,
            10610721, 10489601, 10489697, 10610337, 10575617, 10554529, 2221761,
            2197217, 10496577,
          ]),
          new Uint32Array([
            2105473, 2105569, 2105601, 2112289, 0, 2112481, 2112577, 2098177,
            2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345,
            2113441,
          ]),
          new Uint32Array([
            2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193,
            2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865,
            2113153, 2108481,
          ]),
          new Uint32Array([
            2125346, 2153410, 2153474, 2127394, 2153538, 2153602, 2153666,
            2153730, 2105507, 2105476, 2153794, 2153858, 2153922, 2153986,
            2154050, 2105794,
          ]),
          new Uint32Array([
            2200449, 2119681, 2200481, 2153313, 2199873, 2199905, 2199937,
            2200513, 2200545, 2200577, 2200609, 2119105, 2119201, 2119297,
            2119393, 2119489,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2175777, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2222273, 2197217, 2221473, 2221505, 2221089, 2222305, 2200865,
            2099681, 2104481, 2222337, 2099905, 2120737, 2222369, 2103713,
            2100225, 2098785,
          ]),
          new Uint32Array([
            2201377, 6291456, 2201409, 6291456, 2201441, 6291456, 2201473,
            6291456, 2201505, 6291456, 2201537, 6291456, 2201569, 6291456,
            6291456, 23068672,
          ]),
          new Uint32Array([
            2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481,
            2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761,
            2143969, 2173793,
          ]),
          new Uint32Array([
            2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993,
            6291456, 2201025, 6291456, 2180865, 6291456, 2201057, 6291456,
            2201089, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0,
            0, 0, 0, 0,
          ]),
          new Uint32Array([
            2161154, 2161410, 2138658, 2161474, 2161538, 2097666, 2097186,
            2097474, 2162946, 2132450, 2163010, 2163074, 2136162, 2163138,
            2161666, 2161730,
          ]),
          new Uint32Array([
            2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801,
            2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889,
            2173921, 2173953,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 2145410, 2145474,
            0, 6291456,
          ]),
          new Uint32Array([
            2244161, 2216065, 2212769, 2244193, 2244225, 2244257, 2244290,
            2244353, 2244385, 2244417, 2244449, 2218273, 2244481, 2244514,
            2244577, 2244609,
          ]),
          new Uint32Array([
            2125730, 2125699, 2125795, 2125891, 2125987, 2154114, 2154178,
            2154242, 2154306, 2154370, 2154434, 2154498, 2126082, 2126178,
            2126274, 2126083,
          ]),
          new Uint32Array([
            2237665, 2237697, 2237697, 2237697, 2237730, 2237793, 2237825,
            2237857, 2237890, 2237953, 2237985, 2238017, 2238049, 2238081,
            2238113, 2238145,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2150146, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672,
            23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0,
          ]),
          new Uint32Array([
            2214369, 2238593, 2238625, 2238657, 2238689, 2238721, 2238753,
            2238785, 2238817, 2238850, 2238913, 2238945, 2238977, 2235457,
            2239009, 2239041,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2252066, 2252130, 2252193, 2252225, 2252257, 2252290, 2252353,
            2252385, 2252417, 2252449, 2252481, 2252513, 2252545, 2252578,
            2252641, 2252673,
          ]),
          new Uint32Array([
            2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793,
            2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881,
            2114977, 2197857,
          ]),
          new Uint32Array([
            2224866, 2224930, 2224994, 2225058, 2225122, 2225186, 2225250,
            2225314, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2219490, 2219554, 2219617, 2219649, 2219681, 2219714, 2219778,
            2219842, 2219905, 2219937, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
          ]),
          new Uint32Array([
            2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353,
            2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569,
            2105601, 2112289,
          ]),
          new Uint32Array([
            2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697,
            2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601,
            2173633, 2173665,
          ]),
          new Uint32Array([
            2220161, 2220161, 2220193, 2220193, 2220193, 2220193, 2220225,
            2220225, 2220225, 2220225, 2220257, 2220257, 2220257, 2220257,
            2220289, 2220289,
          ]),
          new Uint32Array([
            2192673, 2192705, 2192737, 2192769, 2192801, 2192833, 2192865,
            2118049, 2192897, 2117473, 2117761, 2192929, 2192961, 2192993,
            2193025, 2193057,
          ]),
          new Uint32Array([
            2179297, 6291456, 2179329, 6291456, 2179361, 6291456, 2179393,
            6291456, 2179425, 6291456, 2179457, 6291456, 2179489, 6291456,
            2179521, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2235745, 2235777, 2193633, 2235809, 2235841, 2235873, 2235905,
            2235937, 2235969, 2116513, 2116705, 2236001, 2200513, 2199905,
            2200545, 2236033,
          ]),
          new Uint32Array([
            2113153, 2108481, 2113345, 2113441, 2232993, 2233025, 0, 0, 2148481,
            2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761,
          ]),
          new Uint32Array([
            2170593, 6291456, 2170625, 6291456, 2170657, 6291456, 2170689,
            2170721, 6291456, 2170753, 6291456, 6291456, 2170785, 6291456,
            2170817, 2170849,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 2166786, 2166850, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825,
            2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601,
            10489697, 0,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2134562, 2132162, 2132834, 2136866, 2136482, 2164610, 2164674,
            2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930,
            2164994, 2165058,
          ]),
          new Uint32Array([
            6291456, 6291456, 2098337, 2101441, 10531458, 2153473, 6291456,
            6291456, 10531522, 2100737, 2108193, 6291456, 2106499, 2106595,
            2106691, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2233122, 2233186, 2233250, 2233314, 2233378, 2233442, 2233506,
            2233570, 2233634, 2233698, 2233762, 2233826, 2233890, 2233954,
            2234018, 2234082,
          ]),
          new Uint32Array([
            23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
          ]),
          new Uint32Array([
            2205217, 2205249, 2205281, 2205313, 2205345, 2205377, 2205409,
            2205441, 2205473, 2205505, 2205537, 2205569, 2205601, 2205633,
            2205665, 2205697,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0,
            0, 23068672, 6291456, 23068672, 23068672,
          ]),
          new Uint32Array([
            2173601, 2173761, 2174081, 2173569, 2174241, 2174113, 2173953,
            6291456, 2174305, 6291456, 2174337, 6291456, 2174369, 6291456,
            2174401, 6291456,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2152450, 2152514, 2099653, 2104452, 2099813, 2122243, 2099973,
            2152578, 2122339, 2122435, 2122531, 2122627, 2122723, 2104580,
            2122819, 2152642,
          ]),
          new Uint32Array([
            2236385, 2236417, 2236449, 2236482, 2236545, 2215425, 2236577,
            2236609, 2236641, 2236673, 2215457, 2236705, 2236737, 2236770,
            2215489, 2236833,
          ]),
          new Uint32Array([
            2163394, 2159746, 2163458, 2131362, 2163522, 2160130, 2163778,
            2132226, 2163842, 2132898, 2163906, 2161410, 2138658, 2097666,
            2136162, 2163650,
          ]),
          new Uint32Array([
            2218721, 2246913, 2246946, 2216385, 2247010, 2247074, 2215009,
            2247137, 2247169, 2216481, 2247201, 2247233, 2247266, 2247330,
            2247330, 0,
          ]),
          new Uint32Array([
            2129730, 2129762, 2129858, 2129731, 2129827, 2156482, 2156482, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0,
            0, 0, 0, 0, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2203969, 2204001, 2181377, 2204033, 2204065, 6291456, 2204097,
            6291456, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2169473, 6291456, 2169505, 6291456, 2169537, 6291456, 2169569,
            6291456, 2169601, 6291456, 2169633, 6291456, 2169665, 6291456,
            2169697, 6291456,
          ]),
          new Uint32Array([
            2141542, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2220801, 2220801, 2220801, 2220801, 2220833, 2220833, 2220865,
            2220865, 2220865, 2220865, 2220897, 2220897, 2220897, 2220897,
            2139873, 2139873,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0,
          ]),
          new Uint32Array([
            2214849, 2218433, 2218465, 2218497, 2218529, 2218561, 2214881,
            2218593, 2218625, 2218657, 2218689, 2218721, 2218753, 2216545,
            2218785, 2218817,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 6291456,
          ]),
          new Uint32Array([
            2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706,
            2164866, 2132898, 2164930, 2164994, 2165058, 2165122, 2132802,
            2132706, 2164866,
          ]),
          new Uint32Array([
            2207649, 2207681, 2207713, 2207745, 2207777, 2207809, 2207841,
            2207873, 2207905, 2207937, 2207969, 2208001, 2208033, 2208065,
            2208097, 2208129,
          ]),
          new Uint32Array([
            2123683, 2105092, 2152706, 2123779, 2105220, 2152770, 2100453,
            2098755, 2123906, 2124002, 2124098, 2124194, 2124290, 2124386,
            2124482, 2124578,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0,
            0, 0, 10485857,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            10508163, 10508259, 10508355, 10508451, 2200129, 2200161, 2192737,
            2200193, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2203553, 6291456, 2203585, 6291456, 6291456, 6291456, 2203617,
            6291456, 2203649, 6291456, 2203681, 6291456, 2203713, 6291456,
            2203745, 6291456,
          ]),
          new Uint32Array([
            18884449, 18884065, 23068672, 18884417, 18884034, 18921185,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 18874368,
          ]),
          new Uint32Array([
            2247393, 2247426, 2247489, 2247521, 2247553, 2247586, 2247649,
            2247681, 2247713, 2247745, 2247777, 2247810, 2247873, 2247905,
            2247937, 2247969,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 23068672,
          ]),
          new Uint32Array([
            2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0,
            2133089, 2160577, 2133857, 2235297, 0, 2235329, 0,
          ]),
          new Uint32Array([
            2182593, 6291456, 2182625, 6291456, 2182657, 6291456, 2182689,
            6291456, 2182721, 6291456, 2182753, 6291456, 2182785, 6291456,
            2182817, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2102402, 2102403,
            6291456, 2110050,
          ]),
          new Uint32Array([
            2149890, 2108323, 2149954, 6291456, 2113441, 6291456, 2149057,
            6291456, 2113441, 6291456, 2105473, 2167265, 2111137, 2105505,
            6291456, 2108353,
          ]),
          new Uint32Array([
            2219105, 2219137, 2195233, 2251554, 2251617, 2251649, 2251681,
            2251713, 2251746, 2251810, 2251873, 2251905, 2251937, 2251970,
            2252033, 2219169,
          ]),
          new Uint32Array([
            2203009, 6291456, 2203041, 6291456, 2203073, 6291456, 2203105,
            6291456, 2203137, 6291456, 2203169, 6291456, 2203201, 6291456,
            2203233, 6291456,
          ]),
          new Uint32Array([
            2128195, 2128291, 2128387, 2128483, 2128579, 2128675, 2128771,
            2128867, 2128963, 2129059, 2129155, 2129251, 2129347, 2129443,
            2129539, 2129635,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 2140964, 2141156, 2140966,
            2141158, 2141350,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2225378, 2225442, 2225506, 2225570, 2225634, 2225698, 2225762,
            2225826, 2225890, 2225954, 2226018, 2226082, 2226146, 2226210,
            2226274, 2226338,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153,
            2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241,
            2108353, 2108417,
          ]),
          new Uint32Array([
            2108353, 2108417, 0, 2105601, 2108193, 2157121, 2157313, 2157377,
            2157441, 2100897, 6291456, 2108419, 2173953, 2173633, 2173633,
            2173953,
          ]),
          new Uint32Array([
            2111713, 2173121, 2111905, 2098177, 2173153, 2173185, 2173217,
            2113153, 2113345, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456,
            2190753,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197249,
            6291456, 2117377, 2197281, 2197313, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081,
            2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697,
            2101825, 2101953,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672,
            23068672,
          ]),
          new Uint32Array([
            2173281, 6291456, 2173313, 6291456, 2173345, 6291456, 2173377,
            6291456, 0, 0, 10532546, 6291456, 6291456, 6291456, 10562017,
            2173441,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0,
            0,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2159426, 2159490, 2159554, 2159362, 2159618, 2159682, 2139522,
            2136450, 2159746, 2159810, 2159874, 2130978, 2131074, 2131266,
            2131362, 2159938,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2203233, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 2203265, 6291456, 2203297, 6291456, 2203329,
            2203361, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 2148418, 2148482, 2148546, 0, 6291456, 2148610,
            2186529, 2186561, 2148417, 2148545, 2148482, 10495778, 2143969,
            10495778,
          ]),
          new Uint32Array([
            2134146, 2139426, 2160962, 2134242, 2161218, 2161282, 2161346,
            2161410, 2138658, 2134722, 2134434, 2134818, 2097666, 2097346,
            2097698, 2105986,
          ]),
          new Uint32Array([
            2198881, 2198913, 2198945, 2198977, 2199009, 2199041, 2199073,
            2199105, 2199137, 2199169, 2199201, 2199233, 2199265, 2199297,
            2199329, 2199361,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456,
          ]),
          new Uint32Array([
            10610561, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417,
            2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601,
            2112289, 2108193,
          ]),
          new Uint32Array([
            2183873, 6291456, 2183905, 6291456, 2183937, 6291456, 2183969,
            6291456, 2184001, 6291456, 2184033, 6291456, 2184065, 6291456,
            2184097, 6291456,
          ]),
          new Uint32Array([
            2244642, 2244706, 2244769, 2244801, 2218305, 2244833, 2244865,
            2244897, 2244929, 2244961, 2244993, 2245026, 2245089, 2245122,
            2245185, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 2116513, 2116609, 2116705, 2116801, 2199873,
            2199905, 2199937, 2199969, 2190913, 2200001, 2200033, 2200065,
            2200097, 2191009,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2180673,
            2180705, 2180737, 2180769, 2180801, 2180833, 0, 0,
          ]),
          new Uint32Array([
            2098081, 2099521, 2099105, 2120705, 2098369, 2120801, 2103361,
            2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401,
            2099393, 2152609,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2150402,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 2145666, 2145730, 6291456, 6291456,
          ]),
          new Uint32Array([
            2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081,
            2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601,
            2173633, 2173665,
          ]),
          new Uint32Array([
            2187073, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241,
            2108353, 2100897, 2111905, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 2102404, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            2100612, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 10485857,
          ]),
          new Uint32Array([
            2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697,
            2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473,
            2173857, 2173889,
          ]),
          new Uint32Array([
            2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889,
            2217921, 2217953, 2215873, 2217985, 2215905, 2218017, 2218049,
            2218081, 2218113,
          ]),
          new Uint32Array([
            2211233, 2218849, 2216673, 2218881, 2218913, 2218945, 2218977,
            2219009, 2216833, 2219041, 2215137, 2219073, 2216865, 2209505,
            2219105, 2216897,
          ]),
          new Uint32Array([
            2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2240289,
            2240321, 2240353, 2240386, 2240449, 2240481, 2240513, 2240545,
            2207905, 2240578,
          ]),
          new Uint32Array([
            6291456, 6291456, 2202273, 6291456, 2202305, 6291456, 2202337,
            6291456, 2202369, 6291456, 2202401, 6291456, 2202433, 6291456,
            2202465, 6291456,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 18923394, 23068672, 18923458, 18923522,
            18884099, 18923586, 18884195, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2201121, 6291456, 2201153, 6291456, 2201185, 6291456, 2201217,
            6291456, 2201249, 6291456, 2201281, 6291456, 2201313, 6291456,
            2201345, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2211041, 2211073, 2211105, 2211137, 2211169, 2211201, 2211233,
            2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457,
            2211489, 2211521,
          ]),
          new Uint32Array([
            2181825, 6291456, 2181857, 6291456, 2181889, 6291456, 2181921,
            6291456, 2181953, 6291456, 2181985, 6291456, 2182017, 6291456,
            2182049, 6291456,
          ]),
          new Uint32Array([
            2162337, 2097633, 2097633, 2097633, 2097633, 2132705, 2132705,
            2132705, 2132705, 2097153, 2097153, 2097153, 2097153, 2133089,
            2133089, 2133089,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 2148545, 6291456, 2173473, 6291456, 2148865, 6291456,
            2173505, 6291456, 2173537, 6291456, 2173569, 6291456, 2149121, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            0, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857,
            2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049,
            2174081, 2174113,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2207137, 2207169, 2207201, 2207233, 2207265, 2207297, 2207329,
            2207361, 2207393, 2207425, 2207457, 2207489, 2207521, 2207553,
            2207585, 2207617,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0,
            23068672, 23068672, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2198401, 2198433, 2198465, 2198497, 0, 2198529, 2198561, 2198593,
            2198625, 2198657, 2198689, 2198721, 2198753, 2198785, 2198817,
            2198849,
          ]),
          new Uint32Array([
            2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897,
            2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481,
            2112577, 2098177,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0,
            0,
          ]),
          new Uint32Array([
            2216385, 2118721, 2216417, 2216449, 2216481, 2216513, 2216545,
            2211233, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737,
            2216737, 2216769,
          ]),
          new Uint32Array([
            2216801, 2216833, 2216865, 2216897, 2216929, 2216961, 2216993,
            2215169, 2217025, 2217057, 2217089, 2217121, 2217154, 2217217, 0, 0,
          ]),
          new Uint32Array([
            2210593, 2191809, 2210625, 2210657, 2210689, 2210721, 2210753,
            2210785, 2210817, 2210849, 2191297, 2210881, 2210913, 2210945,
            2210977, 2211009,
          ]),
          new Uint32Array([
            0, 0, 2105825, 0, 0, 2111905, 2105473, 0, 0, 2112289, 2108193,
            2112481, 2112577, 0, 2098305, 2108321,
          ]),
          new Uint32Array([
            0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            0, 2097153, 2134241, 0, 2132705, 0, 0, 2131297, 0, 2133089, 0,
            2133857, 0, 2220769, 0, 2235361,
          ]),
          new Uint32Array([
            14680064, 14680064, 14680064, 14680064, 14680064, 14680064,
            14680064, 14680064, 14680064, 14680064, 14680064, 14680064,
            14680064, 6291456, 6291456, 14680064,
          ]),
          new Uint32Array([
            23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2171873, 6291456, 2171905, 6291456, 2171937, 6291456, 2171969,
            6291456, 2172001, 6291456, 2172033, 6291456, 2172065, 6291456,
            2172097, 6291456,
          ]),
          new Uint32Array([
            2220929, 2220929, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2133857, 2134145, 2134145, 2134145, 2134145, 2134241, 2134241,
            2134241, 2134241, 2105889, 2105889, 2105889, 2105889, 2097185,
            2097185, 2097185,
          ]),
          new Uint32Array([
            2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481,
            2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761,
            2143969, 2173793,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10499619, 10499715, 10499811,
            10499907,
          ]),
          new Uint32Array([
            0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672,
            23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 2144322, 2144386, 2144450, 2144514, 2144578, 2144642,
            2144706, 2144770,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241,
            2108353, 2108417, 2105825, 0, 0, 2111905, 2105473, 2105569,
          ]),
          new Uint32Array([
            2236321, 2236353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2152194, 2121283, 2103684, 2103812, 2097986, 2098533, 2097990,
            2098693, 2098595, 2098853, 2099013, 2103940, 2121379, 2121475,
            2121571, 2104068,
          ]),
          new Uint32Array([
            2206241, 2206273, 2206305, 2206337, 2206369, 2206401, 2206433,
            2206465, 2206497, 2206529, 2206561, 2206593, 2206625, 2206657,
            2206689, 2206721,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            23068672, 23068672, 10538818, 10538882, 6291456, 6291456, 2150338,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2214369, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561,
            2214593, 2194977, 2214625, 2195073, 2214657, 2214689, 2214721,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
          ]),
          new Uint32Array([
            2182081, 6291456, 2182113, 6291456, 2182145, 6291456, 2182177,
            6291456, 2182209, 6291456, 2182241, 6291456, 2182273, 6291456,
            2182305, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2146881, 2146945, 2147009, 2147073, 2147137, 2147201,
            2147265, 2147329,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672,
            23068672,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2122915, 2123011, 2123107, 2104708, 2123203, 2123299, 2123395,
            2100133, 2104836, 2100290, 2100293, 2104962, 2104964, 2098052,
            2123491, 2123587,
          ]),
          new Uint32Array([
            23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0,
            6291456,
          ]),
          new Uint32Array([
            6291456, 2171169, 6291456, 2171201, 6291456, 2171233, 6291456,
            2171265, 6291456, 2171297, 6291456, 2171329, 6291456, 6291456,
            2171361, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            0, 0, 2148994, 2149058, 2149122, 0, 6291456, 2149186, 2186945,
            2173537, 2148993, 2149121, 2149058, 10531458, 10496066, 0,
          ]),
          new Uint32Array([
            2195009, 2195041, 2195073, 2195105, 2195137, 2195169, 2195201,
            2195233, 2195265, 2195297, 2195329, 2195361, 2195393, 2195425,
            2195457, 2195489,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2182849, 6291456, 2182881, 6291456, 2182913, 6291456, 2182945,
            6291456, 2182977, 6291456, 2183009, 6291456, 2183041, 6291456,
            2183073, 6291456,
          ]),
          new Uint32Array([
            2211553, 2210081, 2211585, 2211617, 2211649, 2211681, 2211713,
            2211745, 2211777, 2211809, 2209569, 2211841, 2211873, 2211905,
            2211937, 2211969,
          ]),
          new Uint32Array([
            2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153,
            2108481, 2113345, 2113441, 2166594, 2127298, 2166658, 2142978,
            2141827, 2166722,
          ]),
          new Uint32Array([
            2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145,
            2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665,
            2173697, 2173729,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2185761,
            2185793, 2185825, 2185857, 2185889, 2185921, 0, 0,
          ]),
          new Uint32Array([
            6291456, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729,
            2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857,
            2173889, 2173921,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 2220961, 2220961, 2220961, 2220961, 2144193, 2144193,
            2159201, 2159201, 2159265, 2159265, 2144194, 2220993, 2220993,
          ]),
          new Uint32Array([
            2192641, 2235393, 2235425, 2152257, 2116609, 2235457, 2235489,
            2200065, 2235521, 2235553, 2235585, 2212449, 2235617, 2235649,
            2235681, 2235713,
          ]),
          new Uint32Array([
            2194049, 2194081, 2194113, 2194145, 2194177, 2194209, 2194241,
            2194273, 2194305, 2194337, 2194369, 2194401, 2194433, 2194465,
            2194497, 2194529,
          ]),
          new Uint32Array([
            2196673, 2208641, 2208673, 2208705, 2208737, 2208769, 2208801,
            2208833, 2208865, 2208897, 2208929, 2208961, 2208993, 2209025,
            2209057, 2209089,
          ]),
          new Uint32Array([
            2191681, 2191713, 2191745, 2191777, 2153281, 2191809, 2191841,
            2191873, 2191905, 2191937, 2191969, 2192001, 2192033, 2192065,
            2192097, 2192129,
          ]),
          new Uint32Array([
            2230946, 2231010, 2231074, 2231138, 2231202, 2231266, 2231330,
            2231394, 2231458, 2231522, 2231586, 2231650, 2231714, 2231778,
            2231842, 2231906,
          ]),
          new Uint32Array([
            14680064, 14680064, 14680064, 14680064, 14680064, 14680064,
            14680064, 14680064, 14680064, 14680064, 14680064, 14680064,
            14680064, 14680064, 14680064, 14680064,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 2185953, 2185985, 2186017, 2186049, 2186081, 2186113,
            2186145, 2186177,
          ]),
          new Uint32Array([
            2139811, 2139907, 2097284, 2105860, 2105988, 2106116, 2106244,
            2097444, 2097604, 2097155, 10485778, 10486344, 2106372, 6291456, 0,
            0,
          ]),
          new Uint32Array([
            2110051, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2172385, 6291456, 2172417, 6291456, 2172449, 6291456, 2172481,
            6291456, 2172513, 6291456, 2172545, 6291456, 2172577, 6291456,
            2172609, 6291456,
          ]),
          new Uint32Array([
            0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2249345, 2249377, 2249409, 2249441, 2249473, 2249505, 2249537,
            2249570, 2210209, 2249633, 2249665, 2249697, 2249729, 2249761,
            2249793, 2216769,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2187169, 2187201, 2187233, 2187265, 2187297, 2187329, 2187361,
            2187393, 2187425, 2187457, 2187489, 2187521, 2187553, 2187585,
            2187617, 2187649,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0,
            0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2182337, 6291456, 2182369, 6291456, 2182401, 6291456, 2182433,
            6291456, 2182465, 6291456, 2182497, 6291456, 2182529, 6291456,
            2182561, 6291456,
          ]),
          new Uint32Array([
            2138179, 2138275, 2138371, 2138467, 2134243, 2134435, 2138563,
            2138659, 2138755, 2138851, 2138947, 2139043, 2138947, 2138755,
            2139139, 2139235,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2250498, 2250562, 2250625, 2250657, 2208321, 2250689, 2250721,
            2250753, 2250785, 2250817, 2250849, 2218945, 2250881, 2250913,
            2250945, 0,
          ]),
          new Uint32Array([
            2170369, 2105569, 2098305, 2108481, 2173249, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
          ]),
          new Uint32Array([
            2100897, 2111905, 2105473, 2105569, 2105601, 0, 2108193, 0, 0, 0,
            2098305, 2108321, 2108289, 2100865, 2113153, 2108481,
          ]),
          new Uint32Array([
            2100897, 2100897, 2105569, 2105569, 6291456, 2112289, 2149826,
            6291456, 6291456, 2112481, 2112577, 2098177, 2098177, 2098177,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 2169953, 2169985, 6291456, 2170017, 6291456, 2170049,
            2170081, 6291456, 2170113, 2170145, 2170177, 6291456, 6291456,
            2170209, 2170241,
          ]),
          new Uint32Array([
            6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2220641, 2220641, 2220673, 2220673, 2220673, 2220673, 2220705,
            2220705, 2220705, 2220705, 2220737, 2220737, 2220737, 2220737,
            2220769, 2220769,
          ]),
          new Uint32Array([
            2127650, 2127746, 2127842, 2127938, 2128034, 2128130, 2128226,
            2128322, 2128418, 2127523, 2127619, 2127715, 2127811, 2127907,
            2128003, 2128099,
          ]),
          new Uint32Array([
            2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921,
            2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113,
            2174145, 2174177,
          ]),
          new Uint32Array([
            0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672,
          ]),
          new Uint32Array([
            2204705, 2204737, 2204769, 2204801, 2204833, 2204865, 2204897,
            2204929, 2204961, 2204993, 2205025, 2205057, 2205089, 2205121,
            2205153, 2205185,
          ]),
          new Uint32Array([
            2176385, 6291456, 2176417, 6291456, 2176449, 6291456, 2176481,
            6291456, 2176513, 6291456, 2176545, 6291456, 2176577, 6291456,
            2176609, 6291456,
          ]),
          new Uint32Array([
            2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2117857,
            2195713, 2195745, 2195777, 2195809, 2195841, 2195873, 2195905,
            2195937, 2195969,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456,
            6291456,
          ]),
          new Uint32Array([
            2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081,
            2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761,
            2173793, 2174113,
          ]),
          new Uint32Array([
            2131586, 2132450, 2135970, 2135778, 2161602, 2136162, 2163650,
            2161794, 2135586, 2163714, 2137186, 2131810, 2160290, 2135170,
            2097506, 2159554,
          ]),
          new Uint32Array([
            2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065,
            2131297, 2162049, 2133089, 2160577, 2133857, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2116513, 2116609, 2116705, 2116801, 2116897, 2116993, 2117089,
            2117185, 2117281, 2117377, 2117473, 2117569, 2117665, 2117761,
            2117857, 2117953,
          ]),
          new Uint32Array([
            2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953,
            2102081, 2102209, 2100802, 2101154, 2101282, 2101410, 2101538,
            2101666, 2101794,
          ]),
          new Uint32Array([
            2100289, 2098657, 2098049, 2200737, 2123489, 2123681, 2200769,
            2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2098977,
            2150241, 2150305,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456,
            6291456, 2109955, 6291456, 6291456, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            18874368, 18874368, 18874368, 18874368, 18874368, 18874368,
            18874368, 18874368, 18874368, 18874368, 18874368, 18874368,
            18874368, 18874368, 18874368, 18874368,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0,
          ]),
          new Uint32Array([
            2130979, 2131075, 2131075, 2131171, 2131267, 2131363, 2131459,
            2131555, 2131651, 2131651, 2131747, 2131843, 2131939, 2132035,
            2132131, 2132227,
          ]),
          new Uint32Array([
            0, 2177793, 6291456, 2177825, 6291456, 2177857, 6291456, 2177889,
            6291456, 2177921, 6291456, 2177953, 6291456, 2177985, 6291456,
            6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2113345, 0, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417,
            2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601,
            2112289,
          ]),
          new Uint32Array([
            2136643, 2136739, 2136835, 2136931, 2137027, 2137123, 2137219,
            2137315, 2137411, 2137507, 2137603, 2137699, 2137795, 2137891,
            2137987, 2138083,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0,
          ]),
          new Uint32Array([
            2174433, 6291456, 2174465, 6291456, 2174497, 6291456, 2174529,
            6291456, 2174561, 6291456, 2174593, 6291456, 2174625, 6291456,
            2174657, 6291456,
          ]),
          new Uint32Array([
            0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577,
            2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481,
            2113345, 2113441,
          ]),
          new Uint32Array([
            10496547, 10496643, 2105505, 2149698, 6291456, 10496739, 10496835,
            2170273, 6291456, 2149762, 2105825, 2111713, 2111713, 2111713,
            2111713, 2168673,
          ]),
          new Uint32Array([
            6291456, 2143490, 2143490, 2143490, 2171649, 6291456, 2171681,
            2171713, 2171745, 6291456, 2171777, 6291456, 2171809, 6291456,
            2171841, 6291456,
          ]),
          new Uint32Array([
            2159106, 2159106, 2159170, 2159170, 2159234, 2159234, 2159298,
            2159298, 2159298, 2159362, 2159362, 2159362, 2106401, 2106401,
            2106401, 2106401,
          ]),
          new Uint32Array([
            2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305,
            2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441,
            2098209, 2111137,
          ]),
          new Uint32Array([
            2108417, 2181217, 2181249, 2181281, 2170433, 2170401, 2181313,
            2181345, 2181377, 2181409, 2181441, 2181473, 2181505, 2181537,
            2170529, 2181569,
          ]),
          new Uint32Array([
            2218433, 2245761, 2245793, 2245825, 2245857, 2245890, 2245953,
            2245986, 2209665, 2246050, 2246113, 2246146, 2246210, 2246274,
            2246337, 2246369,
          ]),
          new Uint32Array([
            2230754, 2230818, 2230882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2184129, 6291456, 2184161, 6291456, 2184193, 6291456, 6291456,
            6291456, 6291456, 6291456, 2146818, 2183361, 6291456, 6291456,
            2142978, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
          ]),
          new Uint32Array([
            2135170, 2097506, 2130691, 2130787, 2130883, 2163970, 2164034,
            2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482,
            2164546, 2133122,
          ]),
          new Uint32Array([
            2108515, 2108611, 2100740, 2108707, 2108803, 2108899, 2108995,
            2109091, 2109187, 2109283, 2109379, 2109475, 2109571, 2109667,
            2109763, 2100738,
          ]),
          new Uint32Array([
            2102788, 2102916, 2103044, 2120515, 2103172, 2120611, 2120707,
            2098373, 2103300, 2120803, 2120899, 2120995, 2103428, 2103556,
            2121091, 2121187,
          ]),
          new Uint32Array([
            2158082, 2158146, 0, 2158210, 2158274, 0, 2158338, 2158402, 2158466,
            2129922, 2158530, 2158594, 2158658, 2158722, 2158786, 2158850,
          ]),
          new Uint32Array([
            10499619, 10499715, 10499811, 10499907, 10500003, 10500099,
            10500195, 10500291, 10500387, 10500483, 10500579, 10500675,
            10500771, 10500867, 10500963, 10501059,
          ]),
          new Uint32Array([
            2239585, 2239618, 2239681, 2239713, 0, 2191969, 2239745, 2239777,
            2192033, 2239809, 2239841, 2239874, 2239937, 2239970, 2240033,
            2240065,
          ]),
          new Uint32Array([
            2252705, 2252738, 2252801, 2252833, 2252865, 2252897, 2252930,
            2252994, 2253057, 2253089, 2253121, 2253154, 2253217, 2253250,
            2219361, 2219361,
          ]),
          new Uint32Array([
            2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601,
            2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321,
            2108289, 2100865,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            10538050, 10538114, 10538178, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            2226402, 2226466, 2226530, 2226594, 2226658, 2226722, 2226786,
            2226850, 2226914, 2226978, 2227042, 2227106, 2227170, 2227234,
            2227298, 2227362,
          ]),
          new Uint32Array([
            23068672, 6291456, 6291456, 6291456, 6291456, 2144066, 2144130,
            2144194, 2144258, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456,
            23068672, 23068672,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2124674, 2124770, 2123875, 2123971, 2124067, 2124163, 2124259,
            2124355, 2124451, 2124547, 2124643, 2124739, 2124835, 2124931,
            2125027, 2125123,
          ]),
          new Uint32Array([
            2168065, 6291456, 2168097, 6291456, 2168129, 6291456, 2168161,
            6291456, 2168193, 6291456, 2168225, 6291456, 2168257, 6291456,
            2168289, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0,
            0,
          ]),
          new Uint32Array([
            23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 2100610, 2100611, 6291456, 2107842,
            2107843, 6291456, 6291456, 6291456, 6291456, 10537922, 6291456,
            10537986, 6291456,
          ]),
          new Uint32Array([
            2174849, 2174881, 2174913, 2174945, 2174977, 2175009, 2175041,
            2175073, 2175105, 2175137, 2175169, 2175201, 2175233, 2175265,
            2175297, 2175329,
          ]),
          new Uint32Array([
            2154562, 2154626, 2154690, 2154754, 2141858, 2154818, 2154882,
            2127298, 2154946, 2127298, 2155010, 2155074, 2155138, 2155202,
            2155266, 2155202,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 23068672, 0,
          ]),
          new Uint32Array([
            2200641, 2150786, 2150850, 2150914, 2150978, 2151042, 2106562,
            2151106, 2150562, 2151170, 2151234, 2151298, 2151362, 2151426,
            2151490, 2151554,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0,
            0, 0, 0, 0, 0, 6291456, 6291456,
          ]),
          new Uint32Array([
            2220289, 2220289, 2220321, 2220321, 2220321, 2220321, 2220353,
            2220353, 2220353, 2220353, 2220385, 2220385, 2220385, 2220385,
            2220417, 2220417,
          ]),
          new Uint32Array([
            2155330, 2155394, 0, 2155458, 2155522, 2155586, 2105732, 0, 2155650,
            2155714, 2155778, 2125314, 2155842, 2155906, 2126274, 2155970,
          ]),
          new Uint32Array([
            23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456,
            23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456,
            6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2097729, 2106017, 2106017, 2106017, 2106017, 2131297, 2131297,
            2131297, 2131297, 2106081, 2106081, 2162049, 2162049, 2105953,
            2105953, 2162337,
          ]),
          new Uint32Array([
            2097185, 2097697, 2097697, 2097697, 2097697, 2135777, 2135777,
            2135777, 2135777, 2097377, 2097377, 2097377, 2097377, 2097601,
            2097601, 2097217,
          ]),
          new Uint32Array([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672,
          ]),
          new Uint32Array([
            2139331, 2139427, 2139523, 2139043, 2133571, 2132611, 2139619,
            2139715, 0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2174113, 2174145, 2100897, 2098177, 2108289, 2100865, 2173601,
            2173633, 2173985, 2174113, 2174145, 6291456, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672,
            6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456,
            6291456, 6291456,
          ]),
          new Uint32Array([
            23068672, 23068672, 18923778, 23068672, 23068672, 23068672,
            23068672, 18923842, 23068672, 23068672, 23068672, 23068672,
            18923906, 23068672, 23068672, 23068672,
          ]),
          new Uint32Array([
            2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0,
            2133089, 0, 2133857, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
          ]),
          new Uint32Array([
            2177537, 6291456, 2177569, 6291456, 2177601, 6291456, 2177633,
            6291456, 2177665, 6291456, 2177697, 6291456, 2177729, 6291456,
            2177761, 6291456,
          ]),
          new Uint32Array([
            2212481, 2212513, 2212545, 2212577, 2197121, 2212609, 2212641,
            2212673, 2212705, 2212737, 2212769, 2212801, 2212833, 2212865,
            2212897, 2212929,
          ]),
          new Uint32Array([
            6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
          ]),
          new Uint32Array([
            2098241, 2108353, 2170209, 2105825, 2111713, 2100897, 2111905,
            2105473, 2105569, 2105601, 2112289, 6291456, 2108193, 2172417,
            2112481, 2098177,
          ]),
          new Uint32Array([
            6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 23068672, 23068672, 23068672, 23068672, 23068672,
            23068672, 6291456, 6291456,
          ]),
        ];
        var blockIdxes = new Uint16Array([
          616, 616, 565, 147, 161, 411, 330, 2, 131, 131, 328, 454, 241, 408,
          86, 86, 696, 113, 285, 350, 325, 301, 473, 214, 639, 232, 447, 64,
          369, 598, 124, 672, 567, 223, 621, 154, 107, 86, 86, 86, 86, 86, 86,
          505, 86, 68, 634, 86, 218, 218, 218, 218, 486, 218, 218, 513, 188,
          608, 216, 86, 217, 463, 668, 85, 700, 360, 184, 86, 86, 86, 647, 402,
          153, 10, 346, 718, 662, 260, 145, 298, 117, 1, 443, 342, 138, 54, 563,
          86, 240, 572, 218, 70, 387, 86, 118, 460, 641, 602, 86, 86, 306, 218,
          86, 692, 86, 86, 86, 86, 86, 162, 707, 86, 458, 26, 86, 218, 638, 86,
          86, 86, 86, 86, 65, 449, 86, 86, 306, 183, 86, 58, 391, 667, 86, 157,
          131, 131, 131, 131, 86, 433, 131, 406, 31, 218, 247, 86, 86, 693, 218,
          581, 351, 86, 438, 295, 69, 462, 45, 126, 173, 650, 14, 295, 69, 97,
          168, 187, 641, 78, 523, 390, 69, 108, 287, 664, 173, 219, 83, 295, 69,
          108, 431, 426, 173, 694, 412, 115, 628, 52, 257, 398, 641, 118, 501,
          121, 69, 579, 151, 423, 173, 620, 464, 121, 69, 382, 151, 476, 173,
          27, 53, 121, 86, 594, 578, 226, 173, 86, 632, 130, 86, 96, 228, 268,
          641, 622, 563, 86, 86, 21, 148, 650, 131, 131, 321, 43, 144, 343, 381,
          531, 131, 131, 178, 20, 86, 399, 156, 375, 164, 541, 30, 60, 715, 198,
          92, 118, 131, 131, 86, 86, 306, 407, 86, 280, 457, 196, 488, 358, 131,
          131, 244, 86, 86, 143, 86, 86, 86, 86, 86, 667, 563, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 336, 363, 86, 86, 336, 86, 86,
          380, 678, 67, 86, 86, 86, 678, 86, 86, 86, 512, 86, 307, 86, 708, 86,
          86, 86, 86, 86, 528, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 563, 307, 86, 86, 86, 86,
          86, 104, 450, 337, 86, 720, 86, 32, 450, 397, 86, 86, 86, 587, 218,
          558, 708, 708, 293, 708, 86, 86, 86, 86, 86, 694, 205, 86, 8, 86, 86,
          86, 86, 549, 86, 667, 697, 697, 679, 86, 458, 460, 86, 86, 650, 86,
          708, 543, 86, 86, 86, 245, 86, 86, 86, 140, 218, 127, 708, 708, 458,
          197, 131, 131, 131, 131, 500, 86, 86, 483, 251, 86, 306, 510, 515, 86,
          722, 86, 86, 86, 65, 201, 86, 86, 483, 580, 470, 86, 86, 86, 368, 131,
          131, 131, 694, 114, 110, 555, 86, 86, 123, 721, 163, 142, 713, 418,
          86, 317, 675, 209, 218, 218, 218, 371, 545, 592, 629, 490, 603, 199,
          46, 320, 525, 680, 310, 279, 388, 111, 42, 252, 593, 607, 235, 617,
          410, 377, 50, 548, 135, 356, 17, 520, 189, 116, 392, 600, 349, 332,
          482, 699, 690, 535, 119, 106, 451, 71, 152, 667, 131, 218, 218, 265,
          671, 637, 492, 504, 533, 683, 269, 269, 658, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 491, 619, 86, 86, 6, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 229, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 86,
          86, 171, 131, 118, 131, 656, 206, 234, 571, 89, 334, 670, 246, 311,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 534, 86, 86, 86,
          86, 86, 86, 82, 86, 86, 86, 86, 86, 430, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 599, 86, 324, 86, 470, 69, 640, 264, 131, 626, 101, 174, 86,
          86, 667, 233, 105, 73, 374, 394, 221, 204, 84, 28, 326, 86, 86, 471,
          86, 86, 86, 109, 573, 86, 171, 200, 200, 200, 200, 218, 218, 86, 86,
          86, 86, 460, 131, 131, 131, 86, 506, 86, 86, 86, 86, 86, 220, 404, 34,
          614, 47, 442, 305, 25, 612, 338, 601, 648, 7, 344, 255, 131, 131, 51,
          86, 312, 507, 563, 86, 86, 86, 86, 588, 86, 86, 86, 86, 86, 530, 511,
          86, 458, 3, 435, 384, 556, 522, 230, 527, 86, 118, 86, 86, 717, 86,
          137, 273, 79, 181, 484, 23, 93, 112, 655, 249, 417, 703, 370, 87, 98,
          313, 684, 585, 155, 465, 596, 481, 695, 18, 416, 428, 61, 701, 706,
          282, 643, 495, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 549, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 131, 131, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 307, 86, 86, 86, 171, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 650, 131, 422, 542, 420, 263,
          24, 172, 86, 86, 86, 86, 86, 566, 86, 86, 132, 540, 395, 353, 494,
          519, 19, 485, 284, 472, 131, 131, 131, 16, 714, 86, 211, 708, 86, 86,
          86, 694, 698, 86, 86, 483, 704, 708, 218, 272, 86, 86, 120, 86, 159,
          478, 86, 307, 247, 86, 86, 663, 597, 459, 627, 667, 86, 86, 277, 455,
          39, 302, 86, 250, 86, 86, 86, 271, 99, 452, 306, 281, 329, 400, 200,
          86, 86, 362, 549, 352, 646, 461, 323, 586, 86, 86, 4, 708, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 86,
          518, 86, 86, 650, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          125, 554, 480, 300, 613, 72, 333, 288, 561, 544, 604, 48, 719, 91,
          169, 176, 590, 224, 76, 191, 29, 559, 560, 231, 537, 166, 477, 538,
          256, 437, 131, 131, 469, 167, 40, 0, 685, 266, 441, 705, 239, 642,
          475, 568, 640, 610, 299, 673, 517, 318, 385, 22, 202, 180, 179, 359,
          424, 215, 90, 66, 521, 653, 467, 682, 453, 409, 479, 88, 131, 661, 35,
          303, 15, 262, 666, 630, 712, 131, 131, 618, 659, 175, 218, 195, 347,
          193, 227, 261, 150, 165, 709, 546, 294, 569, 710, 270, 413, 376, 524,
          55, 242, 38, 419, 529, 170, 657, 3, 304, 122, 379, 278, 131, 651, 86,
          67, 576, 458, 458, 131, 131, 86, 86, 86, 86, 86, 86, 86, 118, 309, 86,
          86, 547, 86, 86, 86, 86, 667, 650, 664, 131, 131, 86, 86, 56, 131,
          131, 131, 131, 131, 131, 131, 131, 86, 307, 86, 86, 86, 664, 238, 650,
          86, 86, 717, 86, 118, 86, 86, 315, 86, 59, 86, 86, 574, 549, 131, 131,
          340, 57, 436, 86, 86, 86, 86, 86, 86, 458, 708, 499, 691, 62, 86, 650,
          86, 86, 694, 86, 86, 86, 319, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 171, 86, 549, 694, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 77, 86, 86, 139, 86, 502, 86, 86, 86, 667, 595, 131, 131, 131,
          86, 12, 86, 13, 86, 609, 131, 131, 131, 131, 86, 86, 86, 625, 86, 669,
          86, 86, 182, 129, 86, 5, 694, 104, 86, 86, 86, 86, 131, 131, 86, 86,
          386, 171, 86, 86, 86, 345, 86, 324, 86, 589, 86, 213, 36, 131, 131,
          131, 131, 131, 86, 86, 86, 86, 104, 131, 131, 131, 141, 290, 80, 677,
          86, 86, 86, 267, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 667,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 515, 86, 86, 33,
          136, 669, 86, 711, 515, 86, 86, 550, 640, 86, 104, 708, 515, 86, 159,
          372, 717, 86, 86, 444, 515, 86, 86, 663, 37, 86, 563, 460, 86, 390,
          624, 702, 131, 131, 131, 131, 389, 59, 708, 86, 86, 341, 208, 708,
          635, 295, 69, 108, 431, 508, 100, 190, 131, 131, 131, 131, 131, 131,
          131, 131, 86, 86, 86, 649, 516, 660, 131, 131, 86, 86, 86, 218, 631,
          708, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 341,
          575, 238, 514, 131, 131, 86, 86, 86, 218, 291, 708, 307, 131, 86, 86,
          306, 367, 708, 131, 131, 131, 86, 378, 697, 86, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 615, 253, 86, 86, 86, 292, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 104,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 69, 86, 341, 553, 549, 86, 307, 86, 86, 645, 275, 455, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          708, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 667, 460,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 171, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 104, 86, 667, 459,
          131, 131, 131, 131, 131, 131, 86, 458, 225, 86, 86, 86, 516, 549, 11,
          390, 405, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 86, 86, 86, 86, 460, 44, 218, 197, 711, 515, 131, 131, 131,
          131, 664, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 131, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 640, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 118,
          307, 104, 286, 591, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 549, 86, 86, 681, 86, 86, 75, 185, 314, 582, 86, 358,
          496, 474, 86, 104, 131, 86, 86, 86, 86, 146, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 171, 86, 640, 131,
          131, 131, 131, 131, 131, 131, 131, 246, 503, 689, 339, 674, 81, 258,
          415, 439, 128, 562, 366, 414, 246, 503, 689, 583, 222, 557, 316, 636,
          665, 186, 355, 95, 670, 246, 503, 689, 339, 674, 557, 258, 415, 439,
          186, 355, 95, 670, 246, 503, 689, 446, 644, 536, 652, 331, 532, 335,
          440, 274, 421, 297, 570, 74, 425, 364, 425, 606, 552, 403, 509, 134,
          365, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 218,
          218, 218, 498, 218, 218, 577, 627, 551, 497, 572, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 553, 354, 236,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 296, 455, 131, 131, 456,
          243, 103, 86, 41, 459, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 9, 276, 158, 716, 393,
          564, 383, 489, 401, 654, 210, 654, 131, 131, 131, 640, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86,
          86, 650, 86, 86, 86, 86, 86, 86, 717, 667, 563, 563, 563, 86, 549,
          102, 686, 133, 246, 605, 86, 448, 86, 86, 207, 307, 131, 131, 131,
          641, 86, 177, 611, 445, 373, 194, 584, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 307,
          171, 86, 86, 86, 86, 86, 86, 86, 717, 86, 86, 86, 86, 86, 460, 131,
          131, 650, 86, 86, 86, 694, 708, 86, 86, 694, 86, 458, 131, 131, 131,
          131, 131, 131, 667, 694, 289, 650, 667, 131, 131, 86, 640, 131, 131,
          664, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 171, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 460, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 458, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
          86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 640, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 466, 203,
          149, 429, 94, 432, 160, 687, 539, 63, 237, 283, 192, 248, 348, 259,
          427, 526, 396, 676, 254, 468, 487, 212, 327, 623, 49, 633, 322, 493,
          434, 688, 357, 361, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
        ]);
        var mappingStr =
          "\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064A\u0647 \u0648\u0633\u0644\u0645\u062C\u0644 \u062C\u0644\u0627\u0644\u0647\u30AD\u30ED\u30E1\u30FC\u30C8\u30EBrad\u2215s2\u30A8\u30B9\u30AF\u30FC\u30C9\u30AD\u30ED\u30B0\u30E9\u30E0\u30AD\u30ED\u30EF\u30C3\u30C8\u30B0\u30E9\u30E0\u30C8\u30F3\u30AF\u30EB\u30BC\u30A4\u30ED\u30B5\u30F3\u30C1\u30FC\u30E0\u30D1\u30FC\u30BB\u30F3\u30C8\u30D4\u30A2\u30B9\u30C8\u30EB\u30D5\u30A1\u30E9\u30C3\u30C9\u30D6\u30C3\u30B7\u30A7\u30EB\u30D8\u30AF\u30BF\u30FC\u30EB\u30DE\u30F3\u30B7\u30E7\u30F3\u30DF\u30EA\u30D0\u30FC\u30EB\u30EC\u30F3\u30C8\u30B2\u30F3\u2032\u2032\u2032\u20321\u204410viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)\u222B\u222B\u222B\u222B(\uC624\uC804)(\uC624\uD6C4)\u30A2\u30D1\u30FC\u30C8\u30A2\u30EB\u30D5\u30A1\u30A2\u30F3\u30DA\u30A2\u30A4\u30CB\u30F3\u30B0\u30A8\u30FC\u30AB\u30FC\u30AB\u30E9\u30C3\u30C8\u30AB\u30ED\u30EA\u30FC\u30AD\u30E5\u30EA\u30FC\u30AE\u30EB\u30C0\u30FC\u30AF\u30ED\u30FC\u30CD\u30B5\u30A4\u30AF\u30EB\u30B7\u30EA\u30F3\u30B0\u30D0\u30FC\u30EC\u30EB\u30D5\u30A3\u30FC\u30C8\u30DD\u30A4\u30F3\u30C8\u30DE\u30A4\u30AF\u30ED\u30DF\u30AF\u30ED\u30F3\u30E1\u30AC\u30C8\u30F3\u30EA\u30C3\u30C8\u30EB\u30EB\u30FC\u30D6\u30EB\u682A\u5F0F\u4F1A\u793Ekcalm\u2215s2c\u2215kg\u0627\u0643\u0628\u0631\u0645\u062D\u0645\u062F\u0635\u0644\u0639\u0645\u0631\u0633\u0648\u0644\u0631\u06CC\u0627\u06441\u204441\u204423\u20444 \u0308\u0301\u0FB2\u0F71\u0F80\u0FB3\u0F71\u0F80 \u0308\u0342 \u0313\u0300 \u0313\u0301 \u0313\u0342 \u0314\u0300 \u0314\u0301 \u0314\u0342 \u0308\u0300\u2035\u2035\u2035a/ca/sc/oc/utelfax1\u204471\u204491\u204432\u204431\u204452\u204453\u204454\u204451\u204465\u204461\u204483\u204485\u204487\u20448xii0\u20443\u222E\u222E\u222E(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(\u1100)(\u1102)(\u1103)(\u1105)(\u1106)(\u1107)(\u1109)(\u110B)(\u110C)(\u110E)(\u110F)(\u1110)(\u1111)(\u1112)(\uAC00)(\uB098)(\uB2E4)(\uB77C)(\uB9C8)(\uBC14)(\uC0AC)(\uC544)(\uC790)(\uCC28)(\uCE74)(\uD0C0)(\uD30C)(\uD558)(\uC8FC)(\u4E00)(\u4E8C)(\u4E09)(\u56DB)(\u4E94)(\u516D)(\u4E03)(\u516B)(\u4E5D)(\u5341)(\u6708)(\u706B)(\u6C34)(\u6728)(\u91D1)(\u571F)(\u65E5)(\u682A)(\u6709)(\u793E)(\u540D)(\u7279)(\u8CA1)(\u795D)(\u52B4)(\u4EE3)(\u547C)(\u5B66)(\u76E3)(\u4F01)(\u8CC7)(\u5354)(\u796D)(\u4F11)(\u81EA)(\u81F3)pte10\u670811\u670812\u6708ergltd\u30A2\u30FC\u30EB\u30A4\u30F3\u30C1\u30A6\u30A9\u30F3\u30AA\u30F3\u30B9\u30AA\u30FC\u30E0\u30AB\u30A4\u30EA\u30AC\u30ED\u30F3\u30AC\u30F3\u30DE\u30AE\u30CB\u30FC\u30B1\u30FC\u30B9\u30B3\u30EB\u30CA\u30B3\u30FC\u30DD\u30BB\u30F3\u30C1\u30C0\u30FC\u30B9\u30CE\u30C3\u30C8\u30CF\u30A4\u30C4\u30D1\u30FC\u30C4\u30D4\u30AF\u30EB\u30D5\u30E9\u30F3\u30DA\u30CB\u30D2\u30D8\u30EB\u30C4\u30DA\u30F3\u30B9\u30DA\u30FC\u30B8\u30D9\u30FC\u30BF\u30DC\u30EB\u30C8\u30DD\u30F3\u30C9\u30DB\u30FC\u30EB\u30DB\u30FC\u30F3\u30DE\u30A4\u30EB\u30DE\u30C3\u30CF\u30DE\u30EB\u30AF\u30E4\u30FC\u30C9\u30E4\u30FC\u30EB\u30E6\u30A2\u30F3\u30EB\u30D4\u30FC10\u70B911\u70B912\u70B913\u70B914\u70B915\u70B916\u70B917\u70B918\u70B919\u70B920\u70B921\u70B922\u70B923\u70B924\u70B9hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv\u2215ma\u2215m10\u65E511\u65E512\u65E513\u65E514\u65E515\u65E516\u65E517\u65E518\u65E519\u65E520\u65E521\u65E522\u65E523\u65E524\u65E525\u65E526\u65E527\u65E528\u65E529\u65E530\u65E531\u65E5galffiffl\u05E9\u05BC\u05C1\u05E9\u05BC\u05C2 \u064C\u0651 \u064D\u0651 \u064E\u0651 \u064F\u0651 \u0650\u0651 \u0651\u0670\u0640\u064E\u0651\u0640\u064F\u0651\u0640\u0650\u0651\u062A\u062C\u0645\u062A\u062D\u062C\u062A\u062D\u0645\u062A\u062E\u0645\u062A\u0645\u062C\u062A\u0645\u062D\u062A\u0645\u062E\u062C\u0645\u062D\u062D\u0645\u064A\u062D\u0645\u0649\u0633\u062D\u062C\u0633\u062C\u062D\u0633\u062C\u0649\u0633\u0645\u062D\u0633\u0645\u062C\u0633\u0645\u0645\u0635\u062D\u062D\u0635\u0645\u0645\u0634\u062D\u0645\u0634\u062C\u064A\u0634\u0645\u062E\u0634\u0645\u0645\u0636\u062D\u0649\u0636\u062E\u0645\u0637\u0645\u062D\u0637\u0645\u0645\u0637\u0645\u064A\u0639\u062C\u0645\u0639\u0645\u0645\u0639\u0645\u0649\u063A\u0645\u0645\u063A\u0645\u064A\u063A\u0645\u0649\u0641\u062E\u0645\u0642\u0645\u062D\u0642\u0645\u0645\u0644\u062D\u0645\u0644\u062D\u064A\u0644\u062D\u0649\u0644\u062C\u062C\u0644\u062E\u0645\u0644\u0645\u062D\u0645\u062D\u062C\u0645\u062D\u064A\u0645\u062C\u062D\u0645\u062C\u0645\u0645\u062E\u0645\u0645\u062C\u062E\u0647\u0645\u062C\u0647\u0645\u0645\u0646\u062D\u0645\u0646\u062D\u0649\u0646\u062C\u0645\u0646\u062C\u0649\u0646\u0645\u064A\u0646\u0645\u0649\u064A\u0645\u0645\u0628\u062E\u064A\u062A\u062C\u064A\u062A\u062C\u0649\u062A\u062E\u064A\u062A\u062E\u0649\u062A\u0645\u064A\u062A\u0645\u0649\u062C\u0645\u064A\u062C\u062D\u0649\u062C\u0645\u0649\u0633\u062E\u0649\u0635\u062D\u064A\u0634\u062D\u064A\u0636\u062D\u064A\u0644\u062C\u064A\u0644\u0645\u064A\u064A\u062D\u064A\u064A\u062C\u064A\u064A\u0645\u064A\u0645\u0645\u064A\u0642\u0645\u064A\u0646\u062D\u064A\u0639\u0645\u064A\u0643\u0645\u064A\u0646\u062C\u062D\u0645\u062E\u064A\u0644\u062C\u0645\u0643\u0645\u0645\u062C\u062D\u064A\u062D\u062C\u064A\u0645\u062C\u064A\u0641\u0645\u064A\u0628\u062D\u064A\u0633\u062E\u064A\u0646\u062C\u064A\u0635\u0644\u06D2\u0642\u0644\u06D2\u{1D158}\u{1D165}\u{1D16E}\u{1D158}\u{1D165}\u{1D16F}\u{1D158}\u{1D165}\u{1D170}\u{1D158}\u{1D165}\u{1D171}\u{1D158}\u{1D165}\u{1D172}\u{1D1B9}\u{1D165}\u{1D16E}\u{1D1BA}\u{1D165}\u{1D16E}\u{1D1B9}\u{1D165}\u{1D16F}\u{1D1BA}\u{1D165}\u{1D16F}\u3014s\u3015ppv\u3014\u672C\u3015\u3014\u4E09\u3015\u3014\u4E8C\u3015\u3014\u5B89\u3015\u3014\u70B9\u3015\u3014\u6253\u3015\u3014\u76D7\u3015\u3014\u52DD\u3015\u3014\u6557\u3015 \u0304 \u0301 \u0327ssi\u0307ijl\xB7\u02BCnd\u017Eljnjdz \u0306 \u0307 \u030A \u0328 \u0303 \u030B \u03B9\u0565\u0582\u0627\u0674\u0648\u0674\u06C7\u0674\u064A\u0674\u0915\u093C\u0916\u093C\u0917\u093C\u091C\u093C\u0921\u093C\u0922\u093C\u092B\u093C\u092F\u093C\u09A1\u09BC\u09A2\u09BC\u09AF\u09BC\u0A32\u0A3C\u0A38\u0A3C\u0A16\u0A3C\u0A17\u0A3C\u0A1C\u0A3C\u0A2B\u0A3C\u0B21\u0B3C\u0B22\u0B3C\u0E4D\u0E32\u0ECD\u0EB2\u0EAB\u0E99\u0EAB\u0EA1\u0F42\u0FB7\u0F4C\u0FB7\u0F51\u0FB7\u0F56\u0FB7\u0F5B\u0FB7\u0F40\u0FB5\u0F71\u0F72\u0F71\u0F74\u0FB2\u0F80\u0FB3\u0F80\u0F92\u0FB7\u0F9C\u0FB7\u0FA1\u0FB7\u0FA6\u0FB7\u0FAB\u0FB7\u0F90\u0FB5a\u02BE\u1F00\u03B9\u1F01\u03B9\u1F02\u03B9\u1F03\u03B9\u1F04\u03B9\u1F05\u03B9\u1F06\u03B9\u1F07\u03B9\u1F20\u03B9\u1F21\u03B9\u1F22\u03B9\u1F23\u03B9\u1F24\u03B9\u1F25\u03B9\u1F26\u03B9\u1F27\u03B9\u1F60\u03B9\u1F61\u03B9\u1F62\u03B9\u1F63\u03B9\u1F64\u03B9\u1F65\u03B9\u1F66\u03B9\u1F67\u03B9\u1F70\u03B9\u03B1\u03B9\u03AC\u03B9\u1FB6\u03B9 \u0342\u1F74\u03B9\u03B7\u03B9\u03AE\u03B9\u1FC6\u03B9\u1F7C\u03B9\u03C9\u03B9\u03CE\u03B9\u1FF6\u03B9 \u0333!! \u0305???!!?rs\xB0c\xB0fnosmtmivix\u2ADD\u0338 \u3099 \u309A\u3088\u308A\u30B3\u30C8333435\uCC38\uACE0\uC8FC\uC758363738394042444546474849503\u67084\u67085\u67086\u67087\u67088\u67089\u6708hgev\u30AE\u30AC\u30C7\u30B7\u30C9\u30EB\u30CA\u30CE\u30D4\u30B3\u30D3\u30EB\u30DA\u30BD\u30DB\u30F3\u30EA\u30E9\u30EC\u30E0daauovpciu\u5E73\u6210\u662D\u548C\u5927\u6B63\u660E\u6CBBna\u03BCakakbmbgbpfnf\u03BCf\u03BCgmg\u03BClmldlklfmnm\u03BCmpsns\u03BCsmsnv\u03BCvkvpwnw\u03BCwmwkwk\u03C9m\u03C9bqcccddbgyhainkkktlnlxphprsrsvwbst\u0574\u0576\u0574\u0565\u0574\u056B\u057E\u0576\u0574\u056D\u05D9\u05B4\u05F2\u05B7\u05E9\u05C1\u05E9\u05C2\u05D0\u05B7\u05D0\u05B8\u05D0\u05BC\u05D1\u05BC\u05D2\u05BC\u05D3\u05BC\u05D4\u05BC\u05D5\u05BC\u05D6\u05BC\u05D8\u05BC\u05D9\u05BC\u05DA\u05BC\u05DB\u05BC\u05DC\u05BC\u05DE\u05BC\u05E0\u05BC\u05E1\u05BC\u05E3\u05BC\u05E4\u05BC\u05E6\u05BC\u05E7\u05BC\u05E8\u05BC\u05EA\u05BC\u05D5\u05B9\u05D1\u05BF\u05DB\u05BF\u05E4\u05BF\u05D0\u05DC\u0626\u0627\u0626\u06D5\u0626\u0648\u0626\u06C7\u0626\u06C6\u0626\u06C8\u0626\u06D0\u0626\u0649\u0626\u062C\u0626\u062D\u0626\u0645\u0626\u064A\u0628\u062C\u0628\u0645\u0628\u0649\u0628\u064A\u062A\u0649\u062A\u064A\u062B\u062C\u062B\u0645\u062B\u0649\u062B\u064A\u062E\u062D\u0636\u062C\u0636\u0645\u0637\u062D\u0638\u0645\u063A\u062C\u0641\u062C\u0641\u062D\u0641\u0649\u0641\u064A\u0642\u062D\u0642\u0649\u0642\u064A\u0643\u0627\u0643\u062C\u0643\u062D\u0643\u062E\u0643\u0644\u0643\u0649\u0643\u064A\u0646\u062E\u0646\u0649\u0646\u064A\u0647\u062C\u0647\u0649\u0647\u064A\u064A\u0649\u0630\u0670\u0631\u0670\u0649\u0670\u0626\u0631\u0626\u0632\u0626\u0646\u0628\u0632\u0628\u0646\u062A\u0631\u062A\u0632\u062A\u0646\u062B\u0631\u062B\u0632\u062B\u0646\u0645\u0627\u0646\u0631\u0646\u0632\u0646\u0646\u064A\u0631\u064A\u0632\u0626\u062E\u0626\u0647\u0628\u0647\u062A\u0647\u0635\u062E\u0646\u0647\u0647\u0670\u062B\u0647\u0633\u0647\u0634\u0647\u0637\u0649\u0637\u064A\u0639\u0649\u0639\u064A\u063A\u0649\u063A\u064A\u0633\u0649\u0633\u064A\u0634\u0649\u0634\u064A\u0635\u0649\u0635\u064A\u0636\u0649\u0636\u064A\u0634\u062E\u0634\u0631\u0633\u0631\u0635\u0631\u0636\u0631\u0627\u064B \u064B\u0640\u064B\u0640\u0651 \u0652\u0640\u0652\u0644\u0622\u0644\u0623\u0644\u0625\u{1D157}\u{1D165}0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddj\u307B\u304B\u30B3\u30B3\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0135\u0137\u013A\u013C\u013E\u0142\u0144\u0146\u0148\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\xFF\u017A\u017C\u0253\u0183\u0185\u0254\u0188\u0256\u0257\u018C\u01DD\u0259\u025B\u0192\u0260\u0263\u0269\u0268\u0199\u026F\u0272\u0275\u01A1\u01A3\u01A5\u0280\u01A8\u0283\u01AD\u0288\u01B0\u028A\u028B\u01B4\u01B6\u0292\u01B9\u01BD\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F5\u0195\u01BF\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u019E\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233\u2C65\u023C\u019A\u2C66\u0242\u0180\u0289\u028C\u0247\u0249\u024B\u024D\u024F\u0266\u0279\u027B\u0281\u0295\u0371\u0373\u02B9\u0377;\u03F3\u03AD\u03AF\u03CC\u03CD\u03B2\u03B3\u03B4\u03B5\u03B6\u03B8\u03BA\u03BB\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03CA\u03CB\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF\u03F8\u03FB\u037B\u037C\u037D\u0450\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\u045D\u045E\u045F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561\u0562\u0563\u0564\u0566\u0567\u0568\u0569\u056A\u056C\u056E\u056F\u0570\u0571\u0572\u0573\u0575\u0577\u0578\u0579\u057A\u057B\u057C\u057D\u057F\u0580\u0581\u0583\u0584\u0585\u0586\u0F0B\u2D27\u2D2D\u10DC\u13F0\u13F1\u13F2\u13F3\u13F4\u13F5\uA64B\u0250\u0251\u1D02\u025C\u1D16\u1D17\u1D1D\u1D25\u0252\u0255\u025F\u0261\u0265\u026A\u1D7B\u029D\u026D\u1D85\u029F\u0271\u0270\u0273\u0274\u0278\u0282\u01AB\u1D1C\u0290\u0291\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF\u1F10\u1F11\u1F12\u1F13\u1F14\u1F15\u1F30\u1F31\u1F32\u1F33\u1F34\u1F35\u1F36\u1F37\u1F40\u1F41\u1F42\u1F43\u1F44\u1F45\u1F51\u1F53\u1F55\u1F57\u1FB0\u1FB1\u1F72\u0390\u1FD0\u1FD1\u1F76\u03B0\u1FE0\u1FE1\u1F7A\u1FE5`\u1F78\u2010+\u2212\u2211\u3008\u3009\u2C30\u2C31\u2C32\u2C33\u2C34\u2C35\u2C36\u2C37\u2C38\u2C39\u2C3A\u2C3B\u2C3C\u2C3D\u2C3E\u2C3F\u2C40\u2C41\u2C42\u2C43\u2C44\u2C45\u2C46\u2C47\u2C48\u2C49\u2C4A\u2C4B\u2C4C\u2C4D\u2C4E\u2C4F\u2C50\u2C51\u2C52\u2C53\u2C54\u2C55\u2C56\u2C57\u2C58\u2C59\u2C5A\u2C5B\u2C5C\u2C5D\u2C5E\u2C61\u026B\u1D7D\u027D\u2C68\u2C6A\u2C6C\u2C73\u2C76\u023F\u0240\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CEC\u2CEE\u2CF3\u2D61\u6BCD\u9F9F\u4E28\u4E36\u4E3F\u4E59\u4E85\u4EA0\u4EBA\u513F\u5165\u5182\u5196\u51AB\u51E0\u51F5\u5200\u529B\u52F9\u5315\u531A\u5338\u535C\u5369\u5382\u53B6\u53C8\u53E3\u56D7\u58EB\u5902\u590A\u5915\u5973\u5B50\u5B80\u5BF8\u5C0F\u5C22\u5C38\u5C6E\u5C71\u5DDB\u5DE5\u5DF1\u5DFE\u5E72\u5E7A\u5E7F\u5EF4\u5EFE\u5F0B\u5F13\u5F50\u5F61\u5F73\u5FC3\u6208\u6236\u624B\u652F\u6534\u6587\u6597\u65A4\u65B9\u65E0\u66F0\u6B20\u6B62\u6B79\u6BB3\u6BCB\u6BD4\u6BDB\u6C0F\u6C14\u722A\u7236\u723B\u723F\u7247\u7259\u725B\u72AC\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7530\u758B\u7592\u7676\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79B8\u79BE\u7A74\u7ACB\u7AF9\u7C73\u7CF8\u7F36\u7F51\u7F8A\u7FBD\u8001\u800C\u8012\u8033\u807F\u8089\u81E3\u81FC\u820C\u821B\u821F\u826E\u8272\u8278\u864D\u866B\u8840\u884C\u8863\u897E\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C78\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FB5\u9091\u9149\u91C6\u91CC\u9577\u9580\u961C\u96B6\u96B9\u96E8\u9751\u975E\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u99AC\u9AA8\u9AD8\u9ADF\u9B25\u9B2F\u9B32\u9B3C\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u9EC3\u9ECD\u9ED1\u9EF9\u9EFD\u9F0E\u9F13\u9F20\u9F3B\u9F4A\u9F52\u9F8D\u9F9C\u9FA0.\u3012\u5344\u5345\u1101\u11AA\u11AC\u11AD\u1104\u11B0\u11B1\u11B2\u11B3\u11B4\u11B5\u111A\u1108\u1121\u110A\u110D\u1161\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116A\u116B\u116C\u116D\u116E\u116F\u1170\u1171\u1172\u1173\u1174\u1175\u1114\u1115\u11C7\u11C8\u11CC\u11CE\u11D3\u11D7\u11D9\u111C\u11DD\u11DF\u111D\u111E\u1120\u1122\u1123\u1127\u1129\u112B\u112C\u112D\u112E\u112F\u1132\u1136\u1140\u1147\u114C\u11F1\u11F2\u1157\u1158\u1159\u1184\u1185\u1188\u1191\u1192\u1194\u119E\u11A1\u4E0A\u4E2D\u4E0B\u7532\u4E19\u4E01\u5929\u5730\u554F\u5E7C\u7B8F\uC6B0\u79D8\u7537\u9069\u512A\u5370\u6CE8\u9805\u5199\u5DE6\u53F3\u533B\u5B97\u591C\u30C6\u30CC\u30E2\u30E8\u30F0\u30F1\u30F2\uA641\uA643\uA645\uA647\uA649\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA77A\uA77C\u1D79\uA77F\uA781\uA783\uA785\uA787\uA78C\uA791\uA793\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\u026C\u029E\u0287\uAB53\uA7B5\uA7B7\uAB37\uAB52\u13A0\u13A1\u13A2\u13A3\u13A4\u13A5\u13A6\u13A7\u13A8\u13A9\u13AA\u13AB\u13AC\u13AD\u13AE\u13AF\u13B0\u13B1\u13B2\u13B3\u13B4\u13B5\u13B6\u13B7\u13B8\u13B9\u13BA\u13BB\u13BC\u13BD\u13BE\u13BF\u13C0\u13C1\u13C2\u13C3\u13C4\u13C5\u13C6\u13C7\u13C8\u13C9\u13CA\u13CB\u13CC\u13CD\u13CE\u13CF\u13D0\u13D1\u13D2\u13D3\u13D4\u13D5\u13D6\u13D7\u13D8\u13D9\u13DA\u13DB\u13DC\u13DD\u13DE\u13DF\u13E0\u13E1\u13E2\u13E3\u13E4\u13E5\u13E6\u13E7\u13E8\u13E9\u13EA\u13EB\u13EC\u13ED\u13EE\u13EF\u8C48\u66F4\u8CC8\u6ED1\u4E32\u53E5\u5951\u5587\u5948\u61F6\u7669\u7F85\u863F\u87BA\u88F8\u908F\u6A02\u6D1B\u70D9\u73DE\u843D\u916A\u99F1\u4E82\u5375\u6B04\u721B\u862D\u9E1E\u5D50\u6FEB\u85CD\u8964\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u90CE\u4F86\u51B7\u52DE\u64C4\u6AD3\u7210\u76E7\u8606\u865C\u8DEF\u9732\u9B6F\u9DFA\u788C\u797F\u7DA0\u83C9\u9304\u8AD6\u58DF\u5F04\u7C60\u807E\u7262\u78CA\u8CC2\u96F7\u58D8\u5C62\u6A13\u6DDA\u6F0F\u7D2F\u7E37\u964B\u52D2\u808B\u51DC\u51CC\u7A1C\u7DBE\u83F1\u9675\u8B80\u62CF\u8AFE\u4E39\u5BE7\u6012\u7387\u7570\u5317\u78FB\u4FBF\u5FA9\u4E0D\u6CCC\u6578\u7D22\u53C3\u585E\u7701\u8449\u8AAA\u6BBA\u6C88\u62FE\u82E5\u63A0\u7565\u4EAE\u5169\u51C9\u6881\u7CE7\u826F\u8AD2\u91CF\u52F5\u5442\u5EEC\u65C5\u6FFE\u792A\u95AD\u9A6A\u9E97\u9ECE\u66C6\u6B77\u8F62\u5E74\u6190\u6200\u649A\u6F23\u7149\u7489\u79CA\u7DF4\u806F\u8F26\u84EE\u9023\u934A\u5217\u52A3\u54BD\u70C8\u88C2\u5EC9\u5FF5\u637B\u6BAE\u7C3E\u7375\u4EE4\u56F9\u5DBA\u601C\u73B2\u7469\u7F9A\u8046\u9234\u96F6\u9748\u9818\u4F8B\u79AE\u91B4\u96B8\u60E1\u4E86\u50DA\u5BEE\u5C3F\u6599\u71CE\u7642\u84FC\u907C\u6688\u962E\u5289\u677B\u67F3\u6D41\u6E9C\u7409\u7559\u786B\u7D10\u985E\u622E\u9678\u502B\u5D19\u6DEA\u8F2A\u5F8B\u6144\u6817\u9686\u5229\u540F\u5C65\u6613\u674E\u68A8\u6CE5\u7406\u75E2\u7F79\u88CF\u88E1\u96E2\u533F\u6EBA\u541D\u71D0\u7498\u85FA\u96A3\u9C57\u9E9F\u6797\u6DCB\u81E8\u7B20\u7C92\u72C0\u7099\u8B58\u4EC0\u8336\u523A\u5207\u5EA6\u62D3\u7CD6\u5B85\u6D1E\u66B4\u8F3B\u964D\u5ED3\u5140\u55C0\u585A\u6674\u51DE\u732A\u76CA\u793C\u795E\u7965\u798F\u9756\u7CBE\u8612\u8AF8\u9038\u90FD\u98EF\u98FC\u9928\u9DB4\u90DE\u96B7\u4FAE\u50E7\u514D\u52C9\u52E4\u5351\u559D\u5606\u5668\u5840\u58A8\u5C64\u6094\u6168\u618E\u61F2\u654F\u65E2\u6691\u6885\u6D77\u6E1A\u6F22\u716E\u722B\u7422\u7891\u7949\u7948\u7950\u7956\u798D\u798E\u7A40\u7A81\u7BC0\u7E09\u7E41\u7F72\u8005\u81ED\u8279\u8457\u8910\u8996\u8B01\u8B39\u8CD3\u8D08\u8FB6\u96E3\u97FF\u983B\u6075\u{242EE}\u8218\u4E26\u51B5\u5168\u4F80\u5145\u5180\u52C7\u52FA\u5555\u5599\u55E2\u58B3\u5944\u5954\u5A62\u5B28\u5ED2\u5ED9\u5F69\u5FAD\u60D8\u614E\u6108\u6160\u6234\u63C4\u641C\u6452\u6556\u671B\u6756\u6EDB\u6ECB\u701E\u77A7\u7235\u72AF\u7471\u7506\u753B\u761D\u761F\u76DB\u76F4\u774A\u7740\u78CC\u7AB1\u7C7B\u7D5B\u7F3E\u8352\u83EF\u8779\u8941\u8986\u8ABF\u8ACB\u8AED\u8B8A\u8F38\u9072\u9199\u9276\u967C\u97DB\u980B\u9B12\u{2284A}\u{22844}\u{233D5}\u3B9D\u4018\u4039\u{25249}\u{25CD0}\u{27ED3}\u9F43\u9F8E\u05E2\u05DD\u0671\u067B\u067E\u0680\u067A\u067F\u0679\u06A4\u06A6\u0684\u0683\u0686\u0687\u068D\u068C\u068E\u0688\u0698\u0691\u06A9\u06AF\u06B3\u06B1\u06BA\u06BB\u06C0\u06C1\u06BE\u06D3\u06AD\u06CB\u06C5\u06C9\u3001\u3016\u3017\u2014\u2013_{}\u3010\u3011\u300A\u300B\u300C\u300D\u300E\u300F[]#&*-<>\\$%@\u0621\u0624\u0629\"'^|~\u2985\u2986\u30FB\u30A5\u30E3\xA2\xA3\xAC\xA6\xA5\u20A9\u2502\u2190\u2191\u2192\u2193\u25A0\u25CB\u{10428}\u{10429}\u{1042A}\u{1042B}\u{1042C}\u{1042D}\u{1042E}\u{1042F}\u{10430}\u{10431}\u{10432}\u{10433}\u{10434}\u{10435}\u{10436}\u{10437}\u{10438}\u{10439}\u{1043A}\u{1043B}\u{1043C}\u{1043D}\u{1043E}\u{1043F}\u{10440}\u{10441}\u{10442}\u{10443}\u{10444}\u{10445}\u{10446}\u{10447}\u{10448}\u{10449}\u{1044A}\u{1044B}\u{1044C}\u{1044D}\u{1044E}\u{1044F}\u{104D8}\u{104D9}\u{104DA}\u{104DB}\u{104DC}\u{104DD}\u{104DE}\u{104DF}\u{104E0}\u{104E1}\u{104E2}\u{104E3}\u{104E4}\u{104E5}\u{104E6}\u{104E7}\u{104E8}\u{104E9}\u{104EA}\u{104EB}\u{104EC}\u{104ED}\u{104EE}\u{104EF}\u{104F0}\u{104F1}\u{104F2}\u{104F3}\u{104F4}\u{104F5}\u{104F6}\u{104F7}\u{104F8}\u{104F9}\u{104FA}\u{104FB}\u{10CC0}\u{10CC1}\u{10CC2}\u{10CC3}\u{10CC4}\u{10CC5}\u{10CC6}\u{10CC7}\u{10CC8}\u{10CC9}\u{10CCA}\u{10CCB}\u{10CCC}\u{10CCD}\u{10CCE}\u{10CCF}\u{10CD0}\u{10CD1}\u{10CD2}\u{10CD3}\u{10CD4}\u{10CD5}\u{10CD6}\u{10CD7}\u{10CD8}\u{10CD9}\u{10CDA}\u{10CDB}\u{10CDC}\u{10CDD}\u{10CDE}\u{10CDF}\u{10CE0}\u{10CE1}\u{10CE2}\u{10CE3}\u{10CE4}\u{10CE5}\u{10CE6}\u{10CE7}\u{10CE8}\u{10CE9}\u{10CEA}\u{10CEB}\u{10CEC}\u{10CED}\u{10CEE}\u{10CEF}\u{10CF0}\u{10CF1}\u{10CF2}\u{118C0}\u{118C1}\u{118C2}\u{118C3}\u{118C4}\u{118C5}\u{118C6}\u{118C7}\u{118C8}\u{118C9}\u{118CA}\u{118CB}\u{118CC}\u{118CD}\u{118CE}\u{118CF}\u{118D0}\u{118D1}\u{118D2}\u{118D3}\u{118D4}\u{118D5}\u{118D6}\u{118D7}\u{118D8}\u{118D9}\u{118DA}\u{118DB}\u{118DC}\u{118DD}\u{118DE}\u{118DF}\u0131\u0237\u2207\u2202\u{1E922}\u{1E923}\u{1E924}\u{1E925}\u{1E926}\u{1E927}\u{1E928}\u{1E929}\u{1E92A}\u{1E92B}\u{1E92C}\u{1E92D}\u{1E92E}\u{1E92F}\u{1E930}\u{1E931}\u{1E932}\u{1E933}\u{1E934}\u{1E935}\u{1E936}\u{1E937}\u{1E938}\u{1E939}\u{1E93A}\u{1E93B}\u{1E93C}\u{1E93D}\u{1E93E}\u{1E93F}\u{1E940}\u{1E941}\u{1E942}\u{1E943}\u066E\u06A1\u066F\u5B57\u53CC\u591A\u89E3\u4EA4\u6620\u7121\u524D\u5F8C\u518D\u65B0\u521D\u7D42\u8CA9\u58F0\u5439\u6F14\u6295\u6355\u904A\u6307\u7981\u7A7A\u5408\u6E80\u7533\u5272\u55B6\u914D\u5F97\u53EF\u4E3D\u4E38\u4E41\u{20122}\u4F60\u4FBB\u5002\u507A\u5099\u50CF\u349E\u{2063A}\u5154\u5164\u5177\u{2051C}\u34B9\u5167\u{2054B}\u5197\u51A4\u4ECC\u51AC\u{291DF}\u5203\u34DF\u523B\u5246\u5277\u3515\u5305\u5306\u5349\u535A\u5373\u537D\u537F\u{20A2C}\u7070\u53CA\u53DF\u{20B63}\u53EB\u53F1\u5406\u549E\u5438\u5448\u5468\u54A2\u54F6\u5510\u5553\u5563\u5584\u55AB\u55B3\u55C2\u5716\u5717\u5651\u5674\u58EE\u57CE\u57F4\u580D\u578B\u5832\u5831\u58AC\u{214E4}\u58F2\u58F7\u5906\u5922\u5962\u{216A8}\u{216EA}\u59EC\u5A1B\u5A27\u59D8\u5A66\u36EE\u5B08\u5B3E\u{219C8}\u5BC3\u5BD8\u5BF3\u{21B18}\u5BFF\u5C06\u3781\u5C60\u5CC0\u5C8D\u{21DE4}\u5D43\u{21DE6}\u5D6E\u5D6B\u5D7C\u5DE1\u5DE2\u382F\u5DFD\u5E28\u5E3D\u5E69\u3862\u{22183}\u387C\u5EB0\u5EB3\u5EB6\u{2A392}\u{22331}\u8201\u5F22\u38C7\u{232B8}\u{261DA}\u5F62\u5F6B\u38E3\u5F9A\u5FCD\u5FD7\u5FF9\u6081\u393A\u391C\u{226D4}\u60C7\u6148\u614C\u617A\u61B2\u61A4\u61AF\u61DE\u621B\u625D\u62B1\u62D4\u6350\u{22B0C}\u633D\u62FC\u6368\u6383\u63E4\u{22BF1}\u6422\u63C5\u63A9\u3A2E\u6469\u647E\u649D\u6477\u3A6C\u656C\u{2300A}\u65E3\u66F8\u6649\u3B19\u3B08\u3AE4\u5192\u5195\u6700\u669C\u80AD\u43D9\u6721\u675E\u6753\u{233C3}\u3B49\u67FA\u6785\u6852\u{2346D}\u688E\u681F\u6914\u6942\u69A3\u69EA\u6AA8\u{236A3}\u6ADB\u3C18\u6B21\u{238A7}\u6B54\u3C4E\u6B72\u6B9F\u6BBB\u{23A8D}\u{21D0B}\u{23AFA}\u6C4E\u{23CBC}\u6CBF\u6CCD\u6C67\u6D16\u6D3E\u6D69\u6D78\u6D85\u{23D1E}\u6D34\u6E2F\u6E6E\u3D33\u6EC7\u{23ED1}\u6DF9\u6F6E\u{23F5E}\u{23F8E}\u6FC6\u7039\u701B\u3D96\u704A\u707D\u7077\u70AD\u{20525}\u7145\u{24263}\u719C\u7228\u7250\u{24608}\u7280\u7295\u{24735}\u{24814}\u737A\u738B\u3EAC\u73A5\u3EB8\u7447\u745C\u7485\u74CA\u3F1B\u7524\u{24C36}\u753E\u{24C92}\u{2219F}\u7610\u{24FA1}\u{24FB8}\u{25044}\u3FFC\u4008\u{250F3}\u{250F2}\u{25119}\u{25133}\u771E\u771F\u778B\u4046\u4096\u{2541D}\u784E\u40E3\u{25626}\u{2569A}\u{256C5}\u79EB\u412F\u7A4A\u7A4F\u{2597C}\u{25AA7}\u4202\u{25BAB}\u7BC6\u7BC9\u4227\u{25C80}\u7CD2\u42A0\u7CE8\u7CE3\u7D00\u{25F86}\u7D63\u4301\u7DC7\u7E02\u7E45\u4334\u{26228}\u{26247}\u4359\u{262D9}\u7F7A\u{2633E}\u7F95\u7FFA\u{264DA}\u{26523}\u8060\u{265A8}\u8070\u{2335F}\u43D5\u80B2\u8103\u440B\u813E\u5AB5\u{267A7}\u{267B5}\u{23393}\u{2339C}\u8204\u8F9E\u446B\u8291\u828B\u829D\u52B3\u82B1\u82B3\u82BD\u82E6\u{26B3C}\u831D\u8363\u83AD\u8323\u83BD\u83E7\u8353\u83CA\u83CC\u83DC\u{26C36}\u{26D6B}\u{26CD5}\u452B\u84F1\u84F3\u8516\u{273CA}\u8564\u{26F2C}\u455D\u4561\u{26FB1}\u{270D2}\u456B\u8650\u8667\u8669\u86A9\u8688\u870E\u86E2\u8728\u876B\u8786\u87E1\u8801\u45F9\u8860\u{27667}\u88D7\u88DE\u4635\u88FA\u34BB\u{278AE}\u{27966}\u46BE\u46C7\u8AA0\u{27CA8}\u8CAB\u8CC1\u8D1B\u8D77\u{27F2F}\u{20804}\u8DCB\u8DBC\u8DF0\u{208DE}\u8ED4\u{285D2}\u{285ED}\u9094\u90F1\u9111\u{2872E}\u911B\u9238\u92D7\u92D8\u927C\u93F9\u9415\u{28BFA}\u958B\u4995\u95B7\u{28D77}\u49E6\u96C3\u5DB2\u9723\u{29145}\u{2921A}\u4A6E\u4A76\u97E0\u{2940A}\u4AB2\u{29496}\u9829\u{295B6}\u98E2\u4B33\u9929\u99A7\u99C2\u99FE\u4BCE\u{29B30}\u9C40\u9CFD\u4CCE\u4CED\u9D67\u{2A0CE}\u4CF8\u{2A105}\u{2A20E}\u{2A291}\u4D56\u9EFE\u9F05\u9F0F\u9F16\u{2A600}";
        function mapChar(codePoint) {
          if (codePoint >= 196608) {
            if (codePoint >= 917760 && codePoint <= 917999) return 18874368;
            return 0;
          }
          return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
        }
        return {
          mapStr: mappingStr,
          mapChar,
        };
      });
    },
  });

  // node_modules/idna-uts46-hx/uts46.js
  var require_uts46 = __commonJS({
    "node_modules/idna-uts46-hx/uts46.js"(exports, module) {
      (function (root, factory) {
        if (typeof define === "function" && define.amd) {
          define(["punycode", "./idna-map"], function (punycode, idna_map) {
            return factory(punycode, idna_map);
          });
        } else if (typeof exports === "object") {
          module.exports = factory(__require("punycode"), require_idna_map());
        } else {
          root.uts46 = factory(root.punycode, root.idna_map);
        }
      })(exports, function (punycode, idna_map) {
        function mapLabel(label, useStd3ASCII, transitional) {
          var mapped = [];
          var chars = punycode.ucs2.decode(label);
          for (var i = 0; i < chars.length; i++) {
            var cp = chars[i];
            var ch = punycode.ucs2.encode([chars[i]]);
            var composite = idna_map.mapChar(cp);
            var flags = composite >> 23;
            var kind = (composite >> 21) & 3;
            var index = (composite >> 5) & 65535;
            var length = composite & 31;
            var value = idna_map.mapStr.substr(index, length);
            if (kind === 0 || (useStd3ASCII && flags & 1)) {
              throw new Error("Illegal char " + ch);
            } else if (kind === 1) {
              mapped.push(value);
            } else if (kind === 2) {
              mapped.push(transitional ? value : ch);
            } else if (kind === 3) {
              mapped.push(ch);
            }
          }
          var newLabel = mapped.join("").normalize("NFC");
          return newLabel;
        }
        function process2(domain, transitional, useStd3ASCII) {
          if (useStd3ASCII === void 0) useStd3ASCII = false;
          var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);
          var labels = mappedIDNA.split(".");
          labels = labels.map(function (label) {
            if (label.startsWith("xn--")) {
              label = punycode.decode(label.substring(4));
              validateLabel(label, useStd3ASCII, false);
            } else {
              validateLabel(label, useStd3ASCII, transitional);
            }
            return label;
          });
          return labels.join(".");
        }
        function validateLabel(label, useStd3ASCII, transitional) {
          if (label[2] === "-" && label[3] === "-")
            throw new Error("Failed to validate " + label);
          if (label.startsWith("-") || label.endsWith("-"))
            throw new Error("Failed to validate " + label);
          if (label.includes("."))
            throw new Error("Failed to validate " + label);
          if (mapLabel(label, useStd3ASCII, transitional) !== label)
            throw new Error("Failed to validate " + label);
          var ch = label.codePointAt(0);
          if (idna_map.mapChar(ch) & (2 << 23))
            throw new Error("Label contains illegal character: " + ch);
        }
        function toAscii(domain, options) {
          if (options === void 0) options = {};
          var transitional =
            "transitional" in options ? options.transitional : true;
          var useStd3ASCII =
            "useStd3ASCII" in options ? options.useStd3ASCII : false;
          var verifyDnsLength =
            "verifyDnsLength" in options ? options.verifyDnsLength : false;
          var labels = process2(domain, transitional, useStd3ASCII).split(".");
          var asciiLabels = labels.map(punycode.toASCII);
          var asciiString = asciiLabels.join(".");
          var i;
          if (verifyDnsLength) {
            if (asciiString.length < 1 || asciiString.length > 253) {
              throw new Error("DNS name has wrong length: " + asciiString);
            }
            for (i = 0; i < asciiLabels.length; i++) {
              var label = asciiLabels[i];
              if (label.length < 1 || label.length > 63)
                throw new Error("DNS label has wrong length: " + label);
            }
          }
          return asciiString;
        }
        function toUnicode(domain, options) {
          if (options === void 0) options = {};
          var useStd3ASCII =
            "useStd3ASCII" in options ? options.useStd3ASCII : false;
          return process2(domain, false, useStd3ASCII);
        }
        return {
          toUnicode,
          toAscii,
        };
      });
    },
  });

  // node_modules/eth-ens-namehash/index.js
  var require_eth_ens_namehash = __commonJS({
    "node_modules/eth-ens-namehash/index.js"(exports) {
      var sha32 = require_sha32().keccak_256;
      var uts46 = require_uts46();
      function namehash2(inputName) {
        var node = "";
        for (var i = 0; i < 32; i++) {
          node += "00";
        }
        name = normalize(inputName);
        if (name) {
          var labels = name.split(".");
          for (var i = labels.length - 1; i >= 0; i--) {
            var labelSha = sha32(labels[i]);
            node = sha32(new Buffer(node + labelSha, "hex"));
          }
        }
        return "0x" + node;
      }
      function normalize(name2) {
        return name2
          ? uts46.toUnicode(name2, { useStd3ASCII: true, transitional: false })
          : name2;
      }
      exports.hash = namehash2;
      exports.normalize = normalize;
    },
  });

  // node_modules/@lumeweb/ensjs/dist/utils/labelhash.js
  var require_labelhash = __commonJS({
    "node_modules/@lumeweb/ensjs/dist/utils/labelhash.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      exports.decodeLabelhash = decodeLabelhash;
      exports.encodeLabelhash = encodeLabelhash;
      exports.isDecrypted = isDecrypted;
      exports.isEncodedLabelhash = isEncodedLabelhash;
      exports.labelhash = labelhash;
      var _ethEnsNamehash = require_eth_ens_namehash();
      var sha32 = require_sha3().keccak_256;
      function encodeLabelhash(hash4) {
        if (!hash4.startsWith("0x")) {
          throw new Error("Expected label hash to start with 0x");
        }
        if (hash4.length !== 66) {
          throw new Error("Expected label hash to have a length of 66");
        }
        return "[".concat(hash4.slice(2), "]");
      }
      function decodeLabelhash(hash4) {
        if (!(hash4.startsWith("[") && hash4.endsWith("]"))) {
          throw Error(
            "Expected encoded labelhash to start and end with square brackets"
          );
        }
        if (hash4.length !== 66) {
          throw Error("Expected encoded labelhash to have a length of 66");
        }
        return "".concat(hash4.slice(1, -1));
      }
      function isEncodedLabelhash(hash4) {
        return (
          hash4.startsWith("[") && hash4.endsWith("]") && hash4.length === 66
        );
      }
      function isDecrypted(name2) {
        var nameArray = name2.split(".");
        var decrypted = nameArray.reduce(function (acc, label) {
          if (acc === false) return false;
          return isEncodedLabelhash(label) ? false : true;
        }, true);
        return decrypted;
      }
      function labelhash(unnormalisedLabelOrLabelhash) {
        return isEncodedLabelhash(unnormalisedLabelOrLabelhash)
          ? "0x" + decodeLabelhash(unnormalisedLabelOrLabelhash)
          : "0x" +
              sha32(
                (0, _ethEnsNamehash.normalize)(unnormalisedLabelOrLabelhash)
              );
      }
    },
  });

  // node_modules/varint/encode.js
  var require_encode = __commonJS({
    "node_modules/varint/encode.js"(exports, module) {
      module.exports = encode4;
      var MSB = 128;
      var REST = 127;
      var MSBALL = ~REST;
      var INT = Math.pow(2, 31);
      function encode4(num, out, offset) {
        out = out || [];
        offset = offset || 0;
        var oldOffset = offset;
        while (num >= INT) {
          out[offset++] = (num & 255) | MSB;
          num /= 128;
        }
        while (num & MSBALL) {
          out[offset++] = (num & 255) | MSB;
          num >>>= 7;
        }
        out[offset] = num | 0;
        encode4.bytes = offset - oldOffset + 1;
        return out;
      }
    },
  });

  // node_modules/varint/decode.js
  var require_decode = __commonJS({
    "node_modules/varint/decode.js"(exports, module) {
      module.exports = read;
      var MSB = 128;
      var REST = 127;
      function read(buf, offset) {
        var res = 0,
          offset = offset || 0,
          shift = 0,
          counter = offset,
          b2,
          l2 = buf.length;
        do {
          if (counter >= l2) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
          }
          b2 = buf[counter++];
          res +=
            shift < 28
              ? (b2 & REST) << shift
              : (b2 & REST) * Math.pow(2, shift);
          shift += 7;
        } while (b2 >= MSB);
        read.bytes = counter - offset;
        return res;
      }
    },
  });

  // node_modules/varint/length.js
  var require_length = __commonJS({
    "node_modules/varint/length.js"(exports, module) {
      var N1 = Math.pow(2, 7);
      var N22 = Math.pow(2, 14);
      var N3 = Math.pow(2, 21);
      var N4 = Math.pow(2, 28);
      var N5 = Math.pow(2, 35);
      var N6 = Math.pow(2, 42);
      var N7 = Math.pow(2, 49);
      var N8 = Math.pow(2, 56);
      var N9 = Math.pow(2, 63);
      module.exports = function (value) {
        return value < N1
          ? 1
          : value < N22
          ? 2
          : value < N3
          ? 3
          : value < N4
          ? 4
          : value < N5
          ? 5
          : value < N6
          ? 6
          : value < N7
          ? 7
          : value < N8
          ? 8
          : value < N9
          ? 9
          : 10;
      };
    },
  });

  // node_modules/varint/index.js
  var require_varint = __commonJS({
    "node_modules/varint/index.js"(exports, module) {
      module.exports = {
        encode: require_encode(),
        decode: require_decode(),
        encodingLength: require_length(),
      };
    },
  });

  // node_modules/multicodec/src/base-table.json
  var require_base_table = __commonJS({
    "node_modules/multicodec/src/base-table.json"(exports, module) {
      module.exports = {
        identity: 0,
        ip4: 4,
        tcp: 6,
        sha1: 17,
        "sha2-256": 18,
        "sha2-512": 19,
        "sha3-512": 20,
        "sha3-384": 21,
        "sha3-256": 22,
        "sha3-224": 23,
        "shake-128": 24,
        "shake-256": 25,
        "keccak-224": 26,
        "keccak-256": 27,
        "keccak-384": 28,
        "keccak-512": 29,
        dccp: 33,
        "murmur3-128": 34,
        "murmur3-32": 35,
        ip6: 41,
        ip6zone: 42,
        path: 47,
        multicodec: 48,
        multihash: 49,
        multiaddr: 50,
        multibase: 51,
        dns: 53,
        dns4: 54,
        dns6: 55,
        dnsaddr: 56,
        protobuf: 80,
        cbor: 81,
        raw: 85,
        "dbl-sha2-256": 86,
        rlp: 96,
        bencode: 99,
        "dag-pb": 112,
        "dag-cbor": 113,
        "libp2p-key": 114,
        "git-raw": 120,
        "torrent-info": 123,
        "torrent-file": 124,
        "leofcoin-block": 129,
        "leofcoin-tx": 130,
        "leofcoin-pr": 131,
        sctp: 132,
        "eth-block": 144,
        "eth-block-list": 145,
        "eth-tx-trie": 146,
        "eth-tx": 147,
        "eth-tx-receipt-trie": 148,
        "eth-tx-receipt": 149,
        "eth-state-trie": 150,
        "eth-account-snapshot": 151,
        "eth-storage-trie": 152,
        "bitcoin-block": 176,
        "bitcoin-tx": 177,
        "zcash-block": 192,
        "zcash-tx": 193,
        "stellar-block": 208,
        "stellar-tx": 209,
        md4: 212,
        md5: 213,
        bmt: 214,
        "decred-block": 224,
        "decred-tx": 225,
        "ipld-ns": 226,
        "ipfs-ns": 227,
        "swarm-ns": 228,
        "ipns-ns": 229,
        zeronet: 230,
        "ed25519-pub": 237,
        "dash-block": 240,
        "dash-tx": 241,
        "swarm-manifest": 250,
        "swarm-feed": 251,
        udp: 273,
        "p2p-webrtc-star": 275,
        "p2p-webrtc-direct": 276,
        "p2p-stardust": 277,
        "p2p-circuit": 290,
        "dag-json": 297,
        udt: 301,
        utp: 302,
        unix: 400,
        p2p: 421,
        ipfs: 421,
        https: 443,
        onion: 444,
        onion3: 445,
        garlic64: 446,
        garlic32: 447,
        tls: 448,
        quic: 460,
        ws: 477,
        wss: 478,
        "p2p-websocket-star": 479,
        http: 480,
        json: 512,
        messagepack: 513,
        x11: 4352,
        "blake2b-8": 45569,
        "blake2b-16": 45570,
        "blake2b-24": 45571,
        "blake2b-32": 45572,
        "blake2b-40": 45573,
        "blake2b-48": 45574,
        "blake2b-56": 45575,
        "blake2b-64": 45576,
        "blake2b-72": 45577,
        "blake2b-80": 45578,
        "blake2b-88": 45579,
        "blake2b-96": 45580,
        "blake2b-104": 45581,
        "blake2b-112": 45582,
        "blake2b-120": 45583,
        "blake2b-128": 45584,
        "blake2b-136": 45585,
        "blake2b-144": 45586,
        "blake2b-152": 45587,
        "blake2b-160": 45588,
        "blake2b-168": 45589,
        "blake2b-176": 45590,
        "blake2b-184": 45591,
        "blake2b-192": 45592,
        "blake2b-200": 45593,
        "blake2b-208": 45594,
        "blake2b-216": 45595,
        "blake2b-224": 45596,
        "blake2b-232": 45597,
        "blake2b-240": 45598,
        "blake2b-248": 45599,
        "blake2b-256": 45600,
        "blake2b-264": 45601,
        "blake2b-272": 45602,
        "blake2b-280": 45603,
        "blake2b-288": 45604,
        "blake2b-296": 45605,
        "blake2b-304": 45606,
        "blake2b-312": 45607,
        "blake2b-320": 45608,
        "blake2b-328": 45609,
        "blake2b-336": 45610,
        "blake2b-344": 45611,
        "blake2b-352": 45612,
        "blake2b-360": 45613,
        "blake2b-368": 45614,
        "blake2b-376": 45615,
        "blake2b-384": 45616,
        "blake2b-392": 45617,
        "blake2b-400": 45618,
        "blake2b-408": 45619,
        "blake2b-416": 45620,
        "blake2b-424": 45621,
        "blake2b-432": 45622,
        "blake2b-440": 45623,
        "blake2b-448": 45624,
        "blake2b-456": 45625,
        "blake2b-464": 45626,
        "blake2b-472": 45627,
        "blake2b-480": 45628,
        "blake2b-488": 45629,
        "blake2b-496": 45630,
        "blake2b-504": 45631,
        "blake2b-512": 45632,
        "blake2s-8": 45633,
        "blake2s-16": 45634,
        "blake2s-24": 45635,
        "blake2s-32": 45636,
        "blake2s-40": 45637,
        "blake2s-48": 45638,
        "blake2s-56": 45639,
        "blake2s-64": 45640,
        "blake2s-72": 45641,
        "blake2s-80": 45642,
        "blake2s-88": 45643,
        "blake2s-96": 45644,
        "blake2s-104": 45645,
        "blake2s-112": 45646,
        "blake2s-120": 45647,
        "blake2s-128": 45648,
        "blake2s-136": 45649,
        "blake2s-144": 45650,
        "blake2s-152": 45651,
        "blake2s-160": 45652,
        "blake2s-168": 45653,
        "blake2s-176": 45654,
        "blake2s-184": 45655,
        "blake2s-192": 45656,
        "blake2s-200": 45657,
        "blake2s-208": 45658,
        "blake2s-216": 45659,
        "blake2s-224": 45660,
        "blake2s-232": 45661,
        "blake2s-240": 45662,
        "blake2s-248": 45663,
        "blake2s-256": 45664,
        "skein256-8": 45825,
        "skein256-16": 45826,
        "skein256-24": 45827,
        "skein256-32": 45828,
        "skein256-40": 45829,
        "skein256-48": 45830,
        "skein256-56": 45831,
        "skein256-64": 45832,
        "skein256-72": 45833,
        "skein256-80": 45834,
        "skein256-88": 45835,
        "skein256-96": 45836,
        "skein256-104": 45837,
        "skein256-112": 45838,
        "skein256-120": 45839,
        "skein256-128": 45840,
        "skein256-136": 45841,
        "skein256-144": 45842,
        "skein256-152": 45843,
        "skein256-160": 45844,
        "skein256-168": 45845,
        "skein256-176": 45846,
        "skein256-184": 45847,
        "skein256-192": 45848,
        "skein256-200": 45849,
        "skein256-208": 45850,
        "skein256-216": 45851,
        "skein256-224": 45852,
        "skein256-232": 45853,
        "skein256-240": 45854,
        "skein256-248": 45855,
        "skein256-256": 45856,
        "skein512-8": 45857,
        "skein512-16": 45858,
        "skein512-24": 45859,
        "skein512-32": 45860,
        "skein512-40": 45861,
        "skein512-48": 45862,
        "skein512-56": 45863,
        "skein512-64": 45864,
        "skein512-72": 45865,
        "skein512-80": 45866,
        "skein512-88": 45867,
        "skein512-96": 45868,
        "skein512-104": 45869,
        "skein512-112": 45870,
        "skein512-120": 45871,
        "skein512-128": 45872,
        "skein512-136": 45873,
        "skein512-144": 45874,
        "skein512-152": 45875,
        "skein512-160": 45876,
        "skein512-168": 45877,
        "skein512-176": 45878,
        "skein512-184": 45879,
        "skein512-192": 45880,
        "skein512-200": 45881,
        "skein512-208": 45882,
        "skein512-216": 45883,
        "skein512-224": 45884,
        "skein512-232": 45885,
        "skein512-240": 45886,
        "skein512-248": 45887,
        "skein512-256": 45888,
        "skein512-264": 45889,
        "skein512-272": 45890,
        "skein512-280": 45891,
        "skein512-288": 45892,
        "skein512-296": 45893,
        "skein512-304": 45894,
        "skein512-312": 45895,
        "skein512-320": 45896,
        "skein512-328": 45897,
        "skein512-336": 45898,
        "skein512-344": 45899,
        "skein512-352": 45900,
        "skein512-360": 45901,
        "skein512-368": 45902,
        "skein512-376": 45903,
        "skein512-384": 45904,
        "skein512-392": 45905,
        "skein512-400": 45906,
        "skein512-408": 45907,
        "skein512-416": 45908,
        "skein512-424": 45909,
        "skein512-432": 45910,
        "skein512-440": 45911,
        "skein512-448": 45912,
        "skein512-456": 45913,
        "skein512-464": 45914,
        "skein512-472": 45915,
        "skein512-480": 45916,
        "skein512-488": 45917,
        "skein512-496": 45918,
        "skein512-504": 45919,
        "skein512-512": 45920,
        "skein1024-8": 45921,
        "skein1024-16": 45922,
        "skein1024-24": 45923,
        "skein1024-32": 45924,
        "skein1024-40": 45925,
        "skein1024-48": 45926,
        "skein1024-56": 45927,
        "skein1024-64": 45928,
        "skein1024-72": 45929,
        "skein1024-80": 45930,
        "skein1024-88": 45931,
        "skein1024-96": 45932,
        "skein1024-104": 45933,
        "skein1024-112": 45934,
        "skein1024-120": 45935,
        "skein1024-128": 45936,
        "skein1024-136": 45937,
        "skein1024-144": 45938,
        "skein1024-152": 45939,
        "skein1024-160": 45940,
        "skein1024-168": 45941,
        "skein1024-176": 45942,
        "skein1024-184": 45943,
        "skein1024-192": 45944,
        "skein1024-200": 45945,
        "skein1024-208": 45946,
        "skein1024-216": 45947,
        "skein1024-224": 45948,
        "skein1024-232": 45949,
        "skein1024-240": 45950,
        "skein1024-248": 45951,
        "skein1024-256": 45952,
        "skein1024-264": 45953,
        "skein1024-272": 45954,
        "skein1024-280": 45955,
        "skein1024-288": 45956,
        "skein1024-296": 45957,
        "skein1024-304": 45958,
        "skein1024-312": 45959,
        "skein1024-320": 45960,
        "skein1024-328": 45961,
        "skein1024-336": 45962,
        "skein1024-344": 45963,
        "skein1024-352": 45964,
        "skein1024-360": 45965,
        "skein1024-368": 45966,
        "skein1024-376": 45967,
        "skein1024-384": 45968,
        "skein1024-392": 45969,
        "skein1024-400": 45970,
        "skein1024-408": 45971,
        "skein1024-416": 45972,
        "skein1024-424": 45973,
        "skein1024-432": 45974,
        "skein1024-440": 45975,
        "skein1024-448": 45976,
        "skein1024-456": 45977,
        "skein1024-464": 45978,
        "skein1024-472": 45979,
        "skein1024-480": 45980,
        "skein1024-488": 45981,
        "skein1024-496": 45982,
        "skein1024-504": 45983,
        "skein1024-512": 45984,
        "skein1024-520": 45985,
        "skein1024-528": 45986,
        "skein1024-536": 45987,
        "skein1024-544": 45988,
        "skein1024-552": 45989,
        "skein1024-560": 45990,
        "skein1024-568": 45991,
        "skein1024-576": 45992,
        "skein1024-584": 45993,
        "skein1024-592": 45994,
        "skein1024-600": 45995,
        "skein1024-608": 45996,
        "skein1024-616": 45997,
        "skein1024-624": 45998,
        "skein1024-632": 45999,
        "skein1024-640": 46e3,
        "skein1024-648": 46001,
        "skein1024-656": 46002,
        "skein1024-664": 46003,
        "skein1024-672": 46004,
        "skein1024-680": 46005,
        "skein1024-688": 46006,
        "skein1024-696": 46007,
        "skein1024-704": 46008,
        "skein1024-712": 46009,
        "skein1024-720": 46010,
        "skein1024-728": 46011,
        "skein1024-736": 46012,
        "skein1024-744": 46013,
        "skein1024-752": 46014,
        "skein1024-760": 46015,
        "skein1024-768": 46016,
        "skein1024-776": 46017,
        "skein1024-784": 46018,
        "skein1024-792": 46019,
        "skein1024-800": 46020,
        "skein1024-808": 46021,
        "skein1024-816": 46022,
        "skein1024-824": 46023,
        "skein1024-832": 46024,
        "skein1024-840": 46025,
        "skein1024-848": 46026,
        "skein1024-856": 46027,
        "skein1024-864": 46028,
        "skein1024-872": 46029,
        "skein1024-880": 46030,
        "skein1024-888": 46031,
        "skein1024-896": 46032,
        "skein1024-904": 46033,
        "skein1024-912": 46034,
        "skein1024-920": 46035,
        "skein1024-928": 46036,
        "skein1024-936": 46037,
        "skein1024-944": 46038,
        "skein1024-952": 46039,
        "skein1024-960": 46040,
        "skein1024-968": 46041,
        "skein1024-976": 46042,
        "skein1024-984": 46043,
        "skein1024-992": 46044,
        "skein1024-1000": 46045,
        "skein1024-1008": 46046,
        "skein1024-1016": 46047,
        "skein1024-1024": 46048,
        "holochain-adr-v0": 8417572,
        "holochain-adr-v1": 8483108,
        "holochain-key-v0": 9728292,
        "holochain-key-v1": 9793828,
        "holochain-sig-v0": 10645796,
        "holochain-sig-v1": 10711332,
      };
    },
  });

  // node_modules/multicodec/src/int-table.js
  var require_int_table = __commonJS({
    "node_modules/multicodec/src/int-table.js"(exports, module) {
      "use strict";
      var baseTable = require_base_table();
      var nameTable = /* @__PURE__ */ new Map();
      for (const encodingName in baseTable) {
        const code = baseTable[encodingName];
        nameTable.set(code, encodingName);
      }
      module.exports = Object.freeze(nameTable);
    },
  });

  // node_modules/multicodec/src/util.js
  var require_util3 = __commonJS({
    "node_modules/multicodec/src/util.js"(exports, module) {
      "use strict";
      var varint = require_varint();
      module.exports = {
        numberToBuffer,
        bufferToNumber,
        varintBufferEncode,
        varintBufferDecode,
        varintEncode,
      };
      function bufferToNumber(buf) {
        return parseInt(buf.toString("hex"), 16);
      }
      function numberToBuffer(num) {
        let hexString = num.toString(16);
        if (hexString.length % 2 === 1) {
          hexString = "0" + hexString;
        }
        return Buffer.from(hexString, "hex");
      }
      function varintBufferEncode(input) {
        return Buffer.from(varint.encode(bufferToNumber(input)));
      }
      function varintBufferDecode(input) {
        return numberToBuffer(varint.decode(input));
      }
      function varintEncode(num) {
        return Buffer.from(varint.encode(num));
      }
    },
  });

  // node_modules/multicodec/src/varint-table.js
  var require_varint_table = __commonJS({
    "node_modules/multicodec/src/varint-table.js"(exports, module) {
      "use strict";
      var baseTable = require_base_table();
      var varintEncode = require_util3().varintEncode;
      var varintTable = {};
      for (const encodingName in baseTable) {
        const code = baseTable[encodingName];
        varintTable[encodingName] = varintEncode(code);
      }
      module.exports = Object.freeze(varintTable);
    },
  });

  // node_modules/multicodec/src/constants.js
  var require_constants = __commonJS({
    "node_modules/multicodec/src/constants.js"(exports, module) {
      "use strict";
      var table = require_base_table();
      var constants = {};
      for (const [name2, code] of Object.entries(table)) {
        constants[name2.toUpperCase().replace(/-/g, "_")] = code;
      }
      module.exports = Object.freeze(constants);
    },
  });

  // node_modules/multicodec/src/print.js
  var require_print = __commonJS({
    "node_modules/multicodec/src/print.js"(exports, module) {
      "use strict";
      var table = require_base_table();
      var tableByCode = {};
      for (const [name2, code] of Object.entries(table)) {
        if (tableByCode[code] === void 0) tableByCode[code] = name2;
      }
      module.exports = Object.freeze(tableByCode);
    },
  });

  // node_modules/multicodec/src/index.js
  var require_src2 = __commonJS({
    "node_modules/multicodec/src/index.js"(exports, module) {
      "use strict";
      var varint = require_varint();
      var intTable = require_int_table();
      var codecNameToCodeVarint = require_varint_table();
      var util = require_util3();
      exports = module.exports;
      exports.addPrefix = (multicodecStrOrCode, data) => {
        let prefix;
        if (Buffer.isBuffer(multicodecStrOrCode)) {
          prefix = util.varintBufferEncode(multicodecStrOrCode);
        } else {
          if (codecNameToCodeVarint[multicodecStrOrCode]) {
            prefix = codecNameToCodeVarint[multicodecStrOrCode];
          } else {
            throw new Error("multicodec not recognized");
          }
        }
        return Buffer.concat([prefix, data]);
      };
      exports.rmPrefix = (data) => {
        varint.decode(data);
        return data.slice(varint.decode.bytes);
      };
      exports.getCodec = (prefixedData) => {
        const code = varint.decode(prefixedData);
        const codecName = intTable.get(code);
        if (codecName === void 0) {
          throw new Error(`Code ${code} not found`);
        }
        return codecName;
      };
      exports.getName = (codec2) => {
        return intTable.get(codec2);
      };
      exports.getNumber = (name2) => {
        const code = codecNameToCodeVarint[name2];
        if (code === void 0) {
          throw new Error("Codec `" + name2 + "` not found");
        }
        return util.varintBufferDecode(code)[0];
      };
      exports.getCode = (prefixedData) => {
        return varint.decode(prefixedData);
      };
      exports.getCodeVarint = (codecName) => {
        const code = codecNameToCodeVarint[codecName];
        if (code === void 0) {
          throw new Error("Codec `" + codecName + "` not found");
        }
        return code;
      };
      exports.getVarint = (code) => {
        return varint.encode(code);
      };
      var constants = require_constants();
      Object.assign(exports, constants);
      exports.print = require_print();
    },
  });

  // node_modules/multibase/src/base.js
  var require_base = __commonJS({
    "node_modules/multibase/src/base.js"(exports, module) {
      "use strict";
      var Base = class {
        constructor(name2, code, implementation, alphabet) {
          this.name = name2;
          this.code = code;
          this.alphabet = alphabet;
          if (implementation && alphabet) {
            this.engine = implementation(alphabet);
          }
        }
        encode(stringOrBuffer) {
          return this.engine.encode(stringOrBuffer);
        }
        decode(stringOrBuffer) {
          return this.engine.decode(stringOrBuffer);
        }
        isImplemented() {
          return this.engine;
        }
      };
      module.exports = Base;
    },
  });

  // node_modules/base-x/src/index.js
  var require_src3 = __commonJS({
    "node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      var _Buffer = require_safe_buffer().Buffer;
      function base2(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
          BASE_MAP[j2] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x2 = ALPHABET.charAt(i);
          var xc = x2.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x2 + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode4(source) {
          if (Array.isArray(source) || source instanceof Uint8Array) {
            source = _Buffer.from(source);
          }
          if (!_Buffer.isBuffer(source)) {
            throw new TypeError("Expected Buffer");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (
              var it1 = size - 1;
              (carry !== 0 || i2 < length) && it1 !== -1;
              it1--, i2++
            ) {
              carry += (256 * b58[it1]) >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = (carry / BASE) >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return _Buffer.alloc(0);
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = ((source.length - psz) * FACTOR + 1) >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (
              var it3 = size - 1;
              (carry !== 0 || i2 < length) && it3 !== -1;
              it3--, i2++
            ) {
              carry += (BASE * b256[it3]) >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = (carry / 256) >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
          vch.fill(0, 0, zeroes);
          var j3 = zeroes;
          while (it4 !== size) {
            vch[j3++] = b256[it4++];
          }
          return vch;
        }
        function decode3(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode: encode4,
          decodeUnsafe,
          decode: decode3,
        };
      }
      module.exports = base2;
    },
  });

  // node_modules/multibase/src/base16.js
  var require_base16 = __commonJS({
    "node_modules/multibase/src/base16.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      module.exports = function base16(alphabet) {
        return {
          encode(input) {
            if (typeof input === "string") {
              return Buffer4.from(input).toString("hex");
            }
            return input.toString("hex");
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base16 character");
              }
            }
            return Buffer4.from(input, "hex");
          },
        };
      };
    },
  });

  // node_modules/multibase/src/base32.js
  var require_base32 = __commonJS({
    "node_modules/multibase/src/base32.js"(exports, module) {
      "use strict";
      function decode3(input, alphabet) {
        input = input.replace(new RegExp("=", "g"), "");
        const length = input.length;
        let bits = 0;
        let value = 0;
        let index = 0;
        const output = new Uint8Array(((length * 5) / 8) | 0);
        for (let i = 0; i < length; i++) {
          value = (value << 5) | alphabet.indexOf(input[i]);
          bits += 5;
          if (bits >= 8) {
            output[index++] = (value >>> (bits - 8)) & 255;
            bits -= 8;
          }
        }
        return output.buffer;
      }
      function encode4(buffer, alphabet) {
        const length = buffer.byteLength;
        const view = new Uint8Array(buffer);
        const padding2 = alphabet.indexOf("=") === alphabet.length - 1;
        if (padding2) {
          alphabet = alphabet.substring(0, alphabet.length - 1);
        }
        let bits = 0;
        let value = 0;
        let output = "";
        for (let i = 0; i < length; i++) {
          value = (value << 8) | view[i];
          bits += 8;
          while (bits >= 5) {
            output += alphabet[(value >>> (bits - 5)) & 31];
            bits -= 5;
          }
        }
        if (bits > 0) {
          output += alphabet[(value << (5 - bits)) & 31];
        }
        if (padding2) {
          while (output.length % 8 !== 0) {
            output += "=";
          }
        }
        return output;
      }
      module.exports = function base32(alphabet) {
        return {
          encode(input) {
            if (typeof input === "string") {
              return encode4(Uint8Array.from(input), alphabet);
            }
            return encode4(input, alphabet);
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base32 character");
              }
            }
            return decode3(input, alphabet);
          },
        };
      };
    },
  });

  // node_modules/multibase/src/base64.js
  var require_base642 = __commonJS({
    "node_modules/multibase/src/base64.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      module.exports = function base64(alphabet) {
        const padding2 = alphabet.indexOf("=") > -1;
        const url = alphabet.indexOf("-") > -1 && alphabet.indexOf("_") > -1;
        return {
          encode(input) {
            let output = "";
            if (typeof input === "string") {
              output = Buffer4.from(input).toString("base64");
            } else {
              output = input.toString("base64");
            }
            if (url) {
              output = output.replace(/\+/g, "-").replace(/\//g, "_");
            }
            const pad = output.indexOf("=");
            if (pad > 0 && !padding2) {
              output = output.substring(0, pad);
            }
            return output;
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base64 character");
              }
            }
            return Buffer4.from(input, "base64");
          },
        };
      };
    },
  });

  // node_modules/multibase/src/constants.js
  var require_constants2 = __commonJS({
    "node_modules/multibase/src/constants.js"(exports, module) {
      "use strict";
      var Base = require_base();
      var baseX = require_src3();
      var base16 = require_base16();
      var base32 = require_base32();
      var base64 = require_base642();
      var constants = [
        ["base1", "1", "", "1"],
        ["base2", "0", baseX, "01"],
        ["base8", "7", baseX, "01234567"],
        ["base10", "9", baseX, "0123456789"],
        ["base16", "f", base16, "0123456789abcdef"],
        ["base32", "b", base32, "abcdefghijklmnopqrstuvwxyz234567"],
        ["base32pad", "c", base32, "abcdefghijklmnopqrstuvwxyz234567="],
        ["base32hex", "v", base32, "0123456789abcdefghijklmnopqrstuv"],
        ["base32hexpad", "t", base32, "0123456789abcdefghijklmnopqrstuv="],
        ["base32z", "h", base32, "ybndrfg8ejkmcpqxot1uwisza345h769"],
        [
          "base58flickr",
          "Z",
          baseX,
          "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
        ],
        [
          "base58btc",
          "z",
          baseX,
          "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
        ],
        [
          "base64",
          "m",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ],
        [
          "base64pad",
          "M",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        ],
        [
          "base64url",
          "u",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        ],
        [
          "base64urlpad",
          "U",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        ],
      ];
      var names2 = constants.reduce((prev, tupple) => {
        prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
        return prev;
      }, {});
      var codes = constants.reduce((prev, tupple) => {
        prev[tupple[1]] = names2[tupple[0]];
        return prev;
      }, {});
      module.exports = {
        names: names2,
        codes,
      };
    },
  });

  // node_modules/multibase/src/index.js
  var require_src4 = __commonJS({
    "node_modules/multibase/src/index.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      var constants = require_constants2();
      exports = module.exports = multibase;
      exports.encode = encode4;
      exports.decode = decode3;
      exports.isEncoded = isEncoded;
      exports.names = Object.freeze(Object.keys(constants.names));
      exports.codes = Object.freeze(Object.keys(constants.codes));
      function multibase(nameOrCode, buf) {
        if (!buf) {
          throw new Error("requires an encoded buffer");
        }
        const base2 = getBase(nameOrCode);
        const codeBuf = Buffer4.from(base2.code);
        const name2 = base2.name;
        validEncode(name2, buf);
        return Buffer4.concat([codeBuf, buf]);
      }
      function encode4(nameOrCode, buf) {
        const base2 = getBase(nameOrCode);
        const name2 = base2.name;
        return multibase(name2, Buffer4.from(base2.encode(buf)));
      }
      function decode3(bufOrString) {
        if (Buffer4.isBuffer(bufOrString)) {
          bufOrString = bufOrString.toString();
        }
        const code = bufOrString.substring(0, 1);
        bufOrString = bufOrString.substring(1, bufOrString.length);
        if (typeof bufOrString === "string") {
          bufOrString = Buffer4.from(bufOrString);
        }
        const base2 = getBase(code);
        return Buffer4.from(base2.decode(bufOrString.toString()));
      }
      function isEncoded(bufOrString) {
        if (Buffer4.isBuffer(bufOrString)) {
          bufOrString = bufOrString.toString();
        }
        if (Object.prototype.toString.call(bufOrString) !== "[object String]") {
          return false;
        }
        const code = bufOrString.substring(0, 1);
        try {
          const base2 = getBase(code);
          return base2.name;
        } catch (err) {
          return false;
        }
      }
      function validEncode(name2, buf) {
        const base2 = getBase(name2);
        base2.decode(buf.toString());
      }
      function getBase(nameOrCode) {
        let base2;
        if (constants.names[nameOrCode]) {
          base2 = constants.names[nameOrCode];
        } else if (constants.codes[nameOrCode]) {
          base2 = constants.codes[nameOrCode];
        } else {
          throw new Error("Unsupported encoding");
        }
        if (!base2.isImplemented()) {
          throw new Error("Base " + nameOrCode + " is not implemented yet");
        }
        return base2;
      }
    },
  });

  // node_modules/multihashes/src/constants.js
  var require_constants3 = __commonJS({
    "node_modules/multihashes/src/constants.js"(exports) {
      "use strict";
      exports.names = Object.freeze({
        identity: 0,
        sha1: 17,
        "sha2-256": 18,
        "sha2-512": 19,
        "dbl-sha2-256": 86,
        "sha3-224": 23,
        "sha3-256": 22,
        "sha3-384": 21,
        "sha3-512": 20,
        "shake-128": 24,
        "shake-256": 25,
        "keccak-224": 26,
        "keccak-256": 27,
        "keccak-384": 28,
        "keccak-512": 29,
        "murmur3-128": 34,
        "murmur3-32": 35,
        md4: 212,
        md5: 213,
        "blake2b-8": 45569,
        "blake2b-16": 45570,
        "blake2b-24": 45571,
        "blake2b-32": 45572,
        "blake2b-40": 45573,
        "blake2b-48": 45574,
        "blake2b-56": 45575,
        "blake2b-64": 45576,
        "blake2b-72": 45577,
        "blake2b-80": 45578,
        "blake2b-88": 45579,
        "blake2b-96": 45580,
        "blake2b-104": 45581,
        "blake2b-112": 45582,
        "blake2b-120": 45583,
        "blake2b-128": 45584,
        "blake2b-136": 45585,
        "blake2b-144": 45586,
        "blake2b-152": 45587,
        "blake2b-160": 45588,
        "blake2b-168": 45589,
        "blake2b-176": 45590,
        "blake2b-184": 45591,
        "blake2b-192": 45592,
        "blake2b-200": 45593,
        "blake2b-208": 45594,
        "blake2b-216": 45595,
        "blake2b-224": 45596,
        "blake2b-232": 45597,
        "blake2b-240": 45598,
        "blake2b-248": 45599,
        "blake2b-256": 45600,
        "blake2b-264": 45601,
        "blake2b-272": 45602,
        "blake2b-280": 45603,
        "blake2b-288": 45604,
        "blake2b-296": 45605,
        "blake2b-304": 45606,
        "blake2b-312": 45607,
        "blake2b-320": 45608,
        "blake2b-328": 45609,
        "blake2b-336": 45610,
        "blake2b-344": 45611,
        "blake2b-352": 45612,
        "blake2b-360": 45613,
        "blake2b-368": 45614,
        "blake2b-376": 45615,
        "blake2b-384": 45616,
        "blake2b-392": 45617,
        "blake2b-400": 45618,
        "blake2b-408": 45619,
        "blake2b-416": 45620,
        "blake2b-424": 45621,
        "blake2b-432": 45622,
        "blake2b-440": 45623,
        "blake2b-448": 45624,
        "blake2b-456": 45625,
        "blake2b-464": 45626,
        "blake2b-472": 45627,
        "blake2b-480": 45628,
        "blake2b-488": 45629,
        "blake2b-496": 45630,
        "blake2b-504": 45631,
        "blake2b-512": 45632,
        "blake2s-8": 45633,
        "blake2s-16": 45634,
        "blake2s-24": 45635,
        "blake2s-32": 45636,
        "blake2s-40": 45637,
        "blake2s-48": 45638,
        "blake2s-56": 45639,
        "blake2s-64": 45640,
        "blake2s-72": 45641,
        "blake2s-80": 45642,
        "blake2s-88": 45643,
        "blake2s-96": 45644,
        "blake2s-104": 45645,
        "blake2s-112": 45646,
        "blake2s-120": 45647,
        "blake2s-128": 45648,
        "blake2s-136": 45649,
        "blake2s-144": 45650,
        "blake2s-152": 45651,
        "blake2s-160": 45652,
        "blake2s-168": 45653,
        "blake2s-176": 45654,
        "blake2s-184": 45655,
        "blake2s-192": 45656,
        "blake2s-200": 45657,
        "blake2s-208": 45658,
        "blake2s-216": 45659,
        "blake2s-224": 45660,
        "blake2s-232": 45661,
        "blake2s-240": 45662,
        "blake2s-248": 45663,
        "blake2s-256": 45664,
        "Skein256-8": 45825,
        "Skein256-16": 45826,
        "Skein256-24": 45827,
        "Skein256-32": 45828,
        "Skein256-40": 45829,
        "Skein256-48": 45830,
        "Skein256-56": 45831,
        "Skein256-64": 45832,
        "Skein256-72": 45833,
        "Skein256-80": 45834,
        "Skein256-88": 45835,
        "Skein256-96": 45836,
        "Skein256-104": 45837,
        "Skein256-112": 45838,
        "Skein256-120": 45839,
        "Skein256-128": 45840,
        "Skein256-136": 45841,
        "Skein256-144": 45842,
        "Skein256-152": 45843,
        "Skein256-160": 45844,
        "Skein256-168": 45845,
        "Skein256-176": 45846,
        "Skein256-184": 45847,
        "Skein256-192": 45848,
        "Skein256-200": 45849,
        "Skein256-208": 45850,
        "Skein256-216": 45851,
        "Skein256-224": 45852,
        "Skein256-232": 45853,
        "Skein256-240": 45854,
        "Skein256-248": 45855,
        "Skein256-256": 45856,
        "Skein512-8": 45857,
        "Skein512-16": 45858,
        "Skein512-24": 45859,
        "Skein512-32": 45860,
        "Skein512-40": 45861,
        "Skein512-48": 45862,
        "Skein512-56": 45863,
        "Skein512-64": 45864,
        "Skein512-72": 45865,
        "Skein512-80": 45866,
        "Skein512-88": 45867,
        "Skein512-96": 45868,
        "Skein512-104": 45869,
        "Skein512-112": 45870,
        "Skein512-120": 45871,
        "Skein512-128": 45872,
        "Skein512-136": 45873,
        "Skein512-144": 45874,
        "Skein512-152": 45875,
        "Skein512-160": 45876,
        "Skein512-168": 45877,
        "Skein512-176": 45878,
        "Skein512-184": 45879,
        "Skein512-192": 45880,
        "Skein512-200": 45881,
        "Skein512-208": 45882,
        "Skein512-216": 45883,
        "Skein512-224": 45884,
        "Skein512-232": 45885,
        "Skein512-240": 45886,
        "Skein512-248": 45887,
        "Skein512-256": 45888,
        "Skein512-264": 45889,
        "Skein512-272": 45890,
        "Skein512-280": 45891,
        "Skein512-288": 45892,
        "Skein512-296": 45893,
        "Skein512-304": 45894,
        "Skein512-312": 45895,
        "Skein512-320": 45896,
        "Skein512-328": 45897,
        "Skein512-336": 45898,
        "Skein512-344": 45899,
        "Skein512-352": 45900,
        "Skein512-360": 45901,
        "Skein512-368": 45902,
        "Skein512-376": 45903,
        "Skein512-384": 45904,
        "Skein512-392": 45905,
        "Skein512-400": 45906,
        "Skein512-408": 45907,
        "Skein512-416": 45908,
        "Skein512-424": 45909,
        "Skein512-432": 45910,
        "Skein512-440": 45911,
        "Skein512-448": 45912,
        "Skein512-456": 45913,
        "Skein512-464": 45914,
        "Skein512-472": 45915,
        "Skein512-480": 45916,
        "Skein512-488": 45917,
        "Skein512-496": 45918,
        "Skein512-504": 45919,
        "Skein512-512": 45920,
        "Skein1024-8": 45921,
        "Skein1024-16": 45922,
        "Skein1024-24": 45923,
        "Skein1024-32": 45924,
        "Skein1024-40": 45925,
        "Skein1024-48": 45926,
        "Skein1024-56": 45927,
        "Skein1024-64": 45928,
        "Skein1024-72": 45929,
        "Skein1024-80": 45930,
        "Skein1024-88": 45931,
        "Skein1024-96": 45932,
        "Skein1024-104": 45933,
        "Skein1024-112": 45934,
        "Skein1024-120": 45935,
        "Skein1024-128": 45936,
        "Skein1024-136": 45937,
        "Skein1024-144": 45938,
        "Skein1024-152": 45939,
        "Skein1024-160": 45940,
        "Skein1024-168": 45941,
        "Skein1024-176": 45942,
        "Skein1024-184": 45943,
        "Skein1024-192": 45944,
        "Skein1024-200": 45945,
        "Skein1024-208": 45946,
        "Skein1024-216": 45947,
        "Skein1024-224": 45948,
        "Skein1024-232": 45949,
        "Skein1024-240": 45950,
        "Skein1024-248": 45951,
        "Skein1024-256": 45952,
        "Skein1024-264": 45953,
        "Skein1024-272": 45954,
        "Skein1024-280": 45955,
        "Skein1024-288": 45956,
        "Skein1024-296": 45957,
        "Skein1024-304": 45958,
        "Skein1024-312": 45959,
        "Skein1024-320": 45960,
        "Skein1024-328": 45961,
        "Skein1024-336": 45962,
        "Skein1024-344": 45963,
        "Skein1024-352": 45964,
        "Skein1024-360": 45965,
        "Skein1024-368": 45966,
        "Skein1024-376": 45967,
        "Skein1024-384": 45968,
        "Skein1024-392": 45969,
        "Skein1024-400": 45970,
        "Skein1024-408": 45971,
        "Skein1024-416": 45972,
        "Skein1024-424": 45973,
        "Skein1024-432": 45974,
        "Skein1024-440": 45975,
        "Skein1024-448": 45976,
        "Skein1024-456": 45977,
        "Skein1024-464": 45978,
        "Skein1024-472": 45979,
        "Skein1024-480": 45980,
        "Skein1024-488": 45981,
        "Skein1024-496": 45982,
        "Skein1024-504": 45983,
        "Skein1024-512": 45984,
        "Skein1024-520": 45985,
        "Skein1024-528": 45986,
        "Skein1024-536": 45987,
        "Skein1024-544": 45988,
        "Skein1024-552": 45989,
        "Skein1024-560": 45990,
        "Skein1024-568": 45991,
        "Skein1024-576": 45992,
        "Skein1024-584": 45993,
        "Skein1024-592": 45994,
        "Skein1024-600": 45995,
        "Skein1024-608": 45996,
        "Skein1024-616": 45997,
        "Skein1024-624": 45998,
        "Skein1024-632": 45999,
        "Skein1024-640": 46e3,
        "Skein1024-648": 46001,
        "Skein1024-656": 46002,
        "Skein1024-664": 46003,
        "Skein1024-672": 46004,
        "Skein1024-680": 46005,
        "Skein1024-688": 46006,
        "Skein1024-696": 46007,
        "Skein1024-704": 46008,
        "Skein1024-712": 46009,
        "Skein1024-720": 46010,
        "Skein1024-728": 46011,
        "Skein1024-736": 46012,
        "Skein1024-744": 46013,
        "Skein1024-752": 46014,
        "Skein1024-760": 46015,
        "Skein1024-768": 46016,
        "Skein1024-776": 46017,
        "Skein1024-784": 46018,
        "Skein1024-792": 46019,
        "Skein1024-800": 46020,
        "Skein1024-808": 46021,
        "Skein1024-816": 46022,
        "Skein1024-824": 46023,
        "Skein1024-832": 46024,
        "Skein1024-840": 46025,
        "Skein1024-848": 46026,
        "Skein1024-856": 46027,
        "Skein1024-864": 46028,
        "Skein1024-872": 46029,
        "Skein1024-880": 46030,
        "Skein1024-888": 46031,
        "Skein1024-896": 46032,
        "Skein1024-904": 46033,
        "Skein1024-912": 46034,
        "Skein1024-920": 46035,
        "Skein1024-928": 46036,
        "Skein1024-936": 46037,
        "Skein1024-944": 46038,
        "Skein1024-952": 46039,
        "Skein1024-960": 46040,
        "Skein1024-968": 46041,
        "Skein1024-976": 46042,
        "Skein1024-984": 46043,
        "Skein1024-992": 46044,
        "Skein1024-1000": 46045,
        "Skein1024-1008": 46046,
        "Skein1024-1016": 46047,
        "Skein1024-1024": 46048,
      });
      exports.codes = Object.freeze({
        0: "identity",
        17: "sha1",
        18: "sha2-256",
        19: "sha2-512",
        86: "dbl-sha2-256",
        23: "sha3-224",
        22: "sha3-256",
        21: "sha3-384",
        20: "sha3-512",
        24: "shake-128",
        25: "shake-256",
        26: "keccak-224",
        27: "keccak-256",
        28: "keccak-384",
        29: "keccak-512",
        34: "murmur3-128",
        35: "murmur3-32",
        212: "md4",
        213: "md5",
        45569: "blake2b-8",
        45570: "blake2b-16",
        45571: "blake2b-24",
        45572: "blake2b-32",
        45573: "blake2b-40",
        45574: "blake2b-48",
        45575: "blake2b-56",
        45576: "blake2b-64",
        45577: "blake2b-72",
        45578: "blake2b-80",
        45579: "blake2b-88",
        45580: "blake2b-96",
        45581: "blake2b-104",
        45582: "blake2b-112",
        45583: "blake2b-120",
        45584: "blake2b-128",
        45585: "blake2b-136",
        45586: "blake2b-144",
        45587: "blake2b-152",
        45588: "blake2b-160",
        45589: "blake2b-168",
        45590: "blake2b-176",
        45591: "blake2b-184",
        45592: "blake2b-192",
        45593: "blake2b-200",
        45594: "blake2b-208",
        45595: "blake2b-216",
        45596: "blake2b-224",
        45597: "blake2b-232",
        45598: "blake2b-240",
        45599: "blake2b-248",
        45600: "blake2b-256",
        45601: "blake2b-264",
        45602: "blake2b-272",
        45603: "blake2b-280",
        45604: "blake2b-288",
        45605: "blake2b-296",
        45606: "blake2b-304",
        45607: "blake2b-312",
        45608: "blake2b-320",
        45609: "blake2b-328",
        45610: "blake2b-336",
        45611: "blake2b-344",
        45612: "blake2b-352",
        45613: "blake2b-360",
        45614: "blake2b-368",
        45615: "blake2b-376",
        45616: "blake2b-384",
        45617: "blake2b-392",
        45618: "blake2b-400",
        45619: "blake2b-408",
        45620: "blake2b-416",
        45621: "blake2b-424",
        45622: "blake2b-432",
        45623: "blake2b-440",
        45624: "blake2b-448",
        45625: "blake2b-456",
        45626: "blake2b-464",
        45627: "blake2b-472",
        45628: "blake2b-480",
        45629: "blake2b-488",
        45630: "blake2b-496",
        45631: "blake2b-504",
        45632: "blake2b-512",
        45633: "blake2s-8",
        45634: "blake2s-16",
        45635: "blake2s-24",
        45636: "blake2s-32",
        45637: "blake2s-40",
        45638: "blake2s-48",
        45639: "blake2s-56",
        45640: "blake2s-64",
        45641: "blake2s-72",
        45642: "blake2s-80",
        45643: "blake2s-88",
        45644: "blake2s-96",
        45645: "blake2s-104",
        45646: "blake2s-112",
        45647: "blake2s-120",
        45648: "blake2s-128",
        45649: "blake2s-136",
        45650: "blake2s-144",
        45651: "blake2s-152",
        45652: "blake2s-160",
        45653: "blake2s-168",
        45654: "blake2s-176",
        45655: "blake2s-184",
        45656: "blake2s-192",
        45657: "blake2s-200",
        45658: "blake2s-208",
        45659: "blake2s-216",
        45660: "blake2s-224",
        45661: "blake2s-232",
        45662: "blake2s-240",
        45663: "blake2s-248",
        45664: "blake2s-256",
        45825: "Skein256-8",
        45826: "Skein256-16",
        45827: "Skein256-24",
        45828: "Skein256-32",
        45829: "Skein256-40",
        45830: "Skein256-48",
        45831: "Skein256-56",
        45832: "Skein256-64",
        45833: "Skein256-72",
        45834: "Skein256-80",
        45835: "Skein256-88",
        45836: "Skein256-96",
        45837: "Skein256-104",
        45838: "Skein256-112",
        45839: "Skein256-120",
        45840: "Skein256-128",
        45841: "Skein256-136",
        45842: "Skein256-144",
        45843: "Skein256-152",
        45844: "Skein256-160",
        45845: "Skein256-168",
        45846: "Skein256-176",
        45847: "Skein256-184",
        45848: "Skein256-192",
        45849: "Skein256-200",
        45850: "Skein256-208",
        45851: "Skein256-216",
        45852: "Skein256-224",
        45853: "Skein256-232",
        45854: "Skein256-240",
        45855: "Skein256-248",
        45856: "Skein256-256",
        45857: "Skein512-8",
        45858: "Skein512-16",
        45859: "Skein512-24",
        45860: "Skein512-32",
        45861: "Skein512-40",
        45862: "Skein512-48",
        45863: "Skein512-56",
        45864: "Skein512-64",
        45865: "Skein512-72",
        45866: "Skein512-80",
        45867: "Skein512-88",
        45868: "Skein512-96",
        45869: "Skein512-104",
        45870: "Skein512-112",
        45871: "Skein512-120",
        45872: "Skein512-128",
        45873: "Skein512-136",
        45874: "Skein512-144",
        45875: "Skein512-152",
        45876: "Skein512-160",
        45877: "Skein512-168",
        45878: "Skein512-176",
        45879: "Skein512-184",
        45880: "Skein512-192",
        45881: "Skein512-200",
        45882: "Skein512-208",
        45883: "Skein512-216",
        45884: "Skein512-224",
        45885: "Skein512-232",
        45886: "Skein512-240",
        45887: "Skein512-248",
        45888: "Skein512-256",
        45889: "Skein512-264",
        45890: "Skein512-272",
        45891: "Skein512-280",
        45892: "Skein512-288",
        45893: "Skein512-296",
        45894: "Skein512-304",
        45895: "Skein512-312",
        45896: "Skein512-320",
        45897: "Skein512-328",
        45898: "Skein512-336",
        45899: "Skein512-344",
        45900: "Skein512-352",
        45901: "Skein512-360",
        45902: "Skein512-368",
        45903: "Skein512-376",
        45904: "Skein512-384",
        45905: "Skein512-392",
        45906: "Skein512-400",
        45907: "Skein512-408",
        45908: "Skein512-416",
        45909: "Skein512-424",
        45910: "Skein512-432",
        45911: "Skein512-440",
        45912: "Skein512-448",
        45913: "Skein512-456",
        45914: "Skein512-464",
        45915: "Skein512-472",
        45916: "Skein512-480",
        45917: "Skein512-488",
        45918: "Skein512-496",
        45919: "Skein512-504",
        45920: "Skein512-512",
        45921: "Skein1024-8",
        45922: "Skein1024-16",
        45923: "Skein1024-24",
        45924: "Skein1024-32",
        45925: "Skein1024-40",
        45926: "Skein1024-48",
        45927: "Skein1024-56",
        45928: "Skein1024-64",
        45929: "Skein1024-72",
        45930: "Skein1024-80",
        45931: "Skein1024-88",
        45932: "Skein1024-96",
        45933: "Skein1024-104",
        45934: "Skein1024-112",
        45935: "Skein1024-120",
        45936: "Skein1024-128",
        45937: "Skein1024-136",
        45938: "Skein1024-144",
        45939: "Skein1024-152",
        45940: "Skein1024-160",
        45941: "Skein1024-168",
        45942: "Skein1024-176",
        45943: "Skein1024-184",
        45944: "Skein1024-192",
        45945: "Skein1024-200",
        45946: "Skein1024-208",
        45947: "Skein1024-216",
        45948: "Skein1024-224",
        45949: "Skein1024-232",
        45950: "Skein1024-240",
        45951: "Skein1024-248",
        45952: "Skein1024-256",
        45953: "Skein1024-264",
        45954: "Skein1024-272",
        45955: "Skein1024-280",
        45956: "Skein1024-288",
        45957: "Skein1024-296",
        45958: "Skein1024-304",
        45959: "Skein1024-312",
        45960: "Skein1024-320",
        45961: "Skein1024-328",
        45962: "Skein1024-336",
        45963: "Skein1024-344",
        45964: "Skein1024-352",
        45965: "Skein1024-360",
        45966: "Skein1024-368",
        45967: "Skein1024-376",
        45968: "Skein1024-384",
        45969: "Skein1024-392",
        45970: "Skein1024-400",
        45971: "Skein1024-408",
        45972: "Skein1024-416",
        45973: "Skein1024-424",
        45974: "Skein1024-432",
        45975: "Skein1024-440",
        45976: "Skein1024-448",
        45977: "Skein1024-456",
        45978: "Skein1024-464",
        45979: "Skein1024-472",
        45980: "Skein1024-480",
        45981: "Skein1024-488",
        45982: "Skein1024-496",
        45983: "Skein1024-504",
        45984: "Skein1024-512",
        45985: "Skein1024-520",
        45986: "Skein1024-528",
        45987: "Skein1024-536",
        45988: "Skein1024-544",
        45989: "Skein1024-552",
        45990: "Skein1024-560",
        45991: "Skein1024-568",
        45992: "Skein1024-576",
        45993: "Skein1024-584",
        45994: "Skein1024-592",
        45995: "Skein1024-600",
        45996: "Skein1024-608",
        45997: "Skein1024-616",
        45998: "Skein1024-624",
        45999: "Skein1024-632",
        46e3: "Skein1024-640",
        46001: "Skein1024-648",
        46002: "Skein1024-656",
        46003: "Skein1024-664",
        46004: "Skein1024-672",
        46005: "Skein1024-680",
        46006: "Skein1024-688",
        46007: "Skein1024-696",
        46008: "Skein1024-704",
        46009: "Skein1024-712",
        46010: "Skein1024-720",
        46011: "Skein1024-728",
        46012: "Skein1024-736",
        46013: "Skein1024-744",
        46014: "Skein1024-752",
        46015: "Skein1024-760",
        46016: "Skein1024-768",
        46017: "Skein1024-776",
        46018: "Skein1024-784",
        46019: "Skein1024-792",
        46020: "Skein1024-800",
        46021: "Skein1024-808",
        46022: "Skein1024-816",
        46023: "Skein1024-824",
        46024: "Skein1024-832",
        46025: "Skein1024-840",
        46026: "Skein1024-848",
        46027: "Skein1024-856",
        46028: "Skein1024-864",
        46029: "Skein1024-872",
        46030: "Skein1024-880",
        46031: "Skein1024-888",
        46032: "Skein1024-896",
        46033: "Skein1024-904",
        46034: "Skein1024-912",
        46035: "Skein1024-920",
        46036: "Skein1024-928",
        46037: "Skein1024-936",
        46038: "Skein1024-944",
        46039: "Skein1024-952",
        46040: "Skein1024-960",
        46041: "Skein1024-968",
        46042: "Skein1024-976",
        46043: "Skein1024-984",
        46044: "Skein1024-992",
        46045: "Skein1024-1000",
        46046: "Skein1024-1008",
        46047: "Skein1024-1016",
        46048: "Skein1024-1024",
      });
      exports.defaultLengths = Object.freeze({
        17: 20,
        18: 32,
        19: 64,
        86: 32,
        23: 28,
        22: 32,
        21: 48,
        20: 64,
        24: 32,
        25: 64,
        26: 28,
        27: 32,
        28: 48,
        29: 64,
        34: 32,
        45569: 1,
        45570: 2,
        45571: 3,
        45572: 4,
        45573: 5,
        45574: 6,
        45575: 7,
        45576: 8,
        45577: 9,
        45578: 10,
        45579: 11,
        45580: 12,
        45581: 13,
        45582: 14,
        45583: 15,
        45584: 16,
        45585: 17,
        45586: 18,
        45587: 19,
        45588: 20,
        45589: 21,
        45590: 22,
        45591: 23,
        45592: 24,
        45593: 25,
        45594: 26,
        45595: 27,
        45596: 28,
        45597: 29,
        45598: 30,
        45599: 31,
        45600: 32,
        45601: 33,
        45602: 34,
        45603: 35,
        45604: 36,
        45605: 37,
        45606: 38,
        45607: 39,
        45608: 40,
        45609: 41,
        45610: 42,
        45611: 43,
        45612: 44,
        45613: 45,
        45614: 46,
        45615: 47,
        45616: 48,
        45617: 49,
        45618: 50,
        45619: 51,
        45620: 52,
        45621: 53,
        45622: 54,
        45623: 55,
        45624: 56,
        45625: 57,
        45626: 58,
        45627: 59,
        45628: 60,
        45629: 61,
        45630: 62,
        45631: 63,
        45632: 64,
        45633: 1,
        45634: 2,
        45635: 3,
        45636: 4,
        45637: 5,
        45638: 6,
        45639: 7,
        45640: 8,
        45641: 9,
        45642: 10,
        45643: 11,
        45644: 12,
        45645: 13,
        45646: 14,
        45647: 15,
        45648: 16,
        45649: 17,
        45650: 18,
        45651: 19,
        45652: 20,
        45653: 21,
        45654: 22,
        45655: 23,
        45656: 24,
        45657: 25,
        45658: 26,
        45659: 27,
        45660: 28,
        45661: 29,
        45662: 30,
        45663: 31,
        45664: 32,
        45825: 1,
        45826: 2,
        45827: 3,
        45828: 4,
        45829: 5,
        45830: 6,
        45831: 7,
        45832: 8,
        45833: 9,
        45834: 10,
        45835: 11,
        45836: 12,
        45837: 13,
        45838: 14,
        45839: 15,
        45840: 16,
        45841: 17,
        45842: 18,
        45843: 19,
        45844: 20,
        45845: 21,
        45846: 22,
        45847: 23,
        45848: 24,
        45849: 25,
        45850: 26,
        45851: 27,
        45852: 28,
        45853: 29,
        45854: 30,
        45855: 31,
        45856: 32,
        45857: 1,
        45858: 2,
        45859: 3,
        45860: 4,
        45861: 5,
        45862: 6,
        45863: 7,
        45864: 8,
        45865: 9,
        45866: 10,
        45867: 11,
        45868: 12,
        45869: 13,
        45870: 14,
        45871: 15,
        45872: 16,
        45873: 17,
        45874: 18,
        45875: 19,
        45876: 20,
        45877: 21,
        45878: 22,
        45879: 23,
        45880: 24,
        45881: 25,
        45882: 26,
        45883: 27,
        45884: 28,
        45885: 29,
        45886: 30,
        45887: 31,
        45888: 32,
        45889: 33,
        45890: 34,
        45891: 35,
        45892: 36,
        45893: 37,
        45894: 38,
        45895: 39,
        45896: 40,
        45897: 41,
        45898: 42,
        45899: 43,
        45900: 44,
        45901: 45,
        45902: 46,
        45903: 47,
        45904: 48,
        45905: 49,
        45906: 50,
        45907: 51,
        45908: 52,
        45909: 53,
        45910: 54,
        45911: 55,
        45912: 56,
        45913: 57,
        45914: 58,
        45915: 59,
        45916: 60,
        45917: 61,
        45918: 62,
        45919: 63,
        45920: 64,
        45921: 1,
        45922: 2,
        45923: 3,
        45924: 4,
        45925: 5,
        45926: 6,
        45927: 7,
        45928: 8,
        45929: 9,
        45930: 10,
        45931: 11,
        45932: 12,
        45933: 13,
        45934: 14,
        45935: 15,
        45936: 16,
        45937: 17,
        45938: 18,
        45939: 19,
        45940: 20,
        45941: 21,
        45942: 22,
        45943: 23,
        45944: 24,
        45945: 25,
        45946: 26,
        45947: 27,
        45948: 28,
        45949: 29,
        45950: 30,
        45951: 31,
        45952: 32,
        45953: 33,
        45954: 34,
        45955: 35,
        45956: 36,
        45957: 37,
        45958: 38,
        45959: 39,
        45960: 40,
        45961: 41,
        45962: 42,
        45963: 43,
        45964: 44,
        45965: 45,
        45966: 46,
        45967: 47,
        45968: 48,
        45969: 49,
        45970: 50,
        45971: 51,
        45972: 52,
        45973: 53,
        45974: 54,
        45975: 55,
        45976: 56,
        45977: 57,
        45978: 58,
        45979: 59,
        45980: 60,
        45981: 61,
        45982: 62,
        45983: 63,
        45984: 64,
        45985: 65,
        45986: 66,
        45987: 67,
        45988: 68,
        45989: 69,
        45990: 70,
        45991: 71,
        45992: 72,
        45993: 73,
        45994: 74,
        45995: 75,
        45996: 76,
        45997: 77,
        45998: 78,
        45999: 79,
        46e3: 80,
        46001: 81,
        46002: 82,
        46003: 83,
        46004: 84,
        46005: 85,
        46006: 86,
        46007: 87,
        46008: 88,
        46009: 89,
        46010: 90,
        46011: 91,
        46012: 92,
        46013: 93,
        46014: 94,
        46015: 95,
        46016: 96,
        46017: 97,
        46018: 98,
        46019: 99,
        46020: 100,
        46021: 101,
        46022: 102,
        46023: 103,
        46024: 104,
        46025: 105,
        46026: 106,
        46027: 107,
        46028: 108,
        46029: 109,
        46030: 110,
        46031: 111,
        46032: 112,
        46033: 113,
        46034: 114,
        46035: 115,
        46036: 116,
        46037: 117,
        46038: 118,
        46039: 119,
        46040: 120,
        46041: 121,
        46042: 122,
        46043: 123,
        46044: 124,
        46045: 125,
        46046: 126,
        46047: 127,
        46048: 128,
      });
    },
  });

  // node_modules/multihashes/src/index.js
  var require_src5 = __commonJS({
    "node_modules/multihashes/src/index.js"(exports) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      var multibase = require_src4();
      var varint = require_varint();
      var cs = require_constants3();
      exports.names = cs.names;
      exports.codes = cs.codes;
      exports.defaultLengths = cs.defaultLengths;
      exports.toHexString = function toHexString2(hash4) {
        if (!Buffer4.isBuffer(hash4)) {
          throw new Error("must be passed a buffer");
        }
        return hash4.toString("hex");
      };
      exports.fromHexString = function fromHexString(hash4) {
        return Buffer4.from(hash4, "hex");
      };
      exports.toB58String = function toB58String(hash4) {
        if (!Buffer4.isBuffer(hash4)) {
          throw new Error("must be passed a buffer");
        }
        return multibase.encode("base58btc", hash4).toString().slice(1);
      };
      exports.fromB58String = function fromB58String(hash4) {
        let encoded = hash4;
        if (Buffer4.isBuffer(hash4)) {
          encoded = hash4.toString();
        }
        return multibase.decode("z" + encoded);
      };
      exports.decode = function decode3(buf) {
        if (!Buffer4.isBuffer(buf)) {
          throw new Error("multihash must be a Buffer");
        }
        if (buf.length < 2) {
          throw new Error("multihash too short. must be > 2 bytes.");
        }
        const code = varint.decode(buf);
        if (!exports.isValidCode(code)) {
          throw new Error(
            `multihash unknown function code: 0x${code.toString(16)}`
          );
        }
        buf = buf.slice(varint.decode.bytes);
        const len = varint.decode(buf);
        if (len < 0) {
          throw new Error(`multihash invalid length: ${len}`);
        }
        buf = buf.slice(varint.decode.bytes);
        if (buf.length !== len) {
          throw new Error(
            `multihash length inconsistent: 0x${buf.toString("hex")}`
          );
        }
        return {
          code,
          name: cs.codes[code],
          length: len,
          digest: buf,
        };
      };
      exports.encode = function encode4(digest, code, length) {
        if (!digest || code === void 0) {
          throw new Error(
            "multihash encode requires at least two args: digest, code"
          );
        }
        const hashfn = exports.coerceCode(code);
        if (!Buffer4.isBuffer(digest)) {
          throw new Error("digest should be a Buffer");
        }
        if (length == null) {
          length = digest.length;
        }
        if (length && digest.length !== length) {
          throw new Error("digest length should be equal to specified length.");
        }
        return Buffer4.concat([
          Buffer4.from(varint.encode(hashfn)),
          Buffer4.from(varint.encode(length)),
          digest,
        ]);
      };
      exports.coerceCode = function coerceCode(name2) {
        let code = name2;
        if (typeof name2 === "string") {
          if (cs.names[name2] === void 0) {
            throw new Error(`Unrecognized hash function named: ${name2}`);
          }
          code = cs.names[name2];
        }
        if (typeof code !== "number") {
          throw new Error(
            `Hash function code should be a number. Got: ${code}`
          );
        }
        if (cs.codes[code] === void 0 && !exports.isAppCode(code)) {
          throw new Error(`Unrecognized function code: ${code}`);
        }
        return code;
      };
      exports.isAppCode = function appCode(code) {
        return code > 0 && code < 16;
      };
      exports.isValidCode = function validCode(code) {
        if (exports.isAppCode(code)) {
          return true;
        }
        if (cs.codes[code]) {
          return true;
        }
        return false;
      };
      function validate5(multihash) {
        exports.decode(multihash);
      }
      exports.validate = validate5;
      exports.prefix = function prefix(multihash) {
        validate5(multihash);
        return multihash.slice(0, 2);
      };
    },
  });

  // node_modules/cids/node_modules/multibase/src/base.js
  var require_base2 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/base.js"(exports, module) {
      "use strict";
      var Base = class {
        constructor(name2, code, implementation, alphabet) {
          this.name = name2;
          this.code = code;
          this.alphabet = alphabet;
          if (implementation && alphabet) {
            this.engine = implementation(alphabet);
          }
        }
        encode(stringOrBuffer) {
          return this.engine.encode(stringOrBuffer);
        }
        decode(stringOrBuffer) {
          return this.engine.decode(stringOrBuffer);
        }
        isImplemented() {
          return this.engine;
        }
      };
      module.exports = Base;
    },
  });

  // node_modules/cids/node_modules/multibase/src/base16.js
  var require_base162 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/base16.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      module.exports = function base16(alphabet) {
        return {
          encode(input) {
            if (typeof input === "string") {
              return Buffer4.from(input).toString("hex");
            }
            return input.toString("hex");
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base16 character");
              }
            }
            return Buffer4.from(input, "hex");
          },
        };
      };
    },
  });

  // node_modules/cids/node_modules/multibase/src/base32.js
  var require_base322 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/base32.js"(exports, module) {
      "use strict";
      function decode3(input, alphabet) {
        input = input.replace(new RegExp("=", "g"), "");
        const length = input.length;
        let bits = 0;
        let value = 0;
        let index = 0;
        const output = new Uint8Array(((length * 5) / 8) | 0);
        for (let i = 0; i < length; i++) {
          value = (value << 5) | alphabet.indexOf(input[i]);
          bits += 5;
          if (bits >= 8) {
            output[index++] = (value >>> (bits - 8)) & 255;
            bits -= 8;
          }
        }
        return output.buffer;
      }
      function encode4(buffer, alphabet) {
        const length = buffer.byteLength;
        const view = new Uint8Array(buffer);
        const padding2 = alphabet.indexOf("=") === alphabet.length - 1;
        if (padding2) {
          alphabet = alphabet.substring(0, alphabet.length - 1);
        }
        let bits = 0;
        let value = 0;
        let output = "";
        for (let i = 0; i < length; i++) {
          value = (value << 8) | view[i];
          bits += 8;
          while (bits >= 5) {
            output += alphabet[(value >>> (bits - 5)) & 31];
            bits -= 5;
          }
        }
        if (bits > 0) {
          output += alphabet[(value << (5 - bits)) & 31];
        }
        if (padding2) {
          while (output.length % 8 !== 0) {
            output += "=";
          }
        }
        return output;
      }
      module.exports = function base32(alphabet) {
        return {
          encode(input) {
            if (typeof input === "string") {
              return encode4(Uint8Array.from(input), alphabet);
            }
            return encode4(input, alphabet);
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base32 character");
              }
            }
            return decode3(input, alphabet);
          },
        };
      };
    },
  });

  // node_modules/cids/node_modules/multibase/src/base64.js
  var require_base643 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/base64.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      module.exports = function base64(alphabet) {
        const padding2 = alphabet.indexOf("=") > -1;
        const url = alphabet.indexOf("-") > -1 && alphabet.indexOf("_") > -1;
        return {
          encode(input) {
            let output = "";
            if (typeof input === "string") {
              output = Buffer4.from(input).toString("base64");
            } else {
              output = input.toString("base64");
            }
            if (url) {
              output = output.replace(/\+/g, "-").replace(/\//g, "_");
            }
            const pad = output.indexOf("=");
            if (pad > 0 && !padding2) {
              output = output.substring(0, pad);
            }
            return output;
          },
          decode(input) {
            for (const char of input) {
              if (alphabet.indexOf(char) < 0) {
                throw new Error("invalid base64 character");
              }
            }
            return Buffer4.from(input, "base64");
          },
        };
      };
    },
  });

  // node_modules/cids/node_modules/multibase/src/constants.js
  var require_constants4 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/constants.js"(
      exports,
      module
    ) {
      "use strict";
      var Base = require_base2();
      var baseX = require_src3();
      var base16 = require_base162();
      var base32 = require_base322();
      var base64 = require_base643();
      var constants = [
        ["base1", "1", "", "1"],
        ["base2", "0", baseX, "01"],
        ["base8", "7", baseX, "01234567"],
        ["base10", "9", baseX, "0123456789"],
        ["base16", "f", base16, "0123456789abcdef"],
        ["base32", "b", base32, "abcdefghijklmnopqrstuvwxyz234567"],
        ["base32pad", "c", base32, "abcdefghijklmnopqrstuvwxyz234567="],
        ["base32hex", "v", base32, "0123456789abcdefghijklmnopqrstuv"],
        ["base32hexpad", "t", base32, "0123456789abcdefghijklmnopqrstuv="],
        ["base32z", "h", base32, "ybndrfg8ejkmcpqxot1uwisza345h769"],
        [
          "base58flickr",
          "Z",
          baseX,
          "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",
        ],
        [
          "base58btc",
          "z",
          baseX,
          "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
        ],
        [
          "base64",
          "m",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        ],
        [
          "base64pad",
          "M",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        ],
        [
          "base64url",
          "u",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
        ],
        [
          "base64urlpad",
          "U",
          base64,
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
        ],
      ];
      var names2 = constants.reduce((prev, tupple) => {
        prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
        return prev;
      }, {});
      var codes = constants.reduce((prev, tupple) => {
        prev[tupple[1]] = names2[tupple[0]];
        return prev;
      }, {});
      module.exports = {
        names: names2,
        codes,
      };
    },
  });

  // node_modules/cids/node_modules/multibase/src/index.js
  var require_src6 = __commonJS({
    "node_modules/cids/node_modules/multibase/src/index.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      var constants = require_constants4();
      exports = module.exports = multibase;
      exports.encode = encode4;
      exports.decode = decode3;
      exports.isEncoded = isEncoded;
      exports.names = Object.freeze(Object.keys(constants.names));
      exports.codes = Object.freeze(Object.keys(constants.codes));
      var errNotSupported = new Error("Unsupported encoding");
      function multibase(nameOrCode, buf) {
        if (!buf) {
          throw new Error("requires an encoded buffer");
        }
        const base2 = getBase(nameOrCode);
        const codeBuf = Buffer4.from(base2.code);
        const name2 = base2.name;
        validEncode(name2, buf);
        return Buffer4.concat([codeBuf, buf]);
      }
      function encode4(nameOrCode, buf) {
        const base2 = getBase(nameOrCode);
        const name2 = base2.name;
        return multibase(name2, Buffer4.from(base2.encode(buf)));
      }
      function decode3(bufOrString) {
        if (Buffer4.isBuffer(bufOrString)) {
          bufOrString = bufOrString.toString();
        }
        const code = bufOrString.substring(0, 1);
        bufOrString = bufOrString.substring(1, bufOrString.length);
        if (typeof bufOrString === "string") {
          bufOrString = Buffer4.from(bufOrString);
        }
        const base2 = getBase(code);
        return Buffer4.from(base2.decode(bufOrString.toString()));
      }
      function isEncoded(bufOrString) {
        if (Buffer4.isBuffer(bufOrString)) {
          bufOrString = bufOrString.toString();
        }
        if (Object.prototype.toString.call(bufOrString) !== "[object String]") {
          return false;
        }
        const code = bufOrString.substring(0, 1);
        try {
          const base2 = getBase(code);
          return base2.name;
        } catch (err) {
          return false;
        }
      }
      function validEncode(name2, buf) {
        const base2 = getBase(name2);
        base2.decode(buf.toString());
      }
      function getBase(nameOrCode) {
        let base2;
        if (constants.names[nameOrCode]) {
          base2 = constants.names[nameOrCode];
        } else if (constants.codes[nameOrCode]) {
          base2 = constants.codes[nameOrCode];
        } else {
          throw errNotSupported;
        }
        if (!base2.isImplemented()) {
          throw new Error("Base " + nameOrCode + " is not implemented yet");
        }
        return base2;
      }
    },
  });

  // node_modules/cids/node_modules/multicodec/src/base-table.json
  var require_base_table2 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/base-table.json"(
      exports,
      module
    ) {
      module.exports = {
        identity: 0,
        ip4: 4,
        tcp: 6,
        sha1: 17,
        "sha2-256": 18,
        "sha2-512": 19,
        "sha3-512": 20,
        "sha3-384": 21,
        "sha3-256": 22,
        "sha3-224": 23,
        "shake-128": 24,
        "shake-256": 25,
        "keccak-224": 26,
        "keccak-256": 27,
        "keccak-384": 28,
        "keccak-512": 29,
        blake3: 30,
        dccp: 33,
        "murmur3-128": 34,
        "murmur3-32": 35,
        ip6: 41,
        ip6zone: 42,
        path: 47,
        multicodec: 48,
        multihash: 49,
        multiaddr: 50,
        multibase: 51,
        dns: 53,
        dns4: 54,
        dns6: 55,
        dnsaddr: 56,
        protobuf: 80,
        cbor: 81,
        raw: 85,
        "dbl-sha2-256": 86,
        rlp: 96,
        bencode: 99,
        "dag-pb": 112,
        "dag-cbor": 113,
        "libp2p-key": 114,
        "git-raw": 120,
        "torrent-info": 123,
        "torrent-file": 124,
        "leofcoin-block": 129,
        "leofcoin-tx": 130,
        "leofcoin-pr": 131,
        sctp: 132,
        "dag-jose": 133,
        "dag-cose": 134,
        "eth-block": 144,
        "eth-block-list": 145,
        "eth-tx-trie": 146,
        "eth-tx": 147,
        "eth-tx-receipt-trie": 148,
        "eth-tx-receipt": 149,
        "eth-state-trie": 150,
        "eth-account-snapshot": 151,
        "eth-storage-trie": 152,
        "bitcoin-block": 176,
        "bitcoin-tx": 177,
        "bitcoin-witness-commitment": 178,
        "zcash-block": 192,
        "zcash-tx": 193,
        "stellar-block": 208,
        "stellar-tx": 209,
        md4: 212,
        md5: 213,
        bmt: 214,
        "decred-block": 224,
        "decred-tx": 225,
        "ipld-ns": 226,
        "ipfs-ns": 227,
        "swarm-ns": 228,
        "ipns-ns": 229,
        zeronet: 230,
        "secp256k1-pub": 231,
        "bls12_381-g1-pub": 234,
        "bls12_381-g2-pub": 235,
        "x25519-pub": 236,
        "ed25519-pub": 237,
        "dash-block": 240,
        "dash-tx": 241,
        "swarm-manifest": 250,
        "swarm-feed": 251,
        udp: 273,
        "p2p-webrtc-star": 275,
        "p2p-webrtc-direct": 276,
        "p2p-stardust": 277,
        "p2p-circuit": 290,
        "dag-json": 297,
        udt: 301,
        utp: 302,
        unix: 400,
        p2p: 421,
        ipfs: 421,
        https: 443,
        onion: 444,
        onion3: 445,
        garlic64: 446,
        garlic32: 447,
        tls: 448,
        quic: 460,
        ws: 477,
        wss: 478,
        "p2p-websocket-star": 479,
        http: 480,
        json: 512,
        messagepack: 513,
        "libp2p-peer-record": 769,
        "sha2-256-trunc254-padded": 4114,
        "ripemd-128": 4178,
        "ripemd-160": 4179,
        "ripemd-256": 4180,
        "ripemd-320": 4181,
        x11: 4352,
        "sm3-256": 21325,
        "blake2b-8": 45569,
        "blake2b-16": 45570,
        "blake2b-24": 45571,
        "blake2b-32": 45572,
        "blake2b-40": 45573,
        "blake2b-48": 45574,
        "blake2b-56": 45575,
        "blake2b-64": 45576,
        "blake2b-72": 45577,
        "blake2b-80": 45578,
        "blake2b-88": 45579,
        "blake2b-96": 45580,
        "blake2b-104": 45581,
        "blake2b-112": 45582,
        "blake2b-120": 45583,
        "blake2b-128": 45584,
        "blake2b-136": 45585,
        "blake2b-144": 45586,
        "blake2b-152": 45587,
        "blake2b-160": 45588,
        "blake2b-168": 45589,
        "blake2b-176": 45590,
        "blake2b-184": 45591,
        "blake2b-192": 45592,
        "blake2b-200": 45593,
        "blake2b-208": 45594,
        "blake2b-216": 45595,
        "blake2b-224": 45596,
        "blake2b-232": 45597,
        "blake2b-240": 45598,
        "blake2b-248": 45599,
        "blake2b-256": 45600,
        "blake2b-264": 45601,
        "blake2b-272": 45602,
        "blake2b-280": 45603,
        "blake2b-288": 45604,
        "blake2b-296": 45605,
        "blake2b-304": 45606,
        "blake2b-312": 45607,
        "blake2b-320": 45608,
        "blake2b-328": 45609,
        "blake2b-336": 45610,
        "blake2b-344": 45611,
        "blake2b-352": 45612,
        "blake2b-360": 45613,
        "blake2b-368": 45614,
        "blake2b-376": 45615,
        "blake2b-384": 45616,
        "blake2b-392": 45617,
        "blake2b-400": 45618,
        "blake2b-408": 45619,
        "blake2b-416": 45620,
        "blake2b-424": 45621,
        "blake2b-432": 45622,
        "blake2b-440": 45623,
        "blake2b-448": 45624,
        "blake2b-456": 45625,
        "blake2b-464": 45626,
        "blake2b-472": 45627,
        "blake2b-480": 45628,
        "blake2b-488": 45629,
        "blake2b-496": 45630,
        "blake2b-504": 45631,
        "blake2b-512": 45632,
        "blake2s-8": 45633,
        "blake2s-16": 45634,
        "blake2s-24": 45635,
        "blake2s-32": 45636,
        "blake2s-40": 45637,
        "blake2s-48": 45638,
        "blake2s-56": 45639,
        "blake2s-64": 45640,
        "blake2s-72": 45641,
        "blake2s-80": 45642,
        "blake2s-88": 45643,
        "blake2s-96": 45644,
        "blake2s-104": 45645,
        "blake2s-112": 45646,
        "blake2s-120": 45647,
        "blake2s-128": 45648,
        "blake2s-136": 45649,
        "blake2s-144": 45650,
        "blake2s-152": 45651,
        "blake2s-160": 45652,
        "blake2s-168": 45653,
        "blake2s-176": 45654,
        "blake2s-184": 45655,
        "blake2s-192": 45656,
        "blake2s-200": 45657,
        "blake2s-208": 45658,
        "blake2s-216": 45659,
        "blake2s-224": 45660,
        "blake2s-232": 45661,
        "blake2s-240": 45662,
        "blake2s-248": 45663,
        "blake2s-256": 45664,
        "skein256-8": 45825,
        "skein256-16": 45826,
        "skein256-24": 45827,
        "skein256-32": 45828,
        "skein256-40": 45829,
        "skein256-48": 45830,
        "skein256-56": 45831,
        "skein256-64": 45832,
        "skein256-72": 45833,
        "skein256-80": 45834,
        "skein256-88": 45835,
        "skein256-96": 45836,
        "skein256-104": 45837,
        "skein256-112": 45838,
        "skein256-120": 45839,
        "skein256-128": 45840,
        "skein256-136": 45841,
        "skein256-144": 45842,
        "skein256-152": 45843,
        "skein256-160": 45844,
        "skein256-168": 45845,
        "skein256-176": 45846,
        "skein256-184": 45847,
        "skein256-192": 45848,
        "skein256-200": 45849,
        "skein256-208": 45850,
        "skein256-216": 45851,
        "skein256-224": 45852,
        "skein256-232": 45853,
        "skein256-240": 45854,
        "skein256-248": 45855,
        "skein256-256": 45856,
        "skein512-8": 45857,
        "skein512-16": 45858,
        "skein512-24": 45859,
        "skein512-32": 45860,
        "skein512-40": 45861,
        "skein512-48": 45862,
        "skein512-56": 45863,
        "skein512-64": 45864,
        "skein512-72": 45865,
        "skein512-80": 45866,
        "skein512-88": 45867,
        "skein512-96": 45868,
        "skein512-104": 45869,
        "skein512-112": 45870,
        "skein512-120": 45871,
        "skein512-128": 45872,
        "skein512-136": 45873,
        "skein512-144": 45874,
        "skein512-152": 45875,
        "skein512-160": 45876,
        "skein512-168": 45877,
        "skein512-176": 45878,
        "skein512-184": 45879,
        "skein512-192": 45880,
        "skein512-200": 45881,
        "skein512-208": 45882,
        "skein512-216": 45883,
        "skein512-224": 45884,
        "skein512-232": 45885,
        "skein512-240": 45886,
        "skein512-248": 45887,
        "skein512-256": 45888,
        "skein512-264": 45889,
        "skein512-272": 45890,
        "skein512-280": 45891,
        "skein512-288": 45892,
        "skein512-296": 45893,
        "skein512-304": 45894,
        "skein512-312": 45895,
        "skein512-320": 45896,
        "skein512-328": 45897,
        "skein512-336": 45898,
        "skein512-344": 45899,
        "skein512-352": 45900,
        "skein512-360": 45901,
        "skein512-368": 45902,
        "skein512-376": 45903,
        "skein512-384": 45904,
        "skein512-392": 45905,
        "skein512-400": 45906,
        "skein512-408": 45907,
        "skein512-416": 45908,
        "skein512-424": 45909,
        "skein512-432": 45910,
        "skein512-440": 45911,
        "skein512-448": 45912,
        "skein512-456": 45913,
        "skein512-464": 45914,
        "skein512-472": 45915,
        "skein512-480": 45916,
        "skein512-488": 45917,
        "skein512-496": 45918,
        "skein512-504": 45919,
        "skein512-512": 45920,
        "skein1024-8": 45921,
        "skein1024-16": 45922,
        "skein1024-24": 45923,
        "skein1024-32": 45924,
        "skein1024-40": 45925,
        "skein1024-48": 45926,
        "skein1024-56": 45927,
        "skein1024-64": 45928,
        "skein1024-72": 45929,
        "skein1024-80": 45930,
        "skein1024-88": 45931,
        "skein1024-96": 45932,
        "skein1024-104": 45933,
        "skein1024-112": 45934,
        "skein1024-120": 45935,
        "skein1024-128": 45936,
        "skein1024-136": 45937,
        "skein1024-144": 45938,
        "skein1024-152": 45939,
        "skein1024-160": 45940,
        "skein1024-168": 45941,
        "skein1024-176": 45942,
        "skein1024-184": 45943,
        "skein1024-192": 45944,
        "skein1024-200": 45945,
        "skein1024-208": 45946,
        "skein1024-216": 45947,
        "skein1024-224": 45948,
        "skein1024-232": 45949,
        "skein1024-240": 45950,
        "skein1024-248": 45951,
        "skein1024-256": 45952,
        "skein1024-264": 45953,
        "skein1024-272": 45954,
        "skein1024-280": 45955,
        "skein1024-288": 45956,
        "skein1024-296": 45957,
        "skein1024-304": 45958,
        "skein1024-312": 45959,
        "skein1024-320": 45960,
        "skein1024-328": 45961,
        "skein1024-336": 45962,
        "skein1024-344": 45963,
        "skein1024-352": 45964,
        "skein1024-360": 45965,
        "skein1024-368": 45966,
        "skein1024-376": 45967,
        "skein1024-384": 45968,
        "skein1024-392": 45969,
        "skein1024-400": 45970,
        "skein1024-408": 45971,
        "skein1024-416": 45972,
        "skein1024-424": 45973,
        "skein1024-432": 45974,
        "skein1024-440": 45975,
        "skein1024-448": 45976,
        "skein1024-456": 45977,
        "skein1024-464": 45978,
        "skein1024-472": 45979,
        "skein1024-480": 45980,
        "skein1024-488": 45981,
        "skein1024-496": 45982,
        "skein1024-504": 45983,
        "skein1024-512": 45984,
        "skein1024-520": 45985,
        "skein1024-528": 45986,
        "skein1024-536": 45987,
        "skein1024-544": 45988,
        "skein1024-552": 45989,
        "skein1024-560": 45990,
        "skein1024-568": 45991,
        "skein1024-576": 45992,
        "skein1024-584": 45993,
        "skein1024-592": 45994,
        "skein1024-600": 45995,
        "skein1024-608": 45996,
        "skein1024-616": 45997,
        "skein1024-624": 45998,
        "skein1024-632": 45999,
        "skein1024-640": 46e3,
        "skein1024-648": 46001,
        "skein1024-656": 46002,
        "skein1024-664": 46003,
        "skein1024-672": 46004,
        "skein1024-680": 46005,
        "skein1024-688": 46006,
        "skein1024-696": 46007,
        "skein1024-704": 46008,
        "skein1024-712": 46009,
        "skein1024-720": 46010,
        "skein1024-728": 46011,
        "skein1024-736": 46012,
        "skein1024-744": 46013,
        "skein1024-752": 46014,
        "skein1024-760": 46015,
        "skein1024-768": 46016,
        "skein1024-776": 46017,
        "skein1024-784": 46018,
        "skein1024-792": 46019,
        "skein1024-800": 46020,
        "skein1024-808": 46021,
        "skein1024-816": 46022,
        "skein1024-824": 46023,
        "skein1024-832": 46024,
        "skein1024-840": 46025,
        "skein1024-848": 46026,
        "skein1024-856": 46027,
        "skein1024-864": 46028,
        "skein1024-872": 46029,
        "skein1024-880": 46030,
        "skein1024-888": 46031,
        "skein1024-896": 46032,
        "skein1024-904": 46033,
        "skein1024-912": 46034,
        "skein1024-920": 46035,
        "skein1024-928": 46036,
        "skein1024-936": 46037,
        "skein1024-944": 46038,
        "skein1024-952": 46039,
        "skein1024-960": 46040,
        "skein1024-968": 46041,
        "skein1024-976": 46042,
        "skein1024-984": 46043,
        "skein1024-992": 46044,
        "skein1024-1000": 46045,
        "skein1024-1008": 46046,
        "skein1024-1016": 46047,
        "skein1024-1024": 46048,
        "poseidon-bls12_381-a2-fc1": 46081,
        "poseidon-bls12_381-a2-fc1-sc": 46082,
        "zeroxcert-imprint-256": 52753,
        "fil-commitment-unsealed": 61697,
        "fil-commitment-sealed": 61698,
        "holochain-adr-v0": 8417572,
        "holochain-adr-v1": 8483108,
        "holochain-key-v0": 9728292,
        "holochain-key-v1": 9793828,
        "holochain-sig-v0": 10645796,
        "holochain-sig-v1": 10711332,
      };
    },
  });

  // node_modules/cids/node_modules/multicodec/src/int-table.js
  var require_int_table2 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/int-table.js"(
      exports,
      module
    ) {
      "use strict";
      var baseTable = require_base_table2();
      var nameTable = /* @__PURE__ */ new Map();
      for (const encodingName in baseTable) {
        const code = baseTable[encodingName];
        nameTable.set(code, encodingName);
      }
      module.exports = Object.freeze(nameTable);
    },
  });

  // node_modules/cids/node_modules/multicodec/src/util.js
  var require_util4 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/util.js"(exports, module) {
      "use strict";
      var varint = require_varint();
      var { Buffer: Buffer4 } = __require("buffer");
      module.exports = {
        numberToBuffer,
        bufferToNumber,
        varintBufferEncode,
        varintBufferDecode,
        varintEncode,
      };
      function bufferToNumber(buf) {
        return parseInt(buf.toString("hex"), 16);
      }
      function numberToBuffer(num) {
        let hexString = num.toString(16);
        if (hexString.length % 2 === 1) {
          hexString = "0" + hexString;
        }
        return Buffer4.from(hexString, "hex");
      }
      function varintBufferEncode(input) {
        return Buffer4.from(varint.encode(bufferToNumber(input)));
      }
      function varintBufferDecode(input) {
        return numberToBuffer(varint.decode(input));
      }
      function varintEncode(num) {
        return Buffer4.from(varint.encode(num));
      }
    },
  });

  // node_modules/cids/node_modules/multicodec/src/varint-table.js
  var require_varint_table2 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/varint-table.js"(
      exports,
      module
    ) {
      "use strict";
      var baseTable = require_base_table2();
      var varintEncode = require_util4().varintEncode;
      var varintTable = {};
      for (const encodingName in baseTable) {
        const code = baseTable[encodingName];
        varintTable[encodingName] = varintEncode(code);
      }
      module.exports = Object.freeze(varintTable);
    },
  });

  // node_modules/cids/node_modules/multicodec/src/constants.js
  var require_constants5 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/constants.js"(
      exports,
      module
    ) {
      "use strict";
      var table = require_base_table2();
      var constants = {};
      for (const [name2, code] of Object.entries(table)) {
        constants[name2.toUpperCase().replace(/-/g, "_")] = code;
      }
      module.exports = Object.freeze(constants);
    },
  });

  // node_modules/cids/node_modules/multicodec/src/print.js
  var require_print2 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/print.js"(exports, module) {
      "use strict";
      var table = require_base_table2();
      var tableByCode = {};
      for (const [name2, code] of Object.entries(table)) {
        if (tableByCode[code] === void 0) tableByCode[code] = name2;
      }
      module.exports = Object.freeze(tableByCode);
    },
  });

  // node_modules/cids/node_modules/multicodec/src/index.js
  var require_src7 = __commonJS({
    "node_modules/cids/node_modules/multicodec/src/index.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      var varint = require_varint();
      var intTable = require_int_table2();
      var codecNameToCodeVarint = require_varint_table2();
      var util = require_util4();
      exports = module.exports;
      exports.addPrefix = (multicodecStrOrCode, data) => {
        let prefix;
        if (Buffer4.isBuffer(multicodecStrOrCode)) {
          prefix = util.varintBufferEncode(multicodecStrOrCode);
        } else {
          if (codecNameToCodeVarint[multicodecStrOrCode]) {
            prefix = codecNameToCodeVarint[multicodecStrOrCode];
          } else {
            throw new Error("multicodec not recognized");
          }
        }
        return Buffer4.concat([prefix, data]);
      };
      exports.rmPrefix = (data) => {
        varint.decode(data);
        return data.slice(varint.decode.bytes);
      };
      exports.getCodec = (prefixedData) => {
        const code = varint.decode(prefixedData);
        const codecName = intTable.get(code);
        if (codecName === void 0) {
          throw new Error(`Code ${code} not found`);
        }
        return codecName;
      };
      exports.getName = (codec2) => {
        return intTable.get(codec2);
      };
      exports.getNumber = (name2) => {
        const code = codecNameToCodeVarint[name2];
        if (code === void 0) {
          throw new Error("Codec `" + name2 + "` not found");
        }
        return util.varintBufferDecode(code)[0];
      };
      exports.getCode = (prefixedData) => {
        return varint.decode(prefixedData);
      };
      exports.getCodeVarint = (codecName) => {
        const code = codecNameToCodeVarint[codecName];
        if (code === void 0) {
          throw new Error("Codec `" + codecName + "` not found");
        }
        return code;
      };
      exports.getVarint = (code) => {
        return varint.encode(code);
      };
      var constants = require_constants5();
      Object.assign(exports, constants);
      exports.print = require_print2();
    },
  });

  // node_modules/cids/src/cid-util.js
  var require_cid_util = __commonJS({
    "node_modules/cids/src/cid-util.js"(exports, module) {
      "use strict";
      var mh = require_src5();
      var { Buffer: Buffer4 } = __require("buffer");
      var CIDUtil = {
        checkCIDComponents: function (other) {
          if (other == null) {
            return "null values are not valid CIDs";
          }
          if (!(other.version === 0 || other.version === 1)) {
            return "Invalid version, must be a number equal to 1 or 0";
          }
          if (typeof other.codec !== "string") {
            return "codec must be string";
          }
          if (other.version === 0) {
            if (other.codec !== "dag-pb") {
              return "codec must be 'dag-pb' for CIDv0";
            }
            if (other.multibaseName !== "base58btc") {
              return "multibaseName must be 'base58btc' for CIDv0";
            }
          }
          if (!Buffer4.isBuffer(other.multihash)) {
            return "multihash must be a Buffer";
          }
          try {
            mh.validate(other.multihash);
          } catch (err) {
            let errorMsg = err.message;
            if (!errorMsg) {
              errorMsg = "Multihash validation failed";
            }
            return errorMsg;
          }
        },
      };
      module.exports = CIDUtil;
    },
  });

  // node_modules/class-is/index.js
  var require_class_is = __commonJS({
    "node_modules/class-is/index.js"(exports, module) {
      "use strict";
      function withIs(Class, { className, symbolName }) {
        const symbol = Symbol.for(symbolName);
        const ClassIsWrapper = {
          [className]: class extends Class {
            constructor(...args) {
              super(...args);
              Object.defineProperty(this, symbol, { value: true });
            }
            get [Symbol.toStringTag]() {
              return className;
            }
          },
        }[className];
        ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);
        return ClassIsWrapper;
      }
      function withIsProto(Class, { className, symbolName, withoutNew }) {
        const symbol = Symbol.for(symbolName);
        const ClassIsWrapper = {
          [className]: function (...args) {
            if (withoutNew && !(this instanceof ClassIsWrapper)) {
              return new ClassIsWrapper(...args);
            }
            const _this = Class.call(this, ...args) || this;
            if (_this && !_this[symbol]) {
              Object.defineProperty(_this, symbol, { value: true });
            }
            return _this;
          },
        }[className];
        ClassIsWrapper.prototype = Object.create(Class.prototype);
        ClassIsWrapper.prototype.constructor = ClassIsWrapper;
        Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
          get() {
            return className;
          },
        });
        ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);
        return ClassIsWrapper;
      }
      module.exports = withIs;
      module.exports.proto = withIsProto;
    },
  });

  // node_modules/cids/src/index.js
  var require_src8 = __commonJS({
    "node_modules/cids/src/index.js"(exports, module) {
      "use strict";
      var { Buffer: Buffer4 } = __require("buffer");
      var mh = require_src5();
      var multibase = require_src6();
      var multicodec = require_src7();
      var codecs = require_base_table2();
      var CIDUtil = require_cid_util();
      var withIs = require_class_is();
      var CID = class {
        constructor(version89, codec2, multihash, multibaseName) {
          if (_CID.isCID(version89)) {
            const cid = version89;
            this.version = cid.version;
            this.codec = cid.codec;
            this.multihash = Buffer4.from(cid.multihash);
            this.multibaseName =
              cid.multibaseName || (cid.version === 0 ? "base58btc" : "base32");
            return;
          }
          if (typeof version89 === "string") {
            const baseName = multibase.isEncoded(version89);
            if (baseName) {
              const cid = multibase.decode(version89);
              this.version = parseInt(cid.slice(0, 1).toString("hex"), 16);
              this.codec = multicodec.getCodec(cid.slice(1));
              this.multihash = multicodec.rmPrefix(cid.slice(1));
              this.multibaseName = baseName;
            } else {
              this.version = 0;
              this.codec = "dag-pb";
              this.multihash = mh.fromB58String(version89);
              this.multibaseName = "base58btc";
            }
            CID.validateCID(this);
            Object.defineProperty(this, "string", { value: version89 });
            return;
          }
          if (Buffer4.isBuffer(version89)) {
            const firstByte = version89.slice(0, 1);
            const v2 = parseInt(firstByte.toString("hex"), 16);
            if (v2 === 1) {
              const cid = version89;
              this.version = v2;
              this.codec = multicodec.getCodec(cid.slice(1));
              this.multihash = multicodec.rmPrefix(cid.slice(1));
              this.multibaseName = "base32";
            } else {
              this.version = 0;
              this.codec = "dag-pb";
              this.multihash = version89;
              this.multibaseName = "base58btc";
            }
            CID.validateCID(this);
            return;
          }
          this.version = version89;
          this.codec = codec2;
          this.multihash = multihash;
          this.multibaseName =
            multibaseName || (version89 === 0 ? "base58btc" : "base32");
          CID.validateCID(this);
        }
        get buffer() {
          let buffer = this._buffer;
          if (!buffer) {
            if (this.version === 0) {
              buffer = this.multihash;
            } else if (this.version === 1) {
              buffer = Buffer4.concat([
                Buffer4.from("01", "hex"),
                multicodec.getCodeVarint(this.codec),
                this.multihash,
              ]);
            } else {
              throw new Error("unsupported version");
            }
            Object.defineProperty(this, "_buffer", { value: buffer });
          }
          return buffer;
        }
        get prefix() {
          return Buffer4.concat([
            Buffer4.from(`0${this.version}`, "hex"),
            multicodec.getCodeVarint(this.codec),
            mh.prefix(this.multihash),
          ]);
        }
        toV0() {
          if (this.codec !== "dag-pb") {
            throw new Error("Cannot convert a non dag-pb CID to CIDv0");
          }
          const { name: name2, length } = mh.decode(this.multihash);
          if (name2 !== "sha2-256") {
            throw new Error(
              "Cannot convert non sha2-256 multihash CID to CIDv0"
            );
          }
          if (length !== 32) {
            throw new Error(
              "Cannot convert non 32 byte multihash CID to CIDv0"
            );
          }
          return new _CID(0, this.codec, this.multihash);
        }
        toV1() {
          return new _CID(1, this.codec, this.multihash);
        }
        toBaseEncodedString(base2 = this.multibaseName) {
          if (this.string && base2 === this.multibaseName) {
            return this.string;
          }
          let str = null;
          if (this.version === 0) {
            if (base2 !== "base58btc") {
              throw new Error(
                "not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()"
              );
            }
            str = mh.toB58String(this.multihash);
          } else if (this.version === 1) {
            str = multibase.encode(base2, this.buffer).toString();
          } else {
            throw new Error("unsupported version");
          }
          if (base2 === this.multibaseName) {
            Object.defineProperty(this, "string", { value: str });
          }
          return str;
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          return "CID(" + this.toString() + ")";
        }
        toString(base2) {
          return this.toBaseEncodedString(base2);
        }
        toJSON() {
          return {
            codec: this.codec,
            version: this.version,
            hash: this.multihash,
          };
        }
        equals(other) {
          return (
            this.codec === other.codec &&
            this.version === other.version &&
            this.multihash.equals(other.multihash)
          );
        }
        static validateCID(other) {
          const errorMsg = CIDUtil.checkCIDComponents(other);
          if (errorMsg) {
            throw new Error(errorMsg);
          }
        }
      };
      var _CID = withIs(CID, {
        className: "CID",
        symbolName: "@ipld/js-cid/CID",
      });
      _CID.codecs = codecs;
      module.exports = _CID;
    },
  });

  // node_modules/content-hash/src/profiles.js
  var require_profiles = __commonJS({
    "node_modules/content-hash/src/profiles.js"(exports) {
      var CID = require_src8();
      var multiH = require_src5();
      var hexStringToBuffer = (hex) => {
        let prefix = hex.slice(0, 2);
        let value = hex.slice(2);
        let res = "";
        if (prefix === "0x") res = value;
        else res = hex;
        return multiH.fromHexString(res);
      };
      var encodes = {
        swarm: (value) => {
          const multihash = multiH.encode(
            hexStringToBuffer(value),
            "keccak-256"
          );
          return new CID(1, "swarm-manifest", multihash).buffer;
        },
        ipfs: (value) => {
          const multihash = multiH.fromB58String(value);
          return new CID(1, "dag-pb", multihash).buffer;
        },
        utf8: (value) => {
          return Buffer.from(value, "utf8");
        },
      };
      var decodes = {
        hexMultiHash: (value) => {
          const cid = new CID(value);
          return multiH.decode(cid.multihash).digest.toString("hex");
        },
        b58MultiHash: (value) => {
          const cid = new CID(value);
          return multiH.toB58String(cid.multihash);
        },
        utf8: (value) => {
          return value.toString("utf8");
        },
      };
      var profiles = {
        "swarm-ns": {
          encode: encodes.swarm,
          decode: decodes.hexMultiHash,
        },
        "ipfs-ns": {
          encode: encodes.ipfs,
          decode: decodes.b58MultiHash,
        },
        "ipns-ns": {
          encode: encodes.ipfs,
          decode: decodes.b58MultiHash,
        },
        default: {
          encode: encodes.utf8,
          decode: decodes.utf8,
        },
      };
      exports.hexStringToBuffer = hexStringToBuffer;
      exports.profiles = profiles;
    },
  });

  // node_modules/content-hash/src/helpers.js
  var require_helpers = __commonJS({
    "node_modules/content-hash/src/helpers.js"(exports) {
      var CID = require_src8();
      var cidV0ToV1Base32 = (ipfsHash) => {
        let cid = new CID(ipfsHash);
        if (cid.version === 0) {
          cid = cid.toV1();
        }
        return cid.toString("base32");
      };
      exports.cidV0ToV1Base32 = cidV0ToV1Base32;
    },
  });

  // node_modules/content-hash/src/index.js
  var require_src9 = __commonJS({
    "node_modules/content-hash/src/index.js"(exports, module) {
      var multiC = require_src2();
      var { hexStringToBuffer, profiles } = require_profiles();
      var { cidV0ToV1Base32 } = require_helpers();
      module.exports = {
        helpers: {
          cidV0ToV1Base32,
        },
        decode: function (contentHash) {
          const buffer = hexStringToBuffer(contentHash);
          const codec2 = multiC.getCodec(buffer);
          const value = multiC.rmPrefix(buffer);
          let profile = profiles[codec2];
          if (!profile) profile = profiles["default"];
          return profile.decode(value);
        },
        fromIpfs: function (ipfsHash) {
          return this.encode("ipfs-ns", ipfsHash);
        },
        fromSwarm: function (swarmHash) {
          return this.encode("swarm-ns", swarmHash);
        },
        encode: function (codec2, value) {
          let profile = profiles[codec2];
          if (!profile) profile = profiles["default"];
          const encodedValue = profile.encode(value);
          return multiC.addPrefix(codec2, encodedValue).toString("hex");
        },
        getCodec: function (hash4) {
          let buffer = hexStringToBuffer(hash4);
          return multiC.getCodec(buffer);
        },
      };
    },
  });

  // node_modules/bs58/index.js
  var require_bs58 = __commonJS({
    "node_modules/bs58/index.js"(exports, module) {
      var basex = require_src3();
      var ALPHABET =
        "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    },
  });

  // node_modules/@lumeweb/ensjs/dist/utils/contents.js
  var require_contents = __commonJS({
    "node_modules/@lumeweb/ensjs/dist/utils/contents.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      exports.decodeContenthash = decodeContenthash;
      exports.encodeContenthash = encodeContenthash;
      exports.isValidContenthash = isValidContenthash;
      exports.validateContent = validateContent;
      var _contentHash = _interopRequireDefault(require_src9());
      var _ethers = (init_lib93(), __toCommonJS(lib_exports5));
      var _bs = _interopRequireDefault(require_bs58());
      var supportedCodecs = [
        "ipns-ns",
        "ipfs-ns",
        "swarm-ns",
        "onion",
        "onion3",
      ];
      var utils = _ethers.ethers.utils;
      function decodeContenthash(encoded) {
        var decoded, protocolType, error;
        if (encoded.error) {
          return {
            protocolType: null,
            decoded: encoded.error,
          };
        }
        if (encoded) {
          try {
            decoded = _contentHash["default"].decode(encoded);
            var codec2 = _contentHash["default"].getCodec(encoded);
            if (codec2 === "ipfs-ns") {
              protocolType = "ipfs";
            } else if (codec2 === "ipns-ns") {
              protocolType = "ipns";
            } else if (codec2 === "swarm-ns") {
              protocolType = "bzz";
            } else if (codec2 === "onion") {
              protocolType = "onion";
            } else if (codec2 === "onion3") {
              protocolType = "onion3";
            } else {
              decoded = encoded;
            }
          } catch (e) {
            error = e.message;
          }
        }
        return {
          protocolType,
          decoded,
          error,
        };
      }
      function validateContent(encoded) {
        return (
          _contentHash["default"].isHashOfType(
            encoded,
            _contentHash["default"].Types.ipfs
          ) ||
          _contentHash["default"].isHashOfType(
            encoded,
            _contentHash["default"].Types.swarm
          )
        );
      }
      function isValidContenthash(encoded) {
        try {
          var codec2 = _contentHash["default"].getCodec(encoded);
          return utils.isHexString(encoded) && supportedCodecs.includes(codec2);
        } catch (e) {
          console.log(e);
        }
      }
      function encodeContenthash(text) {
        var content, contentType;
        var encoded = false;
        if (!!text) {
          var matched =
            text.match(/^(ipfs|ipns|bzz|onion|onion3):\/\/(.*)/) ||
            text.match(/\/(ipfs)\/(.*)/) ||
            text.match(/\/(ipns)\/(.*)/);
          if (matched) {
            contentType = matched[1];
            content = matched[2];
          }
          try {
            if (contentType === "ipfs") {
              if (content.length >= 4) {
                encoded =
                  "0x" + _contentHash["default"].encode("ipfs-ns", content);
              }
            } else if (contentType === "ipns") {
              var bs58content = _bs["default"].encode(
                Buffer.concat([
                  Buffer.from([0, content.length]),
                  Buffer.from(content),
                ])
              );
              encoded =
                "0x" + _contentHash["default"].encode("ipns-ns", bs58content);
            } else if (contentType === "bzz") {
              if (content.length >= 4) {
                encoded = "0x" + _contentHash["default"].fromSwarm(content);
              }
            } else if (contentType === "onion") {
              if (content.length == 16) {
                encoded =
                  "0x" + _contentHash["default"].encode("onion", content);
              }
            } else if (contentType === "onion3") {
              if (content.length == 56) {
                encoded =
                  "0x" + _contentHash["default"].encode("onion3", content);
              }
            } else {
              console.warn("Unsupported protocol or invalid value", {
                contentType,
                text,
              });
            }
          } catch (err) {
            console.warn("Error encoding content hash", {
              text,
              encoded,
            });
          }
        }
        return encoded;
      }
    },
  });

  // node_modules/@lumeweb/ensjs/dist/utils/namehash.js
  var require_namehash = __commonJS({
    "node_modules/@lumeweb/ensjs/dist/utils/namehash.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      exports.namehash = namehash2;
      var _labelhash = require_labelhash();
      var _ethEnsNamehash = require_eth_ens_namehash();
      var sha32 = require_sha3().keccak_256;
      function namehash2(inputName) {
        var node = "";
        for (var i = 0; i < 32; i++) {
          node += "00";
        }
        if (inputName) {
          var labels = inputName.split(".");
          for (var _i = labels.length - 1; _i >= 0; _i--) {
            var labelSha = void 0;
            if ((0, _labelhash.isEncodedLabelhash)(labels[_i])) {
              labelSha = (0, _labelhash.decodeLabelhash)(labels[_i]);
            } else {
              var normalisedLabel = (0, _ethEnsNamehash.normalize)(labels[_i]);
              labelSha = sha32(normalisedLabel);
            }
            node = sha32(new Buffer(node + labelSha, "hex"));
          }
        }
        return "0x" + node;
      }
    },
  });

  // node_modules/@lumeweb/ensjs/dist/utils/index.js
  var require_utils4 = __commonJS({
    "node_modules/@lumeweb/ensjs/dist/utils/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      exports.checkLabels = void 0;
      Object.defineProperty(exports, "decodeContenthash", {
        enumerable: true,
        get: function get() {
          return _contents.decodeContenthash;
        },
      });
      Object.defineProperty(exports, "decodeLabelhash", {
        enumerable: true,
        get: function get() {
          return _labelhash.decodeLabelhash;
        },
      });
      exports.emptyAddress = void 0;
      Object.defineProperty(exports, "encodeContenthash", {
        enumerable: true,
        get: function get() {
          return _contents.encodeContenthash;
        },
      });
      Object.defineProperty(exports, "encodeLabelhash", {
        enumerable: true,
        get: function get() {
          return _labelhash.encodeLabelhash;
        },
      });
      exports.getEnsStartBlock = getEnsStartBlock;
      Object.defineProperty(exports, "isDecrypted", {
        enumerable: true,
        get: function get() {
          return _labelhash.isDecrypted;
        },
      });
      Object.defineProperty(exports, "isEncodedLabelhash", {
        enumerable: true,
        get: function get() {
          return _labelhash.isEncodedLabelhash;
        },
      });
      exports.isLabelValid = isLabelValid;
      Object.defineProperty(exports, "isValidContenthash", {
        enumerable: true,
        get: function get() {
          return _contents.isValidContenthash;
        },
      });
      Object.defineProperty(exports, "labelhash", {
        enumerable: true,
        get: function get() {
          return _labelhash.labelhash;
        },
      });
      exports.mergeLabels = void 0;
      Object.defineProperty(exports, "namehash", {
        enumerable: true,
        get: function get() {
          return _namehash.namehash;
        },
      });
      exports.uniq = exports.parseSearchTerm = void 0;
      exports.validateName = validateName;
      var _ethers = (init_lib93(), __toCommonJS(lib_exports5));
      var _labelhash = require_labelhash();
      var _contents = require_contents();
      var _ethEnsNamehash = require_eth_ens_namehash();
      var _namehash = require_namehash();
      var uniq = function uniq2(a2, param) {
        return a2.filter(function (item, pos) {
          return (
            a2
              .map(function (mapItem) {
                return mapItem[param];
              })
              .indexOf(item[param]) === pos
          );
        });
      };
      exports.uniq = uniq;
      var checkLabels = function checkLabels2() {
        for (
          var _len = arguments.length, labelHashes = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          labelHashes[_key] = arguments[_key];
        }
        return labelHashes.map(function (hash4) {
          return null;
        });
      };
      exports.checkLabels = checkLabels;
      function getEnsStartBlock(networkId) {
        switch (networkId) {
          case 1:
          case "1":
            return 3327417;
          case 3:
          case "3":
            return 25409;
          default:
            return 0;
        }
      }
      var mergeLabels = function mergeLabels2(labels1, labels2) {
        return labels1.map(function (label, index) {
          return label ? label : labels2[index];
        });
      };
      exports.mergeLabels = mergeLabels;
      function validateName(name2) {
        var nameArray = name2.split(".");
        var hasEmptyLabels =
          nameArray.filter(function (e) {
            return e.length < 1;
          }).length > 0;
        if (hasEmptyLabels) throw new Error("Domain cannot have empty labels");
        var normalizedArray = nameArray.map(function (label) {
          return (0, _labelhash.isEncodedLabelhash)(label)
            ? label
            : (0, _ethEnsNamehash.normalize)(label);
        });
        try {
          return normalizedArray.join(".");
        } catch (e) {
          throw e;
        }
      }
      function isLabelValid(name2) {
        try {
          validateName(name2);
          if (name2.indexOf(".") === -1) {
            return true;
          }
        } catch (e) {
          console.log(e);
          return false;
        }
      }
      var parseSearchTerm = function parseSearchTerm2(term, validTld) {
        var regex = /[^.]+$/;
        try {
          validateName(term);
        } catch (e) {
          return "invalid";
        }
        if (term.indexOf(".") !== -1) {
          var termArray = term.split(".");
          var tld = term.match(regex) ? term.match(regex)[0] : "";
          if (validTld) {
            if (tld === "eth" && termArray[termArray.length - 2].length < 3) {
              return "short";
            }
            return "supported";
          }
          return "unsupported";
        } else if (_ethers.ethers.utils.isAddress(term)) {
          return "address";
        } else {
          if (validTld) {
            return "tld";
          }
          return "search";
        }
      };
      exports.parseSearchTerm = parseSearchTerm;
      var emptyAddress = "0x0000000000000000000000000000000000000000";
      exports.emptyAddress = emptyAddress;
    },
  });

  // node_modules/@lumeweb/ensjs/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@lumeweb/ensjs/dist/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      exports["default"] = void 0;
      exports.getENSContract = getENSContract;
      exports.getEnsAddress = getEnsAddress2;
      exports.getResolverContract = getResolverContract;
      Object.defineProperty(exports, "labelhash", {
        enumerable: true,
        get: function get() {
          return _utils.labelhash;
        },
      });
      Object.defineProperty(exports, "namehash", {
        enumerable: true,
        get: function get() {
          return _utils.namehash;
        },
      });
      var _regenerator = _interopRequireDefault(require_regenerator());
      var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
      var _classCallCheck22 = _interopRequireDefault(require_classCallCheck());
      var _createClass22 = _interopRequireDefault(require_createClass());
      var _asyncToGenerator2 = _interopRequireDefault(
        require_asyncToGenerator()
      );
      var _ethers = (init_lib93(), __toCommonJS(lib_exports5));
      var _addressEncoder =
        (init_index_module(), __toCommonJS(index_module_exports));
      var _ENS = require_ENS();
      var _Resolver5 = require_Resolver();
      var _ReverseRegistrar = require_ReverseRegistrar();
      var _utils = require_utils4();
      var _contents = require_contents();
      var Provider2 = _ethers.ethers.providers.Provider;
      var utils = _ethers.ethers.utils;
      function getEnsAddress2(networkId) {
        if ([1, 3, 4, 5].includes(parseInt(networkId))) {
          return "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
        }
      }
      function getResolverContract(_ref) {
        var address = _ref.address,
          provider = _ref.provider;
        return new _ethers.ethers.Contract(address, _Resolver5.abi, provider);
      }
      function getENSContract(_ref2) {
        var address = _ref2.address,
          provider = _ref2.provider;
        return new _ethers.ethers.Contract(address, _ENS.abi, provider);
      }
      function getReverseRegistrarContract(_ref3) {
        var address = _ref3.address,
          provider = _ref3.provider;
        return new _ethers.ethers.Contract(
          address,
          _ReverseRegistrar.abi,
          provider
        );
      }
      function getAddrWithResolver(_x) {
        return _getAddrWithResolver.apply(this, arguments);
      }
      function _getAddrWithResolver() {
        _getAddrWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee20(
            _ref4
          ) {
            var name2,
              key2,
              resolverAddr,
              provider,
              nh,
              _Resolver2,
              _formatsByName$key,
              coinType,
              encoder,
              addr;
            return _regenerator["default"].wrap(
              function _callee20$(_context20) {
                while (1) {
                  switch ((_context20.prev = _context20.next)) {
                    case 0:
                      (name2 = _ref4.name),
                        (key2 = _ref4.key),
                        (resolverAddr = _ref4.resolverAddr),
                        (provider = _ref4.provider);
                      nh = (0, _utils.namehash)(name2);
                      _context20.prev = 2;
                      _Resolver2 = getResolverContract({
                        address: resolverAddr,
                        provider,
                      });
                      (_formatsByName$key =
                        _addressEncoder.formatsByName[key2]),
                        (coinType = _formatsByName$key.coinType),
                        (encoder = _formatsByName$key.encoder);
                      _context20.next = 7;
                      return _Resolver2["addr(bytes32,uint256)"](nh, coinType);
                    case 7:
                      addr = _context20.sent;
                      if (!(addr === "0x")) {
                        _context20.next = 10;
                        break;
                      }
                      return _context20.abrupt("return", _utils.emptyAddress);
                    case 10:
                      return _context20.abrupt(
                        "return",
                        encoder(Buffer.from(addr.slice(2), "hex"))
                      );
                    case 13:
                      _context20.prev = 13;
                      _context20.t0 = _context20["catch"](2);
                      console.log(_context20.t0);
                      console.warn(
                        "Error getting addr on the resolver contract, are you sure the resolver address is a resolver contract?"
                      );
                      return _context20.abrupt("return", _utils.emptyAddress);
                    case 18:
                    case "end":
                      return _context20.stop();
                  }
                }
              },
              _callee20,
              null,
              [[2, 13]]
            );
          })
        );
        return _getAddrWithResolver.apply(this, arguments);
      }
      function setAddrWithResolver(_x2) {
        return _setAddrWithResolver.apply(this, arguments);
      }
      function _setAddrWithResolver() {
        _setAddrWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee21(
            _ref5
          ) {
            var name2,
              key2,
              address,
              resolverAddr,
              signer,
              nh,
              Resolver4,
              _formatsByName$key2,
              decoder,
              coinType,
              addressAsBytes;
            return _regenerator["default"].wrap(function _callee21$(
              _context21
            ) {
              while (1) {
                switch ((_context21.prev = _context21.next)) {
                  case 0:
                    (name2 = _ref5.name),
                      (key2 = _ref5.key),
                      (address = _ref5.address),
                      (resolverAddr = _ref5.resolverAddr),
                      (signer = _ref5.signer);
                    nh = (0, _utils.namehash)(name2);
                    Resolver4 = getResolverContract({
                      address: resolverAddr,
                      provider: signer,
                    });
                    (_formatsByName$key2 = _addressEncoder.formatsByName[key2]),
                      (decoder = _formatsByName$key2.decoder),
                      (coinType = _formatsByName$key2.coinType);
                    if (!address || address === "") {
                      addressAsBytes = Buffer.from("");
                    } else {
                      addressAsBytes = decoder(address);
                    }
                    return _context21.abrupt(
                      "return",
                      Resolver4["setAddr(bytes32,uint256,bytes)"](
                        nh,
                        coinType,
                        addressAsBytes
                      )
                    );
                  case 6:
                  case "end":
                    return _context21.stop();
                }
              }
            },
            _callee21);
          })
        );
        return _setAddrWithResolver.apply(this, arguments);
      }
      function getContentWithResolver(_x3) {
        return _getContentWithResolver.apply(this, arguments);
      }
      function _getContentWithResolver() {
        _getContentWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee22(
            _ref6
          ) {
            var name2,
              resolverAddr,
              provider,
              nh,
              _Resolver3,
              contentHashSignature,
              isContentHashSupported,
              _decodeContenthash,
              protocolType,
              decoded,
              error,
              value,
              message;
            return _regenerator["default"].wrap(
              function _callee22$(_context22) {
                while (1) {
                  switch ((_context22.prev = _context22.next)) {
                    case 0:
                      (name2 = _ref6.name),
                        (resolverAddr = _ref6.resolverAddr),
                        (provider = _ref6.provider);
                      nh = (0, _utils.namehash)(name2);
                      if (!(parseInt(resolverAddr, 16) === 0)) {
                        _context22.next = 4;
                        break;
                      }
                      return _context22.abrupt("return", _utils.emptyAddress);
                    case 4:
                      _context22.prev = 4;
                      _Resolver3 = getResolverContract({
                        address: resolverAddr,
                        provider,
                      });
                      contentHashSignature = utils
                        .solidityKeccak256(["string"], ["contenthash(bytes32)"])
                        .slice(0, 10);
                      _context22.next = 9;
                      return _Resolver3.supportsInterface(contentHashSignature);
                    case 9:
                      isContentHashSupported = _context22.sent;
                      if (!isContentHashSupported) {
                        _context22.next = 25;
                        break;
                      }
                      _context22.t0 = _contents.decodeContenthash;
                      _context22.next = 14;
                      return _Resolver3.contenthash(nh);
                    case 14:
                      _context22.t1 = _context22.sent;
                      _decodeContenthash = (0, _context22.t0)(_context22.t1);
                      protocolType = _decodeContenthash.protocolType;
                      decoded = _decodeContenthash.decoded;
                      error = _decodeContenthash.error;
                      if (!error) {
                        _context22.next = 22;
                        break;
                      }
                      console.log("error decoding", error);
                      return _context22.abrupt("return", {
                        value: _utils.emptyAddress,
                        contentType: "contenthash",
                      });
                    case 22:
                      return _context22.abrupt("return", {
                        value: "".concat(protocolType, "://").concat(decoded),
                        contentType: "contenthash",
                      });
                    case 25:
                      _context22.next = 27;
                      return _Resolver3.content(nh);
                    case 27:
                      value = _context22.sent;
                      return _context22.abrupt("return", {
                        value,
                        contentType: "oldcontent",
                      });
                    case 29:
                      _context22.next = 36;
                      break;
                    case 31:
                      _context22.prev = 31;
                      _context22.t2 = _context22["catch"](4);
                      message =
                        "Error getting content on the resolver contract, are you sure the resolver address is a resolver contract?";
                      console.warn(message, _context22.t2);
                      return _context22.abrupt("return", {
                        value: message,
                        contentType: "error",
                      });
                    case 36:
                    case "end":
                      return _context22.stop();
                  }
                }
              },
              _callee22,
              null,
              [[4, 31]]
            );
          })
        );
        return _getContentWithResolver.apply(this, arguments);
      }
      function setContenthashWithResolver(_x4) {
        return _setContenthashWithResolver.apply(this, arguments);
      }
      function _setContenthashWithResolver() {
        _setContenthashWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee23(
            _ref7
          ) {
            var name2,
              content,
              resolverAddr,
              signer,
              encodedContenthash,
              Resolver4;
            return _regenerator["default"].wrap(function _callee23$(
              _context23
            ) {
              while (1) {
                switch ((_context23.prev = _context23.next)) {
                  case 0:
                    (name2 = _ref7.name),
                      (content = _ref7.content),
                      (resolverAddr = _ref7.resolverAddr),
                      (signer = _ref7.signer);
                    encodedContenthash = content;
                    if (parseInt(content, 16) !== 0) {
                      encodedContenthash = (0, _contents.encodeContenthash)(
                        content
                      );
                    }
                    Resolver4 = getResolverContract({
                      address: resolverAddr,
                      provider: signer,
                    });
                    return _context23.abrupt(
                      "return",
                      Resolver4.setContenthash(
                        (0, _utils.namehash)(name2),
                        encodedContenthash
                      )
                    );
                  case 5:
                  case "end":
                    return _context23.stop();
                }
              }
            },
            _callee23);
          })
        );
        return _setContenthashWithResolver.apply(this, arguments);
      }
      function getTextWithResolver(_x5) {
        return _getTextWithResolver.apply(this, arguments);
      }
      function _getTextWithResolver() {
        _getTextWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee24(
            _ref8
          ) {
            var name2, key2, resolverAddr, provider, nh, _Resolver4, addr;
            return _regenerator["default"].wrap(
              function _callee24$(_context24) {
                while (1) {
                  switch ((_context24.prev = _context24.next)) {
                    case 0:
                      (name2 = _ref8.name),
                        (key2 = _ref8.key),
                        (resolverAddr = _ref8.resolverAddr),
                        (provider = _ref8.provider);
                      nh = (0, _utils.namehash)(name2);
                      if (!(parseInt(resolverAddr, 16) === 0)) {
                        _context24.next = 4;
                        break;
                      }
                      return _context24.abrupt("return", "");
                    case 4:
                      _context24.prev = 4;
                      _Resolver4 = getResolverContract({
                        address: resolverAddr,
                        provider,
                      });
                      _context24.next = 8;
                      return _Resolver4.text(nh, key2);
                    case 8:
                      addr = _context24.sent;
                      return _context24.abrupt("return", addr);
                    case 12:
                      _context24.prev = 12;
                      _context24.t0 = _context24["catch"](4);
                      console.warn(
                        "Error getting text record on the resolver contract, are you sure the resolver address is a resolver contract?"
                      );
                      return _context24.abrupt("return", "");
                    case 16:
                    case "end":
                      return _context24.stop();
                  }
                }
              },
              _callee24,
              null,
              [[4, 12]]
            );
          })
        );
        return _getTextWithResolver.apply(this, arguments);
      }
      function setTextWithResolver(_x6) {
        return _setTextWithResolver.apply(this, arguments);
      }
      function _setTextWithResolver() {
        _setTextWithResolver = (0, _asyncToGenerator2["default"])(
          /* @__PURE__ */ _regenerator["default"].mark(function _callee25(
            _ref9
          ) {
            var name2, key2, recordValue, resolverAddr, signer, nh;
            return _regenerator["default"].wrap(function _callee25$(
              _context25
            ) {
              while (1) {
                switch ((_context25.prev = _context25.next)) {
                  case 0:
                    (name2 = _ref9.name),
                      (key2 = _ref9.key),
                      (recordValue = _ref9.recordValue),
                      (resolverAddr = _ref9.resolverAddr),
                      (signer = _ref9.signer);
                    nh = (0, _utils.namehash)(name2);
                    return _context25.abrupt(
                      "return",
                      getResolverContract({
                        address: resolverAddr,
                        provider: signer,
                      }).setText(nh, key2, recordValue)
                    );
                  case 3:
                  case "end":
                    return _context25.stop();
                }
              }
            },
            _callee25);
          })
        );
        return _setTextWithResolver.apply(this, arguments);
      }
      var Resolver3 = /* @__PURE__ */ (function () {
        function Resolver4(_ref10) {
          var address = _ref10.address,
            ens = _ref10.ens;
          (0, _classCallCheck22["default"])(this, Resolver4);
          this.address = address;
          this.ens = ens;
        }
        (0, _createClass22["default"])(Resolver4, [
          {
            key: "name",
            value: function name2(_name) {
              return new Name({
                name: _name,
                ens: this.ens,
                provider: this.provider,
                signer: this.signer,
                resolver: this.address,
              });
            },
          },
        ]);
        return Resolver4;
      })();
      var Name = /* @__PURE__ */ (function () {
        function Name2(options) {
          (0, _classCallCheck22["default"])(this, Name2);
          var name2 = options.name,
            ens = options.ens,
            provider = options.provider,
            signer = options.signer,
            nh = options.namehash,
            resolver2 = options.resolver;
          if (options.namehash) {
            this.namehash = nh;
          }
          this.ens = ens;
          this.ensWithSigner = this.ens.connect(signer);
          this.name = name2;
          this.namehash = (0, _utils.namehash)(name2);
          this.provider = provider;
          this.signer = signer;
          this.resolver = resolver2;
        }
        (0, _createClass22["default"])(Name2, [
          {
            key: "getOwner",
            value: (function () {
              var _getOwner = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(
                  function _callee() {
                    return _regenerator["default"].wrap(
                      function _callee$(_context) {
                        while (1) {
                          switch ((_context.prev = _context.next)) {
                            case 0:
                              return _context.abrupt(
                                "return",
                                this.ens.owner(this.namehash)
                              );
                            case 1:
                            case "end":
                              return _context.stop();
                          }
                        }
                      },
                      _callee,
                      this
                    );
                  }
                )
              );
              function getOwner() {
                return _getOwner.apply(this, arguments);
              }
              return getOwner;
            })(),
          },
          {
            key: "setOwner",
            value: (function () {
              var _setOwner = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee2(
                  address
                ) {
                  return _regenerator["default"].wrap(
                    function _callee2$(_context2) {
                      while (1) {
                        switch ((_context2.prev = _context2.next)) {
                          case 0:
                            if (address) {
                              _context2.next = 2;
                              break;
                            }
                            throw new Error("No newOwner address provided!");
                          case 2:
                            return _context2.abrupt(
                              "return",
                              this.ensWithSigner.setOwner(
                                this.namehash,
                                address
                              )
                            );
                          case 3:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    },
                    _callee2,
                    this
                  );
                })
              );
              function setOwner(_x7) {
                return _setOwner.apply(this, arguments);
              }
              return setOwner;
            })(),
          },
          {
            key: "getResolver",
            value: (function () {
              var _getResolver = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(
                  function _callee3() {
                    return _regenerator["default"].wrap(
                      function _callee3$(_context3) {
                        while (1) {
                          switch ((_context3.prev = _context3.next)) {
                            case 0:
                              return _context3.abrupt(
                                "return",
                                this.ens.resolver(this.namehash)
                              );
                            case 1:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      },
                      _callee3,
                      this
                    );
                  }
                )
              );
              function getResolver() {
                return _getResolver.apply(this, arguments);
              }
              return getResolver;
            })(),
          },
          {
            key: "setResolver",
            value: (function () {
              var _setResolver = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee4(
                  address
                ) {
                  return _regenerator["default"].wrap(
                    function _callee4$(_context4) {
                      while (1) {
                        switch ((_context4.prev = _context4.next)) {
                          case 0:
                            if (address) {
                              _context4.next = 2;
                              break;
                            }
                            throw new Error("No resolver address provided!");
                          case 2:
                            return _context4.abrupt(
                              "return",
                              this.ensWithSigner.setResolver(
                                this.namehash,
                                address
                              )
                            );
                          case 3:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    },
                    _callee4,
                    this
                  );
                })
              );
              function setResolver(_x8) {
                return _setResolver.apply(this, arguments);
              }
              return setResolver;
            })(),
          },
          {
            key: "getTTL",
            value: (function () {
              var _getTTL = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(
                  function _callee5() {
                    return _regenerator["default"].wrap(
                      function _callee5$(_context5) {
                        while (1) {
                          switch ((_context5.prev = _context5.next)) {
                            case 0:
                              return _context5.abrupt(
                                "return",
                                this.ens.ttl(this.namehash)
                              );
                            case 1:
                            case "end":
                              return _context5.stop();
                          }
                        }
                      },
                      _callee5,
                      this
                    );
                  }
                )
              );
              function getTTL() {
                return _getTTL.apply(this, arguments);
              }
              return getTTL;
            })(),
          },
          {
            key: "getResolverAddr",
            value: (function () {
              var _getResolverAddr = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(
                  function _callee6() {
                    return _regenerator["default"].wrap(
                      function _callee6$(_context6) {
                        while (1) {
                          switch ((_context6.prev = _context6.next)) {
                            case 0:
                              if (!this.resolver) {
                                _context6.next = 4;
                                break;
                              }
                              return _context6.abrupt("return", this.resolver);
                            case 4:
                              return _context6.abrupt(
                                "return",
                                this.getResolver()
                              );
                            case 5:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      },
                      _callee6,
                      this
                    );
                  }
                )
              );
              function getResolverAddr() {
                return _getResolverAddr.apply(this, arguments);
              }
              return getResolverAddr;
            })(),
          },
          {
            key: "getAddress",
            value: (function () {
              var _getAddress = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee7(
                  coinId
                ) {
                  var resolverAddr, Resolver4;
                  return _regenerator["default"].wrap(
                    function _callee7$(_context7) {
                      while (1) {
                        switch ((_context7.prev = _context7.next)) {
                          case 0:
                            _context7.next = 2;
                            return this.getResolverAddr();
                          case 2:
                            resolverAddr = _context7.sent;
                            if (!(parseInt(resolverAddr, 16) === 0)) {
                              _context7.next = 5;
                              break;
                            }
                            return _context7.abrupt(
                              "return",
                              _utils.emptyAddress
                            );
                          case 5:
                            Resolver4 = getResolverContract({
                              address: resolverAddr,
                              provider: this.provider,
                            });
                            if (coinId) {
                              _context7.next = 8;
                              break;
                            }
                            return _context7.abrupt(
                              "return",
                              Resolver4["addr(bytes32)"](this.namehash)
                            );
                          case 8:
                            return _context7.abrupt(
                              "return",
                              getAddrWithResolver({
                                name: this.name,
                                key: coinId,
                                resolverAddr,
                                provider: this.provider,
                              })
                            );
                          case 9:
                          case "end":
                            return _context7.stop();
                        }
                      }
                    },
                    _callee7,
                    this
                  );
                })
              );
              function getAddress2(_x9) {
                return _getAddress.apply(this, arguments);
              }
              return getAddress2;
            })(),
          },
          {
            key: "setAddress",
            value: (function () {
              var _setAddress = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee8(
                  key2,
                  address
                ) {
                  var resolverAddr;
                  return _regenerator["default"].wrap(
                    function _callee8$(_context8) {
                      while (1) {
                        switch ((_context8.prev = _context8.next)) {
                          case 0:
                            if (key2) {
                              _context8.next = 2;
                              break;
                            }
                            throw new Error("No coinId provided");
                          case 2:
                            if (address) {
                              _context8.next = 4;
                              break;
                            }
                            throw new Error("No address provided");
                          case 4:
                            _context8.next = 6;
                            return this.getResolverAddr();
                          case 6:
                            resolverAddr = _context8.sent;
                            return _context8.abrupt(
                              "return",
                              setAddrWithResolver({
                                name: this.name,
                                key: key2,
                                address,
                                resolverAddr,
                                signer: this.signer,
                              })
                            );
                          case 8:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    },
                    _callee8,
                    this
                  );
                })
              );
              function setAddress(_x10, _x11) {
                return _setAddress.apply(this, arguments);
              }
              return setAddress;
            })(),
          },
          {
            key: "getContent",
            value: (function () {
              var _getContent = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(
                  function _callee9() {
                    var resolverAddr;
                    return _regenerator["default"].wrap(
                      function _callee9$(_context9) {
                        while (1) {
                          switch ((_context9.prev = _context9.next)) {
                            case 0:
                              _context9.next = 2;
                              return this.getResolverAddr();
                            case 2:
                              resolverAddr = _context9.sent;
                              return _context9.abrupt(
                                "return",
                                getContentWithResolver({
                                  name: this.name,
                                  resolverAddr,
                                  provider: this.provider,
                                })
                              );
                            case 4:
                            case "end":
                              return _context9.stop();
                          }
                        }
                      },
                      _callee9,
                      this
                    );
                  }
                )
              );
              function getContent() {
                return _getContent.apply(this, arguments);
              }
              return getContent;
            })(),
          },
          {
            key: "setContenthash",
            value: (function () {
              var _setContenthash = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee10(
                  content
                ) {
                  var resolverAddr;
                  return _regenerator["default"].wrap(
                    function _callee10$(_context10) {
                      while (1) {
                        switch ((_context10.prev = _context10.next)) {
                          case 0:
                            _context10.next = 2;
                            return this.getResolverAddr();
                          case 2:
                            resolverAddr = _context10.sent;
                            console.log(content);
                            return _context10.abrupt(
                              "return",
                              setContenthashWithResolver({
                                name: this.name,
                                content,
                                resolverAddr,
                                signer: this.signer,
                              })
                            );
                          case 5:
                          case "end":
                            return _context10.stop();
                        }
                      }
                    },
                    _callee10,
                    this
                  );
                })
              );
              function setContenthash(_x12) {
                return _setContenthash.apply(this, arguments);
              }
              return setContenthash;
            })(),
          },
          {
            key: "getText",
            value: (function () {
              var _getText = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee11(
                  key2
                ) {
                  var resolverAddr;
                  return _regenerator["default"].wrap(
                    function _callee11$(_context11) {
                      while (1) {
                        switch ((_context11.prev = _context11.next)) {
                          case 0:
                            _context11.next = 2;
                            return this.getResolverAddr();
                          case 2:
                            resolverAddr = _context11.sent;
                            return _context11.abrupt(
                              "return",
                              getTextWithResolver({
                                name: this.name,
                                key: key2,
                                resolverAddr,
                                provider: this.provider,
                              })
                            );
                          case 4:
                          case "end":
                            return _context11.stop();
                        }
                      }
                    },
                    _callee11,
                    this
                  );
                })
              );
              function getText(_x13) {
                return _getText.apply(this, arguments);
              }
              return getText;
            })(),
          },
          {
            key: "setText",
            value: (function () {
              var _setText = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee12(
                  key2,
                  recordValue
                ) {
                  var resolverAddr;
                  return _regenerator["default"].wrap(
                    function _callee12$(_context12) {
                      while (1) {
                        switch ((_context12.prev = _context12.next)) {
                          case 0:
                            _context12.next = 2;
                            return this.getResolverAddr();
                          case 2:
                            resolverAddr = _context12.sent;
                            return _context12.abrupt(
                              "return",
                              setTextWithResolver({
                                name: this.name,
                                key: key2,
                                recordValue,
                                resolverAddr,
                                signer: this.signer,
                              })
                            );
                          case 4:
                          case "end":
                            return _context12.stop();
                        }
                      }
                    },
                    _callee12,
                    this
                  );
                })
              );
              function setText(_x14, _x15) {
                return _setText.apply(this, arguments);
              }
              return setText;
            })(),
          },
          {
            key: "setSubnodeOwner",
            value: (function () {
              var _setSubnodeOwner = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee13(
                  label,
                  newOwner
                ) {
                  var lh;
                  return _regenerator["default"].wrap(
                    function _callee13$(_context13) {
                      while (1) {
                        switch ((_context13.prev = _context13.next)) {
                          case 0:
                            lh = (0, _utils.labelhash)(label);
                            return _context13.abrupt(
                              "return",
                              this.ensWithSigner.setSubnodeOwner(
                                this.namehash,
                                lh,
                                newOwner
                              )
                            );
                          case 2:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    },
                    _callee13,
                    this
                  );
                })
              );
              function setSubnodeOwner(_x16, _x17) {
                return _setSubnodeOwner.apply(this, arguments);
              }
              return setSubnodeOwner;
            })(),
          },
          {
            key: "setSubnodeRecord",
            value: (function () {
              var _setSubnodeRecord = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee14(
                  label,
                  newOwner,
                  resolver2
                ) {
                  var ttl,
                    lh,
                    _args14 = arguments;
                  return _regenerator["default"].wrap(
                    function _callee14$(_context14) {
                      while (1) {
                        switch ((_context14.prev = _context14.next)) {
                          case 0:
                            ttl =
                              _args14.length > 3 && _args14[3] !== void 0
                                ? _args14[3]
                                : 0;
                            lh = (0, _utils.labelhash)(label);
                            return _context14.abrupt(
                              "return",
                              this.ensWithSigner.setSubnodeRecord(
                                this.namehash,
                                lh,
                                newOwner,
                                resolver2,
                                ttl
                              )
                            );
                          case 3:
                          case "end":
                            return _context14.stop();
                        }
                      }
                    },
                    _callee14,
                    this
                  );
                })
              );
              function setSubnodeRecord(_x18, _x19, _x20) {
                return _setSubnodeRecord.apply(this, arguments);
              }
              return setSubnodeRecord;
            })(),
          },
          {
            key: "createSubdomain",
            value: (function () {
              var _createSubdomain = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee15(
                  label
                ) {
                  var resolverPromise,
                    ownerPromise,
                    _yield$Promise$all,
                    _yield$Promise$all2,
                    resolver2,
                    owner;
                  return _regenerator["default"].wrap(
                    function _callee15$(_context15) {
                      while (1) {
                        switch ((_context15.prev = _context15.next)) {
                          case 0:
                            resolverPromise = this.getResolver();
                            ownerPromise = this.getOwner();
                            _context15.next = 4;
                            return Promise.all([resolverPromise, ownerPromise]);
                          case 4:
                            _yield$Promise$all = _context15.sent;
                            _yield$Promise$all2 = (0,
                            _slicedToArray2["default"])(_yield$Promise$all, 2);
                            resolver2 = _yield$Promise$all2[0];
                            owner = _yield$Promise$all2[1];
                            return _context15.abrupt(
                              "return",
                              this.setSubnodeRecord(label, owner, resolver2)
                            );
                          case 9:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    },
                    _callee15,
                    this
                  );
                })
              );
              function createSubdomain(_x21) {
                return _createSubdomain.apply(this, arguments);
              }
              return createSubdomain;
            })(),
          },
          {
            key: "deleteSubdomain",
            value: (function () {
              var _deleteSubdomain = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee16(
                  label
                ) {
                  return _regenerator["default"].wrap(
                    function _callee16$(_context16) {
                      while (1) {
                        switch ((_context16.prev = _context16.next)) {
                          case 0:
                            return _context16.abrupt(
                              "return",
                              this.setSubnodeRecord(
                                label,
                                _utils.emptyAddress,
                                _utils.emptyAddress
                              )
                            );
                          case 1:
                          case "end":
                            return _context16.stop();
                        }
                      }
                    },
                    _callee16,
                    this
                  );
                })
              );
              function deleteSubdomain(_x22) {
                return _deleteSubdomain.apply(this, arguments);
              }
              return deleteSubdomain;
            })(),
          },
        ]);
        return Name2;
      })();
      var ENS2 = /* @__PURE__ */ (function () {
        function ENS3(options) {
          (0, _classCallCheck22["default"])(this, ENS3);
          var networkId = options.networkId,
            provider = options.provider,
            ensAddress = options.ensAddress;
          var ethersProvider;
          if (Provider2.isProvider(provider)) {
            ethersProvider = provider;
          } else {
            ethersProvider = new _ethers.ethers.providers.Web3Provider(
              provider
            );
          }
          this.provider = ethersProvider;
          this.signer = ethersProvider.getSigner();
          this.ens = getENSContract({
            address: ensAddress ? ensAddress : registries[networkId],
            provider: ethersProvider,
          });
        }
        (0, _createClass22["default"])(ENS3, [
          {
            key: "name",
            value: function name2(_name2) {
              return new Name({
                name: _name2,
                ens: this.ens,
                provider: this.provider,
                signer: this.signer,
              });
            },
          },
          {
            key: "resolver",
            value: function resolver2(address) {
              return new Resolver3({
                ens: this.ens,
                provider: this.provider,
                address,
              });
            },
          },
          {
            key: "getName",
            value: (function () {
              var _getName = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee17(
                  address
                ) {
                  var reverseNode, resolverAddr;
                  return _regenerator["default"].wrap(
                    function _callee17$(_context17) {
                      while (1) {
                        switch ((_context17.prev = _context17.next)) {
                          case 0:
                            reverseNode = "".concat(
                              address.slice(2),
                              ".addr.reverse"
                            );
                            _context17.next = 3;
                            return this.ens.resolver(
                              (0, _utils.namehash)(reverseNode)
                            );
                          case 3:
                            resolverAddr = _context17.sent;
                            return _context17.abrupt(
                              "return",
                              this.getNameWithResolver(address, resolverAddr)
                            );
                          case 5:
                          case "end":
                            return _context17.stop();
                        }
                      }
                    },
                    _callee17,
                    this
                  );
                })
              );
              function getName(_x23) {
                return _getName.apply(this, arguments);
              }
              return getName;
            })(),
          },
          {
            key: "getNameWithResolver",
            value: (function () {
              var _getNameWithResolver = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee18(
                  address,
                  resolverAddr
                ) {
                  var reverseNode, reverseNamehash, _Resolver, name2;
                  return _regenerator["default"].wrap(
                    function _callee18$(_context18) {
                      while (1) {
                        switch ((_context18.prev = _context18.next)) {
                          case 0:
                            reverseNode = "".concat(
                              address.slice(2),
                              ".addr.reverse"
                            );
                            reverseNamehash = (0, _utils.namehash)(reverseNode);
                            if (!(parseInt(resolverAddr, 16) === 0)) {
                              _context18.next = 4;
                              break;
                            }
                            return _context18.abrupt("return", {
                              name: null,
                            });
                          case 4:
                            _context18.prev = 4;
                            _Resolver = getResolverContract({
                              address: resolverAddr,
                              provider: this.provider,
                            });
                            _context18.next = 8;
                            return _Resolver.name(reverseNamehash);
                          case 8:
                            name2 = _context18.sent;
                            return _context18.abrupt("return", {
                              name: name2,
                            });
                          case 12:
                            _context18.prev = 12;
                            _context18.t0 = _context18["catch"](4);
                            console.log(
                              "Error getting name for reverse record of ".concat(
                                address
                              ),
                              _context18.t0
                            );
                          case 15:
                          case "end":
                            return _context18.stop();
                        }
                      }
                    },
                    _callee18,
                    this,
                    [[4, 12]]
                  );
                })
              );
              function getNameWithResolver(_x24, _x25) {
                return _getNameWithResolver.apply(this, arguments);
              }
              return getNameWithResolver;
            })(),
          },
          {
            key: "setReverseRecord",
            value: (function () {
              var _setReverseRecord = (0, _asyncToGenerator2["default"])(
                /* @__PURE__ */ _regenerator["default"].mark(function _callee19(
                  name2,
                  overrides
                ) {
                  var reverseRegistrarAddr, reverseRegistrar;
                  return _regenerator["default"].wrap(
                    function _callee19$(_context19) {
                      while (1) {
                        switch ((_context19.prev = _context19.next)) {
                          case 0:
                            _context19.next = 2;
                            return this.name("addr.reverse").getOwner(
                              "addr.reverse"
                            );
                          case 2:
                            reverseRegistrarAddr = _context19.sent;
                            reverseRegistrar = getReverseRegistrarContract({
                              address: reverseRegistrarAddr,
                              provider: this.signer,
                            });
                            return _context19.abrupt(
                              "return",
                              reverseRegistrar.setName(name2)
                            );
                          case 5:
                          case "end":
                            return _context19.stop();
                        }
                      }
                    },
                    _callee19,
                    this
                  );
                })
              );
              function setReverseRecord(_x26, _x27) {
                return _setReverseRecord.apply(this, arguments);
              }
              return setReverseRecord;
            })(),
          },
        ]);
        return ENS3;
      })();
      exports["default"] = ENS2;
    },
  });

  // src/Resolver.ts
  var Resolver = class {
    _resolvers = [];
    _portals = [];
    async resolve(input, params = []) {
      for (const resolver2 of this._resolvers) {
        const result = await resolver2.resolve(input, params);
        if (result) {
          return result;
        }
      }
      return false;
    }
    registerResolver(resolver2) {
      this._resolvers.push(resolver2);
    }
    registerPortal(hostname) {
      this._portals.push(hostname);
    }
    set portals(value) {
      this._portals = value;
    }
    getPortal() {
      return this._portals[
        Math.floor(Math.random() * (1 + this._portals.length - 1))
      ];
    }
  };

  // src/lib/util.ts
  function isIp(ip) {
    return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(
      ip
    );
  }
  function isDomain(domain) {
    return /(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]/.test(
      domain
    );
  }
  var startsWithSkylinkRegExp = /^(sia:\/\/)?([a-zA-Z0-9_-]{46})/;
  var registryEntryRegExp =
    /^skyns:\/\/(?<publickey>[a-zA-Z0-9%]+)\/(?<datakey>[a-zA-Z0-9%]+)$/;
  function normalizeDomain(domain) {
    return domain.replace(/^\.+|\.+$/g, "").replace(/^\/+|\/+$/g, "");
  }

  // src/resolvers/handshake/HnsClient.ts
  var import_path = __require("path");
  var import_brq = __toESM(require_brq(), 1);
  var import_assert = __toESM(__require("assert"), 1);
  var import_hs_client = __toESM(require_hs_client(), 1);

  // src/resolvers/handshake/RPCError.ts
  var RPCError = class extends Error {
    constructor(msg, code) {
      super();
      this.type = "RPCError";
      this.message = String(msg);
      this.code = code >> 0;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, RPCError);
      }
    }
  };

  // src/resolvers/handshake/HnsClient.ts
  var HnsClient = class extends import_hs_client.NodeClient {
    constructor(options) {
      super(options);
    }
    async execute(name2, params) {
      var _a;
      (0, import_assert.default)(typeof name2 === "string");
      this.sequence += 1;
      const chain = (_a = this.headers["x-chain"]) != null ? _a : "hns";
      const res = await (0, import_brq.default)({
        method: "POST",
        ssl: true,
        strictSSL: this.strictSSL,
        host: this.host,
        port: this.port,
        path: import_path.posix.join(this.path, "/rpc"),
        username: this.username,
        password: this.password,
        headers: this.headers,
        timeout: this.timeout,
        limit: this.limit,
        pool: true,
        query: {
          chain,
        },
        json: {
          jsonrpc: "2.0",
          method: name2,
          params,
          id: this.sequence,
        },
      });
      if (res.statusCode === 401) {
        throw new RPCError("Unauthorized (bad API key).", -1);
      }
      if (res.type !== "json") {
        throw new Error("Bad response (wrong content-type).");
      }
      const json = res.json();
      if (!json) {
        throw new Error("No body for JSON-RPC response.");
      }
      if (json.error) {
        const { message, code } = json.error;
        throw new RPCError(message, code);
      }
      if (res.statusCode !== 200) {
        throw new Error(`Status code: ${res.statusCode}.`);
      }
      return json;
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/client.js
  var import_axios = __toESM(require_axios2(), 1);
  var import_skynet_mysky_utils5 = __toESM(require_dist(), 1);

  // node_modules/@skynetlabs/tus-js-client/lib.esm/upload.js
  var import_js_base64 = __toESM(require_base64());
  var import_url_parse = __toESM(require_url_parse());

  // node_modules/@skynetlabs/tus-js-client/lib.esm/error.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof5(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof5(obj2) {
        return obj2 &&
          typeof Symbol === "function" &&
          obj2.constructor === Symbol &&
          obj2 !== Symbol.prototype
          ? "symbol"
          : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: { value: subClass, writable: true, configurable: true },
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }
    return self2;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError(
          "Super expression must either be null or a function"
        );
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2)) return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        },
      });
      return _setPrototypeOf(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a2 = [null];
        a2.push.apply(a2, args2);
        var Constructor = Function.bind.apply(Parent2, a2);
        var instance = new Constructor();
        if (Class2) _setPrototypeOf(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      );
      return true;
    } catch (e) {
      return false;
    }
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf =
      Object.setPrototypeOf ||
      function _setPrototypeOf5(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
    return _setPrototypeOf(o2, p2);
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf5(o3) {
          return o3.__proto__ || Object.getPrototypeOf(o3);
        };
    return _getPrototypeOf(o2);
  }
  var DetailedError = /* @__PURE__ */ (function (_Error) {
    _inherits(DetailedError2, _Error);
    var _super = _createSuper(DetailedError2);
    function DetailedError2(message) {
      var _this;
      var causingErr =
        arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var req =
        arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var res =
        arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      _classCallCheck(this, DetailedError2);
      _this = _super.call(this, message);
      _this.originalRequest = req;
      _this.originalResponse = res;
      _this.causingError = causingErr;
      if (causingErr != null) {
        message += ", caused by ".concat(causingErr.toString());
      }
      if (req != null) {
        var requestId = req.getHeader("X-Request-ID") || "n/a";
        var method = req.getMethod();
        var url = req.getURL();
        var status = res ? res.getStatus() : "n/a";
        var body = res ? res.getBody() || "" : "n/a";
        message += ", originated from request (method: "
          .concat(method, ", url: ")
          .concat(url, ", response code: ")
          .concat(status, ", response text: ")
          .concat(body, ", request id: ")
          .concat(requestId, ")");
      }
      _this.message = message;
      return _this;
    }
    return DetailedError2;
  })(/* @__PURE__ */ _wrapNativeSuper(Error));
  var error_default = DetailedError;

  // node_modules/@skynetlabs/tus-js-client/lib.esm/logger.js
  var isEnabled = false;
  function log(msg) {
    if (!isEnabled) return;
    console.log(msg);
  }

  // node_modules/@skynetlabs/tus-js-client/lib.esm/uuid.js
  function uuid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
      /[xy]/g,
      function (c2) {
        var r = (Math.random() * 16) | 0;
        var v2 = c2 == "x" ? r : (r & 3) | 8;
        return v2.toString(16);
      }
    );
  }

  // node_modules/@skynetlabs/tus-js-client/lib.esm/upload.js
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key2) {
          _defineProperty(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(
          target,
          Object.getOwnPropertyDescriptors(source)
        );
      } else {
        ownKeys(Object(source)).forEach(function (key2) {
          Object.defineProperty(
            target,
            key2,
            Object.getOwnPropertyDescriptor(source, key2)
          );
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var defaultOptions = {
    endpoint: null,
    uploadUrl: null,
    metadata: {},
    fingerprint: null,
    uploadSize: null,
    onProgress: null,
    onChunkComplete: null,
    onSuccess: null,
    onError: null,
    _onUploadUrlAvailable: null,
    overridePatchMethod: false,
    headers: {},
    addRequestId: false,
    onBeforeRequest: null,
    onAfterResponse: null,
    onShouldRetry: null,
    chunkSize: Infinity,
    retryDelays: [0, 1e3, 3e3, 5e3],
    parallelUploads: 1,
    splitSizeIntoParts: null,
    storeFingerprintForResuming: true,
    removeFingerprintOnSuccess: false,
    uploadLengthDeferred: false,
    uploadDataDuringCreation: false,
    urlStorage: null,
    fileReader: null,
    httpStack: null,
  };
  var BaseUpload = /* @__PURE__ */ (function () {
    function BaseUpload2(file, options) {
      _classCallCheck2(this, BaseUpload2);
      if ("resume" in options) {
        console.log(
          "tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead."
        );
      }
      this.options = options;
      this.options.chunkSize = +this.options.chunkSize;
      this._urlStorage = this.options.urlStorage;
      this.file = file;
      this.url = null;
      this._req = null;
      this._fingerprint = null;
      this._urlStorageKey = null;
      this._offset = null;
      this._aborted = false;
      this._size = null;
      this._source = null;
      this._retryAttempt = 0;
      this._retryTimeout = null;
      this._offsetBeforeRetry = 0;
      this._parallelUploads = null;
      this._splitSizeIntoParts = null;
      this._parallelUploadUrls = null;
    }
    _createClass(
      BaseUpload2,
      [
        {
          key: "findPreviousUploads",
          value: function findPreviousUploads() {
            var _this = this;
            return this.options
              .fingerprint(this.file, this.options)
              .then(function (fingerprint2) {
                return _this._urlStorage.findUploadsByFingerprint(fingerprint2);
              });
          },
        },
        {
          key: "resumeFromPreviousUpload",
          value: function resumeFromPreviousUpload(previousUpload) {
            this.url = previousUpload.uploadUrl || null;
            this._parallelUploadUrls =
              previousUpload.parallelUploadUrls || null;
            this._urlStorageKey = previousUpload.urlStorageKey;
          },
        },
        {
          key: "start",
          value: function start() {
            var _this2 = this;
            var file = this.file;
            if (!file) {
              this._emitError(
                new Error("tus: no file or stream to upload provided")
              );
              return;
            }
            if (!this.options.endpoint && !this.options.uploadUrl) {
              this._emitError(
                new Error(
                  "tus: neither an endpoint or an upload URL is provided"
                )
              );
              return;
            }
            var retryDelays = this.options.retryDelays;
            if (
              retryDelays != null &&
              Object.prototype.toString.call(retryDelays) !== "[object Array]"
            ) {
              this._emitError(
                new Error(
                  "tus: the `retryDelays` option must either be an array or null"
                )
              );
              return;
            }
            if (this.options.parallelUploads > 1) {
              ["uploadUrl", "uploadSize", "uploadLengthDeferred"].forEach(
                function (optionName) {
                  if (_this2.options[optionName]) {
                    _this2._emitError(
                      new Error(
                        "tus: cannot use the ".concat(
                          optionName,
                          " option when parallelUploads is enabled"
                        )
                      )
                    );
                  }
                }
              );
            }
            if (this.options.splitSizeIntoParts) {
              if (this.options.parallelUploads <= 1) {
                this._emitError(
                  new Error(
                    "tus: cannot use the splitSizeIntoParts option when parallelUploads is disabled"
                  )
                );
              }
            }
            this.options
              .fingerprint(file, this.options)
              .then(function (fingerprint2) {
                if (fingerprint2 == null) {
                  log(
                    "No fingerprint was calculated meaning that the upload cannot be stored in the URL storage."
                  );
                } else {
                  log("Calculated fingerprint: ".concat(fingerprint2));
                }
                _this2._fingerprint = fingerprint2;
                if (_this2._source) {
                  return _this2._source;
                }
                return _this2.options.fileReader.openFile(
                  file,
                  _this2.options.chunkSize
                );
              })
              .then(function (source) {
                _this2._source = source;
                if (
                  _this2.options.parallelUploads > 1 ||
                  _this2._parallelUploadUrls != null
                ) {
                  _this2._startParallelUpload();
                } else {
                  _this2._startSingleUpload();
                }
              })
              ["catch"](function (err) {
                _this2._emitError(err);
              });
          },
        },
        {
          key: "_startParallelUpload",
          value: function _startParallelUpload() {
            var _this$options$splitSi,
              _this3 = this;
            var totalSize = (this._size = this._source.size);
            var totalProgress = 0;
            this._parallelUploads = [];
            var partCount =
              this._parallelUploadUrls != null
                ? this._parallelUploadUrls.length
                : this.options.parallelUploads;
            var splitSizeFn =
              (_this$options$splitSi = this.options.splitSizeIntoParts) !==
                null && _this$options$splitSi !== void 0
                ? _this$options$splitSi
                : splitSizeIntoParts;
            var parts = splitSizeFn(this._source.size, partCount);
            if (this._parallelUploadUrls) {
              parts.forEach(function (part, index) {
                part.uploadUrl = _this3._parallelUploadUrls[index] || null;
              });
            }
            this._parallelUploadUrls = new Array(parts.length);
            var uploads = parts.map(function (part, index) {
              var lastPartProgress = 0;
              return _this3._source
                .slice(part.start, part.end)
                .then(function (_ref) {
                  var value = _ref.value;
                  return new Promise(function (resolve2, reject) {
                    var options = _objectSpread(
                      _objectSpread({}, _this3.options),
                      {},
                      {
                        uploadUrl: part.uploadUrl || null,
                        storeFingerprintForResuming: false,
                        removeFingerprintOnSuccess: false,
                        parallelUploads: 1,
                        splitSizeIntoParts: null,
                        metadata: {},
                        headers: _objectSpread(
                          _objectSpread({}, _this3.options.headers),
                          {},
                          {
                            "Upload-Concat": "partial",
                          }
                        ),
                        onSuccess: resolve2,
                        onError: reject,
                        onProgress: function onProgress(newPartProgress) {
                          totalProgress =
                            totalProgress - lastPartProgress + newPartProgress;
                          lastPartProgress = newPartProgress;
                          _this3._emitProgress(totalProgress, totalSize);
                        },
                        _onUploadUrlAvailable:
                          function _onUploadUrlAvailable() {
                            _this3._parallelUploadUrls[index] = upload.url;
                            if (
                              _this3._parallelUploadUrls.filter(function (u2) {
                                return !!u2;
                              }).length === parts.length
                            ) {
                              _this3._saveUploadInUrlStorage();
                            }
                          },
                      }
                    );
                    var upload = new BaseUpload2(value, options);
                    upload.start();
                    _this3._parallelUploads.push(upload);
                  });
                });
            });
            var req;
            Promise.all(uploads)
              .then(function () {
                req = _this3._openRequest("POST", _this3.options.endpoint);
                req.setHeader(
                  "Upload-Concat",
                  "final;".concat(_this3._parallelUploadUrls.join(" "))
                );
                var metadata = encodeMetadata(_this3.options.metadata);
                if (metadata !== "") {
                  req.setHeader("Upload-Metadata", metadata);
                }
                return _this3._sendRequest(req, null);
              })
              .then(function (res) {
                if (!inStatusCategory(res.getStatus(), 200)) {
                  _this3._emitHttpError(
                    req,
                    res,
                    "tus: unexpected response while creating upload"
                  );
                  return;
                }
                var location = res.getHeader("Location");
                if (location == null) {
                  _this3._emitHttpError(
                    req,
                    res,
                    "tus: invalid or missing Location header"
                  );
                  return;
                }
                _this3.url = resolveUrl(_this3.options.endpoint, location);
                log("Created upload at ".concat(_this3.url));
                _this3._emitSuccess();
              })
              ["catch"](function (err) {
                _this3._emitError(err);
              });
          },
        },
        {
          key: "_startSingleUpload",
          value: function _startSingleUpload() {
            if (this.options.uploadLengthDeferred) {
              this._size = null;
            } else if (this.options.uploadSize != null) {
              this._size = +this.options.uploadSize;
              if (isNaN(this._size)) {
                this._emitError(
                  new Error(
                    "tus: cannot convert `uploadSize` option into a number"
                  )
                );
                return;
              }
            } else {
              this._size = this._source.size;
              if (this._size == null) {
                this._emitError(
                  new Error(
                    "tus: cannot automatically derive upload's size from input and must be specified manually using the `uploadSize` option"
                  )
                );
                return;
              }
            }
            this._aborted = false;
            if (this.url != null) {
              log("Resuming upload from previous URL: ".concat(this.url));
              this._resumeUpload();
              return;
            }
            if (this.options.uploadUrl != null) {
              log(
                "Resuming upload from provided URL: ".concat(this.options.url)
              );
              this.url = this.options.uploadUrl;
              this._resumeUpload();
              return;
            }
            log("Creating a new upload");
            this._createUpload();
          },
        },
        {
          key: "abort",
          value: function abort(shouldTerminate) {
            var _this4 = this;
            if (arguments.length > 1 && typeof arguments[1] === "function") {
              throw new Error(
                "tus: the abort function does not accept a callback since v2 anymore; please use the returned Promise instead"
              );
            }
            if (this._parallelUploads != null) {
              this._parallelUploads.forEach(function (upload) {
                upload.abort(shouldTerminate);
              });
            }
            if (this._req !== null) {
              this._req.abort();
              this._source.close();
            }
            this._aborted = true;
            if (this._retryTimeout != null) {
              clearTimeout(this._retryTimeout);
              this._retryTimeout = null;
            }
            if (!shouldTerminate || this.url == null) {
              return Promise.resolve();
            }
            return BaseUpload2.terminate(this.url, this.options).then(
              function () {
                return _this4._removeFromUrlStorage();
              }
            );
          },
        },
        {
          key: "_emitHttpError",
          value: function _emitHttpError(req, res, message, causingErr) {
            this._emitError(new error_default(message, causingErr, req, res));
          },
        },
        {
          key: "_emitError",
          value: function _emitError(err) {
            var _this5 = this;
            if (this._aborted) return;
            if (this.options.retryDelays != null) {
              var shouldResetDelays =
                this._offset != null && this._offset > this._offsetBeforeRetry;
              if (shouldResetDelays) {
                this._retryAttempt = 0;
              }
              if (shouldRetry(err, this._retryAttempt, this.options)) {
                var delay = this.options.retryDelays[this._retryAttempt++];
                this._offsetBeforeRetry = this._offset;
                this._retryTimeout = setTimeout(function () {
                  _this5.start();
                }, delay);
                return;
              }
            }
            if (typeof this.options.onError === "function") {
              this.options.onError(err);
            } else {
              throw err;
            }
          },
        },
        {
          key: "_emitSuccess",
          value: function _emitSuccess() {
            if (this.options.removeFingerprintOnSuccess) {
              this._removeFromUrlStorage();
            }
            if (typeof this.options.onSuccess === "function") {
              this.options.onSuccess();
            }
          },
        },
        {
          key: "_emitProgress",
          value: function _emitProgress(bytesSent, bytesTotal) {
            if (typeof this.options.onProgress === "function") {
              this.options.onProgress(bytesSent, bytesTotal);
            }
          },
        },
        {
          key: "_emitChunkComplete",
          value: function _emitChunkComplete(
            chunkSize,
            bytesAccepted,
            bytesTotal
          ) {
            if (typeof this.options.onChunkComplete === "function") {
              this.options.onChunkComplete(
                chunkSize,
                bytesAccepted,
                bytesTotal
              );
            }
          },
        },
        {
          key: "_createUpload",
          value: function _createUpload() {
            var _this6 = this;
            if (!this.options.endpoint) {
              this._emitError(
                new Error(
                  "tus: unable to create upload because no endpoint is provided"
                )
              );
              return;
            }
            var req = this._openRequest("POST", this.options.endpoint);
            if (this.options.uploadLengthDeferred) {
              req.setHeader("Upload-Defer-Length", 1);
            } else {
              req.setHeader("Upload-Length", this._size);
            }
            var metadata = encodeMetadata(this.options.metadata);
            if (metadata !== "") {
              req.setHeader("Upload-Metadata", metadata);
            }
            var promise;
            if (
              this.options.uploadDataDuringCreation &&
              !this.options.uploadLengthDeferred
            ) {
              this._offset = 0;
              promise = this._addChunkToRequest(req);
            } else {
              promise = this._sendRequest(req, null);
            }
            promise
              .then(function (res) {
                if (!inStatusCategory(res.getStatus(), 200)) {
                  _this6._emitHttpError(
                    req,
                    res,
                    "tus: unexpected response while creating upload"
                  );
                  return;
                }
                var location = res.getHeader("Location");
                if (location == null) {
                  _this6._emitHttpError(
                    req,
                    res,
                    "tus: invalid or missing Location header"
                  );
                  return;
                }
                _this6.url = resolveUrl(_this6.options.endpoint, location);
                log("Created upload at ".concat(_this6.url));
                if (
                  typeof _this6.options._onUploadUrlAvailable === "function"
                ) {
                  _this6.options._onUploadUrlAvailable();
                }
                if (_this6._size === 0) {
                  _this6._emitSuccess();
                  _this6._source.close();
                  return;
                }
                _this6._saveUploadInUrlStorage();
                if (_this6.options.uploadDataDuringCreation) {
                  _this6._handleUploadResponse(req, res);
                } else {
                  _this6._offset = 0;
                  _this6._performUpload();
                }
              })
              ["catch"](function (err) {
                _this6._emitHttpError(
                  req,
                  null,
                  "tus: failed to create upload",
                  err
                );
              });
          },
        },
        {
          key: "_resumeUpload",
          value: function _resumeUpload() {
            var _this7 = this;
            var req = this._openRequest("HEAD", this.url);
            var promise = this._sendRequest(req, null);
            promise
              .then(function (res) {
                var status = res.getStatus();
                if (!inStatusCategory(status, 200)) {
                  if (inStatusCategory(status, 400)) {
                    _this7._removeFromUrlStorage();
                  }
                  if (status === 423) {
                    _this7._emitHttpError(
                      req,
                      res,
                      "tus: upload is currently locked; retry later"
                    );
                    return;
                  }
                  if (!_this7.options.endpoint) {
                    _this7._emitHttpError(
                      req,
                      res,
                      "tus: unable to resume upload (new upload cannot be created without an endpoint)"
                    );
                    return;
                  }
                  _this7.url = null;
                  _this7._createUpload();
                  return;
                }
                var offset = parseInt(res.getHeader("Upload-Offset"), 10);
                if (isNaN(offset)) {
                  _this7._emitHttpError(
                    req,
                    res,
                    "tus: invalid or missing offset value"
                  );
                  return;
                }
                var length = parseInt(res.getHeader("Upload-Length"), 10);
                if (isNaN(length) && !_this7.options.uploadLengthDeferred) {
                  _this7._emitHttpError(
                    req,
                    res,
                    "tus: invalid or missing length value"
                  );
                  return;
                }
                if (
                  typeof _this7.options._onUploadUrlAvailable === "function"
                ) {
                  _this7.options._onUploadUrlAvailable();
                }
                if (offset === length) {
                  _this7._emitProgress(length, length);
                  _this7._emitSuccess();
                  return;
                }
                _this7._offset = offset;
                _this7._performUpload();
              })
              ["catch"](function (err) {
                _this7._emitHttpError(
                  req,
                  null,
                  "tus: failed to resume upload",
                  err
                );
              });
          },
        },
        {
          key: "_performUpload",
          value: function _performUpload() {
            var _this8 = this;
            if (this._aborted) {
              return;
            }
            var req;
            if (this.options.overridePatchMethod) {
              req = this._openRequest("POST", this.url);
              req.setHeader("X-HTTP-Method-Override", "PATCH");
            } else {
              req = this._openRequest("PATCH", this.url);
            }
            req.setHeader("Upload-Offset", this._offset);
            var promise = this._addChunkToRequest(req);
            promise
              .then(function (res) {
                if (!inStatusCategory(res.getStatus(), 200)) {
                  _this8._emitHttpError(
                    req,
                    res,
                    "tus: unexpected response while uploading chunk"
                  );
                  return;
                }
                _this8._handleUploadResponse(req, res);
              })
              ["catch"](function (err) {
                if (_this8._aborted) {
                  return;
                }
                _this8._emitHttpError(
                  req,
                  null,
                  "tus: failed to upload chunk at offset ".concat(
                    _this8._offset
                  ),
                  err
                );
              });
          },
        },
        {
          key: "_addChunkToRequest",
          value: function _addChunkToRequest(req) {
            var _this9 = this;
            var start = this._offset;
            var end = this._offset + this.options.chunkSize;
            req.setProgressHandler(function (bytesSent) {
              _this9._emitProgress(start + bytesSent, _this9._size);
            });
            req.setHeader("Content-Type", "application/offset+octet-stream");
            if (
              (end === Infinity || end > this._size) &&
              !this.options.uploadLengthDeferred
            ) {
              end = this._size;
            }
            return this._source.slice(start, end).then(function (_ref2) {
              var value = _ref2.value,
                done = _ref2.done;
              if (_this9.options.uploadLengthDeferred && done) {
                _this9._size =
                  _this9._offset + (value && value.size ? value.size : 0);
                req.setHeader("Upload-Length", _this9._size);
              }
              if (value === null) {
                return _this9._sendRequest(req);
              }
              _this9._emitProgress(_this9._offset, _this9._size);
              return _this9._sendRequest(req, value);
            });
          },
        },
        {
          key: "_handleUploadResponse",
          value: function _handleUploadResponse(req, res) {
            var offset = parseInt(res.getHeader("Upload-Offset"), 10);
            if (isNaN(offset)) {
              this._emitHttpError(
                req,
                res,
                "tus: invalid or missing offset value"
              );
              return;
            }
            this._emitProgress(offset, this._size);
            this._emitChunkComplete(offset - this._offset, offset, this._size);
            this._offset = offset;
            if (offset == this._size) {
              this._emitSuccess();
              this._source.close();
              return;
            }
            this._performUpload();
          },
        },
        {
          key: "_openRequest",
          value: function _openRequest(method, url) {
            var req = openRequest(method, url, this.options);
            this._req = req;
            return req;
          },
        },
        {
          key: "_removeFromUrlStorage",
          value: function _removeFromUrlStorage() {
            var _this10 = this;
            if (!this._urlStorageKey) return;
            this._urlStorage
              .removeUpload(this._urlStorageKey)
              ["catch"](function (err) {
                _this10._emitError(err);
              });
            this._urlStorageKey = null;
          },
        },
        {
          key: "_saveUploadInUrlStorage",
          value: function _saveUploadInUrlStorage() {
            var _this11 = this;
            if (
              !this.options.storeFingerprintForResuming ||
              !this._fingerprint
            ) {
              return;
            }
            var storedUpload = {
              size: this._size,
              metadata: this.options.metadata,
              creationTime: new Date().toString(),
            };
            if (this._parallelUploads) {
              storedUpload.parallelUploadUrls = this._parallelUploadUrls;
            } else {
              storedUpload.uploadUrl = this.url;
            }
            this._urlStorage
              .addUpload(this._fingerprint, storedUpload)
              .then(function (urlStorageKey) {
                return (_this11._urlStorageKey = urlStorageKey);
              })
              ["catch"](function (err) {
                _this11._emitError(err);
              });
          },
        },
        {
          key: "_sendRequest",
          value: function _sendRequest(req) {
            var body =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : null;
            return sendRequest(req, body, this.options);
          },
        },
      ],
      [
        {
          key: "terminate",
          value: function terminate(url, options) {
            if (
              arguments.length > 1 &&
              typeof arguments[arguments.length - 1] === "function"
            ) {
              throw new Error(
                "tus: the terminate function does not accept a callback since v2 anymore; please use the returned Promise instead"
              );
            }
            if (options === void 0) {
              options = {};
            }
            var req = openRequest("DELETE", url, options);
            return sendRequest(req, null, options)
              .then(function (res) {
                if (res.getStatus() === 204) {
                  return;
                }
                throw new error_default(
                  "tus: unexpected response while terminating upload",
                  null,
                  req,
                  res
                );
              })
              ["catch"](function (err) {
                if (!(err instanceof error_default)) {
                  err = new error_default(
                    "tus: failed to terminate upload",
                    err,
                    req,
                    null
                  );
                }
                if (!shouldRetry(err, 0, options)) {
                  throw err;
                }
                var delay = options.retryDelays[0];
                var remainingDelays = options.retryDelays.slice(1);
                var newOptions = _objectSpread(
                  _objectSpread({}, options),
                  {},
                  {
                    retryDelays: remainingDelays,
                  }
                );
                return new Promise(function (resolve2) {
                  return setTimeout(resolve2, delay);
                }).then(function () {
                  return BaseUpload2.terminate(url, newOptions);
                });
              });
          },
        },
      ]
    );
    return BaseUpload2;
  })();
  function encodeMetadata(metadata) {
    var encoded = [];
    for (var key2 in metadata) {
      encoded.push(
        ""
          .concat(key2, " ")
          .concat(import_js_base64.Base64.encode(metadata[key2]))
      );
    }
    return encoded.join(",");
  }
  function inStatusCategory(status, category) {
    return status >= category && status < category + 100;
  }
  function openRequest(method, url, options) {
    var req = options.httpStack.createRequest(method, url);
    req.setHeader("Tus-Resumable", "1.0.0");
    var headers = options.headers || {};
    for (var name2 in headers) {
      req.setHeader(name2, headers[name2]);
    }
    if (options.addRequestId) {
      var requestId = uuid();
      req.setHeader("X-Request-ID", requestId);
    }
    return req;
  }
  function sendRequest(req, body, options) {
    var onBeforeRequestPromise =
      typeof options.onBeforeRequest === "function"
        ? Promise.resolve(options.onBeforeRequest(req))
        : Promise.resolve();
    return onBeforeRequestPromise.then(function () {
      return req.send(body).then(function (res) {
        var onAfterResponsePromise =
          typeof options.onAfterResponse === "function"
            ? Promise.resolve(options.onAfterResponse(req, res))
            : Promise.resolve();
        return onAfterResponsePromise.then(function () {
          return res;
        });
      });
    });
  }
  function isOnline() {
    var online = true;
    if (
      typeof window !== "undefined" &&
      "navigator" in window &&
      window.navigator.onLine === false
    ) {
      online = false;
    }
    return online;
  }
  function shouldRetry(err, retryAttempt, options) {
    if (
      options.retryDelays == null ||
      retryAttempt >= options.retryDelays.length ||
      err.originalRequest == null
    ) {
      return false;
    }
    if (options && typeof options.onShouldRetry === "function") {
      return options.onShouldRetry(err, retryAttempt, options);
    }
    var status = err.originalResponse ? err.originalResponse.getStatus() : 0;
    return (
      (!inStatusCategory(status, 400) || status === 409 || status === 423) &&
      isOnline()
    );
  }
  function resolveUrl(origin, link) {
    return new import_url_parse.default(link, origin).toString();
  }
  function splitSizeIntoParts(totalSize, partCount) {
    var partSize = Math.floor(totalSize / partCount);
    var parts = [];
    for (var i = 0; i < partCount; i++) {
      parts.push({
        start: partSize * i,
        end: partSize * (i + 1),
      });
    }
    parts[partCount - 1].end = totalSize;
    return parts;
  }
  BaseUpload.defaultOptions = defaultOptions;
  var upload_default = BaseUpload;

  // node_modules/@skynetlabs/tus-js-client/lib.esm/noopUrlStorage.js
  function _classCallCheck3(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties2(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  var NoopUrlStorage = /* @__PURE__ */ (function () {
    function NoopUrlStorage2() {
      _classCallCheck3(this, NoopUrlStorage2);
    }
    _createClass2(NoopUrlStorage2, [
      {
        key: "listAllUploads",
        value: function listAllUploads() {
          return Promise.resolve([]);
        },
      },
      {
        key: "findUploadsByFingerprint",
        value: function findUploadsByFingerprint(fingerprint2) {
          return Promise.resolve([]);
        },
      },
      {
        key: "removeUpload",
        value: function removeUpload(urlStorageKey) {
          return Promise.resolve();
        },
      },
      {
        key: "addUpload",
        value: function addUpload(fingerprint2, upload) {
          return Promise.resolve(null);
        },
      },
    ]);
    return NoopUrlStorage2;
  })();

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/urlStorage.js
  var lockfile = __toESM(require_proper_lockfile());
  var combineErrors = __toESM(require_combine_errors());

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/httpStack.js
  var http = __toESM(__require("http"));
  var https = __toESM(__require("https"));
  var import_url = __require("url");
  var import_stream = __require("stream");
  var import_lodash = __toESM(require_lodash8());
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof5(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof5(obj2) {
        return obj2 &&
          typeof Symbol === "function" &&
          obj2.constructor === Symbol &&
          obj2 !== Symbol.prototype
          ? "symbol"
          : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function _inherits2(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: { value: subClass, writable: true, configurable: true },
    });
    if (superClass) _setPrototypeOf2(subClass, superClass);
  }
  function _setPrototypeOf2(o2, p2) {
    _setPrototypeOf2 =
      Object.setPrototypeOf ||
      function _setPrototypeOf5(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
    return _setPrototypeOf2(o2, p2);
  }
  function _createSuper2(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf2(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf2(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn2(this, result);
    };
  }
  function _possibleConstructorReturn2(self2, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized2(self2);
  }
  function _assertThisInitialized2(self2) {
    if (self2 === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }
    return self2;
  }
  function _isNativeReflectConstruct2() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      );
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf2(o2) {
    _getPrototypeOf2 = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf5(o3) {
          return o3.__proto__ || Object.getPrototypeOf(o3);
        };
    return _getPrototypeOf2(o2);
  }
  function ownKeys2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys2(Object(source), true).forEach(function (key2) {
          _defineProperty2(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(
          target,
          Object.getOwnPropertyDescriptors(source)
        );
      } else {
        ownKeys2(Object(source)).forEach(function (key2) {
          Object.defineProperty(
            target,
            key2,
            Object.getOwnPropertyDescriptor(source, key2)
          );
        });
      }
    }
    return target;
  }
  function _defineProperty2(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  function _classCallCheck4(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties3(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass3(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties3(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties3(Constructor, staticProps);
    return Constructor;
  }
  var NodeHttpStack = /* @__PURE__ */ (function () {
    function NodeHttpStack2() {
      var requestOptions =
        arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      _classCallCheck4(this, NodeHttpStack2);
      this._requestOptions = requestOptions;
    }
    _createClass3(NodeHttpStack2, [
      {
        key: "createRequest",
        value: function createRequest(method, url) {
          return new Request(method, url, this._requestOptions);
        },
      },
      {
        key: "getName",
        value: function getName() {
          return "NodeHttpStack";
        },
      },
    ]);
    return NodeHttpStack2;
  })();
  var Request = /* @__PURE__ */ (function () {
    function Request2(method, url, options) {
      _classCallCheck4(this, Request2);
      this._method = method;
      this._url = url;
      this._headers = {};
      this._request = null;
      this._progressHandler = function () {};
      this._requestOptions = options || {};
    }
    _createClass3(Request2, [
      {
        key: "getMethod",
        value: function getMethod() {
          return this._method;
        },
      },
      {
        key: "getURL",
        value: function getURL() {
          return this._url;
        },
      },
      {
        key: "setHeader",
        value: function setHeader(header, value) {
          this._headers[header] = value;
        },
      },
      {
        key: "getHeader",
        value: function getHeader(header) {
          return this._headers[header];
        },
      },
      {
        key: "setProgressHandler",
        value: function setProgressHandler(progressHandler) {
          this._progressHandler = progressHandler;
        },
      },
      {
        key: "send",
        value: function send() {
          var _this = this;
          var body =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : null;
          return new Promise(function (resolve2, reject) {
            var options = _objectSpread2(
              _objectSpread2(
                _objectSpread2({}, (0, import_url.parse)(_this._url)),
                _this._requestOptions
              ),
              {},
              {
                method: _this._method,
                headers: _objectSpread2(
                  _objectSpread2({}, _this._requestOptions.headers || {}),
                  _this._headers
                ),
              }
            );
            if (body && body.size) {
              options.headers["Content-Length"] = body.size;
            }
            var httpModule = options.protocol === "https:" ? https : http;
            var req = (_this._request = httpModule.request(options));
            req.on("response", function (res) {
              var resChunks = [];
              res.on("data", function (data) {
                resChunks.push(data);
              });
              res.on("end", function () {
                var responseText = Buffer.concat(resChunks).toString("utf8");
                resolve2(new Response(res, responseText));
              });
            });
            req.on("error", function (err) {
              reject(err);
            });
            if (body instanceof import_stream.Readable) {
              body.pipe(new ProgressEmitter(_this._progressHandler)).pipe(req);
            } else {
              req.end(body);
            }
          });
        },
      },
      {
        key: "abort",
        value: function abort() {
          if (this._request !== null) this._request.abort();
          return Promise.resolve();
        },
      },
      {
        key: "getUnderlyingObject",
        value: function getUnderlyingObject() {
          return this._request;
        },
      },
    ]);
    return Request2;
  })();
  var Response = /* @__PURE__ */ (function () {
    function Response2(res, body) {
      _classCallCheck4(this, Response2);
      this._response = res;
      this._body = body;
    }
    _createClass3(Response2, [
      {
        key: "getStatus",
        value: function getStatus() {
          return this._response.statusCode;
        },
      },
      {
        key: "getHeader",
        value: function getHeader(header) {
          return this._response.headers[header.toLowerCase()];
        },
      },
      {
        key: "getBody",
        value: function getBody() {
          return this._body;
        },
      },
      {
        key: "getUnderlyingObject",
        value: function getUnderlyingObject() {
          return this._response;
        },
      },
    ]);
    return Response2;
  })();
  var ProgressEmitter = /* @__PURE__ */ (function (_Transform) {
    _inherits2(ProgressEmitter2, _Transform);
    var _super = _createSuper2(ProgressEmitter2);
    function ProgressEmitter2(onprogress) {
      var _this2;
      _classCallCheck4(this, ProgressEmitter2);
      _this2 = _super.call(this);
      _this2._onprogress = (0, import_lodash.default)(onprogress, 100, {
        leading: true,
        trailing: false,
      });
      _this2._position = 0;
      return _this2;
    }
    _createClass3(ProgressEmitter2, [
      {
        key: "_transform",
        value: function _transform(chunk, encoding, callback) {
          this._position += chunk.length;
          this._onprogress(this._position);
          callback(null, chunk);
        },
      },
    ]);
    return ProgressEmitter2;
  })(import_stream.Transform);

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/fileReader.js
  var import_fs2 = __require("fs");
  var import_is_stream = __toESM(require_is_stream());

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/sources/BufferSource.js
  function _classCallCheck5(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties4(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass4(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties4(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties4(Constructor, staticProps);
    return Constructor;
  }
  var BufferSource = /* @__PURE__ */ (function () {
    function BufferSource2(buffer) {
      _classCallCheck5(this, BufferSource2);
      this._buffer = buffer;
      this.size = buffer.length;
    }
    _createClass4(BufferSource2, [
      {
        key: "slice",
        value: function slice(start, end) {
          var value = this._buffer.slice(start, end);
          value.size = value.length;
          return Promise.resolve({
            value,
          });
        },
      },
      {
        key: "close",
        value: function close() {},
      },
    ]);
    return BufferSource2;
  })();

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/sources/FileSource.js
  var import_fs = __require("fs");
  function _classCallCheck6(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties5(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass5(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties5(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties5(Constructor, staticProps);
    return Constructor;
  }
  var FileSource = /* @__PURE__ */ (function () {
    function FileSource2(stream) {
      _classCallCheck6(this, FileSource2);
      this._stream = stream;
      this._path = stream.path.toString();
    }
    _createClass5(FileSource2, [
      {
        key: "slice",
        value: function slice(start, end) {
          var stream = (0, import_fs.createReadStream)(this._path, {
            start,
            end: end - 1,
            autoClose: true,
          });
          stream.size = end - start;
          return Promise.resolve({
            value: stream,
          });
        },
      },
      {
        key: "close",
        value: function close() {
          this._stream.destroy();
        },
      },
    ]);
    return FileSource2;
  })();

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/sources/SlicingStream.js
  var import_stream2 = __require("stream");
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof3 = function _typeof5(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof3 = function _typeof5(obj2) {
        return obj2 &&
          typeof Symbol === "function" &&
          obj2.constructor === Symbol &&
          obj2 !== Symbol.prototype
          ? "symbol"
          : typeof obj2;
      };
    }
    return _typeof3(obj);
  }
  function _classCallCheck7(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties6(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass6(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties6(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties6(Constructor, staticProps);
    return Constructor;
  }
  function _inherits3(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: { value: subClass, writable: true, configurable: true },
    });
    if (superClass) _setPrototypeOf3(subClass, superClass);
  }
  function _setPrototypeOf3(o2, p2) {
    _setPrototypeOf3 =
      Object.setPrototypeOf ||
      function _setPrototypeOf5(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
    return _setPrototypeOf3(o2, p2);
  }
  function _createSuper3(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct3();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf3(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf3(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn3(this, result);
    };
  }
  function _possibleConstructorReturn3(self2, call) {
    if (call && (_typeof3(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized3(self2);
  }
  function _assertThisInitialized3(self2) {
    if (self2 === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }
    return self2;
  }
  function _isNativeReflectConstruct3() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      );
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf3(o2) {
    _getPrototypeOf3 = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf5(o3) {
          return o3.__proto__ || Object.getPrototypeOf(o3);
        };
    return _getPrototypeOf3(o2);
  }
  var SlicingStream = /* @__PURE__ */ (function (_Transform) {
    _inherits3(SlicingStream2, _Transform);
    var _super = _createSuper3(SlicingStream2);
    function SlicingStream2(bytesToSkip, bytesToRead, source) {
      var _this;
      _classCallCheck7(this, SlicingStream2);
      _this = _super.call(this);
      _this._bytesToSkip = bytesToSkip;
      _this._bytesToRead = bytesToRead;
      _this._source = source;
      return _this;
    }
    _createClass6(SlicingStream2, [
      {
        key: "_transform",
        value: function _transform(chunk, encoding, callback) {
          var bytesSkipped = Math.min(this._bytesToSkip, chunk.length);
          this._bytesToSkip -= bytesSkipped;
          var bytesAvailable = chunk.length - bytesSkipped;
          if (bytesAvailable === 0) {
            callback(null);
            return;
          }
          var bytesToRead = Math.min(this._bytesToRead, bytesAvailable);
          this._bytesToRead -= bytesToRead;
          if (bytesToRead !== 0) {
            var data = chunk.slice(bytesSkipped, bytesSkipped + bytesToRead);
            this._source._bufLen += data.copy(
              this._source._buf,
              this._source._bufLen
            );
            this.push(data);
          }
          if (this._bytesToRead === 0) {
            this._source._stream.unpipe(this);
            this.end();
          }
          if (bytesToRead !== bytesAvailable) {
            var unusedChunk = chunk.slice(bytesSkipped + bytesToRead);
            this._source._stream.unshift(unusedChunk);
          }
          callback(null);
        },
      },
    ]);
    return SlicingStream2;
  })(import_stream2.Transform);

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/sources/StreamSource.js
  function _classCallCheck8(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties7(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass7(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties7(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties7(Constructor, staticProps);
    return Constructor;
  }
  var StreamSource = /* @__PURE__ */ (function () {
    function StreamSource2(stream, chunkSize) {
      var _this = this;
      _classCallCheck8(this, StreamSource2);
      chunkSize = +chunkSize;
      if (!isFinite(chunkSize)) {
        throw new Error(
          "cannot create source for stream without a finite value for the `chunkSize` option"
        );
      }
      this._stream = stream;
      this.size = null;
      stream.pause();
      this._done = false;
      stream.on("end", function () {
        return (_this._done = true);
      });
      this._buf = Buffer.alloc(chunkSize);
      this._bufPos = null;
      this._bufLen = 0;
    }
    _createClass7(StreamSource2, [
      {
        key: "slice",
        value: function slice(start, end) {
          if (start >= this._bufPos && start < this._bufPos + this._bufLen) {
            var bufStart = start - this._bufPos;
            var bufEnd = Math.min(this._bufLen, end - this._bufPos);
            var buf = this._buf.slice(bufStart, bufEnd);
            buf.size = buf.length;
            return Promise.resolve({
              value: buf,
            });
          }
          if (start < this._bufPos) {
            return Promise.reject(
              new Error(
                "cannot slice from position which we already seeked away"
              )
            );
          }
          if (this._done) {
            return Promise.resolve({
              value: null,
              done: this._done,
            });
          }
          var bytesToSkip = start - (this._bufPos + this._bufLen);
          this._bufLen = 0;
          this._bufPos = start;
          var bytesToRead = end - start;
          var slicingStream = new SlicingStream(bytesToSkip, bytesToRead, this);
          this._stream.pipe(slicingStream);
          return Promise.resolve({
            value: slicingStream,
          });
        },
      },
      {
        key: "close",
        value: function close() {},
      },
    ]);
    return StreamSource2;
  })();

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/fileReader.js
  function _classCallCheck9(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties8(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass8(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties8(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties8(Constructor, staticProps);
    return Constructor;
  }
  var FileReader2 = /* @__PURE__ */ (function () {
    function FileReader3() {
      _classCallCheck9(this, FileReader3);
    }
    _createClass8(FileReader3, [
      {
        key: "openFile",
        value: function openFile2(input, chunkSize) {
          if (Buffer.isBuffer(input)) {
            return Promise.resolve(new BufferSource(input));
          }
          if (input instanceof import_fs2.ReadStream && input.path != null) {
            return Promise.resolve(new FileSource(input));
          }
          if (import_is_stream.default.readable(input)) {
            return Promise.resolve(new StreamSource(input, chunkSize));
          }
          return Promise.reject(
            new Error(
              "source object may only be an instance of Buffer or Readable in this environment"
            )
          );
        },
      },
    ]);
    return FileReader3;
  })();

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/fingerprint.js
  var fs = __toESM(__require("fs"));
  var path = __toESM(__require("path"));
  var import_crypto = __require("crypto");
  function fingerprint(file, options) {
    if (Buffer.isBuffer(file)) {
      var blockSize = 64 * 1024;
      var content = file.slice(0, Math.min(blockSize, file.length));
      var hash4 = (0, import_crypto.createHash)("md5")
        .update(content)
        .digest("hex");
      var _fingerprint = [
        "node-buffer",
        hash4,
        file.length,
        options.endpoint,
      ].join("-");
      return Promise.resolve(_fingerprint);
    }
    if (file instanceof fs.ReadStream && file.path != null) {
      return new Promise(function (resolve2, reject) {
        var name2 = path.resolve(file.path);
        fs.stat(file.path, function (err, info) {
          if (err) {
            return reject(err);
          }
          var fingerprint2 = [
            "node-file",
            name2,
            info.size,
            info.mtime.getTime(),
            options.endpoint,
          ].join("-");
          resolve2(fingerprint2);
        });
      });
    }
    return Promise.resolve(null);
  }

  // node_modules/@skynetlabs/tus-js-client/lib.esm/node/index.js
  function _typeof4(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof4 = function _typeof5(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof4 = function _typeof5(obj2) {
        return obj2 &&
          typeof Symbol === "function" &&
          obj2.constructor === Symbol &&
          obj2 !== Symbol.prototype
          ? "symbol"
          : typeof obj2;
      };
    }
    return _typeof4(obj);
  }
  function _classCallCheck10(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties9(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass9(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties9(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties9(Constructor, staticProps);
    return Constructor;
  }
  function _inherits4(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: { value: subClass, writable: true, configurable: true },
    });
    if (superClass) _setPrototypeOf4(subClass, superClass);
  }
  function _setPrototypeOf4(o2, p2) {
    _setPrototypeOf4 =
      Object.setPrototypeOf ||
      function _setPrototypeOf5(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
    return _setPrototypeOf4(o2, p2);
  }
  function _createSuper4(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct4();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf4(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf4(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn4(this, result);
    };
  }
  function _possibleConstructorReturn4(self2, call) {
    if (call && (_typeof4(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized4(self2);
  }
  function _assertThisInitialized4(self2) {
    if (self2 === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    }
    return self2;
  }
  function _isNativeReflectConstruct4() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      );
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf4(o2) {
    _getPrototypeOf4 = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function _getPrototypeOf5(o3) {
          return o3.__proto__ || Object.getPrototypeOf(o3);
        };
    return _getPrototypeOf4(o2);
  }
  function ownKeys3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread3(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys3(Object(source), true).forEach(function (key2) {
          _defineProperty3(target, key2, source[key2]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(
          target,
          Object.getOwnPropertyDescriptors(source)
        );
      } else {
        ownKeys3(Object(source)).forEach(function (key2) {
          Object.defineProperty(
            target,
            key2,
            Object.getOwnPropertyDescriptor(source, key2)
          );
        });
      }
    }
    return target;
  }
  function _defineProperty3(obj, key2, value) {
    if (key2 in obj) {
      Object.defineProperty(obj, key2, {
        value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key2] = value;
    }
    return obj;
  }
  var defaultOptions2 = _objectSpread3(
    _objectSpread3({}, upload_default.defaultOptions),
    {},
    {
      httpStack: new NodeHttpStack(),
      fileReader: new FileReader2(),
      urlStorage: new NoopUrlStorage(),
      fingerprint,
    }
  );
  var Upload = /* @__PURE__ */ (function (_BaseUpload) {
    _inherits4(Upload2, _BaseUpload);
    var _super = _createSuper4(Upload2);
    function Upload2() {
      var file =
        arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      var options =
        arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck10(this, Upload2);
      options = _objectSpread3(_objectSpread3({}, defaultOptions2), options);
      return _super.call(this, file, options);
    }
    _createClass9(Upload2, null, [
      {
        key: "terminate",
        value: function terminate(url, options, cb) {
          options = _objectSpread3(
            _objectSpread3({}, defaultOptions2),
            options
          );
          return upload_default.terminate(url, options, cb);
        },
      },
    ]);
    return Upload2;
  })(upload_default);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/file.js
  var import_lite = __toESM(require_lite(), 1);
  var import_path_browserify = __toESM(require_path_browserify(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/string.js
  var import_buffer = __require("buffer");

  // node_modules/@lumeweb/skynet-js/dist/mjs/skylink/parse.js
  var import_url_parse3 = __toESM(require_url_parse(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/url.js
  var import_skynet_mysky_utils = __toESM(require_dist(), 1);
  var import_url_join = __toESM(require_url_join(), 1);
  var import_url_parse2 = __toESM(require_url_parse(), 1);
  var URI_HANDSHAKE_PREFIX = "hns://";
  var URI_SKYNET_PREFIX = "sia://";
  function defaultPortalUrl() {
    if (typeof window === "undefined") return "/";
    return window.location.origin;
  }
  function addPath(url, path3) {
    validateString("url", url, "parameter");
    validateString("path", path3, "parameter");
    path3 = trimForwardSlash(path3);
    let str;
    if (url === "localhost") {
      str = `localhost/${path3}`;
    } else {
      const urlObj = new URL(url);
      urlObj.pathname = path3;
      str = urlObj.toString();
    }
    return trimSuffix(str, "/");
  }
  function addUrlSubdomain(url, subdomain) {
    const urlObj = new URL(url);
    urlObj.hostname = `${subdomain}.${urlObj.hostname}`;
    const str = urlObj.toString();
    return trimSuffix(str, "/");
  }
  function addUrlQuery(url, query) {
    const parsed = (0, import_url_parse2.default)(url, true);
    query = __spreadValues(__spreadValues({}, parsed.query), query);
    parsed.set("query", query);
    return parsed.toString();
  }
  function ensureUrlPrefix(url) {
    if (url === "localhost") {
      return "http://localhost/";
    }
    if (!/^https?:(\/\/)?/i.test(url)) {
      return `https://${url}`;
    }
    return url;
  }
  function makeUrl(...args) {
    if (args.length === 0) {
      throwValidationError("args", args, "parameter", "non-empty");
    }
    return (0, import_skynet_mysky_utils.ensureUrl)(
      args.reduce((acc, cur) => (0, import_url_join.default)(acc, cur))
    );
  }
  function getFullDomainUrlForPortal(portalUrl, domain) {
    validateString("portalUrl", portalUrl, "parameter");
    validateString("domain", domain, "parameter");
    portalUrl = ensureUrlPrefix(trimUriPrefix(portalUrl, "http://"));
    domain = trimUriPrefix(domain, URI_SKYNET_PREFIX);
    domain = trimForwardSlash(domain);
    let path3;
    [domain, path3] = domain.split(/\/(.+)/);
    let url;
    if (domain === "localhost") {
      url = "localhost";
    } else {
      url = addUrlSubdomain(portalUrl, domain);
    }
    if (path3) {
      url = addPath(url, path3);
    }
    return url;
  }
  function extractDomainForPortal(portalUrl, fullDomain) {
    validateString("portalUrl", portalUrl, "parameter");
    validateString("fullDomain", fullDomain, "parameter");
    let path3;
    try {
      const fullDomainObj = new URL(fullDomain);
      fullDomain = fullDomainObj.hostname;
      path3 = fullDomainObj.pathname;
      path3 = trimForwardSlash(path3);
    } catch {
      fullDomain = trimForwardSlash(fullDomain);
      [fullDomain, path3] = fullDomain.split(/\/(.+)/);
      fullDomain = fullDomain.toLowerCase();
    }
    const portalUrlObj = new URL(ensureUrlPrefix(portalUrl));
    const portalDomain = trimForwardSlash(portalUrlObj.hostname);
    let domain = trimSuffix(fullDomain, portalDomain, 1);
    domain = trimSuffix(domain, ".");
    if (path3 && path3 !== "") {
      path3 = trimForwardSlash(path3);
      domain = `${domain}/${path3}`;
    }
    return domain;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skylink/parse.js
  var defaultParseSkylinkOptions = {
    fromSubdomain: false,
    includePath: false,
    onlyPath: false,
  };
  var SKYLINK_MATCHER = "([a-zA-Z0-9_-]{46})";
  var SKYLINK_MATCHER_SUBDOMAIN = "([a-z0-9_-]{55})";
  var SKYLINK_DIRECT_REGEX = new RegExp(`^${SKYLINK_MATCHER}$`);
  var SKYLINK_PATHNAME_REGEX = new RegExp(`^/?${SKYLINK_MATCHER}((/.*)?)$`);
  var SKYLINK_SUBDOMAIN_REGEX = new RegExp(
    `^${SKYLINK_MATCHER_SUBDOMAIN}(\\..*)?$`
  );
  var SKYLINK_DIRECT_MATCH_POSITION = 1;
  var SKYLINK_PATH_MATCH_POSITION = 2;
  function parseSkylink(skylinkUrl, customOptions) {
    validateString("skylinkUrl", skylinkUrl, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      defaultParseSkylinkOptions
    );
    const opts = __spreadValues(
      __spreadValues({}, defaultParseSkylinkOptions),
      customOptions
    );
    if (opts.includePath && opts.onlyPath) {
      throw new Error(
        "The includePath and onlyPath options cannot both be set"
      );
    }
    if (opts.includePath && opts.fromSubdomain) {
      throw new Error(
        "The includePath and fromSubdomain options cannot both be set"
      );
    }
    if (opts.fromSubdomain) {
      return parseSkylinkBase32(skylinkUrl, opts);
    }
    skylinkUrl = trimUriPrefix(skylinkUrl, URI_SKYNET_PREFIX);
    const matchDirect = skylinkUrl.match(SKYLINK_DIRECT_REGEX);
    if (matchDirect) {
      if (opts.onlyPath) {
        return "";
      }
      return matchDirect[SKYLINK_DIRECT_MATCH_POSITION];
    }
    const parsed = (0, import_url_parse3.default)(skylinkUrl, {});
    const skylinkAndPath = trimSuffix(parsed.pathname, "/");
    const matchPathname = skylinkAndPath.match(SKYLINK_PATHNAME_REGEX);
    if (!matchPathname) return null;
    const path3 = matchPathname[SKYLINK_PATH_MATCH_POSITION];
    if (opts.includePath) return trimForwardSlash(skylinkAndPath);
    else if (opts.onlyPath) return path3;
    else return matchPathname[SKYLINK_DIRECT_MATCH_POSITION];
  }
  function parseSkylinkBase32(skylinkUrl, customOptions) {
    const opts = __spreadValues(
      __spreadValues({}, defaultParseSkylinkOptions),
      customOptions
    );
    const parsed = (0, import_url_parse3.default)(skylinkUrl, {});
    const matchHostname = parsed.hostname.match(SKYLINK_SUBDOMAIN_REGEX);
    if (matchHostname) {
      if (opts.onlyPath) {
        return trimSuffix(parsed.pathname, "/");
      }
      return matchHostname[SKYLINK_DIRECT_MATCH_POSITION];
    }
    return null;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/validation.js
  function validateBigint(name2, value, valueKind) {
    if (typeof value !== "bigint") {
      throwValidationError(name2, value, valueKind, "type 'bigint'");
    }
  }
  function validateBoolean(name2, value, valueKind) {
    if (typeof value !== "boolean") {
      throwValidationError(name2, value, valueKind, "type 'boolean'");
    }
  }
  function validateObject(name2, value, valueKind) {
    if (typeof value !== "object") {
      throwValidationError(name2, value, valueKind, "type 'object'");
    }
    if (value === null) {
      throwValidationError(name2, value, valueKind, "non-null");
    }
  }
  function validateOptionalObject(name2, value, valueKind, model) {
    if (!value) {
      return;
    }
    validateObject(name2, value, valueKind);
    for (const property in value) {
      if (!(property in model)) {
        throw new Error(
          `Object ${valueKind} '${name2}' contains unexpected property '${property}'`
        );
      }
    }
  }
  function validateNumber(name2, value, valueKind) {
    if (typeof value !== "number") {
      throwValidationError(name2, value, valueKind, "type 'number'");
    }
  }
  function validateSkylinkString(name2, value, valueKind) {
    validateString(name2, value, valueKind);
    const parsedSkylink = parseSkylink(value);
    if (parsedSkylink === null) {
      throw validationError(
        name2,
        value,
        valueKind,
        `valid skylink of type 'string'`
      );
    }
    return parsedSkylink;
  }
  function validateString(name2, value, valueKind) {
    if (typeof value !== "string") {
      throwValidationError(name2, value, valueKind, "type 'string'");
    }
  }
  function validateStringLen(name2, value, valueKind, len) {
    validateString(name2, value, valueKind);
    const actualLen = value.length;
    if (actualLen !== len) {
      throwValidationError(
        name2,
        value,
        valueKind,
        `type 'string' of length ${len}, was length ${actualLen}`
      );
    }
  }
  function validateHexString(name2, value, valueKind) {
    validateString(name2, value, valueKind);
    if (!isHexString(value)) {
      throwValidationError(name2, value, valueKind, "a hex-encoded string");
    }
  }
  function validateUint8Array(name2, value, valueKind) {
    if (!(value instanceof Uint8Array)) {
      throwValidationError(name2, value, valueKind, "type 'Uint8Array'");
    }
  }
  function validateUint8ArrayLen(name2, value, valueKind, len) {
    validateUint8Array(name2, value, valueKind);
    const actualLen = value.length;
    if (actualLen !== len) {
      throwValidationError(
        name2,
        value,
        valueKind,
        `type 'Uint8Array' of length ${len}, was length ${actualLen}`
      );
    }
  }
  function throwValidationError(name2, value, valueKind, expected) {
    throw validationError(name2, value, valueKind, expected);
  }
  function validationError(name2, value, valueKind, expected) {
    let actualValue;
    if (value === void 0) {
      actualValue = "type 'undefined'";
    } else if (value === null) {
      actualValue = "type 'null'";
    } else {
      actualValue = `type '${typeof value}', value '${value}'`;
    }
    return new Error(
      `Expected ${valueKind} '${name2}' to be ${expected}, was ${actualValue}`
    );
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/string.js
  function ensurePrefix(str, prefix) {
    if (!str.startsWith(prefix)) {
      str = `${prefix}${str}`;
    }
    return str;
  }
  function trimForwardSlash(str) {
    return trimPrefix(trimSuffix(str, "/"), "/");
  }
  function trimPrefix(str, prefix, limit) {
    while (str.startsWith(prefix)) {
      if (limit !== void 0 && limit <= 0) {
        break;
      }
      str = str.slice(prefix.length);
      if (limit) {
        limit -= 1;
      }
    }
    return str;
  }
  function trimSuffix(str, suffix, limit) {
    while (str.endsWith(suffix)) {
      if (limit !== void 0 && limit <= 0) {
        break;
      }
      str = str.substring(0, str.length - suffix.length);
      if (limit) {
        limit -= 1;
      }
    }
    return str;
  }
  function trimUriPrefix(str, prefix) {
    const longPrefix = prefix.toLowerCase();
    const shortPrefix = trimSuffix(longPrefix, "/");
    const strLower = str.toLowerCase();
    if (strLower.startsWith(longPrefix)) {
      return str.slice(longPrefix.length);
    }
    if (strLower.startsWith(shortPrefix)) {
      return str.slice(shortPrefix.length);
    }
    return str;
  }
  function stringToUint8ArrayUtf8(str) {
    validateString("str", str, "parameter");
    return Uint8Array.from(import_buffer.Buffer.from(str, "utf-8"));
  }
  function uint8ArrayToStringUtf8(array) {
    return import_buffer.Buffer.from(array).toString("utf-8");
  }
  function hexToUint8Array(str) {
    validateHexString("str", str, "parameter");
    const matches = str.match(/.{1,2}/g);
    if (matches === null) {
      throw validationError("str", str, "parameter", "a hex-encoded string");
    }
    return new Uint8Array(matches.map((byte) => parseInt(byte, 16)));
  }
  function isHexString(str) {
    validateString("str", str, "parameter");
    return /^[0-9A-Fa-f]*$/g.test(str);
  }
  function toHexString(byteArray) {
    let s2 = "";
    byteArray.forEach(function (byte) {
      s2 += ("0" + (byte & 255).toString(16)).slice(-2);
    });
    return s2;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/file.js
  function getFileMimeType(file) {
    if (file.type) return file.type;
    let ext = import_path_browserify.default.extname(file.name);
    ext = trimPrefix(ext, ".");
    if (ext !== "") {
      const mimeType = import_lite.default.getType(ext);
      if (mimeType) {
        return mimeType;
      }
    }
    return "";
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/options.js
  var DEFAULT_BASE_OPTIONS = {
    APIKey: "",
    customUserAgent: "",
    customCookie: "",
    onDownloadProgress: void 0,
    onUploadProgress: void 0,
    loginFn: void 0,
  };
  function extractOptions(opts, model) {
    const result = {};
    for (const property in model) {
      if (!Object.prototype.hasOwnProperty.call(model, property)) {
        continue;
      }
      if (!Object.prototype.hasOwnProperty.call(opts, property)) {
        throw new Error(`Property '${property}' not found`);
      }
      result[property] = opts[property];
    }
    return result;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/crypto.js
  var import_sjcl = __toESM(require_sjcl(), 1);
  var import_blakejs = __toESM(require_blakejs(), 1);
  var import_randombytes = __toESM(require_randombytes(), 1);
  var import_tweetnacl = __toESM(require_nacl_fast(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/encoding.js
  var import_base32_decode = __toESM(require_base32_decode(), 1);
  var import_base32_encode = __toESM(require_base32_encode(), 1);
  var import_base64_js = __toESM(require_base64_js(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/number.js
  var MAX_REVISION = BigInt("18446744073709551615");
  function assertUint64(int) {
    validateBigint("int", int, "parameter");
    if (int < BigInt(0)) {
      throw new Error(
        `Argument ${int} must be an unsigned 64-bit integer; was negative`
      );
    }
    if (int > MAX_REVISION) {
      throw new Error(
        `Argument ${int} does not fit in a 64-bit unsigned integer; exceeds 2^64-1`
      );
    }
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/encoding.js
  var BASE32_ENCODING_VARIANT = "RFC4648-HEX";
  function decodeSkylinkBase32(skylink) {
    validateStringLen(
      "skylink",
      skylink,
      "parameter",
      BASE32_ENCODED_SKYLINK_SIZE
    );
    skylink = skylink.toUpperCase();
    const bytes = (0, import_base32_decode.default)(
      skylink,
      BASE32_ENCODING_VARIANT
    );
    return new Uint8Array(bytes);
  }
  function encodeSkylinkBase32(bytes) {
    return (0, import_base32_encode.default)(bytes, BASE32_ENCODING_VARIANT, {
      padding: false,
    }).toLowerCase();
  }
  function decodeSkylinkBase64(skylink) {
    validateStringLen(
      "skylink",
      skylink,
      "parameter",
      BASE64_ENCODED_SKYLINK_SIZE
    );
    skylink = `${skylink}==`;
    skylink = skylink.replace(/-/g, "+").replace(/_/g, "/");
    return (0, import_base64_js.toByteArray)(skylink);
  }
  function encodeSkylinkBase64(bytes) {
    let base64 = (0, import_base64_js.fromByteArray)(bytes);
    base64 = base64.replace(/\+/g, "-").replace(/\//g, "_");
    return base64.slice(0, -2);
  }
  function encodeNumber(num) {
    const encoded = new Uint8Array(8);
    for (let index = 0; index < encoded.length; index++) {
      const byte = num & 255;
      encoded[index] = byte;
      num = num >> 8;
    }
    return encoded;
  }
  function encodeBigintAsUint64(int) {
    assertUint64(int);
    const encoded = new Uint8Array(8);
    for (let index = 0; index < encoded.length; index++) {
      const byte = int & BigInt(255);
      encoded[index] = Number(byte);
      int = int >> BigInt(8);
    }
    return encoded;
  }
  function encodePrefixedBytes(bytes) {
    const len = bytes.length;
    const buf = new ArrayBuffer(8 + len);
    const view = new DataView(buf);
    view.setUint32(0, len, true);
    const uint8Bytes = new Uint8Array(buf);
    uint8Bytes.set(bytes, 8);
    return uint8Bytes;
  }
  function encodeUtf8String(str) {
    const byteArray = stringToUint8ArrayUtf8(str);
    const encoded = new Uint8Array(8 + byteArray.length);
    encoded.set(encodeNumber(byteArray.length));
    encoded.set(byteArray, 8);
    return encoded;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/crypto.js
  var { hash, sign } = import_tweetnacl.default;
  var { misc, codec } = import_sjcl.default;
  var { blake2bFinal, blake2bInit, blake2bUpdate } = import_blakejs.default;
  var HASH_LENGTH = 32;
  var PUBLIC_KEY_LENGTH = sign.publicKeyLength * 2;
  var PRIVATE_KEY_LENGTH = sign.secretKeyLength * 2;
  var SIGNATURE_LENGTH = sign.signatureLength;
  function newHash() {
    return blake2bInit(HASH_LENGTH);
  }
  function hashAll(...args) {
    const hasher = newHash();
    args.forEach((arg) => blake2bUpdate(hasher, arg));
    return blake2bFinal(hasher);
  }
  function hashDataKey(dataKey) {
    return hashAll(encodeUtf8String(dataKey));
  }
  function hashRegistryEntry(registryEntry, hashedDataKeyHex) {
    let dataKeyBytes;
    if (hashedDataKeyHex) {
      dataKeyBytes = hexToUint8Array(registryEntry.dataKey);
    } else {
      dataKeyBytes = hashDataKey(registryEntry.dataKey);
    }
    const dataBytes = encodePrefixedBytes(registryEntry.data);
    return hashAll(
      dataKeyBytes,
      dataBytes,
      encodeBigintAsUint64(registryEntry.revision)
    );
  }
  function sha512(message) {
    if (typeof message === "string") {
      return hash(stringToUint8ArrayUtf8(message));
    } else {
      return hash(message);
    }
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skylink/sia.js
  var BASE32_ENCODED_SKYLINK_SIZE = 55;
  var BASE64_ENCODED_SKYLINK_SIZE = 46;
  var ERR_SKYLINK_INCORRECT_SIZE = "skylink has incorrect size";
  var RAW_SKYLINK_SIZE = 34;
  var EMPTY_SKYLINK = new Uint8Array(RAW_SKYLINK_SIZE);
  var SiaSkylink = class {
    constructor(bitfield, merkleRoot) {
      this.bitfield = bitfield;
      this.merkleRoot = merkleRoot;
      validateNumber("bitfield", bitfield, "constructor parameter");
      validateUint8ArrayLen(
        "merkleRoot",
        merkleRoot,
        "constructor parameter",
        32
      );
    }
    toBytes() {
      const buf = new ArrayBuffer(RAW_SKYLINK_SIZE);
      const view = new DataView(buf);
      view.setUint16(0, this.bitfield, true);
      const uint8Bytes = new Uint8Array(buf);
      uint8Bytes.set(this.merkleRoot, 2);
      return uint8Bytes;
    }
    toString() {
      return encodeSkylinkBase64(this.toBytes());
    }
    static fromBytes(data) {
      validateUint8ArrayLen("data", data, "parameter", RAW_SKYLINK_SIZE);
      const view = new DataView(data.buffer);
      const bitfield = view.getUint16(0, true);
      const merkleRoot = new Uint8Array(32);
      merkleRoot.set(data.slice(2));
      return new SiaSkylink(bitfield, merkleRoot);
    }
    static fromString(skylink) {
      const bytes = decodeSkylink(skylink);
      return SiaSkylink.fromBytes(bytes);
    }
  };
  function isSkylinkV1(skylink) {
    const raw = decodeSkylink(skylink);
    const view = new DataView(raw.buffer);
    const bitfield = view.getUint16(0, true);
    return isBitfieldSkylinkV1(bitfield);
  }
  function isBitfieldSkylinkV1(bitfield) {
    return (bitfield & 3) === 0;
  }
  var SPECIFIER_LEN = 16;
  function newSpecifier(name2) {
    validateString("name", name2, "parameter");
    const specifier = new Uint8Array(SPECIFIER_LEN);
    specifier.set(stringToUint8ArrayUtf8(name2));
    return specifier;
  }
  var PUBLIC_KEY_SIZE = 32;
  var SiaPublicKey = class {
    constructor(algorithm, key2) {
      this.algorithm = algorithm;
      this.key = key2;
    }
    marshalSia() {
      const bytes = new Uint8Array(SPECIFIER_LEN + 8 + PUBLIC_KEY_SIZE);
      bytes.set(this.algorithm);
      bytes.set(encodePrefixedBytes(this.key), SPECIFIER_LEN);
      return bytes;
    }
  };
  function newEd25519PublicKey(publicKey) {
    validateHexString("publicKey", publicKey, "parameter");
    const algorithm = newSpecifier("ed25519");
    const publicKeyBytes = hexToUint8Array(publicKey);
    validateUint8ArrayLen(
      "publicKeyBytes",
      publicKeyBytes,
      "converted publicKey",
      PUBLIC_KEY_SIZE
    );
    return new SiaPublicKey(algorithm, publicKeyBytes);
  }
  function newSkylinkV2(siaPublicKey, tweak) {
    const version89 = 2;
    const bitfield = version89 - 1;
    const merkleRoot = deriveRegistryEntryID(siaPublicKey, tweak);
    return new SiaSkylink(bitfield, merkleRoot);
  }
  function decodeSkylink(encoded) {
    encoded = trimUriPrefix(encoded, URI_SKYNET_PREFIX);
    let bytes;
    if (encoded.length === BASE32_ENCODED_SKYLINK_SIZE) {
      bytes = decodeSkylinkBase32(encoded);
    } else if (encoded.length === BASE64_ENCODED_SKYLINK_SIZE) {
      bytes = decodeSkylinkBase64(encoded);
    } else {
      throw new Error(ERR_SKYLINK_INCORRECT_SIZE);
    }
    if (bytes.length != RAW_SKYLINK_SIZE) {
      throw new Error("failed to load skylink data");
    }
    return bytes;
  }
  function deriveRegistryEntryID(pubKey, tweak) {
    return hashAll(pubKey.marshalSia(), tweak);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skylink/format.js
  function convertSkylinkToBase32(skylink) {
    skylink = trimUriPrefix(skylink, URI_SKYNET_PREFIX);
    validateStringLen(
      "skylink",
      skylink,
      "parameter",
      BASE64_ENCODED_SKYLINK_SIZE
    );
    const bytes = decodeSkylinkBase64(skylink);
    return encodeSkylinkBase32(bytes);
  }
  function formatSkylink(skylink) {
    validateString("skylink", skylink, "parameter");
    if (skylink === "") {
      return skylink;
    }
    if (!skylink.startsWith(URI_SKYNET_PREFIX)) {
      skylink = `${URI_SKYNET_PREFIX}${skylink}`;
    }
    return skylink;
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/request.js
  function buildRequestHeaders(baseHeaders, customUserAgent, customCookie) {
    const returnHeaders = __spreadValues({}, baseHeaders);
    if (customUserAgent) {
      returnHeaders["User-Agent"] = customUserAgent;
    }
    if (customCookie) {
      returnHeaders["Cookie"] = customCookie;
    }
    return returnHeaders;
  }
  async function buildRequestUrl(client, parts) {
    let url;
    if (!parts.baseUrl) {
      url = await client.portalUrl();
    } else {
      url = parts.baseUrl;
    }
    url = ensureUrlPrefix(url);
    if (parts.endpointPath) {
      url = makeUrl(url, parts.endpointPath);
    }
    if (parts.extraPath) {
      url = makeUrl(url, parts.extraPath);
    }
    if (parts.subdomain) {
      url = addUrlSubdomain(url, parts.subdomain);
    }
    if (parts.query) {
      url = addUrlQuery(url, parts.query);
    }
    return url;
  }
  var ExecuteRequestError = class extends Error {
    constructor(message, axiosError, responseStatus, responseMessage) {
      if (axiosError instanceof ExecuteRequestError) {
        throw new Error(
          "Could not instantiate an `ExecuteRequestError` from an `ExecuteRequestError`, an original error from axios was expected"
        );
      }
      super(message);
      this.name = "ExecuteRequestError";
      this.originalError = axiosError;
      this.responseStatus = responseStatus;
      this.responseMessage = responseMessage;
      this.config = axiosError.config;
      this.code = axiosError.code;
      this.request = axiosError.request;
      this.response = axiosError.response;
      this.isAxiosError = axiosError.isAxiosError;
      this.toJSON = axiosError.toJSON;
      Object.setPrototypeOf(this, ExecuteRequestError.prototype);
    }
    static From(err) {
      if (!err.response) {
        return new ExecuteRequestError(
          `Error response did not contain expected field 'response'.`,
          err,
          null,
          null
        );
      }
      if (!err.response.status) {
        return new ExecuteRequestError(
          `Error response did not contain expected field 'response.status'.`,
          err,
          null,
          null
        );
      }
      const status = err.response.status;
      if (!err.response.data) {
        return new ExecuteRequestError(
          `Request failed with status code ${status}`,
          err,
          status,
          null
        );
      }
      if (!err.response.data.message) {
        return new ExecuteRequestError(
          `Request failed with status code ${status}`,
          err,
          status,
          null
        );
      }
      return new ExecuteRequestError(
        `Request failed with status code ${err.response.status}: ${err.response.data.message}`,
        err,
        status,
        err.response.data.message
      );
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/upload.js
  var TUS_CHUNK_SIZE = (1 << 22) * 10;
  var TUS_PARALLEL_UPLOADS = 2;
  var DEFAULT_TUS_RETRY_DELAYS = [0, 5e3, 15e3, 6e4, 3e5, 6e5];
  var PORTAL_FILE_FIELD_NAME = "file";
  var PORTAL_DIRECTORY_FILE_FIELD_NAME = "files[]";
  var DEFAULT_UPLOAD_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointUpload: "/skynet/skyfile",
      endpointLargeUpload: "/skynet/tus",
      customFilename: "",
      errorPages: void 0,
      largeFileSize: TUS_CHUNK_SIZE,
      numParallelUploads: TUS_PARALLEL_UPLOADS,
      retryDelays: DEFAULT_TUS_RETRY_DELAYS,
      tryFiles: void 0,
    }
  );
  async function uploadFile(file, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_UPLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    if (file.size < opts.largeFileSize) {
      return this.uploadSmallFile(file, opts);
    } else {
      return this.uploadLargeFile(file, opts);
    }
  }
  async function uploadSmallFile(file, customOptions) {
    const response = await this.uploadSmallFileRequest(file, customOptions);
    validateUploadResponse(response);
    const skylink = formatSkylink(response.data.skylink);
    return { skylink };
  }
  async function uploadSmallFileRequest(file, customOptions) {
    validateFile("file", file, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_UPLOAD_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_UPLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const formData = new FormData();
    file = ensureFileObjectConsistency(file);
    if (opts.customFilename) {
      formData.append(PORTAL_FILE_FIELD_NAME, file, opts.customFilename);
    } else {
      formData.append(PORTAL_FILE_FIELD_NAME, file);
    }
    const response = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        endpointPath: opts.endpointUpload,
        method: "post",
        data: formData,
      })
    );
    return response;
  }
  async function uploadLargeFile(file, customOptions) {
    const response = await this.uploadLargeFileRequest(file, customOptions);
    validateLargeUploadResponse(response);
    let skylink = response.headers["skynet-skylink"];
    skylink = formatSkylink(skylink);
    return { skylink };
  }
  async function uploadLargeFileRequest(file, customOptions) {
    var _a;
    validateFile("file", file, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_UPLOAD_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_UPLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await buildRequestUrl(this, {
      endpointPath: opts.endpointLargeUpload,
    });
    const headers = buildRequestHeaders(
      void 0,
      opts.customUserAgent,
      opts.customCookie
    );
    file = ensureFileObjectConsistency(file);
    let filename = file.name;
    if (opts.customFilename) {
      filename = opts.customFilename;
    }
    const onProgress =
      opts.onUploadProgress &&
      function (bytesSent, bytesTotal) {
        const progress = bytesSent / bytesTotal;
        opts.onUploadProgress(progress, {
          loaded: bytesSent,
          total: bytesTotal,
        });
      };
    const resp = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        endpointPath: opts.endpointLargeUpload,
        method: "options",
      })
    );
    let parallelUploads = 1;
    let splitSizeIntoParts2 = void 0;
    if (
      (_a = resp.headers["tus-extension"]) === null || _a === void 0
        ? void 0
        : _a.includes("concatenation")
    ) {
      parallelUploads = opts.numParallelUploads;
      if (parallelUploads > Math.ceil(file.size / TUS_CHUNK_SIZE)) {
        parallelUploads = Math.ceil(file.size / TUS_CHUNK_SIZE);
      }
      splitSizeIntoParts2 = splitSizeIntoChunkAlignedParts;
    }
    return new Promise((resolve2, reject) => {
      const tusOpts = {
        endpoint: url,
        chunkSize: TUS_CHUNK_SIZE,
        retryDelays: opts.retryDelays,
        metadata: {
          filename,
          filetype: file.type,
        },
        parallelUploads,
        splitSizeIntoParts: splitSizeIntoParts2,
        headers,
        onProgress,
        onBeforeRequest: function (req) {
          const xhr = req.getUnderlyingObject();
          xhr.withCredentials = true;
        },
        onError: (error) => {
          const res = error.originalResponse;
          const newError = res
            ? new Error(res.getBody().trim()) || error
            : error;
          reject(newError);
        },
        onSuccess: async () => {
          if (!upload.url) {
            reject(new Error("'upload.url' was not set"));
            return;
          }
          try {
            const resp2 = await this.executeRequest(
              __spreadProps(__spreadValues({}, opts), {
                url: upload.url,
                method: "head",
                headers: __spreadProps(__spreadValues({}, headers), {
                  "tus-resumable": "1.0.0",
                }),
              })
            );
            resolve2(resp2);
          } catch (err) {
            reject(err);
          }
        },
      };
      const upload = new Upload(file, tusOpts);
      upload.start();
    });
  }
  async function uploadDirectory(directory, filename, customOptions) {
    const response = await this.uploadDirectoryRequest(
      directory,
      filename,
      customOptions
    );
    validateUploadResponse(response);
    const skylink = formatSkylink(response.data.skylink);
    return { skylink };
  }
  async function uploadDirectoryRequest(directory, filename, customOptions) {
    validateObject("directory", directory, "parameter");
    validateString("filename", filename, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_UPLOAD_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_UPLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const formData = new FormData();
    Object.entries(directory).forEach(([path3, file]) => {
      file = ensureFileObjectConsistency(file);
      formData.append(PORTAL_DIRECTORY_FILE_FIELD_NAME, file, path3);
    });
    const query = { filename };
    if (opts.tryFiles) {
      query.tryfiles = JSON.stringify(opts.tryFiles);
    }
    if (opts.errorPages) {
      query.errorpages = JSON.stringify(opts.errorPages);
    }
    const response = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        endpointPath: opts.endpointUpload,
        method: "post",
        data: formData,
        query,
      })
    );
    return response;
  }
  function splitSizeIntoChunkAlignedParts(totalSize, partCount) {
    const partSizes = new Array(partCount).fill(0);
    const leftover = totalSize % TUS_CHUNK_SIZE;
    let lastPart = 0;
    for (let i = 0; i < Math.floor(totalSize / TUS_CHUNK_SIZE); i++) {
      partSizes[i % partCount] += TUS_CHUNK_SIZE;
      if (i > lastPart) lastPart = i;
    }
    partSizes[Math.min(lastPart + 1, partCount - 1)] += leftover;
    const parts = [];
    let lastBoundary = 0;
    for (let i = 0; i < partCount; i++) {
      parts.push({
        start: lastBoundary,
        end: lastBoundary + partSizes[i],
      });
      lastBoundary = parts[i].end;
    }
    return parts;
  }
  function ensureFileObjectConsistency(file) {
    return new File([file], file.name, { type: getFileMimeType(file) });
  }
  function validateFile(name2, value, valueKind) {
    if (!(value instanceof File)) {
      throwValidationError(name2, value, valueKind, "type 'File'");
    }
  }
  function validateUploadResponse(response) {
    try {
      if (!response.data) {
        throw new Error("response.data field missing");
      }
      validateString("skylink", response.data.skylink, "upload response field");
    } catch (err) {
      throw new Error(
        `Did not get a complete upload response despite a successful request. Please try again and report this issue to the devs if it persists. ${err}`
      );
    }
  }
  function validateLargeUploadResponse(response) {
    try {
      if (!response.headers) {
        throw new Error("response.headers field missing");
      }
      validateString(
        'response.headers["skynet-skylink"]',
        response.headers["skynet-skylink"],
        "upload response field"
      );
    } catch (err) {
      throw new Error(
        `Did not get a complete upload response despite a successful request. Please try again and report this issue to the devs if it persists. Error: ${err}`
      );
    }
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/registry.js
  var import_buffer2 = __require("buffer");
  var import_tweetnacl2 = __toESM(require_nacl_fast(), 1);
  var import_base64_js2 = __toESM(require_base64_js(), 1);
  var { sign: sign2 } = import_tweetnacl2.default;
  var DEFAULT_GET_ENTRY_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointGetEntry: "/skynet/registry",
      hashedDataKeyHex: false,
    }
  );
  var DEFAULT_SET_ENTRY_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointSetEntry: "/skynet/registry",
      hashedDataKeyHex: false,
    }
  );
  var DEFAULT_GET_ENTRY_TIMEOUT = 5;
  var REGEX_REVISION_NO_QUOTES = /"revision":\s*([0-9]+)/;
  var REGISTRY_TYPE_WITHOUT_PUBKEY = 1;
  var REGEX_REVISION_WITH_QUOTES = /"revision":\s*"([0-9]+)"/;
  var ED25519_PREFIX = "ed25519:";
  async function getEntry(publicKey, dataKey, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.registry.getEntryUrl(publicKey, dataKey, opts);
    let response;
    try {
      response = await this.executeRequest(
        __spreadProps(__spreadValues({}, opts), {
          url,
          method: "get",
          transformResponse: function (data2) {
            if (data2 === void 0) {
              return {};
            }
            data2 = data2.replace(REGEX_REVISION_NO_QUOTES, '"revision":"$1"');
            try {
              return JSON.parse(data2);
            } catch {
              return data2;
            }
          },
        })
      );
    } catch (err) {
      return handleGetEntryErrResponse(err);
    }
    try {
      validateString(
        "response.data.data",
        response.data.data,
        "entry response field"
      );
      validateString(
        "response.data.revision",
        response.data.revision,
        "entry response field"
      );
      validateString(
        "response.data.signature",
        response.data.signature,
        "entry response field"
      );
    } catch (err) {
      throw new Error(
        `Did not get a complete entry response despite a successful request. Please try again and report this issue to the devs if it persists. Error: ${err}`
      );
    }
    const revision = BigInt(response.data.revision);
    const signature2 = import_buffer2.Buffer.from(
      hexToUint8Array(response.data.signature)
    );
    let data = new Uint8Array([]);
    if (response.data.data) {
      data = hexToUint8Array(response.data.data);
    }
    const signedEntry = {
      entry: {
        dataKey,
        data,
        revision,
      },
      signature: signature2,
    };
    const signatureBytes = new Uint8Array(signedEntry.signature);
    const publicKeyBytes = hexToUint8Array(publicKey);
    validateUint8ArrayLen(
      "signatureArray",
      signatureBytes,
      "response value",
      SIGNATURE_LENGTH
    );
    validateUint8ArrayLen(
      "publicKeyArray",
      publicKeyBytes,
      "response value",
      PUBLIC_KEY_LENGTH / 2
    );
    if (
      sign2.detached.verify(
        hashRegistryEntry(signedEntry.entry, opts.hashedDataKeyHex),
        signatureBytes,
        publicKeyBytes
      )
    ) {
      return signedEntry;
    }
    throw new Error(
      "Could not verify signature from retrieved, signed registry entry -- possible corrupted entry"
    );
  }
  async function getEntryUrl(publicKey, dataKey, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const portalUrl = await this.portalUrl();
    return getEntryUrlForPortal(portalUrl, publicKey, dataKey, opts);
  }
  function getEntryUrlForPortal(portalUrl, publicKey, dataKey, customOptions) {
    validateString("portalUrl", portalUrl, "parameter");
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
      customOptions
    );
    let dataKeyHashHex = dataKey;
    if (!opts.hashedDataKeyHex) {
      dataKeyHashHex = toHexString(hashDataKey(dataKey));
    }
    const query = {
      publickey: ensurePrefix(publicKey, ED25519_PREFIX),
      datakey: dataKeyHashHex,
      timeout: DEFAULT_GET_ENTRY_TIMEOUT.toString(),
    };
    let url = makeUrl(portalUrl, opts.endpointGetEntry);
    url = addUrlQuery(url, query);
    return url;
  }
  function getEntryLink(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
      customOptions
    );
    const siaPublicKey = newEd25519PublicKey(
      trimPrefix(publicKey, ED25519_PREFIX)
    );
    let tweak;
    if (opts.hashedDataKeyHex) {
      tweak = hexToUint8Array(dataKey);
    } else {
      tweak = hashDataKey(dataKey);
    }
    const skylink = newSkylinkV2(siaPublicKey, tweak).toString();
    return formatSkylink(skylink);
  }
  async function getEntryLinkAsync(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
      customOptions
    );
    const siaPublicKey = newEd25519PublicKey(
      trimPrefix(publicKey, ED25519_PREFIX)
    );
    let tweak;
    if (opts.hashedDataKeyHex) {
      tweak = hexToUint8Array(dataKey);
    } else {
      tweak = hashDataKey(dataKey);
    }
    const skylink = newSkylinkV2(siaPublicKey, tweak).toString();
    return formatSkylink(skylink);
  }
  async function setEntry(privateKey, entry, customOptions) {
    validateHexString("privateKey", privateKey, "parameter");
    validateRegistryEntry("entry", entry, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_OPTIONS
    );
    assertUint64(entry.revision);
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const privateKeyArray = hexToUint8Array(privateKey);
    const signature2 = await signEntry(
      privateKey,
      entry,
      opts.hashedDataKeyHex
    );
    const { publicKey: publicKeyArray } =
      sign2.keyPair.fromSecretKey(privateKeyArray);
    return await this.registry.postSignedEntry(
      toHexString(publicKeyArray),
      entry,
      signature2,
      opts
    );
  }
  async function signEntry(privateKey, entry, hashedDataKeyHex) {
    const privateKeyArray = hexToUint8Array(privateKey);
    return sign2.detached(
      hashRegistryEntry(entry, hashedDataKeyHex),
      privateKeyArray
    );
  }
  async function postSignedEntry(publicKey, entry, signature2, customOptions) {
    validateHexString("publicKey", publicKey, "parameter");
    validateRegistryEntry("entry", entry, "parameter");
    validateUint8Array("signature", signature2, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    let datakey = entry.dataKey;
    if (!opts.hashedDataKeyHex) {
      datakey = toHexString(hashDataKey(datakey));
    }
    const entryData = Array.from(entry.data);
    const data = {
      publickey: {
        algorithm: "ed25519",
        key: Array.from(hexToUint8Array(publicKey)),
      },
      datakey,
      revision: entry.revision.toString(),
      data: entryData,
      signature: Array.from(signature2),
    };
    await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        endpointPath: opts.endpointSetEntry,
        method: "post",
        data,
        transformRequest: function (data2) {
          const json = JSON.stringify(data2);
          return json.replace(REGEX_REVISION_WITH_QUOTES, '"revision":$1');
        },
      })
    );
  }
  function validateRegistryProof(proof, opts) {
    let resolverSkylink = void 0;
    let lastSkylink =
      opts === null || opts === void 0 ? void 0 : opts.resolverSkylink;
    const dataLink = opts === null || opts === void 0 ? void 0 : opts.skylink;
    if (proof.length === 0) {
      throw new Error("Expected registry proof not to be empty");
    }
    for (const entry of proof) {
      if (entry.type !== REGISTRY_TYPE_WITHOUT_PUBKEY) {
        throw new Error(`Unsupported registry type in proof: '${entry.type}'`);
      }
      const publicKey = entry.publickey.key;
      const publicKeyBytes = (0, import_base64_js2.toByteArray)(publicKey);
      const publicKeyHex = toHexString(publicKeyBytes);
      const dataKey = entry.datakey;
      const data = entry.data;
      const signatureBytes = hexToUint8Array(entry.signature);
      let entryLink = getEntryLink(publicKeyHex, dataKey, {
        hashedDataKeyHex: true,
      });
      entryLink = trimUriPrefix(entryLink, URI_SKYNET_PREFIX);
      if (lastSkylink && entryLink !== lastSkylink) {
        throw new Error("Could not verify registry proof chain");
      }
      if (!resolverSkylink) {
        resolverSkylink = entryLink;
      }
      const rawData = hexToUint8Array(data);
      const skylink = encodeSkylinkBase64(rawData);
      const entryToVerify = {
        dataKey,
        data: rawData,
        revision: BigInt(entry.revision),
      };
      validateUint8ArrayLen(
        "signatureArray",
        signatureBytes,
        "response value",
        SIGNATURE_LENGTH
      );
      validateUint8ArrayLen(
        "publicKeyArray",
        publicKeyBytes,
        "parameter",
        PUBLIC_KEY_LENGTH / 2
      );
      if (
        !sign2.detached.verify(
          hashRegistryEntry(entryToVerify, true),
          signatureBytes,
          publicKeyBytes
        )
      ) {
        throw new Error(
          "Could not verify signature from retrieved, signed registry entry in registry proof"
        );
      }
      lastSkylink = skylink;
    }
    if (dataLink && lastSkylink !== dataLink) {
      throw new Error("Could not verify registry proof chain");
    }
    return { skylink: lastSkylink, resolverSkylink };
  }
  function handleGetEntryErrResponse(err) {
    if (err.responseStatus === 404) {
      return { entry: null, signature: null };
    }
    throw err;
  }
  function validateRegistryEntry(name2, value, valueKind) {
    validateObject(name2, value, valueKind);
    validateString(`${name2}.dataKey`, value.dataKey, `${valueKind} field`);
    validateUint8Array(`${name2}.data`, value.data, `${valueKind} field`);
    validateBigint(`${name2}.revision`, value.revision, `${valueKind} field`);
  }
  function validatePublicKey(name2, publicKey, valueKind) {
    if (!isHexString(trimPrefix(publicKey, ED25519_PREFIX))) {
      throwValidationError(
        name2,
        publicKey,
        valueKind,
        "a hex-encoded string with a valid prefix"
      );
    }
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/download.js
  var DEFAULT_DOWNLOAD_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointDownload: "/",
      download: false,
      path: void 0,
      range: void 0,
      responseType: void 0,
      subdomain: false,
    }
  );
  var DEFAULT_GET_METADATA_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointGetMetadata: "/skynet/metadata",
    }
  );
  var DEFAULT_DOWNLOAD_HNS_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
    {
      endpointDownloadHns: "hns",
      hnsSubdomain: "hns",
      subdomain: true,
    }
  );
  var DEFAULT_RESOLVE_HNS_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointResolveHns: "hnsres",
    }
  );
  async function downloadFile(skylinkUrl, customOptions) {
    const opts = __spreadProps(
      __spreadValues(
        __spreadValues(
          __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
          this.customOptions
        ),
        customOptions
      ),
      { download: true }
    );
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    window.location.assign(url);
    return url;
  }
  async function downloadFileHns(domain, customOptions) {
    const opts = __spreadProps(
      __spreadValues(
        __spreadValues(
          __spreadValues({}, DEFAULT_DOWNLOAD_HNS_OPTIONS),
          this.customOptions
        ),
        customOptions
      ),
      { download: true }
    );
    const url = await this.getHnsUrl(domain, opts);
    window.location.assign(url);
    return url;
  }
  async function getSkylinkUrl(skylinkUrl, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const portalUrl = await this.portalUrl();
    return getSkylinkUrlForPortal(portalUrl, skylinkUrl, opts);
  }
  function getSkylinkUrlForPortal(portalUrl, skylinkUrl, customOptions) {
    var _a;
    validateString("portalUrl", portalUrl, "parameter");
    validateString("skylinkUrl", skylinkUrl, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_DOWNLOAD_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
      customOptions
    );
    const query = buildQuery(opts.download);
    let path3 = "";
    if (opts.path) {
      if (typeof opts.path !== "string") {
        throw new Error(
          `opts.path has to be a string, ${typeof opts.path} provided`
        );
      }
      path3 = opts.path
        .split("/")
        .map((element) => encodeURIComponent(element))
        .join("/");
    }
    let url;
    if (opts.subdomain) {
      const skylinkPath =
        (_a = parseSkylink(skylinkUrl, { onlyPath: true })) !== null &&
        _a !== void 0
          ? _a
          : "";
      let skylink = parseSkylink(skylinkUrl);
      if (skylink === null) {
        throw new Error(`Could not get skylink out of input '${skylinkUrl}'`);
      }
      skylink = convertSkylinkToBase32(skylink);
      url = addUrlSubdomain(portalUrl, skylink);
      url = makeUrl(url, skylinkPath, path3);
    } else {
      const skylink = parseSkylink(skylinkUrl, { includePath: true });
      if (skylink === null) {
        throw new Error(
          `Could not get skylink with path out of input '${skylinkUrl}'`
        );
      }
      url = makeUrl(portalUrl, opts.endpointDownload, skylink);
      url = makeUrl(url, path3);
    }
    return addUrlQuery(url, query);
  }
  async function getHnsUrl(domain, customOptions) {
    validateString("domain", domain, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_DOWNLOAD_HNS_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_HNS_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const query = buildQuery(opts.download);
    domain = trimUriPrefix(domain, URI_HANDSHAKE_PREFIX);
    let subdomain, endpointPath, extraPath;
    if (opts.subdomain) {
      subdomain = `${domain}.${opts.hnsSubdomain}`;
    } else {
      endpointPath = opts.endpointDownloadHns;
      extraPath = domain;
    }
    return buildRequestUrl(this, { endpointPath, extraPath, subdomain, query });
  }
  async function getHnsresUrl(domain, customOptions) {
    validateString("domain", domain, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_RESOLVE_HNS_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_RESOLVE_HNS_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    domain = trimUriPrefix(domain, URI_HANDSHAKE_PREFIX);
    return buildRequestUrl(this, {
      endpointPath: opts.endpointResolveHns,
      extraPath: domain,
    });
  }
  async function getMetadata(skylinkUrl, customOptions) {
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_METADATA_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_METADATA_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const path3 = parseSkylink(skylinkUrl, { onlyPath: true });
    if (path3) {
      throw new Error("Skylink string should not contain a path");
    }
    const getSkylinkUrlOpts = { endpointDownload: opts.endpointGetMetadata };
    const url = await this.getSkylinkUrl(skylinkUrl, getSkylinkUrlOpts);
    const response = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        method: "GET",
        url,
      })
    );
    const inputSkylink = parseSkylink(skylinkUrl);
    validateGetMetadataResponse(response, inputSkylink);
    const metadata = response.data;
    const portalUrl = response.headers["skynet-portal-api"];
    const skylink = formatSkylink(response.headers["skynet-skylink"]);
    return { metadata, portalUrl, skylink };
  }
  async function getFileContent(skylinkUrl, customOptions) {
    const response = await this.getFileContentRequest(
      skylinkUrl,
      customOptions
    );
    const inputSkylink = parseSkylink(skylinkUrl);
    validateGetFileContentResponse(response, inputSkylink);
    return await extractGetFileContentResponse(response);
  }
  async function getFileContentRequest(skylinkUrl, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    const headers = buildGetFileContentHeaders(opts.range);
    return await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        method: "get",
        url,
        subdomain: void 0,
        headers,
      })
    );
  }
  async function getFileContentHns(domain, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_HNS_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.getHnsUrl(domain, opts);
    const headers = buildGetFileContentHeaders(opts.range);
    const [response, { skylink: inputSkylink }] = await Promise.all([
      this.executeRequest(
        __spreadProps(__spreadValues({}, opts), {
          method: "get",
          url,
          headers,
          subdomain: void 0,
        })
      ),
      this.resolveHns(domain),
    ]);
    validateGetFileContentResponse(response, inputSkylink);
    return await extractGetFileContentResponse(response);
  }
  async function openFile(skylinkUrl, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    window.open(url, "_blank");
    return url;
  }
  async function openFileHns(domain, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_DOWNLOAD_HNS_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.getHnsUrl(domain, opts);
    window.open(url, "_blank");
    return url;
  }
  async function resolveHns(domain, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_RESOLVE_HNS_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const url = await this.getHnsresUrl(domain, opts);
    const response = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        method: "get",
        url,
      })
    );
    validateResolveHnsResponse(response);
    if (response.data.skylink) {
      return { data: response.data, skylink: response.data.skylink };
    } else {
      const entryLink = getEntryLink(
        response.data.registry.publickey,
        response.data.registry.datakey,
        {
          hashedDataKeyHex: true,
        }
      );
      return { data: response.data, skylink: entryLink };
    }
  }
  function buildGetFileContentHeaders(range) {
    const headers = {};
    if (range) {
      headers["range"] = range;
    }
    return headers;
  }
  function buildQuery(download) {
    const query = {};
    if (download) {
      query.attachment = "true";
    }
    return query;
  }
  async function extractGetFileContentResponse(response) {
    const contentType = response.headers["content-type"];
    const portalUrl = response.headers["skynet-portal-api"];
    const skylink = formatSkylink(response.headers["skynet-skylink"]);
    return { data: response.data, contentType, portalUrl, skylink };
  }
  function validateGetFileContentResponse(response, inputSkylink) {
    try {
      if (!response.data && response.data !== "") {
        throw new Error("'response.data' field missing");
      }
      if (!response.headers) {
        throw new Error("'response.headers' field missing");
      }
      const contentType = response.headers["content-type"];
      if (!contentType) {
        throw new Error("'content-type' header missing");
      }
      validateString(
        `response.headers["content-type"]`,
        contentType,
        "getFileContent response header"
      );
      const portalUrl = response.headers["skynet-portal-api"];
      if (!portalUrl) {
        throw new Error("'skynet-portal-api' header missing");
      }
      validateString(
        `response.headers["skynet-portal-api"]`,
        portalUrl,
        "getFileContent response header"
      );
      const skylink = response.headers["skynet-skylink"];
      if (!skylink) {
        throw new Error("'skynet-skylink' header missing");
      }
      validateSkylinkString(
        `response.headers["skynet-skylink"]`,
        skylink,
        "getFileContent response header"
      );
      const proof = response.headers["skynet-proof"];
      validateRegistryProofResponse(inputSkylink, skylink, proof);
    } catch (err) {
      throw new Error(
        `File content response invalid despite a successful request. Please try again and report this issue to the devs if it persists. ${err}`
      );
    }
  }
  function validateGetMetadataResponse(response, inputSkylink) {
    try {
      if (!response.data) {
        throw new Error("'response.data' field missing");
      }
      if (!response.headers) {
        throw new Error("'response.headers' field missing");
      }
      const portalUrl = response.headers["skynet-portal-api"];
      if (!portalUrl) {
        throw new Error("'skynet-portal-api' header missing");
      }
      validateString(
        `response.headers["skynet-portal-api"]`,
        portalUrl,
        "getMetadata response header"
      );
      const skylink = response.headers["skynet-skylink"];
      if (!skylink) {
        throw new Error("'skynet-skylink' header missing");
      }
      validateSkylinkString(
        `response.headers["skynet-skylink"]`,
        skylink,
        "getMetadata response header"
      );
      validateRegistryProofResponse(
        inputSkylink,
        skylink,
        response.headers["skynet-proof"]
      );
    } catch (err) {
      throw new Error(
        `Metadata response invalid despite a successful request. Please try again and report this issue to the devs if it persists. ${err}`
      );
    }
  }
  function validateResolveHnsResponse(response) {
    try {
      if (!response.data) {
        throw new Error("'response.data' field missing");
      }
      if (response.data.skylink) {
        validateSkylinkString(
          "response.data.skylink",
          response.data.skylink,
          "resolveHns response field"
        );
      } else if (response.data.registry) {
        validateObject(
          "response.data.registry",
          response.data.registry,
          "resolveHns response field"
        );
        validateString(
          "response.data.registry.publickey",
          response.data.registry.publickey,
          "resolveHns response field"
        );
        validateString(
          "response.data.registry.datakey",
          response.data.registry.datakey,
          "resolveHns response field"
        );
      } else {
        throwValidationError(
          "response.data",
          response.data,
          "response data object",
          "object containing skylink or registry field"
        );
      }
    } catch (err) {
      throw new Error(
        `Did not get a complete resolve HNS response despite a successful request. Please try again and report this issue to the devs if it persists. ${err}`
      );
    }
  }
  function validateRegistryProofResponse(inputSkylink, dataLink, proof) {
    let proofArray = [];
    try {
      if (proof) {
        proofArray = JSON.parse(proof);
        if (!proofArray) {
          throw new Error("Could not parse 'skynet-proof' header as JSON");
        }
      }
    } catch (err) {
      throw new Error(`Could not parse 'skynet-proof' header as JSON: ${err}`);
    }
    if (isSkylinkV1(inputSkylink)) {
      if (inputSkylink !== dataLink) {
        throw new Error(
          "Expected returned skylink to be the same as input data link"
        );
      }
      if (proof) {
        throw new Error(
          "Expected 'skynet-proof' header to be empty for data link"
        );
      }
      return;
    }
    if (inputSkylink === dataLink) {
      throw new Error(
        "Expected returned skylink to be different from input entry link"
      );
    }
    validateRegistryProof(proofArray, {
      resolverSkylink: inputSkylink,
      skylink: dataLink,
    });
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/encrypted_files.js
  var import_randombytes2 = __toESM(require_randombytes(), 1);
  var import_skynet_mysky_utils2 = __toESM(require_dist(), 1);
  var import_tweetnacl3 = __toESM(require_nacl_fast(), 1);
  var { secretbox } = import_tweetnacl3.default;
  var ENCRYPTED_JSON_RESPONSE_VERSION = 1;
  var ENCRYPTION_KEY_LENGTH = 32;
  var ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH = 16;
  var ENCRYPTION_NONCE_LENGTH = 24;
  var ENCRYPTION_OVERHEAD_LENGTH = 16;
  var ENCRYPTION_PATH_SEED_FILE_LENGTH = 64;
  var SALT_ENCRYPTED_TWEAK = "encrypted filesystem tweak";
  var SALT_ENCRYPTION = "encryption";
  function decryptJSONFile(data, key2) {
    validateUint8Array("data", data, "parameter");
    validateUint8ArrayLen("key", key2, "parameter", ENCRYPTION_KEY_LENGTH);
    if (!checkPaddedBlock(data.length)) {
      throw new Error(
        `Expected parameter 'data' to be padded encrypted data, length was '${
          data.length
        }', nearest padded block is '${padFileSize(data.length)}'`
      );
    }
    const nonce = data.slice(0, ENCRYPTION_NONCE_LENGTH);
    data = data.slice(ENCRYPTION_NONCE_LENGTH);
    const metadataBytes = data.slice(
      0,
      ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH
    );
    data = data.slice(ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH);
    const metadata = decodeEncryptedFileMetadata(metadataBytes);
    if (metadata.version !== ENCRYPTED_JSON_RESPONSE_VERSION) {
      throw new Error(
        `Received unrecognized JSON response version '${metadata.version}' in metadata, expected '${ENCRYPTED_JSON_RESPONSE_VERSION}'`
      );
    }
    let decryptedBytes = secretbox.open(data, nonce, key2);
    if (!decryptedBytes) {
      throw new Error("Could not decrypt given encrypted JSON file");
    }
    let paddingIndex = decryptedBytes.length;
    while (paddingIndex > 0 && decryptedBytes[paddingIndex - 1] === 0) {
      paddingIndex--;
    }
    decryptedBytes = decryptedBytes.slice(0, paddingIndex);
    return JSON.parse(uint8ArrayToStringUtf8(decryptedBytes));
  }
  function encryptJSONFile(json, metadata, key2) {
    validateObject("json", json, "parameter");
    validateNumber("metadata.version", metadata.version, "parameter");
    validateUint8ArrayLen("key", key2, "parameter", ENCRYPTION_KEY_LENGTH);
    let data = stringToUint8ArrayUtf8(JSON.stringify(json));
    const totalOverhead =
      ENCRYPTION_OVERHEAD_LENGTH +
      ENCRYPTION_NONCE_LENGTH +
      ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH;
    const finalSize = padFileSize(data.length + totalOverhead) - totalOverhead;
    data = new Uint8Array([
      ...data,
      ...new Uint8Array(finalSize - data.length),
    ]);
    const nonce = new Uint8Array(
      (0, import_randombytes2.default)(ENCRYPTION_NONCE_LENGTH)
    );
    const encryptedBytes = secretbox(data, nonce, key2);
    const metadataBytes = encodeEncryptedFileMetadata(metadata);
    const finalBytes = new Uint8Array([...metadataBytes, ...encryptedBytes]);
    return new Uint8Array([...nonce, ...finalBytes]);
  }
  function deriveEncryptedFileKeyEntropy(pathSeed) {
    const pathSeedBytes = validateAndGetFilePathSeedBytes(pathSeed);
    const bytes = new Uint8Array([
      ...sha512(SALT_ENCRYPTION),
      ...sha512(pathSeedBytes),
    ]);
    const hashBytes = sha512(bytes);
    return hashBytes.slice(0, ENCRYPTION_KEY_LENGTH);
  }
  function deriveEncryptedFileTweak(pathSeed) {
    const pathSeedBytes = validateAndGetFilePathSeedBytes(pathSeed);
    let hashBytes = sha512(
      new Uint8Array([
        ...sha512(SALT_ENCRYPTED_TWEAK),
        ...sha512(pathSeedBytes),
      ])
    );
    hashBytes = hashBytes.slice(0, HASH_LENGTH);
    return toHexString(hashBytes);
  }
  function padFileSize(initialSize) {
    const kib = 1 << 10;
    for (let n = 0; n < 53; n++) {
      if (initialSize <= (1 << n) * 80 * kib) {
        const paddingBlock = (1 << n) * 4 * kib;
        let finalSize = initialSize;
        if (finalSize % paddingBlock !== 0) {
          finalSize = initialSize - (initialSize % paddingBlock) + paddingBlock;
        }
        return finalSize;
      }
    }
    throw new Error("Could not pad file size, overflow detected.");
  }
  function checkPaddedBlock(size) {
    const kib = 1 << 10;
    for (let n = 0; n < 53; n++) {
      if (size <= (1 << n) * 80 * kib) {
        const paddingBlock = (1 << n) * 4 * kib;
        return size % paddingBlock === 0;
      }
    }
    throw new Error("Could not check padded file size, overflow detected.");
  }
  function decodeEncryptedFileMetadata(bytes) {
    validateUint8ArrayLen(
      "bytes",
      bytes,
      "encrypted file metadata bytes",
      ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH
    );
    const version89 = bytes[0];
    return {
      version: version89,
    };
  }
  function encodeEncryptedFileMetadata(metadata) {
    const bytes = new Uint8Array(ENCRYPTION_HIDDEN_FIELD_METADATA_LENGTH);
    if (metadata.version >= 1 << 8 || metadata.version < 0) {
      throw new Error(
        `Metadata version '${metadata.version}' could not be stored in a uint8`
      );
    }
    bytes[0] = metadata.version;
    return bytes;
  }
  function validateAndGetFilePathSeedBytes(pathSeed) {
    validateHexString("pathSeed", pathSeed, "parameter");
    if (pathSeed.length !== ENCRYPTION_PATH_SEED_FILE_LENGTH) {
      throwValidationError(
        "pathSeed",
        pathSeed,
        "parameter",
        `a valid file path seed of length '${ENCRYPTION_PATH_SEED_FILE_LENGTH}'`
      );
    }
    return stringToUint8ArrayUtf8(pathSeed);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/tweak.js
  var DISCOVERABLE_BUCKET_TWEAK_VERSION = 1;
  function deriveDiscoverableFileTweak(path3) {
    const dbt = new DiscoverableBucketTweak(path3);
    const bytes = dbt.getHash();
    return toHexString(bytes);
  }
  var DiscoverableBucketTweak = class {
    constructor(path3) {
      const paths = splitPath(path3);
      const pathHashes = paths.map(hashPathComponent);
      this.version = DISCOVERABLE_BUCKET_TWEAK_VERSION;
      this.path = pathHashes;
    }
    encode() {
      const size = 1 + 32 * this.path.length;
      const buf = new Uint8Array(size);
      buf.set([this.version]);
      let offset = 1;
      for (const pathLevel of this.path) {
        buf.set(pathLevel, offset);
        offset += 32;
      }
      return buf;
    }
    getHash() {
      const encoding = this.encode();
      return hashAll(encoding);
    }
  };
  function splitPath(path3) {
    return path3.split("/");
  }
  function hashPathComponent(component) {
    return hashAll(stringToUint8ArrayUtf8(component));
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skydb_v2.js
  var import_tweetnacl5 = __toESM(require_nacl_fast(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/utils/array.js
  function areEqualUint8Arrays(array1, array2) {
    if (array1.length != array2.length) {
      return false;
    }
    for (let i = 0; i < array1.length; i++) {
      if (array1[i] != array2[i]) {
        return false;
      }
    }
    return true;
  }

  // node_modules/post-me/dist/index.esnext.mjs
  var MARKER = "@post-me";
  function createUniqueIdFn() {
    let __id = 0;
    return function () {
      const id2 = __id;
      __id += 1;
      return id2;
    };
  }
  var ConcreteEmitter = class {
    constructor() {
      this._listeners = {};
    }
    addEventListener(eventName, listener) {
      let listeners = this._listeners[eventName];
      if (!listeners) {
        listeners = /* @__PURE__ */ new Set();
        this._listeners[eventName] = listeners;
      }
      listeners.add(listener);
    }
    removeEventListener(eventName, listener) {
      let listeners = this._listeners[eventName];
      if (!listeners) {
        return;
      }
      listeners.delete(listener);
    }
    once(eventName) {
      return new Promise((resolve2) => {
        const listener = (data) => {
          this.removeEventListener(eventName, listener);
          resolve2(data);
        };
        this.addEventListener(eventName, listener);
      });
    }
    emit(eventName, data) {
      let listeners = this._listeners[eventName];
      if (!listeners) {
        return;
      }
      listeners.forEach((listener) => {
        listener(data);
      });
    }
    removeAllListeners() {
      Object.values(this._listeners).forEach((listeners) => {
        if (listeners) {
          listeners.clear();
        }
      });
    }
  };
  var MessageType;
  (function (MessageType2) {
    MessageType2["HandshakeRequest"] = "handshake-request";
    MessageType2["HandshakeResponse"] = "handshake-response";
    MessageType2["Call"] = "call";
    MessageType2["Response"] = "response";
    MessageType2["Error"] = "error";
    MessageType2["Event"] = "event";
    MessageType2["Callback"] = "callback";
  })(MessageType || (MessageType = {}));
  function createHandshakeRequestMessage(sessionId) {
    return {
      type: MARKER,
      action: MessageType.HandshakeRequest,
      sessionId,
    };
  }
  function createCallMessage(sessionId, requestId, methodName, args) {
    return {
      type: MARKER,
      action: MessageType.Call,
      sessionId,
      requestId,
      methodName,
      args,
    };
  }
  function createResponsMessage(sessionId, requestId, result, error) {
    const message = {
      type: MARKER,
      action: MessageType.Response,
      sessionId,
      requestId,
    };
    if (result !== void 0) {
      message.result = result;
    }
    if (error !== void 0) {
      message.error = error;
    }
    return message;
  }
  function createCallbackMessage(sessionId, requestId, callbackId, args) {
    return {
      type: MARKER,
      action: MessageType.Callback,
      sessionId,
      requestId,
      callbackId,
      args,
    };
  }
  function createEventMessage(sessionId, eventName, payload) {
    return {
      type: MARKER,
      action: MessageType.Event,
      sessionId,
      eventName,
      payload,
    };
  }
  function isMessage(m2) {
    return m2 && m2.type === MARKER;
  }
  function isHandshakeResponseMessage(m2) {
    return isMessage(m2) && m2.action === MessageType.HandshakeResponse;
  }
  function isCallMessage(m2) {
    return isMessage(m2) && m2.action === MessageType.Call;
  }
  function isResponseMessage(m2) {
    return isMessage(m2) && m2.action === MessageType.Response;
  }
  function isCallbackMessage(m2) {
    return isMessage(m2) && m2.action === MessageType.Callback;
  }
  function isEventMessage(m2) {
    return isMessage(m2) && m2.action === MessageType.Event;
  }
  function makeCallbackEvent(requestId) {
    return `callback_${requestId}`;
  }
  function makeResponseEvent(requestId) {
    return `response_${requestId}`;
  }
  var Dispatcher = class extends ConcreteEmitter {
    constructor(messenger, sessionId) {
      super();
      this.uniqueId = createUniqueIdFn();
      this.messenger = messenger;
      this.sessionId = sessionId;
      this.removeMessengerListener = this.messenger.addMessageListener(
        this.messengerListener.bind(this)
      );
    }
    messengerListener(event) {
      const { data } = event;
      if (!isMessage(data)) {
        return;
      }
      if (this.sessionId !== data.sessionId) {
        return;
      }
      if (isCallMessage(data)) {
        this.emit(MessageType.Call, data);
      } else if (isResponseMessage(data)) {
        this.emit(makeResponseEvent(data.requestId), data);
      } else if (isEventMessage(data)) {
        this.emit(MessageType.Event, data);
      } else if (isCallbackMessage(data)) {
        this.emit(makeCallbackEvent(data.requestId), data);
      }
    }
    callOnRemote(methodName, args, transfer) {
      const requestId = this.uniqueId();
      const callbackEvent = makeCallbackEvent(requestId);
      const responseEvent = makeResponseEvent(requestId);
      const message = createCallMessage(
        this.sessionId,
        requestId,
        methodName,
        args
      );
      this.messenger.postMessage(message, transfer);
      return { callbackEvent, responseEvent };
    }
    respondToRemote(requestId, value, error, transfer) {
      if (error instanceof Error) {
        error = {
          name: error.name,
          message: error.message,
        };
      }
      const message = createResponsMessage(
        this.sessionId,
        requestId,
        value,
        error
      );
      this.messenger.postMessage(message, transfer);
    }
    callbackToRemote(requestId, callbackId, args) {
      const message = createCallbackMessage(
        this.sessionId,
        requestId,
        callbackId,
        args
      );
      this.messenger.postMessage(message);
    }
    emitToRemote(eventName, payload, transfer) {
      const message = createEventMessage(this.sessionId, eventName, payload);
      this.messenger.postMessage(message, transfer);
    }
    close() {
      this.removeMessengerListener();
      this.removeAllListeners();
    }
  };
  var ParentHandshakeDispatcher = class extends ConcreteEmitter {
    constructor(messenger, sessionId) {
      super();
      this.messenger = messenger;
      this.sessionId = sessionId;
      this.removeMessengerListener = this.messenger.addMessageListener(
        this.messengerListener.bind(this)
      );
    }
    messengerListener(event) {
      const { data } = event;
      if (!isMessage(data)) {
        return;
      }
      if (this.sessionId !== data.sessionId) {
        return;
      }
      if (isHandshakeResponseMessage(data)) {
        this.emit(data.sessionId, data);
      }
    }
    initiateHandshake() {
      const message = createHandshakeRequestMessage(this.sessionId);
      this.messenger.postMessage(message);
      return this.sessionId;
    }
    close() {
      this.removeMessengerListener();
      this.removeAllListeners();
    }
  };
  var ProxyType;
  (function (ProxyType2) {
    ProxyType2["Callback"] = "callback";
  })(ProxyType || (ProxyType = {}));
  function createCallbackProxy(callbackId) {
    return {
      type: MARKER,
      proxy: ProxyType.Callback,
      callbackId,
    };
  }
  function isCallbackProxy(p2) {
    return p2 && p2.type === MARKER && p2.proxy === ProxyType.Callback;
  }
  var ConcreteRemoteHandle = class extends ConcreteEmitter {
    constructor(dispatcher) {
      super();
      this._dispatcher = dispatcher;
      this._callTransfer = {};
      this._dispatcher.addEventListener(
        MessageType.Event,
        this._handleEvent.bind(this)
      );
    }
    close() {
      this.removeAllListeners();
    }
    setCallTransfer(methodName, transfer) {
      this._callTransfer[methodName] = transfer;
    }
    call(methodName, ...args) {
      return this.customCall(methodName, args);
    }
    customCall(methodName, args, options = {}) {
      return new Promise((resolve2, reject) => {
        const sanitizedArgs = [];
        const callbacks = [];
        let callbackId = 0;
        args.forEach((arg) => {
          if (typeof arg === "function") {
            callbacks.push(arg);
            sanitizedArgs.push(createCallbackProxy(callbackId));
            callbackId += 1;
          } else {
            sanitizedArgs.push(arg);
          }
        });
        const hasCallbacks = callbacks.length > 0;
        let callbackListener = void 0;
        if (hasCallbacks) {
          callbackListener = (data) => {
            const { callbackId: callbackId2, args: args2 } = data;
            callbacks[callbackId2](...args2);
          };
        }
        let transfer = options.transfer;
        if (transfer === void 0 && this._callTransfer[methodName]) {
          transfer = this._callTransfer[methodName](...sanitizedArgs);
        }
        const { callbackEvent, responseEvent } = this._dispatcher.callOnRemote(
          methodName,
          sanitizedArgs,
          transfer
        );
        if (hasCallbacks) {
          this._dispatcher.addEventListener(callbackEvent, callbackListener);
        }
        this._dispatcher.once(responseEvent).then((response) => {
          if (callbackListener) {
            this._dispatcher.removeEventListener(
              callbackEvent,
              callbackListener
            );
          }
          const { result, error } = response;
          if (error !== void 0) {
            reject(error);
          } else {
            resolve2(result);
          }
        });
      });
    }
    _handleEvent(data) {
      const { eventName, payload } = data;
      this.emit(eventName, payload);
    }
  };
  var ConcreteLocalHandle = class {
    constructor(dispatcher, localMethods) {
      this._dispatcher = dispatcher;
      this._methods = localMethods;
      this._returnTransfer = {};
      this._emitTransfer = {};
      this._dispatcher.addEventListener(
        MessageType.Call,
        this._handleCall.bind(this)
      );
    }
    emit(eventName, payload, options = {}) {
      let transfer = options.transfer;
      if (transfer === void 0 && this._emitTransfer[eventName]) {
        transfer = this._emitTransfer[eventName](payload);
      }
      this._dispatcher.emitToRemote(eventName, payload, transfer);
    }
    setMethods(methods) {
      this._methods = methods;
    }
    setMethod(methodName, method) {
      this._methods[methodName] = method;
    }
    setReturnTransfer(methodName, transfer) {
      this._returnTransfer[methodName] = transfer;
    }
    setEmitTransfer(eventName, transfer) {
      this._emitTransfer[eventName] = transfer;
    }
    _handleCall(data) {
      const { requestId, methodName, args } = data;
      const callMethod = new Promise((resolve2, reject) => {
        const method = this._methods[methodName];
        if (typeof method !== "function") {
          reject(
            new Error(`The method "${methodName}" has not been implemented.`)
          );
          return;
        }
        const desanitizedArgs = args.map((arg) => {
          if (isCallbackProxy(arg)) {
            const { callbackId } = arg;
            return (...args2) => {
              this._dispatcher.callbackToRemote(requestId, callbackId, args2);
            };
          } else {
            return arg;
          }
        });
        Promise.resolve(this._methods[methodName](...desanitizedArgs))
          .then(resolve2)
          .catch(reject);
      });
      callMethod
        .then((result) => {
          let transfer;
          if (this._returnTransfer[methodName]) {
            transfer = this._returnTransfer[methodName](result);
          }
          this._dispatcher.respondToRemote(requestId, result, void 0, transfer);
        })
        .catch((error) => {
          this._dispatcher.respondToRemote(requestId, void 0, error);
        });
    }
  };
  var ConcreteConnection = class {
    constructor(dispatcher, localMethods) {
      this._dispatcher = dispatcher;
      this._localHandle = new ConcreteLocalHandle(dispatcher, localMethods);
      this._remoteHandle = new ConcreteRemoteHandle(dispatcher);
    }
    close() {
      this._dispatcher.close();
      this.remoteHandle().close();
    }
    localHandle() {
      return this._localHandle;
    }
    remoteHandle() {
      return this._remoteHandle;
    }
  };
  var uniqueSessionId = createUniqueIdFn();
  var runUntil = (
    worker,
    condition,
    unfulfilled,
    maxAttempts,
    attemptInterval
  ) => {
    let attempt = 0;
    const fn = () => {
      if (!condition() && (attempt < maxAttempts || maxAttempts < 1)) {
        worker();
        attempt += 1;
        setTimeout(fn, attemptInterval);
      } else if (!condition() && attempt >= maxAttempts && maxAttempts >= 1) {
        unfulfilled();
      }
    };
    fn();
  };
  function ParentHandshake(
    messenger,
    localMethods = {},
    maxAttempts = 5,
    attemptsInterval = 100
  ) {
    const thisSessionId = uniqueSessionId();
    let connected = false;
    return new Promise((resolve2, reject) => {
      const handshakeDispatcher = new ParentHandshakeDispatcher(
        messenger,
        thisSessionId
      );
      handshakeDispatcher.once(thisSessionId).then((response) => {
        connected = true;
        handshakeDispatcher.close();
        const { sessionId } = response;
        const dispatcher = new Dispatcher(messenger, sessionId);
        const connection = new ConcreteConnection(dispatcher, localMethods);
        resolve2(connection);
      });
      runUntil(
        () => handshakeDispatcher.initiateHandshake(),
        () => connected,
        () =>
          reject(
            new Error(`Handshake failed, reached maximum number of attempts`)
          ),
        maxAttempts,
        attemptsInterval
      );
    });
  }
  var acceptableMessageEvent = (event, remoteWindow, acceptedOrigin) => {
    const { source, origin } = event;
    if (source !== remoteWindow) {
      return false;
    }
    if (origin !== acceptedOrigin && acceptedOrigin !== "*") {
      return false;
    }
    return true;
  };
  var WindowMessenger = class {
    constructor({ localWindow, remoteWindow, remoteOrigin }) {
      localWindow = localWindow || window;
      this.postMessage = (message, transfer) => {
        remoteWindow.postMessage(message, remoteOrigin, transfer);
      };
      this.addMessageListener = (listener) => {
        const outerListener = (event) => {
          if (acceptableMessageEvent(event, remoteWindow, remoteOrigin)) {
            listener(event);
          }
        };
        localWindow.addEventListener("message", outerListener);
        const removeListener = () => {
          localWindow.removeEventListener("message", outerListener);
        };
        return removeListener;
      };
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/connector.js
  var import_skynet_mysky_utils3 = __toESM(require_dist(), 1);
  var DEFAULT_CONNECTOR_OPTIONS = {
    dev: false,
    debug: false,
    alpha: false,
    handshakeMaxAttempts:
      import_skynet_mysky_utils3.defaultHandshakeMaxAttempts,
    handshakeAttemptsInterval:
      import_skynet_mysky_utils3.defaultHandshakeAttemptsInterval,
  };
  var Connector = class {
    constructor(url, client, childFrame, connection, options) {
      this.url = url;
      this.client = client;
      this.childFrame = childFrame;
      this.connection = connection;
      this.options = options;
    }
    static async init(client, domain, customOptions) {
      const opts = __spreadValues(
        __spreadValues({}, DEFAULT_CONNECTOR_OPTIONS),
        customOptions
      );
      let domainUrl = await client.getFullDomainUrl(domain);
      if (opts.dev) {
        domainUrl = addUrlQuery(domainUrl, { dev: "true" });
      }
      if (opts.debug) {
        domainUrl = addUrlQuery(domainUrl, { debug: "true" });
      }
      if (opts.alpha) {
        domainUrl = addUrlQuery(domainUrl, { alpha: "true" });
      }
      const childFrame = (0, import_skynet_mysky_utils3.createIframe)(
        domainUrl,
        domainUrl
      );
      if (!childFrame.contentWindow) {
        throw new Error("'childFrame.contentWindow' was null");
      }
      const childWindow = childFrame.contentWindow;
      const messenger = new WindowMessenger({
        localWindow: window,
        remoteWindow: childWindow,
        remoteOrigin: "*",
      });
      const connection = await ParentHandshake(
        messenger,
        {},
        opts.handshakeMaxAttempts,
        opts.handshakeAttemptsInterval
      );
      return new Connector(domainUrl, client, childFrame, connection, opts);
    }
    async call(method, ...args) {
      return this.connection.remoteHandle().call(method, ...args);
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/index.js
  var import_skynet_mysky_utils4 = __toESM(require_dist(), 1);

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/utils.js
  async function getFullDomainUrl(domain) {
    const portalUrl = await this.portalUrl();
    return getFullDomainUrlForPortal(portalUrl, domain);
  }
  async function getRedirectUrlOnPreferredPortal(
    client,
    currentUrl,
    preferredPortalUrl
  ) {
    const skappDomain = await client.extractDomain(currentUrl);
    return getFullDomainUrlForPortal(preferredPortalUrl, skappDomain);
  }
  async function extractDomain(fullDomain) {
    fullDomain = trimForwardSlash(fullDomain);
    const portalServerUrl = trimForwardSlash(
      await this.resolvePortalServerUrl()
    );
    let portalServerDomain;
    try {
      const portalServerUrlObj = new URL(portalServerUrl);
      portalServerDomain = portalServerUrlObj.hostname;
    } catch (_2) {
      portalServerDomain = portalServerUrl;
    }
    if (fullDomain.endsWith(portalServerDomain)) {
      return extractDomainForPortal(portalServerUrl, fullDomain);
    }
    const portalUrl = await this.resolvePortalUrl();
    return extractDomainForPortal(portalUrl, fullDomain);
  }
  function popupCenter(url, winName, w2, h2) {
    if (!window.top) {
      throw new Error("Current window is not valid");
    }
    url = ensureUrlPrefix(url);
    const y2 = window.top.outerHeight / 2 + window.top.screenY - h2 / 2;
    const x2 = window.top.outerWidth / 2 + window.top.screenX - w2 / 2;
    const newWindow = window.open(
      url,
      winName,
      `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, copyhistory=no, width=${w2}, height=${h2}, top=${y2}, left=${x2}`
    );
    if (!newWindow) {
      throw new Error("Could not open window");
    }
    if (newWindow.focus) {
      newWindow.focus();
    }
    return newWindow;
  }
  function shouldRedirectToPreferredPortalUrl(
    currentDomain,
    preferredPortalUrl
  ) {
    currentDomain = trimSuffix(
      currentDomain.replace(/https:\/\/|http:\/\//i, ""),
      "/"
    );
    preferredPortalUrl = trimSuffix(
      preferredPortalUrl.replace(/https:\/\/|http:\/\//i, ""),
      "/"
    );
    return !currentDomain.endsWith(preferredPortalUrl);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/skydb_v2.js
  async function getJSON(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.dbV2.getJSON(publicKey, dataKey, opts);
  }
  async function getEntryLink2(path3) {
    validateString("path", path3, "parameter");
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    const opts = __spreadProps(__spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS), {
      hashedDataKeyHex: true,
    });
    return getEntryLink(publicKey, dataKey, opts);
  }
  async function setJSON(path3, json, customOptions) {
    validateString("path", path3, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const newRevision = incrementRevision(cachedRevisionEntry.revision);
        const [entry, dataLink] = await getOrCreateSkyDBRegistryEntry(
          this.connector.client,
          dataKey,
          json,
          newRevision,
          opts
        );
        const signature2 = await this.signRegistryEntry(entry, path3);
        const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
        await this.connector.client.registry.postSignedEntry(
          publicKey,
          entry,
          signature2,
          setEntryOpts
        );
        return { data: json, dataLink };
      }
    );
  }
  async function deleteJSON(path3, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    await this.dbV2.setEntryData(
      path3,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, opts), { allowDeletionEntryData: true })
    );
  }
  async function setDataLink(path3, dataLink, customOptions) {
    const parsedSkylink = validateSkylinkString(
      "dataLink",
      dataLink,
      "parameter"
    );
    const data = decodeSkylink(parsedSkylink);
    await this.dbV2.setEntryData(path3, data, customOptions);
  }
  async function getEntryData(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.dbV2.getEntryData(
      publicKey,
      dataKey,
      opts
    );
  }
  async function setEntryData(path3, data, customOptions) {
    validateString("path", path3, "parameter");
    validateUint8Array("data", data, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_DATA_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    validateEntryData(data, opts.allowDeletionEntryData);
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const newRevision = incrementRevision(cachedRevisionEntry.revision);
        const entry = { dataKey, data, revision: newRevision };
        const signature2 = await this.signRegistryEntry(entry, path3);
        const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
        await this.connector.client.registry.postSignedEntry(
          publicKey,
          entry,
          signature2,
          setEntryOpts
        );
        return { data: entry.data };
      }
    );
  }
  async function deleteEntryData(path3, customOptions) {
    await this.dbV2.setEntryData(
      path3,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, customOptions), {
        allowDeletionEntryData: true,
      })
    );
  }
  async function getJSONEncrypted(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadProps(
      __spreadValues(
        __spreadValues(
          __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
          this.connector.client.customOptions
        ),
        customOptions
      ),
      {
        hashedDataKeyHex: true,
      }
    );
    const [publicKey, pathSeed] = await Promise.all([
      this.userID(),
      this.getEncryptedPathSeed(path3, false),
    ]);
    const dataKey = deriveEncryptedFileTweak(pathSeed);
    const { data } = await this.connector.client.dbV2.getRawBytes(
      publicKey,
      dataKey,
      opts
    );
    if (data === null) {
      return { data: null };
    }
    const encryptionKey = deriveEncryptedFileKeyEntropy(pathSeed);
    const json = decryptJSONFile(data, encryptionKey);
    return { data: json };
  }
  async function setJSONEncrypted(path3, json, customOptions) {
    validateString("path", path3, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const [publicKey, pathSeed] = await Promise.all([
      this.userID(),
      this.getEncryptedPathSeed(path3, false),
    ]);
    const dataKey = deriveEncryptedFileTweak(pathSeed);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const newRevision = incrementRevision(cachedRevisionEntry.revision);
        const encryptionKey = deriveEncryptedFileKeyEntropy(pathSeed);
        const data = encryptJSONFile(
          json,
          { version: ENCRYPTED_JSON_RESPONSE_VERSION },
          encryptionKey
        );
        const [entry] = await getOrCreateSkyDBRegistryEntry(
          this.connector.client,
          dataKey,
          data,
          newRevision,
          opts
        );
        const signature2 = await this.signEncryptedRegistryEntry(entry, path3);
        const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
        await this.connector.client.registry.postSignedEntry(
          publicKey,
          entry,
          signature2,
          setEntryOpts
        );
        return { data: json };
      }
    );
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skydb.js
  var import_tweetnacl4 = __toESM(require_nacl_fast(), 1);
  var { sign: sign3 } = import_tweetnacl4.default;
  var JSON_RESPONSE_VERSION = 2;
  async function getJSON2(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entry = await getSkyDBRegistryEntry(
      this,
      publicKey,
      dataKey,
      getEntryOpts
    );
    if (entry === null) {
      return { data: null, dataLink: null };
    }
    const { rawDataLink, dataLink } = parseDataLink(entry.data, true);
    if (checkCachedDataLink(rawDataLink, opts.cachedDataLink)) {
      return { data: null, dataLink };
    }
    const downloadOpts = extractOptions(opts, DEFAULT_DOWNLOAD_OPTIONS);
    const { data } = await this.getFileContent(dataLink, downloadOpts);
    if (typeof data !== "object" || data === null) {
      throw new Error(
        `File data for the entry at data key '${dataKey}' is not JSON.`
      );
    }
    if (!(data["_data"] && data["_v"])) {
      return { data, dataLink };
    }
    const actualData = data["_data"];
    if (typeof actualData !== "object" || data === null) {
      throw new Error(
        `File data '_data' for the entry at data key '${dataKey}' is not JSON.`
      );
    }
    return { data: actualData, dataLink };
  }
  async function setJSON2(privateKey, dataKey, json, customOptions) {
    validateHexString("privateKey", privateKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const { publicKey: publicKeyArray } = sign3.keyPair.fromSecretKey(
      hexToUint8Array(privateKey)
    );
    const [entry, dataLink] = await getOrCreateRegistryEntry(
      this,
      toHexString(publicKeyArray),
      dataKey,
      json,
      opts
    );
    const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
    await this.registry.setEntry(privateKey, entry, setEntryOpts);
    return { data: json, dataLink: formatSkylink(dataLink) };
  }
  async function deleteJSON2(privateKey, dataKey, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    await this.db.setEntryData(
      privateKey,
      dataKey,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, opts), { allowDeletionEntryData: true })
    );
  }
  async function setDataLink2(privateKey, dataKey, dataLink, customOptions) {
    const parsedSkylink = validateSkylinkString(
      "dataLink",
      dataLink,
      "parameter"
    );
    const data = decodeSkylink(parsedSkylink);
    await this.db.setEntryData(privateKey, dataKey, data, customOptions);
  }
  async function getEntryData2(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const entry = await getSkyDBRegistryEntry(this, publicKey, dataKey, opts);
    if (entry === null) {
      return { data: null };
    }
    return { data: entry.data };
  }
  async function setEntryData2(privateKey, dataKey, data, customOptions) {
    validateHexString("privateKey", privateKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateUint8Array("data", data, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_DATA_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    validateEntryData(data, opts.allowDeletionEntryData);
    const { publicKey: publicKeyArray } = sign3.keyPair.fromSecretKey(
      hexToUint8Array(privateKey)
    );
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entry = await getNextRegistryEntry(
      this,
      toHexString(publicKeyArray),
      dataKey,
      data,
      getEntryOpts
    );
    const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
    await this.registry.setEntry(privateKey, entry, setEntryOpts);
    return { data: entry.data };
  }
  async function deleteEntryData2(privateKey, dataKey, customOptions) {
    await this.db.setEntryData(
      privateKey,
      dataKey,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, customOptions), {
        allowDeletionEntryData: true,
      })
    );
  }
  async function getRawBytes(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entry = await getSkyDBRegistryEntry(
      this,
      publicKey,
      dataKey,
      getEntryOpts
    );
    if (entry === null) {
      return { data: null, dataLink: null };
    }
    const { rawDataLink, dataLink } = parseDataLink(entry.data, false);
    if (checkCachedDataLink(rawDataLink, opts.cachedDataLink)) {
      return { data: null, dataLink };
    }
    const downloadOpts = __spreadProps(
      __spreadValues({}, extractOptions(opts, DEFAULT_DOWNLOAD_OPTIONS)),
      {
        responseType: "arraybuffer",
      }
    );
    const { data: buffer } = await this.getFileContent(dataLink, downloadOpts);
    return { data: new Uint8Array(buffer), dataLink };
  }
  async function getOrCreateRawBytesRegistryEntry(
    client,
    publicKey,
    dataKey,
    data,
    customOptions
  ) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        client.customOptions
      ),
      customOptions
    );
    let dataKeyHex = dataKey;
    if (!opts.hashedDataKeyHex) {
      dataKeyHex = toHexString(stringToUint8ArrayUtf8(dataKey));
    }
    const file = new File([data], `dk:${dataKeyHex}`, {
      type: "application/octet-stream",
    });
    const uploadOpts = extractOptions(opts, DEFAULT_UPLOAD_OPTIONS);
    const skyfilePromise = client.uploadFile(file, uploadOpts);
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entryPromise = client.registry.getEntry(
      publicKey,
      dataKey,
      getEntryOpts
    );
    const [signedEntry, skyfile] = await Promise.all([
      entryPromise,
      skyfilePromise,
    ]);
    const revision = getNextRevisionFromEntry(signedEntry.entry);
    const dataLink = trimUriPrefix(skyfile.skylink, URI_SKYNET_PREFIX);
    const rawDataLink = decodeSkylinkBase64(dataLink);
    validateUint8ArrayLen(
      "rawDataLink",
      rawDataLink,
      "skylink byte array",
      RAW_SKYLINK_SIZE
    );
    const entry = {
      dataKey,
      data: rawDataLink,
      revision,
    };
    return entry;
  }
  async function getNextRegistryEntry(
    client,
    publicKey,
    dataKey,
    data,
    customOptions
  ) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        client.customOptions
      ),
      customOptions
    );
    const signedEntry = await client.registry.getEntry(
      publicKey,
      dataKey,
      opts
    );
    const revision = getNextRevisionFromEntry(signedEntry.entry);
    const entry = {
      dataKey,
      data,
      revision,
    };
    return entry;
  }
  async function getOrCreateRegistryEntry(
    client,
    publicKey,
    dataKey,
    json,
    customOptions
  ) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        client.customOptions
      ),
      customOptions
    );
    const fullData = { _data: json, _v: JSON_RESPONSE_VERSION };
    let dataKeyHex = dataKey;
    if (!opts.hashedDataKeyHex) {
      dataKeyHex = toHexString(stringToUint8ArrayUtf8(dataKey));
    }
    const file = new File([JSON.stringify(fullData)], `dk:${dataKeyHex}`, {
      type: "application/json",
    });
    const uploadOpts = extractOptions(opts, DEFAULT_UPLOAD_OPTIONS);
    const skyfilePromise = client.uploadFile(file, uploadOpts);
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entryPromise = client.registry.getEntry(
      publicKey,
      dataKey,
      getEntryOpts
    );
    const [signedEntry, skyfile] = await Promise.all([
      entryPromise,
      skyfilePromise,
    ]);
    const revision = getNextRevisionFromEntry(signedEntry.entry);
    const dataLink = trimUriPrefix(skyfile.skylink, URI_SKYNET_PREFIX);
    const data = decodeSkylinkBase64(dataLink);
    validateUint8ArrayLen("data", data, "skylink byte array", RAW_SKYLINK_SIZE);
    const entry = {
      dataKey,
      data,
      revision,
    };
    return [entry, formatSkylink(dataLink)];
  }
  function getNextRevisionFromEntry(entry) {
    let revision;
    if (entry === null) {
      revision = BigInt(0);
    } else {
      revision = entry.revision + BigInt(1);
    }
    if (revision > MAX_REVISION) {
      throw new Error(
        "Current entry already has maximum allowed revision, could not update the entry"
      );
    }
    return revision;
  }
  async function getSkyDBRegistryEntry(client, publicKey, dataKey, opts) {
    const { entry } = await client.registry.getEntry(publicKey, dataKey, opts);
    if (entry === null || areEqualUint8Arrays(entry.data, EMPTY_SKYLINK)) {
      return null;
    }
    return entry;
  }
  function parseDataLink(data, legacy) {
    let rawDataLink = "";
    if (legacy && data.length === BASE64_ENCODED_SKYLINK_SIZE) {
      rawDataLink = uint8ArrayToStringUtf8(data);
    } else if (data.length === RAW_SKYLINK_SIZE) {
      rawDataLink = encodeSkylinkBase64(data);
    } else {
      throwValidationError(
        "entry.data",
        data,
        "returned entry data",
        `length ${RAW_SKYLINK_SIZE} bytes`
      );
    }
    return { rawDataLink, dataLink: formatSkylink(rawDataLink) };
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/skydb.js
  async function getJSON3(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.db.getJSON(publicKey, dataKey, opts);
  }
  async function getEntryLink3(path3) {
    validateString("path", path3, "parameter");
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    const opts = __spreadProps(__spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS), {
      hashedDataKeyHex: true,
    });
    return getEntryLink(publicKey, dataKey, opts);
  }
  async function setJSON3(path3, json, customOptions) {
    validateString("path", path3, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    const [entry, dataLink] = await getOrCreateRegistryEntry(
      this.connector.client,
      publicKey,
      dataKey,
      json,
      opts
    );
    const signature2 = await this.signRegistryEntry(entry, path3);
    const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
    await this.connector.client.registry.postSignedEntry(
      publicKey,
      entry,
      signature2,
      setEntryOpts
    );
    return { data: json, dataLink };
  }
  async function deleteJSON3(path3, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    await this.setEntryData(
      path3,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, opts), { allowDeletionEntryData: true })
    );
  }
  async function setDataLink3(path3, dataLink, customOptions) {
    const parsedSkylink = validateSkylinkString(
      "dataLink",
      dataLink,
      "parameter"
    );
    const data = decodeSkylink(parsedSkylink);
    await this.setEntryData(path3, data, customOptions);
  }
  async function getEntryData3(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.connector.client.db.getEntryData(
      publicKey,
      dataKey,
      opts
    );
  }
  async function setEntryData3(path3, data, customOptions) {
    validateString("path", path3, "parameter");
    validateUint8Array("data", data, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_DATA_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    validateEntryData(data, opts.allowDeletionEntryData);
    const publicKey = await this.userID();
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
    const entry = await getNextRegistryEntry(
      this.connector.client,
      publicKey,
      dataKey,
      data,
      getEntryOpts
    );
    const signature2 = await this.signRegistryEntry(entry, path3);
    const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
    await this.connector.client.registry.postSignedEntry(
      publicKey,
      entry,
      signature2,
      setEntryOpts
    );
    return { data: entry.data };
  }
  async function deleteEntryData3(path3, customOptions) {
    await this.setEntryData(
      path3,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, customOptions), {
        allowDeletionEntryData: true,
      })
    );
  }
  async function getJSONEncrypted2(path3, customOptions) {
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadProps(
      __spreadValues(
        __spreadValues(
          __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
          this.connector.client.customOptions
        ),
        customOptions
      ),
      {
        hashedDataKeyHex: true,
      }
    );
    const [publicKey, pathSeed] = await Promise.all([
      this.userID(),
      this.getEncryptedPathSeed(path3, false),
    ]);
    const dataKey = deriveEncryptedFileTweak(pathSeed);
    const { data } = await this.connector.client.db.getRawBytes(
      publicKey,
      dataKey,
      opts
    );
    if (data === null) {
      return { data: null };
    }
    const encryptionKey = deriveEncryptedFileKeyEntropy(pathSeed);
    const json = decryptJSONFile(data, encryptionKey);
    return { data: json };
  }
  async function setJSONEncrypted2(path3, json, customOptions) {
    validateString("path", path3, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.connector.client.customOptions
      ),
      customOptions
    );
    const [publicKey, pathSeed] = await Promise.all([
      this.userID(),
      this.getEncryptedPathSeed(path3, false),
    ]);
    const dataKey = deriveEncryptedFileTweak(pathSeed);
    opts.hashedDataKeyHex = true;
    const encryptionKey = deriveEncryptedFileKeyEntropy(pathSeed);
    const data = encryptJSONFile(
      json,
      { version: ENCRYPTED_JSON_RESPONSE_VERSION },
      encryptionKey
    );
    const entry = await getOrCreateRawBytesRegistryEntry(
      this.connector.client,
      publicKey,
      dataKey,
      data,
      opts
    );
    const signature2 = await this.signEncryptedRegistryEntry(entry, path3);
    const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
    await this.connector.client.registry.postSignedEntry(
      publicKey,
      entry,
      signature2,
      setEntryOpts
    );
    return { data: json };
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/mysky/index.js
  var MYSKY_DOMAIN = "skynet-mysky.hns";
  var MYSKY_DEV_DOMAIN = "skynet-mysky-dev.hns";
  var MYSKY_ALPHA_DOMAIN = "sandbridge.hns";
  var MAX_ENTRY_LENGTH = 70;
  var mySkyUiRelativeUrl = "ui.html";
  var mySkyUiTitle = "MySky UI";
  var [mySkyUiW, mySkyUiH] = [640, 750];
  async function loadMySky(skappDomain, customOptions) {
    const mySky = await MySky.New(this, skappDomain, customOptions);
    return mySky;
  }
  var MySky = class {
    constructor(connector, permissions, hostDomain, currentPortalUrl) {
      this.connector = connector;
      this.hostDomain = hostDomain;
      this.currentPortalUrl = currentPortalUrl;
      this.dacs = [];
      this.grantedPermissions = [];
      this.getJSON = getJSON3;
      this.getEntryLink = getEntryLink3;
      this.setJSON = setJSON3;
      this.deleteJSON = deleteJSON3;
      this.setDataLink = setDataLink3;
      this.getEntryData = getEntryData3;
      this.setEntryData = setEntryData3;
      this.deleteEntryData = deleteEntryData3;
      this.getJSONEncrypted = getJSONEncrypted2;
      this.setJSONEncrypted = setJSONEncrypted2;
      this.dbV2 = {
        getJSON: getJSON.bind(this),
        getEntryLink: getEntryLink2.bind(this),
        setJSON: setJSON.bind(this),
        deleteJSON: deleteJSON.bind(this),
        setDataLink: setDataLink.bind(this),
        getEntryData: getEntryData.bind(this),
        setEntryData: setEntryData.bind(this),
        deleteEntryData: deleteEntryData.bind(this),
        getJSONEncrypted: getJSONEncrypted.bind(this),
        setJSONEncrypted: setJSONEncrypted.bind(this),
      };
      if (MySky.instance) {
        throw new Error("Trying to create a second MySky instance");
      }
      this.pendingPermissions = permissions;
    }
    static async New(client, skappDomain, customOptions) {
      const opts = __spreadValues(
        __spreadValues({}, DEFAULT_CONNECTOR_OPTIONS),
        customOptions
      );
      if (MySky.instance) {
        return MySky.instance;
      }
      let domain = MYSKY_DOMAIN;
      if (opts.alpha) {
        domain = MYSKY_ALPHA_DOMAIN;
      } else if (opts.dev) {
        domain = MYSKY_DEV_DOMAIN;
      }
      const connector = await Connector.init(client, domain, customOptions);
      let currentPortalUrl;
      let hostDomain;
      if (window.location.hostname === "localhost") {
        currentPortalUrl = window.location.href;
        hostDomain = "localhost";
      } else {
        const currentUrlClient = new SkynetClient(window.location.hostname);
        currentUrlClient.customPortalUrl =
          await currentUrlClient.resolvePortalUrl();
        currentPortalUrl = await currentUrlClient.portalUrl();
        hostDomain = await currentUrlClient.extractDomain(
          window.location.hostname
        );
      }
      const permissions = [];
      if (skappDomain) {
        const perm1 = new import_skynet_mysky_utils4.Permission(
          hostDomain,
          skappDomain,
          import_skynet_mysky_utils4.PermCategory.Discoverable,
          import_skynet_mysky_utils4.PermType.Write
        );
        const perm2 = new import_skynet_mysky_utils4.Permission(
          hostDomain,
          skappDomain,
          import_skynet_mysky_utils4.PermCategory.Hidden,
          import_skynet_mysky_utils4.PermType.Read
        );
        const perm3 = new import_skynet_mysky_utils4.Permission(
          hostDomain,
          skappDomain,
          import_skynet_mysky_utils4.PermCategory.Hidden,
          import_skynet_mysky_utils4.PermType.Write
        );
        permissions.push(perm1, perm2, perm3);
      }
      MySky.instance = new MySky(
        connector,
        permissions,
        hostDomain,
        currentPortalUrl
      );
      return MySky.instance;
    }
    static async isBrowserSupported() {
      const isSafari = /^((?!chrome|android).)*safari/i.test(
        navigator.userAgent
      );
      if (isSafari) {
        return [false, "MySky is currently not supported in Safari browsers."];
      }
      return [true, ""];
    }
    async loadDacs(...dacs) {
      const promises = [];
      for (const dac of dacs) {
        promises.push(this.loadDac(dac));
      }
      this.dacs.push(...dacs);
      await Promise.all(promises);
    }
    async addPermissions(...permissions) {
      this.pendingPermissions.push(...permissions);
    }
    async checkLogin() {
      const [seedFound, permissionsResponse] = await this.connector.connection
        .remoteHandle()
        .call("checkLogin", this.pendingPermissions);
      const { grantedPermissions, failedPermissions } = permissionsResponse;
      this.grantedPermissions = grantedPermissions;
      this.pendingPermissions = failedPermissions;
      const loggedIn = seedFound && failedPermissions.length === 0;
      if (loggedIn) {
        await this.handleLogin();
      }
      return loggedIn;
    }
    async destroy() {
      this.connector.connection.close();
      const frame = this.connector.childFrame;
      if (frame) {
        if (!frame.parentNode) {
          throw new Error("'childFrame.parentNode' was not set");
        }
        frame.parentNode.removeChild(frame);
      }
    }
    async logout() {
      await this.connector.connection.remoteHandle().call("logout");
      this.connector.client.customOptions.loginFn = void 0;
    }
    async requestLoginAccess() {
      let uiWindow;
      let uiConnection;
      let seedFound = false;
      const { promise: promiseError, controller: controllerError } = (0,
      import_skynet_mysky_utils4.monitorWindowError)();
      const promise = new Promise(async (resolve2, reject) => {
        promiseError.catch((err) => {
          if (err === import_skynet_mysky_utils4.errorWindowClosed) {
            resolve2();
            return;
          }
          reject(err);
        });
        try {
          uiWindow = this.launchUI();
          uiConnection = await this.connectUi(uiWindow);
          const [seedFoundResponse, permissionsResponse] = await uiConnection
            .remoteHandle()
            .call("requestLoginAccess", this.pendingPermissions);
          seedFound = seedFoundResponse;
          const { grantedPermissions, failedPermissions } = permissionsResponse;
          this.grantedPermissions = grantedPermissions;
          this.pendingPermissions = failedPermissions;
          resolve2();
        } catch (err) {
          reject(err);
        }
      });
      await promise
        .catch((err) => {
          throw err;
        })
        .finally(() => {
          if (uiWindow) {
            uiWindow.close();
          }
          if (uiConnection) {
            uiConnection.close();
          }
          controllerError.cleanup();
        });
      const loggedIn = seedFound && this.pendingPermissions.length === 0;
      if (loggedIn) {
        await this.handleLogin();
      }
      return loggedIn;
    }
    async userID() {
      return await this.connector.connection.remoteHandle().call("userID");
    }
    async getEncryptedFileSeed(path3, isDirectory) {
      return await this.getEncryptedPathSeed(path3, isDirectory);
    }
    async getEncryptedPathSeed(path3, isDirectory) {
      validateString("path", path3, "parameter");
      validateBoolean("isDirectory", isDirectory, "parameter");
      return await this.connector.connection
        .remoteHandle()
        .call("getEncryptedFileSeed", path3, isDirectory);
    }
    async signMessage(message) {
      return await this.connector.connection
        .remoteHandle()
        .call("signMessage", message);
    }
    async verifyMessageSignature(message, signature2, publicKey) {
      return await this.connector.connection
        .remoteHandle()
        .call("verifyMessageSignature", message, signature2, publicKey);
    }
    async catchError(errorMsg) {
      const event = new CustomEvent(
        import_skynet_mysky_utils4.dispatchedErrorEvent,
        { detail: errorMsg }
      );
      window.dispatchEvent(event);
    }
    async checkPortalLogin() {
      return await this.connector.connection
        .remoteHandle()
        .call("checkPortalLogin");
    }
    launchUI() {
      const mySkyUrl = new URL(this.connector.url);
      mySkyUrl.pathname = mySkyUiRelativeUrl;
      const uiUrl = mySkyUrl.toString();
      const childWindow = popupCenter(uiUrl, mySkyUiTitle, mySkyUiW, mySkyUiH);
      if (!childWindow) {
        throw new Error(`Could not open window at '${uiUrl}'`);
      }
      return childWindow;
    }
    async connectUi(childWindow) {
      const options = this.connector.options;
      const messenger = new WindowMessenger({
        localWindow: window,
        remoteWindow: childWindow,
        remoteOrigin: "*",
      });
      const methods = {
        catchError: this.catchError,
      };
      const connection = await ParentHandshake(
        messenger,
        methods,
        options.handshakeMaxAttempts,
        options.handshakeAttemptsInterval
      );
      return connection;
    }
    async getPreferredPortal() {
      return await this.connector.connection
        .remoteHandle()
        .call("getPreferredPortal");
    }
    async loadDac(dac) {
      await dac.init(this.connector.client, this.connector.options);
      const perms = dac.getPermissions();
      await this.addPermissions(...perms);
    }
    async handleLogin() {
      await Promise.allSettled(
        this.dacs.map(async (dac) => {
          try {
            await dac.onUserLogin();
          } catch (error) {
            console.warn(error);
          }
        })
      );
    }
    async portalLogin() {
      return await this.connector.connection.remoteHandle().call("portalLogin");
    }
    async redirectIfNotOnPreferredPortal() {
      const currentDomain = window.location.hostname;
      if (currentDomain === "localhost") {
        return;
      }
      const preferredPortalUrl = await this.getPreferredPortal();
      if (preferredPortalUrl === null) {
        return;
      } else if (
        shouldRedirectToPreferredPortalUrl(currentDomain, preferredPortalUrl)
      ) {
        const currentDomainClient = new SkynetClient(currentDomain);
        const newUrl = await getRedirectUrlOnPreferredPortal(
          currentDomainClient,
          window.location.hostname,
          preferredPortalUrl
        );
        const newUrlClient = new SkynetClient(newUrl);
        const portalUrl = await newUrlClient.portalUrl();
        if (portalUrl) {
          redirectPage(newUrl);
        }
      } else {
        this.connector.client = new SkynetClient(preferredPortalUrl);
      }
    }
    async signRegistryEntry(entry, path3) {
      return await this.connector.connection
        .remoteHandle()
        .call("signRegistryEntry", entry, path3);
    }
    async signEncryptedRegistryEntry(entry, path3) {
      return await this.connector.connection
        .remoteHandle()
        .call("signEncryptedRegistryEntry", entry, path3);
    }
  };
  MySky.instance = null;
  function redirectPage(url) {
    window.location.replace(url);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/skydb_v2.js
  var { sign: sign4 } = import_tweetnacl5.default;
  var DELETION_ENTRY_DATA = new Uint8Array(RAW_SKYLINK_SIZE);
  var JSON_RESPONSE_VERSION2 = 2;
  var UNCACHED_REVISION_NUMBER = BigInt(-1);
  var DEFAULT_GET_JSON_OPTIONS = __spreadProps(
    __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_BASE_OPTIONS),
        DEFAULT_GET_ENTRY_OPTIONS
      ),
      DEFAULT_DOWNLOAD_OPTIONS
    ),
    {
      cachedDataLink: void 0,
    }
  );
  var DEFAULT_SET_JSON_OPTIONS = __spreadValues(
    __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_BASE_OPTIONS),
        DEFAULT_UPLOAD_OPTIONS
      ),
      DEFAULT_GET_JSON_OPTIONS
    ),
    DEFAULT_SET_ENTRY_OPTIONS
  );
  var DEFAULT_SET_ENTRY_DATA_OPTIONS = __spreadProps(
    __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_BASE_OPTIONS),
        DEFAULT_GET_ENTRY_OPTIONS
      ),
      DEFAULT_SET_ENTRY_OPTIONS
    ),
    {
      allowDeletionEntryData: false,
    }
  );
  async function getJSON4(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    return await this.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
        const entry = await getSkyDBRegistryEntryAndUpdateCache(
          this,
          publicKey,
          dataKey,
          cachedRevisionEntry,
          getEntryOpts
        );
        if (entry === null) {
          return { data: null, dataLink: null };
        }
        const { rawDataLink, dataLink } = parseDataLink2(entry.data, true);
        if (checkCachedDataLink(rawDataLink, opts.cachedDataLink)) {
          return { data: null, dataLink };
        }
        const downloadOpts = extractOptions(opts, DEFAULT_DOWNLOAD_OPTIONS);
        const { data } = await this.getFileContent(dataLink, downloadOpts);
        if (typeof data !== "object" || data === null) {
          throw new Error(
            `File data for the entry at data key '${dataKey}' is not JSON.`
          );
        }
        if (!(data["_data"] && data["_v"])) {
          return { data, dataLink };
        }
        const actualData = data["_data"];
        if (typeof actualData !== "object" || data === null) {
          throw new Error(
            `File data '_data' for the entry at data key '${dataKey}' is not JSON.`
          );
        }
        return { data: actualData, dataLink };
      }
    );
  }
  async function setJSON4(privateKey, dataKey, json, customOptions) {
    validateHexString("privateKey", privateKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateObject("json", json, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const { publicKey: publicKeyArray } = sign4.keyPair.fromSecretKey(
      hexToUint8Array(privateKey)
    );
    const publicKey = toHexString(publicKeyArray);
    return await this.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const newRevision = incrementRevision(cachedRevisionEntry.revision);
        const [entry, dataLink] = await getOrCreateSkyDBRegistryEntry(
          this,
          dataKey,
          json,
          newRevision,
          opts
        );
        const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
        await this.registry.setEntry(privateKey, entry, setEntryOpts);
        cachedRevisionEntry.revision = newRevision;
        return { data: json, dataLink: formatSkylink(dataLink) };
      }
    );
  }
  async function deleteJSON4(privateKey, dataKey, customOptions) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    await this.dbV2.setEntryData(
      privateKey,
      dataKey,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, opts), { allowDeletionEntryData: true })
    );
  }
  async function setDataLink4(privateKey, dataKey, dataLink, customOptions) {
    const parsedSkylink = validateSkylinkString(
      "dataLink",
      dataLink,
      "parameter"
    );
    const data = decodeSkylink(parsedSkylink);
    await this.dbV2.setEntryData(privateKey, dataKey, data, customOptions);
  }
  async function getEntryData4(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    return await this.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const entry = await getSkyDBRegistryEntryAndUpdateCache(
          this,
          publicKey,
          dataKey,
          cachedRevisionEntry,
          opts
        );
        if (entry === null) {
          return { data: null };
        }
        return { data: entry.data };
      }
    );
  }
  async function setEntryData4(privateKey, dataKey, data, customOptions) {
    validateHexString("privateKey", privateKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateUint8Array("data", data, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_SET_ENTRY_DATA_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_ENTRY_DATA_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    validateEntryData(data, opts.allowDeletionEntryData);
    const { publicKey: publicKeyArray } = sign4.keyPair.fromSecretKey(
      hexToUint8Array(privateKey)
    );
    const publicKey = toHexString(publicKeyArray);
    return await this.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const newRevision = incrementRevision(cachedRevisionEntry.revision);
        const entry = { dataKey, data, revision: newRevision };
        const setEntryOpts = extractOptions(opts, DEFAULT_SET_ENTRY_OPTIONS);
        await this.registry.setEntry(privateKey, entry, setEntryOpts);
        cachedRevisionEntry.revision = newRevision;
        return { data: entry.data };
      }
    );
  }
  async function deleteEntryData4(privateKey, dataKey, customOptions) {
    await this.dbV2.setEntryData(
      privateKey,
      dataKey,
      DELETION_ENTRY_DATA,
      __spreadProps(__spreadValues({}, customOptions), {
        allowDeletionEntryData: true,
      })
    );
  }
  async function getRawBytes2(publicKey, dataKey, customOptions) {
    validatePublicKey("publicKey", publicKey, "parameter");
    validateString("dataKey", dataKey, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    return await this.dbV2.revisionNumberCache.withCachedEntryLock(
      publicKey,
      dataKey,
      async (cachedRevisionEntry) => {
        const getEntryOpts = extractOptions(opts, DEFAULT_GET_ENTRY_OPTIONS);
        const entry = await getSkyDBRegistryEntryAndUpdateCache(
          this,
          publicKey,
          dataKey,
          cachedRevisionEntry,
          getEntryOpts
        );
        if (entry === null) {
          return { data: null, dataLink: null };
        }
        const { rawDataLink, dataLink } = parseDataLink2(entry.data, false);
        if (checkCachedDataLink(rawDataLink, opts.cachedDataLink)) {
          return { data: null, dataLink };
        }
        const downloadOpts = __spreadProps(
          __spreadValues({}, extractOptions(opts, DEFAULT_DOWNLOAD_OPTIONS)),
          {
            responseType: "arraybuffer",
          }
        );
        const { data: buffer } = await this.getFileContent(
          dataLink,
          downloadOpts
        );
        return { data: new Uint8Array(buffer), dataLink };
      }
    );
  }
  async function getOrCreateSkyDBRegistryEntry(
    client,
    dataKey,
    data,
    revision,
    customOptions
  ) {
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_SET_JSON_OPTIONS),
        client.customOptions
      ),
      customOptions
    );
    let fullData;
    if (!(data instanceof Uint8Array)) {
      const skynetJson = buildSkynetJsonObject(data);
      fullData = JSON.stringify(skynetJson);
    } else {
      fullData = data;
    }
    let dataKeyHex = dataKey;
    if (!opts.hashedDataKeyHex) {
      dataKeyHex = toHexString(stringToUint8ArrayUtf8(dataKey));
    }
    const file = new File([fullData], `dk:${dataKeyHex}`, {
      type: "application/json",
    });
    const uploadOpts = extractOptions(opts, DEFAULT_UPLOAD_OPTIONS);
    const skyfile = await client.uploadFile(file, uploadOpts);
    const dataLink = trimUriPrefix(skyfile.skylink, URI_SKYNET_PREFIX);
    const rawDataLink = decodeSkylinkBase64(dataLink);
    validateUint8ArrayLen(
      "rawDataLink",
      rawDataLink,
      "skylink byte array",
      RAW_SKYLINK_SIZE
    );
    const entry = {
      dataKey,
      data: rawDataLink,
      revision,
    };
    return [entry, formatSkylink(dataLink)];
  }
  function incrementRevision(revision) {
    revision = revision + BigInt(1);
    if (revision > MAX_REVISION) {
      throw new Error(
        "Current entry already has maximum allowed revision, could not update the entry"
      );
    }
    return revision;
  }
  function checkCachedDataLink(rawDataLink, cachedDataLink) {
    if (cachedDataLink) {
      cachedDataLink = validateSkylinkString(
        "cachedDataLink",
        cachedDataLink,
        "optional parameter"
      );
      return rawDataLink === cachedDataLink;
    }
    return false;
  }
  function validateEntryData(data, allowDeletionEntryData) {
    if (data.length > MAX_ENTRY_LENGTH) {
      throwValidationError(
        "data",
        data,
        "parameter",
        `'Uint8Array' of length <= ${MAX_ENTRY_LENGTH}, was length ${data.length}`
      );
    }
    if (
      !allowDeletionEntryData &&
      areEqualUint8Arrays(data, DELETION_ENTRY_DATA)
    ) {
      throw new Error(
        "Tried to set 'Uint8Array' entry data that is the deletion sentinel ('Uint8Array(RAW_SKYLINK_SIZE)'), please use the 'deleteEntryData' method instead`"
      );
    }
  }
  async function getSkyDBRegistryEntryAndUpdateCache(
    client,
    publicKey,
    dataKey,
    cachedRevisionEntry,
    opts
  ) {
    var _a;
    const { entry } = await client.registry.getEntry(publicKey, dataKey, opts);
    if (entry === null) {
      return null;
    }
    const newRevision =
      (_a = entry === null || entry === void 0 ? void 0 : entry.revision) !==
        null && _a !== void 0
        ? _a
        : UNCACHED_REVISION_NUMBER + BigInt(1);
    const cachedRevision = cachedRevisionEntry.revision;
    if (cachedRevision && cachedRevision > newRevision) {
      throw new Error(
        "Returned revision number too low. A higher revision number for this userID and path is already cached"
      );
    }
    cachedRevisionEntry.revision = newRevision;
    if (wasRegistryEntryDeleted(entry)) {
      return null;
    }
    return entry;
  }
  function buildSkynetJsonObject(data) {
    return { _data: data, _v: JSON_RESPONSE_VERSION2 };
  }
  function parseDataLink2(data, legacy) {
    let rawDataLink = "";
    if (legacy && data.length === BASE64_ENCODED_SKYLINK_SIZE) {
      rawDataLink = uint8ArrayToStringUtf8(data);
    } else if (data.length === RAW_SKYLINK_SIZE) {
      rawDataLink = encodeSkylinkBase64(data);
    } else {
      throwValidationError(
        "entry.data",
        data,
        "returned entry data",
        `length ${RAW_SKYLINK_SIZE} bytes`
      );
    }
    return { rawDataLink, dataLink: formatSkylink(rawDataLink) };
  }
  function wasRegistryEntryDeleted(entry) {
    return areEqualUint8Arrays(entry.data, EMPTY_SKYLINK);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/file.js
  async function getJSON5(userID, path3, customOptions) {
    validateString("userID", userID, "parameter");
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.dbV2.getJSON(userID, dataKey, opts);
  }
  async function getEntryLink4(userID, path3) {
    validateString("userID", userID, "parameter");
    validateString("path", path3, "parameter");
    const dataKey = deriveDiscoverableFileTweak(path3);
    const opts = __spreadProps(__spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS), {
      hashedDataKeyHex: true,
    });
    return getEntryLink(userID, dataKey, opts);
  }
  async function getEntryData5(userID, path3, customOptions) {
    validateString("userID", userID, "parameter");
    validateString("path", path3, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_ENTRY_OPTIONS
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_GET_ENTRY_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const dataKey = deriveDiscoverableFileTweak(path3);
    opts.hashedDataKeyHex = true;
    return await this.dbV2.getEntryData(userID, dataKey, opts);
  }
  async function getJSONEncrypted3(userID, pathSeed, customOptions) {
    validateString("userID", userID, "parameter");
    validateString("pathSeed", pathSeed, "parameter");
    validateOptionalObject(
      "customOptions",
      customOptions,
      "parameter",
      DEFAULT_GET_JSON_OPTIONS
    );
    const opts = __spreadProps(
      __spreadValues(
        __spreadValues(
          __spreadValues({}, DEFAULT_GET_JSON_OPTIONS),
          this.customOptions
        ),
        customOptions
      ),
      {
        hashedDataKeyHex: true,
      }
    );
    const key2 = deriveEncryptedFileKeyEntropy(pathSeed);
    const dataKey = deriveEncryptedFileTweak(pathSeed);
    const { data } = await this.dbV2.getRawBytes(userID, dataKey, opts);
    if (data === null) {
      return { data: null };
    }
    const json = decryptJSONFile(data, key2);
    return { data: json };
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/pin.js
  var DEFAULT_PIN_OPTIONS = __spreadProps(
    __spreadValues({}, DEFAULT_BASE_OPTIONS),
    {
      endpointPin: "/skynet/pin",
    }
  );
  async function pinSkylink(skylinkUrl, customOptions) {
    const skylink = validateSkylinkString(
      "skylinkUrl",
      skylinkUrl,
      "parameter"
    );
    const opts = __spreadValues(
      __spreadValues(
        __spreadValues({}, DEFAULT_PIN_OPTIONS),
        this.customOptions
      ),
      customOptions
    );
    const path3 = parseSkylink(skylinkUrl, { onlyPath: true });
    if (path3) {
      throw new Error("Skylink string should not contain a path");
    }
    const response = await this.executeRequest(
      __spreadProps(__spreadValues({}, opts), {
        endpointPath: opts.endpointPin,
        method: "post",
        extraPath: skylink,
      })
    );
    validatePinResponse(response);
    let returnedSkylink = response.headers["skynet-skylink"];
    returnedSkylink = formatSkylink(returnedSkylink);
    return { skylink: returnedSkylink };
  }
  function validatePinResponse(response) {
    try {
      if (!response.headers) {
        throw new Error("response.headers field missing");
      }
      validateString(
        'response.headers["skynet-skylink"]',
        response.headers["skynet-skylink"],
        "pin response field"
      );
    } catch (err) {
      throw new Error(
        `Did not get a complete pin response despite a successful request. Please try again and report this issue to the devs if it persists. ${err}`
      );
    }
  }

  // node_modules/async-mutex/index.mjs
  var E_TIMEOUT = new Error(
    "timeout while waiting for mutex to become available"
  );
  var E_ALREADY_LOCKED = new Error("mutex already locked");
  var E_CANCELED = new Error("request for lock canceled");
  var __awaiter$2 = function (thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2
        ? value
        : new P2(function (resolve2) {
            resolve2(value);
          });
    }
    return new (P2 || (P2 = Promise))(function (resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve2(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Semaphore = class {
    constructor(_maxConcurrency, _cancelError = E_CANCELED) {
      this._maxConcurrency = _maxConcurrency;
      this._cancelError = _cancelError;
      this._queue = [];
      this._waiters = [];
      if (_maxConcurrency <= 0) {
        throw new Error("semaphore must be initialized to a positive value");
      }
      this._value = _maxConcurrency;
    }
    acquire() {
      const locked = this.isLocked();
      const ticketPromise = new Promise((resolve2, reject) =>
        this._queue.push({ resolve: resolve2, reject })
      );
      if (!locked) this._dispatch();
      return ticketPromise;
    }
    runExclusive(callback) {
      return __awaiter$2(this, void 0, void 0, function* () {
        const [value, release] = yield this.acquire();
        try {
          return yield callback(value);
        } finally {
          release();
        }
      });
    }
    waitForUnlock() {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (!this.isLocked()) {
          return Promise.resolve();
        }
        const waitPromise = new Promise((resolve2) =>
          this._waiters.push({ resolve: resolve2 })
        );
        return waitPromise;
      });
    }
    isLocked() {
      return this._value <= 0;
    }
    release() {
      if (this._maxConcurrency > 1) {
        throw new Error(
          "this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead"
        );
      }
      if (this._currentReleaser) {
        const releaser = this._currentReleaser;
        this._currentReleaser = void 0;
        releaser();
      }
    }
    cancel() {
      this._queue.forEach((ticket) => ticket.reject(this._cancelError));
      this._queue = [];
    }
    _dispatch() {
      const nextTicket = this._queue.shift();
      if (!nextTicket) return;
      let released = false;
      this._currentReleaser = () => {
        if (released) return;
        released = true;
        this._value++;
        this._resolveWaiters();
        this._dispatch();
      };
      nextTicket.resolve([this._value--, this._currentReleaser]);
    }
    _resolveWaiters() {
      this._waiters.forEach((waiter) => waiter.resolve());
      this._waiters = [];
    }
  };
  var __awaiter$1 = function (thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2
        ? value
        : new P2(function (resolve2) {
            resolve2(value);
          });
    }
    return new (P2 || (P2 = Promise))(function (resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve2(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var Mutex = class {
    constructor(cancelError) {
      this._semaphore = new Semaphore(1, cancelError);
    }
    acquire() {
      return __awaiter$1(this, void 0, void 0, function* () {
        const [, releaser] = yield this._semaphore.acquire();
        return releaser;
      });
    }
    runExclusive(callback) {
      return this._semaphore.runExclusive(() => callback());
    }
    isLocked() {
      return this._semaphore.isLocked();
    }
    waitForUnlock() {
      return this._semaphore.waitForUnlock();
    }
    release() {
      this._semaphore.release();
    }
    cancel() {
      return this._semaphore.cancel();
    }
  };
  var __awaiter = function (thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2
        ? value
        : new P2(function (resolve2) {
            resolve2(value);
          });
    }
    return new (P2 || (P2 = Promise))(function (resolve2, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve2(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {
    return {
      acquire: () =>
        new Promise((resolve2, reject) =>
          __awaiter(this, void 0, void 0, function* () {
            let isTimeout = false;
            const handle = setTimeout(() => {
              isTimeout = true;
              reject(timeoutError);
            }, timeout);
            try {
              const ticket = yield sync.acquire();
              if (isTimeout) {
                const release = Array.isArray(ticket) ? ticket[1] : ticket;
                release();
              } else {
                clearTimeout(handle);
                resolve2(ticket);
              }
            } catch (e) {
              if (!isTimeout) {
                clearTimeout(handle);
                reject(e);
              }
            }
          })
        ),
      runExclusive(callback) {
        return __awaiter(this, void 0, void 0, function* () {
          let release = () => void 0;
          try {
            const ticket = yield this.acquire();
            if (Array.isArray(ticket)) {
              release = ticket[1];
              return yield callback(ticket[0]);
            } else {
              release = ticket;
              return yield callback();
            }
          } finally {
            release();
          }
        });
      },
      release() {
        sync.release();
      },
      cancel() {
        return sync.cancel();
      },
      waitForUnlock: () => sync.waitForUnlock(),
      isLocked: () => sync.isLocked(),
    };
  }
  function tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {
    return withTimeout(sync, 0, alreadyAcquiredError);
  }

  // node_modules/@lumeweb/skynet-js/dist/mjs/revision_cache.js
  var RevisionNumberCache = class {
    constructor() {
      this.mutex = new Mutex();
      this.cache = {};
    }
    static getCacheKey(publicKey, dataKey) {
      return `${publicKey}/${dataKey}`;
    }
    async getRevisionAndMutexForEntry(publicKey, dataKey) {
      const cacheKey = RevisionNumberCache.getCacheKey(publicKey, dataKey);
      return await this.mutex.runExclusive(async () => {
        if (!this.cache[cacheKey]) {
          this.cache[cacheKey] = new CachedRevisionNumber();
        }
        return this.cache[cacheKey];
      });
    }
    async withCachedEntryLock(publicKey, dataKey, exclusiveFn) {
      const cachedRevisionEntry = await this.getRevisionAndMutexForEntry(
        publicKey,
        dataKey
      );
      try {
        return await tryAcquire(cachedRevisionEntry.mutex).runExclusive(
          async () => exclusiveFn(cachedRevisionEntry)
        );
      } catch (e) {
        if (e.message.includes("mutex already locked")) {
          throw new Error(
            `Concurrent access prevented in SkyDB for entry { publicKey: ${publicKey}, dataKey: ${dataKey} }`
          );
        } else {
          throw e;
        }
      }
    }
  };
  var CachedRevisionNumber = class {
    constructor() {
      this.mutex = new Mutex();
      this.revision = BigInt(-1);
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/client.js
  import_axios.default.interceptors.response.use(
    function (response) {
      return response;
    },
    function (error) {
      return Promise.reject(ExecuteRequestError.From(error));
    }
  );
  var SkynetClient = class {
    constructor(initialPortalUrl = "", customOptions = {}) {
      this.uploadFile = uploadFile;
      this.uploadSmallFile = uploadSmallFile;
      this.uploadSmallFileRequest = uploadSmallFileRequest;
      this.uploadLargeFile = uploadLargeFile;
      this.uploadLargeFileRequest = uploadLargeFileRequest;
      this.uploadDirectory = uploadDirectory;
      this.uploadDirectoryRequest = uploadDirectoryRequest;
      this.downloadFile = downloadFile;
      this.downloadFileHns = downloadFileHns;
      this.getSkylinkUrl = getSkylinkUrl;
      this.getHnsUrl = getHnsUrl;
      this.getHnsresUrl = getHnsresUrl;
      this.getMetadata = getMetadata;
      this.getFileContent = getFileContent;
      this.getFileContentRequest = getFileContentRequest;
      this.getFileContentHns = getFileContentHns;
      this.openFile = openFile;
      this.openFileHns = openFileHns;
      this.resolveHns = resolveHns;
      this.pinSkylink = pinSkylink;
      this.extractDomain = extractDomain;
      this.getFullDomainUrl = getFullDomainUrl;
      this.loadMySky = loadMySky;
      this.file = {
        getJSON: getJSON5.bind(this),
        getEntryData: getEntryData5.bind(this),
        getEntryLink: getEntryLink4.bind(this),
        getJSONEncrypted: getJSONEncrypted3.bind(this),
      };
      this.db = {
        getJSON: getJSON2.bind(this),
        setJSON: setJSON2.bind(this),
        deleteJSON: deleteJSON2.bind(this),
        getRawBytes: getRawBytes.bind(this),
        setDataLink: setDataLink2.bind(this),
        getEntryData: getEntryData2.bind(this),
        setEntryData: setEntryData2.bind(this),
        deleteEntryData: deleteEntryData2.bind(this),
      };
      this.dbV2 = {
        getJSON: getJSON4.bind(this),
        setJSON: setJSON4.bind(this),
        deleteJSON: deleteJSON4.bind(this),
        getRawBytes: getRawBytes2.bind(this),
        setDataLink: setDataLink4.bind(this),
        getEntryData: getEntryData4.bind(this),
        setEntryData: setEntryData4.bind(this),
        deleteEntryData: deleteEntryData4.bind(this),
        revisionNumberCache: new RevisionNumberCache(),
      };
      this.registry = {
        getEntry: getEntry.bind(this),
        getEntryUrl: getEntryUrl.bind(this),
        getEntryLink: getEntryLinkAsync.bind(this),
        setEntry: setEntry.bind(this),
        postSignedEntry: postSignedEntry.bind(this),
      };
      if (initialPortalUrl === "") {
        initialPortalUrl = defaultPortalUrl();
      } else {
        this.customPortalUrl = (0, import_skynet_mysky_utils5.ensureUrl)(
          initialPortalUrl
        );
      }
      this.initialPortalUrl = initialPortalUrl;
      this.customOptions = customOptions;
    }
    async initPortalUrl() {
      if (this.customPortalUrl) {
        return;
      }
      if (!SkynetClient.resolvedPortalUrl) {
        SkynetClient.resolvedPortalUrl = this.resolvePortalUrl();
      } else {
        try {
          await SkynetClient.resolvedPortalUrl;
        } catch (e) {
          SkynetClient.resolvedPortalUrl = this.resolvePortalUrl();
        }
      }
      await SkynetClient.resolvedPortalUrl;
      return;
    }
    async portalUrl() {
      if (this.customPortalUrl) {
        return this.customPortalUrl;
      }
      await this.initPortalUrl();
      return await SkynetClient.resolvedPortalUrl;
    }
    async executeRequest(config) {
      const url = await buildRequestUrl(this, {
        baseUrl: config.url,
        endpointPath: config.endpointPath,
        subdomain: config.subdomain,
        extraPath: config.extraPath,
        query: config.query,
      });
      const headers = buildRequestHeaders(
        config.headers,
        config.customUserAgent,
        config.customCookie
      );
      const auth = config.APIKey
        ? { username: "", password: config.APIKey }
        : void 0;
      let onDownloadProgress = void 0;
      if (config.onDownloadProgress) {
        onDownloadProgress = function (event) {
          const progress = event.total ? event.loaded / event.total : 1;
          config.onDownloadProgress(progress, event);
        };
      }
      let onUploadProgress = void 0;
      if (config.onUploadProgress) {
        onUploadProgress = function (event) {
          const progress = event.total ? event.loaded / event.total : 1;
          config.onUploadProgress(progress, event);
        };
      }
      try {
        return await (0, import_axios.default)({
          url,
          method: config.method,
          data: config.data,
          headers,
          auth,
          onDownloadProgress,
          onUploadProgress,
          responseType: config.responseType,
          transformRequest: config.transformRequest,
          transformResponse: config.transformResponse,
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
          withCredentials: true,
        });
      } catch (e) {
        if (config.loginFn && e.responseStatus === 401) {
          await config.loginFn();
          return await this.executeRequest(config);
        } else {
          throw e;
        }
      }
    }
    async resolvePortalServerUrl() {
      const response = await this.executeRequest(
        __spreadProps(__spreadValues({}, this.customOptions), {
          method: "head",
          url: this.initialPortalUrl,
        })
      );
      if (!response.headers) {
        throw new Error(
          "Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists."
        );
      }
      const portalUrl = response.headers["skynet-server-api"];
      if (!portalUrl) {
        throw new Error("Could not get server portal URL for the given portal");
      }
      return portalUrl;
    }
    async resolvePortalUrl() {
      const response = await this.executeRequest(
        __spreadProps(__spreadValues({}, this.customOptions), {
          method: "head",
          url: this.initialPortalUrl,
        })
      );
      if (!response.headers) {
        throw new Error(
          "Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists."
        );
      }
      const portalUrl = response.headers["skynet-portal-api"];
      if (!portalUrl) {
        throw new Error("Could not get portal URL for the given portal");
      }
      return portalUrl;
    }
  };

  // node_modules/@lumeweb/skynet-js/dist/mjs/index.js
  var import_skynet_mysky_utils6 = __toESM(require_dist(), 1);

  // src/SubResolverBase.ts
  var SubResolverBase = class {
    resolver;
    constructor(resolver2) {
      this.resolver = resolver2;
    }
  };

  // src/resolvers/handshake.ts
  var import_tld_enum = __toESM(require_tld_enum(), 1);
  var Handshake = class extends SubResolverBase {
    async resolve(input, params = {}) {
      let tld = input;
      if (isIp(input)) {
        return false;
      }
      if (input.endsWith(".eth")) {
        return false;
      }
      if ("subquery" in params) {
        return false;
      }
      if (input.includes(".")) {
        tld = input.split(".")[input.split(".").length - 1];
      }
      const records = await this.query(tld);
      if (!records) {
        return false;
      }
      let result = false;
      for (const record of records.reverse()) {
        switch (record.type) {
          case "NS": {
            result = await this.processNs(input, record, records);
            break;
          }
          case "TXT": {
            result = await this.processTxt(record);
            break;
          }
          case "SYNTH6": {
            if ("ipv6" in params && params.ipv6) {
              result = record.address;
            }
            break;
          }
          case "SYNTH4": {
            result = record.address;
            break;
          }
          default: {
            break;
          }
        }
        if (result) {
          break;
        }
      }
      return result;
    }
    async processNs(domain, record, records) {
      const glue = records
        .slice()
        .find(
          (item) =>
            ["GLUE4", "GLUE6"].includes(item.type) && item.ns === record.ns
        );
      if (glue) {
        return this.resolver.resolve(domain, {
          subquery: true,
          nameserver: glue.address,
        });
      }
      const foundDomain = normalizeDomain(record.ns);
      let isIcann = false;
      if (isDomain(foundDomain) || /[a-zA-Z0-9\-]+/.test(foundDomain)) {
        if (foundDomain.includes(".")) {
          const tld = foundDomain.split(".")[foundDomain.split(".").length - 1];
          isIcann = import_tld_enum.default.list.includes(tld);
        }
        if (!isIcann) {
          const hnsNs = await this.resolver.resolve(foundDomain);
          if (hnsNs) {
            return this.resolver.resolve(domain, {
              subquery: true,
              nameserver: hnsNs,
            });
          }
        }
        return this.resolver.resolve(domain, {
          subquery: true,
          nameserver: foundDomain,
        });
      }
      const result = await this.resolver.resolve(record.ns, { domain });
      return result || record.ns;
    }
    async query(tld) {
      var _a;
      const portal = this.resolver.getPortal();
      const clientOptions = {
        ssl: true,
        network: "main",
        host: portal,
        port: 443,
        headers: {
          "x-chain": "hns",
        },
      };
      const client = new HnsClient(clientOptions);
      let resp;
      try {
        resp = await client.execute("getnameresource", [tld]);
      } catch (e) {
        return false;
      }
      return (
        ((_a = resp == null ? void 0 : resp.result) == null
          ? void 0
          : _a.records) || []
      );
    }
    async processTxt(record) {
      var _a;
      let matches = record.txt.slice().pop().match(startsWithSkylinkRegExp);
      if (matches) {
        return decodeURIComponent(matches[2]);
      }
      matches = record.txt.slice().pop().match(registryEntryRegExp);
      if (matches) {
        const client = new SkynetClient(`https://${this.resolver.getPortal()}`);
        const pubKey = decodeURIComponent(matches.groups.publickey).replace(
          "ed25519:",
          ""
        );
        const entry = await client.registry.getEntry(
          pubKey,
          matches.groups.datakey,
          { hashedDataKeyHex: true }
        );
        return Buffer.from(
          (_a = entry.entry) == null ? void 0 : _a.data
        ).toString();
      }
      return false;
    }
  };

  // src/resolvers/icann.ts
  var Icann = class extends SubResolverBase {
    async resolve(input, params = {}) {
      var _a;
      if (!params || !("subquery" in params) || !params.subquery) {
        return false;
      }
      if (!isDomain(input) && !("nameserver" in params || !params.nameserver)) {
        return false;
      }
      const portal = src_default.getPortal();
      const clientOptions = {
        ssl: true,
        host: portal,
        port: 443,
        path: "/pocketdns",
        headers: {
          "x-chain": "icann",
        },
      };
      const client = new HnsClient(clientOptions);
      let resp = false;
      try {
        const rpcParams = {};
        rpcParams.domain = input;
        rpcParams.nameserver = (_a = params.nameserver) != null ? _a : void 0;
        resp = await client.execute("dnslookup", rpcParams);
      } catch (e) {
        return false;
      }
      return resp.result;
    }
  };

  // src/resolvers/eip137.ts
  var import_ensjs = __toESM(require_dist2(), 1);
  init_lib93();
  var import_url14 = __toESM(__require("url"), 1);
  var ENS = import_ensjs.default.default;
  var Eip137 = class extends SubResolverBase {
    async resolve(input, params = {}) {
      if (input.endsWith(".eth")) {
        return this.resolveEns(input);
      }
      const hip5Data = input.split(".");
      if (2 <= hip5Data.length && "domain" in params) {
        if (ethers_exports.utils.isAddress(hip5Data[0])) {
          return this.resolveHip5(params.domain, hip5Data);
        }
      }
      return false;
    }
    async resolveEns(input) {
      const data = [(0, import_ensjs.getEnsAddress)("1"), "eth-mainnet"];
      return this.resolveHip5(input, data);
    }
    async resolveHip5(domain, data) {
      const connection = this.getConnection(data[1].replace("_", ""));
      const ens = new ENS({ provider: connection, ensAddress: data[0] });
      try {
        const name2 = await ens.name(domain);
        const contentResult = await name2.getContent();
        const url = await name2.getText("url");
        let content;
        if (typeof contentResult === "string" && Number(contentResult) === 0) {
          content = false;
        }
        if (
          typeof contentResult === "object" &&
          contentResult.contentType === "contenthash"
        ) {
          content = contentResult.value;
        }
        return content || url || false;
      } catch (e) {
        return false;
      }
    }
    getConnection(chain) {
      const apiUrl = new import_url14.default.parse(
        `https://${this.resolver.getPortal()}/pocketdns`
      );
      if (import_url14.default.URLSearchParams) {
        const params = new import_url14.default.URLSearchParams();
        params.set("chain", chain);
        apiUrl.search = params.toString();
      } else {
        apiUrl.search = `?chain=${chain}`;
      }
      return new ethers_exports.providers.StaticJsonRpcProvider({
        url: apiUrl.toString(),
      });
    }
  };

  // src/index.ts
  var resolver = new Resolver();
  resolver.registerResolver(new Icann(resolver));
  resolver.registerResolver(new Eip137(resolver));
  resolver.registerResolver(new Handshake(resolver));
  var src_default = resolver;
})();
/*!
 * assert.js - assertions for javascript
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bsert
 */
/*!
 * bcurl.js - simple http client
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcurl
 */
/*!
 * brq.js - simple request module
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*!
 * client.js - http client for bcurl
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcurl
 */
/*!
 * client.js - http client for wallets
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */
/*!
 * faye-websocket@0.11.1 - Standards-compliant WebSocket server and client
 * Copyright (c) 2019, James Coglan (MIT)
 * https://github.com/faye/faye-websocket-node
 *
 * License for websocket-driver@0.7.0:
 *
 * # The MIT License
 *
 * Copyright (c) 2010-2017 James Coglan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * License for http-parser-js@0.5.0:
 *
 * Copyright (c) 2015 Tim Caswell (https://github.com/creationix) and other
 * contributors. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Some files from the tests folder are from joyent/node and mscedex/io.js, a
 * fork of nodejs/io.js:
 *
 * - tests/iojs/test-http-parser-durability.js
 *
 * This file is from
 * https://github.com/mscdex/io.js/blob/js-http-parser/test/pummel/test-http-parser-durability.js
 * with modifications by Jan Schär (jscissr).
 *
 * """ Copyright io.js contributors. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. """
 *
 * - tests/fixtures/* tests/parallel/* tests/testpy/* tests/common.js
 * tests/test.py tests/utils.py
 *
 * These files are from https://github.com/nodejs/node with changes by Jan Schär
 * (jscissr).
 *
 * Node.js is licensed for use as follows:
 *
 * """ Copyright Node.js contributors. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. """
 *
 * This license applies to parts of Node.js originating from the
 * https://github.com/joyent/node repository:
 *
 * """ Copyright Joyent, Inc. and other Node contributors. All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE. """
 *
 * License for websocket-extensions@0.1.3:
 *
 * # The MIT License
 *
 * Copyright (c) 2014-2017 James Coglan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/*!
 * hs-client.js - http clients for hs
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */
/*!
 * mime.js - mime types for brq
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*!
 * parser.js - packet parser
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/chjj
 */
/*!
 * request.js - http request for brq
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/brq
 */
/*!
 * wallet.js - http wallet for bcoin
 * Copyright (c) 2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
//# sourceMappingURL=index.global.js.map
